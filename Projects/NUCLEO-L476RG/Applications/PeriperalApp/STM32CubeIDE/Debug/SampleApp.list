
PeriperalApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc4  08008fc4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fcc  08008fcc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  20000098  0800906c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  0800906c  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001d2f1  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009d  00000000  00000000  0003d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e7ea  00000000  00000000  0003d499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003988  00000000  00000000  0005bc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001840  00000000  00000000  0005f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeca  00000000  00000000  00060e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000012e2  00000000  00000000  0015bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ac20  00000000  00000000  0015cffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c4c  00000000  00000000  00187c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d08 	.word	0x08008d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008d08 	.word	0x08008d08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c8:	f001 fe80 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ce:	e003      	b.n	80004d8 <LoopCopyDataInit>

080004d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d6:	3104      	adds	r1, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004e0:	d3f6      	bcc.n	80004d0 <CopyDataInit>
	ldr	r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e4:	e002      	b.n	80004ec <LoopFillZerobss>

080004e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e8:	f842 3b04 	str.w	r3, [r2], #4

080004ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LoopForever+0x16>)
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004f0:	d3f9      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f2:	f008 fb7d 	bl	8008bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f6:	f001 f9a4 	bl	8001842 <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000500:	08008fd4 	.word	0x08008fd4
	ldr	r0, =_sdata
 8000504:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000508:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 800050c:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8000510:	20000a48 	.word	0x20000a48

08000514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_2_IRQHandler>
	...

08000518 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 800051e:	f000 f9fb 	bl	8000918 <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 8000522:	2100      	movs	r1, #0
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_BlueNRG_2_Init+0x2c>)
 8000526:	f007 fe45 	bl	80081b4 <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");

  /* Init Sample App Device */
  ret = PeriperalAppInit();
 800052a:	f000 f9bb 	bl	80008a4 <PeriperalAppInit>
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <MX_BlueNRG_2_Init+0x22>
  {
    PRINT_DBG("PeriperalAppInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8000538:	e7fe      	b.n	8000538 <MX_BlueNRG_2_Init+0x20>
  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	08001381 	.word	0x08001381

08000548 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 800054c:	f007 ffac 	bl	80084a8 <hci_user_evt_proc>
  User_Process();
 8000550:	f000 fb40 	bl	8000bd4 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
static void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af04      	add	r7, sp, #16
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
  uint32_t tickstart = HAL_GetTick();
 8000564:	f001 feb4 	bl	80022d0 <HAL_GetTick>
 8000568:	60f8      	str	r0, [r7, #12]

  if(device_role == SLAVE_ROLE)
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <sendData+0xbc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d13c      	bne.n	80005ec <sendData+0x94>
  {
    while(aci_gatt_update_char_value_ext(connection_handle,
 8000572:	e018      	b.n	80005a6 <sendData+0x4e>
                                         sampleServHandle,
                                         TXCharHandle,
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
    {
      APP_FLAG_SET(TX_BUFFER_FULL);
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <sendData+0xc0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <sendData+0xc0>)
 800057e:	6013      	str	r3, [r2, #0]
      while(APP_FLAG(TX_BUFFER_FULL)) {
 8000580:	e00b      	b.n	800059a <sendData+0x42>
        hci_user_evt_proc();
 8000582:	f007 ff91 	bl	80084a8 <hci_user_evt_proc>
        // Radio is busy (buffer full).
        if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000586:	f001 fea3 	bl	80022d0 <HAL_GetTick>
 800058a:	4602      	mov	r2, r0
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	f242 7210 	movw	r2, #10000	; 0x2710
 8000594:	4293      	cmp	r3, r2
 8000596:	d900      	bls.n	800059a <sendData+0x42>
 8000598:	e005      	b.n	80005a6 <sendData+0x4e>
      while(APP_FLAG(TX_BUFFER_FULL)) {
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <sendData+0xc0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1ed      	bne.n	8000582 <sendData+0x2a>
    while(aci_gatt_update_char_value_ext(connection_handle,
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <sendData+0xc4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b298      	uxth	r0, r3
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <sendData+0xc8>)
 80005ae:	8819      	ldrh	r1, [r3, #0]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <sendData+0xcc>)
 80005b2:	881c      	ldrh	r4, [r3, #0]
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	78fa      	ldrb	r2, [r7, #3]
 80005be:	9202      	str	r2, [sp, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4622      	mov	r2, r4
 80005ca:	f005 fffe 	bl	80065ca <aci_gatt_update_char_value_ext>
 80005ce:	4603      	mov	r3, r0
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
 80005d0:	2b64      	cmp	r3, #100	; 0x64
 80005d2:	d0cf      	beq.n	8000574 <sendData+0x1c>
      hci_user_evt_proc();
      // Radio is busy (buffer full).
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
    }
  }
}
 80005d4:	e01a      	b.n	800060c <sendData+0xb4>
      hci_user_evt_proc();
 80005d6:	f007 ff67 	bl	80084a8 <hci_user_evt_proc>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80005da:	f001 fe79 	bl	80022d0 <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d80e      	bhi.n	800060a <sendData+0xb2>
    while(aci_gatt_write_without_resp(connection_handle, rx_handle+1, Nb_bytes, data_buffer)==BLE_STATUS_NOT_ALLOWED)
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <sendData+0xc4>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b298      	uxth	r0, r3
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <sendData+0xd0>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b299      	uxth	r1, r3
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f005 ff3f 	bl	8006480 <aci_gatt_write_without_resp>
 8000602:	4603      	mov	r3, r0
 8000604:	2b46      	cmp	r3, #70	; 0x46
 8000606:	d0e6      	beq.n	80005d6 <sendData+0x7e>
}
 8000608:	e000      	b.n	800060c <sendData+0xb4>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800060a:	bf00      	nop
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	20000004 	.word	0x20000004
 8000618:	20000000 	.word	0x20000000
 800061c:	200000cc 	.word	0x200000cc
 8000620:	20000134 	.word	0x20000134
 8000624:	20000136 	.word	0x20000136
 8000628:	200000f2 	.word	0x200000f2

0800062c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000638:	2000      	movs	r0, #0
 800063a:	f001 fa7d 	bl	8001b38 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e002      	b.n	800064a <receiveData+0x1e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbf8      	blt.n	8000644 <receiveData+0x18>
  {
    PRINT_DBG("%c", data_buffer[i]);
  }
  fflush(stdout);
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <receiveData+0x3c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4618      	mov	r0, r3
 800065a:	f008 f963 	bl	8008924 <fflush>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000094 	.word	0x20000094

0800066c <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <Reset_DiscoveryContext+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <Reset_DiscoveryContext+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <Reset_DiscoveryContext+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <Reset_DiscoveryContext+0xb0>)
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <Reset_DiscoveryContext+0xb0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <Reset_DiscoveryContext+0xb0>)
 8000692:	2200      	movs	r2, #0
 8000694:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 8000696:	2206      	movs	r2, #6
 8000698:	2100      	movs	r1, #0
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <Reset_DiscoveryContext+0xb4>)
 800069c:	f008 fa59 	bl	8008b52 <memset>
  device_role = 0xFF;
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <Reset_DiscoveryContext+0xb8>)
 80006a2:	22ff      	movs	r2, #255	; 0xff
 80006a4:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <Reset_DiscoveryContext+0xbc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <Reset_DiscoveryContext+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
  write_char_len = CHAR_VALUE_LENGTH-3;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <Reset_DiscoveryContext+0xc4>)
 80006b4:	223c      	movs	r2, #60	; 0x3c
 80006b6:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	e026      	b.n	800070c <Reset_DiscoveryContext+0xa0>
    data[i] = 0x31 + (i%10);
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <Reset_DiscoveryContext+0xc8>)
 80006c2:	fba3 1302 	umull	r1, r3, r3, r2
 80006c6:	08d9      	lsrs	r1, r3, #3
 80006c8:	460b      	mov	r3, r1
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	3231      	adds	r2, #49	; 0x31
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <Reset_DiscoveryContext+0xcc>)
 80006de:	54d1      	strb	r1, [r2, r3]
    if ((i+1)%10==0) {
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	1c59      	adds	r1, r3, #1
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <Reset_DiscoveryContext+0xd0>)
 80006e6:	fb83 2301 	smull	r2, r3, r3, r1
 80006ea:	109a      	asrs	r2, r3, #2
 80006ec:	17cb      	asrs	r3, r1, #31
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d103      	bne.n	8000706 <Reset_DiscoveryContext+0x9a>
      data[i]='x';
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <Reset_DiscoveryContext+0xcc>)
 8000702:	2178      	movs	r1, #120	; 0x78
 8000704:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	3301      	adds	r3, #1
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	2b3b      	cmp	r3, #59	; 0x3b
 8000710:	d9d5      	bls.n	80006be <Reset_DiscoveryContext+0x52>
    }
  }
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000b8 	.word	0x200000b8
 8000720:	200000c1 	.word	0x200000c1
 8000724:	20000004 	.word	0x20000004
 8000728:	200000f6 	.word	0x200000f6
 800072c:	200000f7 	.word	0x200000f7
 8000730:	20000006 	.word	0x20000006
 8000734:	cccccccd 	.word	0xcccccccd
 8000738:	200000f8 	.word	0x200000f8
 800073c:	66666667 	.word	0x66666667

08000740 <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <Setup_DeviceAddress+0x98>)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000750:	6018      	str	r0, [r3, #0]
 8000752:	3304      	adds	r3, #4
 8000754:	8019      	strh	r1, [r3, #0]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f007 fc58 	bl	800800e <hci_le_rand>
 800075e:	4603      	mov	r3, r0
 8000760:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
  }

  discovery_time = 3000; /* at least 3 seconds */
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <Setup_DeviceAddress+0x9c>)
 8000764:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000768:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	75fb      	strb	r3, [r7, #23]
 800076e:	e010      	b.n	8000792 <Setup_DeviceAddress+0x52>
  {
    discovery_time += (2*random_number[i]);
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	3318      	adds	r3, #24
 8000774:	443b      	add	r3, r7
 8000776:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800077a:	b29b      	uxth	r3, r3
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <Setup_DeviceAddress+0x9c>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <Setup_DeviceAddress+0x9c>)
 800078a:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	3301      	adds	r3, #1
 8000790:	75fb      	strb	r3, [r7, #23]
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d9eb      	bls.n	8000770 <Setup_DeviceAddress+0x30>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	733b      	strb	r3, [r7, #12]
  bdaddr[1] = (uint8_t) (random_number[3]);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	737b      	strb	r3, [r7, #13]
  bdaddr[2] = (uint8_t) (random_number[6]);
 80007a0:	7abb      	ldrb	r3, [r7, #10]
 80007a2:	73bb      	strb	r3, [r7, #14]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	461a      	mov	r2, r3
 80007aa:	2106      	movs	r1, #6
 80007ac:	2000      	movs	r0, #0
 80007ae:	f005 ffd8 	bl	8006762 <aci_hal_write_config_data>
 80007b2:	4603      	mov	r3, r0
 80007b4:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
 80007b6:	7d7b      	ldrb	r3, [r7, #21]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d108      	bne.n	80007ce <Setup_DeviceAddress+0x8e>
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
  }
  else
  {
    PRINT_DBG("Public address: ");
    for (uint8_t i=5; i>0; i--)
 80007bc:	2305      	movs	r3, #5
 80007be:	75bb      	strb	r3, [r7, #22]
 80007c0:	e002      	b.n	80007c8 <Setup_DeviceAddress+0x88>
 80007c2:	7dbb      	ldrb	r3, [r7, #22]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	75bb      	strb	r3, [r7, #22]
 80007c8:	7dbb      	ldrb	r3, [r7, #22]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f9      	bne.n	80007c2 <Setup_DeviceAddress+0x82>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08008d20 	.word	0x08008d20
 80007dc:	200000f4 	.word	0x200000f4

080007e0 <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  uint8_t index = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]

  while (index < data_length)
 80007f0:	e01f      	b.n	8000832 <Find_DeviceName+0x52>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE PeriperalApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b09      	cmp	r3, #9
 80007fe:	d10f      	bne.n	8000820 <Find_DeviceName+0x40>
    {
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], BLE_SAMPLE_APP_COMPLETE_LOCAL_NAME_SIZE) == 0)
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3301      	adds	r3, #1
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	2212      	movs	r2, #18
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <Find_DeviceName+0x64>)
 800080c:	4618      	mov	r0, r3
 800080e:	f008 f990 	bl	8008b32 <memcmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <Find_DeviceName+0x3c>
      {
        return TRUE;
 8000818:	2301      	movs	r3, #1
 800081a:	e00f      	b.n	800083c <Find_DeviceName+0x5c>
      }
      else
      {
        return FALSE;
 800081c:	2300      	movs	r3, #0
 800081e:	e00d      	b.n	800083c <Find_DeviceName+0x5c>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4413      	add	r3, r2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	3301      	adds	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
  while (index < data_length)
 8000832:	7bfa      	ldrb	r2, [r7, #15]
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3db      	bcc.n	80007f2 <Find_DeviceName+0x12>
    }
  }

  return FALSE;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000008 	.word	0x20000008

08000848 <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	603a      	str	r2, [r7, #0]
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	460b      	mov	r3, r1
 8000856:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1)
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <Attribute_Modified_CB+0x50>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	429a      	cmp	r2, r3
 8000862:	d105      	bne.n	8000870 <Attribute_Modified_CB+0x28>
  {
    receiveData(att_data, data_length);
 8000864:	797b      	ldrb	r3, [r7, #5]
 8000866:	4619      	mov	r1, r3
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	f7ff fedf 	bl	800062c <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 800086e:	e00f      	b.n	8000890 <Attribute_Modified_CB+0x48>
  else if(handle == TXCharHandle + 2)
 8000870:	88fa      	ldrh	r2, [r7, #6]
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <Attribute_Modified_CB+0x54>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3302      	adds	r3, #2
 8000878:	429a      	cmp	r2, r3
 800087a:	d109      	bne.n	8000890 <Attribute_Modified_CB+0x48>
    if(att_data[0] == 0x01)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d105      	bne.n	8000890 <Attribute_Modified_CB+0x48>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <Attribute_Modified_CB+0x58>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <Attribute_Modified_CB+0x58>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000138 	.word	0x20000138
 800089c:	20000136 	.word	0x20000136
 80008a0:	20000000 	.word	0x20000000

080008a4 <PeriperalAppInit>:
* Description    : Init PeriperalApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t PeriperalAppInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  /* Sw reset of the device */
  hci_reset();
 80008aa:	f007 fb0e 	bl	8007eca <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80008ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b2:	f001 fd19 	bl	80022e8 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 80008b6:	f7ff ff43 	bl	8000740 <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 80008ba:	2104      	movs	r1, #4
 80008bc:	2001      	movs	r0, #1
 80008be:	f005 ffde 	bl	800687e <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 80008c2:	f005 fa09 	bl	8005cd8 <aci_gatt_init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if(ret != BLE_STATUS_SUCCESS)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <PeriperalAppInit+0x30>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
    return ret;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	e01d      	b.n	8000910 <PeriperalAppInit+0x6c>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE|GAP_PERIPHERAL_ROLE,0x0,0x07, &service_handle,
 80008d4:	1d3a      	adds	r2, r7, #4
 80008d6:	463b      	mov	r3, r7
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	1cbb      	adds	r3, r7, #2
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4613      	mov	r3, r2
 80008e0:	2207      	movs	r2, #7
 80008e2:	2100      	movs	r1, #0
 80008e4:	2005      	movs	r0, #5
 80008e6:	f004 ff6c 	bl	80057c2 <aci_gap_init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <PeriperalAppInit+0x54>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
    return ret;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	e00b      	b.n	8000910 <PeriperalAppInit+0x6c>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 80008f8:	f000 fcb6 	bl	8001268 <Add_Sample_Service>
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  if(ret != BLE_STATUS_SUCCESS)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <PeriperalAppInit+0x66>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
    return ret;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	e002      	b.n	8000910 <PeriperalAppInit+0x6c>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 800090a:	f7ff feaf 	bl	800066c <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f001 f95e 	bl	8001be0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000924:	2000      	movs	r0, #0
 8000926:	f001 f8c9 	bl	8001abc <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800092a:	2000      	movs	r0, #0
 800092c:	f001 fa14 	bl	8001d58 <BSP_COM_Init>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <Connection_StateMachine>:
* Description    : Connection state machine.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Connection_StateMachine(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af08      	add	r7, sp, #32
  uint8_t ret;

  switch (discovery.device_state)
 800093a:	4ba2      	ldr	r3, [pc, #648]	; (8000bc4 <Connection_StateMachine+0x290>)
 800093c:	8a1b      	ldrh	r3, [r3, #16]
 800093e:	2b80      	cmp	r3, #128	; 0x80
 8000940:	f000 8136 	beq.w	8000bb0 <Connection_StateMachine+0x27c>
 8000944:	2b80      	cmp	r3, #128	; 0x80
 8000946:	f300 8136 	bgt.w	8000bb6 <Connection_StateMachine+0x282>
 800094a:	2b20      	cmp	r3, #32
 800094c:	dc4a      	bgt.n	80009e4 <Connection_StateMachine+0xb0>
 800094e:	2b00      	cmp	r3, #0
 8000950:	f2c0 8131 	blt.w	8000bb6 <Connection_StateMachine+0x282>
 8000954:	2b20      	cmp	r3, #32
 8000956:	f200 812e 	bhi.w	8000bb6 <Connection_StateMachine+0x282>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <Connection_StateMachine+0x2c>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	080009eb 	.word	0x080009eb
 8000964:	080009f7 	.word	0x080009f7
 8000968:	08000b3f 	.word	0x08000b3f
 800096c:	08000bb7 	.word	0x08000bb7
 8000970:	08000a3d 	.word	0x08000a3d
 8000974:	08000bb7 	.word	0x08000bb7
 8000978:	08000bb7 	.word	0x08000bb7
 800097c:	08000bb7 	.word	0x08000bb7
 8000980:	08000ae1 	.word	0x08000ae1
 8000984:	08000bb7 	.word	0x08000bb7
 8000988:	08000bb7 	.word	0x08000bb7
 800098c:	08000bb7 	.word	0x08000bb7
 8000990:	08000bb7 	.word	0x08000bb7
 8000994:	08000bb7 	.word	0x08000bb7
 8000998:	08000bb7 	.word	0x08000bb7
 800099c:	08000bb7 	.word	0x08000bb7
 80009a0:	08000b47 	.word	0x08000b47
 80009a4:	08000bb7 	.word	0x08000bb7
 80009a8:	08000bb7 	.word	0x08000bb7
 80009ac:	08000bb7 	.word	0x08000bb7
 80009b0:	08000bb7 	.word	0x08000bb7
 80009b4:	08000bb7 	.word	0x08000bb7
 80009b8:	08000bb7 	.word	0x08000bb7
 80009bc:	08000bb7 	.word	0x08000bb7
 80009c0:	08000bb7 	.word	0x08000bb7
 80009c4:	08000bb7 	.word	0x08000bb7
 80009c8:	08000bb7 	.word	0x08000bb7
 80009cc:	08000bb7 	.word	0x08000bb7
 80009d0:	08000bb7 	.word	0x08000bb7
 80009d4:	08000bb7 	.word	0x08000bb7
 80009d8:	08000bb7 	.word	0x08000bb7
 80009dc:	08000bb7 	.word	0x08000bb7
 80009e0:	08000ac1 	.word	0x08000ac1
 80009e4:	2b40      	cmp	r3, #64	; 0x40
 80009e6:	d05c      	beq.n	8000aa2 <Connection_StateMachine+0x16e>
    {
      Reset_DiscoveryContext();
    }
    break; /* end case (DISCOVERY_ERROR) */
  default:
    break;
 80009e8:	e0e5      	b.n	8000bb6 <Connection_StateMachine+0x282>
      Reset_DiscoveryContext();
 80009ea:	f7ff fe3f 	bl	800066c <Reset_DiscoveryContext>
      discovery.device_state = START_DISCOVERY_PROC;
 80009ee:	4b75      	ldr	r3, [pc, #468]	; (8000bc4 <Connection_StateMachine+0x290>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	821a      	strh	r2, [r3, #16]
    break; /* end case (INIT_STATE) */
 80009f4:	e0e2      	b.n	8000bbc <Connection_StateMachine+0x288>
      BSP_LED_On(LED2);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f001 f872 	bl	8001ae0 <BSP_LED_On>
      ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00);
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a08:	f004 ff88 	bl	800591c <aci_gap_start_general_discovery_proc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <Connection_StateMachine+0xea>
        discovery.device_state = DISCOVERY_ERROR;
 8000a16:	4b6b      	ldr	r3, [pc, #428]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 8000a1c:	e0ce      	b.n	8000bbc <Connection_StateMachine+0x288>
        discovery.startTime = HAL_GetTick();
 8000a1e:	f001 fc57 	bl	80022d0 <HAL_GetTick>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a67      	ldr	r2, [pc, #412]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a26:	6053      	str	r3, [r2, #4]
        discovery.check_disc_proc_timer = TRUE;
 8000a28:	4b66      	ldr	r3, [pc, #408]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	705a      	strb	r2, [r3, #1]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000a34:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 8000a3a:	e0bf      	b.n	8000bbc <Connection_StateMachine+0x288>
      if (discovery.check_disc_proc_timer == TRUE)
 8000a3c:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d114      	bne.n	8000a6e <Connection_StateMachine+0x13a>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000a44:	f001 fc44 	bl	80022d0 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	4a5d      	ldr	r2, [pc, #372]	; (8000bc8 <Connection_StateMachine+0x294>)
 8000a52:	8812      	ldrh	r2, [r2, #0]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	f240 80b0 	bls.w	8000bba <Connection_StateMachine+0x286>
          discovery.check_disc_proc_timer = FALSE;
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
          discovery.startTime = 0;
 8000a60:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_TERMINATE_GAP_PROC;
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a68:	2220      	movs	r2, #32
 8000a6a:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000a6c:	e0a5      	b.n	8000bba <Connection_StateMachine+0x286>
      else if (discovery.check_disc_mode_timer == TRUE)
 8000a6e:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	f040 80a1 	bne.w	8000bba <Connection_StateMachine+0x286>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000a78:	f001 fc2a 	bl	80022d0 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <Connection_StateMachine+0x294>)
 8000a86:	8812      	ldrh	r2, [r2, #0]
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	f240 8096 	bls.w	8000bba <Connection_StateMachine+0x286>
          discovery.check_disc_mode_timer = FALSE;
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	705a      	strb	r2, [r3, #1]
          discovery.startTime = 0;
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000aa0:	e08b      	b.n	8000bba <Connection_StateMachine+0x286>
      ret = aci_gap_set_non_discoverable();
 8000aa2:	f004 fd62 	bl	800556a <aci_gap_set_non_discoverable>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <Connection_StateMachine+0x184>
        discovery.device_state = DISCOVERY_ERROR;
 8000ab0:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000ab6:	e081      	b.n	8000bbc <Connection_StateMachine+0x288>
        discovery.device_state = INIT_STATE;
 8000ab8:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000abe:	e07d      	b.n	8000bbc <Connection_StateMachine+0x288>
      ret = aci_gap_terminate_gap_proc(0x02); // GENERAL_DISCOVERY_PROCEDURE
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f005 f8ac 	bl	8005c1e <aci_gap_terminate_gap_proc>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <Connection_StateMachine+0x1a4>
        discovery.device_state = DISCOVERY_ERROR;
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	821a      	strh	r2, [r3, #16]
        break;
 8000ad6:	e071      	b.n	8000bbc <Connection_StateMachine+0x288>
        discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_TERMINATE_GAP_PROC) */
 8000ade:	e06d      	b.n	8000bbc <Connection_StateMachine+0x288>
      for (uint8_t i=5; i>0; i--)
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e002      	b.n	8000aec <Connection_StateMachine+0x1b8>
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f9      	bne.n	8000ae6 <Connection_StateMachine+0x1b2>
      ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000af4:	7a1a      	ldrb	r2, [r3, #8]
 8000af6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000afa:	9306      	str	r3, [sp, #24]
 8000afc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b00:	9305      	str	r3, [sp, #20]
 8000b02:	233c      	movs	r3, #60	; 0x3c
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9303      	str	r3, [sp, #12]
 8000b0a:	2328      	movs	r3, #40	; 0x28
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	2328      	movs	r3, #40	; 0x28
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	2300      	movs	r3, #0
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <Connection_StateMachine+0x298>)
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b20:	f004 ff99 	bl	8005a56 <aci_gap_create_connection>
 8000b24:	4603      	mov	r3, r0
 8000b26:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <Connection_StateMachine+0x202>
        discovery.device_state = DISCOVERY_ERROR;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000b34:	e042      	b.n	8000bbc <Connection_StateMachine+0x288>
        discovery.device_state = WAIT_EVENT;
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000b3c:	e03e      	b.n	8000bbc <Connection_StateMachine+0x288>
      discovery.device_state = WAIT_EVENT;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_EVENT) */
 8000b44:	e03a      	b.n	8000bbc <Connection_StateMachine+0x288>
      BSP_LED_Off(LED2);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 ffe0 	bl	8001b0c <BSP_LED_Off>
      hci_le_set_scan_response_data(0,NULL);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f007 f9e4 	bl	8007f1c <hci_le_set_scan_response_data>
      ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000b54:	2300      	movs	r3, #0
 8000b56:	9306      	str	r3, [sp, #24]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <Connection_StateMachine+0x29c>)
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2312      	movs	r3, #18
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f004 fd1e 	bl	80055bc <aci_gap_set_discoverable>
 8000b80:	4603      	mov	r3, r0
 8000b82:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <Connection_StateMachine+0x25e>
        discovery.device_state = DISCOVERY_ERROR;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000b90:	e014      	b.n	8000bbc <Connection_StateMachine+0x288>
        discovery.startTime = HAL_GetTick();
 8000b92:	f001 fb9d 	bl	80022d0 <HAL_GetTick>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b9a:	6053      	str	r3, [r2, #4]
        discovery.check_disc_mode_timer = TRUE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	705a      	strb	r2, [r3, #1]
        discovery.check_disc_proc_timer = FALSE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <Connection_StateMachine+0x290>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000bae:	e005      	b.n	8000bbc <Connection_StateMachine+0x288>
      Reset_DiscoveryContext();
 8000bb0:	f7ff fd5c 	bl	800066c <Reset_DiscoveryContext>
    break; /* end case (DISCOVERY_ERROR) */
 8000bb4:	e002      	b.n	8000bbc <Connection_StateMachine+0x288>
    break;
 8000bb6:	bf00      	nop
 8000bb8:	e000      	b.n	8000bbc <Connection_StateMachine+0x288>
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000bba:	bf00      	nop
  }/* end switch */

}/* end Connection_StateMachine() */
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000b8 	.word	0x200000b8
 8000bc8:	200000f4 	.word	0x200000f4
 8000bcc:	200000c1 	.word	0x200000c1
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b091      	sub	sp, #68	; 0x44
 8000bd8:	af02      	add	r7, sp, #8
  if(APP_FLAG(SET_CONNECTABLE))
 8000bda:	4b9b      	ldr	r3, [pc, #620]	; (8000e48 <User_Process+0x274>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <User_Process+0x24>
  {
    Connection_StateMachine();
 8000be6:	f7ff fea5 	bl	8000934 <Connection_StateMachine>
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f001 f84c 	bl	8001c88 <BSP_PB_GetState>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <User_Process+0x278>)
 8000bf6:	701a      	strb	r2, [r3, #0]
  }

  if (device_role == MASTER_ROLE)
 8000bf8:	4b95      	ldr	r3, [pc, #596]	; (8000e50 <User_Process+0x27c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 80bb 	bne.w	8000d78 <User_Process+0x1a4>
  {
    /* Start TX handle Characteristic discovery if not yet done */
    if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8000c02:	4b91      	ldr	r3, [pc, #580]	; (8000e48 <User_Process+0x274>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d02a      	beq.n	8000c64 <User_Process+0x90>
 8000c0e:	4b8e      	ldr	r3, [pc, #568]	; (8000e48 <User_Process+0x274>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d124      	bne.n	8000c64 <User_Process+0x90>
    {
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <User_Process+0x274>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14e      	bne.n	8000cc4 <User_Process+0xf0>
      {
        /* Discovery TX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000c26:	4b8b      	ldr	r3, [pc, #556]	; (8000e54 <User_Process+0x280>)
 8000c28:	f107 0418 	add.w	r4, r7, #24
 8000c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Tx.UUID_16, charUuid128_TX, 16);
 8000c32:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <User_Process+0x284>)
 8000c34:	461c      	mov	r4, r3
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Tx);
 8000c40:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <User_Process+0x288>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b298      	uxth	r0, r3
 8000c46:	4b84      	ldr	r3, [pc, #528]	; (8000e58 <User_Process+0x284>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c50:	2101      	movs	r1, #1
 8000c52:	f005 faaa 	bl	80061aa <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_TX_CHAR_HANDLE);
 8000c56:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <User_Process+0x274>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c5e:	4a7a      	ldr	r2, [pc, #488]	; (8000e48 <User_Process+0x274>)
 8000c60:	6013      	str	r3, [r2, #0]
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000c62:	e02f      	b.n	8000cc4 <User_Process+0xf0>
      }
    }
    /* Start RX handle Characteristic discovery if not yet done */
    else if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8000c64:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <User_Process+0x274>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d029      	beq.n	8000cc4 <User_Process+0xf0>
 8000c70:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <User_Process+0x274>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d123      	bne.n	8000cc4 <User_Process+0xf0>
    {
      /* Discovery RX characteristic handle by UUID 128 bits */
      if (!APP_FLAG(START_READ_RX_CHAR_HANDLE))
 8000c7c:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <User_Process+0x274>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11d      	bne.n	8000cc4 <User_Process+0xf0>
      {
        /* Discovery RX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <User_Process+0x28c>)
 8000c8a:	f107 0408 	add.w	r4, r7, #8
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Rx.UUID_16, charUuid128_RX, 16);
 8000c94:	4b73      	ldr	r3, [pc, #460]	; (8000e64 <User_Process+0x290>)
 8000c96:	461c      	mov	r4, r3
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Rx);
 8000ca2:	4b6e      	ldr	r3, [pc, #440]	; (8000e5c <User_Process+0x288>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b298      	uxth	r0, r3
 8000ca8:	4b6e      	ldr	r3, [pc, #440]	; (8000e64 <User_Process+0x290>)
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2302      	movs	r3, #2
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	f005 fa79 	bl	80061aa <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_RX_CHAR_HANDLE);
 8000cb8:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <User_Process+0x274>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cc0:	4a61      	ldr	r2, [pc, #388]	; (8000e48 <User_Process+0x274>)
 8000cc2:	6013      	str	r3, [r2, #0]
      }
    }

    if(APP_FLAG(CONNECTED) && APP_FLAG(END_READ_TX_CHAR_HANDLE) && APP_FLAG(END_READ_RX_CHAR_HANDLE) && !APP_FLAG(NOTIFICATIONS_ENABLED))
 8000cc4:	4b60      	ldr	r3, [pc, #384]	; (8000e48 <User_Process+0x274>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d053      	beq.n	8000d78 <User_Process+0x1a4>
 8000cd0:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <User_Process+0x274>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d04d      	beq.n	8000d78 <User_Process+0x1a4>
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <User_Process+0x274>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d047      	beq.n	8000d78 <User_Process+0x1a4>
 8000ce8:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <User_Process+0x274>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d141      	bne.n	8000d78 <User_Process+0x1a4>
    {
      /* Before enabling notifications perform an ATT MTU exchange procedure */
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8000cf4:	4b5c      	ldr	r3, [pc, #368]	; (8000e68 <User_Process+0x294>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d110      	bne.n	8000d1e <User_Process+0x14a>
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <User_Process+0x298>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10c      	bne.n	8000d1e <User_Process+0x14a>
      {
        PRINT_DBG("ROLE MASTER (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
                  mtu_exchanged, mtu_exchanged_wait);

        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <User_Process+0x288>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 f9ec 	bl	80060e8 <aci_gatt_exchange_config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (ret != BLE_STATUS_SUCCESS) {
          PRINT_DBG("aci_gatt_exchange_configuration error 0x%02x\r\n", ret);
        }
        mtu_exchanged_wait = 1;
 8000d16:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <User_Process+0x298>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
      {
 8000d1c:	e02c      	b.n	8000d78 <User_Process+0x1a4>
      }
      else if ((mtu_exchanged == 1) && (mtu_exchanged_wait == 2))
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <User_Process+0x294>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d128      	bne.n	8000d78 <User_Process+0x1a4>
 8000d26:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <User_Process+0x298>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d124      	bne.n	8000d78 <User_Process+0x1a4>
      {
        uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000d2e:	2301      	movs	r3, #1
 8000d30:	80bb      	strh	r3, [r7, #4]
        uint32_t tickstart = HAL_GetTick();
 8000d32:	f001 facd 	bl	80022d0 <HAL_GetTick>
 8000d36:	62f8      	str	r0, [r7, #44]	; 0x2c

        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000d38:	e008      	b.n	8000d4c <User_Process+0x178>
        {
          // Radio is busy.
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d3a:	f001 fac9 	bl	80022d0 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d80e      	bhi.n	8000d6a <User_Process+0x196>
        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <User_Process+0x288>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b298      	uxth	r0, r3
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <User_Process+0x29c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	3302      	adds	r3, #2
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	f005 fae7 	bl	8006330 <aci_gatt_write_char_desc>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b46      	cmp	r3, #70	; 0x46
 8000d66:	d0e8      	beq.n	8000d3a <User_Process+0x166>
 8000d68:	e000      	b.n	8000d6c <User_Process+0x198>
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d6a:	bf00      	nop
        }
        APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <User_Process+0x274>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d74:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <User_Process+0x274>)
 8000d76:	6013      	str	r3, [r2, #0]
	  }
    }
  } /* if (device_role == MASTER_ROLE) */

  if (device_role == SLAVE_ROLE) {
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <User_Process+0x27c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d119      	bne.n	8000db4 <User_Process+0x1e0>
    if (APP_FLAG(CONNECTED)) {
 8000d80:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <User_Process+0x274>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <User_Process+0x1e0>
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8000d8c:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <User_Process+0x294>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10f      	bne.n	8000db4 <User_Process+0x1e0>
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <User_Process+0x298>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10b      	bne.n	8000db4 <User_Process+0x1e0>
      {
        PRINT_DBG("ROLE SLAVE (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
                  mtu_exchanged, mtu_exchanged_wait);

        mtu_exchanged_wait = 1;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <User_Process+0x298>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <User_Process+0x288>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 f99d 	bl	80060e8 <aci_gatt_exchange_config>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }
    }
  }

  /* Check if the user has pushed the button */
  if (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 ff67 	bl	8001c88 <BSP_PB_GetState>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <User_Process+0x278>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d138      	bne.n	8000e40 <User_Process+0x26c>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000dce:	bf00      	nop
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 ff59 	bl	8001c88 <BSP_PB_GetState>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <User_Process+0x278>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d0f2      	beq.n	8000dd0 <User_Process+0x1fc>

    if(APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED)){
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <User_Process+0x274>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d024      	beq.n	8000e40 <User_Process+0x26c>
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <User_Process+0x274>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01e      	beq.n	8000e40 <User_Process+0x26c>
      /* Send a toggle command to the remote device */
      uint8_t* data_ptr = data;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <User_Process+0x2a0>)
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
      uint8_t  curr_len = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

      while (data_ptr < (data + sizeof(data)))
 8000e0c:	e014      	b.n	8000e38 <User_Process+0x264>
      {
        /* if data to send are greater than the max char value length, send them in chunks */
        curr_len = ((data + sizeof(data) - data_ptr) > write_char_len) ? (write_char_len) : (data + sizeof(data) - data_ptr);
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <User_Process+0x2a4>)
 8000e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <User_Process+0x2a8>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	bfa8      	it	ge
 8000e1c:	4613      	movge	r3, r2
 8000e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        sendData(data_ptr, curr_len);
 8000e22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e26:	4619      	mov	r1, r3
 8000e28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e2a:	f7ff fb95 	bl	8000558 <sendData>
        data_ptr += curr_len;
 8000e2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e34:	4413      	add	r3, r2
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
      while (data_ptr < (data + sizeof(data)))
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <User_Process+0x2a4>)
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d3e6      	bcc.n	8000e0e <User_Process+0x23a>
                               // called in main().
                               // E.g. it can be enabled for debugging.
    }
  }

}
 8000e40:	bf00      	nop
 8000e42:	373c      	adds	r7, #60	; 0x3c
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	200000b4 	.word	0x200000b4
 8000e50:	20000004 	.word	0x20000004
 8000e54:	08008d28 	.word	0x08008d28
 8000e58:	200000d0 	.word	0x200000d0
 8000e5c:	200000cc 	.word	0x200000cc
 8000e60:	08008d38 	.word	0x08008d38
 8000e64:	200000e0 	.word	0x200000e0
 8000e68:	200000f6 	.word	0x200000f6
 8000e6c:	200000f7 	.word	0x200000f7
 8000e70:	200000f0 	.word	0x200000f0
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	20000134 	.word	0x20000134
 8000e7c:	20000006 	.word	0x20000006

08000e80 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	71bb      	strb	r3, [r7, #6]
 8000e90:	4613      	mov	r3, r2
 8000e92:	717b      	strb	r3, [r7, #5]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d119      	bne.n	8000ece <aci_gap_proc_complete_event+0x4e>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000e9c:	78db      	ldrb	r3, [r3, #3]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10c      	bne.n	8000ebc <aci_gap_proc_complete_event+0x3c>
    {
      discovery.do_connect = FALSE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = ENTER_DISCOVERY_MODE;
    }
  }
}
 8000eba:	e008      	b.n	8000ece <aci_gap_proc_complete_event+0x4e>
      discovery.check_disc_proc_timer = FALSE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
      discovery.device_state = ENTER_DISCOVERY_MODE;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <aci_gap_proc_complete_event+0x5c>)
 8000eca:	2210      	movs	r2, #16
 8000ecc:	821a      	strh	r2, [r3, #16]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200000b8 	.word	0x200000b8

08000ee0 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80bb      	strh	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	4613      	mov	r3, r2
 8000efc:	70fb      	strb	r3, [r7, #3]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <hci_le_connection_complete_event+0x78>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <hci_le_connection_complete_event+0x78>)
 8000f08:	6013      	str	r3, [r2, #0]
  discovery.check_disc_proc_timer = FALSE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <hci_le_connection_complete_event+0x7c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <hci_le_connection_complete_event+0x7c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <hci_le_connection_complete_event+0x7c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <hci_le_connection_complete_event+0x80>)
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	8013      	strh	r3, [r2, #0]

  APP_FLAG_SET(CONNECTED);
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <hci_le_connection_complete_event+0x78>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <hci_le_connection_complete_event+0x78>)
 8000f2c:	6013      	str	r3, [r2, #0]
  discovery.device_state = INIT_STATE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <hci_le_connection_complete_event+0x7c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <hci_le_connection_complete_event+0x84>)
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	7013      	strb	r3, [r2, #0]

  PRINT_DBG("Connection Complete with peer address: ");
  for (uint8_t i=5; i>0; i--)
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e002      	b.n	8000f46 <hci_le_connection_complete_event+0x66>
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f9      	bne.n	8000f40 <hci_le_connection_complete_event+0x60>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);

}/* end hci_le_connection_complete_event() */
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc90      	pop	{r4, r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	200000b8 	.word	0x200000b8
 8000f60:	200000cc 	.word	0x200000cc
 8000f64:	20000004 	.word	0x20000004

08000f68 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	460b      	mov	r3, r1
 8000f74:	80bb      	strh	r3, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	71bb      	strb	r3, [r7, #6]
  APP_FLAG_CLEAR(CONNECTED);
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f84:	6013      	str	r3, [r2, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f90:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000f9c:	6013      	str	r3, [r2, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fa8:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fb4:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fc0:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fcc:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <hci_disconnection_complete_event+0x80>)
 8000fd8:	6013      	str	r3, [r2, #0]

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
  Reset_DiscoveryContext();
 8000fda:	f7ff fb47 	bl	800066c <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000

08000fec <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	75bb      	strb	r3, [r7, #22]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	757b      	strb	r3, [r7, #21]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	1c9a      	adds	r2, r3, #2
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	6810      	ldr	r0, [r2, #0]
 8001014:	6018      	str	r0, [r3, #0]
 8001016:	8892      	ldrh	r2, [r2, #4]
 8001018:	809a      	strh	r2, [r3, #4]

  /* BLE PeriperalApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d126      	bne.n	8001070 <hci_le_advertising_report_event+0x84>
  {
    /* BLE PeriperalApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d123      	bne.n	8001070 <hci_le_advertising_report_event+0x84>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	7dbb      	ldrb	r3, [r7, #22]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fbd5 	bl	80007e0 <Find_DeviceName>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d019      	beq.n	8001070 <hci_le_advertising_report_event+0x84>
    {
      discovery.is_device_found = TRUE;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 800103e:	2201      	movs	r2, #1
 8001040:	709a      	strb	r2, [r3, #2]
      discovery.do_connect = TRUE;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 8001044:	2201      	movs	r2, #1
 8001046:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
      discovery.check_disc_mode_timer = FALSE;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 8001050:	2200      	movs	r2, #0
 8001052:	705a      	strb	r2, [r3, #1]
      /* store first device found:  address type and address value */
      discovery.device_found_address_type = bdaddr_type;
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 8001056:	7d7b      	ldrb	r3, [r7, #21]
 8001058:	7213      	strb	r3, [r2, #8]
      BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 800105c:	3309      	adds	r3, #9
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	6810      	ldr	r0, [r2, #0]
 8001064:	6018      	str	r0, [r3, #0]
 8001066:	8892      	ldrh	r2, [r2, #4]
 8001068:	809a      	strh	r2, [r3, #4]
      /* device is found: terminate discovery procedure */
      discovery.device_state = DO_TERMINATE_GAP_PROC;
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <hci_le_advertising_report_event+0x8c>)
 800106c:	2220      	movs	r2, #32
 800106e:	821a      	strh	r2, [r3, #16]
      PRINT_DBG("Device found\r\n");
    }
  }
} /* hci_le_advertising_report_event() */
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000b8 	.word	0x200000b8

0800107c <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 800109a:	883b      	ldrh	r3, [r7, #0]
 800109c:	b2d9      	uxtb	r1, r3
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fbd0 	bl	8000848 <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4603      	mov	r3, r0
 80010ba:	81fb      	strh	r3, [r7, #14]
 80010bc:	460b      	mov	r3, r1
 80010be:	81bb      	strh	r3, [r7, #12]
 80010c0:	4613      	mov	r3, r2
 80010c2:	72fb      	strb	r3, [r7, #11]
  if(Attribute_Handle == tx_handle+1)
 80010c4:	89ba      	ldrh	r2, [r7, #12]
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <aci_gatt_notification_event+0x34>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d104      	bne.n	80010da <aci_gatt_notification_event+0x2a>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff faa9 	bl	800062c <receiveData>
  }
} /* end aci_gatt_notification_event() */
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000f0 	.word	0x200000f0

080010e8 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4603      	mov	r3, r0
 80010f2:	81fb      	strh	r3, [r7, #14]
 80010f4:	460b      	mov	r3, r1
 80010f6:	81bb      	strh	r3, [r7, #12]
 80010f8:	4613      	mov	r3, r2
 80010fa:	72fb      	strb	r3, [r7, #11]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
  {
    tx_handle = Attribute_Handle;
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	8013      	strh	r3, [r2, #0]
        BSP_LED_Toggle(LED2);
        HAL_Delay(250);
      }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 800111a:	e01d      	b.n	8001158 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d017      	beq.n	8001158 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d111      	bne.n	8001158 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
      rx_handle = Attribute_Handle;
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	8013      	strh	r3, [r2, #0]
      for (uint8_t i=0; i<9; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
 800113e:	e008      	b.n	8001152 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6a>
        BSP_LED_Toggle(LED2);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fcf9 	bl	8001b38 <BSP_LED_Toggle>
        HAL_Delay(250);
 8001146:	20fa      	movs	r0, #250	; 0xfa
 8001148:	f001 f8ce 	bl	80022e8 <HAL_Delay>
      for (uint8_t i=0; i<9; i++) {
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	3301      	adds	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d9f3      	bls.n	8001140 <aci_gatt_disc_read_char_by_uuid_resp_event+0x58>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	200000f0 	.word	0x200000f0
 8001168:	200000f2 	.word	0x200000f2

0800116c <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	80fb      	strh	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00c      	beq.n	80011a2 <aci_gatt_proc_complete_event+0x36>
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d106      	bne.n	80011a2 <aci_gatt_proc_complete_event+0x36>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 800119e:	6013      	str	r3, [r2, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 80011a0:	e011      	b.n	80011c6 <aci_gatt_proc_complete_event+0x5a>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00b      	beq.n	80011c6 <aci_gatt_proc_complete_event+0x5a>
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <aci_gatt_proc_complete_event+0x5a>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <aci_gatt_proc_complete_event+0x68>)
 80011c4:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_proc_complete_event() */
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000

080011d8 <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80bb      	strh	r3, [r7, #4]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <aci_gatt_tx_pool_available_event+0x28>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <aci_gatt_tx_pool_available_event+0x28>)
 80011f2:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_tx_pool_available_event() */
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20000000 	.word	0x20000000

08001204 <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	4613      	mov	r3, r2
 8001212:	80bb      	strh	r3, [r7, #4]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	2b9e      	cmp	r3, #158	; 0x9e
 8001218:	d805      	bhi.n	8001226 <aci_att_exchange_mtu_resp_event+0x22>
    write_char_len = Server_RX_MTU - 3;
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	3b03      	subs	r3, #3
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <aci_att_exchange_mtu_resp_event+0x58>)
 8001222:	801a      	strh	r2, [r3, #0]
 8001224:	e002      	b.n	800122c <aci_att_exchange_mtu_resp_event+0x28>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <aci_att_exchange_mtu_resp_event+0x58>)
 8001228:	229b      	movs	r2, #155	; 0x9b
 800122a:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <aci_att_exchange_mtu_resp_event+0x5c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <aci_att_exchange_mtu_resp_event+0x38>
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <aci_att_exchange_mtu_resp_event+0x5c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d109      	bne.n	8001250 <aci_att_exchange_mtu_resp_event+0x4c>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <aci_att_exchange_mtu_resp_event+0x5c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <aci_att_exchange_mtu_resp_event+0x46>
      mtu_exchanged_wait = 2;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <aci_att_exchange_mtu_resp_event+0x5c>)
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <aci_att_exchange_mtu_resp_event+0x60>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
  }
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000006 	.word	0x20000006
 8001260:	200000f7 	.word	0x200000f7
 8001264:	200000f6 	.word	0x200000f6

08001268 <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b095      	sub	sp, #84	; 0x54
 800126c:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800126e:	2306      	movs	r3, #6
 8001270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <Add_Sample_Service+0xf8>)
 8001276:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <Add_Sample_Service+0xfc>)
 8001282:	f107 0414 	add.w	r4, r7, #20
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <Add_Sample_Service+0x100>)
 800128e:	1d3c      	adds	r4, r7, #4
 8001290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001296:	4b35      	ldr	r3, [pc, #212]	; (800136c <Add_Sample_Service+0x104>)
 8001298:	461c      	mov	r4, r3
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 80012a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012a8:	4a31      	ldr	r2, [pc, #196]	; (8001370 <Add_Sample_Service+0x108>)
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	492f      	ldr	r1, [pc, #188]	; (800136c <Add_Sample_Service+0x104>)
 80012b0:	2002      	movs	r0, #2
 80012b2:	f004 fd3b 	bl	8005d2c <aci_gatt_add_service>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d142      	bne.n	800134a <Add_Sample_Service+0xe2>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <Add_Sample_Service+0x10c>)
 80012c6:	461c      	mov	r4, r3
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <Add_Sample_Service+0x108>)
 80012d4:	8818      	ldrh	r0, [r3, #0]
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <Add_Sample_Service+0x110>)
 80012d8:	9305      	str	r3, [sp, #20]
 80012da:	2301      	movs	r3, #1
 80012dc:	9304      	str	r3, [sp, #16]
 80012de:	2310      	movs	r3, #16
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2300      	movs	r3, #0
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2310      	movs	r3, #16
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	233f      	movs	r3, #63	; 0x3f
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <Add_Sample_Service+0x10c>)
 80012f2:	2102      	movs	r1, #2
 80012f4:	f004 fdf0 	bl	8005ed8 <aci_gatt_add_char>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001302:	2b00      	cmp	r3, #0
 8001304:	d123      	bne.n	800134e <Add_Sample_Service+0xe6>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <Add_Sample_Service+0x10c>)
 8001308:	461c      	mov	r4, r3
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <Add_Sample_Service+0x108>)
 8001314:	8818      	ldrh	r0, [r3, #0]
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <Add_Sample_Service+0x114>)
 8001318:	9305      	str	r3, [sp, #20]
 800131a:	2301      	movs	r3, #1
 800131c:	9304      	str	r3, [sp, #16]
 800131e:	2310      	movs	r3, #16
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	2301      	movs	r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2300      	movs	r3, #0
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	230c      	movs	r3, #12
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	233f      	movs	r3, #63	; 0x3f
 8001330:	4a10      	ldr	r2, [pc, #64]	; (8001374 <Add_Sample_Service+0x10c>)
 8001332:	2102      	movs	r1, #2
 8001334:	f004 fdd0 	bl	8005ed8 <aci_gatt_add_char>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800133e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <Add_Sample_Service+0xea>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8001346:	2300      	movs	r3, #0
 8001348:	e005      	b.n	8001356 <Add_Sample_Service+0xee>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800134a:	bf00      	nop
 800134c:	e002      	b.n	8001354 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001352:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
  return BLE_STATUS_ERROR ;
 8001354:	2347      	movs	r3, #71	; 0x47
}
 8001356:	4618      	mov	r0, r3
 8001358:	373c      	adds	r7, #60	; 0x3c
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	08008d48 	.word	0x08008d48
 8001364:	08008d58 	.word	0x08008d58
 8001368:	08008d68 	.word	0x08008d68
 800136c:	2000013c 	.word	0x2000013c
 8001370:	20000134 	.word	0x20000134
 8001374:	2000014c 	.word	0x2000014c
 8001378:	20000136 	.word	0x20000136
 800137c:	20000138 	.word	0x20000138

08001380 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d163      	bne.n	800145c <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b3e      	cmp	r3, #62	; 0x3e
 80013a0:	d11e      	bne.n	80013e0 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3302      	adds	r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e014      	b.n	80013d8 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	492b      	ldr	r1, [pc, #172]	; (8001464 <APP_UserEvtRx+0xe4>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d108      	bne.n	80013d2 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <APP_UserEvtRx+0xe4>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	3201      	adds	r2, #1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b09      	cmp	r3, #9
 80013dc:	d9e7      	bls.n	80013ae <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80013de:	e03d      	b.n	800145c <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2bff      	cmp	r3, #255	; 0xff
 80013e6:	d11e      	bne.n	8001426 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3302      	adds	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e014      	b.n	800141e <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	491b      	ldr	r1, [pc, #108]	; (8001468 <APP_UserEvtRx+0xe8>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001402:	429a      	cmp	r2, r3
 8001404:	d108      	bne.n	8001418 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001406:	4a18      	ldr	r2, [pc, #96]	; (8001468 <APP_UserEvtRx+0xe8>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	3202      	adds	r2, #2
 8001414:	4610      	mov	r0, r2
 8001416:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b2a      	cmp	r3, #42	; 0x2a
 8001422:	d9e7      	bls.n	80013f4 <APP_UserEvtRx+0x74>
}
 8001424:	e01a      	b.n	800145c <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e014      	b.n	8001456 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <APP_UserEvtRx+0xec>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800143a:	429a      	cmp	r2, r3
 800143c:	d108      	bne.n	8001450 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <APP_UserEvtRx+0xec>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	3202      	adds	r2, #2
 800144c:	4610      	mov	r0, r2
 800144e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	3301      	adds	r3, #1
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2b06      	cmp	r3, #6
 800145a:	d9e7      	bls.n	800142c <APP_UserEvtRx+0xac>
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08008e1c 	.word	0x08008e1c
 8001468:	08008e6c 	.word	0x08008e6c
 800146c:	08008de4 	.word	0x08008de4

08001470 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001474:	2006      	movs	r0, #6
 8001476:	f001 f876 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}

0800147e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001482:	2006      	movs	r0, #6
 8001484:	f001 f87d 	bl	8002582 <HAL_NVIC_DisableIRQ>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HCI_TL_SPI_Init+0x94>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HCI_TL_SPI_Init+0x94>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HCI_TL_SPI_Init+0x94>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f001 f8d6 	bl	8002674 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80014c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f001 f8c6 	bl	8002674 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f001 f8b7 	bl	8002674 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2102      	movs	r1, #2
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f001 fb67 	bl	8002be0 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8001512:	f000 fd0d 	bl	8001f30 <BSP_SPI1_Init>
 8001516:	4603      	mov	r3, r0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001528:	2101      	movs	r1, #1
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 fa4b 	bl	80029c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001532:	2102      	movs	r1, #2
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f001 fa46 	bl	80029c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f001 fa40 	bl	80029c8 <HAL_GPIO_DeInit>
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}

0800154e <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2102      	movs	r1, #2
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f001 fb41 	bl	8002be0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f001 fb3a 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800156c:	2005      	movs	r0, #5
 800156e:	f000 febb 	bl	80022e8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f001 fb30 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001580:	2005      	movs	r0, #5
 8001582:	f000 feb1 	bl	80022e8 <HAL_Delay>
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}

0800158c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800159c:	2300      	movs	r3, #0
 800159e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80015a0:	4a32      	ldr	r2, [pc, #200]	; (800166c <HCI_TL_SPI_Receive+0xe0>)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015aa:	6018      	str	r0, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80015b0:	f7ff ff65 	bl	800147e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2102      	movs	r1, #2
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f001 fb10 	bl	8002be0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80015c0:	f107 0108 	add.w	r1, r7, #8
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2205      	movs	r2, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fce0 	bl	8001f90 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80015d0:	7b3b      	ldrb	r3, [r7, #12]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80015e0:	8bfb      	ldrh	r3, [r7, #30]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01e      	beq.n	8001624 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80015e6:	8bfa      	ldrh	r2, [r7, #30]
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d901      	bls.n	80015f2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	777b      	strb	r3, [r7, #29]
 80015f6:	e010      	b.n	800161a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80015f8:	f107 0116 	add.w	r1, r7, #22
 80015fc:	f107 0317 	add.w	r3, r7, #23
 8001600:	2201      	movs	r2, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fcc4 	bl	8001f90 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001608:	7f7b      	ldrb	r3, [r7, #29]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	7dba      	ldrb	r2, [r7, #22]
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001614:	7f7b      	ldrb	r3, [r7, #29]
 8001616:	3301      	adds	r3, #1
 8001618:	777b      	strb	r3, [r7, #29]
 800161a:	7f7b      	ldrb	r3, [r7, #29]
 800161c:	b29b      	uxth	r3, r3
 800161e:	8bfa      	ldrh	r2, [r7, #30]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8e9      	bhi.n	80015f8 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001624:	f000 fe54 	bl	80022d0 <HAL_GetTick>
 8001628:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800162a:	e007      	b.n	800163c <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800162c:	2101      	movs	r1, #1
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f001 fabd 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800163c:	f000 fe48 	bl	80022d0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d3ef      	bcc.n	800162c <HCI_TL_SPI_Receive+0xa0>
 800164c:	e000      	b.n	8001650 <HCI_TL_SPI_Receive+0xc4>
      break;
 800164e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001650:	f7ff ff0e 	bl	8001470 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2102      	movs	r1, #2
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 fac0 	bl	8002be0 <HAL_GPIO_WritePin>

  return len;
 8001660:	7f7b      	ldrb	r3, [r7, #29]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08008d78 	.word	0x08008d78

08001670 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800167c:	4a41      	ldr	r2, [pc, #260]	; (8001784 <HCI_TL_SPI_Send+0x114>)
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800168c:	f000 fe20 	bl	80022d0 <HAL_GetTick>
 8001690:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001692:	f7ff fef4 	bl	800147e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001696:	f000 fe1b 	bl	80022d0 <HAL_GetTick>
 800169a:	61f8      	str	r0, [r7, #28]

    result = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2102      	movs	r1, #2
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f001 fa9a 	bl	8002be0 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80016ac:	e00a      	b.n	80016c4 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80016ae:	f000 fe0f 	bl	80022d0 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	; 0x64
 80016ba:	d903      	bls.n	80016c4 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80016bc:	f06f 0302 	mvn.w	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80016c2:	e004      	b.n	80016ce <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80016c4:	f000 f862 	bl	800178c <IsDataAvailable>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0ef      	beq.n	80016ae <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f113 0f03 	cmn.w	r3, #3
 80016d4:	d106      	bne.n	80016e4 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2102      	movs	r1, #2
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f001 fa7f 	bl	8002be0 <HAL_GPIO_WritePin>
      break;
 80016e2:	e031      	b.n	8001748 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80016e4:	f107 010c 	add.w	r1, r7, #12
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2205      	movs	r2, #5
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fc4e 	bl	8001f90 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7b7b      	ldrb	r3, [r7, #13]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8001704:	8b7a      	ldrh	r2, [r7, #26]
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	429a      	cmp	r2, r3
 800170a:	d306      	bcc.n	800171a <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	461a      	mov	r2, r3
 8001710:	491d      	ldr	r1, [pc, #116]	; (8001788 <HCI_TL_SPI_Send+0x118>)
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fc3c 	bl	8001f90 <BSP_SPI1_SendRecv>
 8001718:	e002      	b.n	8001720 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800171a:	f06f 0301 	mvn.w	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2102      	movs	r1, #2
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f001 fa5a 	bl	8002be0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800172c:	f000 fdd0 	bl	80022d0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d903      	bls.n	8001742 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800173a:	f06f 0302 	mvn.w	r3, #2
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001740:	e002      	b.n	8001748 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	dba6      	blt.n	8001696 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001748:	f000 fdc2 	bl	80022d0 <HAL_GetTick>
 800174c:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800174e:	e007      	b.n	8001760 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001750:	2101      	movs	r1, #1
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f001 fa2b 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001760:	f000 fdb6 	bl	80022d0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800176e:	d3ef      	bcc.n	8001750 <HCI_TL_SPI_Send+0xe0>
 8001770:	e000      	b.n	8001774 <HCI_TL_SPI_Send+0x104>
      break;
 8001772:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001774:	f7ff fe7c 	bl	8001470 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800177a:	4618      	mov	r0, r3
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08008d80 	.word	0x08008d80
 8001788:	20000164 	.word	0x20000164

0800178c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001790:	2101      	movs	r1, #1
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f001 fa0b 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <hci_tl_lowlevel_init+0x54>)
 80017b4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <hci_tl_lowlevel_init+0x58>)
 80017b8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <hci_tl_lowlevel_init+0x5c>)
 80017bc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <hci_tl_lowlevel_init+0x60>)
 80017c0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <hci_tl_lowlevel_init+0x64>)
 80017c4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <hci_tl_lowlevel_init+0x68>)
 80017c8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fd33 	bl	8008238 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80017d2:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <hci_tl_lowlevel_init+0x6c>)
 80017d8:	f000 ff07 	bl	80025ea <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <hci_tl_lowlevel_init+0x70>)
 80017de:	2100      	movs	r1, #0
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <hci_tl_lowlevel_init+0x6c>)
 80017e2:	f000 fee8 	bl	80025b6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2006      	movs	r0, #6
 80017ec:	f000 fe9f 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017f0:	2006      	movs	r0, #6
 80017f2:	f000 feb8 	bl	8002566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	0800148d 	.word	0x0800148d
 8001804:	08001525 	.word	0x08001525
 8001808:	08001671 	.word	0x08001671
 800180c:	0800158d 	.word	0x0800158d
 8001810:	0800154f 	.word	0x0800154f
 8001814:	08001fd1 	.word	0x08001fd1
 8001818:	2000015c 	.word	0x2000015c
 800181c:	08001821 	.word	0x08001821

08001820 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001824:	e005      	b.n	8001832 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001826:	2000      	movs	r0, #0
 8001828:	f006 fe6a 	bl	8008500 <hci_notify_asynch_evt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001832:	f7ff ffab 	bl	800178c <IsDataAvailable>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f4      	bne.n	8001826 <hci_tl_lowlevel_isr+0x6>
 800183c:	e000      	b.n	8001840 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800183e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001840:	bd80      	pop	{r7, pc}

08001842 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001846:	f000 fcd3 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184a:	f000 f807 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184e:	f000 f857 	bl	8001900 <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 8001852:	f7fe fe61 	bl	8000518 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 8001856:	f7fe fe77 	bl	8000548 <MX_BlueNRG_2_Process>
 800185a:	e7fc      	b.n	8001856 <main+0x14>

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f007 f971 	bl	8008b52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800187e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001882:	f001 f9ed 	bl	8002c60 <HAL_PWREx_ControlVoltageScaling>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800188c:	f000 f8ae 	bl	80019ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001898:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2310      	movs	r3, #16
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a2:	2302      	movs	r3, #2
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80018aa:	2308      	movs	r3, #8
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fa24 	bl	8002d0c <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ca:	f000 f88f 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2103      	movs	r1, #3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fdf8 	bl	80034dc <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f2:	f000 f87b 	bl	80019ec <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7181 	mov.w	r1, #258	; 0x102
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f001 f92e 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001984:	2301      	movs	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001988:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f000 fe6a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80019a0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f000 fe5a 	bl	8002674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2006      	movs	r0, #6
 80019c6:	f000 fdb2 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019ca:	2006      	movs	r0, #6
 80019cc:	f000 fdcb 	bl	8002566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2028      	movs	r0, #40	; 0x28
 80019d6:	f000 fdaa 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f000 fdc3 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	; 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 fc0c 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <EXTI0_IRQHandler+0x10>)
 8001a9a:	f000 fdbb 	bl	8002614 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000015c 	.word	0x2000015c

08001aa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <EXTI15_10_IRQHandler+0x10>)
 8001aae:	f000 fdb1 	bl	8002614 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000024 	.word	0x20000024

08001abc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <BSP_LED_Init+0x20>)
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	08008d88 	.word	0x08008d88

08001ae0 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <BSP_LED_On+0x28>)
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	2120      	movs	r1, #32
 8001af4:	2201      	movs	r2, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 f872 	bl	8002be0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000001c 	.word	0x2000001c

08001b0c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <BSP_LED_Off+0x28>)
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	2120      	movs	r1, #32
 8001b20:	2200      	movs	r2, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 f85c 	bl	8002be0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000001c 	.word	0x2000001c

08001b38 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <BSP_LED_Toggle+0x28>)
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 f85e 	bl	8002c10 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000001c 	.word	0x2000001c

08001b64 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <LED_USER_GPIO_Init+0x78>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2120      	movs	r1, #32
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f001 f815 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f000 fd50 	bl	8002674 <HAL_GPIO_Init>

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <BSP_PB_Init+0x94>)
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d132      	bne.n	8001c6a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <BSP_PB_Init+0x98>)
 8001c0a:	441a      	add	r2, r3
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	491b      	ldr	r1, [pc, #108]	; (8001c7c <BSP_PB_Init+0x9c>)
 8001c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c14:	4619      	mov	r1, r3
 8001c16:	4610      	mov	r0, r2
 8001c18:	f000 fce7 	bl	80025ea <HAL_EXTI_GetHandle>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c22:	f06f 0303 	mvn.w	r3, #3
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e01f      	b.n	8001c6a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <BSP_PB_Init+0x98>)
 8001c30:	1898      	adds	r0, r3, r2
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <BSP_PB_Init+0xa0>)
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f000 fcba 	bl	80025b6 <HAL_EXTI_RegisterCallback>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c48:	f06f 0303 	mvn.w	r3, #3
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e00c      	b.n	8001c6a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <BSP_PB_Init+0xa4>)
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f000 fc66 	bl	800252e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c62:	2328      	movs	r3, #40	; 0x28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fc7e 	bl	8002566 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	08008d8c 	.word	0x08008d8c
 8001c78:	20000024 	.word	0x20000024
 8001c7c:	08008d90 	.word	0x08008d90
 8001c80:	08008d94 	.word	0x08008d94
 8001c84:	08008d98 	.word	0x08008d98

08001c88 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <BSP_PB_GetState+0x34>)
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 ff85 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000020 	.word	0x20000020

08001cc0 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff fff0 	bl	8001cc0 <BSP_PB_Callback>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <BUTTON_USER_GPIO_Init+0x6c>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <BUTTON_USER_GPIO_Init+0x70>)
 8001d42:	f000 fc97 	bl	8002674 <HAL_GPIO_Init>

}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48000800 	.word	0x48000800

08001d58 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d903      	bls.n	8001d74 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d6c:	f06f 0301 	mvn.w	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e025      	b.n	8001dc0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	4914      	ldr	r1, [pc, #80]	; (8001dcc <BSP_COM_Init+0x74>)
 8001d7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <BSP_COM_Init+0x78>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4403      	add	r3, r0
 8001d8a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001d8c:	79fa      	ldrb	r2, [r7, #7]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <BSP_COM_Init+0x78>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f86a 	bl	8001e74 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001da0:	79fa      	ldrb	r2, [r7, #7]
 8001da2:	4613      	mov	r3, r2
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <BSP_COM_Init+0x78>)
 8001dac:	4413      	add	r3, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f810 	bl	8001dd4 <MX_USART2_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001dba:	f06f 0303 	mvn.w	r3, #3
 8001dbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000002c 	.word	0x2000002c
 8001dd0:	20000264 	.word	0x20000264

08001dd4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <MX_USART2_UART_Init+0x64>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f002 fe50 	bl	8004ac4 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40004400 	.word	0x40004400

08001e3c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <__io_putchar+0x30>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <__io_putchar+0x34>)
 8001e54:	1898      	adds	r0, r3, r2
 8001e56:	1d39      	adds	r1, r7, #4
 8001e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f002 fe89 	bl	8004b74 <HAL_UART_Transmit>
  return ch;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200002e8 	.word	0x200002e8
 8001e70:	20000264 	.word	0x20000264

08001e74 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ac      	sub	sp, #176	; 0xb0
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2288      	movs	r2, #136	; 0x88
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 fe64 	bl	8008b52 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 fd26 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <USART2_MspInit+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <USART2_MspInit+0xb8>)
 8001ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <USART2_MspInit+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <USART2_MspInit+0xb8>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <USART2_MspInit+0xb8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <USART2_MspInit+0xb8>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001eea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef4:	f000 fbbe 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001f10:	2307      	movs	r3, #7
 8001f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f000 fba8 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001f24:	bf00      	nop
 8001f26:	37b0      	adds	r7, #176	; 0xb0
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <BSP_SPI1_Init+0x54>)
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <BSP_SPI1_Init+0x58>)
 8001f3e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <BSP_SPI1_Init+0x5c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4911      	ldr	r1, [pc, #68]	; (8001f8c <BSP_SPI1_Init+0x5c>)
 8001f48:	600a      	str	r2, [r1, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d114      	bne.n	8001f78 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <BSP_SPI1_Init+0x54>)
 8001f50:	f002 fc46 	bl	80047e0 <HAL_SPI_GetState>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <BSP_SPI1_Init+0x54>)
 8001f5c:	f000 f882 	bl	8002064 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d108      	bne.n	8001f78 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <BSP_SPI1_Init+0x54>)
 8001f68:	f000 f83a 	bl	8001fe0 <MX_SPI1_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001f72:	f06f 0307 	mvn.w	r3, #7
 8001f76:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002ec 	.word	0x200002ec
 8001f88:	40013000 	.word	0x40013000
 8001f8c:	20000350 	.word	0x20000350

08001f90 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fa8:	9200      	str	r2, [sp, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <BSP_SPI1_SendRecv+0x3c>)
 8001fb0:	f002 fa03 	bl	80043ba <HAL_SPI_TransmitReceive>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001fba:	f06f 0305 	mvn.w	r3, #5
 8001fbe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001fc0:	697b      	ldr	r3, [r7, #20]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002ec 	.word	0x200002ec

08001fd0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001fd4:	f000 f97c 	bl	80022d0 <HAL_GetTick>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <MX_SPI1_Init+0x80>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002006:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2228      	movs	r2, #40	; 0x28
 8002020:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2207      	movs	r2, #7
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f002 f90a 	bl	8004260 <HAL_SPI_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013000 	.word	0x40013000

08002064 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <SPI1_MspInit+0xbc>)
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <SPI1_MspInit+0xbc>)
 8002072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002076:	6613      	str	r3, [r2, #96]	; 0x60
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <SPI1_MspInit+0xbc>)
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <SPI1_MspInit+0xbc>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <SPI1_MspInit+0xbc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <SPI1_MspInit+0xbc>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <SPI1_MspInit+0xbc>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <SPI1_MspInit+0xbc>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <SPI1_MspInit+0xbc>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80020c4:	2305      	movs	r3, #5
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f000 facf 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80020e6:	2305      	movs	r3, #5
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f000 fabe 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80020f8:	2308      	movs	r3, #8
 80020fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002108:	2305      	movs	r3, #5
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <SPI1_MspInit+0xc0>)
 8002114:	f000 faae 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400

08002128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e00a      	b.n	8002150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213a:	f3af 8000 	nop.w
 800213e:	4601      	mov	r1, r0
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf0      	blt.n	800213a <_read+0x12>
	}

return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e009      	b.n	8002188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe5d 	bl	8001e3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf1      	blt.n	8002174 <_write+0x12>
	}
	return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_close>:

int _close(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return -1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
	return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_Init+0x3c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_Init+0x3c>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f986 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f80f 	bl	8002230 <HAL_InitTick>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	e001      	b.n	8002222 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800221e:	f7ff fbeb 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002222:	79fb      	ldrb	r3, [r7, #7]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_InitTick+0x6c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d023      	beq.n	800228c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_InitTick+0x70>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_InitTick+0x6c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f99f 	bl	800259e <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d809      	bhi.n	8002280 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 f95b 	bl	800252e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_InitTick+0x74>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e007      	b.n	8002290 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e004      	b.n	8002290 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e001      	b.n	8002290 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000038 	.word	0x20000038
 80022a0:	20000030 	.word	0x20000030
 80022a4:	20000034 	.word	0x20000034

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000038 	.word	0x20000038
 80022cc:	20000354 	.word	0x20000354

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000354 	.word	0x20000354

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000038 	.word	0x20000038

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db12      	blt.n	8002408 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	490a      	ldr	r1, [pc, #40]	; (8002414 <__NVIC_DisableIRQ+0x44>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	3320      	adds	r3, #32
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023fc:	f3bf 8f4f 	dsb	sy
}
 8002400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002402:	f3bf 8f6f 	isb	sy
}
 8002406:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff05 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff1a 	bl	8002378 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff0d 	bl	8002394 <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff1d 	bl	80023d0 <__NVIC_DisableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff94 	bl	80024d4 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	460b      	mov	r3, r1
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	605a      	str	r2, [r3, #4]
      break;
 80025d4:	e002      	b.n	80025dc <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
      break;
 80025da:	bf00      	nop
  }

  return status;
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e003      	b.n	8002606 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2201      	movs	r2, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_EXTI_IRQHandler+0x5c>)
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4798      	blx	r3
    }
  }
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40010414 	.word	0x40010414

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e17f      	b.n	8002984 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8171 	beq.w	800297e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d005      	beq.n	80026b4 <HAL_GPIO_Init+0x40>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d130      	bne.n	8002716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ea:	2201      	movs	r2, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0201 	and.w	r2, r3, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b03      	cmp	r3, #3
 8002720:	d118      	bne.n	8002754 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002728:	2201      	movs	r2, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f003 0201 	and.w	r2, r3, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b03      	cmp	r3, #3
 800275e:	d017      	beq.n	8002790 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d123      	bne.n	80027e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	08da      	lsrs	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3208      	adds	r2, #8
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	08da      	lsrs	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3208      	adds	r2, #8
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0203 	and.w	r2, r3, #3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80ac 	beq.w	800297e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	4a5e      	ldr	r2, [pc, #376]	; (80029a4 <HAL_GPIO_Init+0x330>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6613      	str	r3, [r2, #96]	; 0x60
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800283e:	4a5a      	ldr	r2, [pc, #360]	; (80029a8 <HAL_GPIO_Init+0x334>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x242>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x338>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x23e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x33c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x23a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x340>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x236>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x344>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x232>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_GPIO_Init+0x348>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x22e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x34c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x22a>
 800289a:	2306      	movs	r3, #6
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x244>
 80028b6:	2300      	movs	r3, #0
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028c8:	4937      	ldr	r1, [pc, #220]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_GPIO_Init+0x350>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028fa:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_GPIO_Init+0x350>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_GPIO_Init+0x350>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_GPIO_Init+0x350>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_GPIO_Init+0x350>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_GPIO_Init+0x350>)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_GPIO_Init+0x350>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_GPIO_Init+0x350>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	f47f ae78 	bne.w	8002684 <HAL_GPIO_Init+0x10>
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010000 	.word	0x40010000
 80029ac:	48000400 	.word	0x48000400
 80029b0:	48000800 	.word	0x48000800
 80029b4:	48000c00 	.word	0x48000c00
 80029b8:	48001000 	.word	0x48001000
 80029bc:	48001400 	.word	0x48001400
 80029c0:	48001800 	.word	0x48001800
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80029d6:	e0cd      	b.n	8002b74 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029d8:	2201      	movs	r2, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c0 	beq.w	8002b6e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029ee:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <HAL_GPIO_DeInit+0x1c8>)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a16:	d025      	beq.n	8002a64 <HAL_GPIO_DeInit+0x9c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a5e      	ldr	r2, [pc, #376]	; (8002b94 <HAL_GPIO_DeInit+0x1cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01f      	beq.n	8002a60 <HAL_GPIO_DeInit+0x98>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_GPIO_DeInit+0x1d0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d019      	beq.n	8002a5c <HAL_GPIO_DeInit+0x94>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_GPIO_DeInit+0x1d4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_GPIO_DeInit+0x90>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_GPIO_DeInit+0x1d8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00d      	beq.n	8002a54 <HAL_GPIO_DeInit+0x8c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_GPIO_DeInit+0x1dc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_DeInit+0x88>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_GPIO_DeInit+0x1e0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_GPIO_DeInit+0x84>
 8002a48:	2306      	movs	r3, #6
 8002a4a:	e00c      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	e00a      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a50:	2305      	movs	r3, #5
 8002a52:	e008      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a54:	2304      	movs	r3, #4
 8002a56:	e006      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e004      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_GPIO_DeInit+0x9e>
 8002a64:	2300      	movs	r3, #0
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	f002 0203 	and.w	r2, r2, #3
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	4093      	lsls	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d132      	bne.n	8002adc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002a76:	4b4d      	ldr	r3, [pc, #308]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	494b      	ldr	r1, [pc, #300]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4947      	ldr	r1, [pc, #284]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002a92:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4944      	ldr	r1, [pc, #272]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002aa0:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4940      	ldr	r1, [pc, #256]	; (8002bac <HAL_GPIO_DeInit+0x1e4>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002abe:	4a34      	ldr	r2, [pc, #208]	; (8002b90 <HAL_GPIO_DeInit+0x1c8>)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	4830      	ldr	r0, [pc, #192]	; (8002b90 <HAL_GPIO_DeInit+0x1c8>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	08d2      	lsrs	r2, r2, #3
 8002b10:	4019      	ands	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2103      	movs	r1, #3
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	2101      	movs	r1, #1
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	401a      	ands	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	2101      	movs	r1, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f af2b 	bne.w	80029d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b82:	bf00      	nop
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40010000 	.word	0x40010000
 8002b94:	48000400 	.word	0x48000400
 8002b98:	48000800 	.word	0x48000800
 8002b9c:	48000c00 	.word	0x48000c00
 8002ba0:	48001000 	.word	0x48001000
 8002ba4:	48001400 	.word	0x48001400
 8002ba8:	48001800 	.word	0x48001800
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43d9      	mvns	r1, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	400b      	ands	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40007000 	.word	0x40007000

08002c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6e:	d130      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7c:	d038      	beq.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c86:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2232      	movs	r2, #50	; 0x32
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca4:	e002      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ccc:	d110      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cde:	d007      	beq.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce8:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40007000 	.word	0x40007000
 8002d04:	20000030 	.word	0x20000030
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3d8      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b97      	ldr	r3, [pc, #604]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d28:	4b94      	ldr	r3, [pc, #592]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80e4 	beq.w	8002f08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4a>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f040 808b 	bne.w	8002e64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 8087 	bne.w	8002e64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3b0      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	4b82      	ldr	r3, [pc, #520]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCC_OscConfig+0x7c>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d86:	e005      	b.n	8002d94 <HAL_RCC_OscConfig+0x88>
 8002d88:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d223      	bcs.n	8002de0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fd43 	bl	8003828 <RCC_SetFlashLatencyFromMSIRange>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e391      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a72      	ldr	r2, [pc, #456]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	496d      	ldr	r1, [pc, #436]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4968      	ldr	r1, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
 8002dde:	e025      	b.n	8002e2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a65      	ldr	r2, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4960      	ldr	r1, [pc, #384]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	495b      	ldr	r1, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd03 	bl	8003828 <RCC_SetFlashLatencyFromMSIRange>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e351      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e2c:	f000 fc38 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	4950      	ldr	r1, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	4a4e      	ldr	r2, [pc, #312]	; (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f9ed 	bl	8002230 <HAL_InitTick>
 8002e56:	4603      	mov	r3, r0
 8002e58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d052      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	e335      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d032      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a42      	ldr	r2, [pc, #264]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fa2a 	bl	80022d0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7ff fa26 	bl	80022d0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e31e      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4931      	ldr	r1, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	492c      	ldr	r1, [pc, #176]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ede:	f7ff f9f7 	bl	80022d0 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f9f3 	bl	80022d0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2eb      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1da>
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d074      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x21a>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d064      	beq.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d160      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e2c8      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x24a>
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e026      	b.n	8002fa4 <HAL_RCC_OscConfig+0x298>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5e:	d115      	bne.n	8002f8c <HAL_RCC_OscConfig+0x280>
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a02      	ldr	r2, [pc, #8]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e014      	b.n	8002fa4 <HAL_RCC_OscConfig+0x298>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08008d9c 	.word	0x08008d9c
 8002f84:	20000030 	.word	0x20000030
 8002f88:	20000034 	.word	0x20000034
 8002f8c:	4ba0      	ldr	r3, [pc, #640]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9f      	ldr	r2, [pc, #636]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b9d      	ldr	r3, [pc, #628]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a9c      	ldr	r2, [pc, #624]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff f990 	bl	80022d0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff f98c 	bl	80022d0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e284      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc6:	4b92      	ldr	r3, [pc, #584]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x2a8>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff f97c 	bl	80022d0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff f978 	bl	80022d0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e270      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d0>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d060      	beq.n	80030cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x310>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d119      	bne.n	800304a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d116      	bne.n	800304a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x328>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e24d      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	4973      	ldr	r1, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003048:	e040      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d023      	beq.n	800309a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003052:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7ff f937 	bl	80022d0 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7ff f933 	bl	80022d0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e22b      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003078:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b62      	ldr	r3, [pc, #392]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	495f      	ldr	r1, [pc, #380]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e018      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5c      	ldr	r2, [pc, #368]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7ff f913 	bl	80022d0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7ff f90f 	bl	80022d0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e207      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d03c      	beq.n	8003152 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e0:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e6:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7ff f8ee 	bl	80022d0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7ff f8ea 	bl	80022d0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1e2      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8003118:	e01b      	b.n	8003152 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800311c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003120:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7ff f8d1 	bl	80022d0 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7ff f8cd 	bl	80022d0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1c5      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ef      	bne.n	8003132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a6 	beq.w	80032ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10d      	bne.n	800318c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCC_OscConfig+0x508>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d118      	bne.n	80031ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_RCC_OscConfig+0x508>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_RCC_OscConfig+0x508>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a4:	f7ff f894 	bl	80022d0 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7ff f890 	bl	80022d0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e188      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_RCC_OscConfig+0x508>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4d8>
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e2:	e029      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_OscConfig+0x50c>
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	4a03      	ldr	r2, [pc, #12]	; (8003210 <HAL_RCC_OscConfig+0x504>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
 8003218:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a90      	ldr	r2, [pc, #576]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	4b8d      	ldr	r3, [pc, #564]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a8c      	ldr	r2, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff f846 	bl	80022d0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7ff f842 	bl	80022d0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e138      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325e:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ed      	beq.n	8003248 <HAL_RCC_OscConfig+0x53c>
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7ff f82f 	bl	80022d0 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7ff f82b 	bl	80022d0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e121      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800328c:	4b74      	ldr	r3, [pc, #464]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ed      	bne.n	8003276 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 810c 	beq.w	80034ce <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 80d4 	bne.w	8003468 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032c0:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d130      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	3b01      	subs	r3, #1
 80032e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d127      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11f      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003300:	2a07      	cmp	r2, #7
 8003302:	bf14      	ite	ne
 8003304:	2201      	movne	r2, #1
 8003306:	2200      	moveq	r2, #0
 8003308:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d109      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d06e      	beq.n	8003414 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d069      	beq.n	8003410 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800333c:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003348:	4b45      	ldr	r3, [pc, #276]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0bb      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a40      	ldr	r2, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003364:	f7fe ffb4 	bl	80022d0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe ffb0 	bl	80022d0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0a8      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_RCC_OscConfig+0x758>)
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800339a:	3a01      	subs	r2, #1
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a4:	0212      	lsls	r2, r2, #8
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ac:	0852      	lsrs	r2, r2, #1
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0552      	lsls	r2, r2, #21
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b8:	0852      	lsrs	r2, r2, #1
 80033ba:	3a01      	subs	r2, #1
 80033bc:	0652      	lsls	r2, r2, #25
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c4:	0912      	lsrs	r2, r2, #4
 80033c6:	0452      	lsls	r2, r2, #17
 80033c8:	430a      	orrs	r2, r1
 80033ca:	4925      	ldr	r1, [pc, #148]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d0:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7fe ff72 	bl	80022d0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe ff6e 	bl	80022d0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e066      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340e:	e05e      	b.n	80034ce <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e05d      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d156      	bne.n	80034ce <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003438:	f7fe ff4a 	bl	80022d0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe ff46 	bl	80022d0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e03e      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_OscConfig+0x754>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x734>
 800345e:	e036      	b.n	80034ce <HAL_RCC_OscConfig+0x7c2>
 8003460:	40021000 	.word	0x40021000
 8003464:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d02d      	beq.n	80034ca <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 8003474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 800348c:	f023 0303 	bic.w	r3, r3, #3
 8003490:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 8003498:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800349c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe ff15 	bl	80022d0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe ff11 	bl	80022d0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e009      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_OscConfig+0x7cc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x79e>
 80034c8:	e001      	b.n	80034ce <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0c8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4961      	ldr	r1, [pc, #388]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b5f      	ldr	r3, [pc, #380]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b0      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d04c      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003534:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d121      	bne.n	8003584 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e09e      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d107      	bne.n	800355c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d115      	bne.n	8003584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e092      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003564:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e086      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e07e      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 0203 	bic.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	493f      	ldr	r1, [pc, #252]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003596:	f7fe fe9b 	bl	80022d0 <HAL_GetTick>
 800359a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359e:	f7fe fe97 	bl	80022d0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e066      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b4:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 020c 	and.w	r2, r3, #12
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d1eb      	bne.n	800359e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	492c      	ldr	r1, [pc, #176]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d210      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4924      	ldr	r1, [pc, #144]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x1b0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e036      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4918      	ldr	r1, [pc, #96]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4910      	ldr	r1, [pc, #64]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003652:	f000 f825 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_ClockConfig+0x1b4>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	490c      	ldr	r1, [pc, #48]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fdda 	bl	8002230 <HAL_InitTick>
 800367c:	4603      	mov	r3, r0
 800367e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003680:	7afb      	ldrb	r3, [r7, #11]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
 8003694:	08008d9c 	.word	0x08008d9c
 8003698:	20000030 	.word	0x20000030
 800369c:	20000034 	.word	0x20000034

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x34>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d121      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11e      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e005      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036fc:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d102      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	e004      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d101      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d134      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0xa6>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d003      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0xac>
 8003744:	e005      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003748:	617b      	str	r3, [r7, #20]
      break;
 800374a:	e005      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800374e:	617b      	str	r3, [r7, #20]
      break;
 8003750:	e002      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	617b      	str	r3, [r7, #20]
      break;
 8003756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	fb03 f202 	mul.w	r2, r3, r2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	0e5b      	lsrs	r3, r3, #25
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	3301      	adds	r3, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003798:	69bb      	ldr	r3, [r7, #24]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08008db4 	.word	0x08008db4
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000030 	.word	0x20000030

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08008dac 	.word	0x08008dac

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003800:	f7ff ffda 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0adb      	lsrs	r3, r3, #11
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08008dac 	.word	0x08008dac

08003828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003840:	f7ff fa00 	bl	8002c44 <HAL_PWREx_GetVoltageRange>
 8003844:	6178      	str	r0, [r7, #20]
 8003846:	e014      	b.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003860:	f7ff f9f0 	bl	8002c44 <HAL_PWREx_GetVoltageRange>
 8003864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003878:	d10b      	bne.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d919      	bls.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2ba0      	cmp	r3, #160	; 0xa0
 8003884:	d902      	bls.n	800388c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003886:	2302      	movs	r3, #2
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e013      	b.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800388c:	2301      	movs	r3, #1
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e010      	b.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d902      	bls.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003898:	2303      	movs	r3, #3
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e00a      	b.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d102      	bne.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038a4:	2302      	movs	r3, #2
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e004      	b.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b70      	cmp	r3, #112	; 0x70
 80038ae:	d101      	bne.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b0:	2301      	movs	r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 0207 	bic.w	r2, r3, #7
 80038bc:	4909      	ldr	r1, [pc, #36]	; (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40022000 	.word	0x40022000

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f0:	2300      	movs	r3, #0
 80038f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003900:	2b00      	cmp	r3, #0
 8003902:	d041      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800390c:	d02a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800390e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003912:	d824      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800391a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800391e:	d81e      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d010      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800392a:	e018      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800392c:	4b86      	ldr	r3, [pc, #536]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a85      	ldr	r2, [pc, #532]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003938:	e015      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fabb 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394a:	e00c      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3320      	adds	r3, #32
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fba6 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	74fb      	strb	r3, [r7, #19]
      break;
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396c:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	4973      	ldr	r1, [pc, #460]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003982:	e001      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d041      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800399c:	d02a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800399e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a2:	d824      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ae:	d81e      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b8:	d010      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ba:	e018      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039bc:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a61      	ldr	r2, [pc, #388]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c8:	e015      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fa73 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039da:	e00c      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3320      	adds	r3, #32
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb5e 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	74fb      	strb	r3, [r7, #19]
      break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039fc:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a0a:	494f      	ldr	r1, [pc, #316]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a12:	e001      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a0 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a40:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4c:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a68:	f7fe fc32 	bl	80022d0 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6e:	e009      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fe fc2e 	bl	80022d0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	74fb      	strb	r3, [r7, #19]
        break;
 8003a82:	e005      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d15c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a96:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d019      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe fbed 	bl	80022d0 <HAL_GetTick>
 8003af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af8:	e00b      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fbe9 	bl	80022d0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d902      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ec      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	4904      	ldr	r1, [pc, #16]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b3e:	e009      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b54:	7c7b      	ldrb	r3, [r7, #17]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4b9e      	ldr	r3, [pc, #632]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	4a9d      	ldr	r2, [pc, #628]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b72:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 0203 	bic.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	4994      	ldr	r1, [pc, #592]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b94:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 020c 	bic.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	498c      	ldr	r1, [pc, #560]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb6:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	4983      	ldr	r1, [pc, #524]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	4972      	ldr	r1, [pc, #456]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c1c:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	496a      	ldr	r1, [pc, #424]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	4961      	ldr	r1, [pc, #388]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c60:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	4959      	ldr	r1, [pc, #356]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c82:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	4950      	ldr	r1, [pc, #320]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca4:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	4948      	ldr	r1, [pc, #288]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc6:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	493f      	ldr	r1, [pc, #252]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d028      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf6:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d06:	d106      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d12:	60d3      	str	r3, [r2, #12]
 8003d14:	e011      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f8c8 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d30:	7cfb      	ldrb	r3, [r7, #19]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d028      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	491f      	ldr	r1, [pc, #124]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d64:	d106      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d70:	60d3      	str	r3, [r2, #12]
 8003d72:	e011      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f899 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dce:	60d3      	str	r3, [r2, #12]
 8003dd0:	e014      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f867 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02f      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e16:	4928      	ldr	r1, [pc, #160]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f844 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d014      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	74bb      	strb	r3, [r7, #18]
 8003e42:	e011      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3320      	adds	r3, #32
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f925 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e82:	490d      	ldr	r1, [pc, #52]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea6:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000

08003ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eca:	4b75      	ldr	r3, [pc, #468]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d018      	beq.n	8003f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ed6:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10d      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
       ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d047      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e044      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d018      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0x86>
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d825      	bhi.n	8003f60 <RCCEx_PLLSAI1_Config+0xa4>
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d002      	beq.n	8003f1e <RCCEx_PLLSAI1_Config+0x62>
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d009      	beq.n	8003f30 <RCCEx_PLLSAI1_Config+0x74>
 8003f1c:	e020      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f1e:	4b60      	ldr	r3, [pc, #384]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11d      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e01a      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f30:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f40:	e013      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f42:	4b57      	ldr	r3, [pc, #348]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f4e:	4b54      	ldr	r3, [pc, #336]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f5e:	e006      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e004      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f66:	bf00      	nop
 8003f68:	e002      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f76:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	4944      	ldr	r1, [pc, #272]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d17d      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f98:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a40      	ldr	r2, [pc, #256]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa4:	f7fe f994 	bl	80022d0 <HAL_GetTick>
 8003fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003faa:	e009      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fac:	f7fe f990 	bl	80022d0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8003fbe:	e005      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc0:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ef      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d160      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d111      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	0912      	lsrs	r2, r2, #4
 8003ff0:	0452      	lsls	r2, r2, #17
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	492a      	ldr	r1, [pc, #168]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e027      	b.n	800404c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d112      	bne.n	8004028 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800400a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6892      	ldr	r2, [r2, #8]
 8004012:	0211      	lsls	r1, r2, #8
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6912      	ldr	r2, [r2, #16]
 8004018:	0852      	lsrs	r2, r2, #1
 800401a:	3a01      	subs	r2, #1
 800401c:	0552      	lsls	r2, r2, #21
 800401e:	430a      	orrs	r2, r1
 8004020:	491f      	ldr	r1, [pc, #124]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	610b      	str	r3, [r1, #16]
 8004026:	e011      	b.n	800404c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	0211      	lsls	r1, r2, #8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6952      	ldr	r2, [r2, #20]
 800403e:	0852      	lsrs	r2, r2, #1
 8004040:	3a01      	subs	r2, #1
 8004042:	0652      	lsls	r2, r2, #25
 8004044:	430a      	orrs	r2, r1
 8004046:	4916      	ldr	r1, [pc, #88]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fe f93a 	bl	80022d0 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800405e:	e009      	b.n	8004074 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004060:	f7fe f936 	bl	80022d0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	73fb      	strb	r3, [r7, #15]
          break;
 8004072:	e005      	b.n	8004080 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ef      	beq.n	8004060 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	4904      	ldr	r1, [pc, #16]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000

080040a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040be:	4b67      	ldr	r3, [pc, #412]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10d      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
       ||
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040d6:	4b61      	ldr	r3, [pc, #388]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
       ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d047      	beq.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	e044      	b.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d018      	beq.n	800412a <RCCEx_PLLSAI2_Config+0x86>
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d825      	bhi.n	8004148 <RCCEx_PLLSAI2_Config+0xa4>
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <RCCEx_PLLSAI2_Config+0x62>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d009      	beq.n	8004118 <RCCEx_PLLSAI2_Config+0x74>
 8004104:	e020      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11d      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004116:	e01a      	b.n	800414e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e013      	b.n	8004152 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800412a:	4b4c      	ldr	r3, [pc, #304]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004136:	4b49      	ldr	r3, [pc, #292]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004146:	e006      	b.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e004      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004156:	bf00      	nop
    }

    if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10d      	bne.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800415e:	4b3f      	ldr	r3, [pc, #252]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	430b      	orrs	r3, r1
 8004174:	4939      	ldr	r1, [pc, #228]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d167      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004180:	4b36      	ldr	r3, [pc, #216]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a35      	ldr	r2, [pc, #212]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418c:	f7fe f8a0 	bl	80022d0 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004192:	e009      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004194:	f7fe f89c 	bl	80022d0 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	73fb      	strb	r3, [r7, #15]
        break;
 80041a6:	e005      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a8:	4b2c      	ldr	r3, [pc, #176]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ef      	bne.n	8004194 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14a      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6892      	ldr	r2, [r2, #8]
 80041d0:	0211      	lsls	r1, r2, #8
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	0912      	lsrs	r2, r2, #4
 80041d8:	0452      	lsls	r2, r2, #17
 80041da:	430a      	orrs	r2, r1
 80041dc:	491f      	ldr	r1, [pc, #124]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	614b      	str	r3, [r1, #20]
 80041e2:	e011      	b.n	8004208 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6892      	ldr	r2, [r2, #8]
 80041f4:	0211      	lsls	r1, r2, #8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6912      	ldr	r2, [r2, #16]
 80041fa:	0852      	lsrs	r2, r2, #1
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0652      	lsls	r2, r2, #25
 8004200:	430a      	orrs	r2, r1
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe f85c 	bl	80022d0 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800421c:	f7fe f858 	bl	80022d0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
          break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4904      	ldr	r1, [pc, #16]	; (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000

08004260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e095      	b.n	800439e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d009      	beq.n	8004298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
 800428a:	e005      	b.n	8004298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f877 	bl	80043a6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d8:	d902      	bls.n	80042e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e002      	b.n	80042e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ee:	d007      	beq.n	8004300 <HAL_SPI_Init+0xa0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	f003 0204 	and.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800437c:	ea42 0103 	orr.w	r1, r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x26>
 80043dc:	2302      	movs	r3, #2
 80043de:	e1fb      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x41e>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043e8:	f7fd ff72 	bl	80022d0 <HAL_GetTick>
 80043ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043fc:	887b      	ldrh	r3, [r7, #2]
 80043fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004404:	7efb      	ldrb	r3, [r7, #27]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d00e      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x6e>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004410:	d106      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x66>
 800441a:	7efb      	ldrb	r3, [r7, #27]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d003      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004426:	e1cd      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_SPI_TransmitReceive+0x80>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_SPI_TransmitReceive+0x80>
 8004434:	887b      	ldrh	r3, [r7, #2]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004440:	e1c0      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b04      	cmp	r3, #4
 800444c:	d003      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2205      	movs	r2, #5
 8004452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	887a      	ldrh	r2, [r7, #2]
 8004466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	887a      	ldrh	r2, [r7, #2]
 8004482:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004498:	d802      	bhi.n	80044a0 <HAL_SPI_TransmitReceive+0xe6>
 800449a:	8a3b      	ldrh	r3, [r7, #16]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d908      	bls.n	80044b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	e007      	b.n	80044c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d007      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044e8:	d97c      	bls.n	80045e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x13e>
 80044f2:	8a7b      	ldrh	r3, [r7, #18]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d169      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451c:	e056      	b.n	80045cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b02      	cmp	r3, #2
 800452a:	d11b      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x1aa>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x1aa>
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	2b01      	cmp	r3, #1
 800453a:	d113      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d11c      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1f2>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	b292      	uxth	r2, r2
 800458a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a8:	2301      	movs	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ac:	f7fd fe90 	bl	80022d0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d807      	bhi.n	80045cc <HAL_SPI_TransmitReceive+0x212>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045ca:	e0fb      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1a3      	bne.n	800451e <HAL_SPI_TransmitReceive+0x164>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d19d      	bne.n	800451e <HAL_SPI_TransmitReceive+0x164>
 80045e2:	e0df      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x23a>
 80045ec:	8a7b      	ldrh	r3, [r7, #18]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 80cb 	bne.w	800478a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d912      	bls.n	8004624 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b02      	subs	r3, #2
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004622:	e0b2      	b.n	800478a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464a:	e09e      	b.n	800478a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d134      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x30a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02f      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x30a>
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	2b01      	cmp	r3, #1
 8004668:	d12c      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d912      	bls.n	800469a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	881a      	ldrh	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b02      	subs	r3, #2
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004698:	e012      	b.n	80046c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d148      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x3aa>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d042      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d923      	bls.n	8004732 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	b292      	uxth	r2, r2
 80046f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b02      	subs	r3, #2
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d81f      	bhi.n	8004760 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	e016      	b.n	8004760 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f103 020c 	add.w	r2, r3, #12
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	7812      	ldrb	r2, [r2, #0]
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004764:	f7fd fdb4 	bl	80022d0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004770:	429a      	cmp	r2, r3
 8004772:	d803      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x3c2>
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d102      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x3c8>
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004788:	e01c      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f af5b 	bne.w	800464c <HAL_SPI_TransmitReceive+0x292>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f47f af54 	bne.w	800464c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f945 	bl	8004a38 <SPI_EndRxTxTransaction>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
 80047c0:	e000      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80047c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ee:	b2db      	uxtb	r3, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800480c:	f7fd fd60 	bl	80022d0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4413      	add	r3, r2
 800481a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800481c:	f7fd fd58 	bl	80022d0 <HAL_GetTick>
 8004820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	015b      	lsls	r3, r3, #5
 8004828:	0d1b      	lsrs	r3, r3, #20
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004832:	e054      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d050      	beq.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800483c:	f7fd fd48 	bl	80022d0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	429a      	cmp	r2, r3
 800484a:	d902      	bls.n	8004852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d13d      	bne.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d111      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d004      	beq.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d107      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d10f      	bne.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e017      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d19b      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000030 	.word	0x20000030

0800490c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800491e:	f7fd fcd7 	bl	80022d0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	4413      	add	r3, r2
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800492e:	f7fd fccf 	bl	80022d0 <HAL_GetTick>
 8004932:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800493c:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00da      	lsls	r2, r3, #3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	0d1b      	lsrs	r3, r3, #20
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004954:	e060      	b.n	8004a18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800495c:	d107      	bne.n	800496e <SPI_WaitFifoStateUntilTimeout+0x62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800496c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d050      	beq.n	8004a18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004976:	f7fd fcab 	bl	80022d0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	429a      	cmp	r2, r3
 8004984:	d902      	bls.n	800498c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d13d      	bne.n	8004a08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800499a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a4:	d111      	bne.n	80049ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ae:	d004      	beq.n	80049ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d107      	bne.n	80049ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d10f      	bne.n	80049f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e010      	b.n	8004a2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d196      	bne.n	8004956 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000030 	.word	0x20000030

08004a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ff5b 	bl	800490c <SPI_WaitFifoStateUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e027      	b.n	8004abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fec0 	bl	80047fc <SPI_WaitFlagStateUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e014      	b.n	8004abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff ff34 	bl	800490c <SPI_WaitFifoStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e000      	b.n	8004abc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e040      	b.n	8004b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f83a 	bl	8004b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8ca 	bl	8004c9c <UART_SetConfig>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e022      	b.n	8004b58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb76 	bl	800520c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fbfd 	bl	8005350 <UART_CheckIdleState>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	f040 8082 	bne.w	8004c92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_Transmit+0x26>
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e07a      	b.n	8004c94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_UART_Transmit+0x38>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e073      	b.n	8004c94 <HAL_UART_Transmit+0x120>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2221      	movs	r2, #33	; 0x21
 8004bc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc2:	f7fd fb85 	bl	80022d0 <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x80>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c04:	e02d      	b.n	8004c62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fbe6 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e039      	b.n	8004c94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c32:	b292      	uxth	r2, r2
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e008      	b.n	8004c50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b292      	uxth	r2, r2
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1cb      	bne.n	8004c06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	; 0x40
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fbb2 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e005      	b.n	8004c94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4ba4      	ldr	r3, [pc, #656]	; (8004f5c <UART_SetConfig+0x2c0>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a99      	ldr	r2, [pc, #612]	; (8004f60 <UART_SetConfig+0x2c4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	4313      	orrs	r3, r2
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a90      	ldr	r2, [pc, #576]	; (8004f64 <UART_SetConfig+0x2c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d126      	bne.n	8004d74 <UART_SetConfig+0xd8>
 8004d26:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d81b      	bhi.n	8004d6c <UART_SetConfig+0xd0>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0xa0>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e116      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e112      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e10e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e10a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e106      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7c      	ldr	r2, [pc, #496]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d138      	bne.n	8004df0 <UART_SetConfig+0x154>
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d82d      	bhi.n	8004de8 <UART_SetConfig+0x14c>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0xf8>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e0d8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e0d4      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e0d0      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e0cc      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e0c8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d125      	bne.n	8004e46 <UART_SetConfig+0x1aa>
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d016      	beq.n	8004e36 <UART_SetConfig+0x19a>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d818      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d00a      	beq.n	8004e26 <UART_SetConfig+0x18a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d814      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <UART_SetConfig+0x182>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d008      	beq.n	8004e2e <UART_SetConfig+0x192>
 8004e1c:	e00f      	b.n	8004e3e <UART_SetConfig+0x1a2>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e24:	e0ad      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e26:	2302      	movs	r3, #2
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e34:	e0a5      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e36:	2308      	movs	r3, #8
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3c:	e0a1      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e3e:	2310      	movs	r3, #16
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e44:	e09d      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	; (8004f74 <UART_SetConfig+0x2d8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x200>
 8004e50:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	d016      	beq.n	8004e8c <UART_SetConfig+0x1f0>
 8004e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e60:	d818      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d00a      	beq.n	8004e7c <UART_SetConfig+0x1e0>
 8004e66:	2b80      	cmp	r3, #128	; 0x80
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <UART_SetConfig+0x1d8>
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d008      	beq.n	8004e84 <UART_SetConfig+0x1e8>
 8004e72:	e00f      	b.n	8004e94 <UART_SetConfig+0x1f8>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e082      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e07e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e07a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e076      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e072      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <UART_SetConfig+0x2dc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12a      	bne.n	8004efc <UART_SetConfig+0x260>
 8004ea6:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb4:	d01a      	beq.n	8004eec <UART_SetConfig+0x250>
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eba:	d81b      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d00c      	beq.n	8004edc <UART_SetConfig+0x240>
 8004ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec6:	d815      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <UART_SetConfig+0x238>
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x248>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x258>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e052      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e04e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e04a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e046      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e042      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <UART_SetConfig+0x2c4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d13a      	bne.n	8004f7c <UART_SetConfig+0x2e0>
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x2b0>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x2a0>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x298>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x2a8>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x2b8>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	e022      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e01e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e01a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f5c:	efff69f3 	.word	0xefff69f3
 8004f60:	40008000 	.word	0x40008000
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a9f      	ldr	r2, [pc, #636]	; (8005204 <UART_SetConfig+0x568>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d17a      	bne.n	8005082 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d824      	bhi.n	8004fde <UART_SetConfig+0x342>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x300>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fcf 	.word	0x08004fcf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fdf 	.word	0x08004fdf
 8004fbc:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe fc06 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <UART_SetConfig+0x56c>)
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fe fb67 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8004fd2:	61f8      	str	r0, [r7, #28]
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80fb 	beq.w	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d305      	bcc.n	800500e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005014:	e0e8      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	461c      	mov	r4, r3
 800501c:	4615      	mov	r5, r2
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	022b      	lsls	r3, r5, #8
 8005028:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800502c:	0222      	lsls	r2, r4, #8
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6849      	ldr	r1, [r1, #4]
 8005032:	0849      	lsrs	r1, r1, #1
 8005034:	2000      	movs	r0, #0
 8005036:	4688      	mov	r8, r1
 8005038:	4681      	mov	r9, r0
 800503a:	eb12 0a08 	adds.w	sl, r2, r8
 800503e:	eb43 0b09 	adc.w	fp, r3, r9
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005066:	d308      	bcc.n	800507a <UART_SetConfig+0x3de>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506e:	d204      	bcs.n	800507a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e0b6      	b.n	80051e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005080:	e0b2      	b.n	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	d15e      	bne.n	800514a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800508c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005090:	2b08      	cmp	r3, #8
 8005092:	d828      	bhi.n	80050e6 <UART_SetConfig+0x44a>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x400>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fe fb86 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 80050c4:	61f8      	str	r0, [r7, #28]
        break;
 80050c6:	e014      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fb98 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <UART_SetConfig+0x56c>)
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fe fae3 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 80050da:	61f8      	str	r0, [r7, #28]
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	61fb      	str	r3, [r7, #28]
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d077      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005a      	lsls	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d916      	bls.n	8005142 <UART_SetConfig+0x4a6>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d212      	bcs.n	8005142 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f023 030f 	bic.w	r3, r3, #15
 8005124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	b29a      	uxth	r2, r3
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	4313      	orrs	r3, r2
 8005136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	8afa      	ldrh	r2, [r7, #22]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e052      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005148:	e04e      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800514e:	2b08      	cmp	r3, #8
 8005150:	d827      	bhi.n	80051a2 <UART_SetConfig+0x506>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x4bc>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fe fb28 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 8005180:	61f8      	str	r0, [r7, #28]
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe fb3a 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fa85 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051ac:	bf00      	nop
    }

    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085a      	lsrs	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d909      	bls.n	80051e2 <UART_SetConfig+0x546>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d205      	bcs.n	80051e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e002      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000
 8005208:	00f42400 	.word	0x00f42400

0800520c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01a      	beq.n	8005322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530a:	d10a      	bne.n	8005322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc ffb6 	bl	80022d0 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d10e      	bne.n	8005392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f82d 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e023      	b.n	80053da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d10e      	bne.n	80053be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f817 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e00d      	b.n	80053da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b09c      	sub	sp, #112	; 0x70
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	e0a5      	b.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	f000 80a1 	beq.w	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fc ff67 	bl	80022d0 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
 800540e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005410:	2b00      	cmp	r3, #0
 8005412:	d13e      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005428:	667b      	str	r3, [r7, #100]	; 0x64
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005434:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005466:	64ba      	str	r2, [r7, #72]	; 0x48
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800546c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e067      	b.n	8005562 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d04f      	beq.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d147      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	66bb      	str	r3, [r7, #104]	; 0x68
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800550c:	623a      	str	r2, [r7, #32]
 800550e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	61bb      	str	r3, [r7, #24]
   return(result);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e010      	b.n	8005562 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	429a      	cmp	r2, r3
 800555c:	f43f af4a 	beq.w	80053f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3770      	adds	r7, #112	; 0x70
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	2218      	movs	r2, #24
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f003 fae8 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005582:	233f      	movs	r3, #63	; 0x3f
 8005584:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005586:	2381      	movs	r3, #129	; 0x81
 8005588:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800558a:	1dfb      	adds	r3, r7, #7
 800558c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f002 fe6d 	bl	8008278 <hci_send_req>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da01      	bge.n	80055a8 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80055a4:	23ff      	movs	r3, #255	; 0xff
 80055a6:	e005      	b.n	80055b4 <aci_gap_set_non_discoverable+0x4a>
  if (status) {
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <aci_gap_set_non_discoverable+0x48>
    return status;
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	e000      	b.n	80055b4 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b0ce      	sub	sp, #312	; 0x138
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4605      	mov	r5, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055ce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80055d2:	462a      	mov	r2, r5
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055de:	4622      	mov	r2, r4
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055e6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80055ea:	4602      	mov	r2, r0
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055f2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80055f6:	460a      	mov	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005602:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005606:	3308      	adds	r3, #8
 8005608:	f107 020c 	add.w	r2, r7, #12
 800560c:	4413      	add	r3, r2
 800560e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005612:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005616:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800561a:	4413      	add	r3, r2
 800561c:	3309      	adds	r3, #9
 800561e:	f107 020c 	add.w	r2, r7, #12
 8005622:	4413      	add	r3, r2
 8005624:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005628:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800562c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800563a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800563e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005642:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800564a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800564e:	3301      	adds	r3, #1
 8005650:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8005654:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005658:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800565c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005666:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800566a:	3302      	adds	r3, #2
 800566c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8005670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005674:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005678:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005682:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005686:	3302      	adds	r3, #2
 8005688:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800568c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005690:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005694:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800569c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80056a0:	3301      	adds	r3, #1
 80056a2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 80056a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056aa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80056ae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80056b0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80056b4:	3301      	adds	r3, #1
 80056b6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 80056ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80056c2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80056c4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80056c8:	3301      	adds	r3, #1
 80056ca:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 80056ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056d2:	3308      	adds	r3, #8
 80056d4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80056d8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 faad 	bl	8008c3c <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80056e2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80056e6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80056ea:	4413      	add	r3, r2
 80056ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80056f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80056f4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80056f8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80056fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80056fe:	3301      	adds	r3, #1
 8005700:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8005704:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005708:	3301      	adds	r3, #1
 800570a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800570e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005712:	4618      	mov	r0, r3
 8005714:	f003 fa92 	bl	8008c3c <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8005718:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800571c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005720:	4413      	add	r3, r2
 8005722:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8005726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800572e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005730:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005734:	3302      	adds	r3, #2
 8005736:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800573a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005742:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005744:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005748:	3302      	adds	r3, #2
 800574a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800574e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005752:	2218      	movs	r2, #24
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f003 f9fb 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 800575c:	233f      	movs	r3, #63	; 0x3f
 800575e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005762:	2383      	movs	r3, #131	; 0x83
 8005764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005770:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005778:	f107 030b 	add.w	r3, r7, #11
 800577c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005780:	2301      	movs	r3, #1
 8005782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fd73 	bl	8008278 <hci_send_req>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	da01      	bge.n	800579c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005798:	23ff      	movs	r3, #255	; 0xff
 800579a:	e00d      	b.n	80057b8 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800579c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057a0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <aci_gap_set_discoverable+0x1fa>
    return status;
 80057aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057ae:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	e000      	b.n	80057b8 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80057be:	46bd      	mov	sp, r7
 80057c0:	bdb0      	pop	{r4, r5, r7, pc}

080057c2 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80057c2:	b590      	push	{r4, r7, lr}
 80057c4:	b0cf      	sub	sp, #316	; 0x13c
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80057d2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057dc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80057e0:	4622      	mov	r2, r4
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057e8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80057ec:	4602      	mov	r2, r0
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057f4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80057f8:	460a      	mov	r2, r1
 80057fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	2207      	movs	r2, #7
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f003 f9a0 	bl	8008b52 <memset>
  uint8_t index_input = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005818:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800581c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005820:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005828:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800582c:	3301      	adds	r3, #1
 800582e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005832:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005836:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800583a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005842:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005846:	3301      	adds	r3, #1
 8005848:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800584c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005850:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005854:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005858:	7812      	ldrb	r2, [r2, #0]
 800585a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800585c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005860:	3301      	adds	r3, #1
 8005862:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005866:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800586a:	2218      	movs	r2, #24
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f003 f96f 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005874:	233f      	movs	r3, #63	; 0x3f
 8005876:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800587a:	238a      	movs	r3, #138	; 0x8a
 800587c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005888:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800588c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005890:	f107 030c 	add.w	r3, r7, #12
 8005894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005898:	2307      	movs	r3, #7
 800589a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800589e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 fce7 	bl	8008278 <hci_send_req>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da01      	bge.n	80058b4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80058b0:	23ff      	movs	r3, #255	; 0xff
 80058b2:	e02e      	b.n	8005912 <aci_gap_init+0x150>
  if (resp.Status) {
 80058b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <aci_gap_init+0x10c>
    return resp.Status;
 80058c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	e021      	b.n	8005912 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80058ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80058e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80058fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80058fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005904:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800590e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}

0800591c <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800591c:	b5b0      	push	{r4, r5, r7, lr}
 800591e:	b0cc      	sub	sp, #304	; 0x130
 8005920:	af00      	add	r7, sp, #0
 8005922:	4605      	mov	r5, r0
 8005924:	460c      	mov	r4, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005932:	462a      	mov	r2, r5
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800593e:	4622      	mov	r2, r4
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800594a:	4602      	mov	r2, r0
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005956:	460a      	mov	r2, r1
 8005958:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005966:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005978:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800597c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005984:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005988:	3302      	adds	r3, #2
 800598a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005996:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800599a:	8812      	ldrh	r2, [r2, #0]
 800599c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800599e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059a2:	3302      	adds	r3, #2
 80059a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059b0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80059b4:	7812      	ldrb	r2, [r2, #0]
 80059b6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80059b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059bc:	3301      	adds	r3, #1
 80059be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ca:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059d6:	3301      	adds	r3, #1
 80059d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80059dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059e0:	2218      	movs	r2, #24
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f003 f8b4 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 80059ea:	233f      	movs	r3, #63	; 0x3f
 80059ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 80059f0:	2397      	movs	r3, #151	; 0x97
 80059f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80059f6:	230f      	movs	r3, #15
 80059f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005a04:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005a0c:	f107 030b 	add.w	r3, r7, #11
 8005a10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 fc29 	bl	8008278 <hci_send_req>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da01      	bge.n	8005a30 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005a2c:	23ff      	movs	r3, #255	; 0xff
 8005a2e:	e00d      	b.n	8005a4c <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bdb0      	pop	{r4, r5, r7, pc}

08005a56 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005a56:	b590      	push	{r4, r7, lr}
 8005a58:	b0cf      	sub	sp, #316	; 0x13c
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a66:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a70:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005a74:	4622      	mov	r2, r4
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a80:	4602      	mov	r2, r0
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a88:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a9c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005ab2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005ab6:	8812      	ldrh	r2, [r2, #0]
 8005ab8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005aba:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005abe:	3302      	adds	r3, #2
 8005ac0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005ac4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ac8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005acc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005ad4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ad8:	3302      	adds	r3, #2
 8005ada:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ae2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005ae6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005aee:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005af2:	3301      	adds	r3, #1
 8005af4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005afc:	1d58      	adds	r0, r3, #5
 8005afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b06:	2206      	movs	r2, #6
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	f003 f897 	bl	8008c3c <memcpy>
  index_input += 6;
 8005b0e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b12:	3306      	adds	r3, #6
 8005b14:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005b20:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005b22:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b26:	3301      	adds	r3, #1
 8005b28:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005b2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b30:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005b34:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005b36:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b44:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005b48:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005b4a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b4e:	3302      	adds	r3, #2
 8005b50:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b58:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005b5c:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005b5e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b62:	3302      	adds	r3, #2
 8005b64:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b6c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005b70:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005b72:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b76:	3302      	adds	r3, #2
 8005b78:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005b7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b80:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005b84:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005b86:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005b90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b94:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005b98:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005b9a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ba4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ba8:	2218      	movs	r2, #24
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 ffd0 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005bb2:	233f      	movs	r3, #63	; 0x3f
 8005bb4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005bb8:	239c      	movs	r3, #156	; 0x9c
 8005bba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005bbe:	230f      	movs	r3, #15
 8005bc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005bcc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005bd4:	f107 0313 	add.w	r3, r7, #19
 8005bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005be2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 fb45 	bl	8008278 <hci_send_req>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da01      	bge.n	8005bf8 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005bf4:	23ff      	movs	r3, #255	; 0xff
 8005bf6:	e00d      	b.n	8005c14 <aci_gap_create_connection+0x1be>
  if (status) {
 8005bf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bfc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <aci_gap_create_connection+0x1bc>
    return status;
 8005c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c0a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	e000      	b.n	8005c14 <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}

08005c1e <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b0cc      	sub	sp, #304	; 0x130
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4602      	mov	r2, r0
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005c2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c52:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c5a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c5e:	3301      	adds	r3, #1
 8005c60:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c68:	2218      	movs	r2, #24
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 ff70 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005c72:	233f      	movs	r3, #63	; 0x3f
 8005c74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005c78:	239d      	movs	r3, #157	; 0x9d
 8005c7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c7e:	f107 030c 	add.w	r3, r7, #12
 8005c82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c86:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c8e:	f107 030b 	add.w	r3, r7, #11
 8005c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005c9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f002 fae8 	bl	8008278 <hci_send_req>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da01      	bge.n	8005cb2 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005cae:	23ff      	movs	r3, #255	; 0xff
 8005cb0:	e00d      	b.n	8005cce <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <aci_gap_terminate_gap_proc+0xae>
    return status;
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	e000      	b.n	8005cce <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ce2:	f107 0308 	add.w	r3, r7, #8
 8005ce6:	2218      	movs	r2, #24
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f002 ff31 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005cf0:	233f      	movs	r3, #63	; 0x3f
 8005cf2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005cf4:	f240 1301 	movw	r3, #257	; 0x101
 8005cf8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005cfa:	1dfb      	adds	r3, r7, #7
 8005cfc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 fab5 	bl	8008278 <hci_send_req>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da01      	bge.n	8005d18 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005d14:	23ff      	movs	r3, #255	; 0xff
 8005d16:	e005      	b.n	8005d24 <aci_gatt_init+0x4c>
  if (status) {
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <aci_gatt_init+0x4a>
    return status;
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	e000      	b.n	8005d24 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b0cf      	sub	sp, #316	; 0x13c
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005d38:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005d3c:	6001      	str	r1, [r0, #0]
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d46:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d52:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005d56:	4602      	mov	r2, r0
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d5e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005d62:	460a      	mov	r2, r1
 8005d64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d72:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00a      	beq.n	8005d92 <aci_gatt_add_service+0x66>
 8005d7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d80:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d101      	bne.n	8005d8e <aci_gatt_add_service+0x62>
 8005d8a:	2311      	movs	r3, #17
 8005d8c:	e002      	b.n	8005d94 <aci_gatt_add_service+0x68>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <aci_gatt_add_service+0x68>
 8005d92:	2303      	movs	r3, #3
 8005d94:	f107 020c 	add.w	r2, r7, #12
 8005d98:	4413      	add	r3, r2
 8005d9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	2203      	movs	r2, #3
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 fed3 	bl	8008b52 <memset>
  uint8_t index_input = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005db2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005db6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dba:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005dc2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8005dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dd0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d002      	beq.n	8005de0 <aci_gatt_add_service+0xb4>
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d004      	beq.n	8005de8 <aci_gatt_add_service+0xbc>
 8005dde:	e007      	b.n	8005df0 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005de6:	e005      	b.n	8005df4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005dee:	e001      	b.n	8005df4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005df0:	2347      	movs	r3, #71	; 0x47
 8005df2:	e06c      	b.n	8005ece <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8005df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005df8:	1c58      	adds	r0, r3, #1
 8005dfa:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005e06:	6819      	ldr	r1, [r3, #0]
 8005e08:	f002 ff18 	bl	8008c3c <memcpy>
    index_input += size;
 8005e0c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005e10:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005e14:	4413      	add	r3, r2
 8005e16:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e22:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005e2a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005e2e:	3301      	adds	r3, #1
 8005e30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e3c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005e44:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e52:	2218      	movs	r2, #24
 8005e54:	2100      	movs	r1, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 fe7b 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8005e5c:	233f      	movs	r3, #63	; 0x3f
 8005e5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005e62:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005e66:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e72:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005e76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005e82:	2303      	movs	r3, #3
 8005e84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005e88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f002 f9f2 	bl	8008278 <hci_send_req>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da01      	bge.n	8005e9e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005e9a:	23ff      	movs	r3, #255	; 0xff
 8005e9c:	e017      	b.n	8005ece <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8005e9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005eac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	e00a      	b.n	8005ece <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005eb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005eca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd90      	pop	{r4, r7, pc}

08005ed8 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0d1      	sub	sp, #324	; 0x144
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005ee6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005eea:	600a      	str	r2, [r1, #0]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ef2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005efe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f02:	4602      	mov	r2, r0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f0a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005f0e:	460a      	mov	r2, r1
 8005f10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005f12:	f107 0314 	add.w	r3, r7, #20
 8005f16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005f1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f1e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d00a      	beq.n	8005f3e <aci_gatt_add_char+0x66>
 8005f28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d101      	bne.n	8005f3a <aci_gatt_add_char+0x62>
 8005f36:	2313      	movs	r3, #19
 8005f38:	e002      	b.n	8005f40 <aci_gatt_add_char+0x68>
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e000      	b.n	8005f40 <aci_gatt_add_char+0x68>
 8005f3e:	2305      	movs	r3, #5
 8005f40:	f107 0214 	add.w	r2, r7, #20
 8005f44:	4413      	add	r3, r2
 8005f46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	2203      	movs	r2, #3
 8005f50:	2100      	movs	r1, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 fdfd 	bl	8008b52 <memset>
  uint8_t index_input = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005f5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f62:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f66:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005f6a:	8812      	ldrh	r2, [r2, #0]
 8005f6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f6e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f72:	3302      	adds	r3, #2
 8005f74:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005f78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f7c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f80:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f88:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8005f92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f96:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d002      	beq.n	8005fa6 <aci_gatt_add_char+0xce>
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d004      	beq.n	8005fae <aci_gatt_add_char+0xd6>
 8005fa4:	e007      	b.n	8005fb6 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005fac:	e005      	b.n	8005fba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005fae:	2310      	movs	r3, #16
 8005fb0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005fb4:	e001      	b.n	8005fba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005fb6:	2347      	movs	r3, #71	; 0x47
 8005fb8:	e091      	b.n	80060de <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005fba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005fbe:	1cd8      	adds	r0, r3, #3
 8005fc0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005fc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fc8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005fcc:	6819      	ldr	r1, [r3, #0]
 8005fce:	f002 fe35 	bl	8008c3c <memcpy>
    index_input += size;
 8005fd2:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8005fd6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005fda:	4413      	add	r3, r2
 8005fdc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005fe8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005fec:	8812      	ldrh	r2, [r2, #0]
 8005fee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005ff0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ffe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006002:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006004:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006008:	3301      	adds	r3, #1
 800600a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800600e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006012:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006016:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006018:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800601c:	3301      	adds	r3, #1
 800601e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8006022:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006026:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800602a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800602c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006030:	3301      	adds	r3, #1
 8006032:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8006036:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800603a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800603e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006040:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006044:	3301      	adds	r3, #1
 8006046:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800604a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800604e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006052:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006054:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006058:	3301      	adds	r3, #1
 800605a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800605e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006062:	2218      	movs	r2, #24
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f002 fd73 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 800606c:	233f      	movs	r3, #63	; 0x3f
 800606e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006072:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006076:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800607a:	f107 0314 	add.w	r3, r7, #20
 800607e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006082:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006086:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800608a:	f107 0310 	add.w	r3, r7, #16
 800608e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006092:	2303      	movs	r3, #3
 8006094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006098:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 f8ea 	bl	8008278 <hci_send_req>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da01      	bge.n	80060ae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80060aa:	23ff      	movs	r3, #255	; 0xff
 80060ac:	e017      	b.n	80060de <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80060ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80060b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80060bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	e00a      	b.n	80060de <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80060c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80060cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80060da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}

080060e8 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0cc      	sub	sp, #304	; 0x130
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4602      	mov	r2, r0
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060f8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800611c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006124:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006128:	3302      	adds	r3, #2
 800612a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800612e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006132:	2218      	movs	r2, #24
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f002 fd0b 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 800613c:	233f      	movs	r3, #63	; 0x3f
 800613e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8006142:	f240 130b 	movw	r3, #267	; 0x10b
 8006146:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800614a:	230f      	movs	r3, #15
 800614c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006158:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800615c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006160:	f107 030b 	add.w	r3, r7, #11
 8006164:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006168:	2301      	movs	r3, #1
 800616a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800616e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006172:	2100      	movs	r1, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f002 f87f 	bl	8008278 <hci_send_req>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	da01      	bge.n	8006184 <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 8006180:	23ff      	movs	r3, #255	; 0xff
 8006182:	e00d      	b.n	80061a0 <aci_gatt_exchange_config+0xb8>
  if (status) {
 8006184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006188:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <aci_gatt_exchange_config+0xb6>
    return status;
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	e000      	b.n	80061a0 <aci_gatt_exchange_config+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80061aa:	b5b0      	push	{r4, r5, r7, lr}
 80061ac:	b0ce      	sub	sp, #312	; 0x138
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	4605      	mov	r5, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061bc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80061c0:	462a      	mov	r2, r5
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80061cc:	4622      	mov	r2, r4
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061d4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80061d8:	4602      	mov	r2, r0
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061e0:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 80061e4:	460a      	mov	r2, r1
 80061e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 80061f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006206:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800620a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800620e:	8812      	ldrh	r2, [r2, #0]
 8006210:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006212:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006216:	3302      	adds	r3, #2
 8006218:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 800621c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006220:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006224:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006228:	8812      	ldrh	r2, [r2, #0]
 800622a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800622c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006230:	3302      	adds	r3, #2
 8006232:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 8006236:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800623a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800623e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006242:	8812      	ldrh	r2, [r2, #0]
 8006244:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006246:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800624a:	3302      	adds	r3, #2
 800624c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8006250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006254:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006258:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006260:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006264:	3301      	adds	r3, #1
 8006266:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 800626a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800626e:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d002      	beq.n	800627e <aci_gatt_disc_char_by_uuid+0xd4>
 8006278:	2b02      	cmp	r3, #2
 800627a:	d004      	beq.n	8006286 <aci_gatt_disc_char_by_uuid+0xdc>
 800627c:	e007      	b.n	800628e <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 800627e:	2302      	movs	r3, #2
 8006280:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006284:	e005      	b.n	8006292 <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 8006286:	2310      	movs	r3, #16
 8006288:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800628c:	e001      	b.n	8006292 <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 800628e:	2347      	movs	r3, #71	; 0x47
 8006290:	e049      	b.n	8006326 <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 8006292:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006296:	3307      	adds	r3, #7
 8006298:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800629c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80062a0:	4618      	mov	r0, r3
 80062a2:	f002 fccb 	bl	8008c3c <memcpy>
    index_input += size;
 80062a6:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80062aa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80062ae:	4413      	add	r3, r2
 80062b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062b4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80062b8:	2218      	movs	r2, #24
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 fc48 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 80062c2:	233f      	movs	r3, #63	; 0x3f
 80062c4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 80062c8:	f44f 738b 	mov.w	r3, #278	; 0x116
 80062cc:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 80062d0:	230f      	movs	r3, #15
 80062d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 80062d6:	f107 0310 	add.w	r3, r7, #16
 80062da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 80062de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 80062e6:	f107 030f 	add.w	r3, r7, #15
 80062ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 80062f4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 ffbc 	bl	8008278 <hci_send_req>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	da01      	bge.n	800630a <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 8006306:	23ff      	movs	r3, #255	; 0xff
 8006308:	e00d      	b.n	8006326 <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 800630a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800630e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 8006318:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800631c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	e000      	b.n	8006326 <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800632c:	46bd      	mov	sp, r7
 800632e:	bdb0      	pop	{r4, r5, r7, pc}

08006330 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b0cf      	sub	sp, #316	; 0x13c
 8006334:	af00      	add	r7, sp, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006340:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800634a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800634e:	4622      	mov	r2, r4
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800635a:	4602      	mov	r2, r0
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006362:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006366:	460a      	mov	r2, r1
 8006368:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8006372:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006376:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006384:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006388:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800638c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006390:	8812      	ldrh	r2, [r2, #0]
 8006392:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006394:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006398:	3302      	adds	r3, #2
 800639a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800639e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80063a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80063ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063b2:	3302      	adds	r3, #2
 80063b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80063b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80063c0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80063c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063cc:	3301      	adds	r3, #1
 80063ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80063d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d6:	1d58      	adds	r0, r3, #5
 80063d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063dc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	f002 fc26 	bl	8008c3c <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 80063f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063f4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80063f8:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4413      	add	r3, r2
 8006400:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006404:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006408:	2218      	movs	r2, #24
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f002 fba0 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8006412:	233f      	movs	r3, #63	; 0x3f
 8006414:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8006418:	f240 1321 	movw	r3, #289	; 0x121
 800641c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8006420:	230f      	movs	r3, #15
 8006422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800642e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006432:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8006436:	f107 0313 	add.w	r3, r7, #19
 800643a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800643e:	2301      	movs	r3, #1
 8006440:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006444:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 ff14 	bl	8008278 <hci_send_req>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	da01      	bge.n	800645a <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8006456:	23ff      	movs	r3, #255	; 0xff
 8006458:	e00d      	b.n	8006476 <aci_gatt_write_char_desc+0x146>
  if (status) {
 800645a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800645e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <aci_gatt_write_char_desc+0x144>
    return status;
 8006468:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800646c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	e000      	b.n	8006476 <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800647c:	46bd      	mov	sp, r7
 800647e:	bd90      	pop	{r4, r7, pc}

08006480 <aci_gatt_write_without_resp>:
}
tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b0cf      	sub	sp, #316	; 0x13c
 8006484:	af00      	add	r7, sp, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006490:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800649a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800649e:	4622      	mov	r2, r4
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064aa:	4602      	mov	r2, r0
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064b2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80064b6:	460a      	mov	r2, r1
 80064b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80064ba:	f107 0314 	add.w	r3, r7, #20
 80064be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80064c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064c6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80064d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064e0:	8812      	ldrh	r2, [r2, #0]
 80064e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064e4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80064e8:	3302      	adds	r3, #2
 80064ea:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80064ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064fa:	8812      	ldrh	r2, [r2, #0]
 80064fc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064fe:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006502:	3302      	adds	r3, #2
 8006504:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8006508:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800650c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006510:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006518:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800651c:	3301      	adds	r3, #1
 800651e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 8006522:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006526:	1d58      	adds	r0, r3, #5
 8006528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800652c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006536:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	f002 fb7e 	bl	8008c3c <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 8006540:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006544:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006548:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	4413      	add	r3, r2
 8006550:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006554:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006558:	2218      	movs	r2, #24
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f002 faf8 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8006562:	233f      	movs	r3, #63	; 0x3f
 8006564:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8006568:	f240 1323 	movw	r3, #291	; 0x123
 800656c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006578:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800657c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8006580:	f107 0313 	add.w	r3, r7, #19
 8006584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800658e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fe6f 	bl	8008278 <hci_send_req>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	da01      	bge.n	80065a4 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 80065a0:	23ff      	movs	r3, #255	; 0xff
 80065a2:	e00d      	b.n	80065c0 <aci_gatt_write_without_resp+0x140>
  if (status) {
 80065a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065a8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <aci_gatt_write_without_resp+0x13e>
    return status;
 80065b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065b6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	e000      	b.n	80065c0 <aci_gatt_write_without_resp+0x140>
  }
  return BLE_STATUS_SUCCESS;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}

080065ca <aci_gatt_update_char_value_ext>:
                                          uint8_t Update_Type,
                                          uint16_t Char_Length,
                                          uint16_t Value_Offset,
                                          uint8_t Value_Length,
                                          uint8_t Value[])
{
 80065ca:	b5b0      	push	{r4, r5, r7, lr}
 80065cc:	b0cc      	sub	sp, #304	; 0x130
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	4605      	mov	r5, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80065e0:	462a      	mov	r2, r5
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ec:	4622      	mov	r2, r4
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80065f8:	4602      	mov	r2, r0
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 8006604:	460a      	mov	r2, r1
 8006606:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Handle_To_Notify = htob(Conn_Handle_To_Notify, 2);
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800662a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006632:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006636:	3302      	adds	r3, #2
 8006638:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006644:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006648:	8812      	ldrh	r2, [r2, #0]
 800664a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800664c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006650:	3302      	adds	r3, #2
 8006652:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800665e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006662:	8812      	ldrh	r2, [r2, #0]
 8006664:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006666:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800666a:	3302      	adds	r3, #2
 800666c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Update_Type = htob(Update_Type, 1);
 8006670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006678:	f2a2 122f 	subw	r2, r2, #303	; 0x12f
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006680:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006684:	3301      	adds	r3, #1
 8006686:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Length = htob(Char_Length, 2);
 800668a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8006692:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8006696:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800669a:	3302      	adds	r3, #2
 800669c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Value_Offset = htob(Value_Offset, 2);
 80066a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a4:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 80066a8:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 80066ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80066b0:	3302      	adds	r3, #2
 80066b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Value_Length = htob(Value_Length, 1);
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80066be:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80066c0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80066c4:	3301      	adds	r3, #1
 80066c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Value_Length*sizeof(uint8_t));
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	330c      	adds	r3, #12
 80066d0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80066d4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80066d8:	4618      	mov	r0, r3
 80066da:	f002 faaf 	bl	8008c3c <memcpy>
    index_input += Value_Length*sizeof(uint8_t);
 80066de:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80066e2:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80066e6:	4413      	add	r3, r2
 80066e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066f0:	2218      	movs	r2, #24
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 fa2c 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 80066fa:	233f      	movs	r3, #63	; 0x3f
 80066fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x12c;
 8006700:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006704:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006708:	f107 030c 	add.w	r3, r7, #12
 800670c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006710:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006714:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006718:	f107 030b 	add.w	r3, r7, #11
 800671c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006720:	2301      	movs	r3, #1
 8006722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f001 fda3 	bl	8008278 <hci_send_req>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	da01      	bge.n	800673c <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8006738:	23ff      	movs	r3, #255	; 0xff
 800673a:	e00d      	b.n	8006758 <aci_gatt_update_char_value_ext+0x18e>
  if (status) {
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <aci_gatt_update_char_value_ext+0x18c>
    return status;
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	e000      	b.n	8006758 <aci_gatt_update_char_value_ext+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800675e:	46bd      	mov	sp, r7
 8006760:	bdb0      	pop	{r4, r5, r7, pc}

08006762 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b0cc      	sub	sp, #304	; 0x130
 8006766:	af00      	add	r7, sp, #0
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800677a:	4602      	mov	r2, r0
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006786:	460a      	mov	r2, r1
 8006788:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800678a:	f107 030c 	add.w	r3, r7, #12
 800678e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 80067a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80067b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80067b8:	3301      	adds	r3, #1
 80067ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 80067be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80067ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80067d2:	3301      	adds	r3, #1
 80067d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	1c98      	adds	r0, r3, #2
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	f002 fa23 	bl	8008c3c <memcpy>
    index_input += Length*sizeof(uint8_t);
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80067fe:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4413      	add	r3, r2
 8006806:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800680a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800680e:	2218      	movs	r2, #24
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f002 f99d 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 8006818:	233f      	movs	r3, #63	; 0x3f
 800681a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800681e:	230c      	movs	r3, #12
 8006820:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800682c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006834:	f107 030b 	add.w	r3, r7, #11
 8006838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800683c:	2301      	movs	r3, #1
 800683e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fd15 	bl	8008278 <hci_send_req>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	da01      	bge.n	8006858 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006854:	23ff      	movs	r3, #255	; 0xff
 8006856:	e00d      	b.n	8006874 <aci_hal_write_config_data+0x112>
  if (status) {
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <aci_hal_write_config_data+0x110>
    return status;
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	e000      	b.n	8006874 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b0cc      	sub	sp, #304	; 0x130
 8006882:	af00      	add	r7, sp, #0
 8006884:	4602      	mov	r2, r0
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006898:	460a      	mov	r2, r1
 800689a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800689c:	f107 030c 	add.w	r3, r7, #12
 80068a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068be:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80068c2:	7812      	ldrb	r2, [r2, #0]
 80068c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068c6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80068ca:	3301      	adds	r3, #1
 80068cc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80068d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80068e4:	3301      	adds	r3, #1
 80068e6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ee:	2218      	movs	r2, #24
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f002 f92d 	bl	8008b52 <memset>
  rq.ogf = 0x3f;
 80068f8:	233f      	movs	r3, #63	; 0x3f
 80068fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80068fe:	230f      	movs	r3, #15
 8006900:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800690c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006910:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006914:	f107 030b 	add.w	r3, r7, #11
 8006918:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800691c:	2301      	movs	r3, #1
 800691e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f001 fca5 	bl	8008278 <hci_send_req>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	da01      	bge.n	8006938 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006934:	23ff      	movs	r3, #255	; 0xff
 8006936:	e00d      	b.n	8006954 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	e000      	b.n	8006954 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7818      	ldrb	r0, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006978:	b299      	uxth	r1, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	78db      	ldrb	r3, [r3, #3]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fa faf2 	bl	8000f68 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7818      	ldrb	r0, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069a8:	b299      	uxth	r1, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	78db      	ldrb	r3, [r3, #3]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 ffca 	bl	8007948 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80069be:	b590      	push	{r4, r7, lr}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7818      	ldrb	r0, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069d8:	b299      	uxth	r1, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	78da      	ldrb	r2, [r3, #3]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	889b      	ldrh	r3, [r3, #4]
 80069e2:	b29c      	uxth	r4, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	88db      	ldrh	r3, [r3, #6]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4623      	mov	r3, r4
 80069ee:	f000 ffba 	bl	8007966 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd90      	pop	{r4, r7, pc}

080069fc <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 ffbc 	bl	800798e <hci_hardware_error_event>

  return status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b0a6      	sub	sp, #152	; 0x98
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a40:	e02e      	b.n	8006aa0 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006a42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3398      	adds	r3, #152	; 0x98
 8006a5c:	443b      	add	r3, r7
 8006a5e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006a62:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006a66:	3302      	adds	r3, #2
 8006a68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006a6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	3398      	adds	r3, #152	; 0x98
 8006a86:	443b      	add	r3, r7
 8006a88:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006a8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006a90:	3302      	adds	r3, #2
 8006a92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006aac:	4293      	cmp	r3, r2
 8006aae:	dbc8      	blt.n	8006a42 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f107 0208 	add.w	r2, r7, #8
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ff71 	bl	80079a4 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006ac2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3798      	adds	r7, #152	; 0x98
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ff6a 	bl	80079bc <hci_data_buffer_overflow_event>

  return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f000 ff5e 	bl	80079d2 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 f97b 	bl	8007e30 <aci_blue_initialized_event>

  return status;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f975 	bl	8007e46 <aci_blue_events_lost_event>

  return status;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006b66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b6a:	b08d      	sub	sp, #52	; 0x34
 8006b6c:	af08      	add	r7, sp, #32
 8006b6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f893 c000 	ldrb.w	ip, [r3]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006ba4:	68b8      	ldr	r0, [r7, #8]
 8006ba6:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006baa:	68bc      	ldr	r4, [r7, #8]
 8006bac:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006bb0:	68bd      	ldr	r5, [r7, #8]
 8006bb2:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006bb6:	68be      	ldr	r6, [r7, #8]
 8006bb8:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	9606      	str	r6, [sp, #24]
 8006bc4:	9505      	str	r5, [sp, #20]
 8006bc6:	9404      	str	r4, [sp, #16]
 8006bc8:	9003      	str	r0, [sp, #12]
 8006bca:	9102      	str	r1, [sp, #8]
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	4671      	mov	r1, lr
 8006bd8:	4660      	mov	r0, ip
 8006bda:	f001 f93e 	bl	8007e5a <aci_blue_crash_info_event>

  return status;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006bea <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	7818      	ldrb	r0, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	7859      	ldrb	r1, [r3, #1]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f001 f934 	bl	8007e76 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f993 0000 	ldrsb.w	r0, [r3]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006c36:	461a      	mov	r2, r3
 8006c38:	f001 f92b 	bl	8007e92 <aci_hal_scan_req_report_event>

  return status;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	7818      	ldrb	r0, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006c62:	461a      	mov	r2, r3
 8006c64:	f001 f923 	bl	8007eae <aci_hal_fw_error_event>

  return status;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006c7e:	f000 ff32 	bl	8007ae6 <aci_gap_limited_discoverable_event>

  return status;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b298      	uxth	r0, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7899      	ldrb	r1, [r3, #2]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 ff22 	bl	8007af4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 ff1e 	bl	8007b12 <aci_gap_pass_key_req_event>

  return status;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ff16 	bl	8007b28 <aci_gap_authorization_req_event>

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006d12:	f000 ff14 	bl	8007b3e <aci_gap_slave_security_initiated_event>

  return status;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006d2c:	f000 ff0e 	bl	8007b4c <aci_gap_bond_lost_event>

  return status;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	7818      	ldrb	r0, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	7859      	ldrb	r1, [r3, #1]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006d5a:	f7fa f891 	bl	8000e80 <aci_gap_proc_complete_event>

  return status;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 feeb 	bl	8007b5a <aci_gap_addr_not_resolved_event>

  return status;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f000 fedf 	bl	8007b70 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	789b      	ldrb	r3, [r3, #2]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f000 fed5 	bl	8007b88 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	885b      	ldrh	r3, [r3, #2]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f000 ffce 	bl	8007da8 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b298      	uxth	r0, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006e34:	461a      	mov	r2, r3
 8006e36:	f000 ffc5 	bl	8007dc4 <aci_l2cap_proc_timeout_event>

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	b089      	sub	sp, #36	; 0x24
 8006e48:	af04      	add	r7, sp, #16
 8006e4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b298      	uxth	r0, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	789c      	ldrb	r4, [r3, #2]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e64:	b29d      	uxth	r5, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006e6c:	b29e      	uxth	r6, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8006e84:	b289      	uxth	r1, r1
 8006e86:	9102      	str	r1, [sp, #8]
 8006e88:	9201      	str	r2, [sp, #4]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4633      	mov	r3, r6
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4621      	mov	r1, r4
 8006e92:	f000 ffa5 	bl	8007de0 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ea0 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b298      	uxth	r0, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	7899      	ldrb	r1, [r3, #2]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4623      	mov	r3, r4
 8006ece:	f000 ff9b 	bl	8007e08 <aci_l2cap_command_reject_event>

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}

08006edc <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b298      	uxth	r0, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b299      	uxth	r1, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	889b      	ldrh	r3, [r3, #4]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	88db      	ldrh	r3, [r3, #6]
 8006f02:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	f7fa f8b6 	bl	800107c <aci_gatt_attribute_modified_event>

  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd90      	pop	{r4, r7, pc}

08006f1a <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fe37 	bl	8007ba4 <aci_gatt_proc_timeout_event>

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fa f950 	bl	8001204 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b298      	uxth	r0, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	7899      	ldrb	r1, [r3, #2]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006f90:	f000 fe13 	bl	8007bba <aci_att_find_info_resp_event>

  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b0a6      	sub	sp, #152	; 0x98
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fbe:	e02e      	b.n	800701e <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8006fc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	3398      	adds	r3, #152	; 0x98
 8006fda:	443b      	add	r3, r7
 8006fdc:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006fe0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8006fea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	3398      	adds	r3, #152	; 0x98
 8007004:	443b      	add	r3, r7
 8007006:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800700a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800700e:	3302      	adds	r3, #2
 8007010:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007018:	3301      	adds	r3, #1
 800701a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800701e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007022:	789b      	ldrb	r3, [r3, #2]
 8007024:	461a      	mov	r2, r3
 8007026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800702a:	4293      	cmp	r3, r2
 800702c:	dbc8      	blt.n	8006fc0 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800702e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b298      	uxth	r0, r3
 8007036:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800703a:	789b      	ldrb	r3, [r3, #2]
 800703c:	f107 0208 	add.w	r2, r7, #8
 8007040:	4619      	mov	r1, r3
 8007042:	f000 fdca 	bl	8007bda <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8007046:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800704a:	4618      	mov	r0, r3
 800704c:	3798      	adds	r7, #152	; 0x98
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b298      	uxth	r0, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	7899      	ldrb	r1, [r3, #2]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007074:	f000 fdbf 	bl	8007bf6 <aci_att_read_by_type_resp_event>

  return status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b298      	uxth	r0, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 80070a0:	461a      	mov	r2, r3
 80070a2:	f000 fdb8 	bl	8007c16 <aci_att_read_resp_event>

  return status;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b298      	uxth	r0, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80070ce:	461a      	mov	r2, r3
 80070d0:	f000 fdaf 	bl	8007c32 <aci_att_read_blob_resp_event>

  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b298      	uxth	r0, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80070fc:	461a      	mov	r2, r3
 80070fe:	f000 fda6 	bl	8007c4e <aci_att_read_multiple_resp_event>

  return status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b298      	uxth	r0, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	7899      	ldrb	r1, [r3, #2]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800712e:	f000 fd9c 	bl	8007c6a <aci_att_read_by_group_type_resp_event>

  return status;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b087      	sub	sp, #28
 8007140:	af02      	add	r7, sp, #8
 8007142:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b298      	uxth	r0, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	885b      	ldrh	r3, [r3, #2]
 8007156:	b299      	uxth	r1, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	889b      	ldrh	r3, [r3, #4]
 800715c:	b29a      	uxth	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4623      	mov	r3, r4
 800716a:	f000 fd8e 	bl	8007c8a <aci_att_prepare_write_resp_event>

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bd90      	pop	{r4, r7, pc}

08007178 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd8f 	bl	8007cb2 <aci_att_exec_write_resp_event>

  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b298      	uxth	r0, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	b299      	uxth	r1, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 80071c2:	f000 fd81 	bl	8007cc8 <aci_gatt_indication_event>

  return status;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b298      	uxth	r0, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b299      	uxth	r1, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80071f4:	f7f9 ff5c 	bl	80010b0 <aci_gatt_notification_event>

  return status;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29a      	uxth	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	789b      	ldrb	r3, [r3, #2]
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7f9 ffa4 	bl	800116c <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b298      	uxth	r0, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	7899      	ldrb	r1, [r3, #2]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800724e:	b29a      	uxth	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	795b      	ldrb	r3, [r3, #5]
 8007254:	f000 fd48 	bl	8007ce8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b298      	uxth	r0, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	b299      	uxth	r1, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007286:	f7f9 ff2f 	bl	80010e8 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b298      	uxth	r0, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	b299      	uxth	r1, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80072b8:	f000 fd2a 	bl	8007d10 <aci_gatt_write_permit_req_event>

  return status;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b298      	uxth	r0, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	885b      	ldrh	r3, [r3, #2]
 80072e0:	b299      	uxth	r1, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	f000 fd21 	bl	8007d30 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b0a6      	sub	sp, #152	; 0x98
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007300:	2300      	movs	r3, #0
 8007302:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800730c:	2303      	movs	r3, #3
 800730e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007318:	e019      	b.n	800734e <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800731a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800731e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800732a:	b29a      	uxth	r2, r3
 800732c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	3398      	adds	r3, #152	; 0x98
 8007334:	443b      	add	r3, r7
 8007336:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800733a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800733e:	3302      	adds	r3, #2
 8007340:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007348:	3301      	adds	r3, #1
 800734a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800734e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007352:	789b      	ldrb	r3, [r3, #2]
 8007354:	461a      	mov	r2, r3
 8007356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800735a:	4293      	cmp	r3, r2
 800735c:	dbdd      	blt.n	800731a <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800735e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b298      	uxth	r0, r3
 8007366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800736a:	789b      	ldrb	r3, [r3, #2]
 800736c:	f107 0208 	add.w	r2, r7, #8
 8007370:	4619      	mov	r1, r3
 8007372:	f000 fcec 	bl	8007d4e <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8007376:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800737a:	4618      	mov	r0, r3
 800737c:	3798      	adds	r7, #152	; 0x98
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	b29b      	uxth	r3, r3
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7f9 ff19 	bl	80011d8 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fccf 	bl	8007d6a <aci_gatt_server_confirmation_event>

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 80073d6:	b590      	push	{r4, r7, lr}
 80073d8:	b087      	sub	sp, #28
 80073da:	af02      	add	r7, sp, #8
 80073dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b298      	uxth	r0, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	b299      	uxth	r1, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	889b      	ldrh	r3, [r3, #4]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	4623      	mov	r3, r4
 8007404:	f000 fcbc 	bl	8007d80 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bd90      	pop	{r4, r7, pc}

08007412 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8007412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007414:	b08b      	sub	sp, #44	; 0x2c
 8007416:	af06      	add	r7, sp, #24
 8007418:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	781d      	ldrb	r5, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800742c:	b29e      	uxth	r6, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f893 c003 	ldrb.w	ip, [r3, #3]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8007444:	b292      	uxth	r2, r2
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800744c:	b289      	uxth	r1, r1
 800744e:	68b8      	ldr	r0, [r7, #8]
 8007450:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8007454:	b280      	uxth	r0, r0
 8007456:	68bc      	ldr	r4, [r7, #8]
 8007458:	7c64      	ldrb	r4, [r4, #17]
 800745a:	9404      	str	r4, [sp, #16]
 800745c:	9003      	str	r0, [sp, #12]
 800745e:	9102      	str	r1, [sp, #8]
 8007460:	9201      	str	r2, [sp, #4]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4673      	mov	r3, lr
 8007466:	4662      	mov	r2, ip
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	f7f9 fd38 	bl	8000ee0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800747a <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b0a4      	sub	sp, #144	; 0x90
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007482:	2300      	movs	r3, #0
 8007484:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800749a:	e0b3      	b.n	8007604 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800749c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80074a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	440b      	add	r3, r1
 80074b0:	3301      	adds	r3, #1
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	3390      	adds	r3, #144	; 0x90
 80074c2:	443b      	add	r3, r7
 80074c4:	3b88      	subs	r3, #136	; 0x88
 80074c6:	460a      	mov	r2, r1
 80074c8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80074ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80074ce:	3301      	adds	r3, #1
 80074d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80074d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80074d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	440b      	add	r3, r1
 80074e8:	3302      	adds	r3, #2
 80074ea:	7819      	ldrb	r1, [r3, #0]
 80074ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	3390      	adds	r3, #144	; 0x90
 80074fa:	443b      	add	r3, r7
 80074fc:	3b87      	subs	r3, #135	; 0x87
 80074fe:	460a      	mov	r2, r1
 8007500:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007502:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007506:	3301      	adds	r3, #1
 8007508:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800750c:	f107 0108 	add.w	r1, r7, #8
 8007510:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	1c98      	adds	r0, r3, #2
 8007520:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007532:	4413      	add	r3, r2
 8007534:	3303      	adds	r3, #3
 8007536:	2206      	movs	r2, #6
 8007538:	4619      	mov	r1, r3
 800753a:	f001 fb7f 	bl	8008c3c <memcpy>
    size += 6;
 800753e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007542:	3306      	adds	r3, #6
 8007544:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8007548:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800754c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	440b      	add	r3, r1
 800755c:	3309      	adds	r3, #9
 800755e:	7819      	ldrb	r1, [r3, #0]
 8007560:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	3390      	adds	r3, #144	; 0x90
 800756e:	443b      	add	r3, r7
 8007570:	3b80      	subs	r3, #128	; 0x80
 8007572:	460a      	mov	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007576:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800757a:	3301      	adds	r3, #1
 800757c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007580:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	4413      	add	r3, r2
 800758e:	3308      	adds	r3, #8
 8007590:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007594:	4413      	add	r3, r2
 8007596:	1c99      	adds	r1, r3, #2
 8007598:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	3390      	adds	r3, #144	; 0x90
 80075a6:	443b      	add	r3, r7
 80075a8:	3b7c      	subs	r3, #124	; 0x7c
 80075aa:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 80075ac:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80075b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	4413      	add	r3, r2
 80075be:	440b      	add	r3, r1
 80075c0:	3309      	adds	r3, #9
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075c8:	4413      	add	r3, r2
 80075ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80075ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b259      	sxtb	r1, r3
 80075da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	3390      	adds	r3, #144	; 0x90
 80075e8:	443b      	add	r3, r7
 80075ea:	3b78      	subs	r3, #120	; 0x78
 80075ec:	460a      	mov	r2, r1
 80075ee:	701a      	strb	r2, [r3, #0]
    size += 1;
 80075f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075f4:	3301      	adds	r3, #1
 80075f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80075fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075fe:	3301      	adds	r3, #1
 8007600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007610:	4293      	cmp	r3, r2
 8007612:	f6ff af43 	blt.w	800749c <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8007616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f107 0208 	add.w	r2, r7, #8
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7f9 fce2 	bl	8000fec <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8007628:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800762c:	4618      	mov	r0, r3
 800762e:	3790      	adds	r7, #144	; 0x90
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b087      	sub	sp, #28
 8007638:	af02      	add	r7, sp, #8
 800763a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	7818      	ldrb	r0, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800764e:	b299      	uxth	r1, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007656:	b29a      	uxth	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800765e:	b29c      	uxth	r4, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007666:	b29b      	uxth	r3, r3
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	4623      	mov	r3, r4
 800766c:	f000 f9bf 	bl	80079ee <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bd90      	pop	{r4, r7, pc}

0800767a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	7818      	ldrb	r0, [r3, #0]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007694:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800769a:	461a      	mov	r2, r3
 800769c:	f000 f9bb 	bl	8007a16 <hci_le_read_remote_used_features_complete_event>

  return status;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	895b      	ldrh	r3, [r3, #10]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	f000 f9b1 	bl	8007a32 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80076da:	b590      	push	{r4, r7, lr}
 80076dc:	b087      	sub	sp, #28
 80076de:	af02      	add	r7, sp, #8
 80076e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b298      	uxth	r0, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	885b      	ldrh	r3, [r3, #2]
 80076f4:	b299      	uxth	r1, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	88db      	ldrh	r3, [r3, #6]
 8007700:	b29c      	uxth	r4, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	891b      	ldrh	r3, [r3, #8]
 8007706:	b29b      	uxth	r3, r3
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	4623      	mov	r3, r4
 800770c:	f000 f99f 	bl	8007a4e <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}

0800771a <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f000 f99e 	bl	8007a76 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f000 f995 	bl	8007a8e <hci_le_generate_dhkey_complete_event>

  return status;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800776e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007772:	b08d      	sub	sp, #52	; 0x34
 8007774:	af08      	add	r7, sp, #32
 8007776:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f893 c000 	ldrb.w	ip, [r3]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800778c:	fa1f fe83 	uxth.w	lr, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f893 8003 	ldrb.w	r8, [r3, #3]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80077a8:	68b8      	ldr	r0, [r7, #8]
 80077aa:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 80077ae:	b280      	uxth	r0, r0
 80077b0:	68bc      	ldr	r4, [r7, #8]
 80077b2:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 80077b6:	b2a4      	uxth	r4, r4
 80077b8:	68bd      	ldr	r5, [r7, #8]
 80077ba:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80077be:	b2ad      	uxth	r5, r5
 80077c0:	68be      	ldr	r6, [r7, #8]
 80077c2:	7f76      	ldrb	r6, [r6, #29]
 80077c4:	9606      	str	r6, [sp, #24]
 80077c6:	9505      	str	r5, [sp, #20]
 80077c8:	9404      	str	r4, [sp, #16]
 80077ca:	9003      	str	r0, [sp, #12]
 80077cc:	9102      	str	r1, [sp, #8]
 80077ce:	9201      	str	r2, [sp, #4]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	464b      	mov	r3, r9
 80077d4:	4642      	mov	r2, r8
 80077d6:	4671      	mov	r1, lr
 80077d8:	4660      	mov	r0, ip
 80077da:	f000 f964 	bl	8007aa6 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080077ea <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b0a6      	sub	sp, #152	; 0x98
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800780a:	e085      	b.n	8007918 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800780c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007810:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	4413      	add	r3, r2
 8007818:	3301      	adds	r3, #1
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	3398      	adds	r3, #152	; 0x98
 8007824:	443b      	add	r3, r7
 8007826:	3b90      	subs	r3, #144	; 0x90
 8007828:	701a      	strb	r2, [r3, #0]
    size += 1;
 800782a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800782e:	3301      	adds	r3, #1
 8007830:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8007834:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	3302      	adds	r3, #2
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	3398      	adds	r3, #152	; 0x98
 800784c:	443b      	add	r3, r7
 800784e:	3b8f      	subs	r3, #143	; 0x8f
 8007850:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007852:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007856:	3301      	adds	r3, #1
 8007858:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	4413      	add	r3, r2
 8007868:	1c98      	adds	r0, r3, #2
 800786a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007874:	4413      	add	r3, r2
 8007876:	3303      	adds	r3, #3
 8007878:	2206      	movs	r2, #6
 800787a:	4619      	mov	r1, r3
 800787c:	f001 f9de 	bl	8008c3c <memcpy>
    size += 6;
 8007880:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007884:	3306      	adds	r3, #6
 8007886:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800788a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800788e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	4413      	add	r3, r2
 8007896:	3309      	adds	r3, #9
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	3398      	adds	r3, #152	; 0x98
 80078a2:	443b      	add	r3, r7
 80078a4:	3b88      	subs	r3, #136	; 0x88
 80078a6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80078a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078ac:	3301      	adds	r3, #1
 80078ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80078b2:	f107 0208 	add.w	r2, r7, #8
 80078b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	3308      	adds	r3, #8
 80078be:	4413      	add	r3, r2
 80078c0:	1c58      	adds	r0, r3, #1
 80078c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078ce:	4413      	add	r3, r2
 80078d0:	3302      	adds	r3, #2
 80078d2:	2206      	movs	r2, #6
 80078d4:	4619      	mov	r1, r3
 80078d6:	f001 f9b1 	bl	8008c3c <memcpy>
    size += 6;
 80078da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078de:	3306      	adds	r3, #6
 80078e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80078e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	4413      	add	r3, r2
 80078f0:	3310      	adds	r3, #16
 80078f2:	f993 2000 	ldrsb.w	r2, [r3]
 80078f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	3398      	adds	r3, #152	; 0x98
 80078fe:	443b      	add	r3, r7
 8007900:	3b81      	subs	r3, #129	; 0x81
 8007902:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007904:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007908:	3301      	adds	r3, #1
 800790a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800790e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007912:	3301      	adds	r3, #1
 8007914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007924:	4293      	cmp	r3, r2
 8007926:	f6ff af71 	blt.w	800780c <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800792a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f107 0208 	add.w	r2, r7, #8
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f8c9 	bl	8007ace <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800793c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007940:	4618      	mov	r0, r3
 8007942:	3798      	adds	r7, #152	; 0x98
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
 8007952:	460b      	mov	r3, r1
 8007954:	80bb      	strh	r3, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007966:	b490      	push	{r4, r7}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	4604      	mov	r4, r0
 800796e:	4608      	mov	r0, r1
 8007970:	4611      	mov	r1, r2
 8007972:	461a      	mov	r2, r3
 8007974:	4623      	mov	r3, r4
 8007976:	71fb      	strb	r3, [r7, #7]
 8007978:	4603      	mov	r3, r0
 800797a:	80bb      	strh	r3, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	71bb      	strb	r3, [r7, #6]
 8007980:	4613      	mov	r3, r2
 8007982:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bc90      	pop	{r4, r7}
 800798c:	4770      	bx	lr

0800798e <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	4603      	mov	r3, r0
 8007996:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4603      	mov	r3, r0
 80079da:	460a      	mov	r2, r1
 80079dc:	71fb      	strb	r3, [r7, #7]
 80079de:	4613      	mov	r3, r2
 80079e0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80079ee:	b490      	push	{r4, r7}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4604      	mov	r4, r0
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	461a      	mov	r2, r3
 80079fc:	4623      	mov	r3, r4
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	4603      	mov	r3, r0
 8007a02:	80bb      	strh	r3, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	807b      	strh	r3, [r7, #2]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc90      	pop	{r4, r7}
 8007a14:	4770      	bx	lr

08007a16 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	603a      	str	r2, [r7, #0]
 8007a20:	71fb      	strb	r3, [r7, #7]
 8007a22:	460b      	mov	r3, r1
 8007a24:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	4603      	mov	r3, r0
 8007a3a:	6039      	str	r1, [r7, #0]
 8007a3c:	80fb      	strh	r3, [r7, #6]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007a4e:	b490      	push	{r4, r7}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	4604      	mov	r4, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	80fb      	strh	r3, [r7, #6]
 8007a60:	4603      	mov	r3, r0
 8007a62:	80bb      	strh	r3, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc90      	pop	{r4, r7}
 8007a74:	4770      	bx	lr

08007a76 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	6039      	str	r1, [r7, #0]
 8007a80:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	4603      	mov	r3, r0
 8007a96:	6039      	str	r1, [r7, #0]
 8007a98:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007aa6:	b490      	push	{r4, r7}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	71fb      	strb	r3, [r7, #7]
 8007ab8:	4603      	mov	r3, r0
 8007aba:	80bb      	strh	r3, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	71bb      	strb	r3, [r7, #6]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc90      	pop	{r4, r7}
 8007acc:	4770      	bx	lr

08007ace <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	6039      	str	r1, [r7, #0]
 8007ad8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007aea:	bf00      	nop
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	80fb      	strh	r3, [r7, #6]
 8007afe:	460b      	mov	r3, r1
 8007b00:	717b      	strb	r3, [r7, #5]
 8007b02:	4613      	mov	r3, r2
 8007b04:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	4603      	mov	r3, r0
 8007b1a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007b3e:	b480      	push	{r7}
 8007b40:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007b42:	bf00      	nop
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007b50:	bf00      	nop
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	4603      	mov	r3, r0
 8007b62:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	460a      	mov	r2, r1
 8007b92:	80fb      	strh	r3, [r7, #6]
 8007b94:	4613      	mov	r3, r2
 8007b96:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	80fb      	strh	r3, [r7, #6]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	717b      	strb	r3, [r7, #5]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	4603      	mov	r3, r0
 8007be2:	603a      	str	r2, [r7, #0]
 8007be4:	80fb      	strh	r3, [r7, #6]
 8007be6:	460b      	mov	r3, r1
 8007be8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	4603      	mov	r3, r0
 8007c00:	80fb      	strh	r3, [r7, #6]
 8007c02:	460b      	mov	r3, r1
 8007c04:	717b      	strb	r3, [r7, #5]
 8007c06:	4613      	mov	r3, r2
 8007c08:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	603a      	str	r2, [r7, #0]
 8007c20:	80fb      	strh	r3, [r7, #6]
 8007c22:	460b      	mov	r3, r1
 8007c24:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	4603      	mov	r3, r0
 8007c3a:	603a      	str	r2, [r7, #0]
 8007c3c:	80fb      	strh	r3, [r7, #6]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	4603      	mov	r3, r0
 8007c56:	603a      	str	r2, [r7, #0]
 8007c58:	80fb      	strh	r3, [r7, #6]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	4603      	mov	r3, r0
 8007c74:	80fb      	strh	r3, [r7, #6]
 8007c76:	460b      	mov	r3, r1
 8007c78:	717b      	strb	r3, [r7, #5]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007c8a:	b490      	push	{r4, r7}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	4604      	mov	r4, r0
 8007c92:	4608      	mov	r0, r1
 8007c94:	4611      	mov	r1, r2
 8007c96:	461a      	mov	r2, r3
 8007c98:	4623      	mov	r3, r4
 8007c9a:	80fb      	strh	r3, [r7, #6]
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	80bb      	strh	r3, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc90      	pop	{r4, r7}
 8007cb0:	4770      	bx	lr

08007cb2 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	81fb      	strh	r3, [r7, #14]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	81bb      	strh	r3, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007cdc:	bf00      	nop
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007ce8:	b490      	push	{r4, r7}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	80fb      	strh	r3, [r7, #6]
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	717b      	strb	r3, [r7, #5]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	807b      	strh	r3, [r7, #2]
 8007d02:	4613      	mov	r3, r2
 8007d04:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc90      	pop	{r4, r7}
 8007d0e:	4770      	bx	lr

08007d10 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	4603      	mov	r3, r0
 8007d1a:	81fb      	strh	r3, [r7, #14]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	81bb      	strh	r3, [r7, #12]
 8007d20:	4613      	mov	r3, r2
 8007d22:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	80fb      	strh	r3, [r7, #6]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	80bb      	strh	r3, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	4603      	mov	r3, r0
 8007d56:	603a      	str	r2, [r7, #0]
 8007d58:	80fb      	strh	r3, [r7, #6]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4603      	mov	r3, r0
 8007d72:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007d80:	b490      	push	{r4, r7}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4623      	mov	r3, r4
 8007d90:	80fb      	strh	r3, [r7, #6]
 8007d92:	4603      	mov	r3, r0
 8007d94:	80bb      	strh	r3, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	807b      	strh	r3, [r7, #2]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc90      	pop	{r4, r7}
 8007da6:	4770      	bx	lr

08007da8 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	460a      	mov	r2, r1
 8007db2:	80fb      	strh	r3, [r7, #6]
 8007db4:	4613      	mov	r3, r2
 8007db6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	603a      	str	r2, [r7, #0]
 8007dce:	80fb      	strh	r3, [r7, #6]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007de0:	b490      	push	{r4, r7}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4623      	mov	r3, r4
 8007df0:	80fb      	strh	r3, [r7, #6]
 8007df2:	4603      	mov	r3, r0
 8007df4:	717b      	strb	r3, [r7, #5]
 8007df6:	460b      	mov	r3, r1
 8007df8:	807b      	strh	r3, [r7, #2]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc90      	pop	{r4, r7}
 8007e06:	4770      	bx	lr

08007e08 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007e08:	b490      	push	{r4, r7}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	717b      	strb	r3, [r7, #5]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	807b      	strh	r3, [r7, #2]
 8007e22:	4613      	mov	r3, r2
 8007e24:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc90      	pop	{r4, r7}
 8007e2e:	4770      	bx	lr

08007e30 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	603a      	str	r2, [r7, #0]
 8007e80:	71fb      	strb	r3, [r7, #7]
 8007e82:	460b      	mov	r3, r1
 8007e84:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	4603      	mov	r3, r0
 8007e9a:	603a      	str	r2, [r7, #0]
 8007e9c:	71fb      	strb	r3, [r7, #7]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	603a      	str	r2, [r7, #0]
 8007eb8:	71fb      	strb	r3, [r7, #7]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b088      	sub	sp, #32
 8007ece:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ed4:	f107 0308 	add.w	r3, r7, #8
 8007ed8:	2218      	movs	r2, #24
 8007eda:	2100      	movs	r1, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fe38 	bl	8008b52 <memset>
  rq.ogf = 0x03;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007eea:	1dfb      	adds	r3, r7, #7
 8007eec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 f9bd 	bl	8008278 <hci_send_req>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da01      	bge.n	8007f08 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f04:	23ff      	movs	r3, #255	; 0xff
 8007f06:	e005      	b.n	8007f14 <hci_reset+0x4a>
  if (status) {
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <hci_reset+0x48>
    return status;
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	e000      	b.n	8007f14 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b0cc      	sub	sp, #304	; 0x130
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4602      	mov	r2, r0
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2c:	6019      	str	r1, [r3, #0]
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8007f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f5a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f62:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007f66:	3301      	adds	r3, #1
 8007f68:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8007f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8007f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7e:	1c58      	adds	r0, r3, #1
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	221f      	movs	r2, #31
 8007f8a:	6819      	ldr	r1, [r3, #0]
 8007f8c:	f000 fe56 	bl	8008c3c <memcpy>
  }
  index_input += 31;
 8007f90:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007f94:	331f      	adds	r3, #31
 8007f96:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f9e:	2218      	movs	r2, #24
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fdd5 	bl	8008b52 <memset>
  rq.ogf = 0x08;
 8007fa8:	2308      	movs	r3, #8
 8007faa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007fae:	2309      	movs	r3, #9
 8007fb0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fbc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007fc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007fc4:	f107 030b 	add.w	r3, r7, #11
 8007fc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f94d 	bl	8008278 <hci_send_req>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da01      	bge.n	8007fe8 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8007fe4:	23ff      	movs	r3, #255	; 0xff
 8007fe6:	e00d      	b.n	8008004 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 8007fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fec:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <hci_le_set_scan_response_data+0xe6>
    return status;
 8007ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	e000      	b.n	8008004 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b08c      	sub	sp, #48	; 0x30
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	2209      	movs	r2, #9
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fd97 	bl	8008b52 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008024:	f107 0318 	add.w	r3, r7, #24
 8008028:	2218      	movs	r2, #24
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fd90 	bl	8008b52 <memset>
  rq.ogf = 0x08;
 8008032:	2308      	movs	r3, #8
 8008034:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8008036:	2318      	movs	r3, #24
 8008038:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 800803a:	f107 030c 	add.w	r3, r7, #12
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8008040:	2309      	movs	r3, #9
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8008044:	f107 0318 	add.w	r3, r7, #24
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f914 	bl	8008278 <hci_send_req>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	da01      	bge.n	800805a <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8008056:	23ff      	movs	r3, #255	; 0xff
 8008058:	e00d      	b.n	8008076 <hci_le_rand+0x68>
  if (resp.Status) {
 800805a:	7b3b      	ldrb	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <hci_le_rand+0x56>
    return resp.Status;
 8008060:	7b3b      	ldrb	r3, [r7, #12]
 8008062:	e008      	b.n	8008076 <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	461a      	mov	r2, r3
 8008068:	f107 030d 	add.w	r3, r7, #13
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	6011      	str	r1, [r2, #0]
 8008072:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3308      	adds	r3, #8
 800808a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b04      	cmp	r3, #4
 8008092:	d001      	beq.n	8008098 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008094:	2301      	movs	r3, #1
 8008096:	e00c      	b.n	80080b2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3302      	adds	r3, #2
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80080a6:	3b03      	subs	r3, #3
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80080ac:	2302      	movs	r3, #2
 80080ae:	e000      	b.n	80080b2 <verify_packet+0x34>
  
  return 0;      
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b0a6      	sub	sp, #152	; 0x98
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	607b      	str	r3, [r7, #4]
 80080c8:	4603      	mov	r3, r0
 80080ca:	81fb      	strh	r3, [r7, #14]
 80080cc:	460b      	mov	r3, r1
 80080ce:	81bb      	strh	r3, [r7, #12]
 80080d0:	4613      	mov	r3, r2
 80080d2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80080d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080dc:	b21a      	sxth	r2, r3
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	029b      	lsls	r3, r3, #10
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	4313      	orrs	r3, r2
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80080f0:	2301      	movs	r3, #1
 80080f2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80080f4:	f107 0318 	add.w	r3, r7, #24
 80080f8:	3301      	adds	r3, #1
 80080fa:	461a      	mov	r2, r3
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	8819      	ldrh	r1, [r3, #0]
 8008102:	789b      	ldrb	r3, [r3, #2]
 8008104:	8011      	strh	r1, [r2, #0]
 8008106:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008108:	f107 0318 	add.w	r3, r7, #24
 800810c:	3304      	adds	r3, #4
 800810e:	7afa      	ldrb	r2, [r7, #11]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fd92 	bl	8008c3c <memcpy>
  
  if (hciContext.io.Send)
 8008118:	4b08      	ldr	r3, [pc, #32]	; (800813c <send_cmd+0x7c>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <send_cmd+0x7c>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	7afa      	ldrb	r2, [r7, #11]
 8008126:	b292      	uxth	r2, r2
 8008128:	3204      	adds	r2, #4
 800812a:	b291      	uxth	r1, r2
 800812c:	f107 0218 	add.w	r2, r7, #24
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
  }
}
 8008134:	bf00      	nop
 8008136:	3798      	adds	r7, #152	; 0x98
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	200008e0 	.word	0x200008e0

08008140 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800814a:	e00a      	b.n	8008162 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4619      	mov	r1, r3
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	f000 fae8 	bl	8008728 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fa4f 	bl	8008600 <list_insert_head>
  while (!list_is_empty(src_list))
 8008162:	6838      	ldr	r0, [r7, #0]
 8008164:	f000 fa2a 	bl	80085bc <list_is_empty>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0ee      	beq.n	800814c <move_list+0xc>
  }
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800817e:	e009      	b.n	8008194 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008180:	1d3b      	adds	r3, r7, #4
 8008182:	4619      	mov	r1, r3
 8008184:	4809      	ldr	r0, [pc, #36]	; (80081ac <free_event_list+0x34>)
 8008186:	f000 faa8 	bl	80086da <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4619      	mov	r1, r3
 800818e:	4808      	ldr	r0, [pc, #32]	; (80081b0 <free_event_list+0x38>)
 8008190:	f000 fa5c 	bl	800864c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008194:	4806      	ldr	r0, [pc, #24]	; (80081b0 <free_event_list+0x38>)
 8008196:	f000 faee 	bl	8008776 <list_get_size>
 800819a:	4603      	mov	r3, r0
 800819c:	2b04      	cmp	r3, #4
 800819e:	ddef      	ble.n	8008180 <free_event_list+0x8>
  }
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000360 	.word	0x20000360
 80081b0:	20000358 	.word	0x20000358

080081b4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80081c4:	4a18      	ldr	r2, [pc, #96]	; (8008228 <hci_init+0x74>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80081ca:	4818      	ldr	r0, [pc, #96]	; (800822c <hci_init+0x78>)
 80081cc:	f000 f9e6 	bl	800859c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80081d0:	4817      	ldr	r0, [pc, #92]	; (8008230 <hci_init+0x7c>)
 80081d2:	f000 f9e3 	bl	800859c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80081d6:	f7f9 fae9 	bl	80017ac <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
 80081de:	e00c      	b.n	80081fa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	228c      	movs	r2, #140	; 0x8c
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
 80081e8:	4a12      	ldr	r2, [pc, #72]	; (8008234 <hci_init+0x80>)
 80081ea:	4413      	add	r3, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	480f      	ldr	r0, [pc, #60]	; (800822c <hci_init+0x78>)
 80081f0:	f000 fa2c 	bl	800864c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	3301      	adds	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	d9ef      	bls.n	80081e0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <hci_init+0x74>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <hci_init+0x5c>
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <hci_init+0x74>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2000      	movs	r0, #0
 800820e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008210:	4b05      	ldr	r3, [pc, #20]	; (8008228 <hci_init+0x74>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <hci_init+0x6a>
 8008218:	4b03      	ldr	r3, [pc, #12]	; (8008228 <hci_init+0x74>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	4798      	blx	r3
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200008e0 	.word	0x200008e0
 800822c:	20000358 	.word	0x20000358
 8008230:	20000360 	.word	0x20000360
 8008234:	20000368 	.word	0x20000368

08008238 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <hci_register_io_bus+0x3c>)
 8008246:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	4a09      	ldr	r2, [pc, #36]	; (8008274 <hci_register_io_bus+0x3c>)
 800824e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	4a07      	ldr	r2, [pc, #28]	; (8008274 <hci_register_io_bus+0x3c>)
 8008256:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	4a05      	ldr	r2, [pc, #20]	; (8008274 <hci_register_io_bus+0x3c>)
 800825e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	4a03      	ldr	r2, [pc, #12]	; (8008274 <hci_register_io_bus+0x3c>)
 8008266:	6093      	str	r3, [r2, #8]
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	200008e0 	.word	0x200008e0

08008278 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	885b      	ldrh	r3, [r3, #2]
 8008288:	b21b      	sxth	r3, r3
 800828a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828e:	b21a      	sxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	b21b      	sxth	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b21b      	sxth	r3, r3
 800829c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f978 	bl	800859c <list_init_head>

  free_event_list();
 80082ac:	f7ff ff64 	bl	8008178 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8818      	ldrh	r0, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8859      	ldrh	r1, [r3, #2]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f7ff fefd 	bl	80080c0 <send_cmd>
  
  if (async)
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <hci_send_req+0x58>
  {
    return 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e0e2      	b.n	8008496 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80082d0:	f7f9 fffe 	bl	80022d0 <HAL_GetTick>
 80082d4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80082d6:	f7f9 fffb 	bl	80022d0 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e4:	f200 80b3 	bhi.w	800844e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80082e8:	486d      	ldr	r0, [pc, #436]	; (80084a0 <hci_send_req+0x228>)
 80082ea:	f000 f967 	bl	80085bc <list_is_empty>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d000      	beq.n	80082f6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80082f4:	e7ef      	b.n	80082d6 <hci_send_req+0x5e>
      {
        break;
 80082f6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4619      	mov	r1, r3
 80082fe:	4868      	ldr	r0, [pc, #416]	; (80084a0 <hci_send_req+0x228>)
 8008300:	f000 f9eb 	bl	80086da <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3308      	adds	r3, #8
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b04      	cmp	r3, #4
 8008310:	d17f      	bne.n	8008412 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	3301      	adds	r3, #1
 8008316:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3308      	adds	r3, #8
 800831c:	3303      	adds	r3, #3
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008326:	3b03      	subs	r3, #3
 8008328:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b3e      	cmp	r3, #62	; 0x3e
 8008330:	d04c      	beq.n	80083cc <hci_send_req+0x154>
 8008332:	2b3e      	cmp	r3, #62	; 0x3e
 8008334:	dc68      	bgt.n	8008408 <hci_send_req+0x190>
 8008336:	2b10      	cmp	r3, #16
 8008338:	f000 808b 	beq.w	8008452 <hci_send_req+0x1da>
 800833c:	2b10      	cmp	r3, #16
 800833e:	dc63      	bgt.n	8008408 <hci_send_req+0x190>
 8008340:	2b0e      	cmp	r3, #14
 8008342:	d023      	beq.n	800838c <hci_send_req+0x114>
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d15f      	bne.n	8008408 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	885b      	ldrh	r3, [r3, #2]
 8008350:	b29b      	uxth	r3, r3
 8008352:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008354:	429a      	cmp	r2, r3
 8008356:	d17e      	bne.n	8008456 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d004      	beq.n	800836a <hci_send_req+0xf2>
          if (cs->status) {
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d051      	beq.n	800840c <hci_send_req+0x194>
            goto failed;
 8008368:	e078      	b.n	800845c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695a      	ldr	r2, [r3, #20]
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	429a      	cmp	r2, r3
 8008372:	bf28      	it	cs
 8008374:	461a      	movcs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6918      	ldr	r0, [r3, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	461a      	mov	r2, r3
 8008384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008386:	f000 fc59 	bl	8008c3c <memcpy>
        goto done;
 800838a:	e078      	b.n	800847e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008396:	b29b      	uxth	r3, r3
 8008398:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800839a:	429a      	cmp	r2, r3
 800839c:	d15d      	bne.n	800845a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	3303      	adds	r3, #3
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	3b03      	subs	r3, #3
 80083a8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	bf28      	it	cs
 80083b4:	461a      	movcs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6918      	ldr	r0, [r3, #16]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c6:	f000 fc39 	bl	8008c3c <memcpy>
        goto done;
 80083ca:	e058      	b.n	800847e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d118      	bne.n	8008410 <hci_send_req+0x198>
          break;
      
        len -= 1;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	bf28      	it	cs
 80083ee:	461a      	movcs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6918      	ldr	r0, [r3, #16]
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	461a      	mov	r2, r3
 8008402:	f000 fc1b 	bl	8008c3c <memcpy>
        goto done;
 8008406:	e03a      	b.n	800847e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008408:	bf00      	nop
 800840a:	e002      	b.n	8008412 <hci_send_req+0x19a>
          break;
 800840c:	bf00      	nop
 800840e:	e000      	b.n	8008412 <hci_send_req+0x19a>
          break;
 8008410:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008412:	4824      	ldr	r0, [pc, #144]	; (80084a4 <hci_send_req+0x22c>)
 8008414:	f000 f8d2 	bl	80085bc <list_is_empty>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00d      	beq.n	800843a <hci_send_req+0x1c2>
 800841e:	4820      	ldr	r0, [pc, #128]	; (80084a0 <hci_send_req+0x228>)
 8008420:	f000 f8cc 	bl	80085bc <list_is_empty>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d007      	beq.n	800843a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4619      	mov	r1, r3
 800842e:	481d      	ldr	r0, [pc, #116]	; (80084a4 <hci_send_req+0x22c>)
 8008430:	f000 f90c 	bl	800864c <list_insert_tail>
      hciReadPacket=NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	e008      	b.n	800844c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f902 	bl	800864c <list_insert_tail>
      hciReadPacket=NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
  {
 800844c:	e740      	b.n	80082d0 <hci_send_req+0x58>
        goto failed;
 800844e:	bf00      	nop
 8008450:	e004      	b.n	800845c <hci_send_req+0x1e4>
        goto failed;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <hci_send_req+0x1e4>
          goto failed;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <hci_send_req+0x1e4>
          goto failed;
 800845a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4619      	mov	r1, r3
 8008466:	480f      	ldr	r0, [pc, #60]	; (80084a4 <hci_send_req+0x22c>)
 8008468:	f000 f8ca 	bl	8008600 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4619      	mov	r1, r3
 8008472:	480b      	ldr	r0, [pc, #44]	; (80084a0 <hci_send_req+0x228>)
 8008474:	f7ff fe64 	bl	8008140 <move_list>

  return -1;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295
 800847c:	e00b      	b.n	8008496 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4619      	mov	r1, r3
 8008482:	4808      	ldr	r0, [pc, #32]	; (80084a4 <hci_send_req+0x22c>)
 8008484:	f000 f8bc 	bl	8008600 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008488:	f107 0308 	add.w	r3, r7, #8
 800848c:	4619      	mov	r1, r3
 800848e:	4804      	ldr	r0, [pc, #16]	; (80084a0 <hci_send_req+0x228>)
 8008490:	f7ff fe56 	bl	8008140 <move_list>

  return 0;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3738      	adds	r7, #56	; 0x38
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000360 	.word	0x20000360
 80084a4:	20000358 	.word	0x20000358

080084a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80084b2:	e013      	b.n	80084dc <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80084b4:	1d3b      	adds	r3, r7, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	480e      	ldr	r0, [pc, #56]	; (80084f4 <hci_user_evt_proc+0x4c>)
 80084ba:	f000 f90e 	bl	80086da <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80084be:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <hci_user_evt_proc+0x50>)
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80084c6:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <hci_user_evt_proc+0x50>)
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	3208      	adds	r2, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4619      	mov	r1, r3
 80084d6:	4809      	ldr	r0, [pc, #36]	; (80084fc <hci_user_evt_proc+0x54>)
 80084d8:	f000 f8b8 	bl	800864c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80084dc:	4805      	ldr	r0, [pc, #20]	; (80084f4 <hci_user_evt_proc+0x4c>)
 80084de:	f000 f86d 	bl	80085bc <list_is_empty>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0e5      	beq.n	80084b4 <hci_user_evt_proc+0xc>
  }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000360 	.word	0x20000360
 80084f8:	200008e0 	.word	0x200008e0
 80084fc:	20000358 	.word	0x20000358

08008500 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008510:	481f      	ldr	r0, [pc, #124]	; (8008590 <hci_notify_asynch_evt+0x90>)
 8008512:	f000 f853 	bl	80085bc <list_is_empty>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d132      	bne.n	8008582 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800851c:	f107 030c 	add.w	r3, r7, #12
 8008520:	4619      	mov	r1, r3
 8008522:	481b      	ldr	r0, [pc, #108]	; (8008590 <hci_notify_asynch_evt+0x90>)
 8008524:	f000 f8d9 	bl	80086da <list_remove_head>
    
    if (hciContext.io.Receive)
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <hci_notify_asynch_evt+0x94>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d02a      	beq.n	8008586 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008530:	4b18      	ldr	r3, [pc, #96]	; (8008594 <hci_notify_asynch_evt+0x94>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	3208      	adds	r2, #8
 8008538:	2180      	movs	r1, #128	; 0x80
 800853a:	4610      	mov	r0, r2
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d016      	beq.n	8008576 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	7cfa      	ldrb	r2, [r7, #19]
 800854c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff fd93 	bl	800807e <verify_packet>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d105      	bne.n	800856a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4619      	mov	r1, r3
 8008562:	480d      	ldr	r0, [pc, #52]	; (8008598 <hci_notify_asynch_evt+0x98>)
 8008564:	f000 f872 	bl	800864c <list_insert_tail>
 8008568:	e00d      	b.n	8008586 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4619      	mov	r1, r3
 800856e:	4808      	ldr	r0, [pc, #32]	; (8008590 <hci_notify_asynch_evt+0x90>)
 8008570:	f000 f846 	bl	8008600 <list_insert_head>
 8008574:	e007      	b.n	8008586 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4619      	mov	r1, r3
 800857a:	4805      	ldr	r0, [pc, #20]	; (8008590 <hci_notify_asynch_evt+0x90>)
 800857c:	f000 f840 	bl	8008600 <list_insert_head>
 8008580:	e001      	b.n	8008586 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008582:	2301      	movs	r3, #1
 8008584:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008586:	697b      	ldr	r3, [r7, #20]
  
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000358 	.word	0x20000358
 8008594:	200008e0 	.word	0x200008e0
 8008598:	20000360 	.word	0x20000360

0800859c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	605a      	str	r2, [r3, #4]
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c4:	f3ef 8310 	mrs	r3, PRIMASK
 80085c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ca:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80085ce:	b672      	cpsid	i
}
 80085d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d102      	bne.n	80085e2 <list_is_empty+0x26>
  {
    return_value = 1;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
 80085e0:	e001      	b.n	80085e6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	75fb      	strb	r3, [r7, #23]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f383 8810 	msr	PRIMASK, r3
}
 80085f0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860a:	f3ef 8310 	mrs	r3, PRIMASK
 800860e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008610:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008614:	b672      	cpsid	i
}
 8008616:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f383 8810 	msr	PRIMASK, r3
}
 800863e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008656:	f3ef 8310 	mrs	r3, PRIMASK
 800865a:	60fb      	str	r3, [r7, #12]
  return(result);
 800865c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800865e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008660:	b672      	cpsid	i
}
 8008662:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f383 8810 	msr	PRIMASK, r3
}
 800868a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a0:	f3ef 8310 	mrs	r3, PRIMASK
 80086a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086aa:	b672      	cpsid	i
}
 80086ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6852      	ldr	r2, [r2, #4]
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f383 8810 	msr	PRIMASK, r3
}
 80086cc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e4:	f3ef 8310 	mrs	r3, PRIMASK
 80086e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086ee:	b672      	cpsid	i
}
 80086f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff ffca 	bl	8008698 <list_remove_node>
  (*node)->next = NULL;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2200      	movs	r2, #0
 8008712:	605a      	str	r2, [r3, #4]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008720:	bf00      	nop
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008732:	f3ef 8310 	mrs	r3, PRIMASK
 8008736:	60fb      	str	r3, [r7, #12]
  return(result);
 8008738:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800873a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800873c:	b672      	cpsid	i
}
 800873e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff ffa3 	bl	8008698 <list_remove_node>
  (*node)->next = NULL;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2200      	movs	r2, #0
 8008760:	605a      	str	r2, [r3, #4]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008776:	b480      	push	{r7}
 8008778:	b089      	sub	sp, #36	; 0x24
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008782:	f3ef 8310 	mrs	r3, PRIMASK
 8008786:	613b      	str	r3, [r7, #16]
  return(result);
 8008788:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800878a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800878c:	b672      	cpsid	i
}
 800878e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008796:	e005      	b.n	80087a4 <list_get_size+0x2e>
  {
    size++;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	3301      	adds	r3, #1
 800879c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d1f5      	bne.n	8008798 <list_get_size+0x22>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f383 8810 	msr	PRIMASK, r3
}
 80087b6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3724      	adds	r7, #36	; 0x24
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <__sflush_r>:
 80087c8:	898a      	ldrh	r2, [r1, #12]
 80087ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	4605      	mov	r5, r0
 80087d0:	0710      	lsls	r0, r2, #28
 80087d2:	460c      	mov	r4, r1
 80087d4:	d458      	bmi.n	8008888 <__sflush_r+0xc0>
 80087d6:	684b      	ldr	r3, [r1, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc05      	bgt.n	80087e8 <__sflush_r+0x20>
 80087dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dc02      	bgt.n	80087e8 <__sflush_r+0x20>
 80087e2:	2000      	movs	r0, #0
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	d0f9      	beq.n	80087e2 <__sflush_r+0x1a>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087f4:	682f      	ldr	r7, [r5, #0]
 80087f6:	6a21      	ldr	r1, [r4, #32]
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	d032      	beq.n	8008862 <__sflush_r+0x9a>
 80087fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	075a      	lsls	r2, r3, #29
 8008802:	d505      	bpl.n	8008810 <__sflush_r+0x48>
 8008804:	6863      	ldr	r3, [r4, #4]
 8008806:	1ac0      	subs	r0, r0, r3
 8008808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800880a:	b10b      	cbz	r3, 8008810 <__sflush_r+0x48>
 800880c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800880e:	1ac0      	subs	r0, r0, r3
 8008810:	2300      	movs	r3, #0
 8008812:	4602      	mov	r2, r0
 8008814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008816:	6a21      	ldr	r1, [r4, #32]
 8008818:	4628      	mov	r0, r5
 800881a:	47b0      	blx	r6
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	d106      	bne.n	8008830 <__sflush_r+0x68>
 8008822:	6829      	ldr	r1, [r5, #0]
 8008824:	291d      	cmp	r1, #29
 8008826:	d82b      	bhi.n	8008880 <__sflush_r+0xb8>
 8008828:	4a29      	ldr	r2, [pc, #164]	; (80088d0 <__sflush_r+0x108>)
 800882a:	410a      	asrs	r2, r1
 800882c:	07d6      	lsls	r6, r2, #31
 800882e:	d427      	bmi.n	8008880 <__sflush_r+0xb8>
 8008830:	2200      	movs	r2, #0
 8008832:	6062      	str	r2, [r4, #4]
 8008834:	04d9      	lsls	r1, r3, #19
 8008836:	6922      	ldr	r2, [r4, #16]
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	d504      	bpl.n	8008846 <__sflush_r+0x7e>
 800883c:	1c42      	adds	r2, r0, #1
 800883e:	d101      	bne.n	8008844 <__sflush_r+0x7c>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b903      	cbnz	r3, 8008846 <__sflush_r+0x7e>
 8008844:	6560      	str	r0, [r4, #84]	; 0x54
 8008846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008848:	602f      	str	r7, [r5, #0]
 800884a:	2900      	cmp	r1, #0
 800884c:	d0c9      	beq.n	80087e2 <__sflush_r+0x1a>
 800884e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008852:	4299      	cmp	r1, r3
 8008854:	d002      	beq.n	800885c <__sflush_r+0x94>
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f9fe 	bl	8008c58 <_free_r>
 800885c:	2000      	movs	r0, #0
 800885e:	6360      	str	r0, [r4, #52]	; 0x34
 8008860:	e7c0      	b.n	80087e4 <__sflush_r+0x1c>
 8008862:	2301      	movs	r3, #1
 8008864:	4628      	mov	r0, r5
 8008866:	47b0      	blx	r6
 8008868:	1c41      	adds	r1, r0, #1
 800886a:	d1c8      	bne.n	80087fe <__sflush_r+0x36>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0c5      	beq.n	80087fe <__sflush_r+0x36>
 8008872:	2b1d      	cmp	r3, #29
 8008874:	d001      	beq.n	800887a <__sflush_r+0xb2>
 8008876:	2b16      	cmp	r3, #22
 8008878:	d101      	bne.n	800887e <__sflush_r+0xb6>
 800887a:	602f      	str	r7, [r5, #0]
 800887c:	e7b1      	b.n	80087e2 <__sflush_r+0x1a>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008884:	81a3      	strh	r3, [r4, #12]
 8008886:	e7ad      	b.n	80087e4 <__sflush_r+0x1c>
 8008888:	690f      	ldr	r7, [r1, #16]
 800888a:	2f00      	cmp	r7, #0
 800888c:	d0a9      	beq.n	80087e2 <__sflush_r+0x1a>
 800888e:	0793      	lsls	r3, r2, #30
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	bf08      	it	eq
 8008894:	694b      	ldreq	r3, [r1, #20]
 8008896:	600f      	str	r7, [r1, #0]
 8008898:	bf18      	it	ne
 800889a:	2300      	movne	r3, #0
 800889c:	eba6 0807 	sub.w	r8, r6, r7
 80088a0:	608b      	str	r3, [r1, #8]
 80088a2:	f1b8 0f00 	cmp.w	r8, #0
 80088a6:	dd9c      	ble.n	80087e2 <__sflush_r+0x1a>
 80088a8:	6a21      	ldr	r1, [r4, #32]
 80088aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088ac:	4643      	mov	r3, r8
 80088ae:	463a      	mov	r2, r7
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b0      	blx	r6
 80088b4:	2800      	cmp	r0, #0
 80088b6:	dc06      	bgt.n	80088c6 <__sflush_r+0xfe>
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e78e      	b.n	80087e4 <__sflush_r+0x1c>
 80088c6:	4407      	add	r7, r0
 80088c8:	eba8 0800 	sub.w	r8, r8, r0
 80088cc:	e7e9      	b.n	80088a2 <__sflush_r+0xda>
 80088ce:	bf00      	nop
 80088d0:	dfbffffe 	.word	0xdfbffffe

080088d4 <_fflush_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	690b      	ldr	r3, [r1, #16]
 80088d8:	4605      	mov	r5, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	b913      	cbnz	r3, 80088e4 <_fflush_r+0x10>
 80088de:	2500      	movs	r5, #0
 80088e0:	4628      	mov	r0, r5
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	b118      	cbz	r0, 80088ee <_fflush_r+0x1a>
 80088e6:	6a03      	ldr	r3, [r0, #32]
 80088e8:	b90b      	cbnz	r3, 80088ee <_fflush_r+0x1a>
 80088ea:	f000 f8a9 	bl	8008a40 <__sinit>
 80088ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f3      	beq.n	80088de <_fflush_r+0xa>
 80088f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f8:	07d0      	lsls	r0, r2, #31
 80088fa:	d404      	bmi.n	8008906 <_fflush_r+0x32>
 80088fc:	0599      	lsls	r1, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_fflush_r+0x32>
 8008900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008902:	f000 f999 	bl	8008c38 <__retarget_lock_acquire_recursive>
 8008906:	4628      	mov	r0, r5
 8008908:	4621      	mov	r1, r4
 800890a:	f7ff ff5d 	bl	80087c8 <__sflush_r>
 800890e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008910:	07da      	lsls	r2, r3, #31
 8008912:	4605      	mov	r5, r0
 8008914:	d4e4      	bmi.n	80088e0 <_fflush_r+0xc>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	059b      	lsls	r3, r3, #22
 800891a:	d4e1      	bmi.n	80088e0 <_fflush_r+0xc>
 800891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891e:	f000 f98c 	bl	8008c3a <__retarget_lock_release_recursive>
 8008922:	e7dd      	b.n	80088e0 <_fflush_r+0xc>

08008924 <fflush>:
 8008924:	4601      	mov	r1, r0
 8008926:	b920      	cbnz	r0, 8008932 <fflush+0xe>
 8008928:	4a04      	ldr	r2, [pc, #16]	; (800893c <fflush+0x18>)
 800892a:	4905      	ldr	r1, [pc, #20]	; (8008940 <fflush+0x1c>)
 800892c:	4805      	ldr	r0, [pc, #20]	; (8008944 <fflush+0x20>)
 800892e:	f000 b89f 	b.w	8008a70 <_fwalk_sglue>
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <fflush+0x24>)
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f7ff bfcd 	b.w	80088d4 <_fflush_r>
 800893a:	bf00      	nop
 800893c:	2000003c 	.word	0x2000003c
 8008940:	080088d5 	.word	0x080088d5
 8008944:	20000048 	.word	0x20000048
 8008948:	20000094 	.word	0x20000094

0800894c <std>:
 800894c:	2300      	movs	r3, #0
 800894e:	b510      	push	{r4, lr}
 8008950:	4604      	mov	r4, r0
 8008952:	e9c0 3300 	strd	r3, r3, [r0]
 8008956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800895a:	6083      	str	r3, [r0, #8]
 800895c:	8181      	strh	r1, [r0, #12]
 800895e:	6643      	str	r3, [r0, #100]	; 0x64
 8008960:	81c2      	strh	r2, [r0, #14]
 8008962:	6183      	str	r3, [r0, #24]
 8008964:	4619      	mov	r1, r3
 8008966:	2208      	movs	r2, #8
 8008968:	305c      	adds	r0, #92	; 0x5c
 800896a:	f000 f8f2 	bl	8008b52 <memset>
 800896e:	4b05      	ldr	r3, [pc, #20]	; (8008984 <std+0x38>)
 8008970:	6263      	str	r3, [r4, #36]	; 0x24
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <std+0x3c>)
 8008974:	62a3      	str	r3, [r4, #40]	; 0x28
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <std+0x40>)
 8008978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800897a:	4b05      	ldr	r3, [pc, #20]	; (8008990 <std+0x44>)
 800897c:	6224      	str	r4, [r4, #32]
 800897e:	6323      	str	r3, [r4, #48]	; 0x30
 8008980:	bd10      	pop	{r4, pc}
 8008982:	bf00      	nop
 8008984:	08008aad 	.word	0x08008aad
 8008988:	08008acf 	.word	0x08008acf
 800898c:	08008b07 	.word	0x08008b07
 8008990:	08008b2b 	.word	0x08008b2b

08008994 <stdio_exit_handler>:
 8008994:	4a02      	ldr	r2, [pc, #8]	; (80089a0 <stdio_exit_handler+0xc>)
 8008996:	4903      	ldr	r1, [pc, #12]	; (80089a4 <stdio_exit_handler+0x10>)
 8008998:	4803      	ldr	r0, [pc, #12]	; (80089a8 <stdio_exit_handler+0x14>)
 800899a:	f000 b869 	b.w	8008a70 <_fwalk_sglue>
 800899e:	bf00      	nop
 80089a0:	2000003c 	.word	0x2000003c
 80089a4:	080088d5 	.word	0x080088d5
 80089a8:	20000048 	.word	0x20000048

080089ac <cleanup_stdio>:
 80089ac:	6841      	ldr	r1, [r0, #4]
 80089ae:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <cleanup_stdio+0x34>)
 80089b0:	4299      	cmp	r1, r3
 80089b2:	b510      	push	{r4, lr}
 80089b4:	4604      	mov	r4, r0
 80089b6:	d001      	beq.n	80089bc <cleanup_stdio+0x10>
 80089b8:	f7ff ff8c 	bl	80088d4 <_fflush_r>
 80089bc:	68a1      	ldr	r1, [r4, #8]
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <cleanup_stdio+0x38>)
 80089c0:	4299      	cmp	r1, r3
 80089c2:	d002      	beq.n	80089ca <cleanup_stdio+0x1e>
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff ff85 	bl	80088d4 <_fflush_r>
 80089ca:	68e1      	ldr	r1, [r4, #12]
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <cleanup_stdio+0x3c>)
 80089ce:	4299      	cmp	r1, r3
 80089d0:	d004      	beq.n	80089dc <cleanup_stdio+0x30>
 80089d2:	4620      	mov	r0, r4
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	f7ff bf7c 	b.w	80088d4 <_fflush_r>
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	20000900 	.word	0x20000900
 80089e4:	20000968 	.word	0x20000968
 80089e8:	200009d0 	.word	0x200009d0

080089ec <global_stdio_init.part.0>:
 80089ec:	b510      	push	{r4, lr}
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <global_stdio_init.part.0+0x30>)
 80089f0:	4c0b      	ldr	r4, [pc, #44]	; (8008a20 <global_stdio_init.part.0+0x34>)
 80089f2:	4a0c      	ldr	r2, [pc, #48]	; (8008a24 <global_stdio_init.part.0+0x38>)
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	4620      	mov	r0, r4
 80089f8:	2200      	movs	r2, #0
 80089fa:	2104      	movs	r1, #4
 80089fc:	f7ff ffa6 	bl	800894c <std>
 8008a00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a04:	2201      	movs	r2, #1
 8008a06:	2109      	movs	r1, #9
 8008a08:	f7ff ffa0 	bl	800894c <std>
 8008a0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a10:	2202      	movs	r2, #2
 8008a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a16:	2112      	movs	r1, #18
 8008a18:	f7ff bf98 	b.w	800894c <std>
 8008a1c:	20000a38 	.word	0x20000a38
 8008a20:	20000900 	.word	0x20000900
 8008a24:	08008995 	.word	0x08008995

08008a28 <__sfp_lock_acquire>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__sfp_lock_acquire+0x8>)
 8008a2a:	f000 b905 	b.w	8008c38 <__retarget_lock_acquire_recursive>
 8008a2e:	bf00      	nop
 8008a30:	20000a41 	.word	0x20000a41

08008a34 <__sfp_lock_release>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__sfp_lock_release+0x8>)
 8008a36:	f000 b900 	b.w	8008c3a <__retarget_lock_release_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	20000a41 	.word	0x20000a41

08008a40 <__sinit>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	4604      	mov	r4, r0
 8008a44:	f7ff fff0 	bl	8008a28 <__sfp_lock_acquire>
 8008a48:	6a23      	ldr	r3, [r4, #32]
 8008a4a:	b11b      	cbz	r3, 8008a54 <__sinit+0x14>
 8008a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a50:	f7ff bff0 	b.w	8008a34 <__sfp_lock_release>
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <__sinit+0x28>)
 8008a56:	6223      	str	r3, [r4, #32]
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <__sinit+0x2c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f5      	bne.n	8008a4c <__sinit+0xc>
 8008a60:	f7ff ffc4 	bl	80089ec <global_stdio_init.part.0>
 8008a64:	e7f2      	b.n	8008a4c <__sinit+0xc>
 8008a66:	bf00      	nop
 8008a68:	080089ad 	.word	0x080089ad
 8008a6c:	20000a38 	.word	0x20000a38

08008a70 <_fwalk_sglue>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4607      	mov	r7, r0
 8008a76:	4688      	mov	r8, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a80:	f1b9 0901 	subs.w	r9, r9, #1
 8008a84:	d505      	bpl.n	8008a92 <_fwalk_sglue+0x22>
 8008a86:	6824      	ldr	r4, [r4, #0]
 8008a88:	2c00      	cmp	r4, #0
 8008a8a:	d1f7      	bne.n	8008a7c <_fwalk_sglue+0xc>
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d907      	bls.n	8008aa8 <_fwalk_sglue+0x38>
 8008a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	d003      	beq.n	8008aa8 <_fwalk_sglue+0x38>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c0      	blx	r8
 8008aa6:	4306      	orrs	r6, r0
 8008aa8:	3568      	adds	r5, #104	; 0x68
 8008aaa:	e7e9      	b.n	8008a80 <_fwalk_sglue+0x10>

08008aac <__sread>:
 8008aac:	b510      	push	{r4, lr}
 8008aae:	460c      	mov	r4, r1
 8008ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab4:	f000 f878 	bl	8008ba8 <_read_r>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	bfab      	itete	ge
 8008abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008abe:	89a3      	ldrhlt	r3, [r4, #12]
 8008ac0:	181b      	addge	r3, r3, r0
 8008ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ac6:	bfac      	ite	ge
 8008ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008aca:	81a3      	strhlt	r3, [r4, #12]
 8008acc:	bd10      	pop	{r4, pc}

08008ace <__swrite>:
 8008ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	898b      	ldrh	r3, [r1, #12]
 8008ad6:	05db      	lsls	r3, r3, #23
 8008ad8:	4605      	mov	r5, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	4616      	mov	r6, r2
 8008ade:	d505      	bpl.n	8008aec <__swrite+0x1e>
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f000 f84c 	bl	8008b84 <_lseek_r>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	4628      	mov	r0, r5
 8008afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b02:	f000 b863 	b.w	8008bcc <_write_r>

08008b06 <__sseek>:
 8008b06:	b510      	push	{r4, lr}
 8008b08:	460c      	mov	r4, r1
 8008b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0e:	f000 f839 	bl	8008b84 <_lseek_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	bf15      	itete	ne
 8008b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b22:	81a3      	strheq	r3, [r4, #12]
 8008b24:	bf18      	it	ne
 8008b26:	81a3      	strhne	r3, [r4, #12]
 8008b28:	bd10      	pop	{r4, pc}

08008b2a <__sclose>:
 8008b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2e:	f000 b819 	b.w	8008b64 <_close_r>

08008b32 <memcmp>:
 8008b32:	b510      	push	{r4, lr}
 8008b34:	3901      	subs	r1, #1
 8008b36:	4402      	add	r2, r0
 8008b38:	4290      	cmp	r0, r2
 8008b3a:	d101      	bne.n	8008b40 <memcmp+0xe>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e005      	b.n	8008b4c <memcmp+0x1a>
 8008b40:	7803      	ldrb	r3, [r0, #0]
 8008b42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	d001      	beq.n	8008b4e <memcmp+0x1c>
 8008b4a:	1b18      	subs	r0, r3, r4
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	3001      	adds	r0, #1
 8008b50:	e7f2      	b.n	8008b38 <memcmp+0x6>

08008b52 <memset>:
 8008b52:	4402      	add	r2, r0
 8008b54:	4603      	mov	r3, r0
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d100      	bne.n	8008b5c <memset+0xa>
 8008b5a:	4770      	bx	lr
 8008b5c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b60:	e7f9      	b.n	8008b56 <memset+0x4>
	...

08008b64 <_close_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d06      	ldr	r5, [pc, #24]	; (8008b80 <_close_r+0x1c>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	f7f9 fb13 	bl	800219a <_close>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_close_r+0x1a>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_close_r+0x1a>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20000a3c 	.word	0x20000a3c

08008b84 <_lseek_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_lseek_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f9 fb0d 	bl	80021b2 <_lseek>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_lseek_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_lseek_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20000a3c 	.word	0x20000a3c

08008ba8 <_read_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d07      	ldr	r5, [pc, #28]	; (8008bc8 <_read_r+0x20>)
 8008bac:	4604      	mov	r4, r0
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	602a      	str	r2, [r5, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f7f9 fab6 	bl	8002128 <_read>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_read_r+0x1e>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_read_r+0x1e>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	20000a3c 	.word	0x20000a3c

08008bcc <_write_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d07      	ldr	r5, [pc, #28]	; (8008bec <_write_r+0x20>)
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	602a      	str	r2, [r5, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f7f9 fac1 	bl	8002162 <_write>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_write_r+0x1e>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_write_r+0x1e>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20000a3c 	.word	0x20000a3c

08008bf0 <__libc_init_array>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4d0d      	ldr	r5, [pc, #52]	; (8008c28 <__libc_init_array+0x38>)
 8008bf4:	4c0d      	ldr	r4, [pc, #52]	; (8008c2c <__libc_init_array+0x3c>)
 8008bf6:	1b64      	subs	r4, r4, r5
 8008bf8:	10a4      	asrs	r4, r4, #2
 8008bfa:	2600      	movs	r6, #0
 8008bfc:	42a6      	cmp	r6, r4
 8008bfe:	d109      	bne.n	8008c14 <__libc_init_array+0x24>
 8008c00:	4d0b      	ldr	r5, [pc, #44]	; (8008c30 <__libc_init_array+0x40>)
 8008c02:	4c0c      	ldr	r4, [pc, #48]	; (8008c34 <__libc_init_array+0x44>)
 8008c04:	f000 f880 	bl	8008d08 <_init>
 8008c08:	1b64      	subs	r4, r4, r5
 8008c0a:	10a4      	asrs	r4, r4, #2
 8008c0c:	2600      	movs	r6, #0
 8008c0e:	42a6      	cmp	r6, r4
 8008c10:	d105      	bne.n	8008c1e <__libc_init_array+0x2e>
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c18:	4798      	blx	r3
 8008c1a:	3601      	adds	r6, #1
 8008c1c:	e7ee      	b.n	8008bfc <__libc_init_array+0xc>
 8008c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c22:	4798      	blx	r3
 8008c24:	3601      	adds	r6, #1
 8008c26:	e7f2      	b.n	8008c0e <__libc_init_array+0x1e>
 8008c28:	08008fcc 	.word	0x08008fcc
 8008c2c:	08008fcc 	.word	0x08008fcc
 8008c30:	08008fcc 	.word	0x08008fcc
 8008c34:	08008fd0 	.word	0x08008fd0

08008c38 <__retarget_lock_acquire_recursive>:
 8008c38:	4770      	bx	lr

08008c3a <__retarget_lock_release_recursive>:
 8008c3a:	4770      	bx	lr

08008c3c <memcpy>:
 8008c3c:	440a      	add	r2, r1
 8008c3e:	4291      	cmp	r1, r2
 8008c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c44:	d100      	bne.n	8008c48 <memcpy+0xc>
 8008c46:	4770      	bx	lr
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c52:	4291      	cmp	r1, r2
 8008c54:	d1f9      	bne.n	8008c4a <memcpy+0xe>
 8008c56:	bd10      	pop	{r4, pc}

08008c58 <_free_r>:
 8008c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5a:	2900      	cmp	r1, #0
 8008c5c:	d044      	beq.n	8008ce8 <_free_r+0x90>
 8008c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c62:	9001      	str	r0, [sp, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f1a1 0404 	sub.w	r4, r1, #4
 8008c6a:	bfb8      	it	lt
 8008c6c:	18e4      	addlt	r4, r4, r3
 8008c6e:	f000 f83f 	bl	8008cf0 <__malloc_lock>
 8008c72:	4a1e      	ldr	r2, [pc, #120]	; (8008cec <_free_r+0x94>)
 8008c74:	9801      	ldr	r0, [sp, #4]
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	b933      	cbnz	r3, 8008c88 <_free_r+0x30>
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	6014      	str	r4, [r2, #0]
 8008c7e:	b003      	add	sp, #12
 8008c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c84:	f000 b83a 	b.w	8008cfc <__malloc_unlock>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d908      	bls.n	8008c9e <_free_r+0x46>
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	1961      	adds	r1, r4, r5
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf01      	itttt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	1949      	addeq	r1, r1, r5
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	e7ed      	b.n	8008c7a <_free_r+0x22>
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	b10b      	cbz	r3, 8008ca8 <_free_r+0x50>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d9fa      	bls.n	8008c9e <_free_r+0x46>
 8008ca8:	6811      	ldr	r1, [r2, #0]
 8008caa:	1855      	adds	r5, r2, r1
 8008cac:	42a5      	cmp	r5, r4
 8008cae:	d10b      	bne.n	8008cc8 <_free_r+0x70>
 8008cb0:	6824      	ldr	r4, [r4, #0]
 8008cb2:	4421      	add	r1, r4
 8008cb4:	1854      	adds	r4, r2, r1
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	d1e0      	bne.n	8008c7e <_free_r+0x26>
 8008cbc:	681c      	ldr	r4, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	6053      	str	r3, [r2, #4]
 8008cc2:	440c      	add	r4, r1
 8008cc4:	6014      	str	r4, [r2, #0]
 8008cc6:	e7da      	b.n	8008c7e <_free_r+0x26>
 8008cc8:	d902      	bls.n	8008cd0 <_free_r+0x78>
 8008cca:	230c      	movs	r3, #12
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	e7d6      	b.n	8008c7e <_free_r+0x26>
 8008cd0:	6825      	ldr	r5, [r4, #0]
 8008cd2:	1961      	adds	r1, r4, r5
 8008cd4:	428b      	cmp	r3, r1
 8008cd6:	bf04      	itt	eq
 8008cd8:	6819      	ldreq	r1, [r3, #0]
 8008cda:	685b      	ldreq	r3, [r3, #4]
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	bf04      	itt	eq
 8008ce0:	1949      	addeq	r1, r1, r5
 8008ce2:	6021      	streq	r1, [r4, #0]
 8008ce4:	6054      	str	r4, [r2, #4]
 8008ce6:	e7ca      	b.n	8008c7e <_free_r+0x26>
 8008ce8:	b003      	add	sp, #12
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	20000a44 	.word	0x20000a44

08008cf0 <__malloc_lock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__malloc_lock+0x8>)
 8008cf2:	f7ff bfa1 	b.w	8008c38 <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	20000a40 	.word	0x20000a40

08008cfc <__malloc_unlock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	; (8008d04 <__malloc_unlock+0x8>)
 8008cfe:	f7ff bf9c 	b.w	8008c3a <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	20000a40 	.word	0x20000a40

08008d08 <_init>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	bf00      	nop
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr

08008d14 <_fini>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	bf00      	nop
 8008d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1a:	bc08      	pop	{r3}
 8008d1c:	469e      	mov	lr, r3
 8008d1e:	4770      	bx	lr
