
PeriperalApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000098  08008dd4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  08008dd4  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001d273  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a0  00000000  00000000  0003d37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e762  00000000  00000000  0003d41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000399f  00000000  00000000  0005bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001840  00000000  00000000  0005f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb747  00000000  00000000  00060d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000012e2  00000000  00000000  0015c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ae0e  00000000  00000000  0015d789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006cc0  00000000  00000000  00188598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a68 	.word	0x08008a68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008a68 	.word	0x08008a68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c8:	f001 fdd0 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ce:	e003      	b.n	80004d8 <LoopCopyDataInit>

080004d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d6:	3104      	adds	r1, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004e0:	d3f6      	bcc.n	80004d0 <CopyDataInit>
	ldr	r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e4:	e002      	b.n	80004ec <LoopFillZerobss>

080004e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e8:	f842 3b04 	str.w	r3, [r2], #4

080004ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LoopForever+0x16>)
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004f0:	d3f9      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f2:	f008 fa2d 	bl	8008950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f6:	f001 f8f4 	bl	80016e2 <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000500:	08008d3c 	.word	0x08008d3c
	ldr	r0, =_sdata
 8000504:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000508:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 800050c:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8000510:	200009f4 	.word	0x200009f4

08000514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_2_IRQHandler>
	...

08000518 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  uint8_t ret;

  User_Init();
 800051e:	f000 f9d5 	bl	80008cc <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 8000522:	2100      	movs	r1, #0
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_BlueNRG_2_Init+0x2c>)
 8000526:	f007 fc99 	bl	8007e5c <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");

  ret = PeriperalAppInit();
 800052a:	f000 f993 	bl	8000854 <PeriperalAppInit>
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

  if (ret != BLE_STATUS_SUCCESS)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <MX_BlueNRG_2_Init+0x22>
  {
    PRINT_DBG("PeriperalAppInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8000538:	e7fe      	b.n	8000538 <MX_BlueNRG_2_Init+0x20>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	08001221 	.word	0x08001221

08000548 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  hci_user_evt_proc();
 800054c:	f007 fe00 	bl	8008150 <hci_user_evt_proc>
  User_Process();
 8000550:	f000 fb1a 	bl	8000b88 <User_Process>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
static void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af04      	add	r7, sp, #16
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
  uint32_t tickstart = HAL_GetTick();
 8000564:	f001 fe04 	bl	8002170 <HAL_GetTick>
 8000568:	60f8      	str	r0, [r7, #12]

  if(device_role == SLAVE_ROLE)
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <sendData+0xbc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d13c      	bne.n	80005ec <sendData+0x94>
  {
    while(aci_gatt_update_char_value_ext(connection_handle,
 8000572:	e018      	b.n	80005a6 <sendData+0x4e>
                                         sampleServHandle,
                                         TXCharHandle,
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
    {
      APP_FLAG_SET(TX_BUFFER_FULL);
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <sendData+0xc0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <sendData+0xc0>)
 800057e:	6013      	str	r3, [r2, #0]
      while(APP_FLAG(TX_BUFFER_FULL)) {
 8000580:	e00b      	b.n	800059a <sendData+0x42>
        hci_user_evt_proc();
 8000582:	f007 fde5 	bl	8008150 <hci_user_evt_proc>
        // Radio is busy (buffer full).
        if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000586:	f001 fdf3 	bl	8002170 <HAL_GetTick>
 800058a:	4602      	mov	r2, r0
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	f242 7210 	movw	r2, #10000	; 0x2710
 8000594:	4293      	cmp	r3, r2
 8000596:	d900      	bls.n	800059a <sendData+0x42>
 8000598:	e005      	b.n	80005a6 <sendData+0x4e>
      while(APP_FLAG(TX_BUFFER_FULL)) {
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <sendData+0xc0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1ed      	bne.n	8000582 <sendData+0x2a>
    while(aci_gatt_update_char_value_ext(connection_handle,
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <sendData+0xc4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b298      	uxth	r0, r3
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <sendData+0xc8>)
 80005ae:	8819      	ldrh	r1, [r3, #0]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <sendData+0xcc>)
 80005b2:	881c      	ldrh	r4, [r3, #0]
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	78fa      	ldrb	r2, [r7, #3]
 80005be:	9202      	str	r2, [sp, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4622      	mov	r2, r4
 80005ca:	f005 fde3 	bl	8006194 <aci_gatt_update_char_value_ext>
 80005ce:	4603      	mov	r3, r0
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
 80005d0:	2b64      	cmp	r3, #100	; 0x64
 80005d2:	d0cf      	beq.n	8000574 <sendData+0x1c>
      hci_user_evt_proc();
      // Radio is busy (buffer full).
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
    }
  }
}
 80005d4:	e01a      	b.n	800060c <sendData+0xb4>
      hci_user_evt_proc();
 80005d6:	f007 fdbb 	bl	8008150 <hci_user_evt_proc>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80005da:	f001 fdc9 	bl	8002170 <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d80e      	bhi.n	800060a <sendData+0xb2>
    while(aci_gatt_write_without_resp(connection_handle, rx_handle+1, Nb_bytes, data_buffer)==BLE_STATUS_NOT_ALLOWED)
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <sendData+0xc4>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b298      	uxth	r0, r3
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <sendData+0xd0>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b299      	uxth	r1, r3
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f005 fd24 	bl	800604a <aci_gatt_write_without_resp>
 8000602:	4603      	mov	r3, r0
 8000604:	2b46      	cmp	r3, #70	; 0x46
 8000606:	d0e6      	beq.n	80005d6 <sendData+0x7e>
}
 8000608:	e000      	b.n	800060c <sendData+0xb4>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800060a:	bf00      	nop
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	20000004 	.word	0x20000004
 8000618:	20000000 	.word	0x20000000
 800061c:	200000cc 	.word	0x200000cc
 8000620:	200000e0 	.word	0x200000e0
 8000624:	200000e2 	.word	0x200000e2
 8000628:	200000d0 	.word	0x200000d0

0800062c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000638:	2000      	movs	r0, #0
 800063a:	f001 f9cd 	bl	80019d8 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e002      	b.n	800064a <receiveData+0x1e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbf8      	blt.n	8000644 <receiveData+0x18>
  {
    PRINT_DBG("%c", data_buffer[i]);
  }
  fflush(stdout);
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <receiveData+0x3c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4618      	mov	r0, r3
 800065a:	f008 f813 	bl	8008684 <fflush>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000094 	.word	0x20000094

0800066c <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 8000678:	2200      	movs	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 8000684:	2200      	movs	r2, #0
 8000686:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <Reset_DiscoveryContext+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 8000694:	2206      	movs	r2, #6
 8000696:	2100      	movs	r1, #0
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <Reset_DiscoveryContext+0x6c>)
 800069a:	f008 f90a 	bl	80088b2 <memset>
  device_role = 0xFF;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <Reset_DiscoveryContext+0x70>)
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <Reset_DiscoveryContext+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <Reset_DiscoveryContext+0x78>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  write_char_len = sizeof(BLUENRG_au8DataBuffer); // CHAR_VALUE_LENGTH-3;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <Reset_DiscoveryContext+0x7c>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	801a      	strh	r2, [r3, #0]

  

  BLUENRG_au8DataBuffer[ 0U ] = (uint8_t) 'F';
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <Reset_DiscoveryContext+0x80>)
 80006b8:	2246      	movs	r2, #70	; 0x46
 80006ba:	701a      	strb	r2, [r3, #0]
  BLUENRG_au8DataBuffer[ 1U ] = (uint8_t) 'F';
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <Reset_DiscoveryContext+0x80>)
 80006be:	2246      	movs	r2, #70	; 0x46
 80006c0:	705a      	strb	r2, [r3, #1]
  BLUENRG_au8DataBuffer[ 2U ] = (uint8_t) 'F';
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <Reset_DiscoveryContext+0x80>)
 80006c4:	2246      	movs	r2, #70	; 0x46
 80006c6:	709a      	strb	r2, [r3, #2]
  BLUENRG_au8DataBuffer[ 3U ] = (uint8_t) 'F';
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <Reset_DiscoveryContext+0x80>)
 80006ca:	2246      	movs	r2, #70	; 0x46
 80006cc:	70da      	strb	r2, [r3, #3]
  //   BLUENRG_au8DataBuffer[u16Idx] = 0x31 + 1U;
  //   // if ((i+1)%10==0) {
  //   //   BLUENRG_au8DataBuffer[i]='x';
  //   // }
  // }
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000b8 	.word	0x200000b8
 80006d8:	200000c1 	.word	0x200000c1
 80006dc:	20000004 	.word	0x20000004
 80006e0:	200000d4 	.word	0x200000d4
 80006e4:	200000d5 	.word	0x200000d5
 80006e8:	20000006 	.word	0x20000006
 80006ec:	200000d8 	.word	0x200000d8

080006f0 <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80006f6:	4a24      	ldr	r2, [pc, #144]	; (8000788 <Setup_DeviceAddress+0x98>)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000700:	6018      	str	r0, [r3, #0]
 8000702:	3304      	adds	r3, #4
 8000704:	8019      	strh	r1, [r3, #0]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f007 fad4 	bl	8007cb6 <hci_le_rand>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
  }

  discovery_time = 3000; /* at least 3 seconds */
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <Setup_DeviceAddress+0x9c>)
 8000714:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000718:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	75fb      	strb	r3, [r7, #23]
 800071e:	e010      	b.n	8000742 <Setup_DeviceAddress+0x52>
  {
    discovery_time += (2*random_number[i]);
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	3318      	adds	r3, #24
 8000724:	443b      	add	r3, r7
 8000726:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800072a:	b29b      	uxth	r3, r3
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <Setup_DeviceAddress+0x9c>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	4413      	add	r3, r2
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <Setup_DeviceAddress+0x9c>)
 800073a:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	3301      	adds	r3, #1
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9eb      	bls.n	8000720 <Setup_DeviceAddress+0x30>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 8000748:	793b      	ldrb	r3, [r7, #4]
 800074a:	733b      	strb	r3, [r7, #12]
  bdaddr[1] = (uint8_t) (random_number[3]);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	737b      	strb	r3, [r7, #13]
  bdaddr[2] = (uint8_t) (random_number[6]);
 8000750:	7abb      	ldrb	r3, [r7, #10]
 8000752:	73bb      	strb	r3, [r7, #14]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	461a      	mov	r2, r3
 800075a:	2106      	movs	r1, #6
 800075c:	2000      	movs	r0, #0
 800075e:	f005 fde5 	bl	800632c <aci_hal_write_config_data>
 8000762:	4603      	mov	r3, r0
 8000764:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
 8000766:	7d7b      	ldrb	r3, [r7, #21]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d108      	bne.n	800077e <Setup_DeviceAddress+0x8e>
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
  }
  else
  {
    PRINT_DBG("Public address: ");
    for (uint8_t i=5; i>0; i--)
 800076c:	2305      	movs	r3, #5
 800076e:	75bb      	strb	r3, [r7, #22]
 8000770:	e002      	b.n	8000778 <Setup_DeviceAddress+0x88>
 8000772:	7dbb      	ldrb	r3, [r7, #22]
 8000774:	3b01      	subs	r3, #1
 8000776:	75bb      	strb	r3, [r7, #22]
 8000778:	7dbb      	ldrb	r3, [r7, #22]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f9      	bne.n	8000772 <Setup_DeviceAddress+0x82>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	08008a80 	.word	0x08008a80
 800078c:	200000d2 	.word	0x200000d2

08000790 <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  uint8_t index = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]

  while (index < data_length)
 80007a0:	e01f      	b.n	80007e2 <Find_DeviceName+0x52>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE PeriperalApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	3301      	adds	r3, #1
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d10f      	bne.n	80007d0 <Find_DeviceName+0x40>
    {
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], BLE_SAMPLE_APP_COMPLETE_LOCAL_NAME_SIZE) == 0)
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	2212      	movs	r2, #18
 80007ba:	490e      	ldr	r1, [pc, #56]	; (80007f4 <Find_DeviceName+0x64>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 f868 	bl	8008892 <memcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <Find_DeviceName+0x3c>
      {
        return TRUE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e00f      	b.n	80007ec <Find_DeviceName+0x5c>
      }
      else
      {
        return FALSE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e00d      	b.n	80007ec <Find_DeviceName+0x5c>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
  while (index < data_length)
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3db      	bcc.n	80007a2 <Find_DeviceName+0x12>
    }
  }

  return FALSE;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000008 	.word	0x20000008

080007f8 <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	603a      	str	r2, [r7, #0]
 8000802:	80fb      	strh	r3, [r7, #6]
 8000804:	460b      	mov	r3, r1
 8000806:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1)
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <Attribute_Modified_CB+0x50>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	429a      	cmp	r2, r3
 8000812:	d105      	bne.n	8000820 <Attribute_Modified_CB+0x28>
  {
    receiveData(att_data, data_length);
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	4619      	mov	r1, r3
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f7ff ff07 	bl	800062c <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 800081e:	e00f      	b.n	8000840 <Attribute_Modified_CB+0x48>
  else if(handle == TXCharHandle + 2)
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <Attribute_Modified_CB+0x54>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	3302      	adds	r3, #2
 8000828:	429a      	cmp	r2, r3
 800082a:	d109      	bne.n	8000840 <Attribute_Modified_CB+0x48>
    if(att_data[0] == 0x01)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d105      	bne.n	8000840 <Attribute_Modified_CB+0x48>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <Attribute_Modified_CB+0x58>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <Attribute_Modified_CB+0x58>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000e4 	.word	0x200000e4
 800084c:	200000e2 	.word	0x200000e2
 8000850:	20000000 	.word	0x20000000

08000854 <PeriperalAppInit>:
* Description    : Init PeriperalApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t PeriperalAppInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  const uint8_t cu8DeviceNameLen = 7U;
 800085a:	2307      	movs	r3, #7
 800085c:	71fb      	strb	r3, [r7, #7]

  /* Sw reset of the device */
  hci_reset();
 800085e:	f007 f919 	bl	8007a94 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8000862:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000866:	f001 fc8f 	bl	8002188 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 800086a:	f7ff ff41 	bl	80006f0 <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 800086e:	2104      	movs	r1, #4
 8000870:	2001      	movs	r0, #1
 8000872:	f005 fde9 	bl	8006448 <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 8000876:	f005 f97f 	bl	8005b78 <aci_gatt_init>
 800087a:	4603      	mov	r3, r0
 800087c:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <PeriperalAppInit+0x34>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
    return ret;
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	e01d      	b.n	80008c4 <PeriperalAppInit+0x70>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE,0x0,cu8DeviceNameLen, &service_handle,
 8000888:	1d39      	adds	r1, r7, #4
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	463b      	mov	r3, r7
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	1cbb      	adds	r3, r7, #2
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	460b      	mov	r3, r1
 8000896:	2100      	movs	r1, #0
 8000898:	2001      	movs	r0, #1
 800089a:	f004 fee2 	bl	8005662 <aci_gap_init>
 800089e:	4603      	mov	r3, r0
 80008a0:	71bb      	strb	r3, [r7, #6]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <PeriperalAppInit+0x58>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
    return ret;
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	e00b      	b.n	80008c4 <PeriperalAppInit+0x70>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 80008ac:	f000 fc2c 	bl	8001108 <Add_Sample_Service>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <PeriperalAppInit+0x6a>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
    return ret;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	e002      	b.n	80008c4 <PeriperalAppInit+0x70>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 80008be:	f7ff fed5 	bl	800066c <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f001 f8d4 	bl	8001a80 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 f83f 	bl	800195c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80008de:	2000      	movs	r0, #0
 80008e0:	f001 f98a 	bl	8001bf8 <BSP_COM_Init>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <Connection_StateMachine>:
* Description    : Connection state machine.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Connection_StateMachine(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af08      	add	r7, sp, #32
  uint8_t ret;

  switch (discovery.device_state)
 80008ee:	4ba2      	ldr	r3, [pc, #648]	; (8000b78 <Connection_StateMachine+0x290>)
 80008f0:	8a1b      	ldrh	r3, [r3, #16]
 80008f2:	2b80      	cmp	r3, #128	; 0x80
 80008f4:	f000 8136 	beq.w	8000b64 <Connection_StateMachine+0x27c>
 80008f8:	2b80      	cmp	r3, #128	; 0x80
 80008fa:	f300 8136 	bgt.w	8000b6a <Connection_StateMachine+0x282>
 80008fe:	2b20      	cmp	r3, #32
 8000900:	dc4a      	bgt.n	8000998 <Connection_StateMachine+0xb0>
 8000902:	2b00      	cmp	r3, #0
 8000904:	f2c0 8131 	blt.w	8000b6a <Connection_StateMachine+0x282>
 8000908:	2b20      	cmp	r3, #32
 800090a:	f200 812e 	bhi.w	8000b6a <Connection_StateMachine+0x282>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <Connection_StateMachine+0x2c>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	0800099f 	.word	0x0800099f
 8000918:	080009ab 	.word	0x080009ab
 800091c:	08000af3 	.word	0x08000af3
 8000920:	08000b6b 	.word	0x08000b6b
 8000924:	080009f1 	.word	0x080009f1
 8000928:	08000b6b 	.word	0x08000b6b
 800092c:	08000b6b 	.word	0x08000b6b
 8000930:	08000b6b 	.word	0x08000b6b
 8000934:	08000a95 	.word	0x08000a95
 8000938:	08000b6b 	.word	0x08000b6b
 800093c:	08000b6b 	.word	0x08000b6b
 8000940:	08000b6b 	.word	0x08000b6b
 8000944:	08000b6b 	.word	0x08000b6b
 8000948:	08000b6b 	.word	0x08000b6b
 800094c:	08000b6b 	.word	0x08000b6b
 8000950:	08000b6b 	.word	0x08000b6b
 8000954:	08000afb 	.word	0x08000afb
 8000958:	08000b6b 	.word	0x08000b6b
 800095c:	08000b6b 	.word	0x08000b6b
 8000960:	08000b6b 	.word	0x08000b6b
 8000964:	08000b6b 	.word	0x08000b6b
 8000968:	08000b6b 	.word	0x08000b6b
 800096c:	08000b6b 	.word	0x08000b6b
 8000970:	08000b6b 	.word	0x08000b6b
 8000974:	08000b6b 	.word	0x08000b6b
 8000978:	08000b6b 	.word	0x08000b6b
 800097c:	08000b6b 	.word	0x08000b6b
 8000980:	08000b6b 	.word	0x08000b6b
 8000984:	08000b6b 	.word	0x08000b6b
 8000988:	08000b6b 	.word	0x08000b6b
 800098c:	08000b6b 	.word	0x08000b6b
 8000990:	08000b6b 	.word	0x08000b6b
 8000994:	08000a75 	.word	0x08000a75
 8000998:	2b40      	cmp	r3, #64	; 0x40
 800099a:	d05c      	beq.n	8000a56 <Connection_StateMachine+0x16e>
    {
      Reset_DiscoveryContext();
    }
    break; /* end case (DISCOVERY_ERROR) */
  default:
    break;
 800099c:	e0e5      	b.n	8000b6a <Connection_StateMachine+0x282>
      Reset_DiscoveryContext();
 800099e:	f7ff fe65 	bl	800066c <Reset_DiscoveryContext>
      discovery.device_state = ENTER_DISCOVERY_MODE;
 80009a2:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <Connection_StateMachine+0x290>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	821a      	strh	r2, [r3, #16]
    break; /* end case (INIT_STATE) */
 80009a8:	e0e2      	b.n	8000b70 <Connection_StateMachine+0x288>
      BSP_LED_On(LED2);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 ffe8 	bl	8001980 <BSP_LED_On>
      ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00);
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009bc:	f004 fefe 	bl	80057bc <aci_gap_start_general_discovery_proc>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <Connection_StateMachine+0xea>
        discovery.device_state = DISCOVERY_ERROR;
 80009ca:	4b6b      	ldr	r3, [pc, #428]	; (8000b78 <Connection_StateMachine+0x290>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 80009d0:	e0ce      	b.n	8000b70 <Connection_StateMachine+0x288>
        discovery.startTime = HAL_GetTick();
 80009d2:	f001 fbcd 	bl	8002170 <HAL_GetTick>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a67      	ldr	r2, [pc, #412]	; (8000b78 <Connection_StateMachine+0x290>)
 80009da:	6053      	str	r3, [r2, #4]
        discovery.check_disc_proc_timer = TRUE;
 80009dc:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <Connection_StateMachine+0x290>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 80009e2:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <Connection_StateMachine+0x290>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	705a      	strb	r2, [r3, #1]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 80009e8:	4b63      	ldr	r3, [pc, #396]	; (8000b78 <Connection_StateMachine+0x290>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 80009ee:	e0bf      	b.n	8000b70 <Connection_StateMachine+0x288>
      if (discovery.check_disc_proc_timer == TRUE)
 80009f0:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <Connection_StateMachine+0x290>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d114      	bne.n	8000a22 <Connection_StateMachine+0x13a>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 80009f8:	f001 fbba 	bl	8002170 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	4b5e      	ldr	r3, [pc, #376]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	4a5d      	ldr	r2, [pc, #372]	; (8000b7c <Connection_StateMachine+0x294>)
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	f240 80b0 	bls.w	8000b6e <Connection_StateMachine+0x286>
          discovery.check_disc_proc_timer = FALSE;
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
          discovery.startTime = 0;
 8000a14:	4b58      	ldr	r3, [pc, #352]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_TERMINATE_GAP_PROC;
 8000a1a:	4b57      	ldr	r3, [pc, #348]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000a20:	e0a5      	b.n	8000b6e <Connection_StateMachine+0x286>
      else if (discovery.check_disc_mode_timer == TRUE)
 8000a22:	4b55      	ldr	r3, [pc, #340]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	f040 80a1 	bne.w	8000b6e <Connection_StateMachine+0x286>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000a2c:	f001 fba0 	bl	8002170 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b51      	ldr	r3, [pc, #324]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <Connection_StateMachine+0x294>)
 8000a3a:	8812      	ldrh	r2, [r2, #0]
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	f240 8096 	bls.w	8000b6e <Connection_StateMachine+0x286>
          discovery.check_disc_mode_timer = FALSE;
 8000a42:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]
          discovery.startTime = 0;
 8000a48:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a50:	2240      	movs	r2, #64	; 0x40
 8000a52:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000a54:	e08b      	b.n	8000b6e <Connection_StateMachine+0x286>
      ret = aci_gap_set_non_discoverable();
 8000a56:	f004 fcd8 	bl	800540a <aci_gap_set_non_discoverable>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <Connection_StateMachine+0x184>
        discovery.device_state = DISCOVERY_ERROR;
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000a6a:	e081      	b.n	8000b70 <Connection_StateMachine+0x288>
        discovery.device_state = INIT_STATE;
 8000a6c:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000a72:	e07d      	b.n	8000b70 <Connection_StateMachine+0x288>
      ret = aci_gap_terminate_gap_proc(0x02); // GENERAL_DISCOVERY_PROCEDURE
 8000a74:	2002      	movs	r0, #2
 8000a76:	f005 f822 	bl	8005abe <aci_gap_terminate_gap_proc>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <Connection_StateMachine+0x1a4>
        discovery.device_state = DISCOVERY_ERROR;
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	821a      	strh	r2, [r3, #16]
        break;
 8000a8a:	e071      	b.n	8000b70 <Connection_StateMachine+0x288>
        discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <Connection_StateMachine+0x290>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_TERMINATE_GAP_PROC) */
 8000a92:	e06d      	b.n	8000b70 <Connection_StateMachine+0x288>
      for (uint8_t i=5; i>0; i--)
 8000a94:	2305      	movs	r3, #5
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	e002      	b.n	8000aa0 <Connection_StateMachine+0x1b8>
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f9      	bne.n	8000a9a <Connection_StateMachine+0x1b2>
      ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <Connection_StateMachine+0x290>)
 8000aa8:	7a1a      	ldrb	r2, [r3, #8]
 8000aaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aae:	9306      	str	r3, [sp, #24]
 8000ab0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ab4:	9305      	str	r3, [sp, #20]
 8000ab6:	233c      	movs	r3, #60	; 0x3c
 8000ab8:	9304      	str	r3, [sp, #16]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9303      	str	r3, [sp, #12]
 8000abe:	2328      	movs	r3, #40	; 0x28
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2328      	movs	r3, #40	; 0x28
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <Connection_StateMachine+0x298>)
 8000acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ad4:	f004 ff0f 	bl	80058f6 <aci_gap_create_connection>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <Connection_StateMachine+0x202>
        discovery.device_state = DISCOVERY_ERROR;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <Connection_StateMachine+0x290>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000ae8:	e042      	b.n	8000b70 <Connection_StateMachine+0x288>
        discovery.device_state = WAIT_EVENT;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <Connection_StateMachine+0x290>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000af0:	e03e      	b.n	8000b70 <Connection_StateMachine+0x288>
      discovery.device_state = WAIT_EVENT;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <Connection_StateMachine+0x290>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_EVENT) */
 8000af8:	e03a      	b.n	8000b70 <Connection_StateMachine+0x288>
      BSP_LED_Off(LED2);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 ff56 	bl	80019ac <BSP_LED_Off>
      hci_le_set_scan_response_data(0,NULL);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f007 f85e 	bl	8007bc4 <hci_le_set_scan_response_data>
      ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9306      	str	r3, [sp, #24]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9305      	str	r3, [sp, #20]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9303      	str	r3, [sp, #12]
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <Connection_StateMachine+0x29c>)
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2300      	movs	r3, #0
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f004 fc94 	bl	800545c <aci_gap_set_discoverable>
 8000b34:	4603      	mov	r3, r0
 8000b36:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <Connection_StateMachine+0x25e>
        discovery.device_state = DISCOVERY_ERROR;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <Connection_StateMachine+0x290>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000b44:	e014      	b.n	8000b70 <Connection_StateMachine+0x288>
        discovery.startTime = HAL_GetTick();
 8000b46:	f001 fb13 	bl	8002170 <HAL_GetTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <Connection_StateMachine+0x290>)
 8000b4e:	6053      	str	r3, [r2, #4]
        discovery.check_disc_mode_timer = TRUE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <Connection_StateMachine+0x290>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	705a      	strb	r2, [r3, #1]
        discovery.check_disc_proc_timer = FALSE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <Connection_StateMachine+0x290>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <Connection_StateMachine+0x290>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000b62:	e005      	b.n	8000b70 <Connection_StateMachine+0x288>
      Reset_DiscoveryContext();
 8000b64:	f7ff fd82 	bl	800066c <Reset_DiscoveryContext>
    break; /* end case (DISCOVERY_ERROR) */
 8000b68:	e002      	b.n	8000b70 <Connection_StateMachine+0x288>
    break;
 8000b6a:	bf00      	nop
 8000b6c:	e000      	b.n	8000b70 <Connection_StateMachine+0x288>
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000b6e:	bf00      	nop
  }/* end switch */

}/* end Connection_StateMachine() */
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000b8 	.word	0x200000b8
 8000b7c:	200000d2 	.word	0x200000d2
 8000b80:	200000c1 	.word	0x200000c1
 8000b84:	20000008 	.word	0x20000008

08000b88 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  static uint32_t u32LastRssiGetTick = 0U;
  static  int8_t i8LastRSSI = 127;
  int8_t i8RSSI= 127;
 8000b8e:	237f      	movs	r3, #127	; 0x7f
 8000b90:	707b      	strb	r3, [r7, #1]
  

  if(APP_FLAG(SET_CONNECTABLE))
 8000b92:	4b58      	ldr	r3, [pc, #352]	; (8000cf4 <User_Process+0x16c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d008      	beq.n	8000bb0 <User_Process+0x28>
  {
    Connection_StateMachine();
 8000b9e:	f7ff fea3 	bl	80008e8 <Connection_StateMachine>
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 ffc0 	bl	8001b28 <BSP_PB_GetState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <User_Process+0x170>)
 8000bae:	701a      	strb	r2, [r3, #0]
  }

  if (device_role == SLAVE_ROLE) {
 8000bb0:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <User_Process+0x174>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d118      	bne.n	8000bea <User_Process+0x62>
    if (APP_FLAG(CONNECTED)) {
 8000bb8:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <User_Process+0x16c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <User_Process+0x62>
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <User_Process+0x178>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10e      	bne.n	8000bea <User_Process+0x62>
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <User_Process+0x17c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10a      	bne.n	8000bea <User_Process+0x62>
      {
        PRINT_DBG("ROLE SLAVE (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
                  mtu_exchanged, mtu_exchanged_wait);

        mtu_exchanged_wait = 1;
 8000bd4:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <User_Process+0x17c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <User_Process+0x180>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 f9d1 	bl	8005f88 <aci_gatt_exchange_config>
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
      }
    }
  }

  /* Check if the user has pushed the button */
  if (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 ff9c 	bl	8001b28 <BSP_PB_GetState>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <User_Process+0x170>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2301      	moveq	r3, #1
 8000bfc:	2300      	movne	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d134      	bne.n	8000c6e <User_Process+0xe6>
  {
    
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000c04:	bf00      	nop
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 ff8e 	bl	8001b28 <BSP_PB_GetState>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <User_Process+0x170>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf0c      	ite	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	2300      	movne	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d0f2      	beq.n	8000c06 <User_Process+0x7e>

    if(APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED)){
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <User_Process+0x16c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d020      	beq.n	8000c6e <User_Process+0xe6>
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <User_Process+0x16c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d01a      	beq.n	8000c6e <User_Process+0xe6>
      /* Send a toggle command to the remote device */
      uint8_t* data_ptr = BLUENRG_au8DataBuffer;
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <User_Process+0x184>)
 8000c3a:	607b      	str	r3, [r7, #4]
      uint8_t  curr_len = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	70bb      	strb	r3, [r7, #2]

      while (data_ptr < (BLUENRG_au8DataBuffer + sizeof(BLUENRG_au8DataBuffer)))
 8000c40:	e011      	b.n	8000c66 <User_Process+0xde>
      {
        /* if data to send are greater than the max char value length, send them in chunks */
        curr_len = ((BLUENRG_au8DataBuffer + sizeof(BLUENRG_au8DataBuffer) - data_ptr) > write_char_len) ? (write_char_len) : (BLUENRG_au8DataBuffer + sizeof(BLUENRG_au8DataBuffer) - data_ptr);
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <User_Process+0x188>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <User_Process+0x18c>)
 8000c4a:	8812      	ldrh	r2, [r2, #0]
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	bfa8      	it	ge
 8000c50:	4613      	movge	r3, r2
 8000c52:	70bb      	strb	r3, [r7, #2]
        sendData(data_ptr, curr_len);
 8000c54:	78bb      	ldrb	r3, [r7, #2]
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fc7d 	bl	8000558 <sendData>
        data_ptr += curr_len;
 8000c5e:	78bb      	ldrb	r3, [r7, #2]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	607b      	str	r3, [r7, #4]
      while (data_ptr < (BLUENRG_au8DataBuffer + sizeof(BLUENRG_au8DataBuffer)))
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <User_Process+0x188>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d3e9      	bcc.n	8000c42 <User_Process+0xba>
      }
    }
  }
 

  if(APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED)){
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <User_Process+0x16c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d035      	beq.n	8000ce6 <User_Process+0x15e>
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <User_Process+0x16c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d02f      	beq.n	8000ce6 <User_Process+0x15e>

    if(HAL_GetTick() - u32LastRssiGetTick >  APP_RSSI_READ_PERIOD )
 8000c86:	f001 fa73 	bl	8002170 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <User_Process+0x190>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d925      	bls.n	8000ce6 <User_Process+0x15e>
    {
      BSP_LED_On(LED2);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 fe70 	bl	8001980 <BSP_LED_On>
      hci_read_rssi( connection_handle, &i8RSSI );
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <User_Process+0x180>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	1c7a      	adds	r2, r7, #1
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 ff1b 	bl	8007ae6 <hci_read_rssi>
      u32LastRssiGetTick = HAL_GetTick();
 8000cb0:	f001 fa5e 	bl	8002170 <HAL_GetTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <User_Process+0x190>)
 8000cb8:	6013      	str	r3, [r2, #0]
      if( i8RSSI != i8LastRSSI )
 8000cba:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <User_Process+0x194>)
 8000cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d00e      	beq.n	8000ce6 <User_Process+0x15e>
      {
        itoa(i8RSSI, BLUENRG_au8DataBuffer, 10);
 8000cc8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000ccc:	220a      	movs	r2, #10
 8000cce:	490f      	ldr	r1, [pc, #60]	; (8000d0c <User_Process+0x184>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 fbe4 	bl	800849e <itoa>
        sendData(BLUENRG_au8DataBuffer, sizeof(BLUENRG_au8DataBuffer));
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <User_Process+0x184>)
 8000cda:	f7ff fc3d 	bl	8000558 <sendData>
        i8LastRSSI = i8RSSI; 
 8000cde:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <User_Process+0x194>)
 8000ce4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  BSP_LED_Off(LED2);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fe60 	bl	80019ac <BSP_LED_Off>

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	200000b4 	.word	0x200000b4
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	200000d4 	.word	0x200000d4
 8000d04:	200000d5 	.word	0x200000d5
 8000d08:	200000cc 	.word	0x200000cc
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	200000dc 	.word	0x200000dc
 8000d14:	20000006 	.word	0x20000006
 8000d18:	200000dc 	.word	0x200000dc
 8000d1c:	2000001a 	.word	0x2000001a

08000d20 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	71bb      	strb	r3, [r7, #6]
 8000d30:	4613      	mov	r3, r2
 8000d32:	717b      	strb	r3, [r7, #5]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d119      	bne.n	8000d6e <aci_gap_proc_complete_event+0x4e>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10c      	bne.n	8000d5c <aci_gap_proc_complete_event+0x3c>
    {
      discovery.do_connect = FALSE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = ENTER_DISCOVERY_MODE;
    }
  }
}
 8000d5a:	e008      	b.n	8000d6e <aci_gap_proc_complete_event+0x4e>
      discovery.check_disc_proc_timer = FALSE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
      discovery.device_state = ENTER_DISCOVERY_MODE;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <aci_gap_proc_complete_event+0x5c>)
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	821a      	strh	r2, [r3, #16]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000b8 	.word	0x200000b8

08000d80 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8000d80:	b490      	push	{r4, r7}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4604      	mov	r4, r0
 8000d88:	4608      	mov	r0, r1
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4623      	mov	r3, r4
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4603      	mov	r3, r0
 8000d94:	80bb      	strh	r3, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	70fb      	strb	r3, [r7, #3]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <hci_le_connection_complete_event+0x78>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <hci_le_connection_complete_event+0x78>)
 8000da8:	6013      	str	r3, [r2, #0]
  discovery.check_disc_proc_timer = FALSE;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <hci_le_connection_complete_event+0x7c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <hci_le_connection_complete_event+0x7c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <hci_le_connection_complete_event+0x7c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <hci_le_connection_complete_event+0x80>)
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	8013      	strh	r3, [r2, #0]

  APP_FLAG_SET(CONNECTED);
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <hci_le_connection_complete_event+0x78>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <hci_le_connection_complete_event+0x78>)
 8000dcc:	6013      	str	r3, [r2, #0]
  discovery.device_state = INIT_STATE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <hci_le_connection_complete_event+0x7c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <hci_le_connection_complete_event+0x84>)
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	7013      	strb	r3, [r2, #0]

  PRINT_DBG("Connection Complete with peer address: ");
  for (uint8_t i=5; i>0; i--)
 8000dda:	2305      	movs	r3, #5
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e002      	b.n	8000de6 <hci_le_connection_complete_event+0x66>
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f9      	bne.n	8000de0 <hci_le_connection_complete_event+0x60>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);

}/* end hci_le_connection_complete_event() */
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc90      	pop	{r4, r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	200000b8 	.word	0x200000b8
 8000e00:	200000cc 	.word	0x200000cc
 8000e04:	20000004 	.word	0x20000004

08000e08 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	460b      	mov	r3, r1
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	71bb      	strb	r3, [r7, #6]
  APP_FLAG_CLEAR(CONNECTED);
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e24:	6013      	str	r3, [r2, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e30:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e3c:	6013      	str	r3, [r2, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e48:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e54:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e60:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e6c:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <hci_disconnection_complete_event+0x80>)
 8000e78:	6013      	str	r3, [r2, #0]

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
  Reset_DiscoveryContext();
 8000e7a:	f7ff fbf7 	bl	800066c <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000

08000e8c <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	7a1b      	ldrb	r3, [r3, #8]
 8000ea2:	75bb      	strb	r3, [r7, #22]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	757b      	strb	r3, [r7, #21]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	1c9a      	adds	r2, r3, #2
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	6810      	ldr	r0, [r2, #0]
 8000eb4:	6018      	str	r0, [r3, #0]
 8000eb6:	8892      	ldrh	r2, [r2, #4]
 8000eb8:	809a      	strh	r2, [r3, #4]

  /* BLE PeriperalApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d126      	bne.n	8000f10 <hci_le_advertising_report_event+0x84>
  {
    /* BLE PeriperalApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d123      	bne.n	8000f10 <hci_le_advertising_report_event+0x84>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	7dbb      	ldrb	r3, [r7, #22]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fc5d 	bl	8000790 <Find_DeviceName>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d019      	beq.n	8000f10 <hci_le_advertising_report_event+0x84>
    {
      discovery.is_device_found = TRUE;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	709a      	strb	r2, [r3, #2]
      discovery.do_connect = TRUE;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
      discovery.check_disc_mode_timer = FALSE;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	705a      	strb	r2, [r3, #1]
      /* store first device found:  address type and address value */
      discovery.device_found_address_type = bdaddr_type;
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000ef6:	7d7b      	ldrb	r3, [r7, #21]
 8000ef8:	7213      	strb	r3, [r2, #8]
      BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000efc:	3309      	adds	r3, #9
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	6018      	str	r0, [r3, #0]
 8000f06:	8892      	ldrh	r2, [r2, #4]
 8000f08:	809a      	strh	r2, [r3, #4]
      /* device is found: terminate discovery procedure */
      discovery.device_state = DO_TERMINATE_GAP_PROC;
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <hci_le_advertising_report_event+0x8c>)
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	821a      	strh	r2, [r3, #16]
      PRINT_DBG("Device found\r\n");
    }
  }
} /* hci_le_advertising_report_event() */
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000b8 	.word	0x200000b8

08000f1c <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
 8000f36:	4613      	mov	r3, r2
 8000f38:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc58 	bl	80007f8 <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}

08000f50 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4603      	mov	r3, r0
 8000f5a:	81fb      	strh	r3, [r7, #14]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	81bb      	strh	r3, [r7, #12]
 8000f60:	4613      	mov	r3, r2
 8000f62:	72fb      	strb	r3, [r7, #11]
  if(Attribute_Handle == tx_handle+1)
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <aci_gatt_notification_event+0x34>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d104      	bne.n	8000f7a <aci_gatt_notification_event+0x2a>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fb59 	bl	800062c <receiveData>
  }
} /* end aci_gatt_notification_event() */
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000ce 	.word	0x200000ce

08000f88 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4603      	mov	r3, r0
 8000f92:	81fb      	strh	r3, [r7, #14]
 8000f94:	460b      	mov	r3, r1
 8000f96:	81bb      	strh	r3, [r7, #12]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	72fb      	strb	r3, [r7, #11]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d009      	beq.n	8000fbc <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d103      	bne.n	8000fbc <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
  {
    tx_handle = Attribute_Handle;
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	8013      	strh	r3, [r2, #0]
        BSP_LED_Toggle(LED2);
        HAL_Delay(250);
      }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8000fba:	e01d      	b.n	8000ff8 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d017      	beq.n	8000ff8 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d111      	bne.n	8000ff8 <aci_gatt_disc_read_char_by_uuid_resp_event+0x70>
      rx_handle = Attribute_Handle;
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 8000fd6:	89bb      	ldrh	r3, [r7, #12]
 8000fd8:	8013      	strh	r3, [r2, #0]
      for (uint8_t i=0; i<9; i++) {
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
 8000fde:	e008      	b.n	8000ff2 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6a>
        BSP_LED_Toggle(LED2);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fcf9 	bl	80019d8 <BSP_LED_Toggle>
        HAL_Delay(250);
 8000fe6:	20fa      	movs	r0, #250	; 0xfa
 8000fe8:	f001 f8ce 	bl	8002188 <HAL_Delay>
      for (uint8_t i=0; i<9; i++) {
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d9f3      	bls.n	8000fe0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x58>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	200000ce 	.word	0x200000ce
 8001008:	200000d0 	.word	0x200000d0

0800100c <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	4613      	mov	r3, r2
 800101a:	717b      	strb	r3, [r7, #5]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00c      	beq.n	8001042 <aci_gatt_proc_complete_event+0x36>
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <aci_gatt_proc_complete_event+0x36>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 800103e:	6013      	str	r3, [r2, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 8001040:	e011      	b.n	8001066 <aci_gatt_proc_complete_event+0x5a>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <aci_gatt_proc_complete_event+0x5a>
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <aci_gatt_proc_complete_event+0x5a>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <aci_gatt_proc_complete_event+0x68>)
 8001064:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_proc_complete_event() */
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000

08001078 <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	4613      	mov	r3, r2
 8001086:	80bb      	strh	r3, [r7, #4]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <aci_gatt_tx_pool_available_event+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <aci_gatt_tx_pool_available_event+0x28>)
 8001092:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_tx_pool_available_event() */
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000000 	.word	0x20000000

080010a4 <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	80bb      	strh	r3, [r7, #4]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	2b9e      	cmp	r3, #158	; 0x9e
 80010b8:	d805      	bhi.n	80010c6 <aci_att_exchange_mtu_resp_event+0x22>
    write_char_len = Server_RX_MTU - 3;
 80010ba:	88bb      	ldrh	r3, [r7, #4]
 80010bc:	3b03      	subs	r3, #3
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <aci_att_exchange_mtu_resp_event+0x58>)
 80010c2:	801a      	strh	r2, [r3, #0]
 80010c4:	e002      	b.n	80010cc <aci_att_exchange_mtu_resp_event+0x28>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <aci_att_exchange_mtu_resp_event+0x58>)
 80010c8:	229b      	movs	r2, #155	; 0x9b
 80010ca:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <aci_att_exchange_mtu_resp_event+0x5c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <aci_att_exchange_mtu_resp_event+0x38>
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <aci_att_exchange_mtu_resp_event+0x5c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d109      	bne.n	80010f0 <aci_att_exchange_mtu_resp_event+0x4c>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <aci_att_exchange_mtu_resp_event+0x5c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <aci_att_exchange_mtu_resp_event+0x46>
      mtu_exchanged_wait = 2;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <aci_att_exchange_mtu_resp_event+0x5c>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <aci_att_exchange_mtu_resp_event+0x60>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
  }
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000006 	.word	0x20000006
 8001100:	200000d5 	.word	0x200000d5
 8001104:	200000d4 	.word	0x200000d4

08001108 <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b095      	sub	sp, #84	; 0x54
 800110c:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800110e:	2306      	movs	r3, #6
 8001110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <Add_Sample_Service+0xf8>)
 8001116:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800111a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <Add_Sample_Service+0xfc>)
 8001122:	f107 0414 	add.w	r4, r7, #20
 8001126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <Add_Sample_Service+0x100>)
 800112e:	1d3c      	adds	r4, r7, #4
 8001130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <Add_Sample_Service+0x104>)
 8001138:	461c      	mov	r4, r3
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 8001144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001148:	4a31      	ldr	r2, [pc, #196]	; (8001210 <Add_Sample_Service+0x108>)
 800114a:	9200      	str	r2, [sp, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	492f      	ldr	r1, [pc, #188]	; (800120c <Add_Sample_Service+0x104>)
 8001150:	2002      	movs	r0, #2
 8001152:	f004 fd3b 	bl	8005bcc <aci_gatt_add_service>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800115c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001160:	2b00      	cmp	r3, #0
 8001162:	d142      	bne.n	80011ea <Add_Sample_Service+0xe2>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <Add_Sample_Service+0x10c>)
 8001166:	461c      	mov	r4, r3
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <Add_Sample_Service+0x108>)
 8001174:	8818      	ldrh	r0, [r3, #0]
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <Add_Sample_Service+0x110>)
 8001178:	9305      	str	r3, [sp, #20]
 800117a:	2301      	movs	r3, #1
 800117c:	9304      	str	r3, [sp, #16]
 800117e:	2310      	movs	r3, #16
 8001180:	9303      	str	r3, [sp, #12]
 8001182:	2300      	movs	r3, #0
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2310      	movs	r3, #16
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	233f      	movs	r3, #63	; 0x3f
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <Add_Sample_Service+0x10c>)
 8001192:	2102      	movs	r1, #2
 8001194:	f004 fdf0 	bl	8005d78 <aci_gatt_add_char>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800119e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d123      	bne.n	80011ee <Add_Sample_Service+0xe6>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <Add_Sample_Service+0x10c>)
 80011a8:	461c      	mov	r4, r3
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <Add_Sample_Service+0x108>)
 80011b4:	8818      	ldrh	r0, [r3, #0]
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <Add_Sample_Service+0x114>)
 80011b8:	9305      	str	r3, [sp, #20]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9304      	str	r3, [sp, #16]
 80011be:	2310      	movs	r3, #16
 80011c0:	9303      	str	r3, [sp, #12]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	230c      	movs	r3, #12
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	233f      	movs	r3, #63	; 0x3f
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <Add_Sample_Service+0x10c>)
 80011d2:	2102      	movs	r1, #2
 80011d4:	f004 fdd0 	bl	8005d78 <aci_gatt_add_char>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80011de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <Add_Sample_Service+0xea>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e005      	b.n	80011f6 <Add_Sample_Service+0xee>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80011ea:	bf00      	nop
 80011ec:	e002      	b.n	80011f4 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80011ee:	bf00      	nop
 80011f0:	e000      	b.n	80011f4 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80011f2:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
  return BLE_STATUS_ERROR ;
 80011f4:	2347      	movs	r3, #71	; 0x47
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	373c      	adds	r7, #60	; 0x3c
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	08008a88 	.word	0x08008a88
 8001204:	08008a98 	.word	0x08008a98
 8001208:	08008aa8 	.word	0x08008aa8
 800120c:	200000e8 	.word	0x200000e8
 8001210:	200000e0 	.word	0x200000e0
 8001214:	200000f8 	.word	0x200000f8
 8001218:	200000e2 	.word	0x200000e2
 800121c:	200000e4 	.word	0x200000e4

08001220 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d163      	bne.n	80012fc <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b3e      	cmp	r3, #62	; 0x3e
 8001240:	d11e      	bne.n	8001280 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3302      	adds	r3, #2
 8001246:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	e014      	b.n	8001278 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b29a      	uxth	r2, r3
 8001254:	492b      	ldr	r1, [pc, #172]	; (8001304 <APP_UserEvtRx+0xe4>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800125c:	429a      	cmp	r2, r3
 800125e:	d108      	bne.n	8001272 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001260:	4a28      	ldr	r2, [pc, #160]	; (8001304 <APP_UserEvtRx+0xe4>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	3201      	adds	r2, #1
 800126e:	4610      	mov	r0, r2
 8001270:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3301      	adds	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b09      	cmp	r3, #9
 800127c:	d9e7      	bls.n	800124e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800127e:	e03d      	b.n	80012fc <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d11e      	bne.n	80012c6 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3302      	adds	r3, #2
 800128c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e014      	b.n	80012be <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	b29a      	uxth	r2, r3
 800129a:	491b      	ldr	r1, [pc, #108]	; (8001308 <APP_UserEvtRx+0xe8>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d108      	bne.n	80012b8 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <APP_UserEvtRx+0xe8>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	3202      	adds	r2, #2
 80012b4:	4610      	mov	r0, r2
 80012b6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b2a      	cmp	r3, #42	; 0x2a
 80012c2:	d9e7      	bls.n	8001294 <APP_UserEvtRx+0x74>
}
 80012c4:	e01a      	b.n	80012fc <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e014      	b.n	80012f6 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <APP_UserEvtRx+0xec>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d108      	bne.n	80012f0 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <APP_UserEvtRx+0xec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	3202      	adds	r2, #2
 80012ec:	4610      	mov	r0, r2
 80012ee:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d9e7      	bls.n	80012cc <APP_UserEvtRx+0xac>
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	08008b5c 	.word	0x08008b5c
 8001308:	08008bac 	.word	0x08008bac
 800130c:	08008b24 	.word	0x08008b24

08001310 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001314:	2006      	movs	r0, #6
 8001316:	f001 f876 	bl	8002406 <HAL_NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}

0800131e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001322:	2006      	movs	r0, #6
 8001324:	f001 f87d 	bl	8002422 <HAL_NVIC_DisableIRQ>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HCI_TL_SPI_Init+0x94>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HCI_TL_SPI_Init+0x94>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HCI_TL_SPI_Init+0x94>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800134c:	2301      	movs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001350:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f001 f8d6 	bl	8002514 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f001 f8c6 	bl	8002514 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001388:	2302      	movs	r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f001 f8b7 	bl	8002514 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2102      	movs	r1, #2
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f001 fb67 	bl	8002a80 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80013b2:	f000 fd0d 	bl	8001dd0 <BSP_SPI1_Init>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000

080013c4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80013c8:	2101      	movs	r1, #1
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f001 fa4b 	bl	8002868 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80013d2:	2102      	movs	r1, #2
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f001 fa46 	bl	8002868 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f001 fa40 	bl	8002868 <HAL_GPIO_DeInit>
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2102      	movs	r1, #2
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f001 fb41 	bl	8002a80 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f001 fb3a 	bl	8002a80 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800140c:	2005      	movs	r0, #5
 800140e:	f000 febb 	bl	8002188 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f001 fb30 	bl	8002a80 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001420:	2005      	movs	r0, #5
 8001422:	f000 feb1 	bl	8002188 <HAL_Delay>
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	bd80      	pop	{r7, pc}

0800142c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800143c:	2300      	movs	r3, #0
 800143e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001440:	4a32      	ldr	r2, [pc, #200]	; (800150c <HCI_TL_SPI_Receive+0xe0>)
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800144a:	6018      	str	r0, [r3, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8001450:	f7ff ff65 	bl	800131e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f001 fb10 	bl	8002a80 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001460:	f107 0108 	add.w	r1, r7, #8
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2205      	movs	r2, #5
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fce0 	bl	8001e30 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21b      	sxth	r3, r3
 800147e:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8001480:	8bfb      	ldrh	r3, [r7, #30]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01e      	beq.n	80014c4 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8001486:	8bfa      	ldrh	r2, [r7, #30]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	429a      	cmp	r2, r3
 800148c:	d901      	bls.n	8001492 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8001492:	2300      	movs	r3, #0
 8001494:	777b      	strb	r3, [r7, #29]
 8001496:	e010      	b.n	80014ba <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8001498:	f107 0116 	add.w	r1, r7, #22
 800149c:	f107 0317 	add.w	r3, r7, #23
 80014a0:	2201      	movs	r2, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fcc4 	bl	8001e30 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80014a8:	7f7b      	ldrb	r3, [r7, #29]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	7dba      	ldrb	r2, [r7, #22]
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80014b4:	7f7b      	ldrb	r3, [r7, #29]
 80014b6:	3301      	adds	r3, #1
 80014b8:	777b      	strb	r3, [r7, #29]
 80014ba:	7f7b      	ldrb	r3, [r7, #29]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	8bfa      	ldrh	r2, [r7, #30]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8e9      	bhi.n	8001498 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f000 fe54 	bl	8002170 <HAL_GetTick>
 80014c8:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80014ca:	e007      	b.n	80014dc <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80014cc:	2101      	movs	r1, #1
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f001 fabd 	bl	8002a50 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80014dc:	f000 fe48 	bl	8002170 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ea:	d3ef      	bcc.n	80014cc <HCI_TL_SPI_Receive+0xa0>
 80014ec:	e000      	b.n	80014f0 <HCI_TL_SPI_Receive+0xc4>
      break;
 80014ee:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80014f0:	f7ff ff0e 	bl	8001310 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2102      	movs	r1, #2
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f001 fac0 	bl	8002a80 <HAL_GPIO_WritePin>

  return len;
 8001500:	7f7b      	ldrb	r3, [r7, #29]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	08008ab8 	.word	0x08008ab8

08001510 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800151c:	4a41      	ldr	r2, [pc, #260]	; (8001624 <HCI_TL_SPI_Send+0x114>)
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001526:	6018      	str	r0, [r3, #0]
 8001528:	3304      	adds	r3, #4
 800152a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800152c:	f000 fe20 	bl	8002170 <HAL_GetTick>
 8001530:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001532:	f7ff fef4 	bl	800131e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001536:	f000 fe1b 	bl	8002170 <HAL_GetTick>
 800153a:	61f8      	str	r0, [r7, #28]

    result = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f001 fa9a 	bl	8002a80 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800154c:	e00a      	b.n	8001564 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 800154e:	f000 fe0f 	bl	8002170 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d903      	bls.n	8001564 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 800155c:	f06f 0302 	mvn.w	r3, #2
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001562:	e004      	b.n	800156e <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8001564:	f000 f862 	bl	800162c <IsDataAvailable>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ef      	beq.n	800154e <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	f113 0f03 	cmn.w	r3, #3
 8001574:	d106      	bne.n	8001584 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2102      	movs	r1, #2
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f001 fa7f 	bl	8002a80 <HAL_GPIO_WritePin>
      break;
 8001582:	e031      	b.n	80015e8 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001584:	f107 010c 	add.w	r1, r7, #12
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2205      	movs	r2, #5
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fc4e 	bl	8001e30 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80015a4:	8b7a      	ldrh	r2, [r7, #26]
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d306      	bcc.n	80015ba <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	491d      	ldr	r1, [pc, #116]	; (8001628 <HCI_TL_SPI_Send+0x118>)
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fc3c 	bl	8001e30 <BSP_SPI1_SendRecv>
 80015b8:	e002      	b.n	80015c0 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80015ba:	f06f 0301 	mvn.w	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2102      	movs	r1, #2
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f001 fa5a 	bl	8002a80 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80015cc:	f000 fdd0 	bl	8002170 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d903      	bls.n	80015e2 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 80015da:	f06f 0302 	mvn.w	r3, #2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80015e0:	e002      	b.n	80015e8 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	dba6      	blt.n	8001536 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80015e8:	f000 fdc2 	bl	8002170 <HAL_GetTick>
 80015ec:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80015ee:	e007      	b.n	8001600 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80015f0:	2101      	movs	r1, #1
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f001 fa2b 	bl	8002a50 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001600:	f000 fdb6 	bl	8002170 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160e:	d3ef      	bcc.n	80015f0 <HCI_TL_SPI_Send+0xe0>
 8001610:	e000      	b.n	8001614 <HCI_TL_SPI_Send+0x104>
      break;
 8001612:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001614:	f7ff fe7c 	bl	8001310 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800161a:	4618      	mov	r0, r3
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	08008ac0 	.word	0x08008ac0
 8001628:	20000110 	.word	0x20000110

0800162c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001630:	2101      	movs	r1, #1
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f001 fa0b 	bl	8002a50 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b01      	cmp	r3, #1
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <hci_tl_lowlevel_init+0x54>)
 8001654:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <hci_tl_lowlevel_init+0x58>)
 8001658:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <hci_tl_lowlevel_init+0x5c>)
 800165c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <hci_tl_lowlevel_init+0x60>)
 8001660:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <hci_tl_lowlevel_init+0x64>)
 8001664:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <hci_tl_lowlevel_init+0x68>)
 8001668:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fc37 	bl	8007ee0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001672:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <hci_tl_lowlevel_init+0x6c>)
 8001678:	f000 ff07 	bl	800248a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <hci_tl_lowlevel_init+0x70>)
 800167e:	2100      	movs	r1, #0
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <hci_tl_lowlevel_init+0x6c>)
 8001682:	f000 fee8 	bl	8002456 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2006      	movs	r0, #6
 800168c:	f000 fe9f 	bl	80023ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001690:	2006      	movs	r0, #6
 8001692:	f000 feb8 	bl	8002406 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	0800132d 	.word	0x0800132d
 80016a4:	080013c5 	.word	0x080013c5
 80016a8:	08001511 	.word	0x08001511
 80016ac:	0800142d 	.word	0x0800142d
 80016b0:	080013ef 	.word	0x080013ef
 80016b4:	08001e71 	.word	0x08001e71
 80016b8:	20000108 	.word	0x20000108
 80016bc:	080016c1 	.word	0x080016c1

080016c0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80016c4:	e005      	b.n	80016d2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80016c6:	2000      	movs	r0, #0
 80016c8:	f006 fd6e 	bl	80081a8 <hci_notify_asynch_evt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80016d2:	f7ff ffab 	bl	800162c <IsDataAvailable>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f4      	bne.n	80016c6 <hci_tl_lowlevel_isr+0x6>
 80016dc:	e000      	b.n	80016e0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80016de:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
 
  HAL_Init();
 80016e6:	f000 fcd3 	bl	8002090 <HAL_Init>
  SystemClock_Config();
 80016ea:	f000 f807 	bl	80016fc <SystemClock_Config>

  MX_GPIO_Init();
 80016ee:	f000 f857 	bl	80017a0 <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 80016f2:	f7fe ff11 	bl	8000518 <MX_BlueNRG_2_Init>

  while (1)
  {
    MX_BlueNRG_2_Process();
 80016f6:	f7fe ff27 	bl	8000548 <MX_BlueNRG_2_Process>
 80016fa:	e7fc      	b.n	80016f6 <main+0x14>

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b096      	sub	sp, #88	; 0x58
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2244      	movs	r2, #68	; 0x44
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f007 f8d1 	bl	80088b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800171e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001722:	f001 f9ed 	bl	8002b00 <HAL_PWREx_ControlVoltageScaling>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800172c:	f000 f8ae 	bl	800188c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173a:	2310      	movs	r3, #16
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001742:	2302      	movs	r3, #2
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800174a:	2308      	movs	r3, #8
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800174e:	2307      	movs	r3, #7
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001752:	2302      	movs	r3, #2
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001756:	2302      	movs	r3, #2
 8001758:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fa24 	bl	8002bac <HAL_RCC_OscConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800176a:	f000 f88f 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176e:	230f      	movs	r3, #15
 8001770:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	2303      	movs	r3, #3
 8001774:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	2103      	movs	r1, #3
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fdf8 	bl	800337c <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001792:	f000 f87b 	bl	800188c <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3758      	adds	r7, #88	; 0x58
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_GPIO_Init+0xe8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MX_GPIO_Init+0xe8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <MX_GPIO_Init+0xe8>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_GPIO_Init+0xe8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 7181 	mov.w	r1, #258	; 0x102
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f001 f92e 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001828:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f000 fe6a 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001840:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f000 fe5a 	bl	8002514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2006      	movs	r0, #6
 8001866:	f000 fdb2 	bl	80023ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800186a:	2006      	movs	r0, #6
 800186c:	f000 fdcb 	bl	8002406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2028      	movs	r0, #40	; 0x28
 8001876:	f000 fdaa 	bl	80023ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800187a:	2028      	movs	r0, #40	; 0x28
 800187c:	f000 fdc3 	bl	8002406 <HAL_NVIC_EnableIRQ>

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 fc0c 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <EXTI0_IRQHandler+0x10>)
 800193a:	f000 fdbb 	bl	80024b4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000108 	.word	0x20000108

08001948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <EXTI15_10_IRQHandler+0x10>)
 800194e:	f000 fdb1 	bl	80024b4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000024 	.word	0x20000024

0800195c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <BSP_LED_Init+0x20>)
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08008ac8 	.word	0x08008ac8

08001980 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <BSP_LED_On+0x28>)
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	2120      	movs	r1, #32
 8001994:	2201      	movs	r2, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f872 	bl	8002a80 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000001c 	.word	0x2000001c

080019ac <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <BSP_LED_Off+0x28>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	2120      	movs	r1, #32
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f85c 	bl	8002a80 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000001c 	.word	0x2000001c

080019d8 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <BSP_LED_Toggle+0x28>)
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	2220      	movs	r2, #32
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f85e 	bl	8002ab0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000001c 	.word	0x2000001c

08001a04 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <LED_USER_GPIO_Init+0x78>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f001 f815 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001a56:	2320      	movs	r3, #32
 8001a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f000 fd50 	bl	8002514 <HAL_GPIO_Init>

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000

08001a80 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <BSP_PB_Init+0x94>)
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d132      	bne.n	8001b0a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <BSP_PB_Init+0x98>)
 8001aaa:	441a      	add	r2, r3
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	491b      	ldr	r1, [pc, #108]	; (8001b1c <BSP_PB_Init+0x9c>)
 8001ab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f000 fce7 	bl	800248a <HAL_EXTI_GetHandle>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ac2:	f06f 0303 	mvn.w	r3, #3
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e01f      	b.n	8001b0a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <BSP_PB_Init+0x98>)
 8001ad0:	1898      	adds	r0, r3, r2
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <BSP_PB_Init+0xa0>)
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2100      	movs	r1, #0
 8001ade:	f000 fcba 	bl	8002456 <HAL_EXTI_RegisterCallback>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ae8:	f06f 0303 	mvn.w	r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e00c      	b.n	8001b0a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001af0:	2028      	movs	r0, #40	; 0x28
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <BSP_PB_Init+0xa4>)
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	f000 fc66 	bl	80023ce <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001b02:	2328      	movs	r3, #40	; 0x28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fc7e 	bl	8002406 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08008acc 	.word	0x08008acc
 8001b18:	20000024 	.word	0x20000024
 8001b1c:	08008ad0 	.word	0x08008ad0
 8001b20:	08008ad4 	.word	0x08008ad4
 8001b24:	08008ad8 	.word	0x08008ad8

08001b28 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <BSP_PB_GetState+0x34>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 ff85 	bl	8002a50 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000020 	.word	0x20000020

08001b60 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fff0 	bl	8001b60 <BSP_PB_Callback>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <BUTTON_USER_GPIO_Init+0x6c>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <BUTTON_USER_GPIO_Init+0x70>)
 8001be2:	f000 fc97 	bl	8002514 <HAL_GPIO_Init>

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d903      	bls.n	8001c14 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c0c:	f06f 0301 	mvn.w	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e025      	b.n	8001c60 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	4914      	ldr	r1, [pc, #80]	; (8001c6c <BSP_COM_Init+0x74>)
 8001c1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001c1e:	4814      	ldr	r0, [pc, #80]	; (8001c70 <BSP_COM_Init+0x78>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	015b      	lsls	r3, r3, #5
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4403      	add	r3, r0
 8001c2a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <BSP_COM_Init+0x78>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f86a 	bl	8001d14 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	4613      	mov	r3, r2
 8001c44:	015b      	lsls	r3, r3, #5
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <BSP_COM_Init+0x78>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f810 	bl	8001c74 <MX_USART2_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c5a:	f06f 0303 	mvn.w	r3, #3
 8001c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000002c 	.word	0x2000002c
 8001c70:	20000210 	.word	0x20000210

08001c74 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <MX_USART2_UART_Init+0x64>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f002 fe50 	bl	8004964 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40004400 	.word	0x40004400

08001cdc <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <__io_putchar+0x30>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <__io_putchar+0x34>)
 8001cf4:	1898      	adds	r0, r3, r2
 8001cf6:	1d39      	adds	r1, r7, #4
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f002 fe89 	bl	8004a14 <HAL_UART_Transmit>
  return ch;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000294 	.word	0x20000294
 8001d10:	20000210 	.word	0x20000210

08001d14 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0ac      	sub	sp, #176	; 0xb0
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2288      	movs	r2, #136	; 0x88
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 fdc4 	bl	80088b2 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fd26 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d46:	6593      	str	r3, [r2, #88]	; 0x58
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <USART2_MspInit+0xb8>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001d84:	2307      	movs	r3, #7
 8001d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f000 fbbe 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f000 fba8 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	37b0      	adds	r7, #176	; 0xb0
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <BSP_SPI1_Init+0x54>)
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <BSP_SPI1_Init+0x58>)
 8001dde:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <BSP_SPI1_Init+0x5c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <BSP_SPI1_Init+0x5c>)
 8001de8:	600a      	str	r2, [r1, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d114      	bne.n	8001e18 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <BSP_SPI1_Init+0x54>)
 8001df0:	f002 fc46 	bl	8004680 <HAL_SPI_GetState>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001dfa:	480a      	ldr	r0, [pc, #40]	; (8001e24 <BSP_SPI1_Init+0x54>)
 8001dfc:	f000 f882 	bl	8001f04 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <BSP_SPI1_Init+0x54>)
 8001e08:	f000 f83a 	bl	8001e80 <MX_SPI1_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001e12:	f06f 0307 	mvn.w	r3, #7
 8001e16:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000298 	.word	0x20000298
 8001e28:	40013000 	.word	0x40013000
 8001e2c:	200002fc 	.word	0x200002fc

08001e30 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e48:	9200      	str	r2, [sp, #0]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <BSP_SPI1_SendRecv+0x3c>)
 8001e50:	f002 fa03 	bl	800425a <HAL_SPI_TransmitReceive>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001e5a:	f06f 0305 	mvn.w	r3, #5
 8001e5e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001e60:	697b      	ldr	r3, [r7, #20]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000298 	.word	0x20000298

08001e70 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001e74:	f000 f97c 	bl	8002170 <HAL_GetTick>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <MX_SPI1_Init+0x80>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e98:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ea6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eba:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2228      	movs	r2, #40	; 0x28
 8001ec0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f002 f90a 	bl	8004100 <HAL_SPI_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013000 	.word	0x40013000

08001f04 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f16:	6613      	str	r3, [r2, #96]	; 0x60
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <SPI1_MspInit+0xbc>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001f64:	2305      	movs	r3, #5
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f000 facf 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001f86:	2305      	movs	r3, #5
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f94:	f000 fabe 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001fa8:	2305      	movs	r3, #5
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <SPI1_MspInit+0xc0>)
 8001fb4:	f000 faae 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e00a      	b.n	8001ff0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fda:	f3af 8000 	nop.w
 8001fde:	4601      	mov	r1, r0
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf0      	blt.n	8001fda <_read+0x12>
	}

return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e009      	b.n	8002028 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe5d 	bl	8001cdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbf1      	blt.n	8002014 <_write+0x12>
	}
	return len;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_close>:

int _close(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
	return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_Init+0x3c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <HAL_Init+0x3c>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a6:	2003      	movs	r0, #3
 80020a8:	f000 f986 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f80f 	bl	80020d0 <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	e001      	b.n	80020c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020be:	f7ff fbeb 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40022000 	.word	0x40022000

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_InitTick+0x6c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_InitTick+0x70>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_InitTick+0x6c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f99f 	bl	800243e <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d809      	bhi.n	8002120 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 f95b 	bl	80023ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_InitTick+0x74>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e007      	b.n	8002130 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e004      	b.n	8002130 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e001      	b.n	8002130 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000038 	.word	0x20000038
 8002140:	20000030 	.word	0x20000030
 8002144:	20000034 	.word	0x20000034

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000038 	.word	0x20000038
 800216c:	20000300 	.word	0x20000300

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000300 	.word	0x20000300

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000038 	.word	0x20000038

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db12      	blt.n	80022a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	490a      	ldr	r1, [pc, #40]	; (80022b4 <__NVIC_DisableIRQ+0x44>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	3320      	adds	r3, #32
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800229c:	f3bf 8f4f 	dsb	sy
}
 80022a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a2:	f3bf 8f6f 	isb	sy
}
 80022a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff05 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff1a 	bl	8002218 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff0d 	bl	8002234 <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff1d 	bl	8002270 <__NVIC_DisableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff94 	bl	8002374 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002456:	b480      	push	{r7}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	460b      	mov	r3, r1
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	605a      	str	r2, [r3, #4]
      break;
 8002474:	e002      	b.n	800247c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
      break;
 800247a:	bf00      	nop
  }

  return status;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e003      	b.n	80024a6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2201      	movs	r2, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_EXTI_IRQHandler+0x5c>)
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4798      	blx	r3
    }
  }
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40010414 	.word	0x40010414

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	e17f      	b.n	8002824 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8171 	beq.w	800281e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d005      	beq.n	8002554 <HAL_GPIO_Init+0x40>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d130      	bne.n	80025b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258a:	2201      	movs	r2, #1
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 0201 	and.w	r2, r3, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d118      	bne.n	80025f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	6939      	ldr	r1, [r7, #16]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80ac 	beq.w	800281e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_GPIO_Init+0x330>)
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	4a5e      	ldr	r2, [pc, #376]	; (8002844 <HAL_GPIO_Init+0x330>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6613      	str	r3, [r2, #96]	; 0x60
 80026d2:	4b5c      	ldr	r3, [pc, #368]	; (8002844 <HAL_GPIO_Init+0x330>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026de:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <HAL_GPIO_Init+0x334>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002708:	d025      	beq.n	8002756 <HAL_GPIO_Init+0x242>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_GPIO_Init+0x338>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01f      	beq.n	8002752 <HAL_GPIO_Init+0x23e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_GPIO_Init+0x33c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d019      	beq.n	800274e <HAL_GPIO_Init+0x23a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x340>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_GPIO_Init+0x236>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x344>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00d      	beq.n	8002746 <HAL_GPIO_Init+0x232>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_GPIO_Init+0x348>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <HAL_GPIO_Init+0x22e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_GPIO_Init+0x34c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_GPIO_Init+0x22a>
 800273a:	2306      	movs	r3, #6
 800273c:	e00c      	b.n	8002758 <HAL_GPIO_Init+0x244>
 800273e:	2307      	movs	r3, #7
 8002740:	e00a      	b.n	8002758 <HAL_GPIO_Init+0x244>
 8002742:	2305      	movs	r3, #5
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x244>
 8002746:	2304      	movs	r3, #4
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x244>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x244>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x244>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x244>
 8002756:	2300      	movs	r3, #0
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	f002 0203 	and.w	r2, r2, #3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_GPIO_Init+0x334>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002776:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_GPIO_Init+0x350>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800279a:	4a32      	ldr	r2, [pc, #200]	; (8002864 <HAL_GPIO_Init+0x350>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_GPIO_Init+0x350>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f47f ae78 	bne.w	8002524 <HAL_GPIO_Init+0x10>
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	40010000 	.word	0x40010000
 800284c:	48000400 	.word	0x48000400
 8002850:	48000800 	.word	0x48000800
 8002854:	48000c00 	.word	0x48000c00
 8002858:	48001000 	.word	0x48001000
 800285c:	48001400 	.word	0x48001400
 8002860:	48001800 	.word	0x48001800
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002876:	e0cd      	b.n	8002a14 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002878:	2201      	movs	r2, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80c0 	beq.w	8002a0e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800288e:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_GPIO_DeInit+0x1c8>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028b6:	d025      	beq.n	8002904 <HAL_GPIO_DeInit+0x9c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a5e      	ldr	r2, [pc, #376]	; (8002a34 <HAL_GPIO_DeInit+0x1cc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d01f      	beq.n	8002900 <HAL_GPIO_DeInit+0x98>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <HAL_GPIO_DeInit+0x1d0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d019      	beq.n	80028fc <HAL_GPIO_DeInit+0x94>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a5c      	ldr	r2, [pc, #368]	; (8002a3c <HAL_GPIO_DeInit+0x1d4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_DeInit+0x90>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_GPIO_DeInit+0x1d8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_DeInit+0x8c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_GPIO_DeInit+0x1dc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_DeInit+0x88>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a59      	ldr	r2, [pc, #356]	; (8002a48 <HAL_GPIO_DeInit+0x1e0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_DeInit+0x84>
 80028e8:	2306      	movs	r3, #6
 80028ea:	e00c      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 80028ec:	2307      	movs	r3, #7
 80028ee:	e00a      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 80028f0:	2305      	movs	r3, #5
 80028f2:	e008      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 80028f4:	2304      	movs	r3, #4
 80028f6:	e006      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 80028f8:	2303      	movs	r3, #3
 80028fa:	e004      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e002      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_GPIO_DeInit+0x9e>
 8002904:	2300      	movs	r3, #0
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d132      	bne.n	800297c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	494b      	ldr	r1, [pc, #300]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 8002920:	4013      	ands	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	4947      	ldr	r1, [pc, #284]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 800292e:	4013      	ands	r3, r2
 8002930:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	4944      	ldr	r1, [pc, #272]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 800293c:	4013      	ands	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	4940      	ldr	r1, [pc, #256]	; (8002a4c <HAL_GPIO_DeInit+0x1e4>)
 800294a:	4013      	ands	r3, r2
 800294c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_GPIO_DeInit+0x1c8>)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43da      	mvns	r2, r3
 800296e:	4830      	ldr	r0, [pc, #192]	; (8002a30 <HAL_GPIO_DeInit+0x1c8>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	400a      	ands	r2, r1
 8002976:	3302      	adds	r3, #2
 8002978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2103      	movs	r1, #3
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	08d2      	lsrs	r2, r2, #3
 80029b0:	4019      	ands	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2103      	movs	r1, #3
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2101      	movs	r1, #1
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2103      	movs	r1, #3
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	2101      	movs	r1, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f af2b 	bne.w	8002878 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40010000 	.word	0x40010000
 8002a34:	48000400 	.word	0x48000400
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48000c00 	.word	0x48000c00
 8002a40:	48001000 	.word	0x48001000
 8002a44:	48001400 	.word	0x48001400
 8002a48:	48001800 	.word	0x48001800
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43d9      	mvns	r1, r3
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40007000 	.word	0x40007000

08002b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0e:	d130      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d038      	beq.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2232      	movs	r2, #50	; 0x32
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	3301      	adds	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b44:	e002      	b.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d102      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f2      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d110      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d007      	beq.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b88:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	20000030 	.word	0x20000030
 8002ba8:	431bde83 	.word	0x431bde83

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e3d8      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b97      	ldr	r3, [pc, #604]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc8:	4b94      	ldr	r3, [pc, #592]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80e4 	beq.w	8002da8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4a>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	f040 808b 	bne.w	8002d04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 8087 	bne.w	8002d04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf6:	4b89      	ldr	r3, [pc, #548]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x62>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e3b0      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	4b82      	ldr	r3, [pc, #520]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_RCC_OscConfig+0x7c>
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c26:	e005      	b.n	8002c34 <HAL_RCC_OscConfig+0x88>
 8002c28:	4b7c      	ldr	r3, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d223      	bcs.n	8002c80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fd43 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e391      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c4c:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	496d      	ldr	r1, [pc, #436]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6a:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	4968      	ldr	r1, [pc, #416]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
 8002c7e:	e025      	b.n	8002ccc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4960      	ldr	r1, [pc, #384]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	495b      	ldr	r1, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fd03 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e351      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ccc:	f000 fc38 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	4950      	ldr	r1, [pc, #320]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002cea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f9ed 	bl	80020d0 <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d052      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	e335      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d032      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a42      	ldr	r2, [pc, #264]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fa2a 	bl	8002170 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d20:	f7ff fa26 	bl	8002170 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e31e      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d32:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4931      	ldr	r1, [pc, #196]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	492c      	ldr	r1, [pc, #176]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e01a      	b.n	8002da8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff f9f7 	bl	8002170 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d86:	f7ff f9f3 	bl	8002170 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e2eb      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1da>
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d074      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x21a>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d10e      	bne.n	8002dde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d10b      	bne.n	8002dde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d064      	beq.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d160      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e2c8      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x24a>
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e026      	b.n	8002e44 <HAL_RCC_OscConfig+0x298>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfe:	d115      	bne.n	8002e2c <HAL_RCC_OscConfig+0x280>
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a02      	ldr	r2, [pc, #8]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x298>
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	08008adc 	.word	0x08008adc
 8002e24:	20000030 	.word	0x20000030
 8002e28:	20000034 	.word	0x20000034
 8002e2c:	4ba0      	ldr	r3, [pc, #640]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a9f      	ldr	r2, [pc, #636]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b9d      	ldr	r3, [pc, #628]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a9c      	ldr	r2, [pc, #624]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f990 	bl	8002170 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f98c 	bl	8002170 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e284      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2a8>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f97c 	bl	8002170 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f978 	bl	8002170 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e270      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2d0>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d060      	beq.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x310>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d116      	bne.n	8002eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x328>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e24d      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	4973      	ldr	r1, [pc, #460]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee8:	e040      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d023      	beq.n	8002f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7ff f937 	bl	8002170 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f06:	f7ff f933 	bl	8002170 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e22b      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f18:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	495f      	ldr	r1, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	e018      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5c      	ldr	r2, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7ff f913 	bl	8002170 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7ff f90f 	bl	8002170 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e207      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f86:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7ff f8ee 	bl	8002170 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7ff f8ea 	bl	8002170 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1e2      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3ec>
 8002fb8:	e01b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc0:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7ff f8d1 	bl	8002170 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7ff f8cd 	bl	8002170 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1c5      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80a6 	beq.w	800314c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d118      	bne.n	800306a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003044:	f7ff f894 	bl	8002170 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7ff f890 	bl	8002170 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e188      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_RCC_OscConfig+0x4d8>
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003082:	e029      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d115      	bne.n	80030b8 <HAL_RCC_OscConfig+0x50c>
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	4b91      	ldr	r3, [pc, #580]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	4a90      	ldr	r2, [pc, #576]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c8:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a8c      	ldr	r2, [pc, #560]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d016      	beq.n	800310e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7ff f846 	bl	8002170 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7ff f842 	bl	8002170 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e138      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fe:	4b80      	ldr	r3, [pc, #512]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ed      	beq.n	80030e8 <HAL_RCC_OscConfig+0x53c>
 800310c:	e015      	b.n	800313a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7ff f82f 	bl	8002170 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7ff f82b 	bl	8002170 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e121      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800312c:	4b74      	ldr	r3, [pc, #464]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ed      	bne.n	8003116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 810c 	beq.w	800336e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	2b02      	cmp	r3, #2
 800315c:	f040 80d4 	bne.w	8003308 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003160:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	429a      	cmp	r2, r3
 8003172:	d130      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	3b01      	subs	r3, #1
 8003180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d127      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11f      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a0:	2a07      	cmp	r2, #7
 80031a2:	bf14      	ite	ne
 80031a4:	2201      	movne	r2, #1
 80031a6:	2200      	moveq	r2, #0
 80031a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d113      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	3b01      	subs	r3, #1
 80031bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d06e      	beq.n	80032b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d069      	beq.n	80032b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031dc:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031e8:	4b45      	ldr	r3, [pc, #276]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0bb      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003204:	f7fe ffb4 	bl	8002170 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe ffb0 	bl	8002170 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0a8      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322a:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	4b35      	ldr	r3, [pc, #212]	; (8003304 <HAL_RCC_OscConfig+0x758>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800323a:	3a01      	subs	r2, #1
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003244:	0212      	lsls	r2, r2, #8
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800324c:	0852      	lsrs	r2, r2, #1
 800324e:	3a01      	subs	r2, #1
 8003250:	0552      	lsls	r2, r2, #21
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003258:	0852      	lsrs	r2, r2, #1
 800325a:	3a01      	subs	r2, #1
 800325c:	0652      	lsls	r2, r2, #25
 800325e:	4311      	orrs	r1, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003264:	0912      	lsrs	r2, r2, #4
 8003266:	0452      	lsls	r2, r2, #17
 8003268:	430a      	orrs	r2, r1
 800326a:	4925      	ldr	r1, [pc, #148]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 800326c:	4313      	orrs	r3, r2
 800326e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 8003282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003286:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003288:	f7fe ff72 	bl	8002170 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe ff6e 	bl	8002170 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e066      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ae:	e05e      	b.n	800336e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e05d      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d156      	bne.n	800336e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032d8:	f7fe ff4a 	bl	8002170 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe ff46 	bl	8002170 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03e      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f2:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x754>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x734>
 80032fe:	e036      	b.n	800336e <HAL_RCC_OscConfig+0x7c2>
 8003300:	40021000 	.word	0x40021000
 8003304:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d02d      	beq.n	800336a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 8003314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003318:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 800332c:	f023 0303 	bic.w	r3, r3, #3
 8003330:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 8003338:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe ff15 	bl	8002170 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe ff11 	bl	8002170 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e009      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x7cc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x79e>
 8003368:	e001      	b.n	800336e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0c8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	4961      	ldr	r1, [pc, #388]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b5f      	ldr	r3, [pc, #380]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b0      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d04c      	beq.n	8003466 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d121      	bne.n	8003424 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e09e      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e092      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003404:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e086      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003414:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e07e      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 0203 	bic.w	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	493f      	ldr	r1, [pc, #252]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003436:	f7fe fe9b 	bl	8002170 <HAL_GetTick>
 800343a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343c:	e00a      	b.n	8003454 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343e:	f7fe fe97 	bl	8002170 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e066      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003454:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 020c 	and.w	r2, r3, #12
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	429a      	cmp	r2, r3
 8003464:	d1eb      	bne.n	800343e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003472:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	492c      	ldr	r1, [pc, #176]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d210      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4924      	ldr	r1, [pc, #144]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1b0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e036      	b.n	8003522 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4918      	ldr	r1, [pc, #96]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4910      	ldr	r1, [pc, #64]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f2:	f000 f825 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCC_ClockConfig+0x1b4>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490c      	ldr	r1, [pc, #48]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fdda 	bl	80020d0 <HAL_InitTick>
 800351c:	4603      	mov	r3, r0
 800351e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003520:	7afb      	ldrb	r3, [r7, #11]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40022000 	.word	0x40022000
 8003530:	40021000 	.word	0x40021000
 8003534:	08008adc 	.word	0x08008adc
 8003538:	20000030 	.word	0x20000030
 800353c:	20000034 	.word	0x20000034

08003540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x34>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d121      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d11e      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003574:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003580:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e005      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_RCC_GetSysClockFreq+0x10c>)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d102      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e004      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <HAL_RCC_GetSysClockFreq+0x114>)
 80035c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d134      	bne.n	8003638 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0xac>
 80035e4:	e005      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_RCC_GetSysClockFreq+0x110>)
 80035e8:	617b      	str	r3, [r7, #20]
      break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ee:	617b      	str	r3, [r7, #20]
      break;
 80035f0:	e002      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	617b      	str	r3, [r7, #20]
      break;
 80035f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	3301      	adds	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	fb03 f202 	mul.w	r2, r3, r2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_GetSysClockFreq+0x108>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	0e5b      	lsrs	r3, r3, #25
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	3301      	adds	r3, #1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003638:	69bb      	ldr	r3, [r7, #24]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	08008af4 	.word	0x08008af4
 8003650:	00f42400 	.word	0x00f42400
 8003654:	007a1200 	.word	0x007a1200

08003658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000030 	.word	0x20000030

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4904      	ldr	r1, [pc, #16]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	08008aec 	.word	0x08008aec

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036a0:	f7ff ffda 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0adb      	lsrs	r3, r3, #11
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08008aec 	.word	0x08008aec

080036c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036e0:	f7ff fa00 	bl	8002ae4 <HAL_PWREx_GetVoltageRange>
 80036e4:	6178      	str	r0, [r7, #20]
 80036e6:	e014      	b.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	4a24      	ldr	r2, [pc, #144]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003700:	f7ff f9f0 	bl	8002ae4 <HAL_PWREx_GetVoltageRange>
 8003704:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003710:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d10b      	bne.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d919      	bls.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2ba0      	cmp	r3, #160	; 0xa0
 8003724:	d902      	bls.n	800372c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003726:	2302      	movs	r3, #2
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	e013      	b.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800372c:	2301      	movs	r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e010      	b.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d902      	bls.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003738:	2303      	movs	r3, #3
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e00a      	b.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d102      	bne.n	800374a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003744:	2302      	movs	r3, #2
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e004      	b.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b70      	cmp	r3, #112	; 0x70
 800374e:	d101      	bne.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 0207 	bic.w	r2, r3, #7
 800375c:	4909      	ldr	r1, [pc, #36]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	40022000 	.word	0x40022000

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003790:	2300      	movs	r3, #0
 8003792:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003794:	2300      	movs	r3, #0
 8003796:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d041      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ac:	d02a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b2:	d824      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037be:	d81e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c8:	d010      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ca:	e018      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037cc:	4b86      	ldr	r3, [pc, #536]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a85      	ldr	r2, [pc, #532]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037d8:	e015      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fabb 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ea:	e00c      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3320      	adds	r3, #32
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fba6 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	74fb      	strb	r3, [r7, #19]
      break;
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800380c:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381a:	4973      	ldr	r1, [pc, #460]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d041      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383c:	d02a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800383e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003842:	d824      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003848:	d008      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800384a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384e:	d81e      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d010      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800385a:	e018      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800385c:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a61      	ldr	r2, [pc, #388]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003868:	e015      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fa73 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800387a:	e00c      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3320      	adds	r3, #32
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb5e 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800388c:	e003      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	74fb      	strb	r3, [r7, #19]
      break;
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800389c:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038aa:	494f      	ldr	r1, [pc, #316]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a0 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	4a40      	ldr	r2, [pc, #256]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6593      	str	r3, [r2, #88]	; 0x58
 80038ec:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003908:	f7fe fc32 	bl	8002170 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fe fc2e 	bl	8002170 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d902      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	74fb      	strb	r3, [r7, #19]
        break;
 8003922:	e005      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d15c      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003940:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01f      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	d019      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe fbed 	bl	8002170 <HAL_GetTick>
 8003996:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	e00b      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fe fbe9 	bl	8002170 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d902      	bls.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	74fb      	strb	r3, [r7, #19]
            break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ec      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039de:	e009      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f4:	7c7b      	ldrb	r3, [r7, #17]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b9e      	ldr	r3, [pc, #632]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	4a9d      	ldr	r2, [pc, #628]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a12:	4b98      	ldr	r3, [pc, #608]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f023 0203 	bic.w	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	4994      	ldr	r1, [pc, #592]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a34:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f023 020c 	bic.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	498c      	ldr	r1, [pc, #560]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a56:	4b87      	ldr	r3, [pc, #540]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	4983      	ldr	r1, [pc, #524]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a78:	4b7e      	ldr	r3, [pc, #504]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	497b      	ldr	r1, [pc, #492]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a9a:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	4972      	ldr	r1, [pc, #456]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003abc:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	496a      	ldr	r1, [pc, #424]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ade:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	4961      	ldr	r1, [pc, #388]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b00:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	4959      	ldr	r1, [pc, #356]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	4950      	ldr	r1, [pc, #320]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	4948      	ldr	r1, [pc, #288]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b66:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	493f      	ldr	r1, [pc, #252]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d028      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b88:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b96:	4937      	ldr	r1, [pc, #220]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	e011      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f8c8 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d028      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	491f      	ldr	r1, [pc, #124]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c10:	60d3      	str	r3, [r2, #12]
 8003c12:	e011      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f899 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d109      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a02      	ldr	r2, [pc, #8]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
 8003c70:	e014      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2101      	movs	r1, #1
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f867 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	4928      	ldr	r1, [pc, #160]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f844 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d014      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	74bb      	strb	r3, [r7, #18]
 8003ce2:	e011      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3320      	adds	r3, #32
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f925 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d22:	490d      	ldr	r1, [pc, #52]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d46:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000

08003d5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6a:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10d      	bne.n	8003da2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d8e:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d047      	beq.n	8003e32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
 8003da6:	e044      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d018      	beq.n	8003de2 <RCCEx_PLLSAI1_Config+0x86>
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d825      	bhi.n	8003e00 <RCCEx_PLLSAI1_Config+0xa4>
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <RCCEx_PLLSAI1_Config+0x62>
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d009      	beq.n	8003dd0 <RCCEx_PLLSAI1_Config+0x74>
 8003dbc:	e020      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dbe:	4b60      	ldr	r3, [pc, #384]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11d      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dce:	e01a      	b.n	8003e06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd0:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d116      	bne.n	8003e0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de0:	e013      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dfe:	e006      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e004      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	4944      	ldr	r1, [pc, #272]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d17d      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e38:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fe f994 	bl	8002170 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e4a:	e009      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e4c:	f7fe f990 	bl	8002170 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d902      	bls.n	8003e60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e5e:	e005      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e60:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ef      	bne.n	8003e4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d160      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	0912      	lsrs	r2, r2, #4
 8003e90:	0452      	lsls	r2, r2, #17
 8003e92:	430a      	orrs	r2, r1
 8003e94:	492a      	ldr	r1, [pc, #168]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	610b      	str	r3, [r1, #16]
 8003e9a:	e027      	b.n	8003eec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d112      	bne.n	8003ec8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea2:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	0211      	lsls	r1, r2, #8
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6912      	ldr	r2, [r2, #16]
 8003eb8:	0852      	lsrs	r2, r2, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0552      	lsls	r2, r2, #21
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	491f      	ldr	r1, [pc, #124]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
 8003ec6:	e011      	b.n	8003eec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6892      	ldr	r2, [r2, #8]
 8003ed8:	0211      	lsls	r1, r2, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6952      	ldr	r2, [r2, #20]
 8003ede:	0852      	lsrs	r2, r2, #1
 8003ee0:	3a01      	subs	r2, #1
 8003ee2:	0652      	lsls	r2, r2, #25
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	4916      	ldr	r1, [pc, #88]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f93a 	bl	8002170 <HAL_GetTick>
 8003efc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003efe:	e009      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f00:	f7fe f936 	bl	8002170 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d902      	bls.n	8003f14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	73fb      	strb	r3, [r7, #15]
          break;
 8003f12:	e005      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ef      	beq.n	8003f00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	4904      	ldr	r1, [pc, #16]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000

08003f44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
       ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f76:	4b61      	ldr	r3, [pc, #388]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
       ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d047      	beq.n	800401a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e044      	b.n	800401a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d018      	beq.n	8003fca <RCCEx_PLLSAI2_Config+0x86>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d825      	bhi.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa4>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d002      	beq.n	8003fa6 <RCCEx_PLLSAI2_Config+0x62>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d009      	beq.n	8003fb8 <RCCEx_PLLSAI2_Config+0x74>
 8003fa4:	e020      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa6:	4b55      	ldr	r3, [pc, #340]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e01a      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb8:	4b50      	ldr	r3, [pc, #320]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e013      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fca:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd6:	4b49      	ldr	r3, [pc, #292]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe6:	e006      	b.n	8003ff6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e004      	b.n	8003ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	430b      	orrs	r3, r1
 8004014:	4939      	ldr	r1, [pc, #228]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d167      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004020:	4b36      	ldr	r3, [pc, #216]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a35      	ldr	r2, [pc, #212]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fe f8a0 	bl	8002170 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004034:	f7fe f89c 	bl	8002170 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
        break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ef      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d14a      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	0912      	lsrs	r2, r2, #4
 8004078:	0452      	lsls	r2, r2, #17
 800407a:	430a      	orrs	r2, r1
 800407c:	491f      	ldr	r1, [pc, #124]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	614b      	str	r3, [r1, #20]
 8004082:	e011      	b.n	80040a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800408c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6892      	ldr	r2, [r2, #8]
 8004094:	0211      	lsls	r1, r2, #8
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6912      	ldr	r2, [r2, #16]
 800409a:	0852      	lsrs	r2, r2, #1
 800409c:	3a01      	subs	r2, #1
 800409e:	0652      	lsls	r2, r2, #25
 80040a0:	430a      	orrs	r2, r1
 80040a2:	4916      	ldr	r1, [pc, #88]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fe f85c 	bl	8002170 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ba:	e009      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040bc:	f7fe f858 	bl	8002170 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d902      	bls.n	80040d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	73fb      	strb	r3, [r7, #15]
          break;
 80040ce:	e005      	b.n	80040dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ef      	beq.n	80040bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4904      	ldr	r1, [pc, #16]	; (80040fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000

08004100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e095      	b.n	800423e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004122:	d009      	beq.n	8004138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
 800412a:	e005      	b.n	8004138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f877 	bl	8004246 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004178:	d902      	bls.n	8004180 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e002      	b.n	8004186 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004184:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800418e:	d007      	beq.n	80041a0 <HAL_SPI_Init+0xa0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	ea42 0103 	orr.w	r1, r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f003 0204 	and.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08a      	sub	sp, #40	; 0x28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004268:	2301      	movs	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x26>
 800427c:	2302      	movs	r3, #2
 800427e:	e1fb      	b.n	8004678 <HAL_SPI_TransmitReceive+0x41e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004288:	f7fd ff72 	bl	8002170 <HAL_GetTick>
 800428c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004294:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d00e      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x6e>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b0:	d106      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x66>
 80042ba:	7efb      	ldrb	r3, [r7, #27]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d003      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042c6:	e1cd      	b.n	8004664 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_SPI_TransmitReceive+0x80>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_TransmitReceive+0x80>
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042e0:	e1c0      	b.n	8004664 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d003      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2205      	movs	r2, #5
 80042f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	887a      	ldrh	r2, [r7, #2]
 8004306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004338:	d802      	bhi.n	8004340 <HAL_SPI_TransmitReceive+0xe6>
 800433a:	8a3b      	ldrh	r3, [r7, #16]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d908      	bls.n	8004352 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	e007      	b.n	8004362 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d007      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004388:	d97c      	bls.n	8004484 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x13e>
 8004392:	8a7b      	ldrh	r3, [r7, #18]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d169      	bne.n	800446c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043bc:	e056      	b.n	800446c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d11b      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x1aa>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x1aa>
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d113      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d11c      	bne.n	800444c <HAL_SPI_TransmitReceive+0x1f2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	b292      	uxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004448:	2301      	movs	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800444c:	f7fd fe90 	bl	8002170 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	429a      	cmp	r2, r3
 800445a:	d807      	bhi.n	800446c <HAL_SPI_TransmitReceive+0x212>
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800446a:	e0fb      	b.n	8004664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1a3      	bne.n	80043be <HAL_SPI_TransmitReceive+0x164>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d19d      	bne.n	80043be <HAL_SPI_TransmitReceive+0x164>
 8004482:	e0df      	b.n	8004644 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x23a>
 800448c:	8a7b      	ldrh	r3, [r7, #18]
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 80cb 	bne.w	800462a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d912      	bls.n	80044c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	1c9a      	adds	r2, r3, #2
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b02      	subs	r3, #2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044c2:	e0b2      	b.n	800462a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ea:	e09e      	b.n	800462a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d134      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x30a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02f      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x30a>
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	2b01      	cmp	r3, #1
 8004508:	d12c      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d912      	bls.n	800453a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b02      	subs	r3, #2
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004538:	e012      	b.n	8004560 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d148      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x3aa>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d042      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d923      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	b292      	uxth	r2, r2
 8004596:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b02      	subs	r3, #2
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d81f      	bhi.n	8004600 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e016      	b.n	8004600 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f103 020c 	add.w	r2, r3, #12
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004600:	2301      	movs	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004604:	f7fd fdb4 	bl	8002170 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004610:	429a      	cmp	r2, r3
 8004612:	d803      	bhi.n	800461c <HAL_SPI_TransmitReceive+0x3c2>
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d102      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x3c8>
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004628:	e01c      	b.n	8004664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af5b 	bne.w	80044ec <HAL_SPI_TransmitReceive+0x292>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	f47f af54 	bne.w	80044ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f945 	bl	80048d8 <SPI_EndRxTxTransaction>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
 8004660:	e000      	b.n	8004664 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004678:	4618      	mov	r0, r3
 800467a:	3728      	adds	r7, #40	; 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800468e:	b2db      	uxtb	r3, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ac:	f7fd fd60 	bl	8002170 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046bc:	f7fd fd58 	bl	8002170 <HAL_GetTick>
 80046c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	015b      	lsls	r3, r3, #5
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d2:	e054      	b.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d050      	beq.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046dc:	f7fd fd48 	bl	8002170 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d902      	bls.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13d      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d111      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004714:	d004      	beq.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471e:	d107      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d10f      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e017      	b.n	800479e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3b01      	subs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d19b      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000030 	.word	0x20000030

080047ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047be:	f7fd fcd7 	bl	8002170 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80047ce:	f7fd fccf 	bl	8002170 <HAL_GetTick>
 80047d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047dc:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	00da      	lsls	r2, r3, #3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	0d1b      	lsrs	r3, r3, #20
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047f4:	e060      	b.n	80048b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047fc:	d107      	bne.n	800480e <SPI_WaitFifoStateUntilTimeout+0x62>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800480c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d050      	beq.n	80048b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004816:	f7fd fcab 	bl	8002170 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	429a      	cmp	r2, r3
 8004824:	d902      	bls.n	800482c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d13d      	bne.n	80048a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800483a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004844:	d111      	bne.n	800486a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d004      	beq.n	800485a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d107      	bne.n	800486a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004868:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004872:	d10f      	bne.n	8004894 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004892:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e010      	b.n	80048ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d196      	bne.n	80047f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000030 	.word	0x20000030

080048d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff ff5b 	bl	80047ac <SPI_WaitFifoStateUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e027      	b.n	800495c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fec0 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e014      	b.n	800495c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff34 	bl	80047ac <SPI_WaitFifoStateUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e000      	b.n	800495c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e040      	b.n	80049f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f83a 	bl	8004a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8ca 	bl	8004b3c <UART_SetConfig>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e022      	b.n	80049f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb76 	bl	80050ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fbfd 	bl	80051f0 <UART_CheckIdleState>
 80049f6:	4603      	mov	r3, r0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	f040 8082 	bne.w	8004b32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_UART_Transmit+0x26>
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07a      	b.n	8004b34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit+0x38>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e073      	b.n	8004b34 <HAL_UART_Transmit+0x120>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2221      	movs	r2, #33	; 0x21
 8004a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a62:	f7fd fb85 	bl	8002170 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d108      	bne.n	8004a94 <HAL_UART_Transmit+0x80>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e003      	b.n	8004a9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004aa4:	e02d      	b.n	8004b02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fbe6 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e039      	b.n	8004b34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e008      	b.n	8004af0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1cb      	bne.n	8004aa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2140      	movs	r1, #64	; 0x40
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fbb2 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e005      	b.n	8004b34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b08a      	sub	sp, #40	; 0x28
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4ba4      	ldr	r3, [pc, #656]	; (8004dfc <UART_SetConfig+0x2c0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a99      	ldr	r2, [pc, #612]	; (8004e00 <UART_SetConfig+0x2c4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a90      	ldr	r2, [pc, #576]	; (8004e04 <UART_SetConfig+0x2c8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d126      	bne.n	8004c14 <UART_SetConfig+0xd8>
 8004bc6:	4b90      	ldr	r3, [pc, #576]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d81b      	bhi.n	8004c0c <UART_SetConfig+0xd0>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0xa0>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e116      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e112      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e10e      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e10a      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e106      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a7c      	ldr	r2, [pc, #496]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d138      	bne.n	8004c90 <UART_SetConfig+0x154>
 8004c1e:	4b7a      	ldr	r3, [pc, #488]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d82d      	bhi.n	8004c88 <UART_SetConfig+0x14c>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0xf8>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c89 	.word	0x08004c89
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c89 	.word	0x08004c89
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e0d8      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e0d4      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e0d0      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e0cc      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e0c8      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5e      	ldr	r2, [pc, #376]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d125      	bne.n	8004ce6 <UART_SetConfig+0x1aa>
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ca4:	2b30      	cmp	r3, #48	; 0x30
 8004ca6:	d016      	beq.n	8004cd6 <UART_SetConfig+0x19a>
 8004ca8:	2b30      	cmp	r3, #48	; 0x30
 8004caa:	d818      	bhi.n	8004cde <UART_SetConfig+0x1a2>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d00a      	beq.n	8004cc6 <UART_SetConfig+0x18a>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d814      	bhi.n	8004cde <UART_SetConfig+0x1a2>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <UART_SetConfig+0x182>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d008      	beq.n	8004cce <UART_SetConfig+0x192>
 8004cbc:	e00f      	b.n	8004cde <UART_SetConfig+0x1a2>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc4:	e0ad      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ccc:	e0a9      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd4:	e0a5      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cdc:	e0a1      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce4:	e09d      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <UART_SetConfig+0x2d8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d125      	bne.n	8004d3c <UART_SetConfig+0x200>
 8004cf0:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfc:	d016      	beq.n	8004d2c <UART_SetConfig+0x1f0>
 8004cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004d00:	d818      	bhi.n	8004d34 <UART_SetConfig+0x1f8>
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d00a      	beq.n	8004d1c <UART_SetConfig+0x1e0>
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d814      	bhi.n	8004d34 <UART_SetConfig+0x1f8>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <UART_SetConfig+0x1d8>
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d008      	beq.n	8004d24 <UART_SetConfig+0x1e8>
 8004d12:	e00f      	b.n	8004d34 <UART_SetConfig+0x1f8>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e082      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e07e      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e07a      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e076      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3a:	e072      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	; (8004e18 <UART_SetConfig+0x2dc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12a      	bne.n	8004d9c <UART_SetConfig+0x260>
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d54:	d01a      	beq.n	8004d8c <UART_SetConfig+0x250>
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5a:	d81b      	bhi.n	8004d94 <UART_SetConfig+0x258>
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d60:	d00c      	beq.n	8004d7c <UART_SetConfig+0x240>
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d66:	d815      	bhi.n	8004d94 <UART_SetConfig+0x258>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <UART_SetConfig+0x238>
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d70:	d008      	beq.n	8004d84 <UART_SetConfig+0x248>
 8004d72:	e00f      	b.n	8004d94 <UART_SetConfig+0x258>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e052      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e04e      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e04a      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e046      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e042      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <UART_SetConfig+0x2c4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d13a      	bne.n	8004e1c <UART_SetConfig+0x2e0>
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db4:	d01a      	beq.n	8004dec <UART_SetConfig+0x2b0>
 8004db6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dba:	d81b      	bhi.n	8004df4 <UART_SetConfig+0x2b8>
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc0:	d00c      	beq.n	8004ddc <UART_SetConfig+0x2a0>
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc6:	d815      	bhi.n	8004df4 <UART_SetConfig+0x2b8>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <UART_SetConfig+0x298>
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x2a8>
 8004dd2:	e00f      	b.n	8004df4 <UART_SetConfig+0x2b8>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e022      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e01e      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e01a      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e016      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e012      	b.n	8004e22 <UART_SetConfig+0x2e6>
 8004dfc:	efff69f3 	.word	0xefff69f3
 8004e00:	40008000 	.word	0x40008000
 8004e04:	40013800 	.word	0x40013800
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40004400 	.word	0x40004400
 8004e10:	40004800 	.word	0x40004800
 8004e14:	40004c00 	.word	0x40004c00
 8004e18:	40005000 	.word	0x40005000
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a9f      	ldr	r2, [pc, #636]	; (80050a4 <UART_SetConfig+0x568>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d17a      	bne.n	8004f22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d824      	bhi.n	8004e7e <UART_SetConfig+0x342>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x300>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e6f 	.word	0x08004e6f
 8004e50:	08004e7f 	.word	0x08004e7f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e7f 	.word	0x08004e7f
 8004e5c:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e60:	f7fe fc06 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8004e64:	61f8      	str	r0, [r7, #28]
        break;
 8004e66:	e010      	b.n	8004e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e68:	4b8f      	ldr	r3, [pc, #572]	; (80050a8 <UART_SetConfig+0x56c>)
 8004e6a:	61fb      	str	r3, [r7, #28]
        break;
 8004e6c:	e00d      	b.n	8004e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7fe fb67 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 8004e72:	61f8      	str	r0, [r7, #28]
        break;
 8004e74:	e009      	b.n	8004e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	61fb      	str	r3, [r7, #28]
        break;
 8004e7c:	e005      	b.n	8004e8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80fb 	beq.w	8005088 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d305      	bcc.n	8004eae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d903      	bls.n	8004eb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb4:	e0e8      	b.n	8005088 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	461c      	mov	r4, r3
 8004ebc:	4615      	mov	r5, r2
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	022b      	lsls	r3, r5, #8
 8004ec8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ecc:	0222      	lsls	r2, r4, #8
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	6849      	ldr	r1, [r1, #4]
 8004ed2:	0849      	lsrs	r1, r1, #1
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	4688      	mov	r8, r1
 8004ed8:	4681      	mov	r9, r0
 8004eda:	eb12 0a08 	adds.w	sl, r2, r8
 8004ede:	eb43 0b09 	adc.w	fp, r3, r9
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f7fb f968 	bl	80001c8 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4613      	mov	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f06:	d308      	bcc.n	8004f1a <UART_SetConfig+0x3de>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d204      	bcs.n	8004f1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e0b6      	b.n	8005088 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f20:	e0b2      	b.n	8005088 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2a:	d15e      	bne.n	8004fea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d828      	bhi.n	8004f86 <UART_SetConfig+0x44a>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0x400>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004f77 	.word	0x08004f77
 8004f50:	08004f87 	.word	0x08004f87
 8004f54:	08004f87 	.word	0x08004f87
 8004f58:	08004f87 	.word	0x08004f87
 8004f5c:	08004f7f 	.word	0x08004f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fe fb86 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8004f64:	61f8      	str	r0, [r7, #28]
        break;
 8004f66:	e014      	b.n	8004f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe fb98 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 8004f6c:	61f8      	str	r0, [r7, #28]
        break;
 8004f6e:	e010      	b.n	8004f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b4d      	ldr	r3, [pc, #308]	; (80050a8 <UART_SetConfig+0x56c>)
 8004f72:	61fb      	str	r3, [r7, #28]
        break;
 8004f74:	e00d      	b.n	8004f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fe fae3 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 8004f7a:	61f8      	str	r0, [r7, #28]
        break;
 8004f7c:	e009      	b.n	8004f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	61fb      	str	r3, [r7, #28]
        break;
 8004f84:	e005      	b.n	8004f92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d077      	beq.n	8005088 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005a      	lsls	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	441a      	add	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b0f      	cmp	r3, #15
 8004fb2:	d916      	bls.n	8004fe2 <UART_SetConfig+0x4a6>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fba:	d212      	bcs.n	8004fe2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f023 030f 	bic.w	r3, r3, #15
 8004fc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	8afb      	ldrh	r3, [r7, #22]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	8afa      	ldrh	r2, [r7, #22]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	e052      	b.n	8005088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe8:	e04e      	b.n	8005088 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d827      	bhi.n	8005042 <UART_SetConfig+0x506>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x4bc>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fb28 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8005020:	61f8      	str	r0, [r7, #28]
        break;
 8005022:	e014      	b.n	800504e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe fb3a 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 8005028:	61f8      	str	r0, [r7, #28]
        break;
 800502a:	e010      	b.n	800504e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <UART_SetConfig+0x56c>)
 800502e:	61fb      	str	r3, [r7, #28]
        break;
 8005030:	e00d      	b.n	800504e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe fa85 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 8005036:	61f8      	str	r0, [r7, #28]
        break;
 8005038:	e009      	b.n	800504e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503e:	61fb      	str	r3, [r7, #28]
        break;
 8005040:	e005      	b.n	800504e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800504c:	bf00      	nop
    }

    if (pclk != 0U)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d019      	beq.n	8005088 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	085a      	lsrs	r2, r3, #1
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d909      	bls.n	8005082 <UART_SetConfig+0x546>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d205      	bcs.n	8005082 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e002      	b.n	8005088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	40008000 	.word	0x40008000
 80050a8:	00f42400 	.word	0x00f42400

080050ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d10a      	bne.n	80051c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005200:	f7fc ffb6 	bl	8002170 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10e      	bne.n	8005232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f82d 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e023      	b.n	800527a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b04      	cmp	r3, #4
 800523e:	d10e      	bne.n	800525e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f817 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e00d      	b.n	800527a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b09c      	sub	sp, #112	; 0x70
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	e0a5      	b.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	f000 80a1 	beq.w	80053e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fc ff67 	bl	8002170 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d13e      	bne.n	8005332 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e6      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005306:	64ba      	str	r2, [r7, #72]	; 0x48
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e067      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d04f      	beq.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534e:	d147      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005358:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800536e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053ac:	623a      	str	r2, [r7, #32]
 80053ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e010      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4013      	ands	r3, r2
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	f43f af4a 	beq.w	8005294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3770      	adds	r7, #112	; 0x70
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b088      	sub	sp, #32
 800540e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	2218      	movs	r2, #24
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f003 fa48 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005422:	233f      	movs	r3, #63	; 0x3f
 8005424:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005426:	2381      	movs	r3, #129	; 0x81
 8005428:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fd71 	bl	8007f20 <hci_send_req>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	da01      	bge.n	8005448 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005444:	23ff      	movs	r3, #255	; 0xff
 8005446:	e005      	b.n	8005454 <aci_gap_set_non_discoverable+0x4a>
  if (status) {
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <aci_gap_set_non_discoverable+0x48>
    return status;
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	e000      	b.n	8005454 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800545c:	b5b0      	push	{r4, r5, r7, lr}
 800545e:	b0ce      	sub	sp, #312	; 0x138
 8005460:	af00      	add	r7, sp, #0
 8005462:	4605      	mov	r5, r0
 8005464:	460c      	mov	r4, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800546e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005472:	462a      	mov	r2, r5
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800547a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800547e:	4622      	mov	r2, r4
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005486:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800548a:	4602      	mov	r2, r0
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005492:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005496:	460a      	mov	r2, r1
 8005498:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800549a:	f107 030c 	add.w	r3, r7, #12
 800549e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80054a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80054a6:	3308      	adds	r3, #8
 80054a8:	f107 020c 	add.w	r2, r7, #12
 80054ac:	4413      	add	r3, r2
 80054ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80054b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80054b6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80054ba:	4413      	add	r3, r2
 80054bc:	3309      	adds	r3, #9
 80054be:	f107 020c 	add.w	r2, r7, #12
 80054c2:	4413      	add	r3, r2
 80054c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80054c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054cc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80054da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054e2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054ea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80054ee:	3301      	adds	r3, #1
 80054f0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80054f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054fc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005506:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800550a:	3302      	adds	r3, #2
 800550c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8005510:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005514:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005518:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800551c:	8812      	ldrh	r2, [r2, #0]
 800551e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005522:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005526:	3302      	adds	r3, #2
 8005528:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800552c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005530:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005534:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800553c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005540:	3301      	adds	r3, #1
 8005542:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8005546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800554e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005550:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005554:	3301      	adds	r3, #1
 8005556:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800555a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800555e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005562:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005564:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005568:	3301      	adds	r3, #1
 800556a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800556e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005572:	3308      	adds	r3, #8
 8005574:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005578:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800557c:	4618      	mov	r0, r3
 800557e:	f003 fa0d 	bl	800899c <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8005582:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005586:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800558a:	4413      	add	r3, r2
 800558c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005594:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005598:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800559a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800559e:	3301      	adds	r3, #1
 80055a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80055a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055a8:	3301      	adds	r3, #1
 80055aa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80055ae:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80055b2:	4618      	mov	r0, r3
 80055b4:	f003 f9f2 	bl	800899c <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80055b8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80055bc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80055c0:	4413      	add	r3, r2
 80055c2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80055ce:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80055d0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80055d4:	3302      	adds	r3, #2
 80055d6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80055da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055de:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80055e2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80055e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80055e8:	3302      	adds	r3, #2
 80055ea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80055ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055f2:	2218      	movs	r2, #24
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 f95b 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 80055fc:	233f      	movs	r3, #63	; 0x3f
 80055fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005602:	2383      	movs	r3, #131	; 0x83
 8005604:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005610:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005614:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005618:	f107 030b 	add.w	r3, r7, #11
 800561c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005620:	2301      	movs	r3, #1
 8005622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f002 fc77 	bl	8007f20 <hci_send_req>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	da01      	bge.n	800563c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005638:	23ff      	movs	r3, #255	; 0xff
 800563a:	e00d      	b.n	8005658 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800563c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005640:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <aci_gap_set_discoverable+0x1fa>
    return status;
 800564a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800564e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	e000      	b.n	8005658 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800565e:	46bd      	mov	sp, r7
 8005660:	bdb0      	pop	{r4, r5, r7, pc}

08005662 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005662:	b590      	push	{r4, r7, lr}
 8005664:	b0cf      	sub	sp, #316	; 0x13c
 8005666:	af00      	add	r7, sp, #0
 8005668:	4604      	mov	r4, r0
 800566a:	4608      	mov	r0, r1
 800566c:	4611      	mov	r1, r2
 800566e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005672:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800567c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005680:	4622      	mov	r2, r4
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005688:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800568c:	4602      	mov	r2, r0
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005694:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005698:	460a      	mov	r2, r1
 800569a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	2207      	movs	r2, #7
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f003 f900 	bl	80088b2 <memset>
  uint8_t index_input = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80056b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80056c0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80056c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80056cc:	3301      	adds	r3, #1
 80056ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80056d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80056da:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80056e2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80056e6:	3301      	adds	r3, #1
 80056e8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80056ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80056f4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80056fc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005700:	3301      	adds	r3, #1
 8005702:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005706:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800570a:	2218      	movs	r2, #24
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f003 f8cf 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005714:	233f      	movs	r3, #63	; 0x3f
 8005716:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800571a:	238a      	movs	r3, #138	; 0x8a
 800571c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005728:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800572c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005730:	f107 030c 	add.w	r3, r7, #12
 8005734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005738:	2307      	movs	r3, #7
 800573a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800573e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fbeb 	bl	8007f20 <hci_send_req>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	da01      	bge.n	8005754 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005750:	23ff      	movs	r3, #255	; 0xff
 8005752:	e02e      	b.n	80057b2 <aci_gap_init+0x150>
  if (resp.Status) {
 8005754:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <aci_gap_init+0x10c>
    return resp.Status;
 8005762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	e021      	b.n	80057b2 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800576e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005776:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800577a:	b29a      	uxth	r2, r3
 800577c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005780:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800578c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005790:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005794:	b29a      	uxth	r2, r3
 8005796:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800579a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800579c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057a4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd90      	pop	{r4, r7, pc}

080057bc <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 80057bc:	b5b0      	push	{r4, r5, r7, lr}
 80057be:	b0cc      	sub	sp, #304	; 0x130
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4605      	mov	r5, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80057d2:	462a      	mov	r2, r5
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057de:	4622      	mov	r2, r4
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80057ea:	4602      	mov	r2, r0
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80057f6:	460a      	mov	r2, r1
 80057f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005818:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800581c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005824:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005828:	3302      	adds	r3, #2
 800582a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005832:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005836:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800583e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005842:	3302      	adds	r3, #2
 8005844:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005850:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005858:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800585c:	3301      	adds	r3, #1
 800585e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005866:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800586a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005872:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005876:	3301      	adds	r3, #1
 8005878:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800587c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005880:	2218      	movs	r2, #24
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f003 f814 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 800588a:	233f      	movs	r3, #63	; 0x3f
 800588c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005890:	2397      	movs	r3, #151	; 0x97
 8005892:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005896:	230f      	movs	r3, #15
 8005898:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80058a4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80058ac:	f107 030b 	add.w	r3, r7, #11
 80058b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80058ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f002 fb2d 	bl	8007f20 <hci_send_req>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da01      	bge.n	80058d0 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 80058cc:	23ff      	movs	r3, #255	; 0xff
 80058ce:	e00d      	b.n	80058ec <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	e000      	b.n	80058ec <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bdb0      	pop	{r4, r5, r7, pc}

080058f6 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 80058f6:	b590      	push	{r4, r7, lr}
 80058f8:	b0cf      	sub	sp, #316	; 0x13c
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4604      	mov	r4, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	4611      	mov	r1, r2
 8005902:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005906:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005910:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005914:	4622      	mov	r2, r4
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800591c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005920:	4602      	mov	r2, r0
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005928:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800592c:	460a      	mov	r2, r1
 800592e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005938:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800593c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800594a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005952:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005956:	8812      	ldrh	r2, [r2, #0]
 8005958:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800595a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800595e:	3302      	adds	r3, #2
 8005960:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005968:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800596c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005970:	8812      	ldrh	r2, [r2, #0]
 8005972:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005974:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005978:	3302      	adds	r3, #2
 800597a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800597e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005982:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005986:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800598e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005992:	3301      	adds	r3, #1
 8005994:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005998:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800599c:	1d58      	adds	r0, r3, #5
 800599e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80059a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80059a6:	2206      	movs	r2, #6
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	f002 fff7 	bl	800899c <memcpy>
  index_input += 6;
 80059ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80059b2:	3306      	adds	r3, #6
 80059b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80059b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059bc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80059c0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80059c2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80059c6:	3301      	adds	r3, #1
 80059c8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 80059cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059d0:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80059d4:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 80059d6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80059da:	3302      	adds	r3, #2
 80059dc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 80059e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059e4:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80059e8:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80059ea:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80059ee:	3302      	adds	r3, #2
 80059f0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 80059f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f8:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80059fc:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80059fe:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a02:	3302      	adds	r3, #2
 8005a04:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a0c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005a10:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005a12:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a16:	3302      	adds	r3, #2
 8005a18:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a20:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005a24:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005a26:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005a30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a34:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005a38:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005a3a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a3e:	3302      	adds	r3, #2
 8005a40:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a48:	2218      	movs	r2, #24
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 ff30 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005a52:	233f      	movs	r3, #63	; 0x3f
 8005a54:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005a58:	239c      	movs	r3, #156	; 0x9c
 8005a5a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005a5e:	230f      	movs	r3, #15
 8005a60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005a6c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005a74:	f107 0313 	add.w	r3, r7, #19
 8005a78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005a82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 fa49 	bl	8007f20 <hci_send_req>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da01      	bge.n	8005a98 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005a94:	23ff      	movs	r3, #255	; 0xff
 8005a96:	e00d      	b.n	8005ab4 <aci_gap_create_connection+0x1be>
  if (status) {
 8005a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a9c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <aci_gap_create_connection+0x1bc>
    return status;
 8005aa6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aaa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	e000      	b.n	8005ab4 <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}

08005abe <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b0cc      	sub	sp, #304	; 0x130
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005afa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005afe:	3301      	adds	r3, #1
 8005b00:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b08:	2218      	movs	r2, #24
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f002 fed0 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005b12:	233f      	movs	r3, #63	; 0x3f
 8005b14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005b18:	239d      	movs	r3, #157	; 0x9d
 8005b1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b1e:	f107 030c 	add.w	r3, r7, #12
 8005b22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b26:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005b2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b2e:	f107 030b 	add.w	r3, r7, #11
 8005b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f002 f9ec 	bl	8007f20 <hci_send_req>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da01      	bge.n	8005b52 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005b4e:	23ff      	movs	r3, #255	; 0xff
 8005b50:	e00d      	b.n	8005b6e <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <aci_gap_terminate_gap_proc+0xae>
    return status;
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	e000      	b.n	8005b6e <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	2218      	movs	r2, #24
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 fe91 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005b90:	233f      	movs	r3, #63	; 0x3f
 8005b92:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005b94:	f240 1301 	movw	r3, #257	; 0x101
 8005b98:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b9a:	1dfb      	adds	r3, r7, #7
 8005b9c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 f9b9 	bl	8007f20 <hci_send_req>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da01      	bge.n	8005bb8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005bb4:	23ff      	movs	r3, #255	; 0xff
 8005bb6:	e005      	b.n	8005bc4 <aci_gatt_init+0x4c>
  if (status) {
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <aci_gatt_init+0x4a>
    return status;
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	e000      	b.n	8005bc4 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b0cf      	sub	sp, #316	; 0x13c
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005bd8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005bdc:	6001      	str	r1, [r0, #0]
 8005bde:	4610      	mov	r0, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005be6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005bea:	4622      	mov	r2, r4
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bf2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bfe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005c02:	460a      	mov	r2, r1
 8005c04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005c06:	f107 030c 	add.w	r3, r7, #12
 8005c0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005c0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d00a      	beq.n	8005c32 <aci_gatt_add_service+0x66>
 8005c1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c20:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d101      	bne.n	8005c2e <aci_gatt_add_service+0x62>
 8005c2a:	2311      	movs	r3, #17
 8005c2c:	e002      	b.n	8005c34 <aci_gatt_add_service+0x68>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <aci_gatt_add_service+0x68>
 8005c32:	2303      	movs	r3, #3
 8005c34:	f107 020c 	add.w	r2, r7, #12
 8005c38:	4413      	add	r3, r2
 8005c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	2203      	movs	r2, #3
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f002 fe33 	bl	80088b2 <memset>
  uint8_t index_input = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005c52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005c5a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c62:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c66:	3301      	adds	r3, #1
 8005c68:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8005c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c70:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d002      	beq.n	8005c80 <aci_gatt_add_service+0xb4>
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d004      	beq.n	8005c88 <aci_gatt_add_service+0xbc>
 8005c7e:	e007      	b.n	8005c90 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8005c80:	2302      	movs	r3, #2
 8005c82:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005c86:	e005      	b.n	8005c94 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005c8e:	e001      	b.n	8005c94 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005c90:	2347      	movs	r3, #71	; 0x47
 8005c92:	e06c      	b.n	8005d6e <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8005c94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c98:	1c58      	adds	r0, r3, #1
 8005c9a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005c9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ca2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005ca6:	6819      	ldr	r1, [r3, #0]
 8005ca8:	f002 fe78 	bl	800899c <memcpy>
    index_input += size;
 8005cac:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005cb0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005cc2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005cca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005cdc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005ce4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cf2:	2218      	movs	r2, #24
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f002 fddb 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005cfc:	233f      	movs	r3, #63	; 0x3f
 8005cfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005d02:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005d06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d12:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005d1a:	f107 0308 	add.w	r3, r7, #8
 8005d1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005d22:	2303      	movs	r3, #3
 8005d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005d28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f002 f8f6 	bl	8007f20 <hci_send_req>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da01      	bge.n	8005d3e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005d3a:	23ff      	movs	r3, #255	; 0xff
 8005d3c:	e017      	b.n	8005d6e <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8005d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005d4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	e00a      	b.n	8005d6e <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005d58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005d6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd90      	pop	{r4, r7, pc}

08005d78 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b0d1      	sub	sp, #324	; 0x144
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005d86:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005d8a:	600a      	str	r2, [r1, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d92:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005d96:	4622      	mov	r2, r4
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d9e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005da2:	4602      	mov	r2, r0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005daa:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005dae:	460a      	mov	r2, r1
 8005db0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005dba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dbe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d00a      	beq.n	8005dde <aci_gatt_add_char+0x66>
 8005dc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dcc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d101      	bne.n	8005dda <aci_gatt_add_char+0x62>
 8005dd6:	2313      	movs	r3, #19
 8005dd8:	e002      	b.n	8005de0 <aci_gatt_add_char+0x68>
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e000      	b.n	8005de0 <aci_gatt_add_char+0x68>
 8005dde:	2305      	movs	r3, #5
 8005de0:	f107 0214 	add.w	r2, r7, #20
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005dea:	f107 0310 	add.w	r3, r7, #16
 8005dee:	2203      	movs	r2, #3
 8005df0:	2100      	movs	r1, #0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f002 fd5d 	bl	80088b2 <memset>
  uint8_t index_input = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005dfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e02:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005e06:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e0e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e12:	3302      	adds	r3, #2
 8005e14:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e1c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005e20:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005e28:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8005e32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e36:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d002      	beq.n	8005e46 <aci_gatt_add_char+0xce>
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d004      	beq.n	8005e4e <aci_gatt_add_char+0xd6>
 8005e44:	e007      	b.n	8005e56 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8005e46:	2302      	movs	r3, #2
 8005e48:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005e4c:	e005      	b.n	8005e5a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005e4e:	2310      	movs	r3, #16
 8005e50:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005e54:	e001      	b.n	8005e5a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005e56:	2347      	movs	r3, #71	; 0x47
 8005e58:	e091      	b.n	8005f7e <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005e5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e5e:	1cd8      	adds	r0, r3, #3
 8005e60:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005e64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005e6c:	6819      	ldr	r1, [r3, #0]
 8005e6e:	f002 fd95 	bl	800899c <memcpy>
    index_input += size;
 8005e72:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8005e76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005e80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e84:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005e88:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005e90:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e94:	3302      	adds	r3, #2
 8005e96:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e9e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005ea2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005ea4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8005eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005eb6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005eb8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8005ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ec6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005eca:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005ecc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8005ed6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eda:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8005ede:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005ee0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8005eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eee:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8005ef2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005ef4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005efe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f02:	2218      	movs	r2, #24
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f002 fcd3 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005f0c:	233f      	movs	r3, #63	; 0x3f
 8005f0e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8005f12:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f16:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005f1a:	f107 0314 	add.w	r3, r7, #20
 8005f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005f22:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005f32:	2303      	movs	r3, #3
 8005f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005f38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 ffee 	bl	8007f20 <hci_send_req>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da01      	bge.n	8005f4e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005f4a:	23ff      	movs	r3, #255	; 0xff
 8005f4c:	e017      	b.n	8005f7e <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8005f4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005f5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	e00a      	b.n	8005f7e <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005f68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f7a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b0cc      	sub	sp, #304	; 0x130
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005f98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8005f9a:	f107 030c 	add.w	r3, r7, #12
 8005f9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fbc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005fc0:	8812      	ldrh	r2, [r2, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005fc4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fc8:	3302      	adds	r3, #2
 8005fca:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fd2:	2218      	movs	r2, #24
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f002 fc6b 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 8005fdc:	233f      	movs	r3, #63	; 0x3f
 8005fde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8005fe2:	f240 130b 	movw	r3, #267	; 0x10b
 8005fe6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005fea:	230f      	movs	r3, #15
 8005fec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005ff0:	f107 030c 	add.w	r3, r7, #12
 8005ff4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005ff8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006000:	f107 030b 	add.w	r3, r7, #11
 8006004:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006008:	2301      	movs	r3, #1
 800600a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800600e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f001 ff83 	bl	8007f20 <hci_send_req>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	da01      	bge.n	8006024 <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 8006020:	23ff      	movs	r3, #255	; 0xff
 8006022:	e00d      	b.n	8006040 <aci_gatt_exchange_config+0xb8>
  if (status) {
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <aci_gatt_exchange_config+0xb6>
    return status;
 8006032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006036:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	e000      	b.n	8006040 <aci_gatt_exchange_config+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <aci_gatt_write_without_resp>:
}
tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 800604a:	b590      	push	{r4, r7, lr}
 800604c:	b0cf      	sub	sp, #316	; 0x13c
 800604e:	af00      	add	r7, sp, #0
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800605a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006064:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006068:	4622      	mov	r2, r4
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006074:	4602      	mov	r2, r0
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800607c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006080:	460a      	mov	r2, r1
 8006082:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800608c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006090:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800609e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80060aa:	8812      	ldrh	r2, [r2, #0]
 80060ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80060b2:	3302      	adds	r3, #2
 80060b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80060b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80060c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80060cc:	3302      	adds	r3, #2
 80060ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80060d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060da:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80060e2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80060e6:	3301      	adds	r3, #1
 80060e8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80060ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060f0:	1d58      	adds	r0, r3, #5
 80060f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060f6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006100:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	f002 fc49 	bl	800899c <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800610a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800610e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006112:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	4413      	add	r3, r2
 800611a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800611e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006122:	2218      	movs	r2, #24
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f002 fbc3 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 800612c:	233f      	movs	r3, #63	; 0x3f
 800612e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8006132:	f240 1323 	movw	r3, #291	; 0x123
 8006136:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006142:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006146:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800614a:	f107 0313 	add.w	r3, r7, #19
 800614e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006158:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f001 fede 	bl	8007f20 <hci_send_req>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	da01      	bge.n	800616e <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 800616a:	23ff      	movs	r3, #255	; 0xff
 800616c:	e00d      	b.n	800618a <aci_gatt_write_without_resp+0x140>
  if (status) {
 800616e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006172:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <aci_gatt_write_without_resp+0x13e>
    return status;
 800617c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006180:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	e000      	b.n	800618a <aci_gatt_write_without_resp+0x140>
  }
  return BLE_STATUS_SUCCESS;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006190:	46bd      	mov	sp, r7
 8006192:	bd90      	pop	{r4, r7, pc}

08006194 <aci_gatt_update_char_value_ext>:
                                          uint8_t Update_Type,
                                          uint16_t Char_Length,
                                          uint16_t Value_Offset,
                                          uint8_t Value_Length,
                                          uint8_t Value[])
{
 8006194:	b5b0      	push	{r4, r5, r7, lr}
 8006196:	b0cc      	sub	sp, #304	; 0x130
 8006198:	af00      	add	r7, sp, #0
 800619a:	4605      	mov	r5, r0
 800619c:	460c      	mov	r4, r1
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80061aa:	462a      	mov	r2, r5
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b6:	4622      	mov	r2, r4
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80061c2:	4602      	mov	r2, r0
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 80061ce:	460a      	mov	r2, r1
 80061d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 80061d2:	f107 030c 	add.w	r3, r7, #12
 80061d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Handle_To_Notify = htob(Conn_Handle_To_Notify, 2);
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061f4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80061fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006200:	3302      	adds	r3, #2
 8006202:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800620e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006212:	8812      	ldrh	r2, [r2, #0]
 8006214:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006216:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800621a:	3302      	adds	r3, #2
 800621c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006228:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800622c:	8812      	ldrh	r2, [r2, #0]
 800622e:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006230:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006234:	3302      	adds	r3, #2
 8006236:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Update_Type = htob(Update_Type, 1);
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006242:	f2a2 122f 	subw	r2, r2, #303	; 0x12f
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800624a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800624e:	3301      	adds	r3, #1
 8006250:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Length = htob(Char_Length, 2);
 8006254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006258:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800625c:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8006260:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006264:	3302      	adds	r3, #2
 8006266:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Value_Offset = htob(Value_Offset, 2);
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8006272:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 8006276:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800627a:	3302      	adds	r3, #2
 800627c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Value_Length = htob(Value_Length, 1);
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006288:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800628a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800628e:	3301      	adds	r3, #1
 8006290:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Value_Length*sizeof(uint8_t));
 8006294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006298:	330c      	adds	r3, #12
 800629a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800629e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80062a2:	4618      	mov	r0, r3
 80062a4:	f002 fb7a 	bl	800899c <memcpy>
    index_input += Value_Length*sizeof(uint8_t);
 80062a8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80062ac:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80062b0:	4413      	add	r3, r2
 80062b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ba:	2218      	movs	r2, #24
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f002 faf7 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 80062c4:	233f      	movs	r3, #63	; 0x3f
 80062c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x12c;
 80062ca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80062ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062d2:	f107 030c 	add.w	r3, r7, #12
 80062d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80062de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062e2:	f107 030b 	add.w	r3, r7, #11
 80062e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80062f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fe12 	bl	8007f20 <hci_send_req>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da01      	bge.n	8006306 <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8006302:	23ff      	movs	r3, #255	; 0xff
 8006304:	e00d      	b.n	8006322 <aci_gatt_update_char_value_ext+0x18e>
  if (status) {
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <aci_gatt_update_char_value_ext+0x18c>
    return status;
 8006314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006318:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	e000      	b.n	8006322 <aci_gatt_update_char_value_ext+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006328:	46bd      	mov	sp, r7
 800632a:	bdb0      	pop	{r4, r5, r7, pc}

0800632c <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b0cc      	sub	sp, #304	; 0x130
 8006330:	af00      	add	r7, sp, #0
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006344:	4602      	mov	r2, r0
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006350:	460a      	mov	r2, r1
 8006352:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006354:	f107 030c 	add.w	r3, r7, #12
 8006358:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006376:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800637e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006382:	3301      	adds	r3, #1
 8006384:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8006388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006390:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006398:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800639c:	3301      	adds	r3, #1
 800639e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 80063a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a6:	1c98      	adds	r0, r3, #2
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	f002 faee 	bl	800899c <memcpy>
    index_input += Length*sizeof(uint8_t);
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80063c8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063d8:	2218      	movs	r2, #24
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f002 fa68 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 80063e2:	233f      	movs	r3, #63	; 0x3f
 80063e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80063e8:	230c      	movs	r3, #12
 80063ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80063ee:	f107 030c 	add.w	r3, r7, #12
 80063f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80063f6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80063fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063fe:	f107 030b 	add.w	r3, r7, #11
 8006402:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800640c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fd84 	bl	8007f20 <hci_send_req>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800641e:	23ff      	movs	r3, #255	; 0xff
 8006420:	e00d      	b.n	800643e <aci_hal_write_config_data+0x112>
  if (status) {
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <aci_hal_write_config_data+0x110>
    return status;
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	e000      	b.n	800643e <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b0cc      	sub	sp, #304	; 0x130
 800644c:	af00      	add	r7, sp, #0
 800644e:	4602      	mov	r2, r0
 8006450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006454:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006462:	460a      	mov	r2, r1
 8006464:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006488:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006490:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006494:	3301      	adds	r3, #1
 8006496:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800649a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064a6:	7812      	ldrb	r2, [r2, #0]
 80064a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80064aa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064ae:	3301      	adds	r3, #1
 80064b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80064b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064b8:	2218      	movs	r2, #24
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f002 f9f8 	bl	80088b2 <memset>
  rq.ogf = 0x3f;
 80064c2:	233f      	movs	r3, #63	; 0x3f
 80064c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80064c8:	230f      	movs	r3, #15
 80064ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80064ce:	f107 030c 	add.w	r3, r7, #12
 80064d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80064d6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80064de:	f107 030b 	add.w	r3, r7, #11
 80064e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80064ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fd14 	bl	8007f20 <hci_send_req>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da01      	bge.n	8006502 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80064fe:	23ff      	movs	r3, #255	; 0xff
 8006500:	e00d      	b.n	800651e <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	e000      	b.n	800651e <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	7818      	ldrb	r0, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006542:	b299      	uxth	r1, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	461a      	mov	r2, r3
 800654a:	f7fa fc5d 	bl	8000e08 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	7818      	ldrb	r0, [r3, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006572:	b299      	uxth	r1, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	461a      	mov	r2, r3
 800657a:	f000 ffca 	bl	8007512 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b087      	sub	sp, #28
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	7818      	ldrb	r0, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065a2:	b299      	uxth	r1, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	78da      	ldrb	r2, [r3, #3]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	889b      	ldrh	r3, [r3, #4]
 80065ac:	b29c      	uxth	r4, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	88db      	ldrh	r3, [r3, #6]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4623      	mov	r3, r4
 80065b8:	f000 ffba 	bl	8007530 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd90      	pop	{r4, r7, pc}

080065c6 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 ffbc 	bl	8007558 <hci_hardware_error_event>

  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b0a6      	sub	sp, #152	; 0x98
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800660a:	e02e      	b.n	800666a <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800660c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800661c:	b29a      	uxth	r2, r3
 800661e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	3398      	adds	r3, #152	; 0x98
 8006626:	443b      	add	r3, r7
 8006628:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800662c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006630:	3302      	adds	r3, #2
 8006632:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006636:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800663a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	3398      	adds	r3, #152	; 0x98
 8006650:	443b      	add	r3, r7
 8006652:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006656:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800665a:	3302      	adds	r3, #2
 800665c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006664:	3301      	adds	r3, #1
 8006666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800666a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006676:	4293      	cmp	r3, r2
 8006678:	dbc8      	blt.n	800660c <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800667a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff71 	bl	800756e <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 800668c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006690:	4618      	mov	r0, r3
 8006692:	3798      	adds	r7, #152	; 0x98
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 ff6a 	bl	8007586 <hci_data_buffer_overflow_event>

  return status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 ff5e 	bl	800759c <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 f97b 	bl	80079fa <aci_blue_initialized_event>

  return status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f001 f975 	bl	8007a10 <aci_blue_events_lost_event>

  return status;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006734:	b08d      	sub	sp, #52	; 0x34
 8006736:	af08      	add	r7, sp, #32
 8006738:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f893 c000 	ldrb.w	ip, [r3]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800676e:	68b8      	ldr	r0, [r7, #8]
 8006770:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006774:	68bc      	ldr	r4, [r7, #8]
 8006776:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800677a:	68bd      	ldr	r5, [r7, #8]
 800677c:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006780:	68be      	ldr	r6, [r7, #8]
 8006782:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	9606      	str	r6, [sp, #24]
 800678e:	9505      	str	r5, [sp, #20]
 8006790:	9404      	str	r4, [sp, #16]
 8006792:	9003      	str	r0, [sp, #12]
 8006794:	9102      	str	r1, [sp, #8]
 8006796:	9201      	str	r2, [sp, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	464b      	mov	r3, r9
 800679e:	4642      	mov	r2, r8
 80067a0:	4671      	mov	r1, lr
 80067a2:	4660      	mov	r0, ip
 80067a4:	f001 f93e 	bl	8007a24 <aci_blue_crash_info_event>

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067b4 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	7818      	ldrb	r0, [r3, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	7859      	ldrb	r1, [r3, #1]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f001 f934 	bl	8007a40 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f993 0000 	ldrsb.w	r0, [r3]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006800:	461a      	mov	r2, r3
 8006802:	f001 f92b 	bl	8007a5c <aci_hal_scan_req_report_event>

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	7818      	ldrb	r0, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800682c:	461a      	mov	r2, r3
 800682e:	f001 f923 	bl	8007a78 <aci_hal_fw_error_event>

  return status;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006848:	f000 ff32 	bl	80076b0 <aci_gap_limited_discoverable_event>

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b298      	uxth	r0, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	7899      	ldrb	r1, [r3, #2]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	78db      	ldrb	r3, [r3, #3]
 8006874:	461a      	mov	r2, r3
 8006876:	f000 ff22 	bl	80076be <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	4618      	mov	r0, r3
 800689c:	f000 ff1e 	bl	80076dc <aci_gap_pass_key_req_event>

  return status;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 ff16 	bl	80076f2 <aci_gap_authorization_req_event>

  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80068dc:	f000 ff14 	bl	8007708 <aci_gap_slave_security_initiated_event>

  return status;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 80068f6:	f000 ff0e 	bl	8007716 <aci_gap_bond_lost_event>

  return status;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	7818      	ldrb	r0, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	7859      	ldrb	r1, [r3, #1]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006924:	f7fa f9fc 	bl	8000d20 <aci_gap_proc_complete_event>

  return status;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	4618      	mov	r0, r3
 800694a:	f000 feeb 	bl	8007724 <aci_gap_addr_not_resolved_event>

  return status;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29a      	uxth	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 fedf 	bl	800773a <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29a      	uxth	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	789b      	ldrb	r3, [r3, #2]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 fed5 	bl	8007752 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	885b      	ldrh	r3, [r3, #2]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f000 ffce 	bl	8007972 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b298      	uxth	r0, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 ffc5 	bl	800798e <aci_l2cap_proc_timeout_event>

  return status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a10:	b089      	sub	sp, #36	; 0x24
 8006a12:	af04      	add	r7, sp, #16
 8006a14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b298      	uxth	r0, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	789c      	ldrb	r4, [r3, #2]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a2e:	b29d      	uxth	r5, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006a36:	b29e      	uxth	r6, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006a46:	b292      	uxth	r2, r2
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8006a4e:	b289      	uxth	r1, r1
 8006a50:	9102      	str	r1, [sp, #8]
 8006a52:	9201      	str	r2, [sp, #4]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	4633      	mov	r3, r6
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	f000 ffa5 	bl	80079aa <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a6a <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006a6a:	b590      	push	{r4, r7, lr}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af02      	add	r7, sp, #8
 8006a70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b298      	uxth	r0, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	7899      	ldrb	r1, [r3, #2]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4623      	mov	r3, r4
 8006a98:	f000 ff9b 	bl	80079d2 <aci_l2cap_command_reject_event>

  return status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd90      	pop	{r4, r7, pc}

08006aa6 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006aa6:	b590      	push	{r4, r7, lr}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af02      	add	r7, sp, #8
 8006aac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b298      	uxth	r0, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	885b      	ldrh	r3, [r3, #2]
 8006ac0:	b299      	uxth	r1, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	f7fa fa21 	bl	8000f1c <aci_gatt_attribute_modified_event>

  return status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd90      	pop	{r4, r7, pc}

08006ae4 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fe37 	bl	800776e <aci_gatt_proc_timeout_event>

  return status;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	885b      	ldrh	r3, [r3, #2]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fa fabb 	bl	80010a4 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b298      	uxth	r0, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	7899      	ldrb	r1, [r3, #2]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006b5a:	f000 fe13 	bl	8007784 <aci_att_find_info_resp_event>

  return status;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b0a6      	sub	sp, #152	; 0x98
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b70:	2300      	movs	r3, #0
 8006b72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b88:	e02e      	b.n	8006be8 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8006b8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	3398      	adds	r3, #152	; 0x98
 8006ba4:	443b      	add	r3, r7
 8006ba6:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006baa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006bae:	3302      	adds	r3, #2
 8006bb0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8006bb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3398      	adds	r3, #152	; 0x98
 8006bce:	443b      	add	r3, r7
 8006bd0:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006bd4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006bd8:	3302      	adds	r3, #2
 8006bda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006be2:	3301      	adds	r3, #1
 8006be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bec:	789b      	ldrb	r3, [r3, #2]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	dbc8      	blt.n	8006b8a <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8006bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b298      	uxth	r0, r3
 8006c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c04:	789b      	ldrb	r3, [r3, #2]
 8006c06:	f107 0208 	add.w	r2, r7, #8
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f000 fdca 	bl	80077a4 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8006c10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3798      	adds	r7, #152	; 0x98
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b298      	uxth	r0, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	7899      	ldrb	r1, [r3, #2]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8006c3e:	f000 fdbf 	bl	80077c0 <aci_att_read_by_type_resp_event>

  return status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b298      	uxth	r0, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fdb8 	bl	80077e0 <aci_att_read_resp_event>

  return status;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b298      	uxth	r0, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f000 fdaf 	bl	80077fc <aci_att_read_blob_resp_event>

  return status;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b298      	uxth	r0, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fda6 	bl	8007818 <aci_att_read_multiple_resp_event>

  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b298      	uxth	r0, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	7899      	ldrb	r1, [r3, #2]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8006cf8:	f000 fd9c 	bl	8007834 <aci_att_read_by_group_type_resp_event>

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8006d06:	b590      	push	{r4, r7, lr}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af02      	add	r7, sp, #8
 8006d0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b298      	uxth	r0, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	885b      	ldrh	r3, [r3, #2]
 8006d20:	b299      	uxth	r1, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	889b      	ldrh	r3, [r3, #4]
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	4623      	mov	r3, r4
 8006d34:	f000 fd8e 	bl	8007854 <aci_att_prepare_write_resp_event>

  return status;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd90      	pop	{r4, r7, pc}

08006d42 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fd8f 	bl	800787c <aci_att_exec_write_resp_event>

  return status;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b298      	uxth	r0, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	885b      	ldrh	r3, [r3, #2]
 8006d82:	b299      	uxth	r1, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8006d8c:	f000 fd81 	bl	8007892 <aci_gatt_indication_event>

  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b298      	uxth	r0, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	885b      	ldrh	r3, [r3, #2]
 8006db4:	b299      	uxth	r1, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8006dbe:	f7fa f8c7 	bl	8000f50 <aci_gatt_notification_event>

  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	789b      	ldrb	r3, [r3, #2]
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fa f90f 	bl	800100c <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b298      	uxth	r0, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	7899      	ldrb	r1, [r3, #2]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	795b      	ldrb	r3, [r3, #5]
 8006e1e:	f000 fd48 	bl	80078b2 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b298      	uxth	r0, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	b299      	uxth	r1, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006e50:	f7fa f89a 	bl	8000f88 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b298      	uxth	r0, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	885b      	ldrh	r3, [r3, #2]
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8006e82:	f000 fd2a 	bl	80078da <aci_gatt_write_permit_req_event>

  return status;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b298      	uxth	r0, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	885b      	ldrh	r3, [r3, #2]
 8006eaa:	b299      	uxth	r1, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	889b      	ldrh	r3, [r3, #4]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fd21 	bl	80078fa <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b0a6      	sub	sp, #152	; 0x98
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee2:	e019      	b.n	8006f18 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8006ee4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	3398      	adds	r3, #152	; 0x98
 8006efe:	443b      	add	r3, r7
 8006f00:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006f04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006f08:	3302      	adds	r3, #2
 8006f0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f12:	3301      	adds	r3, #1
 8006f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f1c:	789b      	ldrb	r3, [r3, #2]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f24:	4293      	cmp	r3, r2
 8006f26:	dbdd      	blt.n	8006ee4 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8006f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b298      	uxth	r0, r3
 8006f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	f107 0208 	add.w	r2, r7, #8
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f000 fcec 	bl	8007918 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8006f40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3798      	adds	r7, #152	; 0x98
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fa f884 	bl	8001078 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fccf 	bl	8007934 <aci_gatt_server_confirmation_event>

  return status;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b298      	uxth	r0, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	889b      	ldrh	r3, [r3, #4]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f000 fcbc 	bl	800794a <aci_gatt_prepare_write_permit_req_event>

  return status;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd90      	pop	{r4, r7, pc}

08006fdc <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8006fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fde:	b08b      	sub	sp, #44	; 0x2c
 8006fe0:	af06      	add	r7, sp, #24
 8006fe2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	781d      	ldrb	r5, [r3, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ff6:	b29e      	uxth	r6, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800700e:	b292      	uxth	r2, r2
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8007016:	b289      	uxth	r1, r1
 8007018:	68b8      	ldr	r0, [r7, #8]
 800701a:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800701e:	b280      	uxth	r0, r0
 8007020:	68bc      	ldr	r4, [r7, #8]
 8007022:	7c64      	ldrb	r4, [r4, #17]
 8007024:	9404      	str	r4, [sp, #16]
 8007026:	9003      	str	r0, [sp, #12]
 8007028:	9102      	str	r1, [sp, #8]
 800702a:	9201      	str	r2, [sp, #4]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4673      	mov	r3, lr
 8007030:	4662      	mov	r2, ip
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	f7f9 fea3 	bl	8000d80 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007044 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0a4      	sub	sp, #144	; 0x90
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800705e:	2300      	movs	r3, #0
 8007060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007064:	e0b3      	b.n	80071ce <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007066:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800706a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	440b      	add	r3, r1
 800707a:	3301      	adds	r3, #1
 800707c:	7819      	ldrb	r1, [r3, #0]
 800707e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	3390      	adds	r3, #144	; 0x90
 800708c:	443b      	add	r3, r7
 800708e:	3b88      	subs	r3, #136	; 0x88
 8007090:	460a      	mov	r2, r1
 8007092:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007094:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007098:	3301      	adds	r3, #1
 800709a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800709e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80070a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4413      	add	r3, r2
 80070b0:	440b      	add	r3, r1
 80070b2:	3302      	adds	r3, #2
 80070b4:	7819      	ldrb	r1, [r3, #0]
 80070b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	3390      	adds	r3, #144	; 0x90
 80070c4:	443b      	add	r3, r7
 80070c6:	3b87      	subs	r3, #135	; 0x87
 80070c8:	460a      	mov	r2, r1
 80070ca:	701a      	strb	r2, [r3, #0]
    size += 1;
 80070cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80070d0:	3301      	adds	r3, #1
 80070d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80070d6:	f107 0108 	add.w	r1, r7, #8
 80070da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	1c98      	adds	r0, r3, #2
 80070ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070fc:	4413      	add	r3, r2
 80070fe:	3303      	adds	r3, #3
 8007100:	2206      	movs	r2, #6
 8007102:	4619      	mov	r1, r3
 8007104:	f001 fc4a 	bl	800899c <memcpy>
    size += 6;
 8007108:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800710c:	3306      	adds	r3, #6
 800710e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8007112:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007116:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	440b      	add	r3, r1
 8007126:	3309      	adds	r3, #9
 8007128:	7819      	ldrb	r1, [r3, #0]
 800712a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3390      	adds	r3, #144	; 0x90
 8007138:	443b      	add	r3, r7
 800713a:	3b80      	subs	r3, #128	; 0x80
 800713c:	460a      	mov	r2, r1
 800713e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007140:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007144:	3301      	adds	r3, #1
 8007146:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800714a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715e:	4413      	add	r3, r2
 8007160:	1c99      	adds	r1, r3, #2
 8007162:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	3390      	adds	r3, #144	; 0x90
 8007170:	443b      	add	r3, r7
 8007172:	3b7c      	subs	r3, #124	; 0x7c
 8007174:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007176:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800717a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	4413      	add	r3, r2
 8007188:	440b      	add	r3, r1
 800718a:	3309      	adds	r3, #9
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007192:	4413      	add	r3, r2
 8007194:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007198:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b259      	sxtb	r1, r3
 80071a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	3390      	adds	r3, #144	; 0x90
 80071b2:	443b      	add	r3, r7
 80071b4:	3b78      	subs	r3, #120	; 0x78
 80071b6:	460a      	mov	r2, r1
 80071b8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80071ba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80071be:	3301      	adds	r3, #1
 80071c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80071c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071da:	4293      	cmp	r3, r2
 80071dc:	f6ff af43 	blt.w	8007066 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80071e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f107 0208 	add.w	r2, r7, #8
 80071ea:	4611      	mov	r1, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 fe4d 	bl	8000e8c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80071f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3790      	adds	r7, #144	; 0x90
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80071fe:	b590      	push	{r4, r7, lr}
 8007200:	b087      	sub	sp, #28
 8007202:	af02      	add	r7, sp, #8
 8007204:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	7818      	ldrb	r0, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007218:	b299      	uxth	r1, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007220:	b29a      	uxth	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007228:	b29c      	uxth	r4, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007230:	b29b      	uxth	r3, r3
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4623      	mov	r3, r4
 8007236:	f000 f9bf 	bl	80075b8 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bd90      	pop	{r4, r7, pc}

08007244 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	7818      	ldrb	r0, [r3, #0]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800725e:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007264:	461a      	mov	r2, r3
 8007266:	f000 f9bb 	bl	80075e0 <hci_le_read_remote_used_features_complete_event>

  return status;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	895b      	ldrh	r3, [r3, #10]
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	f000 f9b1 	bl	80075fc <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b298      	uxth	r0, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	885b      	ldrh	r3, [r3, #2]
 80072be:	b299      	uxth	r1, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	889b      	ldrh	r3, [r3, #4]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	88db      	ldrh	r3, [r3, #6]
 80072ca:	b29c      	uxth	r4, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	891b      	ldrh	r3, [r3, #8]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4623      	mov	r3, r4
 80072d6:	f000 f99f 	bl	8007618 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd90      	pop	{r4, r7, pc}

080072e4 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f000 f99e 	bl	8007640 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f000 f995 	bl	8007658 <hci_le_generate_dhkey_complete_event>

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800733c:	b08d      	sub	sp, #52	; 0x34
 800733e:	af08      	add	r7, sp, #32
 8007340:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f893 c000 	ldrb.w	ip, [r3]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007356:	fa1f fe83 	uxth.w	lr, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f893 8003 	ldrb.w	r8, [r3, #3]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007372:	68b8      	ldr	r0, [r7, #8]
 8007374:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007378:	b280      	uxth	r0, r0
 800737a:	68bc      	ldr	r4, [r7, #8]
 800737c:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8007380:	b2a4      	uxth	r4, r4
 8007382:	68bd      	ldr	r5, [r7, #8]
 8007384:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007388:	b2ad      	uxth	r5, r5
 800738a:	68be      	ldr	r6, [r7, #8]
 800738c:	7f76      	ldrb	r6, [r6, #29]
 800738e:	9606      	str	r6, [sp, #24]
 8007390:	9505      	str	r5, [sp, #20]
 8007392:	9404      	str	r4, [sp, #16]
 8007394:	9003      	str	r0, [sp, #12]
 8007396:	9102      	str	r1, [sp, #8]
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	464b      	mov	r3, r9
 800739e:	4642      	mov	r2, r8
 80073a0:	4671      	mov	r1, lr
 80073a2:	4660      	mov	r0, ip
 80073a4:	f000 f964 	bl	8007670 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080073b4 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b0a6      	sub	sp, #152	; 0x98
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80073ce:	2300      	movs	r3, #0
 80073d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073d4:	e085      	b.n	80074e2 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80073d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80073da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	4413      	add	r3, r2
 80073e2:	3301      	adds	r3, #1
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	3398      	adds	r3, #152	; 0x98
 80073ee:	443b      	add	r3, r7
 80073f0:	3b90      	subs	r3, #144	; 0x90
 80073f2:	701a      	strb	r2, [r3, #0]
    size += 1;
 80073f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073f8:	3301      	adds	r3, #1
 80073fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80073fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4413      	add	r3, r2
 800740a:	3302      	adds	r3, #2
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	3398      	adds	r3, #152	; 0x98
 8007416:	443b      	add	r3, r7
 8007418:	3b8f      	subs	r3, #143	; 0x8f
 800741a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800741c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007420:	3301      	adds	r3, #1
 8007422:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007426:	f107 0208 	add.w	r2, r7, #8
 800742a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	4413      	add	r3, r2
 8007432:	1c98      	adds	r0, r3, #2
 8007434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800743e:	4413      	add	r3, r2
 8007440:	3303      	adds	r3, #3
 8007442:	2206      	movs	r2, #6
 8007444:	4619      	mov	r1, r3
 8007446:	f001 faa9 	bl	800899c <memcpy>
    size += 6;
 800744a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800744e:	3306      	adds	r3, #6
 8007450:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007454:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007458:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	4413      	add	r3, r2
 8007460:	3309      	adds	r3, #9
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3398      	adds	r3, #152	; 0x98
 800746c:	443b      	add	r3, r7
 800746e:	3b88      	subs	r3, #136	; 0x88
 8007470:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007472:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007476:	3301      	adds	r3, #1
 8007478:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800747c:	f107 0208 	add.w	r2, r7, #8
 8007480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	3308      	adds	r3, #8
 8007488:	4413      	add	r3, r2
 800748a:	1c58      	adds	r0, r3, #1
 800748c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	3308      	adds	r3, #8
 8007494:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007498:	4413      	add	r3, r2
 800749a:	3302      	adds	r3, #2
 800749c:	2206      	movs	r2, #6
 800749e:	4619      	mov	r1, r3
 80074a0:	f001 fa7c 	bl	800899c <memcpy>
    size += 6;
 80074a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074a8:	3306      	adds	r3, #6
 80074aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80074ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	3310      	adds	r3, #16
 80074bc:	f993 2000 	ldrsb.w	r2, [r3]
 80074c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	3398      	adds	r3, #152	; 0x98
 80074c8:	443b      	add	r3, r7
 80074ca:	3b81      	subs	r3, #129	; 0x81
 80074cc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80074ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074d2:	3301      	adds	r3, #1
 80074d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80074d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074dc:	3301      	adds	r3, #1
 80074de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f6ff af71 	blt.w	80073d6 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80074f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f107 0208 	add.w	r2, r7, #8
 80074fe:	4611      	mov	r1, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f8c9 	bl	8007698 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007506:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800750a:	4618      	mov	r0, r3
 800750c:	3798      	adds	r7, #152	; 0x98
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	71fb      	strb	r3, [r7, #7]
 800751c:	460b      	mov	r3, r1
 800751e:	80bb      	strh	r3, [r7, #4]
 8007520:	4613      	mov	r3, r2
 8007522:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007530:	b490      	push	{r4, r7}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	4623      	mov	r3, r4
 8007540:	71fb      	strb	r3, [r7, #7]
 8007542:	4603      	mov	r3, r0
 8007544:	80bb      	strh	r3, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	71bb      	strb	r3, [r7, #6]
 800754a:	4613      	mov	r3, r2
 800754c:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bc90      	pop	{r4, r7}
 8007556:	4770      	bx	lr

08007558 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	4603      	mov	r3, r0
 8007576:	6039      	str	r1, [r7, #0]
 8007578:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	4603      	mov	r3, r0
 800758e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	460a      	mov	r2, r1
 80075a6:	71fb      	strb	r3, [r7, #7]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80075b8:	b490      	push	{r4, r7}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	4611      	mov	r1, r2
 80075c4:	461a      	mov	r2, r3
 80075c6:	4623      	mov	r3, r4
 80075c8:	71fb      	strb	r3, [r7, #7]
 80075ca:	4603      	mov	r3, r0
 80075cc:	80bb      	strh	r3, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	807b      	strh	r3, [r7, #2]
 80075d2:	4613      	mov	r3, r2
 80075d4:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc90      	pop	{r4, r7}
 80075de:	4770      	bx	lr

080075e0 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	603a      	str	r2, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
 80075ec:	460b      	mov	r3, r1
 80075ee:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	80fb      	strh	r3, [r7, #6]
 8007608:	4613      	mov	r3, r2
 800760a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007618:	b490      	push	{r4, r7}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4604      	mov	r4, r0
 8007620:	4608      	mov	r0, r1
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4623      	mov	r3, r4
 8007628:	80fb      	strh	r3, [r7, #6]
 800762a:	4603      	mov	r3, r0
 800762c:	80bb      	strh	r3, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	807b      	strh	r3, [r7, #2]
 8007632:	4613      	mov	r3, r2
 8007634:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bc90      	pop	{r4, r7}
 800763e:	4770      	bx	lr

08007640 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007670:	b490      	push	{r4, r7}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	71fb      	strb	r3, [r7, #7]
 8007682:	4603      	mov	r3, r0
 8007684:	80bb      	strh	r3, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	71bb      	strb	r3, [r7, #6]
 800768a:	4613      	mov	r3, r2
 800768c:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bc90      	pop	{r4, r7}
 8007696:	4770      	bx	lr

08007698 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	4603      	mov	r3, r0
 80076c6:	80fb      	strh	r3, [r7, #6]
 80076c8:	460b      	mov	r3, r1
 80076ca:	717b      	strb	r3, [r7, #5]
 80076cc:	4613      	mov	r3, r2
 80076ce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	4603      	mov	r3, r0
 80076fa:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007716:	b480      	push	{r7}
 8007718:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800771a:	bf00      	nop
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	4603      	mov	r3, r0
 8007742:	6039      	str	r1, [r7, #0]
 8007744:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	4603      	mov	r3, r0
 800775a:	460a      	mov	r2, r1
 800775c:	80fb      	strh	r3, [r7, #6]
 800775e:	4613      	mov	r3, r2
 8007760:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	4603      	mov	r3, r0
 8007776:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4603      	mov	r3, r0
 800778e:	80fb      	strh	r3, [r7, #6]
 8007790:	460b      	mov	r3, r1
 8007792:	717b      	strb	r3, [r7, #5]
 8007794:	4613      	mov	r3, r2
 8007796:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	603a      	str	r2, [r7, #0]
 80077ae:	80fb      	strh	r3, [r7, #6]
 80077b0:	460b      	mov	r3, r1
 80077b2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4603      	mov	r3, r0
 80077ca:	80fb      	strh	r3, [r7, #6]
 80077cc:	460b      	mov	r3, r1
 80077ce:	717b      	strb	r3, [r7, #5]
 80077d0:	4613      	mov	r3, r2
 80077d2:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	603a      	str	r2, [r7, #0]
 80077ea:	80fb      	strh	r3, [r7, #6]
 80077ec:	460b      	mov	r3, r1
 80077ee:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	603a      	str	r2, [r7, #0]
 8007806:	80fb      	strh	r3, [r7, #6]
 8007808:	460b      	mov	r3, r1
 800780a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	603a      	str	r2, [r7, #0]
 8007822:	80fb      	strh	r3, [r7, #6]
 8007824:	460b      	mov	r3, r1
 8007826:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4603      	mov	r3, r0
 800783e:	80fb      	strh	r3, [r7, #6]
 8007840:	460b      	mov	r3, r1
 8007842:	717b      	strb	r3, [r7, #5]
 8007844:	4613      	mov	r3, r2
 8007846:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007854:	b490      	push	{r4, r7}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	80fb      	strh	r3, [r7, #6]
 8007866:	4603      	mov	r3, r0
 8007868:	80bb      	strh	r3, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	807b      	strh	r3, [r7, #2]
 800786e:	4613      	mov	r3, r2
 8007870:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bc90      	pop	{r4, r7}
 800787a:	4770      	bx	lr

0800787c <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	4603      	mov	r3, r0
 800789c:	81fb      	strh	r3, [r7, #14]
 800789e:	460b      	mov	r3, r1
 80078a0:	81bb      	strh	r3, [r7, #12]
 80078a2:	4613      	mov	r3, r2
 80078a4:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 80078b2:	b490      	push	{r4, r7}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	461a      	mov	r2, r3
 80078c0:	4623      	mov	r3, r4
 80078c2:	80fb      	strh	r3, [r7, #6]
 80078c4:	4603      	mov	r3, r0
 80078c6:	717b      	strb	r3, [r7, #5]
 80078c8:	460b      	mov	r3, r1
 80078ca:	807b      	strh	r3, [r7, #2]
 80078cc:	4613      	mov	r3, r2
 80078ce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc90      	pop	{r4, r7}
 80078d8:	4770      	bx	lr

080078da <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	4603      	mov	r3, r0
 80078e4:	81fb      	strh	r3, [r7, #14]
 80078e6:	460b      	mov	r3, r1
 80078e8:	81bb      	strh	r3, [r7, #12]
 80078ea:	4613      	mov	r3, r2
 80078ec:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	4603      	mov	r3, r0
 8007902:	80fb      	strh	r3, [r7, #6]
 8007904:	460b      	mov	r3, r1
 8007906:	80bb      	strh	r3, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	603a      	str	r2, [r7, #0]
 8007922:	80fb      	strh	r3, [r7, #6]
 8007924:	460b      	mov	r3, r1
 8007926:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800794a:	b490      	push	{r4, r7}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	461a      	mov	r2, r3
 8007958:	4623      	mov	r3, r4
 800795a:	80fb      	strh	r3, [r7, #6]
 800795c:	4603      	mov	r3, r0
 800795e:	80bb      	strh	r3, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
 8007964:	4613      	mov	r3, r2
 8007966:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bc90      	pop	{r4, r7}
 8007970:	4770      	bx	lr

08007972 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	4603      	mov	r3, r0
 800797a:	460a      	mov	r2, r1
 800797c:	80fb      	strh	r3, [r7, #6]
 800797e:	4613      	mov	r3, r2
 8007980:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	4603      	mov	r3, r0
 8007996:	603a      	str	r2, [r7, #0]
 8007998:	80fb      	strh	r3, [r7, #6]
 800799a:	460b      	mov	r3, r1
 800799c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80079aa:	b490      	push	{r4, r7}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	4604      	mov	r4, r0
 80079b2:	4608      	mov	r0, r1
 80079b4:	4611      	mov	r1, r2
 80079b6:	461a      	mov	r2, r3
 80079b8:	4623      	mov	r3, r4
 80079ba:	80fb      	strh	r3, [r7, #6]
 80079bc:	4603      	mov	r3, r0
 80079be:	717b      	strb	r3, [r7, #5]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
 80079c4:	4613      	mov	r3, r2
 80079c6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc90      	pop	{r4, r7}
 80079d0:	4770      	bx	lr

080079d2 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80079d2:	b490      	push	{r4, r7}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	461a      	mov	r2, r3
 80079e0:	4623      	mov	r3, r4
 80079e2:	80fb      	strh	r3, [r7, #6]
 80079e4:	4603      	mov	r3, r0
 80079e6:	717b      	strb	r3, [r7, #5]
 80079e8:	460b      	mov	r3, r1
 80079ea:	807b      	strh	r3, [r7, #2]
 80079ec:	4613      	mov	r3, r2
 80079ee:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc90      	pop	{r4, r7}
 80079f8:	4770      	bx	lr

080079fa <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	4603      	mov	r3, r0
 8007a02:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	603a      	str	r2, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	603a      	str	r2, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	603a      	str	r2, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
 8007a84:	460b      	mov	r3, r1
 8007a86:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	2218      	movs	r2, #24
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 ff03 	bl	80088b2 <memset>
  rq.ogf = 0x03;
 8007aac:	2303      	movs	r3, #3
 8007aae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ab4:	1dfb      	adds	r3, r7, #7
 8007ab6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007abc:	f107 0308 	add.w	r3, r7, #8
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fa2c 	bl	8007f20 <hci_send_req>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da01      	bge.n	8007ad2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ace:	23ff      	movs	r3, #255	; 0xff
 8007ad0:	e005      	b.n	8007ade <hci_reset+0x4a>
  if (status) {
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <hci_reset+0x48>
    return status;
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	e000      	b.n	8007ade <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b0cc      	sub	sp, #304	; 0x130
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	4602      	mov	r2, r0
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af6:	6019      	str	r1, [r3, #0]
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b00:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	2204      	movs	r2, #4
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fecd 	bl	80088b2 <memset>
  uint8_t index_input = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b2a:	8812      	ldrh	r2, [r2, #0]
 8007b2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b2e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007b32:	3302      	adds	r3, #2
 8007b34:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b3c:	2218      	movs	r2, #24
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 feb6 	bl	80088b2 <memset>
  rq.ogf = 0x05;
 8007b46:	2305      	movs	r3, #5
 8007b48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8007b4c:	2305      	movs	r3, #5
 8007b4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b5a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007b5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007b62:	f107 0308 	add.w	r3, r7, #8
 8007b66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f9d2 	bl	8007f20 <hci_send_req>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da01      	bge.n	8007b86 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 8007b82:	23ff      	movs	r3, #255	; 0xff
 8007b84:	e019      	b.n	8007bba <hci_read_rssi+0xd4>
  if (resp.Status) {
 8007b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <hci_read_rssi+0xba>
    return resp.Status;
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	e00c      	b.n	8007bba <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 8007ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007ba8:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0cc      	sub	sp, #304	; 0x130
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4602      	mov	r2, r0
 8007bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd4:	6019      	str	r1, [r3, #0]
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bde:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007be0:	f107 030c 	add.w	r3, r7, #12
 8007be4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bec:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8007bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c02:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c0a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8007c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c26:	1c58      	adds	r0, r3, #1
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c30:	221f      	movs	r2, #31
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	f000 feb2 	bl	800899c <memcpy>
  }
  index_input += 31;
 8007c38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007c3c:	331f      	adds	r3, #31
 8007c3e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007c42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c46:	2218      	movs	r2, #24
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fe31 	bl	80088b2 <memset>
  rq.ogf = 0x08;
 8007c50:	2308      	movs	r3, #8
 8007c52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007c56:	2309      	movs	r3, #9
 8007c58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c64:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007c68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c6c:	f107 030b 	add.w	r3, r7, #11
 8007c70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f94d 	bl	8007f20 <hci_send_req>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da01      	bge.n	8007c90 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8007c8c:	23ff      	movs	r3, #255	; 0xff
 8007c8e:	e00d      	b.n	8007cac <hci_le_set_scan_response_data+0xe8>
  if (status) {
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <hci_le_set_scan_response_data+0xe6>
    return status;
 8007c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	e000      	b.n	8007cac <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b08c      	sub	sp, #48	; 0x30
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	2209      	movs	r2, #9
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fdf3 	bl	80088b2 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ccc:	f107 0318 	add.w	r3, r7, #24
 8007cd0:	2218      	movs	r2, #24
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fdec 	bl	80088b2 <memset>
  rq.ogf = 0x08;
 8007cda:	2308      	movs	r3, #8
 8007cdc:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8007cde:	2318      	movs	r3, #24
 8007ce0:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8007ce8:	2309      	movs	r3, #9
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8007cec:	f107 0318 	add.w	r3, r7, #24
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f914 	bl	8007f20 <hci_send_req>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	da01      	bge.n	8007d02 <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8007cfe:	23ff      	movs	r3, #255	; 0xff
 8007d00:	e00d      	b.n	8007d1e <hci_le_rand+0x68>
  if (resp.Status) {
 8007d02:	7b3b      	ldrb	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <hci_le_rand+0x56>
    return resp.Status;
 8007d08:	7b3b      	ldrb	r3, [r7, #12]
 8007d0a:	e008      	b.n	8007d1e <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f107 030d 	add.w	r3, r7, #13
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	6011      	str	r1, [r2, #0]
 8007d1a:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3730      	adds	r7, #48	; 0x30
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3308      	adds	r3, #8
 8007d32:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d001      	beq.n	8007d40 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e00c      	b.n	8007d5a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3302      	adds	r3, #2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007d4e:	3b03      	subs	r3, #3
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d001      	beq.n	8007d58 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8007d54:	2302      	movs	r3, #2
 8007d56:	e000      	b.n	8007d5a <verify_packet+0x34>
  
  return 0;      
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b0a6      	sub	sp, #152	; 0x98
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	4603      	mov	r3, r0
 8007d72:	81fb      	strh	r3, [r7, #14]
 8007d74:	460b      	mov	r3, r1
 8007d76:	81bb      	strh	r3, [r7, #12]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007d7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d84:	b21a      	sxth	r2, r3
 8007d86:	89fb      	ldrh	r3, [r7, #14]
 8007d88:	029b      	lsls	r3, r3, #10
 8007d8a:	b21b      	sxth	r3, r3
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	b21b      	sxth	r3, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007d9c:	f107 0318 	add.w	r3, r7, #24
 8007da0:	3301      	adds	r3, #1
 8007da2:	461a      	mov	r2, r3
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	8819      	ldrh	r1, [r3, #0]
 8007daa:	789b      	ldrb	r3, [r3, #2]
 8007dac:	8011      	strh	r1, [r2, #0]
 8007dae:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007db0:	f107 0318 	add.w	r3, r7, #24
 8007db4:	3304      	adds	r3, #4
 8007db6:	7afa      	ldrb	r2, [r7, #11]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fdee 	bl	800899c <memcpy>
  
  if (hciContext.io.Send)
 8007dc0:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <send_cmd+0x7c>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8007dc8:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <send_cmd+0x7c>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	7afa      	ldrb	r2, [r7, #11]
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	3204      	adds	r2, #4
 8007dd2:	b291      	uxth	r1, r2
 8007dd4:	f107 0218 	add.w	r2, r7, #24
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3798      	adds	r7, #152	; 0x98
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	2000088c 	.word	0x2000088c

08007de8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8007df2:	e00a      	b.n	8007e0a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6838      	ldr	r0, [r7, #0]
 8007dfc:	f000 fae8 	bl	80083d0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa4f 	bl	80082a8 <list_insert_head>
  while (!list_is_empty(src_list))
 8007e0a:	6838      	ldr	r0, [r7, #0]
 8007e0c:	f000 fa2a 	bl	8008264 <list_is_empty>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0ee      	beq.n	8007df4 <move_list+0xc>
  }
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007e26:	e009      	b.n	8007e3c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007e28:	1d3b      	adds	r3, r7, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4809      	ldr	r0, [pc, #36]	; (8007e54 <free_event_list+0x34>)
 8007e2e:	f000 faa8 	bl	8008382 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4619      	mov	r1, r3
 8007e36:	4808      	ldr	r0, [pc, #32]	; (8007e58 <free_event_list+0x38>)
 8007e38:	f000 fa5c 	bl	80082f4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007e3c:	4806      	ldr	r0, [pc, #24]	; (8007e58 <free_event_list+0x38>)
 8007e3e:	f000 faee 	bl	800841e <list_get_size>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	ddef      	ble.n	8007e28 <free_event_list+0x8>
  }
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	2000030c 	.word	0x2000030c
 8007e58:	20000304 	.word	0x20000304

08007e5c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8007e6c:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <hci_init+0x74>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8007e72:	4818      	ldr	r0, [pc, #96]	; (8007ed4 <hci_init+0x78>)
 8007e74:	f000 f9e6 	bl	8008244 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8007e78:	4817      	ldr	r0, [pc, #92]	; (8007ed8 <hci_init+0x7c>)
 8007e7a:	f000 f9e3 	bl	8008244 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8007e7e:	f7f9 fbe5 	bl	800164c <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
 8007e86:	e00c      	b.n	8007ea2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	228c      	movs	r2, #140	; 0x8c
 8007e8c:	fb02 f303 	mul.w	r3, r2, r3
 8007e90:	4a12      	ldr	r2, [pc, #72]	; (8007edc <hci_init+0x80>)
 8007e92:	4413      	add	r3, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	480f      	ldr	r0, [pc, #60]	; (8007ed4 <hci_init+0x78>)
 8007e98:	f000 fa2c 	bl	80082f4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d9ef      	bls.n	8007e88 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8007ea8:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <hci_init+0x74>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <hci_init+0x5c>
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <hci_init+0x74>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <hci_init+0x74>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <hci_init+0x6a>
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <hci_init+0x74>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4798      	blx	r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	2000088c 	.word	0x2000088c
 8007ed4:	20000304 	.word	0x20000304
 8007ed8:	2000030c 	.word	0x2000030c
 8007edc:	20000314 	.word	0x20000314

08007ee0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a0b      	ldr	r2, [pc, #44]	; (8007f1c <hci_register_io_bus+0x3c>)
 8007eee:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <hci_register_io_bus+0x3c>)
 8007ef6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	4a07      	ldr	r2, [pc, #28]	; (8007f1c <hci_register_io_bus+0x3c>)
 8007efe:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <hci_register_io_bus+0x3c>)
 8007f06:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	4a03      	ldr	r2, [pc, #12]	; (8007f1c <hci_register_io_bus+0x3c>)
 8007f0e:	6093      	str	r3, [r2, #8]
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	2000088c 	.word	0x2000088c

08007f20 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08e      	sub	sp, #56	; 0x38
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f36:	b21a      	sxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f978 	bl	8008244 <list_init_head>

  free_event_list();
 8007f54:	f7ff ff64 	bl	8007e20 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8818      	ldrh	r0, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8859      	ldrh	r1, [r3, #2]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f7ff fefd 	bl	8007d68 <send_cmd>
  
  if (async)
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <hci_send_req+0x58>
  {
    return 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e0e2      	b.n	800813e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8007f78:	f7fa f8fa 	bl	8002170 <HAL_GetTick>
 8007f7c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007f7e:	f7fa f8f7 	bl	8002170 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f8c:	f200 80b3 	bhi.w	80080f6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007f90:	486d      	ldr	r0, [pc, #436]	; (8008148 <hci_send_req+0x228>)
 8007f92:	f000 f967 	bl	8008264 <list_is_empty>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d000      	beq.n	8007f9e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007f9c:	e7ef      	b.n	8007f7e <hci_send_req+0x5e>
      {
        break;
 8007f9e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4868      	ldr	r0, [pc, #416]	; (8008148 <hci_send_req+0x228>)
 8007fa8:	f000 f9eb 	bl	8008382 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d17f      	bne.n	80080ba <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	3303      	adds	r3, #3
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007fce:	3b03      	subs	r3, #3
 8007fd0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fd8:	d04c      	beq.n	8008074 <hci_send_req+0x154>
 8007fda:	2b3e      	cmp	r3, #62	; 0x3e
 8007fdc:	dc68      	bgt.n	80080b0 <hci_send_req+0x190>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	f000 808b 	beq.w	80080fa <hci_send_req+0x1da>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	dc63      	bgt.n	80080b0 <hci_send_req+0x190>
 8007fe8:	2b0e      	cmp	r3, #14
 8007fea:	d023      	beq.n	8008034 <hci_send_req+0x114>
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d15f      	bne.n	80080b0 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d17e      	bne.n	80080fe <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b0f      	cmp	r3, #15
 8008006:	d004      	beq.n	8008012 <hci_send_req+0xf2>
          if (cs->status) {
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d051      	beq.n	80080b4 <hci_send_req+0x194>
            goto failed;
 8008010:	e078      	b.n	8008104 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	429a      	cmp	r2, r3
 800801a:	bf28      	it	cs
 800801c:	461a      	movcs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6918      	ldr	r0, [r3, #16]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	461a      	mov	r2, r3
 800802c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800802e:	f000 fcb5 	bl	800899c <memcpy>
        goto done;
 8008032:	e078      	b.n	8008126 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800803e:	b29b      	uxth	r3, r3
 8008040:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008042:	429a      	cmp	r2, r3
 8008044:	d15d      	bne.n	8008102 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	3303      	adds	r3, #3
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	3b03      	subs	r3, #3
 8008050:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf28      	it	cs
 800805c:	461a      	movcs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6918      	ldr	r0, [r3, #16]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	461a      	mov	r2, r3
 800806c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800806e:	f000 fc95 	bl	800899c <memcpy>
        goto done;
 8008072:	e058      	b.n	8008126 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d118      	bne.n	80080b8 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	3b01      	subs	r3, #1
 800808a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695a      	ldr	r2, [r3, #20]
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	429a      	cmp	r2, r3
 8008094:	bf28      	it	cs
 8008096:	461a      	movcs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6918      	ldr	r0, [r3, #16]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	461a      	mov	r2, r3
 80080aa:	f000 fc77 	bl	800899c <memcpy>
        goto done;
 80080ae:	e03a      	b.n	8008126 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <hci_send_req+0x19a>
          break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <hci_send_req+0x19a>
          break;
 80080b8:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80080ba:	4824      	ldr	r0, [pc, #144]	; (800814c <hci_send_req+0x22c>)
 80080bc:	f000 f8d2 	bl	8008264 <list_is_empty>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <hci_send_req+0x1c2>
 80080c6:	4820      	ldr	r0, [pc, #128]	; (8008148 <hci_send_req+0x228>)
 80080c8:	f000 f8cc 	bl	8008264 <list_is_empty>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	4619      	mov	r1, r3
 80080d6:	481d      	ldr	r0, [pc, #116]	; (800814c <hci_send_req+0x22c>)
 80080d8:	f000 f90c 	bl	80082f4 <list_insert_tail>
      hciReadPacket=NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	e008      	b.n	80080f4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f902 	bl	80082f4 <list_insert_tail>
      hciReadPacket=NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]
  {
 80080f4:	e740      	b.n	8007f78 <hci_send_req+0x58>
        goto failed;
 80080f6:	bf00      	nop
 80080f8:	e004      	b.n	8008104 <hci_send_req+0x1e4>
        goto failed;
 80080fa:	bf00      	nop
 80080fc:	e002      	b.n	8008104 <hci_send_req+0x1e4>
          goto failed;
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <hci_send_req+0x1e4>
          goto failed;
 8008102:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	4619      	mov	r1, r3
 800810e:	480f      	ldr	r0, [pc, #60]	; (800814c <hci_send_req+0x22c>)
 8008110:	f000 f8ca 	bl	80082a8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008114:	f107 0308 	add.w	r3, r7, #8
 8008118:	4619      	mov	r1, r3
 800811a:	480b      	ldr	r0, [pc, #44]	; (8008148 <hci_send_req+0x228>)
 800811c:	f7ff fe64 	bl	8007de8 <move_list>

  return -1;
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	e00b      	b.n	800813e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	4619      	mov	r1, r3
 800812a:	4808      	ldr	r0, [pc, #32]	; (800814c <hci_send_req+0x22c>)
 800812c:	f000 f8bc 	bl	80082a8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4619      	mov	r1, r3
 8008136:	4804      	ldr	r0, [pc, #16]	; (8008148 <hci_send_req+0x228>)
 8008138:	f7ff fe56 	bl	8007de8 <move_list>

  return 0;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3738      	adds	r7, #56	; 0x38
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	2000030c 	.word	0x2000030c
 800814c:	20000304 	.word	0x20000304

08008150 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800815a:	e013      	b.n	8008184 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800815c:	1d3b      	adds	r3, r7, #4
 800815e:	4619      	mov	r1, r3
 8008160:	480e      	ldr	r0, [pc, #56]	; (800819c <hci_user_evt_proc+0x4c>)
 8008162:	f000 f90e 	bl	8008382 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008166:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <hci_user_evt_proc+0x50>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <hci_user_evt_proc+0x50>)
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	3208      	adds	r2, #8
 8008176:	4610      	mov	r0, r2
 8008178:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4619      	mov	r1, r3
 800817e:	4809      	ldr	r0, [pc, #36]	; (80081a4 <hci_user_evt_proc+0x54>)
 8008180:	f000 f8b8 	bl	80082f4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008184:	4805      	ldr	r0, [pc, #20]	; (800819c <hci_user_evt_proc+0x4c>)
 8008186:	f000 f86d 	bl	8008264 <list_is_empty>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0e5      	beq.n	800815c <hci_user_evt_proc+0xc>
  }
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	2000030c 	.word	0x2000030c
 80081a0:	2000088c 	.word	0x2000088c
 80081a4:	20000304 	.word	0x20000304

080081a8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80081b8:	481f      	ldr	r0, [pc, #124]	; (8008238 <hci_notify_asynch_evt+0x90>)
 80081ba:	f000 f853 	bl	8008264 <list_is_empty>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d132      	bne.n	800822a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80081c4:	f107 030c 	add.w	r3, r7, #12
 80081c8:	4619      	mov	r1, r3
 80081ca:	481b      	ldr	r0, [pc, #108]	; (8008238 <hci_notify_asynch_evt+0x90>)
 80081cc:	f000 f8d9 	bl	8008382 <list_remove_head>
    
    if (hciContext.io.Receive)
 80081d0:	4b1a      	ldr	r3, [pc, #104]	; (800823c <hci_notify_asynch_evt+0x94>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d02a      	beq.n	800822e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80081d8:	4b18      	ldr	r3, [pc, #96]	; (800823c <hci_notify_asynch_evt+0x94>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	3208      	adds	r2, #8
 80081e0:	2180      	movs	r1, #128	; 0x80
 80081e2:	4610      	mov	r0, r2
 80081e4:	4798      	blx	r3
 80081e6:	4603      	mov	r3, r0
 80081e8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80081ea:	7cfb      	ldrb	r3, [r7, #19]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d016      	beq.n	800821e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	7cfa      	ldrb	r2, [r7, #19]
 80081f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fd93 	bl	8007d26 <verify_packet>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4619      	mov	r1, r3
 800820a:	480d      	ldr	r0, [pc, #52]	; (8008240 <hci_notify_asynch_evt+0x98>)
 800820c:	f000 f872 	bl	80082f4 <list_insert_tail>
 8008210:	e00d      	b.n	800822e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4619      	mov	r1, r3
 8008216:	4808      	ldr	r0, [pc, #32]	; (8008238 <hci_notify_asynch_evt+0x90>)
 8008218:	f000 f846 	bl	80082a8 <list_insert_head>
 800821c:	e007      	b.n	800822e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4619      	mov	r1, r3
 8008222:	4805      	ldr	r0, [pc, #20]	; (8008238 <hci_notify_asynch_evt+0x90>)
 8008224:	f000 f840 	bl	80082a8 <list_insert_head>
 8008228:	e001      	b.n	800822e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800822e:	697b      	ldr	r3, [r7, #20]
  
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000304 	.word	0x20000304
 800823c:	2000088c 	.word	0x2000088c
 8008240:	2000030c 	.word	0x2000030c

08008244 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	605a      	str	r2, [r3, #4]
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800826c:	f3ef 8310 	mrs	r3, PRIMASK
 8008270:	60fb      	str	r3, [r7, #12]
  return(result);
 8008272:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008276:	b672      	cpsid	i
}
 8008278:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d102      	bne.n	800828a <list_is_empty+0x26>
  {
    return_value = 1;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
 8008288:	e001      	b.n	800828e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f383 8810 	msr	PRIMASK, r3
}
 8008298:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
}
 800829c:	4618      	mov	r0, r3
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80082b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80082ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082bc:	b672      	cpsid	i
}
 80082be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f383 8810 	msr	PRIMASK, r3
}
 80082e6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008302:	60fb      	str	r3, [r7, #12]
  return(result);
 8008304:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008308:	b672      	cpsid	i
}
 800830a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f383 8810 	msr	PRIMASK, r3
}
 8008332:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008348:	f3ef 8310 	mrs	r3, PRIMASK
 800834c:	60fb      	str	r3, [r7, #12]
  return(result);
 800834e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008352:	b672      	cpsid	i
}
 8008354:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6852      	ldr	r2, [r2, #4]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f383 8810 	msr	PRIMASK, r3
}
 8008374:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008376:	bf00      	nop
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800838c:	f3ef 8310 	mrs	r3, PRIMASK
 8008390:	60fb      	str	r3, [r7, #12]
  return(result);
 8008392:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008396:	b672      	cpsid	i
}
 8008398:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff ffca 	bl	8008340 <list_remove_node>
  (*node)->next = NULL;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80083c8:	bf00      	nop
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083da:	f3ef 8310 	mrs	r3, PRIMASK
 80083de:	60fb      	str	r3, [r7, #12]
  return(result);
 80083e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80083e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083e4:	b672      	cpsid	i
}
 80083e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff ffa3 	bl	8008340 <list_remove_node>
  (*node)->next = NULL;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2200      	movs	r2, #0
 8008408:	605a      	str	r2, [r3, #4]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f383 8810 	msr	PRIMASK, r3
}
 8008414:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008416:	bf00      	nop
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800841e:	b480      	push	{r7}
 8008420:	b089      	sub	sp, #36	; 0x24
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800842a:	f3ef 8310 	mrs	r3, PRIMASK
 800842e:	613b      	str	r3, [r7, #16]
  return(result);
 8008430:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008434:	b672      	cpsid	i
}
 8008436:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800843e:	e005      	b.n	800844c <list_get_size+0x2e>
  {
    size++;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d1f5      	bne.n	8008440 <list_get_size+0x22>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f383 8810 	msr	PRIMASK, r3
}
 800845e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008460:	69fb      	ldr	r3, [r7, #28]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3724      	adds	r7, #36	; 0x24
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <__itoa>:
 800846e:	1e93      	subs	r3, r2, #2
 8008470:	2b22      	cmp	r3, #34	; 0x22
 8008472:	b510      	push	{r4, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	d904      	bls.n	8008482 <__itoa+0x14>
 8008478:	2300      	movs	r3, #0
 800847a:	700b      	strb	r3, [r1, #0]
 800847c:	461c      	mov	r4, r3
 800847e:	4620      	mov	r0, r4
 8008480:	bd10      	pop	{r4, pc}
 8008482:	2a0a      	cmp	r2, #10
 8008484:	d109      	bne.n	800849a <__itoa+0x2c>
 8008486:	2800      	cmp	r0, #0
 8008488:	da07      	bge.n	800849a <__itoa+0x2c>
 800848a:	232d      	movs	r3, #45	; 0x2d
 800848c:	700b      	strb	r3, [r1, #0]
 800848e:	4240      	negs	r0, r0
 8008490:	2101      	movs	r1, #1
 8008492:	4421      	add	r1, r4
 8008494:	f000 f806 	bl	80084a4 <__utoa>
 8008498:	e7f1      	b.n	800847e <__itoa+0x10>
 800849a:	2100      	movs	r1, #0
 800849c:	e7f9      	b.n	8008492 <__itoa+0x24>

0800849e <itoa>:
 800849e:	f7ff bfe6 	b.w	800846e <__itoa>
	...

080084a4 <__utoa>:
 80084a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a6:	4c1f      	ldr	r4, [pc, #124]	; (8008524 <__utoa+0x80>)
 80084a8:	b08b      	sub	sp, #44	; 0x2c
 80084aa:	4605      	mov	r5, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	466e      	mov	r6, sp
 80084b0:	f104 0c20 	add.w	ip, r4, #32
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	6861      	ldr	r1, [r4, #4]
 80084b8:	4637      	mov	r7, r6
 80084ba:	c703      	stmia	r7!, {r0, r1}
 80084bc:	3408      	adds	r4, #8
 80084be:	4564      	cmp	r4, ip
 80084c0:	463e      	mov	r6, r7
 80084c2:	d1f7      	bne.n	80084b4 <__utoa+0x10>
 80084c4:	7921      	ldrb	r1, [r4, #4]
 80084c6:	7139      	strb	r1, [r7, #4]
 80084c8:	1e91      	subs	r1, r2, #2
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	6038      	str	r0, [r7, #0]
 80084ce:	2922      	cmp	r1, #34	; 0x22
 80084d0:	f04f 0100 	mov.w	r1, #0
 80084d4:	d904      	bls.n	80084e0 <__utoa+0x3c>
 80084d6:	7019      	strb	r1, [r3, #0]
 80084d8:	460b      	mov	r3, r1
 80084da:	4618      	mov	r0, r3
 80084dc:	b00b      	add	sp, #44	; 0x2c
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	1e58      	subs	r0, r3, #1
 80084e2:	4684      	mov	ip, r0
 80084e4:	fbb5 f7f2 	udiv	r7, r5, r2
 80084e8:	fb02 5617 	mls	r6, r2, r7, r5
 80084ec:	3628      	adds	r6, #40	; 0x28
 80084ee:	446e      	add	r6, sp
 80084f0:	460c      	mov	r4, r1
 80084f2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80084f6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80084fa:	462e      	mov	r6, r5
 80084fc:	42b2      	cmp	r2, r6
 80084fe:	f101 0101 	add.w	r1, r1, #1
 8008502:	463d      	mov	r5, r7
 8008504:	d9ee      	bls.n	80084e4 <__utoa+0x40>
 8008506:	2200      	movs	r2, #0
 8008508:	545a      	strb	r2, [r3, r1]
 800850a:	1919      	adds	r1, r3, r4
 800850c:	1aa5      	subs	r5, r4, r2
 800850e:	42aa      	cmp	r2, r5
 8008510:	dae3      	bge.n	80084da <__utoa+0x36>
 8008512:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008516:	780e      	ldrb	r6, [r1, #0]
 8008518:	7006      	strb	r6, [r0, #0]
 800851a:	3201      	adds	r2, #1
 800851c:	f801 5901 	strb.w	r5, [r1], #-1
 8008520:	e7f4      	b.n	800850c <__utoa+0x68>
 8008522:	bf00      	nop
 8008524:	08008d04 	.word	0x08008d04

08008528 <__sflush_r>:
 8008528:	898a      	ldrh	r2, [r1, #12]
 800852a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	4605      	mov	r5, r0
 8008530:	0710      	lsls	r0, r2, #28
 8008532:	460c      	mov	r4, r1
 8008534:	d458      	bmi.n	80085e8 <__sflush_r+0xc0>
 8008536:	684b      	ldr	r3, [r1, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	dc05      	bgt.n	8008548 <__sflush_r+0x20>
 800853c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	dc02      	bgt.n	8008548 <__sflush_r+0x20>
 8008542:	2000      	movs	r0, #0
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800854a:	2e00      	cmp	r6, #0
 800854c:	d0f9      	beq.n	8008542 <__sflush_r+0x1a>
 800854e:	2300      	movs	r3, #0
 8008550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008554:	682f      	ldr	r7, [r5, #0]
 8008556:	6a21      	ldr	r1, [r4, #32]
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	d032      	beq.n	80085c2 <__sflush_r+0x9a>
 800855c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	075a      	lsls	r2, r3, #29
 8008562:	d505      	bpl.n	8008570 <__sflush_r+0x48>
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	1ac0      	subs	r0, r0, r3
 8008568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800856a:	b10b      	cbz	r3, 8008570 <__sflush_r+0x48>
 800856c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800856e:	1ac0      	subs	r0, r0, r3
 8008570:	2300      	movs	r3, #0
 8008572:	4602      	mov	r2, r0
 8008574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008576:	6a21      	ldr	r1, [r4, #32]
 8008578:	4628      	mov	r0, r5
 800857a:	47b0      	blx	r6
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	d106      	bne.n	8008590 <__sflush_r+0x68>
 8008582:	6829      	ldr	r1, [r5, #0]
 8008584:	291d      	cmp	r1, #29
 8008586:	d82b      	bhi.n	80085e0 <__sflush_r+0xb8>
 8008588:	4a29      	ldr	r2, [pc, #164]	; (8008630 <__sflush_r+0x108>)
 800858a:	410a      	asrs	r2, r1
 800858c:	07d6      	lsls	r6, r2, #31
 800858e:	d427      	bmi.n	80085e0 <__sflush_r+0xb8>
 8008590:	2200      	movs	r2, #0
 8008592:	6062      	str	r2, [r4, #4]
 8008594:	04d9      	lsls	r1, r3, #19
 8008596:	6922      	ldr	r2, [r4, #16]
 8008598:	6022      	str	r2, [r4, #0]
 800859a:	d504      	bpl.n	80085a6 <__sflush_r+0x7e>
 800859c:	1c42      	adds	r2, r0, #1
 800859e:	d101      	bne.n	80085a4 <__sflush_r+0x7c>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b903      	cbnz	r3, 80085a6 <__sflush_r+0x7e>
 80085a4:	6560      	str	r0, [r4, #84]	; 0x54
 80085a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085a8:	602f      	str	r7, [r5, #0]
 80085aa:	2900      	cmp	r1, #0
 80085ac:	d0c9      	beq.n	8008542 <__sflush_r+0x1a>
 80085ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d002      	beq.n	80085bc <__sflush_r+0x94>
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 f9fe 	bl	80089b8 <_free_r>
 80085bc:	2000      	movs	r0, #0
 80085be:	6360      	str	r0, [r4, #52]	; 0x34
 80085c0:	e7c0      	b.n	8008544 <__sflush_r+0x1c>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b0      	blx	r6
 80085c8:	1c41      	adds	r1, r0, #1
 80085ca:	d1c8      	bne.n	800855e <__sflush_r+0x36>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0c5      	beq.n	800855e <__sflush_r+0x36>
 80085d2:	2b1d      	cmp	r3, #29
 80085d4:	d001      	beq.n	80085da <__sflush_r+0xb2>
 80085d6:	2b16      	cmp	r3, #22
 80085d8:	d101      	bne.n	80085de <__sflush_r+0xb6>
 80085da:	602f      	str	r7, [r5, #0]
 80085dc:	e7b1      	b.n	8008542 <__sflush_r+0x1a>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	e7ad      	b.n	8008544 <__sflush_r+0x1c>
 80085e8:	690f      	ldr	r7, [r1, #16]
 80085ea:	2f00      	cmp	r7, #0
 80085ec:	d0a9      	beq.n	8008542 <__sflush_r+0x1a>
 80085ee:	0793      	lsls	r3, r2, #30
 80085f0:	680e      	ldr	r6, [r1, #0]
 80085f2:	bf08      	it	eq
 80085f4:	694b      	ldreq	r3, [r1, #20]
 80085f6:	600f      	str	r7, [r1, #0]
 80085f8:	bf18      	it	ne
 80085fa:	2300      	movne	r3, #0
 80085fc:	eba6 0807 	sub.w	r8, r6, r7
 8008600:	608b      	str	r3, [r1, #8]
 8008602:	f1b8 0f00 	cmp.w	r8, #0
 8008606:	dd9c      	ble.n	8008542 <__sflush_r+0x1a>
 8008608:	6a21      	ldr	r1, [r4, #32]
 800860a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800860c:	4643      	mov	r3, r8
 800860e:	463a      	mov	r2, r7
 8008610:	4628      	mov	r0, r5
 8008612:	47b0      	blx	r6
 8008614:	2800      	cmp	r0, #0
 8008616:	dc06      	bgt.n	8008626 <__sflush_r+0xfe>
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e78e      	b.n	8008544 <__sflush_r+0x1c>
 8008626:	4407      	add	r7, r0
 8008628:	eba8 0800 	sub.w	r8, r8, r0
 800862c:	e7e9      	b.n	8008602 <__sflush_r+0xda>
 800862e:	bf00      	nop
 8008630:	dfbffffe 	.word	0xdfbffffe

08008634 <_fflush_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	690b      	ldr	r3, [r1, #16]
 8008638:	4605      	mov	r5, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b913      	cbnz	r3, 8008644 <_fflush_r+0x10>
 800863e:	2500      	movs	r5, #0
 8008640:	4628      	mov	r0, r5
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	b118      	cbz	r0, 800864e <_fflush_r+0x1a>
 8008646:	6a03      	ldr	r3, [r0, #32]
 8008648:	b90b      	cbnz	r3, 800864e <_fflush_r+0x1a>
 800864a:	f000 f8a9 	bl	80087a0 <__sinit>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f3      	beq.n	800863e <_fflush_r+0xa>
 8008656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008658:	07d0      	lsls	r0, r2, #31
 800865a:	d404      	bmi.n	8008666 <_fflush_r+0x32>
 800865c:	0599      	lsls	r1, r3, #22
 800865e:	d402      	bmi.n	8008666 <_fflush_r+0x32>
 8008660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008662:	f000 f999 	bl	8008998 <__retarget_lock_acquire_recursive>
 8008666:	4628      	mov	r0, r5
 8008668:	4621      	mov	r1, r4
 800866a:	f7ff ff5d 	bl	8008528 <__sflush_r>
 800866e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008670:	07da      	lsls	r2, r3, #31
 8008672:	4605      	mov	r5, r0
 8008674:	d4e4      	bmi.n	8008640 <_fflush_r+0xc>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	059b      	lsls	r3, r3, #22
 800867a:	d4e1      	bmi.n	8008640 <_fflush_r+0xc>
 800867c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800867e:	f000 f98c 	bl	800899a <__retarget_lock_release_recursive>
 8008682:	e7dd      	b.n	8008640 <_fflush_r+0xc>

08008684 <fflush>:
 8008684:	4601      	mov	r1, r0
 8008686:	b920      	cbnz	r0, 8008692 <fflush+0xe>
 8008688:	4a04      	ldr	r2, [pc, #16]	; (800869c <fflush+0x18>)
 800868a:	4905      	ldr	r1, [pc, #20]	; (80086a0 <fflush+0x1c>)
 800868c:	4805      	ldr	r0, [pc, #20]	; (80086a4 <fflush+0x20>)
 800868e:	f000 b89f 	b.w	80087d0 <_fwalk_sglue>
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <fflush+0x24>)
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f7ff bfcd 	b.w	8008634 <_fflush_r>
 800869a:	bf00      	nop
 800869c:	2000003c 	.word	0x2000003c
 80086a0:	08008635 	.word	0x08008635
 80086a4:	20000048 	.word	0x20000048
 80086a8:	20000094 	.word	0x20000094

080086ac <std>:
 80086ac:	2300      	movs	r3, #0
 80086ae:	b510      	push	{r4, lr}
 80086b0:	4604      	mov	r4, r0
 80086b2:	e9c0 3300 	strd	r3, r3, [r0]
 80086b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ba:	6083      	str	r3, [r0, #8]
 80086bc:	8181      	strh	r1, [r0, #12]
 80086be:	6643      	str	r3, [r0, #100]	; 0x64
 80086c0:	81c2      	strh	r2, [r0, #14]
 80086c2:	6183      	str	r3, [r0, #24]
 80086c4:	4619      	mov	r1, r3
 80086c6:	2208      	movs	r2, #8
 80086c8:	305c      	adds	r0, #92	; 0x5c
 80086ca:	f000 f8f2 	bl	80088b2 <memset>
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <std+0x38>)
 80086d0:	6263      	str	r3, [r4, #36]	; 0x24
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <std+0x3c>)
 80086d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <std+0x40>)
 80086d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <std+0x44>)
 80086dc:	6224      	str	r4, [r4, #32]
 80086de:	6323      	str	r3, [r4, #48]	; 0x30
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	0800880d 	.word	0x0800880d
 80086e8:	0800882f 	.word	0x0800882f
 80086ec:	08008867 	.word	0x08008867
 80086f0:	0800888b 	.word	0x0800888b

080086f4 <stdio_exit_handler>:
 80086f4:	4a02      	ldr	r2, [pc, #8]	; (8008700 <stdio_exit_handler+0xc>)
 80086f6:	4903      	ldr	r1, [pc, #12]	; (8008704 <stdio_exit_handler+0x10>)
 80086f8:	4803      	ldr	r0, [pc, #12]	; (8008708 <stdio_exit_handler+0x14>)
 80086fa:	f000 b869 	b.w	80087d0 <_fwalk_sglue>
 80086fe:	bf00      	nop
 8008700:	2000003c 	.word	0x2000003c
 8008704:	08008635 	.word	0x08008635
 8008708:	20000048 	.word	0x20000048

0800870c <cleanup_stdio>:
 800870c:	6841      	ldr	r1, [r0, #4]
 800870e:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <cleanup_stdio+0x34>)
 8008710:	4299      	cmp	r1, r3
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
 8008716:	d001      	beq.n	800871c <cleanup_stdio+0x10>
 8008718:	f7ff ff8c 	bl	8008634 <_fflush_r>
 800871c:	68a1      	ldr	r1, [r4, #8]
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <cleanup_stdio+0x38>)
 8008720:	4299      	cmp	r1, r3
 8008722:	d002      	beq.n	800872a <cleanup_stdio+0x1e>
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff ff85 	bl	8008634 <_fflush_r>
 800872a:	68e1      	ldr	r1, [r4, #12]
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <cleanup_stdio+0x3c>)
 800872e:	4299      	cmp	r1, r3
 8008730:	d004      	beq.n	800873c <cleanup_stdio+0x30>
 8008732:	4620      	mov	r0, r4
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	f7ff bf7c 	b.w	8008634 <_fflush_r>
 800873c:	bd10      	pop	{r4, pc}
 800873e:	bf00      	nop
 8008740:	200008ac 	.word	0x200008ac
 8008744:	20000914 	.word	0x20000914
 8008748:	2000097c 	.word	0x2000097c

0800874c <global_stdio_init.part.0>:
 800874c:	b510      	push	{r4, lr}
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <global_stdio_init.part.0+0x30>)
 8008750:	4c0b      	ldr	r4, [pc, #44]	; (8008780 <global_stdio_init.part.0+0x34>)
 8008752:	4a0c      	ldr	r2, [pc, #48]	; (8008784 <global_stdio_init.part.0+0x38>)
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	4620      	mov	r0, r4
 8008758:	2200      	movs	r2, #0
 800875a:	2104      	movs	r1, #4
 800875c:	f7ff ffa6 	bl	80086ac <std>
 8008760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008764:	2201      	movs	r2, #1
 8008766:	2109      	movs	r1, #9
 8008768:	f7ff ffa0 	bl	80086ac <std>
 800876c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008770:	2202      	movs	r2, #2
 8008772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008776:	2112      	movs	r1, #18
 8008778:	f7ff bf98 	b.w	80086ac <std>
 800877c:	200009e4 	.word	0x200009e4
 8008780:	200008ac 	.word	0x200008ac
 8008784:	080086f5 	.word	0x080086f5

08008788 <__sfp_lock_acquire>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__sfp_lock_acquire+0x8>)
 800878a:	f000 b905 	b.w	8008998 <__retarget_lock_acquire_recursive>
 800878e:	bf00      	nop
 8008790:	200009ed 	.word	0x200009ed

08008794 <__sfp_lock_release>:
 8008794:	4801      	ldr	r0, [pc, #4]	; (800879c <__sfp_lock_release+0x8>)
 8008796:	f000 b900 	b.w	800899a <__retarget_lock_release_recursive>
 800879a:	bf00      	nop
 800879c:	200009ed 	.word	0x200009ed

080087a0 <__sinit>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	4604      	mov	r4, r0
 80087a4:	f7ff fff0 	bl	8008788 <__sfp_lock_acquire>
 80087a8:	6a23      	ldr	r3, [r4, #32]
 80087aa:	b11b      	cbz	r3, 80087b4 <__sinit+0x14>
 80087ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b0:	f7ff bff0 	b.w	8008794 <__sfp_lock_release>
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <__sinit+0x28>)
 80087b6:	6223      	str	r3, [r4, #32]
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <__sinit+0x2c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f5      	bne.n	80087ac <__sinit+0xc>
 80087c0:	f7ff ffc4 	bl	800874c <global_stdio_init.part.0>
 80087c4:	e7f2      	b.n	80087ac <__sinit+0xc>
 80087c6:	bf00      	nop
 80087c8:	0800870d 	.word	0x0800870d
 80087cc:	200009e4 	.word	0x200009e4

080087d0 <_fwalk_sglue>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	4607      	mov	r7, r0
 80087d6:	4688      	mov	r8, r1
 80087d8:	4614      	mov	r4, r2
 80087da:	2600      	movs	r6, #0
 80087dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e0:	f1b9 0901 	subs.w	r9, r9, #1
 80087e4:	d505      	bpl.n	80087f2 <_fwalk_sglue+0x22>
 80087e6:	6824      	ldr	r4, [r4, #0]
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d1f7      	bne.n	80087dc <_fwalk_sglue+0xc>
 80087ec:	4630      	mov	r0, r6
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d907      	bls.n	8008808 <_fwalk_sglue+0x38>
 80087f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087fc:	3301      	adds	r3, #1
 80087fe:	d003      	beq.n	8008808 <_fwalk_sglue+0x38>
 8008800:	4629      	mov	r1, r5
 8008802:	4638      	mov	r0, r7
 8008804:	47c0      	blx	r8
 8008806:	4306      	orrs	r6, r0
 8008808:	3568      	adds	r5, #104	; 0x68
 800880a:	e7e9      	b.n	80087e0 <_fwalk_sglue+0x10>

0800880c <__sread>:
 800880c:	b510      	push	{r4, lr}
 800880e:	460c      	mov	r4, r1
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	f000 f878 	bl	8008908 <_read_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	bfab      	itete	ge
 800881c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800881e:	89a3      	ldrhlt	r3, [r4, #12]
 8008820:	181b      	addge	r3, r3, r0
 8008822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008826:	bfac      	ite	ge
 8008828:	6563      	strge	r3, [r4, #84]	; 0x54
 800882a:	81a3      	strhlt	r3, [r4, #12]
 800882c:	bd10      	pop	{r4, pc}

0800882e <__swrite>:
 800882e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	461f      	mov	r7, r3
 8008834:	898b      	ldrh	r3, [r1, #12]
 8008836:	05db      	lsls	r3, r3, #23
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4616      	mov	r6, r2
 800883e:	d505      	bpl.n	800884c <__swrite+0x1e>
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	2302      	movs	r3, #2
 8008846:	2200      	movs	r2, #0
 8008848:	f000 f84c 	bl	80088e4 <_lseek_r>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	f000 b863 	b.w	800892c <_write_r>

08008866 <__sseek>:
 8008866:	b510      	push	{r4, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886e:	f000 f839 	bl	80088e4 <_lseek_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	bf15      	itete	ne
 8008878:	6560      	strne	r0, [r4, #84]	; 0x54
 800887a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800887e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strheq	r3, [r4, #12]
 8008884:	bf18      	it	ne
 8008886:	81a3      	strhne	r3, [r4, #12]
 8008888:	bd10      	pop	{r4, pc}

0800888a <__sclose>:
 800888a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888e:	f000 b819 	b.w	80088c4 <_close_r>

08008892 <memcmp>:
 8008892:	b510      	push	{r4, lr}
 8008894:	3901      	subs	r1, #1
 8008896:	4402      	add	r2, r0
 8008898:	4290      	cmp	r0, r2
 800889a:	d101      	bne.n	80088a0 <memcmp+0xe>
 800889c:	2000      	movs	r0, #0
 800889e:	e005      	b.n	80088ac <memcmp+0x1a>
 80088a0:	7803      	ldrb	r3, [r0, #0]
 80088a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	d001      	beq.n	80088ae <memcmp+0x1c>
 80088aa:	1b18      	subs	r0, r3, r4
 80088ac:	bd10      	pop	{r4, pc}
 80088ae:	3001      	adds	r0, #1
 80088b0:	e7f2      	b.n	8008898 <memcmp+0x6>

080088b2 <memset>:
 80088b2:	4402      	add	r2, r0
 80088b4:	4603      	mov	r3, r0
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d100      	bne.n	80088bc <memset+0xa>
 80088ba:	4770      	bx	lr
 80088bc:	f803 1b01 	strb.w	r1, [r3], #1
 80088c0:	e7f9      	b.n	80088b6 <memset+0x4>
	...

080088c4 <_close_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d06      	ldr	r5, [pc, #24]	; (80088e0 <_close_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7f9 fbb3 	bl	800203a <_close>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_close_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_close_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	200009e8 	.word	0x200009e8

080088e4 <_lseek_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_lseek_r+0x20>)
 80088e8:	4604      	mov	r4, r0
 80088ea:	4608      	mov	r0, r1
 80088ec:	4611      	mov	r1, r2
 80088ee:	2200      	movs	r2, #0
 80088f0:	602a      	str	r2, [r5, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f7f9 fbad 	bl	8002052 <_lseek>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_lseek_r+0x1e>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_lseek_r+0x1e>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	200009e8 	.word	0x200009e8

08008908 <_read_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d07      	ldr	r5, [pc, #28]	; (8008928 <_read_r+0x20>)
 800890c:	4604      	mov	r4, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	602a      	str	r2, [r5, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7f9 fb56 	bl	8001fc8 <_read>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_read_r+0x1e>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_read_r+0x1e>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	200009e8 	.word	0x200009e8

0800892c <_write_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_write_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f9 fb61 	bl	8002002 <_write>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_write_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_write_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	200009e8 	.word	0x200009e8

08008950 <__libc_init_array>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	4d0d      	ldr	r5, [pc, #52]	; (8008988 <__libc_init_array+0x38>)
 8008954:	4c0d      	ldr	r4, [pc, #52]	; (800898c <__libc_init_array+0x3c>)
 8008956:	1b64      	subs	r4, r4, r5
 8008958:	10a4      	asrs	r4, r4, #2
 800895a:	2600      	movs	r6, #0
 800895c:	42a6      	cmp	r6, r4
 800895e:	d109      	bne.n	8008974 <__libc_init_array+0x24>
 8008960:	4d0b      	ldr	r5, [pc, #44]	; (8008990 <__libc_init_array+0x40>)
 8008962:	4c0c      	ldr	r4, [pc, #48]	; (8008994 <__libc_init_array+0x44>)
 8008964:	f000 f880 	bl	8008a68 <_init>
 8008968:	1b64      	subs	r4, r4, r5
 800896a:	10a4      	asrs	r4, r4, #2
 800896c:	2600      	movs	r6, #0
 800896e:	42a6      	cmp	r6, r4
 8008970:	d105      	bne.n	800897e <__libc_init_array+0x2e>
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	f855 3b04 	ldr.w	r3, [r5], #4
 8008978:	4798      	blx	r3
 800897a:	3601      	adds	r6, #1
 800897c:	e7ee      	b.n	800895c <__libc_init_array+0xc>
 800897e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008982:	4798      	blx	r3
 8008984:	3601      	adds	r6, #1
 8008986:	e7f2      	b.n	800896e <__libc_init_array+0x1e>
 8008988:	08008d34 	.word	0x08008d34
 800898c:	08008d34 	.word	0x08008d34
 8008990:	08008d34 	.word	0x08008d34
 8008994:	08008d38 	.word	0x08008d38

08008998 <__retarget_lock_acquire_recursive>:
 8008998:	4770      	bx	lr

0800899a <__retarget_lock_release_recursive>:
 800899a:	4770      	bx	lr

0800899c <memcpy>:
 800899c:	440a      	add	r2, r1
 800899e:	4291      	cmp	r1, r2
 80089a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a4:	d100      	bne.n	80089a8 <memcpy+0xc>
 80089a6:	4770      	bx	lr
 80089a8:	b510      	push	{r4, lr}
 80089aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b2:	4291      	cmp	r1, r2
 80089b4:	d1f9      	bne.n	80089aa <memcpy+0xe>
 80089b6:	bd10      	pop	{r4, pc}

080089b8 <_free_r>:
 80089b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ba:	2900      	cmp	r1, #0
 80089bc:	d044      	beq.n	8008a48 <_free_r+0x90>
 80089be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c2:	9001      	str	r0, [sp, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f1a1 0404 	sub.w	r4, r1, #4
 80089ca:	bfb8      	it	lt
 80089cc:	18e4      	addlt	r4, r4, r3
 80089ce:	f000 f83f 	bl	8008a50 <__malloc_lock>
 80089d2:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <_free_r+0x94>)
 80089d4:	9801      	ldr	r0, [sp, #4]
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	b933      	cbnz	r3, 80089e8 <_free_r+0x30>
 80089da:	6063      	str	r3, [r4, #4]
 80089dc:	6014      	str	r4, [r2, #0]
 80089de:	b003      	add	sp, #12
 80089e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089e4:	f000 b83a 	b.w	8008a5c <__malloc_unlock>
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d908      	bls.n	80089fe <_free_r+0x46>
 80089ec:	6825      	ldr	r5, [r4, #0]
 80089ee:	1961      	adds	r1, r4, r5
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf01      	itttt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	1949      	addeq	r1, r1, r5
 80089fa:	6021      	streq	r1, [r4, #0]
 80089fc:	e7ed      	b.n	80089da <_free_r+0x22>
 80089fe:	461a      	mov	r2, r3
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	b10b      	cbz	r3, 8008a08 <_free_r+0x50>
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d9fa      	bls.n	80089fe <_free_r+0x46>
 8008a08:	6811      	ldr	r1, [r2, #0]
 8008a0a:	1855      	adds	r5, r2, r1
 8008a0c:	42a5      	cmp	r5, r4
 8008a0e:	d10b      	bne.n	8008a28 <_free_r+0x70>
 8008a10:	6824      	ldr	r4, [r4, #0]
 8008a12:	4421      	add	r1, r4
 8008a14:	1854      	adds	r4, r2, r1
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	6011      	str	r1, [r2, #0]
 8008a1a:	d1e0      	bne.n	80089de <_free_r+0x26>
 8008a1c:	681c      	ldr	r4, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	6053      	str	r3, [r2, #4]
 8008a22:	440c      	add	r4, r1
 8008a24:	6014      	str	r4, [r2, #0]
 8008a26:	e7da      	b.n	80089de <_free_r+0x26>
 8008a28:	d902      	bls.n	8008a30 <_free_r+0x78>
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	e7d6      	b.n	80089de <_free_r+0x26>
 8008a30:	6825      	ldr	r5, [r4, #0]
 8008a32:	1961      	adds	r1, r4, r5
 8008a34:	428b      	cmp	r3, r1
 8008a36:	bf04      	itt	eq
 8008a38:	6819      	ldreq	r1, [r3, #0]
 8008a3a:	685b      	ldreq	r3, [r3, #4]
 8008a3c:	6063      	str	r3, [r4, #4]
 8008a3e:	bf04      	itt	eq
 8008a40:	1949      	addeq	r1, r1, r5
 8008a42:	6021      	streq	r1, [r4, #0]
 8008a44:	6054      	str	r4, [r2, #4]
 8008a46:	e7ca      	b.n	80089de <_free_r+0x26>
 8008a48:	b003      	add	sp, #12
 8008a4a:	bd30      	pop	{r4, r5, pc}
 8008a4c:	200009f0 	.word	0x200009f0

08008a50 <__malloc_lock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__malloc_lock+0x8>)
 8008a52:	f7ff bfa1 	b.w	8008998 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	200009ec 	.word	0x200009ec

08008a5c <__malloc_unlock>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__malloc_unlock+0x8>)
 8008a5e:	f7ff bf9c 	b.w	800899a <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	200009ec 	.word	0x200009ec

08008a68 <_init>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr

08008a74 <_fini>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr
