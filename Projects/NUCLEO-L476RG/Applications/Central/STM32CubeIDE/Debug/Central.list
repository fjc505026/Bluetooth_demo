
Central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001988  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f8  0800e3f8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3f8  0800e3f8  0001e3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e400  0800e400  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e400  0800e400  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e404  0800e404  0001e404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000267c  20000210  0800e618  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000288c  0800e618  0002288c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_line   00020564  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000098  00000000  00000000  000407e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00020c23  00000000  00000000  0004087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003cee  00000000  00000000  000614a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001968  00000000  00000000  00065190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbed6  00000000  00000000  00066af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000013c2  00000000  00000000  001629ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002bb32  00000000  00000000  00163d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007480  00000000  00000000  0018f8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca58 	.word	0x0800ca58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800ca58 	.word	0x0800ca58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f005 f9e8 	bl	8005954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
	ldr	r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800059e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <LoopForever+0x16>)
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f00b fd8d 	bl	800c0c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f003 ff74 	bl	800449a <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005b8:	0800e408 	.word	0x0800e408
	ldr	r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c0:	20000210 	.word	0x20000210
	ldr	r2, =_sbss
 80005c4:	20000210 	.word	0x20000210
	ldr	r3, = _ebss
 80005c8:	2000288c 	.word	0x2000288c

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 80005d6:	f000 f82b 	bl	8000630 <User_Init>

  BSP_LED_On(LED2);
 80005da:	2000      	movs	r0, #0
 80005dc:	f004 fec4 	bl	8005368 <BSP_LED_On>

  hci_init(APP_UserEvtRx, NULL);
 80005e0:	2100      	movs	r1, #0
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_BlueNRG_2_Init+0x44>)
 80005e4:	f00a ff42 	bl	800b46c <hci_init>

  PRINT_DBG("BlueNRG-2 Central Device\r\n");

  /* Initialize the Central Device */
  ret = CentralDevice_Init();
 80005e8:	f001 fc56 	bl	8001e98 <CentralDevice_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d003      	beq.n	80005fe <MX_BlueNRG_2_Init+0x2e>
  {
    PRINT_DBG("CentralDevice_Init()--> Failed 0x%02x\r\n", ret);
    message("/* **************** Init failed!!! ***************** */\r\n\n");
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <MX_BlueNRG_2_Init+0x48>)
 80005f8:	f00b fc22 	bl	800be40 <puts>
    while(1);
 80005fc:	e7fe      	b.n	80005fc <MX_BlueNRG_2_Init+0x2c>
  }

  PRINT_DBG("\nBLE Stack Initialized & Central Device Configured\r\n");

  allow_console = TRUE;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_BlueNRG_2_Init+0x4c>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED2);
 8000604:	2000      	movs	r0, #0
 8000606:	f004 fec5 	bl	8005394 <BSP_LED_Off>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08003e21 	.word	0x08003e21
 8000618:	0800ca70 	.word	0x0800ca70
 800061c:	2000022c 	.word	0x2000022c

08000620 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8000624:	f00b f89c 	bl	800b760 <hci_user_evt_proc>
  User_Process();
 8000628:	f000 f80c 	bl	8000644 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8000634:	2000      	movs	r0, #0
 8000636:	f004 fe85 	bl	8005344 <BSP_LED_Init>
  BSP_COM_Init(COM1);
 800063a:	2000      	movs	r0, #0
 800063c:	f004 fefe 	bl	800543c <BSP_COM_Init>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  if (allow_console) {
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <User_Process+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <User_Process+0x16>
    Main_Menu();
 8000652:	f003 fca1 	bl	8003f98 <Main_Menu>
    Get_Action();
 8000656:	f000 f807 	bl	8000668 <Get_Action>
  }
  Central_Process();
 800065a:	f000 f9a1 	bl	80009a0 <Central_Process>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000022c 	.word	0x2000022c

08000668 <Get_Action>:
 *         ...)
 * @param  None
 * @retval None
 */
void Get_Action(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
  uint8_t console_ch[10] = {0,0,0,0,0,0,0,0,0,0};
 800066e:	4ab6      	ldr	r2, [pc, #728]	; (8000948 <Get_Action+0x2e0>)
 8000670:	463b      	mov	r3, r7
 8000672:	ca07      	ldmia	r2, {r0, r1, r2}
 8000674:	c303      	stmia	r3!, {r0, r1}
 8000676:	801a      	strh	r2, [r3, #0]
  uint8_t i = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
  uint8_t dev_idx = saved_devices.dev_idx;
 800067c:	4bb3      	ldr	r3, [pc, #716]	; (800094c <Get_Action+0x2e4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	73bb      	strb	r3, [r7, #14]
  uint8_t serv_idx;
  uint8_t char_idx;
  uint8_t prop_idx;

  switch (central_status)
 8000682:	4bb3      	ldr	r3, [pc, #716]	; (8000950 <Get_Action+0x2e8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b0e      	cmp	r3, #14
 8000688:	dc02      	bgt.n	8000690 <Get_Action+0x28>
 800068a:	2b0d      	cmp	r3, #13
 800068c:	da36      	bge.n	80006fc <Get_Action+0x94>
 800068e:	e043      	b.n	8000718 <Get_Action+0xb0>
 8000690:	2b12      	cmp	r3, #18
 8000692:	d03a      	beq.n	800070a <Get_Action+0xa2>
 8000694:	e040      	b.n	8000718 <Get_Action+0xb0>
  {
  case (SELECT_CHARACTERISTIC):
  case (SELECT_ANOTHER_CHARACTERISTIC):
    while (i < 5) {
      console_ch[i] = Uart_Receive_Char();
 8000696:	f003 fc3b 	bl	8003f10 <Uart_Receive_Char>
 800069a:	4602      	mov	r2, r0
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	3310      	adds	r3, #16
 80006a2:	443b      	add	r3, r7
 80006a4:	f803 2c10 	strb.w	r2, [r3, #-16]
      if ((console_ch[0] == SCAN_CH_UPPER) ||
 80006a8:	783b      	ldrb	r3, [r7, #0]
 80006aa:	2b53      	cmp	r3, #83	; 0x53
 80006ac:	d002      	beq.n	80006b4 <Get_Action+0x4c>
          (console_ch[0] == SCAN_CH_LOWER))
 80006ae:	783b      	ldrb	r3, [r7, #0]
      if ((console_ch[0] == SCAN_CH_UPPER) ||
 80006b0:	2b73      	cmp	r3, #115	; 0x73
 80006b2:	d101      	bne.n	80006b8 <Get_Action+0x50>
      {
        console_ch[0] = NOT_ALLOWED_CH; /* set to not allowed character */
 80006b4:	236e      	movs	r3, #110	; 0x6e
 80006b6:	703b      	strb	r3, [r7, #0]
      }
      if ((i == 0) &&
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11b      	bne.n	80006f6 <Get_Action+0x8e>
          ((console_ch[i] == CLOSE_CONNECTION_CH_UPPER)  ||
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3310      	adds	r3, #16
 80006c2:	443b      	add	r3, r7
 80006c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((i == 0) &&
 80006c8:	2b43      	cmp	r3, #67	; 0x43
 80006ca:	d01a      	beq.n	8000702 <Get_Action+0x9a>
           (console_ch[i] == CLOSE_CONNECTION_CH_LOWER)  ||
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	3310      	adds	r3, #16
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
          ((console_ch[i] == CLOSE_CONNECTION_CH_UPPER)  ||
 80006d6:	2b63      	cmp	r3, #99	; 0x63
 80006d8:	d013      	beq.n	8000702 <Get_Action+0x9a>
           (console_ch[i] == PRINT_DEVICE_INFO_CH_UPPER) ||
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	3310      	adds	r3, #16
 80006de:	443b      	add	r3, r7
 80006e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
           (console_ch[i] == CLOSE_CONNECTION_CH_LOWER)  ||
 80006e4:	2b50      	cmp	r3, #80	; 0x50
 80006e6:	d00c      	beq.n	8000702 <Get_Action+0x9a>
           (console_ch[i] == PRINT_DEVICE_INFO_CH_LOWER)))
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3310      	adds	r3, #16
 80006ec:	443b      	add	r3, r7
 80006ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
           (console_ch[i] == PRINT_DEVICE_INFO_CH_UPPER) ||
 80006f2:	2b70      	cmp	r3, #112	; 0x70
 80006f4:	d005      	beq.n	8000702 <Get_Action+0x9a>
      {
        break;
      }
      i++;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	3301      	adds	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
    while (i < 5) {
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d9c9      	bls.n	8000696 <Get_Action+0x2e>
    }
    printf("\r\n\n");
 8000702:	4894      	ldr	r0, [pc, #592]	; (8000954 <Get_Action+0x2ec>)
 8000704:	f00b fb9c 	bl	800be40 <puts>
    break;
 8000708:	e00f      	b.n	800072a <Get_Action+0xc2>
  case (RECEIVE_NOTIFICATIONS):
    console_ch[0] = Uart_Receive_Char_Timeout(VERY_SHORT_TIMEOUT);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f003 fc24 	bl	8003f58 <Uart_Receive_Char_Timeout>
 8000710:	4603      	mov	r3, r0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	703b      	strb	r3, [r7, #0]
    break;
 8000716:	e008      	b.n	800072a <Get_Action+0xc2>
  default:
    console_ch[0] = Uart_Receive_Char();
 8000718:	f003 fbfa 	bl	8003f10 <Uart_Receive_Char>
 800071c:	4603      	mov	r3, r0
 800071e:	b2db      	uxtb	r3, r3
 8000720:	703b      	strb	r3, [r7, #0]
    printf("\r\n\n");
 8000722:	488c      	ldr	r0, [pc, #560]	; (8000954 <Get_Action+0x2ec>)
 8000724:	f00b fb8c 	bl	800be40 <puts>
    break;
 8000728:	bf00      	nop
  }

  allow_console = FALSE;
 800072a:	4b8b      	ldr	r3, [pc, #556]	; (8000958 <Get_Action+0x2f0>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

  switch (console_ch[0])
 8000730:	783b      	ldrb	r3, [r7, #0]
 8000732:	2b43      	cmp	r3, #67	; 0x43
 8000734:	d067      	beq.n	8000806 <Get_Action+0x19e>
 8000736:	2b43      	cmp	r3, #67	; 0x43
 8000738:	db7f      	blt.n	800083a <Get_Action+0x1d2>
 800073a:	2b73      	cmp	r3, #115	; 0x73
 800073c:	dc7d      	bgt.n	800083a <Get_Action+0x1d2>
 800073e:	2b50      	cmp	r3, #80	; 0x50
 8000740:	db7b      	blt.n	800083a <Get_Action+0x1d2>
 8000742:	3b50      	subs	r3, #80	; 0x50
 8000744:	2b23      	cmp	r3, #35	; 0x23
 8000746:	d878      	bhi.n	800083a <Get_Action+0x1d2>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <Get_Action+0xe8>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000823 	.word	0x08000823
 8000754:	0800083b 	.word	0x0800083b
 8000758:	0800083b 	.word	0x0800083b
 800075c:	080007e1 	.word	0x080007e1
 8000760:	0800083b 	.word	0x0800083b
 8000764:	0800083b 	.word	0x0800083b
 8000768:	0800083b 	.word	0x0800083b
 800076c:	0800083b 	.word	0x0800083b
 8000770:	0800083b 	.word	0x0800083b
 8000774:	0800083b 	.word	0x0800083b
 8000778:	0800083b 	.word	0x0800083b
 800077c:	0800083b 	.word	0x0800083b
 8000780:	0800083b 	.word	0x0800083b
 8000784:	0800083b 	.word	0x0800083b
 8000788:	0800083b 	.word	0x0800083b
 800078c:	0800083b 	.word	0x0800083b
 8000790:	0800083b 	.word	0x0800083b
 8000794:	0800083b 	.word	0x0800083b
 8000798:	0800083b 	.word	0x0800083b
 800079c:	08000807 	.word	0x08000807
 80007a0:	0800083b 	.word	0x0800083b
 80007a4:	0800083b 	.word	0x0800083b
 80007a8:	0800083b 	.word	0x0800083b
 80007ac:	0800083b 	.word	0x0800083b
 80007b0:	0800083b 	.word	0x0800083b
 80007b4:	0800083b 	.word	0x0800083b
 80007b8:	0800083b 	.word	0x0800083b
 80007bc:	0800083b 	.word	0x0800083b
 80007c0:	0800083b 	.word	0x0800083b
 80007c4:	0800083b 	.word	0x0800083b
 80007c8:	0800083b 	.word	0x0800083b
 80007cc:	0800083b 	.word	0x0800083b
 80007d0:	08000823 	.word	0x08000823
 80007d4:	0800083b 	.word	0x0800083b
 80007d8:	0800083b 	.word	0x0800083b
 80007dc:	080007e1 	.word	0x080007e1
  {
  case SCAN_CH_UPPER:
  case SCAN_CH_LOWER:
    if (saved_devices.connected) {
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <Get_Action+0x2e4>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <Get_Action+0x18e>
      printf("\r To re-scan the network, close the connection!\n");
 80007e8:	485c      	ldr	r0, [pc, #368]	; (800095c <Get_Action+0x2f4>)
 80007ea:	f00b fb29 	bl	800be40 <puts>
      allow_console = TRUE;
 80007ee:	4b5a      	ldr	r3, [pc, #360]	; (8000958 <Get_Action+0x2f0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
    else {
      Init_Saved_Devices();
      Init_NonConn_Devices();
      central_status = START_SCANNING;
    }
    break;
 80007f4:	e0c9      	b.n	800098a <Get_Action+0x322>
      Init_Saved_Devices();
 80007f6:	f001 fbbb 	bl	8001f70 <Init_Saved_Devices>
      Init_NonConn_Devices();
 80007fa:	f001 fd7f 	bl	80022fc <Init_NonConn_Devices>
      central_status = START_SCANNING;
 80007fe:	4b54      	ldr	r3, [pc, #336]	; (8000950 <Get_Action+0x2e8>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
    break;
 8000804:	e0c1      	b.n	800098a <Get_Action+0x322>
  case CLOSE_CONNECTION_CH_UPPER:
  case CLOSE_CONNECTION_CH_LOWER:
    if (saved_devices.connected) {
 8000806:	4b51      	ldr	r3, [pc, #324]	; (800094c <Get_Action+0x2e4>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <Get_Action+0x1b2>
      Close_Connection();
 800080e:	f001 fd9b 	bl	8002348 <Close_Connection>
      central_status = CLOSE_CONNECTION;
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <Get_Action+0x2e8>)
 8000814:	2209      	movs	r2, #9
 8000816:	701a      	strb	r2, [r3, #0]
    }
    else {
      PRINT_DBG("\r No device connected!\n");
      allow_console = TRUE;
    }
    break;
 8000818:	e0b7      	b.n	800098a <Get_Action+0x322>
      allow_console = TRUE;
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <Get_Action+0x2f0>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
    break;
 8000820:	e0b3      	b.n	800098a <Get_Action+0x322>
  case PRINT_DEVICE_INFO_CH_UPPER:
  case PRINT_DEVICE_INFO_CH_LOWER:
    if (saved_devices.connected) {
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <Get_Action+0x2e4>)
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <Get_Action+0x1ca>
      central_status = PRINT_DEVICE_INFO;
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <Get_Action+0x2e8>)
 800082c:	2216      	movs	r2, #22
 800082e:	701a      	strb	r2, [r3, #0]
    }
    else {
      PRINT_DBG("\r No device connected!\n");
      allow_console = TRUE;
    }
    break;
 8000830:	e0ab      	b.n	800098a <Get_Action+0x322>
      allow_console = TRUE;
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <Get_Action+0x2f0>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
    break;
 8000838:	e0a7      	b.n	800098a <Get_Action+0x322>
  default:
    switch (central_status)
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <Get_Action+0x2e8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b12      	cmp	r3, #18
 8000840:	f000 8090 	beq.w	8000964 <Get_Action+0x2fc>
 8000844:	2b12      	cmp	r3, #18
 8000846:	f300 8097 	bgt.w	8000978 <Get_Action+0x310>
 800084a:	2b03      	cmp	r3, #3
 800084c:	d007      	beq.n	800085e <Get_Action+0x1f6>
 800084e:	2b03      	cmp	r3, #3
 8000850:	f2c0 8092 	blt.w	8000978 <Get_Action+0x310>
 8000854:	3b0d      	subs	r3, #13
 8000856:	2b01      	cmp	r3, #1
 8000858:	f200 808e 	bhi.w	8000978 <Get_Action+0x310>
 800085c:	e013      	b.n	8000886 <Get_Action+0x21e>
    {
    case (SELECT_DEVICE):
      saved_devices.dev_idx = Get_Index(console_ch[0]);
 800085e:	783b      	ldrb	r3, [r7, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fa95 	bl	8003d90 <Get_Index>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <Get_Action+0x2e4>)
 800086c:	701a      	strb	r2, [r3, #0]
      PRINT_DBG("device_index %d\r\n", saved_devices.dev_idx);
      if (saved_devices.dev_idx != TYPED_ERROR_VALUE)
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <Get_Action+0x2e4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b0b      	cmp	r3, #11
 8000874:	d003      	beq.n	800087e <Get_Action+0x216>
      {
        central_status = START_CONNECTION;
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <Get_Action+0x2e8>)
 8000878:	2204      	movs	r2, #4
 800087a:	701a      	strb	r2, [r3, #0]
      }
      else {
        allow_console = TRUE;
      }
      break;
 800087c:	e084      	b.n	8000988 <Get_Action+0x320>
        allow_console = TRUE;
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <Get_Action+0x2f0>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
      break;
 8000884:	e080      	b.n	8000988 <Get_Action+0x320>
    case (SELECT_CHARACTERISTIC):
    case (SELECT_ANOTHER_CHARACTERISTIC):
      dev_idx = saved_devices.dev_idx;
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <Get_Action+0x2e4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	73bb      	strb	r3, [r7, #14]
      serv_idx = Get_Index(console_ch[0]);
 800088c:	783b      	ldrb	r3, [r7, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fa7e 	bl	8003d90 <Get_Index>
 8000894:	4603      	mov	r3, r0
 8000896:	737b      	strb	r3, [r7, #13]
      char_idx = Get_Index(console_ch[2]);
 8000898:	78bb      	ldrb	r3, [r7, #2]
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fa78 	bl	8003d90 <Get_Index>
 80008a0:	4603      	mov	r3, r0
 80008a2:	733b      	strb	r3, [r7, #12]
      prop_idx = Get_Index(console_ch[4]);
 80008a4:	793b      	ldrb	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fa72 	bl	8003d90 <Get_Index>
 80008ac:	4603      	mov	r3, r0
 80008ae:	72fb      	strb	r3, [r7, #11]

      if ((serv_idx == TYPED_ERROR_VALUE) || (console_ch[1] != '.') ||
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	2b0b      	cmp	r3, #11
 80008b4:	d00b      	beq.n	80008ce <Get_Action+0x266>
 80008b6:	787b      	ldrb	r3, [r7, #1]
 80008b8:	2b2e      	cmp	r3, #46	; 0x2e
 80008ba:	d108      	bne.n	80008ce <Get_Action+0x266>
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b0b      	cmp	r3, #11
 80008c0:	d005      	beq.n	80008ce <Get_Action+0x266>
          (char_idx == TYPED_ERROR_VALUE) || (console_ch[3] != '.') ||
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2b2e      	cmp	r3, #46	; 0x2e
 80008c6:	d102      	bne.n	80008ce <Get_Action+0x266>
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	2b0b      	cmp	r3, #11
 80008cc:	d106      	bne.n	80008dc <Get_Action+0x274>
          (prop_idx == TYPED_ERROR_VALUE))
      {
        printf("\r Undefined input!\r\n");
 80008ce:	4824      	ldr	r0, [pc, #144]	; (8000960 <Get_Action+0x2f8>)
 80008d0:	f00b fab6 	bl	800be40 <puts>
        central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <Get_Action+0x2e8>)
 80008d6:	220e      	movs	r2, #14
 80008d8:	701a      	strb	r2, [r3, #0]
                  saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx,
                  saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].prop_idx);

        central_status = UPDATE_CHARACTERISTIC;
      }
      break;
 80008da:	e055      	b.n	8000988 <Get_Action+0x320>
        saved_devices.dev_info[dev_idx].serv_idx = serv_idx;
 80008dc:	7bba      	ldrb	r2, [r7, #14]
 80008de:	491b      	ldr	r1, [pc, #108]	; (800094c <Get_Action+0x2e4>)
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	440b      	add	r3, r1
 80008ea:	332e      	adds	r3, #46	; 0x2e
 80008ec:	7b7a      	ldrb	r2, [r7, #13]
 80008ee:	701a      	strb	r2, [r3, #0]
        saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx = char_idx;
 80008f0:	7bba      	ldrb	r2, [r7, #14]
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <Get_Action+0x2e4>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	440b      	add	r3, r1
 80008fe:	3330      	adds	r3, #48	; 0x30
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	f240 21ba 	movw	r1, #698	; 0x2ba
 8000908:	fb01 f303 	mul.w	r3, r1, r3
 800090c:	4413      	add	r3, r2
 800090e:	7b3a      	ldrb	r2, [r7, #12]
 8000910:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].prop_idx = prop_idx;
 8000914:	7bba      	ldrb	r2, [r7, #14]
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <Get_Action+0x2e4>)
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	440b      	add	r3, r1
 8000922:	3330      	adds	r3, #48	; 0x30
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	7b7b      	ldrb	r3, [r7, #13]
 8000928:	f240 21ba 	movw	r1, #698	; 0x2ba
 800092c:	fb01 f303 	mul.w	r3, r1, r3
 8000930:	441a      	add	r2, r3
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	4413      	add	r3, r2
 8000938:	3370      	adds	r3, #112	; 0x70
 800093a:	7afa      	ldrb	r2, [r7, #11]
 800093c:	701a      	strb	r2, [r3, #0]
        central_status = UPDATE_CHARACTERISTIC;
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <Get_Action+0x2e8>)
 8000940:	220f      	movs	r2, #15
 8000942:	701a      	strb	r2, [r3, #0]
      break;
 8000944:	e020      	b.n	8000988 <Get_Action+0x320>
 8000946:	bf00      	nop
 8000948:	0800cb10 	.word	0x0800cb10
 800094c:	20000230 	.word	0x20000230
 8000950:	2000022d 	.word	0x2000022d
 8000954:	0800caac 	.word	0x0800caac
 8000958:	2000022c 	.word	0x2000022c
 800095c:	0800cab0 	.word	0x0800cab0
 8000960:	0800cae0 	.word	0x0800cae0
    case RECEIVE_NOTIFICATIONS:
      if ((console_ch[0] == DISABLE_NOTIFICATIONS_CH_UPPER) ||
 8000964:	783b      	ldrb	r3, [r7, #0]
 8000966:	2b44      	cmp	r3, #68	; 0x44
 8000968:	d002      	beq.n	8000970 <Get_Action+0x308>
          (console_ch[0] == DISABLE_NOTIFICATIONS_CH_LOWER))
 800096a:	783b      	ldrb	r3, [r7, #0]
      if ((console_ch[0] == DISABLE_NOTIFICATIONS_CH_UPPER) ||
 800096c:	2b64      	cmp	r3, #100	; 0x64
 800096e:	d10a      	bne.n	8000986 <Get_Action+0x31e>
      {
        central_status = DISABLE_NOTIFICATIONS;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <Get_Action+0x32c>)
 8000972:	2213      	movs	r2, #19
 8000974:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000976:	e006      	b.n	8000986 <Get_Action+0x31e>
    default:
      printf("\r\n Type your choice..... ");
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <Get_Action+0x330>)
 800097a:	f00b f9f3 	bl	800bd64 <iprintf>
      allow_console = TRUE;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <Get_Action+0x334>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
      break;
 8000984:	e000      	b.n	8000988 <Get_Action+0x320>
      break;
 8000986:	bf00      	nop
    }
    break;
 8000988:	bf00      	nop
  }

  return;
 800098a:	bf00      	nop
}
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000022d 	.word	0x2000022d
 8000998:	0800caf4 	.word	0x0800caf4
 800099c:	2000022c 	.word	0x2000022c

080009a0 <Central_Process>:
 *         characteristics discovery, ...) a Central device can run
 * @param  None
 * @retval None
 */
void Central_Process(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  uint8_t dev_idx  = saved_devices.dev_idx;
 80009a6:	4b93      	ldr	r3, [pc, #588]	; (8000bf4 <Central_Process+0x254>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	717b      	strb	r3, [r7, #5]
  uint8_t serv_idx = saved_devices.dev_info[dev_idx].serv_idx;
 80009ac:	797a      	ldrb	r2, [r7, #5]
 80009ae:	4991      	ldr	r1, [pc, #580]	; (8000bf4 <Central_Process+0x254>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	440b      	add	r3, r1
 80009ba:	332e      	adds	r3, #46	; 0x2e
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	713b      	strb	r3, [r7, #4]
  uint8_t char_idx;
  uint8_t prop_idx;

  switch (central_status)
 80009c0:	4b8d      	ldr	r3, [pc, #564]	; (8000bf8 <Central_Process+0x258>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b15      	cmp	r3, #21
 80009c8:	f200 810e 	bhi.w	8000be8 <Central_Process+0x248>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Central_Process+0x34>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	08000a2d 	.word	0x08000a2d
 80009d8:	08000be9 	.word	0x08000be9
 80009dc:	08000be9 	.word	0x08000be9
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000be9 	.word	0x08000be9
 80009e8:	08000a55 	.word	0x08000a55
 80009ec:	08000a5d 	.word	0x08000a5d
 80009f0:	08000be9 	.word	0x08000be9
 80009f4:	08000be9 	.word	0x08000be9
 80009f8:	08000a8d 	.word	0x08000a8d
 80009fc:	08000a6d 	.word	0x08000a6d
 8000a00:	08000be9 	.word	0x08000be9
 8000a04:	08000b03 	.word	0x08000b03
 8000a08:	08000b03 	.word	0x08000b03
 8000a0c:	08000aa1 	.word	0x08000aa1
 8000a10:	08000be9 	.word	0x08000be9
 8000a14:	08000be9 	.word	0x08000be9
 8000a18:	08000b0b 	.word	0x08000b0b
 8000a1c:	08000b13 	.word	0x08000b13
 8000a20:	08000be9 	.word	0x08000be9
 8000a24:	08000be9 	.word	0x08000be9
 8000a28:	08000b4b 	.word	0x08000b4b
  {
  case (START_SCANNING):
    printf("\n -------------------- START_SCANNING --------------------\r\n");
 8000a2c:	4873      	ldr	r0, [pc, #460]	; (8000bfc <Central_Process+0x25c>)
 8000a2e:	f00b fa07 	bl	800be40 <puts>
    central_status = SCANNING_STARTED;
 8000a32:	4b71      	ldr	r3, [pc, #452]	; (8000bf8 <Central_Process+0x258>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	701a      	strb	r2, [r3, #0]
    Start_Scanning();
 8000a38:	f001 fcae 	bl	8002398 <Start_Scanning>
    break;
 8000a3c:	e0d5      	b.n	8000bea <Central_Process+0x24a>
  case (START_CONNECTION):
    printf("\n ------------------- START_CONNECTION -------------------\r\n");
 8000a3e:	4870      	ldr	r0, [pc, #448]	; (8000c00 <Central_Process+0x260>)
 8000a40:	f00b f9fe 	bl	800be40 <puts>
    central_status = CONNECTION_STARTED;
 8000a44:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <Central_Process+0x258>)
 8000a46:	2205      	movs	r2, #5
 8000a48:	701a      	strb	r2, [r3, #0]
    Start_Connection(dev_idx);
 8000a4a:	797b      	ldrb	r3, [r7, #5]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fcbd 	bl	80023cc <Start_Connection>
    break;
 8000a52:	e0ca      	b.n	8000bea <Central_Process+0x24a>
  case (CONNECTION_COMPLETE):
    PRINT_DBG("\n CONNECTION_COMPLETE\n");
    central_status = SERVICE_DISCOVERY;
 8000a54:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <Central_Process+0x258>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	701a      	strb	r2, [r3, #0]
    break;
 8000a5a:	e0c6      	b.n	8000bea <Central_Process+0x24a>
  case (SERVICE_DISCOVERY):
    PRINT_DBG("\n SERVICE_DISCOVERY\n");
    central_status = SERVICE_DISCOVERY_STARTED;
 8000a5c:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <Central_Process+0x258>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	701a      	strb	r2, [r3, #0]
    Discover_Services(dev_idx);
 8000a62:	797b      	ldrb	r3, [r7, #5]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fcf1 	bl	800244c <Discover_Services>
    break;
 8000a6a:	e0be      	b.n	8000bea <Central_Process+0x24a>
  case (CHARACTERISTIC_DISCOVERY):
    Print_Service_Info(dev_idx, serv_idx);
 8000a6c:	793a      	ldrb	r2, [r7, #4]
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fa40 	bl	8002ef8 <Print_Service_Info>
    PRINT_DBG("\n    CHARACTERISTIC_DISCOVERY\n");
    central_status = CHARACTERISTIC_DISCOVERY_STARTED;
 8000a78:	4b5f      	ldr	r3, [pc, #380]	; (8000bf8 <Central_Process+0x258>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	701a      	strb	r2, [r3, #0]
    Discover_Characteristics(dev_idx, serv_idx);
 8000a7e:	793a      	ldrb	r2, [r7, #4]
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fd05 	bl	8002494 <Discover_Characteristics>
    break;
 8000a8a:	e0ae      	b.n	8000bea <Central_Process+0x24a>
  case (DISCONNECTION_COMPLETE):
    printf("\n ---------------- DISCONNECTION_COMPLETE ----------------\r\n");
 8000a8c:	485d      	ldr	r0, [pc, #372]	; (8000c04 <Central_Process+0x264>)
 8000a8e:	f00b f9d7 	bl	800be40 <puts>
    central_status = INIT_STATUS;
 8000a92:	4b59      	ldr	r3, [pc, #356]	; (8000bf8 <Central_Process+0x258>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
    allow_console = TRUE;
 8000a98:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <Central_Process+0x268>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
    break;
 8000a9e:	e0a4      	b.n	8000bea <Central_Process+0x24a>
  case (UPDATE_CHARACTERISTIC):
    PRINT_DBG("\n    UPDATE_CHARACTERISTIC\n");
    central_status = WAITING_UPDATE_CHARACTERISTIC;
 8000aa0:	4b55      	ldr	r3, [pc, #340]	; (8000bf8 <Central_Process+0x258>)
 8000aa2:	2211      	movs	r2, #17
 8000aa4:	701a      	strb	r2, [r3, #0]
    char_idx = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx;
 8000aa6:	797a      	ldrb	r2, [r7, #5]
 8000aa8:	4952      	ldr	r1, [pc, #328]	; (8000bf4 <Central_Process+0x254>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3330      	adds	r3, #48	; 0x30
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	793b      	ldrb	r3, [r7, #4]
 8000aba:	f240 21ba 	movw	r1, #698	; 0x2ba
 8000abe:	fb01 f303 	mul.w	r3, r1, r3
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000ac8:	70fb      	strb	r3, [r7, #3]
    prop_idx = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].prop_idx;
 8000aca:	797a      	ldrb	r2, [r7, #5]
 8000acc:	4949      	ldr	r1, [pc, #292]	; (8000bf4 <Central_Process+0x254>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3330      	adds	r3, #48	; 0x30
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	f240 21ba 	movw	r1, #698	; 0x2ba
 8000ae2:	fb01 f303 	mul.w	r3, r1, r3
 8000ae6:	441a      	add	r2, r3
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	4413      	add	r3, r2
 8000aee:	3370      	adds	r3, #112	; 0x70
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	70bb      	strb	r3, [r7, #2]
    Update_Characteristic(dev_idx, serv_idx, char_idx, prop_idx);
 8000af4:	78bb      	ldrb	r3, [r7, #2]
 8000af6:	78fa      	ldrb	r2, [r7, #3]
 8000af8:	7939      	ldrb	r1, [r7, #4]
 8000afa:	7978      	ldrb	r0, [r7, #5]
 8000afc:	f001 fd16 	bl	800252c <Update_Characteristic>
    break;
 8000b00:	e073      	b.n	8000bea <Central_Process+0x24a>
  case (SELECT_CHARACTERISTIC):
  case (SELECT_ANOTHER_CHARACTERISTIC):
    allow_console = TRUE;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <Central_Process+0x268>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
    break;
 8000b08:	e06f      	b.n	8000bea <Central_Process+0x24a>
  case (RECEIVE_NOTIFICATIONS):
    allow_console = TRUE;
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <Central_Process+0x268>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
    break;
 8000b10:	e06b      	b.n	8000bea <Central_Process+0x24a>
  case (DISABLE_NOTIFICATIONS):
    char_idx = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx;
 8000b12:	797a      	ldrb	r2, [r7, #5]
 8000b14:	4937      	ldr	r1, [pc, #220]	; (8000bf4 <Central_Process+0x254>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	440b      	add	r3, r1
 8000b20:	3330      	adds	r3, #48	; 0x30
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	f240 21ba 	movw	r1, #698	; 0x2ba
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000b34:	70fb      	strb	r3, [r7, #3]
    Set_Notifications(dev_idx, serv_idx, char_idx, 0x00);
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	7939      	ldrb	r1, [r7, #4]
 8000b3a:	7978      	ldrb	r0, [r7, #5]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f001 fec5 	bl	80028cc <Set_Notifications>
    central_status = WAITING_DISABLE_NOTIFICATIONS;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <Central_Process+0x258>)
 8000b44:	2214      	movs	r2, #20
 8000b46:	701a      	strb	r2, [r3, #0]
    break;
 8000b48:	e04f      	b.n	8000bea <Central_Process+0x24a>
  case (PRINT_DEVICE_INFO):
    Print_Device_Info(dev_idx);
 8000b4a:	797b      	ldrb	r3, [r7, #5]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 ffd5 	bl	8002afc <Print_Device_Info>
    printf("\r\n");
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <Central_Process+0x26c>)
 8000b54:	f00b f974 	bl	800be40 <puts>
    for (uint8_t i=0; i<saved_devices.dev_info[dev_idx].serv_num; i++) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	e031      	b.n	8000bc2 <Central_Process+0x222>
      Print_Service_Info(dev_idx, i);
 8000b5e:	79fa      	ldrb	r2, [r7, #7]
 8000b60:	797b      	ldrb	r3, [r7, #5]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f9c7 	bl	8002ef8 <Print_Service_Info>
      printf("\r\n");
 8000b6a:	4828      	ldr	r0, [pc, #160]	; (8000c0c <Central_Process+0x26c>)
 8000b6c:	f00b f968 	bl	800be40 <puts>
      for (uint8_t j=0; j<saved_devices.dev_info[dev_idx].serv_info[i].char_num; j++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	71bb      	strb	r3, [r7, #6]
 8000b74:	e00b      	b.n	8000b8e <Central_Process+0x1ee>
        Print_Characteristic_Info(dev_idx, i, j);
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	79f9      	ldrb	r1, [r7, #7]
 8000b7a:	797b      	ldrb	r3, [r7, #5]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 faa7 	bl	80030d0 <Print_Characteristic_Info>
        printf("\r\n");
 8000b82:	4822      	ldr	r0, [pc, #136]	; (8000c0c <Central_Process+0x26c>)
 8000b84:	f00b f95c 	bl	800be40 <puts>
      for (uint8_t j=0; j<saved_devices.dev_info[dev_idx].serv_info[i].char_num; j++) {
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	797a      	ldrb	r2, [r7, #5]
 8000b90:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <Central_Process+0x254>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3330      	adds	r3, #48	; 0x30
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f240 21ba 	movw	r1, #698	; 0x2ba
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3df      	bcc.n	8000b76 <Central_Process+0x1d6>
      }
      printf("\r\n");
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <Central_Process+0x26c>)
 8000bb8:	f00b f942 	bl	800be40 <puts>
    for (uint8_t i=0; i<saved_devices.dev_info[dev_idx].serv_num; i++) {
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	797a      	ldrb	r2, [r7, #5]
 8000bc4:	490b      	ldr	r1, [pc, #44]	; (8000bf4 <Central_Process+0x254>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	440b      	add	r3, r1
 8000bd0:	332f      	adds	r3, #47	; 0x2f
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3c1      	bcc.n	8000b5e <Central_Process+0x1be>
    }
    printf(" --------------------------------------------------------\r\n");
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <Central_Process+0x270>)
 8000bdc:	f00b f930 	bl	800be40 <puts>
    central_status = SELECT_CHARACTERISTIC;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <Central_Process+0x258>)
 8000be2:	220d      	movs	r2, #13
 8000be4:	701a      	strb	r2, [r3, #0]
    break;
 8000be6:	e000      	b.n	8000bea <Central_Process+0x24a>
  case (SELECT_DEVICE):
  case (CONNECTION_STARTED):
  case (SERVICE_DISCOVERY_STARTED):
  default:
    // PRINT_DBG("Central_Process: default (DO NOTHING)\n");
    break;
 8000be8:	bf00      	nop
  }
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000230 	.word	0x20000230
 8000bf8:	2000022d 	.word	0x2000022d
 8000bfc:	0800cb1c 	.word	0x0800cb1c
 8000c00:	0800cb58 	.word	0x0800cb58
 8000c04:	0800cb94 	.word	0x0800cb94
 8000c08:	2000022c 	.word	0x2000022c
 8000c0c:	0800cbd0 	.word	0x0800cbd0
 8000c10:	0800cbd4 	.word	0x0800cbd4

08000c14 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	460b      	mov	r3, r1
 8000c22:	71bb      	strb	r3, [r7, #6]
 8000c24:	4613      	mov	r3, r2
 8000c26:	717b      	strb	r3, [r7, #5]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d116      	bne.n	8000c5c <aci_gap_proc_complete_event+0x48>
  {
    PRINT_DBG("\n SCANNING_STOPPED\r\n");
    printf("\n Number of connectable devices: %d\r\n", saved_devices.dev_num);
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <aci_gap_proc_complete_event+0x50>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <aci_gap_proc_complete_event+0x54>)
 8000c36:	f00b f895 	bl	800bd64 <iprintf>
    printf(" --------------------------------------------------------\r\n\n");
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <aci_gap_proc_complete_event+0x58>)
 8000c3c:	f00b f900 	bl	800be40 <puts>

    if (saved_devices.dev_num > 0) {
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <aci_gap_proc_complete_event+0x50>)
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <aci_gap_proc_complete_event+0x3c>
      central_status = SELECT_DEVICE;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <aci_gap_proc_complete_event+0x5c>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e002      	b.n	8000c56 <aci_gap_proc_complete_event+0x42>
    }
    else {
      central_status = INIT_STATUS;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <aci_gap_proc_complete_event+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    }

    allow_console = TRUE;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <aci_gap_proc_complete_event+0x60>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000230 	.word	0x20000230
 8000c68:	0800cc10 	.word	0x0800cc10
 8000c6c:	0800cc38 	.word	0x0800cc38
 8000c70:	2000022d 	.word	0x2000022d
 8000c74:	2000022c 	.word	0x2000022c

08000c78 <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	80fb      	strh	r3, [r7, #6]
 8000c84:	4613      	mov	r3, r2
 8000c86:	717b      	strb	r3, [r7, #5]
  uint8_t dev_idx  = saved_devices.dev_idx;
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	73fb      	strb	r3, [r7, #15]

  if (Error_Code != BLE_STATUS_SUCCESS) {
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <aci_gatt_proc_complete_event+0x28>
    printf(" GATT Procedure completed with error 0x%02x (0x%04x)\n",
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	484d      	ldr	r0, [pc, #308]	; (8000dd0 <aci_gatt_proc_complete_event+0x158>)
 8000c9c:	f00b f862 	bl	800bd64 <iprintf>
            Error_Code, Connection_Handle);
  }

  switch(central_status)
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	2b0c      	cmp	r3, #12
 8000ca8:	f200 808b 	bhi.w	8000dc2 <aci_gatt_proc_complete_event+0x14a>
 8000cac:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <aci_gatt_proc_complete_event+0x3c>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000ce9 	.word	0x08000ce9
 8000cb8:	08000dc3 	.word	0x08000dc3
 8000cbc:	08000dc3 	.word	0x08000dc3
 8000cc0:	08000dc3 	.word	0x08000dc3
 8000cc4:	08000d25 	.word	0x08000d25
 8000cc8:	08000dc3 	.word	0x08000dc3
 8000ccc:	08000dc3 	.word	0x08000dc3
 8000cd0:	08000dc3 	.word	0x08000dc3
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000d9f 	.word	0x08000d9f
 8000cdc:	08000dc3 	.word	0x08000dc3
 8000ce0:	08000dc3 	.word	0x08000dc3
 8000ce4:	08000db5 	.word	0x08000db5
  {
  case SERVICE_DISCOVERY_STARTED:
    PRINT_DBG("\n SERVICE_DISCOVERY_COMPLETE\r\n\n");
    printf(" Number of services: %d\r\n",
           saved_devices.dev_info[dev_idx].serv_num);
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	4938      	ldr	r1, [pc, #224]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	440b      	add	r3, r1
 8000cf6:	332f      	adds	r3, #47	; 0x2f
 8000cf8:	781b      	ldrb	r3, [r3, #0]
    printf(" Number of services: %d\r\n",
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <aci_gatt_proc_complete_event+0x160>)
 8000cfe:	f00b f831 	bl	800bd64 <iprintf>
    PRINT_DBG(" --------------------------------------------------------\r\n\n");
    printf("\r\n\n");
 8000d02:	4836      	ldr	r0, [pc, #216]	; (8000ddc <aci_gatt_proc_complete_event+0x164>)
 8000d04:	f00b f89c 	bl	800be40 <puts>
    saved_devices.dev_info[dev_idx].serv_idx = 0;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	4930      	ldr	r1, [pc, #192]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	440b      	add	r3, r1
 8000d16:	332e      	adds	r3, #46	; 0x2e
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    central_status = CHARACTERISTIC_DISCOVERY;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000d1e:	220b      	movs	r2, #11
 8000d20:	701a      	strb	r2, [r3, #0]
    break;
 8000d22:	e04f      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
  case CHARACTERISTIC_DISCOVERY_STARTED:
    if (saved_devices.dev_info[dev_idx].serv_idx == saved_devices.dev_info[dev_idx].serv_num-1) {
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	4929      	ldr	r1, [pc, #164]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	440b      	add	r3, r1
 8000d32:	332e      	adds	r3, #46	; 0x2e
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	4924      	ldr	r1, [pc, #144]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	440b      	add	r3, r1
 8000d46:	332f      	adds	r3, #47	; 0x2f
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	d109      	bne.n	8000d64 <aci_gatt_proc_complete_event+0xec>
      PRINT_DBG("\n CHARACTERISTIC_DISCOVERY_COMPLETE\r\n");
      printf("\n --------------------------------------------------------\r\n\n");
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <aci_gatt_proc_complete_event+0x168>)
 8000d52:	f00b f875 	bl	800be40 <puts>
      central_status = SELECT_CHARACTERISTIC;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000d58:	220d      	movs	r2, #13
 8000d5a:	701a      	strb	r2, [r3, #0]
      allow_console = TRUE;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <aci_gatt_proc_complete_event+0x16c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
                saved_devices.dev_info[dev_idx].serv_info[saved_devices.dev_info[dev_idx].serv_idx].char_num);
      printf("\r\n\n");
      saved_devices.dev_info[saved_devices.dev_idx].serv_idx++;
      central_status = CHARACTERISTIC_DISCOVERY;
    }
    break;
 8000d62:	e02f      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
      printf("\r\n\n");
 8000d64:	481d      	ldr	r0, [pc, #116]	; (8000ddc <aci_gatt_proc_complete_event+0x164>)
 8000d66:	f00b f86b 	bl	800be40 <puts>
      saved_devices.dev_info[saved_devices.dev_idx].serv_idx++;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4916      	ldr	r1, [pc, #88]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	440b      	add	r3, r1
 8000d7c:	332e      	adds	r3, #46	; 0x2e
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2d8      	uxtb	r0, r3
 8000d84:	4911      	ldr	r1, [pc, #68]	; (8000dcc <aci_gatt_proc_complete_event+0x154>)
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	332e      	adds	r3, #46	; 0x2e
 8000d92:	4602      	mov	r2, r0
 8000d94:	701a      	strb	r2, [r3, #0]
      central_status = CHARACTERISTIC_DISCOVERY;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000d98:	220b      	movs	r2, #11
 8000d9a:	701a      	strb	r2, [r3, #0]
    break;
 8000d9c:	e012      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
  case WAITING_UPDATE_CHARACTERISTIC:
    if (Error_Code != BLE_STATUS_SUCCESS) {
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <aci_gatt_proc_complete_event+0x134>
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000da6:	220e      	movs	r2, #14
 8000da8:	701a      	strb	r2, [r3, #0]
    }
    else {
      central_status = RECEIVE_NOTIFICATIONS;
    }
    break;
 8000daa:	e00b      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
      central_status = RECEIVE_NOTIFICATIONS;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000dae:	2212      	movs	r2, #18
 8000db0:	701a      	strb	r2, [r3, #0]
    break;
 8000db2:	e007      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
  case WRITING_CHARACTERISTIC_VALUE:
  case WAITING_DISABLE_NOTIFICATIONS:
    allow_console = TRUE;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <aci_gatt_proc_complete_event+0x16c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <aci_gatt_proc_complete_event+0x15c>)
 8000dbc:	220e      	movs	r2, #14
 8000dbe:	701a      	strb	r2, [r3, #0]
    break;
 8000dc0:	e000      	b.n	8000dc4 <aci_gatt_proc_complete_event+0x14c>
  default:
    break;
 8000dc2:	bf00      	nop
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000230 	.word	0x20000230
 8000dd0:	0800cc74 	.word	0x0800cc74
 8000dd4:	2000022d 	.word	0x2000022d
 8000dd8:	0800ccac 	.word	0x0800ccac
 8000ddc:	0800caac 	.word	0x0800caac
 8000de0:	0800ccc8 	.word	0x0800ccc8
 8000de4:	2000022c 	.word	0x2000022c

08000de8 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4604      	mov	r4, r0
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4623      	mov	r3, r4
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80bb      	strh	r3, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	70fb      	strb	r3, [r7, #3]
  saved_devices.connected = TRUE;
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	705a      	strb	r2, [r3, #1]
  saved_devices.dev_info[saved_devices.dev_idx].conn_handle = Connection_Handle;
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4a42      	ldr	r2, [pc, #264]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e14:	460b      	mov	r3, r1
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3304      	adds	r3, #4
 8000e20:	88ba      	ldrh	r2, [r7, #4]
 8000e22:	801a      	strh	r2, [r3, #0]
  saved_devices.dev_info[saved_devices.dev_idx].serv_info = serv_info;
 8000e24:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	440b      	add	r3, r1
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	3330      	adds	r3, #48	; 0x30
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <hci_le_connection_complete_event+0x138>)
 8000e3a:	601a      	str	r2, [r3, #0]

  printf("\n Device %d connected \r\n", saved_devices.dev_idx);
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4838      	ldr	r0, [pc, #224]	; (8000f24 <hci_le_connection_complete_event+0x13c>)
 8000e44:	f00a ff8e 	bl	800bd64 <iprintf>
  printf(" - address ");
 8000e48:	4837      	ldr	r0, [pc, #220]	; (8000f28 <hci_le_connection_complete_event+0x140>)
 8000e4a:	f00a ff8b 	bl	800bd64 <iprintf>
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[5], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[4],
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e56:	460b      	mov	r3, r1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	4413      	add	r3, r2
 8000e60:	330b      	adds	r3, #11
 8000e62:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000e64:	461d      	mov	r5, r3
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[5], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[4],
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e6e:	460b      	mov	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	440b      	add	r3, r1
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	4413      	add	r3, r2
 8000e78:	330a      	adds	r3, #10
 8000e7a:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000e7c:	461e      	mov	r6, r3
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[3], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[2],
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e86:	460b      	mov	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	3309      	adds	r3, #9
 8000e92:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000e94:	469c      	mov	ip, r3
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[3], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[2],
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	440b      	add	r3, r1
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000eac:	4618      	mov	r0, r3
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[1], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[0]);
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	440b      	add	r3, r1
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000ec4:	461c      	mov	r4, r3
         saved_devices.dev_info[saved_devices.dev_idx].bdaddr[1], saved_devices.dev_info[saved_devices.dev_idx].bdaddr[0]);
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3306      	adds	r3, #6
 8000eda:	781b      	ldrb	r3, [r3, #0]
  printf("%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	9401      	str	r4, [sp, #4]
 8000ee0:	9000      	str	r0, [sp, #0]
 8000ee2:	4663      	mov	r3, ip
 8000ee4:	4632      	mov	r2, r6
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <hci_le_connection_complete_event+0x144>)
 8000eea:	f00a ff3b 	bl	800bd64 <iprintf>
  printf(" - connection handle 0x%04x\n", saved_devices.dev_info[saved_devices.dev_idx].conn_handle);
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <hci_le_connection_complete_event+0x134>)
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	440b      	add	r3, r1
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	4413      	add	r3, r2
 8000f00:	3304      	adds	r3, #4
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <hci_le_connection_complete_event+0x148>)
 8000f08:	f00a ff2c 	bl	800bd64 <iprintf>

  central_status = CONNECTION_COMPLETE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <hci_le_connection_complete_event+0x14c>)
 8000f0e:	2206      	movs	r2, #6
 8000f10:	701a      	strb	r2, [r3, #0]

  //PRINT_DBG("\n CONNECTION_COMPLETE\r\n");
  //PRINT_DBG(" --------------------------------------------------------\r\n\n");

} /* hci_le_connection_complete_event() */
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000230 	.word	0x20000230
 8000f20:	20000454 	.word	0x20000454
 8000f24:	0800cd08 	.word	0x0800cd08
 8000f28:	0800cd24 	.word	0x0800cd24
 8000f2c:	0800cd30 	.word	0x0800cd30
 8000f30:	0800cd50 	.word	0x0800cd50
 8000f34:	2000022d 	.word	0x2000022d

08000f38 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	460b      	mov	r3, r1
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	71bb      	strb	r3, [r7, #6]
  uint8_t dev_idx = saved_devices.dev_idx;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <hci_disconnection_complete_event+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	73fb      	strb	r3, [r7, #15]

  if (Status != BLE_STATUS_SUCCESS) {
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <hci_disconnection_complete_event+0x28>
    printf("hci_disconnection_complete_event() error code: 0x%02x\n", Status);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <hci_disconnection_complete_event+0x48>)
 8000f5c:	f00a ff02 	bl	800bd64 <iprintf>
  if (Connection_Handle != saved_devices.dev_info[dev_idx].conn_handle) {
    PRINT_DBG("\n hci_disconnection_complete_event() unexpected conn handle: 0x%04x\n",
           Connection_Handle);
  }

  saved_devices.connected = FALSE;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <hci_disconnection_complete_event+0x44>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	705a      	strb	r2, [r3, #1]
  /**
   * In case the disconnection occurs when notifications are enabled, we need
   * to disable the console. It is then enabled in the central process when
   * passing from DISCONNECTION_COMPLETE to INIT_STATUS.
   */
  allow_console = FALSE;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <hci_disconnection_complete_event+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
  central_status = DISCONNECTION_COMPLETE;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <hci_disconnection_complete_event+0x50>)
 8000f6e:	220a      	movs	r2, #10
 8000f70:	701a      	strb	r2, [r3, #0]

  PRINT_DBG("CONNECTION_TERMINATED\n");

} /* hci_disconnection_complete_event() */
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000230 	.word	0x20000230
 8000f80:	0800cd70 	.word	0x0800cd70
 8000f84:	2000022c 	.word	0x2000022c
 8000f88:	2000022d 	.word	0x2000022d

08000f8c <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type    = Advertising_Report[0].Event_Type;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	75bb      	strb	r3, [r7, #22]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	7a1b      	ldrb	r3, [r3, #8]
 8000fa2:	757b      	strb	r3, [r7, #21]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	74fb      	strb	r3, [r7, #19]
  uint8_t bdaddr[6];

  uint8_t index = saved_devices.dev_idx;
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	753b      	strb	r3, [r7, #20]

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address, 6);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	1c9a      	adds	r2, r3, #2
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	6810      	ldr	r0, [r2, #0]
 8000fba:	6018      	str	r0, [r3, #0]
 8000fbc:	8892      	ldrh	r2, [r2, #4]
 8000fbe:	809a      	strh	r2, [r3, #4]
            Advertising_Report[0].Address[5], Advertising_Report[0].Address[4],
            Advertising_Report[0].Address[3], Advertising_Report[0].Address[2],
            Advertising_Report[0].Address[1], Advertising_Report[0].Address[0],
            evt_type, data_length);
  PRINT_DBG("Advert. data ");
  for (uint8_t i=0; i<data_length; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	75fb      	strb	r3, [r7, #23]
 8000fc4:	e002      	b.n	8000fcc <hci_le_advertising_report_event+0x40>
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	75fb      	strb	r3, [r7, #23]
 8000fcc:	7dfa      	ldrb	r2, [r7, #23]
 8000fce:	7d7b      	ldrb	r3, [r7, #21]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3f8      	bcc.n	8000fc6 <hci_le_advertising_report_event+0x3a>
  PRINT_DBG("\n");
  PRINT_DBG("Current device %02x:%02x:%02x:%02x:%02x:%02x \n",
            bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);

  /* save current device found */
  if (evt_type == ADV_IND)
 8000fd4:	7dbb      	ldrb	r3, [r7, #22]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d128      	bne.n	800102c <hci_le_advertising_report_event+0xa0>
  {
    if ((saved_devices.dev_idx < MAX_NUM_OF_DEVICES) && (Is_Device_Saved(bdaddr) == FALSE))
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b09      	cmp	r3, #9
 8000fe0:	d844      	bhi.n	800106c <hci_le_advertising_report_event+0xe0>
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fe82 	bl	8003cf0 <Is_Device_Saved>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d13c      	bne.n	800106c <hci_le_advertising_report_event+0xe0>
    {
      Save_Found_Device(bdaddr, &bdaddr_type, data_length, Advertising_Report[0].Data,
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68dc      	ldr	r4, [r3, #12]
 8000ff6:	7d7a      	ldrb	r2, [r7, #21]
 8000ff8:	f107 0113 	add.w	r1, r7, #19
 8000ffc:	f107 000c 	add.w	r0, r7, #12
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4623      	mov	r3, r4
 8001006:	f001 fcb9 	bl	800297c <Save_Found_Device>
                        index);
      Print_Device_Info(index);
 800100a:	7d3b      	ldrb	r3, [r7, #20]
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fd75 	bl	8002afc <Print_Device_Info>

      saved_devices.dev_num++;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 800101c:	709a      	strb	r2, [r3, #2]
      saved_devices.dev_idx++;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <hci_le_advertising_report_event+0xe8>)
 8001028:	701a      	strb	r2, [r3, #0]
      Save_NonConn_Device(bdaddr);
      Print_NonConn_Device(bdaddr, &bdaddr_type, data_length, Advertising_Report[0].Data);
    }
  }

} /* hci_le_advertising_report_event() */
 800102a:	e01f      	b.n	800106c <hci_le_advertising_report_event+0xe0>
  else if ((evt_type == ADV_NONCONN_IND) || (evt_type == ADV_SCAN_IND))
 800102c:	7dbb      	ldrb	r3, [r7, #22]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d002      	beq.n	8001038 <hci_le_advertising_report_event+0xac>
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d119      	bne.n	800106c <hci_le_advertising_report_event+0xe0>
    if ((non_conn_devices.dev_idx < MAX_NUM_OF_DEVICES) && (Is_Device_Scanned(bdaddr) == FALSE))
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <hci_le_advertising_report_event+0xec>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d815      	bhi.n	800106c <hci_le_advertising_report_event+0xe0>
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fe7b 	bl	8003d40 <Is_Device_Scanned>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10d      	bne.n	800106c <hci_le_advertising_report_event+0xe0>
      Save_NonConn_Device(bdaddr);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fd2b 	bl	8002ab0 <Save_NonConn_Device>
      Print_NonConn_Device(bdaddr, &bdaddr_type, data_length, Advertising_Report[0].Data);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	7d7a      	ldrb	r2, [r7, #21]
 8001060:	f107 0113 	add.w	r1, r7, #19
 8001064:	f107 000c 	add.w	r0, r7, #12
 8001068:	f001 fe00 	bl	8002c6c <Print_NonConn_Device>
} /* hci_le_advertising_report_event() */
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000230 	.word	0x20000230
 8001078:	20000414 	.word	0x20000414

0800107c <aci_att_read_by_group_type_resp_event>:
 *******************************************************************************/
void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t  Attribute_Data_Length,
                                           uint8_t  Data_Length,
                                           uint8_t  Attribute_Data_List[])
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4603      	mov	r3, r0
 8001086:	80fb      	strh	r3, [r7, #6]
 8001088:	460b      	mov	r3, r1
 800108a:	717b      	strb	r3, [r7, #5]
 800108c:	4613      	mov	r3, r2
 800108e:	713b      	strb	r3, [r7, #4]
  uint8_t  *uuid, *uuid_length, *name, *name_length;
  serviceType_t *serv_type;
  uint8_t  i, offset, num_attr;
  uint8_t  dev_idx = saved_devices.dev_idx;
 8001090:	4ba4      	ldr	r3, [pc, #656]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t  serv_idx;
  uint16_t *start_handle, *end_handle;
  char const* serv_name;

  num_attr = (Data_Length / Attribute_Data_Length);
 8001098:	793a      	ldrb	r2, [r7, #4]
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  offset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  for (i=0; i<num_attr; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010b0:	e180      	b.n	80013b4 <aci_att_read_by_group_type_resp_event+0x338>
    serv_idx     = saved_devices.dev_info[dev_idx].serv_idx;
 80010b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010b6:	499b      	ldr	r1, [pc, #620]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	332e      	adds	r3, #46	; 0x2e
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    serv_type    = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type);
 80010ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010ce:	4995      	ldr	r1, [pc, #596]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	440b      	add	r3, r1
 80010da:	3330      	adds	r3, #48	; 0x30
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010e2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80010e6:	fb01 f303 	mul.w	r3, r1, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	3338      	adds	r3, #56	; 0x38
 80010ee:	623b      	str	r3, [r7, #32]
    uuid         = saved_devices.dev_info[dev_idx].serv_info[serv_idx].uuid;
 80010f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010f4:	498b      	ldr	r1, [pc, #556]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	3330      	adds	r3, #48	; 0x30
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001108:	f240 21ba 	movw	r1, #698	; 0x2ba
 800110c:	fb01 f303 	mul.w	r3, r1, r3
 8001110:	4413      	add	r3, r2
 8001112:	3326      	adds	r3, #38	; 0x26
 8001114:	61fb      	str	r3, [r7, #28]
    uuid_length  = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].uuid_length);
 8001116:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800111a:	4982      	ldr	r1, [pc, #520]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	3330      	adds	r3, #48	; 0x30
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800112e:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4413      	add	r3, r2
 8001138:	3325      	adds	r3, #37	; 0x25
 800113a:	61bb      	str	r3, [r7, #24]
    name         = saved_devices.dev_info[dev_idx].serv_info[serv_idx].name;
 800113c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001140:	4978      	ldr	r1, [pc, #480]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	440b      	add	r3, r1
 800114c:	3330      	adds	r3, #48	; 0x30
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001154:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	3305      	adds	r3, #5
 8001160:	617b      	str	r3, [r7, #20]
    name_length  = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].name_length);
 8001162:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001166:	496f      	ldr	r1, [pc, #444]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	440b      	add	r3, r1
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800117a:	f240 21ba 	movw	r1, #698	; 0x2ba
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	3304      	adds	r3, #4
 8001186:	613b      	str	r3, [r7, #16]
    start_handle = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].start_handle);
 8001188:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800118c:	4965      	ldr	r1, [pc, #404]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3330      	adds	r3, #48	; 0x30
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011a0:	f240 21ba 	movw	r1, #698	; 0x2ba
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
    end_handle   = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].end_handle);
 80011ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011b0:	495c      	ldr	r1, [pc, #368]	; (8001324 <aci_att_read_by_group_type_resp_event+0x2a8>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	3330      	adds	r3, #48	; 0x30
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011c4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]

    *start_handle = Attribute_Data_List[offset];
 80011d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	801a      	strh	r2, [r3, #0]
    *end_handle   = Attribute_Data_List[offset+2];
 80011e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011e6:	3302      	adds	r3, #2
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	801a      	strh	r2, [r3, #0]

    printf("\r\n");
 80011f4:	484c      	ldr	r0, [pc, #304]	; (8001328 <aci_att_read_by_group_type_resp_event+0x2ac>)
 80011f6:	f00a fe23 	bl	800be40 <puts>
    PRINT_DBG(" aci_att_read_by_group_type_resp_event\r\n");
    PRINT_DBG(" connection handle 0x%04x\r\n", Connection_Handle);
    PRINT_DBG(" data length %d\r\n", Data_Length);
    PRINT_DBG(" attribute data length %d\r\n", Attribute_Data_Length);

    *serv_type = CUSTOM_SERVICE_TYPE;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	2207      	movs	r2, #7
 80011fe:	701a      	strb	r2, [r3, #0]
    serv_name = CUSTOM_SERVICE_NAME;
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <aci_att_read_by_group_type_resp_event+0x2b0>)
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28

    //UUID Type
    if (Attribute_Data_Length == 6) {
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	2b06      	cmp	r3, #6
 8001208:	d133      	bne.n	8001272 <aci_att_read_by_group_type_resp_event+0x1f6>
      PRINT_DBG("UUID_TYPE_16\n");
      uuid[0] = Attribute_Data_List[offset+4];
 800120a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800120e:	3304      	adds	r3, #4
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	701a      	strb	r2, [r3, #0]
      uuid[1] = Attribute_Data_List[offset+5];
 800121a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800121e:	3305      	adds	r3, #5
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	441a      	add	r2, r3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	701a      	strb	r2, [r3, #0]
      *uuid_length = UUID_MIN_LENGTH;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
      if (BLUENRG_memcmp(uuid, GENERIC_ACCESS_PROFILE_UUID, (Attribute_Data_Length-4)) == 0) {
 8001232:	797b      	ldrb	r3, [r7, #5]
 8001234:	3b04      	subs	r3, #4
 8001236:	461a      	mov	r2, r3
 8001238:	493d      	ldr	r1, [pc, #244]	; (8001330 <aci_att_read_by_group_type_resp_event+0x2b4>)
 800123a:	69f8      	ldr	r0, [r7, #28]
 800123c:	f00a fee0 	bl	800c000 <memcmp>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <aci_att_read_by_group_type_resp_event+0x1d6>
        *serv_type = GENERIC_ACCESS_PROFILE_TYPE;
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
        serv_name = GENERIC_ACCESS_PROFILE_NAME;
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <aci_att_read_by_group_type_resp_event+0x2b8>)
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001250:	e05c      	b.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
      }
      else if (BLUENRG_memcmp (uuid, GENERIC_ATTRIBUTE_PROFILE_UUID, (Attribute_Data_Length-4)) == 0) {
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	3b04      	subs	r3, #4
 8001256:	461a      	mov	r2, r3
 8001258:	4937      	ldr	r1, [pc, #220]	; (8001338 <aci_att_read_by_group_type_resp_event+0x2bc>)
 800125a:	69f8      	ldr	r0, [r7, #28]
 800125c:	f00a fed0 	bl	800c000 <memcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d152      	bne.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
        *serv_type = GENERIC_ATTRIBUTE_PROFILE_TYPE;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2202      	movs	r2, #2
 800126a:	701a      	strb	r2, [r3, #0]
        serv_name = GENERIC_ATTRIBUTE_PROFILE_NAME;
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <aci_att_read_by_group_type_resp_event+0x2c0>)
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001270:	e04c      	b.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
      }
    }
    else {
      PRINT_DBG("UUID_TYPE_128\n");
      *uuid_length = UUID_MAX_LENGTH;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2210      	movs	r2, #16
 8001276:	701a      	strb	r2, [r3, #0]
      BLUENRG_memcpy(uuid, Attribute_Data_List+offset+4, *uuid_length);
 8001278:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800127c:	3304      	adds	r3, #4
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	69f8      	ldr	r0, [r7, #28]
 800128a:	f00a ff43 	bl	800c114 <memcpy>
      if (BLUENRG_memcmp (uuid, ST_HARDWARE_SERVICE_UUID, (Attribute_Data_Length-4)) == 0) {
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	3b04      	subs	r3, #4
 8001292:	461a      	mov	r2, r3
 8001294:	492a      	ldr	r1, [pc, #168]	; (8001340 <aci_att_read_by_group_type_resp_event+0x2c4>)
 8001296:	69f8      	ldr	r0, [r7, #28]
 8001298:	f00a feb2 	bl	800c000 <memcmp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <aci_att_read_by_group_type_resp_event+0x232>
        *serv_type = ST_HARDWARE_SERVICE_TYPE;
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
        serv_name = ST_HARDWARE_SERVICE_NAME;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <aci_att_read_by_group_type_resp_event+0x2c8>)
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ac:	e02e      	b.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
      }
      else if (BLUENRG_memcmp (uuid, ST_CONFIG_SERVICE_UUID, (Attribute_Data_Length-4)) == 0) {
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	3b04      	subs	r3, #4
 80012b2:	461a      	mov	r2, r3
 80012b4:	4924      	ldr	r1, [pc, #144]	; (8001348 <aci_att_read_by_group_type_resp_event+0x2cc>)
 80012b6:	69f8      	ldr	r0, [r7, #28]
 80012b8:	f00a fea2 	bl	800c000 <memcmp>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <aci_att_read_by_group_type_resp_event+0x252>
        *serv_type = ST_CONFIG_SERVICE_TYPE;
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	2204      	movs	r2, #4
 80012c6:	701a      	strb	r2, [r3, #0]
        serv_name = ST_CONFIG_SERVICE_NAME;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <aci_att_read_by_group_type_resp_event+0x2d0>)
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	e01e      	b.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
      }
      else if (BLUENRG_memcmp (uuid, ST_SW_SENS_SERVICE_UUID, (Attribute_Data_Length-4)) == 0) {
 80012ce:	797b      	ldrb	r3, [r7, #5]
 80012d0:	3b04      	subs	r3, #4
 80012d2:	461a      	mov	r2, r3
 80012d4:	491e      	ldr	r1, [pc, #120]	; (8001350 <aci_att_read_by_group_type_resp_event+0x2d4>)
 80012d6:	69f8      	ldr	r0, [r7, #28]
 80012d8:	f00a fe92 	bl	800c000 <memcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <aci_att_read_by_group_type_resp_event+0x272>
        *serv_type = ST_SW_SENS_SERVICE_TYPE;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2205      	movs	r2, #5
 80012e6:	701a      	strb	r2, [r3, #0]
        serv_name = ST_SW_SENS_SERVICE_NAME;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <aci_att_read_by_group_type_resp_event+0x2d8>)
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ec:	e00e      	b.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
      }
      else if (BLUENRG_memcmp (uuid, ST_CONSOLE_SERVICE_UUID, (Attribute_Data_Length-4)) == 0) {
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	3b04      	subs	r3, #4
 80012f2:	461a      	mov	r2, r3
 80012f4:	4918      	ldr	r1, [pc, #96]	; (8001358 <aci_att_read_by_group_type_resp_event+0x2dc>)
 80012f6:	69f8      	ldr	r0, [r7, #28]
 80012f8:	f00a fe82 	bl	800c000 <memcmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <aci_att_read_by_group_type_resp_event+0x290>
        *serv_type = ST_CONSOLE_SERVICE_TYPE;
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2206      	movs	r2, #6
 8001306:	701a      	strb	r2, [r3, #0]
        serv_name = ST_CONSOLE_SERVICE_NAME;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <aci_att_read_by_group_type_resp_event+0x2e0>)
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }

    *name_length = (strlen(serv_name) > MAX_NAME_LENGTH) ? MAX_NAME_LENGTH : strlen(serv_name);
 800130c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800130e:	f7fe ff5f 	bl	80001d0 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	2b20      	cmp	r3, #32
 8001316:	d823      	bhi.n	8001360 <aci_att_read_by_group_type_resp_event+0x2e4>
 8001318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800131a:	f7fe ff59 	bl	80001d0 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b2da      	uxtb	r2, r3
 8001322:	e01e      	b.n	8001362 <aci_att_read_by_group_type_resp_event+0x2e6>
 8001324:	20000230 	.word	0x20000230
 8001328:	0800cbd0 	.word	0x0800cbd0
 800132c:	0800cda8 	.word	0x0800cda8
 8001330:	20000008 	.word	0x20000008
 8001334:	0800cdc4 	.word	0x0800cdc4
 8001338:	2000000c 	.word	0x2000000c
 800133c:	0800cddc 	.word	0x0800cddc
 8001340:	20000010 	.word	0x20000010
 8001344:	0800cdf8 	.word	0x0800cdf8
 8001348:	20000020 	.word	0x20000020
 800134c:	0800ce18 	.word	0x0800ce18
 8001350:	20000030 	.word	0x20000030
 8001354:	0800ce38 	.word	0x0800ce38
 8001358:	20000040 	.word	0x20000040
 800135c:	0800ce58 	.word	0x0800ce58
 8001360:	2220      	movs	r2, #32
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy(name, serv_name, *name_length);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f00a fed0 	bl	800c114 <memcpy>

    saved_devices.dev_info[dev_idx].serv_idx++;
 8001374:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001378:	4920      	ldr	r1, [pc, #128]	; (80013fc <aci_att_read_by_group_type_resp_event+0x380>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	332e      	adds	r3, #46	; 0x2e
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2d8      	uxtb	r0, r3
 800138c:	491b      	ldr	r1, [pc, #108]	; (80013fc <aci_att_read_by_group_type_resp_event+0x380>)
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	332e      	adds	r3, #46	; 0x2e
 800139a:	4602      	mov	r2, r0
 800139c:	701a      	strb	r2, [r3, #0]
    offset += Attribute_Data_Length;
 800139e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	4413      	add	r3, r2
 80013a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for (i=0; i<num_attr; i++) {
 80013aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ae:	3301      	adds	r3, #1
 80013b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80013b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013bc:	429a      	cmp	r2, r3
 80013be:	f4ff ae78 	bcc.w	80010b2 <aci_att_read_by_group_type_resp_event+0x36>
  }

  saved_devices.dev_info[dev_idx].serv_num += num_attr;
 80013c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <aci_att_read_by_group_type_resp_event+0x380>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	440b      	add	r3, r1
 80013d2:	332f      	adds	r3, #47	; 0x2f
 80013d4:	7819      	ldrb	r1, [r3, #0]
 80013d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013de:	440b      	add	r3, r1
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	4906      	ldr	r1, [pc, #24]	; (80013fc <aci_att_read_by_group_type_resp_event+0x380>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	440b      	add	r3, r1
 80013ee:	332f      	adds	r3, #47	; 0x2f
 80013f0:	4602      	mov	r2, r0
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000230 	.word	0x20000230

08001400 <aci_att_read_by_type_resp_event>:
 *******************************************************************************/
void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[])
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4603      	mov	r3, r0
 800140a:	80fb      	strh	r3, [r7, #6]
 800140c:	460b      	mov	r3, r1
 800140e:	717b      	strb	r3, [r7, #5]
 8001410:	4613      	mov	r3, r2
 8001412:	713b      	strb	r3, [r7, #4]
  uint16_t *decl_handle, *value_handle;
  uint8_t  *broadcast, *read, *write_wo_resp, *write, *notify, *indicate, *auth_signed_write;
  uint8_t  char_idx;
  characteristicType_t *char_type;
  char const* char_name;
  uint8_t  offset = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  uint8_t dev_idx  = saved_devices.dev_idx;
 800141a:	4bd1      	ldr	r3, [pc, #836]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  uint8_t serv_idx = saved_devices.dev_info[dev_idx].serv_idx;
 8001422:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001426:	49ce      	ldr	r1, [pc, #824]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	440b      	add	r3, r1
 8001432:	332e      	adds	r3, #46	; 0x2e
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  char_idx = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx;
 800143a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800143e:	49c8      	ldr	r1, [pc, #800]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	440b      	add	r3, r1
 800144a:	3330      	adds	r3, #48	; 0x30
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001452:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  printf("\n");
 8001464:	200a      	movs	r0, #10
 8001466:	f00a fc8f 	bl	800bd88 <putchar>
  PRINT_DBG(" aci_att_read_by_type_resp_event\r\n");
  PRINT_DBG(" connection handle 0x%04x\r\n", Connection_Handle);
  PRINT_DBG(" data length %d\r\n", Data_Length);
  PRINT_DBG(" handle value pair length %d\r\n", Handle_Value_Pair_Length);

  char_type    = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].char_type);
 800146a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800146e:	49bc      	ldr	r1, [pc, #752]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001482:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	441a      	add	r2, r3
 800148c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	3370      	adds	r3, #112	; 0x70
 8001494:	4413      	add	r3, r2
 8001496:	3308      	adds	r3, #8
 8001498:	643b      	str	r3, [r7, #64]	; 0x40
  uuid         = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].uuid;
 800149a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800149e:	49b0      	ldr	r1, [pc, #704]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	3330      	adds	r3, #48	; 0x30
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014b2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	441a      	add	r2, r3
 80014bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014c0:	019b      	lsls	r3, r3, #6
 80014c2:	3358      	adds	r3, #88	; 0x58
 80014c4:	4413      	add	r3, r2
 80014c6:	3308      	adds	r3, #8
 80014c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uuid_length  = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].uuid_length);
 80014ca:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80014ce:	49a4      	ldr	r1, [pc, #656]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	440b      	add	r3, r1
 80014da:	3330      	adds	r3, #48	; 0x30
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014e2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	441a      	add	r2, r3
 80014ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	3358      	adds	r3, #88	; 0x58
 80014f4:	4413      	add	r3, r2
 80014f6:	3307      	adds	r3, #7
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  name         = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].name;
 80014fa:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80014fe:	4998      	ldr	r1, [pc, #608]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	440b      	add	r3, r1
 800150a:	3330      	adds	r3, #48	; 0x30
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001512:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	441a      	add	r2, r3
 800151c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	3338      	adds	r3, #56	; 0x38
 8001524:	4413      	add	r3, r2
 8001526:	3307      	adds	r3, #7
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  name_length  = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].name_length);
 800152a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800152e:	498c      	ldr	r1, [pc, #560]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	440b      	add	r3, r1
 800153a:	3330      	adds	r3, #48	; 0x30
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001542:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	441a      	add	r2, r3
 800154c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	3338      	adds	r3, #56	; 0x38
 8001554:	4413      	add	r3, r2
 8001556:	3306      	adds	r3, #6
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  decl_handle  = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].decl_handle);
 800155a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800155e:	4980      	ldr	r1, [pc, #512]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	440b      	add	r3, r1
 800156a:	3330      	adds	r3, #48	; 0x30
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001572:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	441a      	add	r2, r3
 800157c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	3338      	adds	r3, #56	; 0x38
 8001584:	4413      	add	r3, r2
 8001586:	3302      	adds	r3, #2
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  value_handle = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].value_handle);
 800158a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800158e:	4974      	ldr	r1, [pc, #464]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	3330      	adds	r3, #48	; 0x30
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015a2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	441a      	add	r2, r3
 80015ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	3338      	adds	r3, #56	; 0x38
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  broadcast         = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].broadcast);
 80015ba:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80015be:	4968      	ldr	r1, [pc, #416]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	3330      	adds	r3, #48	; 0x30
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015d2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	441a      	add	r2, r3
 80015dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	3368      	adds	r3, #104	; 0x68
 80015e4:	4413      	add	r3, r2
 80015e6:	3309      	adds	r3, #9
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  read              = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].read);
 80015ea:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80015ee:	495c      	ldr	r1, [pc, #368]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	440b      	add	r3, r1
 80015fa:	3330      	adds	r3, #48	; 0x30
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001602:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	441a      	add	r2, r3
 800160c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	3370      	adds	r3, #112	; 0x70
 8001614:	4413      	add	r3, r2
 8001616:	3302      	adds	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
  write_wo_resp     = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].write_wo_resp);
 800161a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800161e:	4950      	ldr	r1, [pc, #320]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	3330      	adds	r3, #48	; 0x30
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001632:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	441a      	add	r2, r3
 800163c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	3370      	adds	r3, #112	; 0x70
 8001644:	4413      	add	r3, r2
 8001646:	3303      	adds	r3, #3
 8001648:	61fb      	str	r3, [r7, #28]
  write             = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].write);
 800164a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800164e:	4944      	ldr	r1, [pc, #272]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	440b      	add	r3, r1
 800165a:	3330      	adds	r3, #48	; 0x30
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001662:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	441a      	add	r2, r3
 800166c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	3370      	adds	r3, #112	; 0x70
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  notify            = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].notify);
 800167a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800167e:	4938      	ldr	r1, [pc, #224]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	3330      	adds	r3, #48	; 0x30
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001692:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	441a      	add	r2, r3
 800169c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	3370      	adds	r3, #112	; 0x70
 80016a4:	4413      	add	r3, r2
 80016a6:	3305      	adds	r3, #5
 80016a8:	617b      	str	r3, [r7, #20]
  indicate          = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].indicate);
 80016aa:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80016ae:	492c      	ldr	r1, [pc, #176]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	440b      	add	r3, r1
 80016ba:	3330      	adds	r3, #48	; 0x30
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80016c2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	441a      	add	r2, r3
 80016cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	3370      	adds	r3, #112	; 0x70
 80016d4:	4413      	add	r3, r2
 80016d6:	3306      	adds	r3, #6
 80016d8:	613b      	str	r3, [r7, #16]
  auth_signed_write = &(saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].auth_signed_write);
 80016da:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80016de:	4920      	ldr	r1, [pc, #128]	; (8001760 <aci_att_read_by_type_resp_event+0x360>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	440b      	add	r3, r1
 80016ea:	3330      	adds	r3, #48	; 0x30
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80016f2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	441a      	add	r2, r3
 80016fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	3370      	adds	r3, #112	; 0x70
 8001704:	4413      	add	r3, r2
 8001706:	3307      	adds	r3, #7
 8001708:	60fb      	str	r3, [r7, #12]

  // UUID Type
  if (Handle_Value_Pair_Length == 7) {
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d114      	bne.n	800173a <aci_att_read_by_type_resp_event+0x33a>
    PRINT_DBG("Char UUID_TYPE_16\n");
    *uuid_length = UUID_MIN_LENGTH;
 8001710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
    uuid[0] = Handle_Value_Pair_Data[offset+5];
 8001716:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800171a:	3305      	adds	r3, #5
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	701a      	strb	r2, [r3, #0]
    uuid[1] = Handle_Value_Pair_Data[offset+6];
 8001726:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800172a:	3306      	adds	r3, #6
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	441a      	add	r2, r3
 8001730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001732:	3301      	adds	r3, #1
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	e01f      	b.n	800177a <aci_att_read_by_type_resp_event+0x37a>
    PRINT_DBG("C UUID-%02x%02x (len %d)\n", uuid[0], uuid[1], *uuid_length);
  } else {
    PRINT_DBG("Char UUID_TYPE_128\n\r");
    *uuid_length = UUID_MAX_LENGTH;
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173c:	2210      	movs	r2, #16
 800173e:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy(uuid, Handle_Value_Pair_Data+offset+5, *uuid_length);
 8001740:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001744:	3305      	adds	r3, #5
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	18d1      	adds	r1, r2, r3
 800174a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001752:	f00a fcdf 	bl	800c114 <memcpy>
    PRINT_DBG("C UUID-");
    for (uint8_t j = 0; j < *uuid_length; j++) {
 8001756:	2300      	movs	r3, #0
 8001758:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800175c:	e007      	b.n	800176e <aci_att_read_by_type_resp_event+0x36e>
 800175e:	bf00      	nop
 8001760:	20000230 	.word	0x20000230
 8001764:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001768:	3301      	adds	r3, #1
 800176a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001776:	429a      	cmp	r2, r3
 8001778:	d3f4      	bcc.n	8001764 <aci_att_read_by_type_resp_event+0x364>
  }

  /**
  * Handles
  */
  *decl_handle  = Handle_Value_Pair_Data[offset];
 800177a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	801a      	strh	r2, [r3, #0]
  *value_handle = Handle_Value_Pair_Data[offset+3];
 800178a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800178e:	3303      	adds	r3, #3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b29a      	uxth	r2, r3
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	801a      	strh	r2, [r3, #0]
  /**
  * Properties
  */
  *broadcast         = (props_mask[0] & Handle_Value_Pair_Data[offset+2]);
 800179c:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017a4:	3302      	adds	r3, #2
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	440b      	add	r3, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4013      	ands	r3, r2
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	701a      	strb	r2, [r3, #0]
  *read              = (props_mask[1] & Handle_Value_Pair_Data[offset+2])>>1;
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 80017b6:	785a      	ldrb	r2, [r3, #1]
 80017b8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017bc:	3302      	adds	r3, #2
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	440b      	add	r3, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4013      	ands	r3, r2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	701a      	strb	r2, [r3, #0]
  *write_wo_resp     = (props_mask[2] & Handle_Value_Pair_Data[offset+2])>>2;
 80017d0:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 80017d2:	789a      	ldrb	r2, [r3, #2]
 80017d4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017d8:	3302      	adds	r3, #2
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4013      	ands	r3, r2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	701a      	strb	r2, [r3, #0]
  *write             = (props_mask[3] & Handle_Value_Pair_Data[offset+2])>>3;
 80017ec:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 80017ee:	78da      	ldrb	r2, [r3, #3]
 80017f0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017f4:	3302      	adds	r3, #2
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	440b      	add	r3, r1
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4013      	ands	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	701a      	strb	r2, [r3, #0]
  *notify            = (props_mask[4] & Handle_Value_Pair_Data[offset+2])>>4;
 8001808:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 800180a:	791a      	ldrb	r2, [r3, #4]
 800180c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001810:	3302      	adds	r3, #2
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	440b      	add	r3, r1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4013      	ands	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	b2da      	uxtb	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	701a      	strb	r2, [r3, #0]
  *indicate          = (props_mask[5] & Handle_Value_Pair_Data[offset+2])>>5;
 8001824:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 8001826:	795a      	ldrb	r2, [r3, #5]
 8001828:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800182c:	3302      	adds	r3, #2
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4013      	ands	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	b2da      	uxtb	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	701a      	strb	r2, [r3, #0]
  *auth_signed_write = (props_mask[6] & Handle_Value_Pair_Data[offset+2])>>6;
 8001840:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <aci_att_read_by_type_resp_event+0x610>)
 8001842:	799a      	ldrb	r2, [r3, #6]
 8001844:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001848:	3302      	adds	r3, #2
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	440b      	add	r3, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4013      	ands	r3, r2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	701a      	strb	r2, [r3, #0]

  if ((BLUENRG_memcmp (uuid, ST_ENVIRONMENTAL_CHAR_UUID, (Handle_Value_Pair_Length-5))    == 0) ||
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	3b05      	subs	r3, #5
 8001860:	461a      	mov	r2, r3
 8001862:	496c      	ldr	r1, [pc, #432]	; (8001a14 <aci_att_read_by_type_resp_event+0x614>)
 8001864:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001866:	f00a fbcb 	bl	800c000 <memcmp>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <aci_att_read_by_type_resp_event+0x484>
      (BLUENRG_memcmp (uuid, ST_ENVIRONMENTAL_ST_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0)) {
 8001870:	797b      	ldrb	r3, [r7, #5]
 8001872:	3b05      	subs	r3, #5
 8001874:	461a      	mov	r2, r3
 8001876:	4968      	ldr	r1, [pc, #416]	; (8001a18 <aci_att_read_by_type_resp_event+0x618>)
 8001878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800187a:	f00a fbc1 	bl	800c000 <memcmp>
 800187e:	4603      	mov	r3, r0
  if ((BLUENRG_memcmp (uuid, ST_ENVIRONMENTAL_CHAR_UUID, (Handle_Value_Pair_Length-5))    == 0) ||
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <aci_att_read_by_type_resp_event+0x490>
        *char_type = ST_ENVIRONMENTAL_CHAR_TYPE;
 8001884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
        char_name  = ST_ENVIRONMENTAL_CHAR_NAME;
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <aci_att_read_by_type_resp_event+0x61c>)
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188e:	e16c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_PRESSURE_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	3b05      	subs	r3, #5
 8001894:	461a      	mov	r2, r3
 8001896:	4962      	ldr	r1, [pc, #392]	; (8001a20 <aci_att_read_by_type_resp_event+0x620>)
 8001898:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800189a:	f00a fbb1 	bl	800c000 <memcmp>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <aci_att_read_by_type_resp_event+0x4b0>
    *char_type = ST_PRESSURE_CHAR_TYPE;
 80018a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_PRESSURE_CHAR_NAME;
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <aci_att_read_by_type_resp_event+0x624>)
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ae:	e15c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_HUMIDITY_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80018b0:	797b      	ldrb	r3, [r7, #5]
 80018b2:	3b05      	subs	r3, #5
 80018b4:	461a      	mov	r2, r3
 80018b6:	495c      	ldr	r1, [pc, #368]	; (8001a28 <aci_att_read_by_type_resp_event+0x628>)
 80018b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018ba:	f00a fba1 	bl	800c000 <memcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <aci_att_read_by_type_resp_event+0x4d0>
    *char_type = ST_HUMIDITY_CHAR_TYPE;
 80018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_HUMIDITY_CHAR_NAME;
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <aci_att_read_by_type_resp_event+0x62c>)
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ce:	e14c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_TEMPERATURE_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80018d0:	797b      	ldrb	r3, [r7, #5]
 80018d2:	3b05      	subs	r3, #5
 80018d4:	461a      	mov	r2, r3
 80018d6:	4956      	ldr	r1, [pc, #344]	; (8001a30 <aci_att_read_by_type_resp_event+0x630>)
 80018d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018da:	f00a fb91 	bl	800c000 <memcmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <aci_att_read_by_type_resp_event+0x4f0>
    *char_type = ST_TEMPERATURE_CHAR_TYPE;
 80018e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e6:	2204      	movs	r2, #4
 80018e8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_TEMPERATURE_CHAR_NAME;
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <aci_att_read_by_type_resp_event+0x634>)
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ee:	e13c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_LED_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80018f0:	797b      	ldrb	r3, [r7, #5]
 80018f2:	3b05      	subs	r3, #5
 80018f4:	461a      	mov	r2, r3
 80018f6:	4950      	ldr	r1, [pc, #320]	; (8001a38 <aci_att_read_by_type_resp_event+0x638>)
 80018f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018fa:	f00a fb81 	bl	800c000 <memcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <aci_att_read_by_type_resp_event+0x510>
    *char_type = ST_LED_CHAR_TYPE;
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	2206      	movs	r2, #6
 8001908:	701a      	strb	r2, [r3, #0]
    char_name  = ST_LED_CHAR_NAME;
 800190a:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <aci_att_read_by_type_resp_event+0x63c>)
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190e:	e12c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_CONFIG_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001910:	797b      	ldrb	r3, [r7, #5]
 8001912:	3b05      	subs	r3, #5
 8001914:	461a      	mov	r2, r3
 8001916:	494a      	ldr	r1, [pc, #296]	; (8001a40 <aci_att_read_by_type_resp_event+0x640>)
 8001918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800191a:	f00a fb71 	bl	800c000 <memcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <aci_att_read_by_type_resp_event+0x530>
    *char_type = ST_CONFIG_CHAR_TYPE;
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	2207      	movs	r2, #7
 8001928:	701a      	strb	r2, [r3, #0]
    char_name  = ST_CONFIG_CHAR_NAME;
 800192a:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <aci_att_read_by_type_resp_event+0x644>)
 800192c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192e:	e11c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_ACC_EVENT_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3b05      	subs	r3, #5
 8001934:	461a      	mov	r2, r3
 8001936:	4944      	ldr	r1, [pc, #272]	; (8001a48 <aci_att_read_by_type_resp_event+0x648>)
 8001938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800193a:	f00a fb61 	bl	800c000 <memcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <aci_att_read_by_type_resp_event+0x550>
    *char_type = ST_ACC_EVENT_CHAR_TYPE;
 8001944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001946:	2208      	movs	r2, #8
 8001948:	701a      	strb	r2, [r3, #0]
    char_name  = ST_ACC_EVENT_CHAR_NAME;
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <aci_att_read_by_type_resp_event+0x64c>)
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194e:	e10c      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_MIC_EVENT_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	3b05      	subs	r3, #5
 8001954:	461a      	mov	r2, r3
 8001956:	493e      	ldr	r1, [pc, #248]	; (8001a50 <aci_att_read_by_type_resp_event+0x650>)
 8001958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800195a:	f00a fb51 	bl	800c000 <memcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <aci_att_read_by_type_resp_event+0x570>
    *char_type = ST_MIC_EVENT_CHAR_TYPE;
 8001964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001966:	2209      	movs	r2, #9
 8001968:	701a      	strb	r2, [r3, #0]
    char_name  = ST_MIC_EVENT_CHAR_NAME;
 800196a:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <aci_att_read_by_type_resp_event+0x654>)
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800196e:	e0fc      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_PROXIMITY_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001970:	797b      	ldrb	r3, [r7, #5]
 8001972:	3b05      	subs	r3, #5
 8001974:	461a      	mov	r2, r3
 8001976:	4938      	ldr	r1, [pc, #224]	; (8001a58 <aci_att_read_by_type_resp_event+0x658>)
 8001978:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800197a:	f00a fb41 	bl	800c000 <memcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <aci_att_read_by_type_resp_event+0x590>
    *char_type = ST_PROXIMITY_CHAR_TYPE;
 8001984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001986:	220a      	movs	r2, #10
 8001988:	701a      	strb	r2, [r3, #0]
    char_name  = ST_PROXIMITY_CHAR_NAME;
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <aci_att_read_by_type_resp_event+0x65c>)
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198e:	e0ec      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_LUX_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	3b05      	subs	r3, #5
 8001994:	461a      	mov	r2, r3
 8001996:	4932      	ldr	r1, [pc, #200]	; (8001a60 <aci_att_read_by_type_resp_event+0x660>)
 8001998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800199a:	f00a fb31 	bl	800c000 <memcmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <aci_att_read_by_type_resp_event+0x5b0>
    *char_type = ST_LUX_CHAR_TYPE;
 80019a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a6:	220b      	movs	r2, #11
 80019a8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_LUX_CHAR_NAME;
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <aci_att_read_by_type_resp_event+0x664>)
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ae:	e0dc      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_ACC_GYRO_MAG_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	3b05      	subs	r3, #5
 80019b4:	461a      	mov	r2, r3
 80019b6:	492c      	ldr	r1, [pc, #176]	; (8001a68 <aci_att_read_by_type_resp_event+0x668>)
 80019b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019ba:	f00a fb21 	bl	800c000 <memcmp>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <aci_att_read_by_type_resp_event+0x5d0>
    *char_type = ST_ACC_GYRO_MAG_CHAR_TYPE;
 80019c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c6:	220c      	movs	r2, #12
 80019c8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_ACC_GYRO_MAG_CHAR_NAME;
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <aci_att_read_by_type_resp_event+0x66c>)
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ce:	e0cc      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_QUATERNIONS_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80019d0:	797b      	ldrb	r3, [r7, #5]
 80019d2:	3b05      	subs	r3, #5
 80019d4:	461a      	mov	r2, r3
 80019d6:	4926      	ldr	r1, [pc, #152]	; (8001a70 <aci_att_read_by_type_resp_event+0x670>)
 80019d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019da:	f00a fb11 	bl	800c000 <memcmp>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <aci_att_read_by_type_resp_event+0x5f0>
    *char_type = ST_QUATERNIONS_CHAR_TYPE;
 80019e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e6:	220d      	movs	r2, #13
 80019e8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_QUATERNIONS_CHAR_NAME;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <aci_att_read_by_type_resp_event+0x674>)
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ee:	e0bc      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_ECOMPASS_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 80019f0:	797b      	ldrb	r3, [r7, #5]
 80019f2:	3b05      	subs	r3, #5
 80019f4:	461a      	mov	r2, r3
 80019f6:	4920      	ldr	r1, [pc, #128]	; (8001a78 <aci_att_read_by_type_resp_event+0x678>)
 80019f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019fa:	f00a fb01 	bl	800c000 <memcmp>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d13d      	bne.n	8001a80 <aci_att_read_by_type_resp_event+0x680>
    *char_type = ST_ECOMPASS_CHAR_TYPE;
 8001a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a06:	220e      	movs	r2, #14
 8001a08:	701a      	strb	r2, [r3, #0]
    char_name  = ST_ECOMPASS_CHAR_NAME;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <aci_att_read_by_type_resp_event+0x67c>)
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a0e:	e0ac      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000050 	.word	0x20000050
 8001a18:	20000060 	.word	0x20000060
 8001a1c:	0800ce74 	.word	0x0800ce74
 8001a20:	20000070 	.word	0x20000070
 8001a24:	0800ce94 	.word	0x0800ce94
 8001a28:	20000080 	.word	0x20000080
 8001a2c:	0800ceb0 	.word	0x0800ceb0
 8001a30:	20000090 	.word	0x20000090
 8001a34:	0800cecc 	.word	0x0800cecc
 8001a38:	200000a0 	.word	0x200000a0
 8001a3c:	0800ceec 	.word	0x0800ceec
 8001a40:	200000f0 	.word	0x200000f0
 8001a44:	0800cf04 	.word	0x0800cf04
 8001a48:	200000b0 	.word	0x200000b0
 8001a4c:	0800cf1c 	.word	0x0800cf1c
 8001a50:	200000c0 	.word	0x200000c0
 8001a54:	0800cf3c 	.word	0x0800cf3c
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	0800cf58 	.word	0x0800cf58
 8001a60:	200000e0 	.word	0x200000e0
 8001a64:	0800cf74 	.word	0x0800cf74
 8001a68:	20000100 	.word	0x20000100
 8001a6c:	0800cf8c 	.word	0x0800cf8c
 8001a70:	20000110 	.word	0x20000110
 8001a74:	0800cfac 	.word	0x0800cfac
 8001a78:	20000120 	.word	0x20000120
 8001a7c:	0800cfcc 	.word	0x0800cfcc
  }
  else if (BLUENRG_memcmp (uuid, ST_ACTIVITY_REC_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001a80:	797b      	ldrb	r3, [r7, #5]
 8001a82:	3b05      	subs	r3, #5
 8001a84:	461a      	mov	r2, r3
 8001a86:	4961      	ldr	r1, [pc, #388]	; (8001c0c <aci_att_read_by_type_resp_event+0x80c>)
 8001a88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a8a:	f00a fab9 	bl	800c000 <memcmp>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <aci_att_read_by_type_resp_event+0x6a0>
    *char_type = ST_ACTIVITY_REC_CHAR_TYPE;
 8001a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a96:	220f      	movs	r2, #15
 8001a98:	701a      	strb	r2, [r3, #0]
    char_name  = ST_ACTIVITY_REC_CHAR_NAME;
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <aci_att_read_by_type_resp_event+0x810>)
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9e:	e064      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_CARRY_POSITION_REC_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	495b      	ldr	r1, [pc, #364]	; (8001c14 <aci_att_read_by_type_resp_event+0x814>)
 8001aa8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aaa:	f00a faa9 	bl	800c000 <memcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <aci_att_read_by_type_resp_event+0x6c0>
    *char_type = ST_CARRY_POSITION_REC_CHAR_TYPE;
 8001ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_CARRY_POSITION_REC_CHAR_NAME;
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <aci_att_read_by_type_resp_event+0x818>)
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001abe:	e054      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_GESTURE_REC_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4955      	ldr	r1, [pc, #340]	; (8001c1c <aci_att_read_by_type_resp_event+0x81c>)
 8001ac8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aca:	f00a fa99 	bl	800c000 <memcmp>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <aci_att_read_by_type_resp_event+0x6e0>
    *char_type = ST_GESTURE_REC_CHAR_TYPE;
 8001ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad6:	2211      	movs	r2, #17
 8001ad8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_GESTURE_REC_CHAR_NAME;
 8001ada:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <aci_att_read_by_type_resp_event+0x820>)
 8001adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ade:	e044      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_ACC_PEDO_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	3b05      	subs	r3, #5
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	494f      	ldr	r1, [pc, #316]	; (8001c24 <aci_att_read_by_type_resp_event+0x824>)
 8001ae8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aea:	f00a fa89 	bl	800c000 <memcmp>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <aci_att_read_by_type_resp_event+0x700>
    *char_type = ST_ACC_PEDO_CHAR_TYPE;
 8001af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af6:	2212      	movs	r2, #18
 8001af8:	701a      	strb	r2, [r3, #0]
    char_name  = ST_ACC_PEDO_CHAR_NAME;
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <aci_att_read_by_type_resp_event+0x828>)
 8001afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001afe:	e034      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_INTENSITY_DET_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001b00:	797b      	ldrb	r3, [r7, #5]
 8001b02:	3b05      	subs	r3, #5
 8001b04:	461a      	mov	r2, r3
 8001b06:	4949      	ldr	r1, [pc, #292]	; (8001c2c <aci_att_read_by_type_resp_event+0x82c>)
 8001b08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b0a:	f00a fa79 	bl	800c000 <memcmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <aci_att_read_by_type_resp_event+0x720>
    *char_type = ST_INTENSITY_DET_CHAR_TYPE;
 8001b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b16:	2213      	movs	r2, #19
 8001b18:	701a      	strb	r2, [r3, #0]
    char_name  = ST_INTENSITY_DET_CHAR_NAME;
 8001b1a:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <aci_att_read_by_type_resp_event+0x830>)
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b1e:	e024      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_TERM_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001b20:	797b      	ldrb	r3, [r7, #5]
 8001b22:	3b05      	subs	r3, #5
 8001b24:	461a      	mov	r2, r3
 8001b26:	4943      	ldr	r1, [pc, #268]	; (8001c34 <aci_att_read_by_type_resp_event+0x834>)
 8001b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b2a:	f00a fa69 	bl	800c000 <memcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <aci_att_read_by_type_resp_event+0x740>
    *char_type = ST_TERM_CHAR_TYPE;
 8001b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b36:	2214      	movs	r2, #20
 8001b38:	701a      	strb	r2, [r3, #0]
    char_name  = ST_TERM_CHAR_NAME;
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <aci_att_read_by_type_resp_event+0x838>)
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3e:	e014      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else if (BLUENRG_memcmp (uuid, ST_STDERR_CHAR_UUID, (Handle_Value_Pair_Length-5)) == 0) {
 8001b40:	797b      	ldrb	r3, [r7, #5]
 8001b42:	3b05      	subs	r3, #5
 8001b44:	461a      	mov	r2, r3
 8001b46:	493d      	ldr	r1, [pc, #244]	; (8001c3c <aci_att_read_by_type_resp_event+0x83c>)
 8001b48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b4a:	f00a fa59 	bl	800c000 <memcmp>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <aci_att_read_by_type_resp_event+0x760>
    *char_type = ST_STDERR_CHAR_TYPE;
 8001b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b56:	2215      	movs	r2, #21
 8001b58:	701a      	strb	r2, [r3, #0]
    char_name  = ST_STDERR_CHAR_NAME;
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <aci_att_read_by_type_resp_event+0x840>)
 8001b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b5e:	e004      	b.n	8001b6a <aci_att_read_by_type_resp_event+0x76a>
  }
  else {
    *char_type = CUSTOM_CHAR_TYPE;
 8001b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b62:	2216      	movs	r2, #22
 8001b64:	701a      	strb	r2, [r3, #0]
    char_name  = CUSTOM_CHAR_NAME;
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <aci_att_read_by_type_resp_event+0x844>)
 8001b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  PRINT_DBG("%s \n", char_name);

  *name_length = (strlen(char_name) > MAX_NAME_LENGTH) ? MAX_NAME_LENGTH : strlen(char_name);
 8001b6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b6c:	f7fe fb30 	bl	80001d0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d805      	bhi.n	8001b82 <aci_att_read_by_type_resp_event+0x782>
 8001b76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b78:	f7fe fb2a 	bl	80001d0 <strlen>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	e000      	b.n	8001b84 <aci_att_read_by_type_resp_event+0x784>
 8001b82:	2220      	movs	r2, #32
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(name, char_name, *name_length);
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b92:	f00a fabf 	bl	800c114 <memcpy>

  Print_Characteristic_Info(dev_idx, serv_idx, char_idx);
 8001b96:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001b9a:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8001b9e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fa94 	bl	80030d0 <Print_Characteristic_Info>

  saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx++;
 8001ba8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001bac:	4926      	ldr	r1, [pc, #152]	; (8001c48 <aci_att_read_by_type_resp_event+0x848>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3330      	adds	r3, #48	; 0x30
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bc0:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001bce:	3201      	adds	r2, #1
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_num++;
 8001bd6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001bda:	491b      	ldr	r1, [pc, #108]	; (8001c48 <aci_att_read_by_type_resp_event+0x848>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	440b      	add	r3, r1
 8001be6:	3330      	adds	r3, #48	; 0x30
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bee:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8001bfc:	3201      	adds	r2, #1
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

  PRINT_DBG(" ----------------------------------------------\r\n");
}
 8001c04:	bf00      	nop
 8001c06:	3750      	adds	r7, #80	; 0x50
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000130 	.word	0x20000130
 8001c10:	0800cfe8 	.word	0x0800cfe8
 8001c14:	20000140 	.word	0x20000140
 8001c18:	0800d008 	.word	0x0800d008
 8001c1c:	20000150 	.word	0x20000150
 8001c20:	0800d024 	.word	0x0800d024
 8001c24:	20000160 	.word	0x20000160
 8001c28:	0800d044 	.word	0x0800d044
 8001c2c:	20000170 	.word	0x20000170
 8001c30:	0800d060 	.word	0x0800d060
 8001c34:	20000180 	.word	0x20000180
 8001c38:	0800d07c 	.word	0x0800d07c
 8001c3c:	20000190 	.word	0x20000190
 8001c40:	0800d098 	.word	0x0800d098
 8001c44:	0800d0b4 	.word	0x0800d0b4
 8001c48:	20000230 	.word	0x20000230

08001c4c <aci_att_read_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 ******************************************************************************/
void aci_att_read_resp_event(uint16_t Connection_Handle, uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[])
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	603a      	str	r2, [r7, #0]
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	717b      	strb	r3, [r7, #5]
  uint8_t i;

  printf(" Value (HEX): %s", Event_Data_Length > 0 ? "0x" : "No value!");
 8001c5c:	797b      	ldrb	r3, [r7, #5]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <aci_att_read_resp_event+0x1a>
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <aci_att_read_resp_event+0x6c>)
 8001c64:	e000      	b.n	8001c68 <aci_att_read_resp_event+0x1c>
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <aci_att_read_resp_event+0x70>)
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <aci_att_read_resp_event+0x74>)
 8001c6c:	f00a f87a 	bl	800bd64 <iprintf>
  for (i=0; i<Event_Data_Length; i++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e00a      	b.n	8001c8c <aci_att_read_resp_event+0x40>
    printf("%02x", Attribute_Value[i]);
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <aci_att_read_resp_event+0x78>)
 8001c82:	f00a f86f 	bl	800bd64 <iprintf>
  for (i=0; i<Event_Data_Length; i++) {
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3f0      	bcc.n	8001c76 <aci_att_read_resp_event+0x2a>
  }
  printf("\r\n");
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <aci_att_read_resp_event+0x7c>)
 8001c96:	f00a f8d3 	bl	800be40 <puts>

  /* Print data in human readable format */
  if (Event_Data_Length > 0) {
 8001c9a:	797b      	ldrb	r3, [r7, #5]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <aci_att_read_resp_event+0x5e>
    Print_HRF_Value(Event_Data_Length, Attribute_Value);
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fba5 	bl	80033f4 <Print_HRF_Value>
  }

  central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <aci_att_read_resp_event+0x80>)
 8001cac:	220e      	movs	r2, #14
 8001cae:	701a      	strb	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800d0cc 	.word	0x0800d0cc
 8001cbc:	0800d0d0 	.word	0x0800d0d0
 8001cc0:	0800d0dc 	.word	0x0800d0dc
 8001cc4:	0800d0f0 	.word	0x0800d0f0
 8001cc8:	0800cbd0 	.word	0x0800cbd0
 8001ccc:	2000022d 	.word	0x2000022d

08001cd0 <aci_gatt_notification_event>:
 ******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	81fb      	strh	r3, [r7, #14]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	81bb      	strh	r3, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	72fb      	strb	r3, [r7, #11]
  uint8_t i;

  printf(" Value (HEX): %s", Attribute_Value_Length > 0 ? "0x" : "No value!");
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <aci_gatt_notification_event+0x1e>
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <aci_gatt_notification_event+0x6c>)
 8001cec:	e000      	b.n	8001cf0 <aci_gatt_notification_event+0x20>
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <aci_gatt_notification_event+0x70>)
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4814      	ldr	r0, [pc, #80]	; (8001d44 <aci_gatt_notification_event+0x74>)
 8001cf4:	f00a f836 	bl	800bd64 <iprintf>
  for (i=0; i<Attribute_Value_Length; i++) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e00a      	b.n	8001d14 <aci_gatt_notification_event+0x44>
    printf("%02x", Attribute_Value[i]);
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <aci_gatt_notification_event+0x78>)
 8001d0a:	f00a f82b 	bl	800bd64 <iprintf>
  for (i=0; i<Attribute_Value_Length; i++) {
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	3301      	adds	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
 8001d14:	7dfa      	ldrb	r2, [r7, #23]
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d3f0      	bcc.n	8001cfe <aci_gatt_notification_event+0x2e>
  }
  printf("\r\n");
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <aci_gatt_notification_event+0x7c>)
 8001d1e:	f00a f88f 	bl	800be40 <puts>

  /* Print data in human readable format */
  if (Attribute_Value_Length > 0) {
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <aci_gatt_notification_event+0x62>
    Print_HRF_Value(Attribute_Value_Length, Attribute_Value);
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fb61 	bl	80033f4 <Print_HRF_Value>
  }
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800d0cc 	.word	0x0800d0cc
 8001d40:	0800d0d0 	.word	0x0800d0d0
 8001d44:	0800d0dc 	.word	0x0800d0dc
 8001d48:	0800d0f0 	.word	0x0800d0f0
 8001d4c:	0800cbd0 	.word	0x0800cbd0

08001d50 <Get_BLEFirmware_Details>:
 *
 * @param  None
 * @retval Status
 */
uint8_t Get_BLEFirmware_Details(void)
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af08      	add	r7, sp, #32
  uint16_t DTM_Build_Number;
  uint8_t  BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_Stack_version_patch,
           BTLE_Stack_development;
  uint16_t BTLE_Stack_variant, BTLE_Stack_Build_Number;
  uint8_t  BTLE_sv_patch, DTM_v_patch;
  uint8_t  alphabet[]={' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
 8001d56:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <Get_BLEFirmware_Details+0x118>)
 8001d58:	463c      	mov	r4, r7
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d64:	c403      	stmia	r4!, {r0, r1}
 8001d66:	8022      	strh	r2, [r4, #0]
 8001d68:	3402      	adds	r4, #2
 8001d6a:	0c13      	lsrs	r3, r2, #16
 8001d6c:	7023      	strb	r3, [r4, #0]

  status = aci_hal_get_firmware_details(&DTM_version_major, &DTM_version_minor,
 8001d6e:	f107 0429 	add.w	r4, r7, #41	; 0x29
 8001d72:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8001d76:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8001d7a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001d7e:	f107 031e 	add.w	r3, r7, #30
 8001d82:	9306      	str	r3, [sp, #24]
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	9305      	str	r3, [sp, #20]
 8001d8a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001d8e:	9304      	str	r3, [sp, #16]
 8001d90:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001d94:	9303      	str	r3, [sp, #12]
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4623      	mov	r3, r4
 8001daa:	f007 fe86 	bl	8009aba <aci_hal_get_firmware_details>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                        &DTM_version_patch, &DTM_variant, &DTM_Build_Number,
                                        &BTLE_Stack_version_major, &BTLE_Stack_version_minor,
                                        &BTLE_Stack_version_patch, &BTLE_Stack_development,
                                        &BTLE_Stack_variant, &BTLE_Stack_Build_Number);

  BTLE_sv_patch = alphabet[BTLE_Stack_version_patch];
 8001db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001db8:	3330      	adds	r3, #48	; 0x30
 8001dba:	443b      	add	r3, r7
 8001dbc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001dc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  DTM_v_patch = alphabet[DTM_version_patch];
 8001dc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001dc8:	3330      	adds	r3, #48	; 0x30
 8001dca:	443b      	add	r3, r7
 8001dcc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  message(ANSI_COLOR_RESET);    /* reset foreground color */
 8001dd4:	4825      	ldr	r0, [pc, #148]	; (8001e6c <Get_BLEFirmware_Details+0x11c>)
 8001dd6:	f009 ffc5 	bl	800bd64 <iprintf>
  message(ANSI_CLEAR_SCREEN);   /* serial console clear screen */
 8001dda:	4825      	ldr	r0, [pc, #148]	; (8001e70 <Get_BLEFirmware_Details+0x120>)
 8001ddc:	f009 ffc2 	bl	800bd64 <iprintf>
  message(ANSI_CURSOR_TO_HOME); /* serial console cursor to home */
 8001de0:	4824      	ldr	r0, [pc, #144]	; (8001e74 <Get_BLEFirmware_Details+0x124>)
 8001de2:	f009 ffbf 	bl	800bd64 <iprintf>
  message("\r\n");
 8001de6:	4824      	ldr	r0, [pc, #144]	; (8001e78 <Get_BLEFirmware_Details+0x128>)
 8001de8:	f00a f82a 	bl	800be40 <puts>
  message(" --------------------------------------------------------\r\n\n");
 8001dec:	4823      	ldr	r0, [pc, #140]	; (8001e7c <Get_BLEFirmware_Details+0x12c>)
 8001dee:	f00a f827 	bl	800be40 <puts>
  message(" BLE2 Universal Central v%d.%d.%d \r\n",
 8001df2:	2300      	movs	r3, #0
 8001df4:	2201      	movs	r2, #1
 8001df6:	2101      	movs	r1, #1
 8001df8:	4821      	ldr	r0, [pc, #132]	; (8001e80 <Get_BLEFirmware_Details+0x130>)
 8001dfa:	f009 ffb3 	bl	800bd64 <iprintf>
          CENTRAL_MAJOR_VERSION, CENTRAL_MINOR_VERSION, CENTRAL_PATCH_VERSION);
  message("\r\n");
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <Get_BLEFirmware_Details+0x128>)
 8001e00:	f00a f81e 	bl	800be40 <puts>

  if (status == BLE_STATUS_SUCCESS) {
 8001e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d127      	bne.n	8001e5c <Get_BLEFirmware_Details+0x10c>
    message(" - BlueNRG-2 FW v%d.%d%c \r\n",
 8001e0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e10:	4619      	mov	r1, r3
 8001e12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e16:	461a      	mov	r2, r3
 8001e18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <Get_BLEFirmware_Details+0x134>)
 8001e1e:	f009 ffa1 	bl	800bd64 <iprintf>
            BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_sv_patch);
    message(" - DTM %s v%d.%d%c \r\n",
            DTM_variant == 0x01 ? "UART" : (DTM_variant == 0x02 ? "SPI" : "unknown"),
 8001e22:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    message(" - DTM %s v%d.%d%c \r\n",
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d007      	beq.n	8001e3a <Get_BLEFirmware_Details+0xea>
            DTM_variant == 0x01 ? "UART" : (DTM_variant == 0x02 ? "SPI" : "unknown"),
 8001e2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d101      	bne.n	8001e36 <Get_BLEFirmware_Details+0xe6>
 8001e32:	4915      	ldr	r1, [pc, #84]	; (8001e88 <Get_BLEFirmware_Details+0x138>)
 8001e34:	e002      	b.n	8001e3c <Get_BLEFirmware_Details+0xec>
 8001e36:	4915      	ldr	r1, [pc, #84]	; (8001e8c <Get_BLEFirmware_Details+0x13c>)
 8001e38:	e000      	b.n	8001e3c <Get_BLEFirmware_Details+0xec>
    message(" - DTM %s v%d.%d%c \r\n",
 8001e3a:	4915      	ldr	r1, [pc, #84]	; (8001e90 <Get_BLEFirmware_Details+0x140>)
 8001e3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e40:	461a      	mov	r2, r3
 8001e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e46:	4618      	mov	r0, r3
 8001e48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4810      	ldr	r0, [pc, #64]	; (8001e94 <Get_BLEFirmware_Details+0x144>)
 8001e52:	f009 ff87 	bl	800bd64 <iprintf>
            DTM_version_major, DTM_version_minor, DTM_v_patch);
    message("\r\n");
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <Get_BLEFirmware_Details+0x128>)
 8001e58:	f009 fff2 	bl	800be40 <puts>
  }

  return status;
 8001e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	0800d1bc 	.word	0x0800d1bc
 8001e6c:	0800d0f8 	.word	0x0800d0f8
 8001e70:	0800d100 	.word	0x0800d100
 8001e74:	0800d108 	.word	0x0800d108
 8001e78:	0800d10c 	.word	0x0800d10c
 8001e7c:	0800d110 	.word	0x0800d110
 8001e80:	0800d14c 	.word	0x0800d14c
 8001e84:	0800d174 	.word	0x0800d174
 8001e88:	0800d190 	.word	0x0800d190
 8001e8c:	0800d194 	.word	0x0800d194
 8001e90:	0800d19c 	.word	0x0800d19c
 8001e94:	0800d1a4 	.word	0x0800d1a4

08001e98 <CentralDevice_Init>:
 * @note
 * @param  None
 * @retval None
 */
uint8_t CentralDevice_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {'B','L','E','2','_','C','e','n','t','r','a','l'};
 8001e9e:	4a33      	ldr	r2, [pc, #204]	; (8001f6c <CentralDevice_Init+0xd4>)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t bdaddr[BDADDR_SIZE];
  uint8_t bdaddr_len_out;
  uint8_t config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	77fb      	strb	r3, [r7, #31]

  /* Sw reset of the device */
  hci_reset();
 8001eae:	f009 fa1a 	bl	800b2e6 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8001eb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001eb6:	f003 fddb 	bl	8005a70 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  ret = Get_BLEFirmware_Details();
 8001eba:	f7ff ff49 	bl	8001d50 <Get_BLEFirmware_Details>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	77bb      	strb	r3, [r7, #30]
  if (ret != BLE_STATUS_SUCCESS) {
 8001ec2:	7fbb      	ldrb	r3, [r7, #30]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <CentralDevice_Init+0x34>
    PRINT_DBG("Get_BLEFirmware_Details() --> Failed 0x%02x\r\n", ret);
    return ret;
 8001ec8:	7fbb      	ldrb	r3, [r7, #30]
 8001eca:	e04a      	b.n	8001f62 <CentralDevice_Init+0xca>
  }

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8001ecc:	1d3a      	adds	r2, r7, #4
 8001ece:	1cf9      	adds	r1, r7, #3
 8001ed0:	7ffb      	ldrb	r3, [r7, #31]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f007 fe4b 	bl	8009b6e <aci_hal_read_config_data>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	77bb      	strb	r3, [r7, #30]
                                 &bdaddr_len_out, bdaddr);

  if (ret != BLE_STATUS_SUCCESS) {
 8001edc:	7fbb      	ldrb	r3, [r7, #30]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <CentralDevice_Init+0x4e>
    PRINT_DBG("aci_hal_read_config_data() --> Read Static Random address failed 0x%02x\r\n", ret);
    return ret;
 8001ee2:	7fbb      	ldrb	r3, [r7, #30]
 8001ee4:	e03d      	b.n	8001f62 <CentralDevice_Init+0xca>
  }
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001ee6:	7a7b      	ldrb	r3, [r7, #9]
 8001ee8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001eec:	2bc0      	cmp	r3, #192	; 0xc0
 8001eee:	d000      	beq.n	8001ef2 <CentralDevice_Init+0x5a>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 8001ef0:	e7fe      	b.n	8001ef0 <CentralDevice_Init+0x58>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f007 febe 	bl	8009c76 <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 8001efa:	7fbb      	ldrb	r3, [r7, #30]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <CentralDevice_Init+0x6c>
  {
    PRINT_DBG("aci_hal_set_tx_power_level() --> Failed 0x%04x\r\n", ret);
    return ret;
 8001f00:	7fbb      	ldrb	r3, [r7, #30]
 8001f02:	e02e      	b.n	8001f62 <CentralDevice_Init+0xca>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8001f04:	f007 fa4e 	bl	80093a4 <aci_gatt_init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	77bb      	strb	r3, [r7, #30]
  if (ret != BLE_STATUS_SUCCESS)
 8001f0c:	7fbb      	ldrb	r3, [r7, #30]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <CentralDevice_Init+0x7e>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001f12:	7fbb      	ldrb	r3, [r7, #30]
 8001f14:	e025      	b.n	8001f62 <CentralDevice_Init+0xca>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE, 0, sizeof(device_name), &service_handle, &dev_name_char_handle,
 8001f16:	f107 021c 	add.w	r2, r7, #28
 8001f1a:	f107 0318 	add.w	r3, r7, #24
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	f107 031a 	add.w	r3, r7, #26
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	220c      	movs	r2, #12
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2004      	movs	r0, #4
 8001f2e:	f006 ff98 	bl	8008e62 <aci_gap_init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	77bb      	strb	r3, [r7, #30]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 8001f36:	7fbb      	ldrb	r3, [r7, #30]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <CentralDevice_Init+0xa8>
  {
    PRINT_DBG("aci_gap_init() --> Failed 0x%02x\r\n", ret);
    return ret;
 8001f3c:	7fbb      	ldrb	r3, [r7, #30]
 8001f3e:	e010      	b.n	8001f62 <CentralDevice_Init+0xca>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8001f40:	8bb8      	ldrh	r0, [r7, #28]
 8001f42:	8b79      	ldrh	r1, [r7, #26]
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f007 fa53 	bl	80093f8 <aci_gatt_update_char_value>
 8001f52:	4603      	mov	r3, r0
 8001f54:	77bb      	strb	r3, [r7, #30]
                                   device_name);
  if (ret != BLE_STATUS_SUCCESS)
 8001f56:	7fbb      	ldrb	r3, [r7, #30]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <CentralDevice_Init+0xc8>
  {
    PRINT_DBG("aci_gatt_update_char_value() --> Failed 0x%02x\r\n", ret);
    return ret;
 8001f5c:	7fbb      	ldrb	r3, [r7, #30]
 8001f5e:	e000      	b.n	8001f62 <CentralDevice_Init+0xca>
  }

  return ret;
 8001f60:	7fbb      	ldrb	r3, [r7, #30]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	0800d1d8 	.word	0x0800d1d8

08001f70 <Init_Saved_Devices>:
 * @brief  Init struct containing all saved devices
 * @param  None
 * @retval None
 */
void Init_Saved_Devices(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  uint8_t i, j, t;

  for (i=0; i<MAX_NUM_OF_DEVICES; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	e059      	b.n	8002030 <Init_Saved_Devices+0xc0>
    BLUENRG_memset(saved_devices.dev_info[i].bdaddr, 0 , sizeof(saved_devices.dev_info[i].bdaddr));
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4a5f      	ldr	r2, [pc, #380]	; (8002104 <Init_Saved_Devices+0x194>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00a f845 	bl	800c020 <memset>
    saved_devices.dev_info[i].addr_type   = 0;
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	495a      	ldr	r1, [pc, #360]	; (8002104 <Init_Saved_Devices+0x194>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    saved_devices.dev_info[i].name_length = 0;
 8001faa:	79fa      	ldrb	r2, [r7, #7]
 8001fac:	4955      	ldr	r1, [pc, #340]	; (8002104 <Init_Saved_Devices+0x194>)
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	440b      	add	r3, r1
 8001fb8:	330d      	adds	r3, #13
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    BLUENRG_memset(saved_devices.dev_info[i].name, 0, MAX_NAME_LENGTH);
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	3308      	adds	r3, #8
 8001fca:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <Init_Saved_Devices+0x194>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	3306      	adds	r3, #6
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00a f823 	bl	800c020 <memset>
    saved_devices.dev_info[i].serv_idx    = 0;
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	4949      	ldr	r1, [pc, #292]	; (8002104 <Init_Saved_Devices+0x194>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	440b      	add	r3, r1
 8001fe8:	332e      	adds	r3, #46	; 0x2e
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
    saved_devices.dev_info[i].serv_num    = 0;
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	4944      	ldr	r1, [pc, #272]	; (8002104 <Init_Saved_Devices+0x194>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	440b      	add	r3, r1
 8001ffc:	332f      	adds	r3, #47	; 0x2f
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
    saved_devices.dev_info[i].conn_handle = 0;
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	493f      	ldr	r1, [pc, #252]	; (8002104 <Init_Saved_Devices+0x194>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	440b      	add	r3, r1
 8002010:	3304      	adds	r3, #4
 8002012:	2200      	movs	r2, #0
 8002014:	801a      	strh	r2, [r3, #0]
    saved_devices.dev_info[i].serv_info   = NULL;
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	493a      	ldr	r1, [pc, #232]	; (8002104 <Init_Saved_Devices+0x194>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	3330      	adds	r3, #48	; 0x30
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
  for (i=0; i<MAX_NUM_OF_DEVICES; i++) {
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	3301      	adds	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	2b09      	cmp	r3, #9
 8002034:	d9a2      	bls.n	8001f7c <Init_Saved_Devices+0xc>
  }
  for (j=0; j<MAX_NUM_OF_SERVICES; j++) {
 8002036:	2300      	movs	r3, #0
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	e149      	b.n	80022d0 <Init_Saved_Devices+0x360>
    serv_info[j].char_idx     = 0;
 800203c:	79bb      	ldrb	r3, [r7, #6]
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <Init_Saved_Devices+0x198>)
 8002040:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3336      	adds	r3, #54	; 0x36
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    serv_info[j].char_num     = 0;
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <Init_Saved_Devices+0x198>)
 8002054:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3337      	adds	r3, #55	; 0x37
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    serv_info[j].start_handle = 0;
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	4a28      	ldr	r2, [pc, #160]	; (8002108 <Init_Saved_Devices+0x198>)
 8002068:	f240 21ba 	movw	r1, #698	; 0x2ba
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
    serv_info[j].end_handle   = 0;
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <Init_Saved_Devices+0x198>)
 800207a:	f240 21ba 	movw	r1, #698	; 0x2ba
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	2200      	movs	r2, #0
 8002088:	801a      	strh	r2, [r3, #0]
    serv_info[j].name_length  = 0;
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <Init_Saved_Devices+0x198>)
 800208e:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
    BLUENRG_memset(serv_info[j].name, 0, MAX_NAME_LENGTH);
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	f240 22ba 	movw	r2, #698	; 0x2ba
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <Init_Saved_Devices+0x198>)
 80020aa:	4413      	add	r3, r2
 80020ac:	3305      	adds	r3, #5
 80020ae:	2220      	movs	r2, #32
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f009 ffb4 	bl	800c020 <memset>
    serv_info[j].serv_type    = NO_SERVICE_TYPE;
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <Init_Saved_Devices+0x198>)
 80020bc:	f240 21ba 	movw	r1, #698	; 0x2ba
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    serv_info[j].uuid_length  = 0;
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <Init_Saved_Devices+0x198>)
 80020d0:	f240 21ba 	movw	r1, #698	; 0x2ba
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3325      	adds	r3, #37	; 0x25
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
    BLUENRG_memset(serv_info[j].uuid, 0, UUID_MAX_LENGTH);
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	f240 22ba 	movw	r2, #698	; 0x2ba
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	3320      	adds	r3, #32
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <Init_Saved_Devices+0x198>)
 80020ee:	4413      	add	r3, r2
 80020f0:	3306      	adds	r3, #6
 80020f2:	2210      	movs	r2, #16
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f009 ff92 	bl	800c020 <memset>
    for (t=0; t<MAX_NUM_OF_CHARS; t++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	717b      	strb	r3, [r7, #5]
 8002100:	e0df      	b.n	80022c2 <Init_Saved_Devices+0x352>
 8002102:	bf00      	nop
 8002104:	20000230 	.word	0x20000230
 8002108:	20000454 	.word	0x20000454
      serv_info[j].char_info[t].uuid_length       = 0;
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	797a      	ldrb	r2, [r7, #5]
 8002110:	4978      	ldr	r1, [pc, #480]	; (80022f4 <Init_Saved_Devices+0x384>)
 8002112:	0192      	lsls	r2, r2, #6
 8002114:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	4413      	add	r3, r2
 800211e:	440b      	add	r3, r1
 8002120:	335f      	adds	r3, #95	; 0x5f
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
      BLUENRG_memset(serv_info[j].char_info[t].uuid, 0, UUID_MAX_LENGTH);
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	797a      	ldrb	r2, [r7, #5]
 800212a:	0192      	lsls	r2, r2, #6
 800212c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3358      	adds	r3, #88	; 0x58
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <Init_Saved_Devices+0x384>)
 800213a:	4413      	add	r3, r2
 800213c:	3308      	adds	r3, #8
 800213e:	2210      	movs	r2, #16
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f009 ff6c 	bl	800c020 <memset>
      serv_info[j].char_info[t].name_length       = 0;
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	797a      	ldrb	r2, [r7, #5]
 800214c:	4969      	ldr	r1, [pc, #420]	; (80022f4 <Init_Saved_Devices+0x384>)
 800214e:	0192      	lsls	r2, r2, #6
 8002150:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002154:	fb00 f303 	mul.w	r3, r0, r3
 8002158:	4413      	add	r3, r2
 800215a:	440b      	add	r3, r1
 800215c:	333e      	adds	r3, #62	; 0x3e
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      BLUENRG_memset(serv_info[j].char_info[t].name, 0, MAX_NAME_LENGTH);
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	797a      	ldrb	r2, [r7, #5]
 8002166:	0192      	lsls	r2, r2, #6
 8002168:	f240 21ba 	movw	r1, #698	; 0x2ba
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3338      	adds	r3, #56	; 0x38
 8002174:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <Init_Saved_Devices+0x384>)
 8002176:	4413      	add	r3, r2
 8002178:	3307      	adds	r3, #7
 800217a:	2220      	movs	r2, #32
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f009 ff4e 	bl	800c020 <memset>
      serv_info[j].char_info[t].uuid_length       = 0;
 8002184:	79bb      	ldrb	r3, [r7, #6]
 8002186:	797a      	ldrb	r2, [r7, #5]
 8002188:	495a      	ldr	r1, [pc, #360]	; (80022f4 <Init_Saved_Devices+0x384>)
 800218a:	0192      	lsls	r2, r2, #6
 800218c:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002190:	fb00 f303 	mul.w	r3, r0, r3
 8002194:	4413      	add	r3, r2
 8002196:	440b      	add	r3, r1
 8002198:	335f      	adds	r3, #95	; 0x5f
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].decl_handle       = 0;
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	797a      	ldrb	r2, [r7, #5]
 80021a2:	4954      	ldr	r1, [pc, #336]	; (80022f4 <Init_Saved_Devices+0x384>)
 80021a4:	0192      	lsls	r2, r2, #6
 80021a6:	f240 20ba 	movw	r0, #698	; 0x2ba
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	333a      	adds	r3, #58	; 0x3a
 80021b4:	2200      	movs	r2, #0
 80021b6:	801a      	strh	r2, [r3, #0]
      serv_info[j].char_info[t].value_handle      = 0;
 80021b8:	79bb      	ldrb	r3, [r7, #6]
 80021ba:	797a      	ldrb	r2, [r7, #5]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <Init_Saved_Devices+0x384>)
 80021be:	0192      	lsls	r2, r2, #6
 80021c0:	f240 20ba 	movw	r0, #698	; 0x2ba
 80021c4:	fb00 f303 	mul.w	r3, r0, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	333c      	adds	r3, #60	; 0x3c
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]
      serv_info[j].char_info[t].prop_idx          = 0;
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	797a      	ldrb	r2, [r7, #5]
 80021d6:	4947      	ldr	r1, [pc, #284]	; (80022f4 <Init_Saved_Devices+0x384>)
 80021d8:	0192      	lsls	r2, r2, #6
 80021da:	f240 20ba 	movw	r0, #698	; 0x2ba
 80021de:	fb00 f303 	mul.w	r3, r0, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	3370      	adds	r3, #112	; 0x70
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].broadcast         = 0;
 80021ec:	79bb      	ldrb	r3, [r7, #6]
 80021ee:	797a      	ldrb	r2, [r7, #5]
 80021f0:	4940      	ldr	r1, [pc, #256]	; (80022f4 <Init_Saved_Devices+0x384>)
 80021f2:	0192      	lsls	r2, r2, #6
 80021f4:	f240 20ba 	movw	r0, #698	; 0x2ba
 80021f8:	fb00 f303 	mul.w	r3, r0, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	440b      	add	r3, r1
 8002200:	3371      	adds	r3, #113	; 0x71
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].read              = 0;
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	797a      	ldrb	r2, [r7, #5]
 800220a:	493a      	ldr	r1, [pc, #232]	; (80022f4 <Init_Saved_Devices+0x384>)
 800220c:	0192      	lsls	r2, r2, #6
 800220e:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	4413      	add	r3, r2
 8002218:	440b      	add	r3, r1
 800221a:	3372      	adds	r3, #114	; 0x72
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].write_wo_resp     = 0;
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	797a      	ldrb	r2, [r7, #5]
 8002224:	4933      	ldr	r1, [pc, #204]	; (80022f4 <Init_Saved_Devices+0x384>)
 8002226:	0192      	lsls	r2, r2, #6
 8002228:	f240 20ba 	movw	r0, #698	; 0x2ba
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	4413      	add	r3, r2
 8002232:	440b      	add	r3, r1
 8002234:	3373      	adds	r3, #115	; 0x73
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].write             = 0;
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	797a      	ldrb	r2, [r7, #5]
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <Init_Saved_Devices+0x384>)
 8002240:	0192      	lsls	r2, r2, #6
 8002242:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	4413      	add	r3, r2
 800224c:	440b      	add	r3, r1
 800224e:	3374      	adds	r3, #116	; 0x74
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].notify            = 0;
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	797a      	ldrb	r2, [r7, #5]
 8002258:	4926      	ldr	r1, [pc, #152]	; (80022f4 <Init_Saved_Devices+0x384>)
 800225a:	0192      	lsls	r2, r2, #6
 800225c:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002260:	fb00 f303 	mul.w	r3, r0, r3
 8002264:	4413      	add	r3, r2
 8002266:	440b      	add	r3, r1
 8002268:	3375      	adds	r3, #117	; 0x75
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].indicate          = 0;
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	797a      	ldrb	r2, [r7, #5]
 8002272:	4920      	ldr	r1, [pc, #128]	; (80022f4 <Init_Saved_Devices+0x384>)
 8002274:	0192      	lsls	r2, r2, #6
 8002276:	f240 20ba 	movw	r0, #698	; 0x2ba
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	4413      	add	r3, r2
 8002280:	440b      	add	r3, r1
 8002282:	3376      	adds	r3, #118	; 0x76
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].auth_signed_write = 0;
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	797a      	ldrb	r2, [r7, #5]
 800228c:	4919      	ldr	r1, [pc, #100]	; (80022f4 <Init_Saved_Devices+0x384>)
 800228e:	0192      	lsls	r2, r2, #6
 8002290:	f240 20ba 	movw	r0, #698	; 0x2ba
 8002294:	fb00 f303 	mul.w	r3, r0, r3
 8002298:	4413      	add	r3, r2
 800229a:	440b      	add	r3, r1
 800229c:	3377      	adds	r3, #119	; 0x77
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
      serv_info[j].char_info[t].char_type = NO_CHARACTERISTIC_TYPE;
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	797a      	ldrb	r2, [r7, #5]
 80022a6:	4913      	ldr	r1, [pc, #76]	; (80022f4 <Init_Saved_Devices+0x384>)
 80022a8:	0192      	lsls	r2, r2, #6
 80022aa:	f240 20ba 	movw	r0, #698	; 0x2ba
 80022ae:	fb00 f303 	mul.w	r3, r0, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	3378      	adds	r3, #120	; 0x78
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    for (t=0; t<MAX_NUM_OF_CHARS; t++) {
 80022bc:	797b      	ldrb	r3, [r7, #5]
 80022be:	3301      	adds	r3, #1
 80022c0:	717b      	strb	r3, [r7, #5]
 80022c2:	797b      	ldrb	r3, [r7, #5]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	f67f af21 	bls.w	800210c <Init_Saved_Devices+0x19c>
  for (j=0; j<MAX_NUM_OF_SERVICES; j++) {
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	3301      	adds	r3, #1
 80022ce:	71bb      	strb	r3, [r7, #6]
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	f67f aeb2 	bls.w	800203c <Init_Saved_Devices+0xcc>
    }
  }

  saved_devices.dev_idx   = 0;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <Init_Saved_Devices+0x388>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  saved_devices.connected = 0;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <Init_Saved_Devices+0x388>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	705a      	strb	r2, [r3, #1]
  saved_devices.dev_num   = 0;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <Init_Saved_Devices+0x388>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	709a      	strb	r2, [r3, #2]
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000454 	.word	0x20000454
 80022f8:	20000230 	.word	0x20000230

080022fc <Init_NonConn_Devices>:
 * @brief  Init struct containing all non connectable devices
 * @param  None
 * @retval None
 */
void Init_NonConn_Devices()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  uint8_t i;

  for (i=0; i<MAX_NUM_OF_DEVICES; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e00f      	b.n	8002328 <Init_NonConn_Devices+0x2c>
    BLUENRG_memset(non_conn_devices.bdaddr[i], 0 , sizeof(non_conn_devices.bdaddr[i]));
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <Init_NonConn_Devices+0x48>)
 8002314:	4413      	add	r3, r2
 8002316:	3302      	adds	r3, #2
 8002318:	2206      	movs	r2, #6
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f009 fe7f 	bl	800c020 <memset>
  for (i=0; i<MAX_NUM_OF_DEVICES; i++) {
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3301      	adds	r3, #1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d9ec      	bls.n	8002308 <Init_NonConn_Devices+0xc>
  }

  non_conn_devices.dev_idx=0;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <Init_NonConn_Devices+0x48>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  non_conn_devices.dev_num=0;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <Init_NonConn_Devices+0x48>)
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000414 	.word	0x20000414

08002348 <Close_Connection>:
 * @brief  Close the connection with the peripheral device
 * @param  None
 * @retval None
 */
void Close_Connection(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  uint8_t i = saved_devices.dev_idx;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <Close_Connection+0x48>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  int ret;

  ret = aci_gap_terminate(saved_devices.dev_info[i].conn_handle, BLE_ERROR_TERMINATED_LOCAL_HOST);
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <Close_Connection+0x48>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2116      	movs	r1, #22
 8002368:	4618      	mov	r0, r3
 800236a:	f006 fe27 	bl	8008fbc <aci_gap_terminate>
 800236e:	4603      	mov	r3, r0
 8002370:	603b      	str	r3, [r7, #0]

  if (ret != BLE_STATUS_SUCCESS){
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <Close_Connection+0x38>
    printf("aci_gap_terminate() failed: %02X\n",ret);
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <Close_Connection+0x4c>)
 800237c:	f009 fcf2 	bl	800bd64 <iprintf>
  }

  HAL_Delay(100); /* see comment @file bluenrg1_gap_aci.h, procedure aci_gap_terminate() */
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	f003 fb75 	bl	8005a70 <HAL_Delay>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000230 	.word	0x20000230
 8002394:	0800d1e4 	.word	0x0800d1e4

08002398 <Start_Scanning>:
 * @brief  Start searching for a peripheral device
 * @param  None
 * @retval None
 */
void Start_Scanning(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  int ret;

  /* scanInterval, scanWindow, own_address_type, filterDuplicates */
  ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800239e:	2301      	movs	r3, #1
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023aa:	f006 fe7a 	bl	80090a2 <aci_gap_start_general_discovery_proc>
 80023ae:	4603      	mov	r3, r0
 80023b0:	607b      	str	r3, [r7, #4]

  if (ret != BLE_STATUS_SUCCESS){
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <Start_Scanning+0x28>
    printf("aci_gap_start_general_discovery_proc() failed: %02X\n",ret);
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <Start_Scanning+0x30>)
 80023bc:	f009 fcd2 	bl	800bd64 <iprintf>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0800d208 	.word	0x0800d208

080023cc <Start_Connection>:
 * @brief  Start connection with a peripheral device
 * @param  Device index to connect
 * @retval None
 */
void Start_Connection(uint8_t dev_index)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af08      	add	r7, sp, #32
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	491a      	ldr	r1, [pc, #104]	; (8002444 <Start_Connection+0x78>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	440b      	add	r3, r1
 80023e4:	330c      	adds	r3, #12
 80023e6:	7819      	ldrb	r1, [r3, #0]
                                  saved_devices.dev_info[dev_index].addr_type,
                                  saved_devices.dev_info[dev_index].bdaddr,
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <Start_Connection+0x78>)
 80023f4:	4413      	add	r3, r2
 80023f6:	3306      	adds	r3, #6
  ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 80023f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023fc:	9206      	str	r2, [sp, #24]
 80023fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002402:	9205      	str	r2, [sp, #20]
 8002404:	223c      	movs	r2, #60	; 0x3c
 8002406:	9204      	str	r2, [sp, #16]
 8002408:	2200      	movs	r2, #0
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	2228      	movs	r2, #40	; 0x28
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	2228      	movs	r2, #40	; 0x28
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	9200      	str	r2, [sp, #0]
 8002418:	460a      	mov	r2, r1
 800241a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800241e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002422:	f006 fedb 	bl	80091dc <aci_gap_create_connection>
 8002426:	4603      	mov	r3, r0
 8002428:	73fb      	strb	r3, [r7, #15]
                                  PUBLIC_ADDR, 40, 40, 0, 60, 2000 , 2000);

  if (ret != BLE_STATUS_SUCCESS) {
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <Start_Connection+0x6e>
    printf("aci_gap_create_connection() failed: 0x%02x\n", ret);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	4619      	mov	r1, r3
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <Start_Connection+0x7c>)
 8002436:	f009 fc95 	bl	800bd64 <iprintf>
  }
  else {
    PRINT_DBG("aci_gap_create_connection() OK\n");
  }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000230 	.word	0x20000230
 8002448:	0800d240 	.word	0x0800d240

0800244c <Discover_Services>:
 * @brief  Services discovery
 * @param  uint8_t The device index
 * @retval None
 */
void Discover_Services(uint8_t dev_index)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  PRINT_DBG(" connection handle 0x%04x\n", saved_devices.dev_info[dev_index].conn_handle);
  ret = aci_gatt_disc_all_primary_services(saved_devices.dev_info[dev_index].conn_handle);
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <Discover_Services+0x40>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	3304      	adds	r3, #4
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f007 f877 	bl	800955c <aci_gatt_disc_all_primary_services>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

  if (ret != BLE_STATUS_SUCCESS) {
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <Discover_Services+0x36>
    printf("aci_gatt_disc_all_primary_services() failed: 0x%02x\n", ret);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4619      	mov	r1, r3
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <Discover_Services+0x44>)
 800247e:	f009 fc71 	bl	800bd64 <iprintf>
  }
  else {
    PRINT_DBG("aci_gatt_disc_all_primary_services() OK\n");
  }
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000230 	.word	0x20000230
 8002490:	0800d26c 	.word	0x0800d26c

08002494 <Discover_Characteristics>:
 * @param  uint8_t The device index
 * @param  uint8_t The service index
 * @retval None
 */
void Discover_Characteristics(uint8_t dev_idx, uint8_t serv_idx)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
  uint16_t conn_handle  = saved_devices.dev_info[dev_idx].conn_handle;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	491f      	ldr	r1, [pc, #124]	; (8002524 <Discover_Characteristics+0x90>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	440b      	add	r3, r1
 80024b2:	3304      	adds	r3, #4
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	81fb      	strh	r3, [r7, #14]
  uint16_t start_handle = saved_devices.dev_info[dev_idx].serv_info[serv_idx].start_handle;
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	491a      	ldr	r1, [pc, #104]	; (8002524 <Discover_Characteristics+0x90>)
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	3330      	adds	r3, #48	; 0x30
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	f240 21ba 	movw	r1, #698	; 0x2ba
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	81bb      	strh	r3, [r7, #12]
  uint16_t end_handle   = saved_devices.dev_info[dev_idx].serv_info[serv_idx].end_handle;
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	4911      	ldr	r1, [pc, #68]	; (8002524 <Discover_Characteristics+0x90>)
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	440b      	add	r3, r1
 80024e8:	3330      	adds	r3, #48	; 0x30
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	79bb      	ldrb	r3, [r7, #6]
 80024ee:	f240 21ba 	movw	r1, #698	; 0x2ba
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	885b      	ldrh	r3, [r3, #2]
 80024fa:	817b      	strh	r3, [r7, #10]
  uint8_t  ret;

  ret = aci_gatt_disc_all_char_of_service(conn_handle, start_handle, end_handle);
 80024fc:	897a      	ldrh	r2, [r7, #10]
 80024fe:	89b9      	ldrh	r1, [r7, #12]
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	4618      	mov	r0, r3
 8002504:	f007 f88b 	bl	800961e <aci_gatt_disc_all_char_of_service>
 8002508:	4603      	mov	r3, r0
 800250a:	727b      	strb	r3, [r7, #9]
  if (ret != BLE_STATUS_SUCCESS) {
 800250c:	7a7b      	ldrb	r3, [r7, #9]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <Discover_Characteristics+0x88>
    printf("aci_gatt_disc_all_char_of_service() failed: 0x%02x\n", ret);
 8002512:	7a7b      	ldrb	r3, [r7, #9]
 8002514:	4619      	mov	r1, r3
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <Discover_Characteristics+0x94>)
 8002518:	f009 fc24 	bl	800bd64 <iprintf>
  }
  else {
    PRINT_DBG("aci_gatt_disc_all_char_of_service() OK\n");
  }
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000230 	.word	0x20000230
 8002528:	0800d2a4 	.word	0x0800d2a4

0800252c <Update_Characteristic>:
 * @param  uint8_t The property index
 * @retval None
 */
void Update_Characteristic (uint8_t dev_idx, uint8_t serv_idx, uint8_t char_idx,
                            uint8_t prop_idx)
{
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af04      	add	r7, sp, #16
 8002532:	4604      	mov	r4, r0
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	4603      	mov	r3, r0
 8002540:	71bb      	strb	r3, [r7, #6]
 8002542:	460b      	mov	r3, r1
 8002544:	717b      	strb	r3, [r7, #5]
 8002546:	4613      	mov	r3, r2
 8002548:	713b      	strb	r3, [r7, #4]
  uint16_t connection_handle = saved_devices.dev_info[dev_idx].conn_handle;
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	49ae      	ldr	r1, [pc, #696]	; (8002808 <Update_Characteristic+0x2dc>)
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	3304      	adds	r3, #4
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t attr_handle;

  uint8_t ret;

  if (serv_idx > (saved_devices.dev_info[dev_idx].serv_num - 1))
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	49a9      	ldr	r1, [pc, #676]	; (8002808 <Update_Characteristic+0x2dc>)
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	440b      	add	r3, r1
 800256c:	332f      	adds	r3, #47	; 0x2f
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	79ba      	ldrb	r2, [r7, #6]
 8002572:	429a      	cmp	r2, r3
 8002574:	d308      	bcc.n	8002588 <Update_Characteristic+0x5c>
  {
    printf(" The service x=%d does not exist!\r\n", serv_idx);
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	4619      	mov	r1, r3
 800257a:	48a4      	ldr	r0, [pc, #656]	; (800280c <Update_Characteristic+0x2e0>)
 800257c:	f009 fbf2 	bl	800bd64 <iprintf>
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002580:	4ba3      	ldr	r3, [pc, #652]	; (8002810 <Update_Characteristic+0x2e4>)
 8002582:	220e      	movs	r2, #14
 8002584:	701a      	strb	r2, [r3, #0]
    return;
 8002586:	e194      	b.n	80028b2 <Update_Characteristic+0x386>
  }
  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ACCESS_PROFILE_TYPE) ||
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	499f      	ldr	r1, [pc, #636]	; (8002808 <Update_Characteristic+0x2dc>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3330      	adds	r3, #48	; 0x30
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	f240 21ba 	movw	r1, #698	; 0x2ba
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d012      	beq.n	80025d4 <Update_Characteristic+0xa8>
      (saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ATTRIBUTE_PROFILE_TYPE))
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	4995      	ldr	r1, [pc, #596]	; (8002808 <Update_Characteristic+0x2dc>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	440b      	add	r3, r1
 80025bc:	3330      	adds	r3, #48	; 0x30
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ACCESS_PROFILE_TYPE) ||
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d108      	bne.n	80025e6 <Update_Characteristic+0xba>
  {
    printf(" Services:\n - %s\n - %s\n are not supported!\r\n",
 80025d4:	4a8f      	ldr	r2, [pc, #572]	; (8002814 <Update_Characteristic+0x2e8>)
 80025d6:	4990      	ldr	r1, [pc, #576]	; (8002818 <Update_Characteristic+0x2ec>)
 80025d8:	4890      	ldr	r0, [pc, #576]	; (800281c <Update_Characteristic+0x2f0>)
 80025da:	f009 fbc3 	bl	800bd64 <iprintf>
           GENERIC_ACCESS_PROFILE_NAME, GENERIC_ATTRIBUTE_PROFILE_NAME);
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80025de:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <Update_Characteristic+0x2e4>)
 80025e0:	220e      	movs	r2, #14
 80025e2:	701a      	strb	r2, [r3, #0]
    return;
 80025e4:	e165      	b.n	80028b2 <Update_Characteristic+0x386>
  }
  if (char_idx > (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_num - 1))
 80025e6:	79fa      	ldrb	r2, [r7, #7]
 80025e8:	4987      	ldr	r1, [pc, #540]	; (8002808 <Update_Characteristic+0x2dc>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	3330      	adds	r3, #48	; 0x30
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	f240 21ba 	movw	r1, #698	; 0x2ba
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002608:	797a      	ldrb	r2, [r7, #5]
 800260a:	429a      	cmp	r2, r3
 800260c:	d308      	bcc.n	8002620 <Update_Characteristic+0xf4>
  {
    printf(" The characteristic y=%d does not exist!\r\n", char_idx);
 800260e:	797b      	ldrb	r3, [r7, #5]
 8002610:	4619      	mov	r1, r3
 8002612:	4883      	ldr	r0, [pc, #524]	; (8002820 <Update_Characteristic+0x2f4>)
 8002614:	f009 fba6 	bl	800bd64 <iprintf>
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002618:	4b7d      	ldr	r3, [pc, #500]	; (8002810 <Update_Characteristic+0x2e4>)
 800261a:	220e      	movs	r2, #14
 800261c:	701a      	strb	r2, [r3, #0]
    return;
 800261e:	e148      	b.n	80028b2 <Update_Characteristic+0x386>
  }

  switch (prop_idx)
 8002620:	793b      	ldrb	r3, [r7, #4]
 8002622:	2b06      	cmp	r3, #6
 8002624:	f200 8139 	bhi.w	800289a <Update_Characteristic+0x36e>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <Update_Characteristic+0x104>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002889 	.word	0x08002889
 8002634:	0800264d 	.word	0x0800264d
 8002638:	080026eb 	.word	0x080026eb
 800263c:	080026eb 	.word	0x080026eb
 8002640:	080027c1 	.word	0x080027c1
 8002644:	08002841 	.word	0x08002841
 8002648:	08002889 	.word	0x08002889
  {
  case (1):
    if (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].read) {
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	496e      	ldr	r1, [pc, #440]	; (8002808 <Update_Characteristic+0x2dc>)
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	440b      	add	r3, r1
 800265a:	3330      	adds	r3, #48	; 0x30
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	441a      	add	r2, r3
 800266a:	797b      	ldrb	r3, [r7, #5]
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	4413      	add	r3, r2
 8002670:	3372      	adds	r3, #114	; 0x72
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d031      	beq.n	80026dc <Update_Characteristic+0x1b0>
      attr_handle = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].decl_handle + 1;
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	4963      	ldr	r1, [pc, #396]	; (8002808 <Update_Characteristic+0x2dc>)
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	440b      	add	r3, r1
 8002686:	3330      	adds	r3, #48	; 0x30
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	441a      	add	r2, r3
 8002696:	797b      	ldrb	r3, [r7, #5]
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	4413      	add	r3, r2
 800269c:	333a      	adds	r3, #58	; 0x3a
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	847b      	strh	r3, [r7, #34]	; 0x22
      ret = aci_gatt_read_char_value(connection_handle, attr_handle);
 80026a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80026a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f007 f841 	bl	8009732 <aci_gatt_read_char_value>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      if (ret != BLE_STATUS_SUCCESS) {
 80026b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80f6 	beq.w	80028ac <Update_Characteristic+0x380>
        printf(" Unable to read data from device %d (err 0x%02x, 0x%04x - 0x%04x)\r\n",
 80026c0:	79f9      	ldrb	r1, [r7, #7]
 80026c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80026c6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80026c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	4855      	ldr	r0, [pc, #340]	; (8002824 <Update_Characteristic+0x2f8>)
 80026d0:	f009 fb48 	bl	800bd64 <iprintf>
               dev_idx, ret, connection_handle, attr_handle);
        central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80026d4:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <Update_Characteristic+0x2e4>)
 80026d6:	220e      	movs	r2, #14
 80026d8:	701a      	strb	r2, [r3, #0]
    }
    else {
      printf(" The selected characteristic is not readable!\r\n");
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
    }
    break;
 80026da:	e0e7      	b.n	80028ac <Update_Characteristic+0x380>
      printf(" The selected characteristic is not readable!\r\n");
 80026dc:	4852      	ldr	r0, [pc, #328]	; (8002828 <Update_Characteristic+0x2fc>)
 80026de:	f009 fbaf 	bl	800be40 <puts>
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <Update_Characteristic+0x2e4>)
 80026e4:	220e      	movs	r2, #14
 80026e6:	701a      	strb	r2, [r3, #0]
    break;
 80026e8:	e0e0      	b.n	80028ac <Update_Characteristic+0x380>
  case (2):
  case (3):
    if (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].write) {
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	4946      	ldr	r1, [pc, #280]	; (8002808 <Update_Characteristic+0x2dc>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	440b      	add	r3, r1
 80026f8:	3330      	adds	r3, #48	; 0x30
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	441a      	add	r2, r3
 8002708:	797b      	ldrb	r3, [r7, #5]
 800270a:	019b      	lsls	r3, r3, #6
 800270c:	4413      	add	r3, r2
 800270e:	3374      	adds	r3, #116	; 0x74
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d04d      	beq.n	80027b2 <Update_Characteristic+0x286>
       * for the attribute data.
       */
      uint8_t attribute_val_length;
      uint8_t attribute_val[MAX_STRING_LENGTH];

      printf("\n Type the value (max %d characters, 'ENTER' to send): ", MAX_STRING_LENGTH);
 8002716:	2114      	movs	r1, #20
 8002718:	4844      	ldr	r0, [pc, #272]	; (800282c <Update_Characteristic+0x300>)
 800271a:	f009 fb23 	bl	800bd64 <iprintf>
      printf("\n\n ");
 800271e:	4844      	ldr	r0, [pc, #272]	; (8002830 <Update_Characteristic+0x304>)
 8002720:	f009 fb20 	bl	800bd64 <iprintf>
      attribute_val_length = Get_Value(attribute_val);
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fcab 	bl	8004084 <Get_Value>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      printf("\n");
 8002734:	200a      	movs	r0, #10
 8002736:	f009 fb27 	bl	800bd88 <putchar>

      central_status = WRITING_CHARACTERISTIC_VALUE;
 800273a:	4b35      	ldr	r3, [pc, #212]	; (8002810 <Update_Characteristic+0x2e4>)
 800273c:	2210      	movs	r2, #16
 800273e:	701a      	strb	r2, [r3, #0]

      attr_handle = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].value_handle;
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	4931      	ldr	r1, [pc, #196]	; (8002808 <Update_Characteristic+0x2dc>)
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	440b      	add	r3, r1
 800274e:	3330      	adds	r3, #48	; 0x30
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	79bb      	ldrb	r3, [r7, #6]
 8002754:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	441a      	add	r2, r3
 800275e:	797b      	ldrb	r3, [r7, #5]
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	4413      	add	r3, r2
 8002764:	333c      	adds	r3, #60	; 0x3c
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	847b      	strh	r3, [r7, #34]	; 0x22
      ret = aci_gatt_write_char_value(connection_handle, attr_handle,
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002772:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002774:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002776:	f007 f850 	bl	800981a <aci_gatt_write_char_value>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                                      attribute_val_length, attribute_val);
      if (ret != BLE_STATUS_SUCCESS) {
 8002780:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8093 	beq.w	80028b0 <Update_Characteristic+0x384>
        printf(" Unable to write characteristic %d (dev %d, serv %d, err 0x%02x, 0x%04x - 0x%04x)\r\n",
 800278a:	7978      	ldrb	r0, [r7, #5]
 800278c:	79fc      	ldrb	r4, [r7, #7]
 800278e:	79bd      	ldrb	r5, [r7, #6]
 8002790:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002794:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002796:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002798:	9102      	str	r1, [sp, #8]
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	462b      	mov	r3, r5
 80027a0:	4622      	mov	r2, r4
 80027a2:	4601      	mov	r1, r0
 80027a4:	4823      	ldr	r0, [pc, #140]	; (8002834 <Update_Characteristic+0x308>)
 80027a6:	f009 fadd 	bl	800bd64 <iprintf>
               char_idx, dev_idx, serv_idx, ret, connection_handle, attr_handle);
        central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <Update_Characteristic+0x2e4>)
 80027ac:	220e      	movs	r2, #14
 80027ae:	701a      	strb	r2, [r3, #0]
    }
    else {
      printf(" The selected characteristic is not writable!\r\n");
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
    }
    break;
 80027b0:	e07e      	b.n	80028b0 <Update_Characteristic+0x384>
      printf(" The selected characteristic is not writable!\r\n");
 80027b2:	4821      	ldr	r0, [pc, #132]	; (8002838 <Update_Characteristic+0x30c>)
 80027b4:	f009 fb44 	bl	800be40 <puts>
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <Update_Characteristic+0x2e4>)
 80027ba:	220e      	movs	r2, #14
 80027bc:	701a      	strb	r2, [r3, #0]
    break;
 80027be:	e077      	b.n	80028b0 <Update_Characteristic+0x384>
  case (4):
    if (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].notify) {
 80027c0:	79fa      	ldrb	r2, [r7, #7]
 80027c2:	4911      	ldr	r1, [pc, #68]	; (8002808 <Update_Characteristic+0x2dc>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	440b      	add	r3, r1
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	441a      	add	r2, r3
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	4413      	add	r3, r2
 80027e4:	3375      	adds	r3, #117	; 0x75
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <Update_Characteristic+0x2ce>
      Set_Notifications(dev_idx, serv_idx, char_idx, 0x01); /* enable notifications */
 80027ec:	797a      	ldrb	r2, [r7, #5]
 80027ee:	79b9      	ldrb	r1, [r7, #6]
 80027f0:	79f8      	ldrb	r0, [r7, #7]
 80027f2:	2301      	movs	r3, #1
 80027f4:	f000 f86a 	bl	80028cc <Set_Notifications>
    }
    else {
      printf(" The notify property can't be enabled for the selected characteristic!\r\n");
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
    }
    break;
 80027f8:	e05b      	b.n	80028b2 <Update_Characteristic+0x386>
      printf(" The notify property can't be enabled for the selected characteristic!\r\n");
 80027fa:	4810      	ldr	r0, [pc, #64]	; (800283c <Update_Characteristic+0x310>)
 80027fc:	f009 fb20 	bl	800be40 <puts>
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <Update_Characteristic+0x2e4>)
 8002802:	220e      	movs	r2, #14
 8002804:	701a      	strb	r2, [r3, #0]
    break;
 8002806:	e054      	b.n	80028b2 <Update_Characteristic+0x386>
 8002808:	20000230 	.word	0x20000230
 800280c:	0800d2d8 	.word	0x0800d2d8
 8002810:	2000022d 	.word	0x2000022d
 8002814:	0800d2fc 	.word	0x0800d2fc
 8002818:	0800d318 	.word	0x0800d318
 800281c:	0800d330 	.word	0x0800d330
 8002820:	0800d360 	.word	0x0800d360
 8002824:	0800d38c 	.word	0x0800d38c
 8002828:	0800d3d0 	.word	0x0800d3d0
 800282c:	0800d400 	.word	0x0800d400
 8002830:	0800d438 	.word	0x0800d438
 8002834:	0800d43c 	.word	0x0800d43c
 8002838:	0800d490 	.word	0x0800d490
 800283c:	0800d4c0 	.word	0x0800d4c0
  case (5):
    if (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].indicate) {
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	491d      	ldr	r1, [pc, #116]	; (80028b8 <Update_Characteristic+0x38c>)
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	440b      	add	r3, r1
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	79bb      	ldrb	r3, [r7, #6]
 8002854:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	441a      	add	r2, r3
 800285e:	797b      	ldrb	r3, [r7, #5]
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	4413      	add	r3, r2
 8002864:	3376      	adds	r3, #118	; 0x76
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <Update_Characteristic+0x34e>
      Set_Notifications(dev_idx, serv_idx, char_idx, 0x02); /* enable indications */
 800286c:	797a      	ldrb	r2, [r7, #5]
 800286e:	79b9      	ldrb	r1, [r7, #6]
 8002870:	79f8      	ldrb	r0, [r7, #7]
 8002872:	2302      	movs	r3, #2
 8002874:	f000 f82a 	bl	80028cc <Set_Notifications>
    }
    else {
      printf(" The indicate property can't be enabled for the selected characteristic!\r\n");
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
    }
    break;
 8002878:	e01b      	b.n	80028b2 <Update_Characteristic+0x386>
      printf(" The indicate property can't be enabled for the selected characteristic!\r\n");
 800287a:	4810      	ldr	r0, [pc, #64]	; (80028bc <Update_Characteristic+0x390>)
 800287c:	f009 fae0 	bl	800be40 <puts>
      central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <Update_Characteristic+0x394>)
 8002882:	220e      	movs	r2, #14
 8002884:	701a      	strb	r2, [r3, #0]
    break;
 8002886:	e014      	b.n	80028b2 <Update_Characteristic+0x386>
  case (0):
  case (6):
    printf(" The property z=%d is not supported!\r\n", prop_idx);
 8002888:	793b      	ldrb	r3, [r7, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <Update_Characteristic+0x398>)
 800288e:	f009 fa69 	bl	800bd64 <iprintf>
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <Update_Characteristic+0x394>)
 8002894:	220e      	movs	r2, #14
 8002896:	701a      	strb	r2, [r3, #0]
    break;
 8002898:	e00b      	b.n	80028b2 <Update_Characteristic+0x386>
  default:
    printf(" The property z=%d does not exist!\r\n", prop_idx);
 800289a:	793b      	ldrb	r3, [r7, #4]
 800289c:	4619      	mov	r1, r3
 800289e:	480a      	ldr	r0, [pc, #40]	; (80028c8 <Update_Characteristic+0x39c>)
 80028a0:	f009 fa60 	bl	800bd64 <iprintf>
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <Update_Characteristic+0x394>)
 80028a6:	220e      	movs	r2, #14
 80028a8:	701a      	strb	r2, [r3, #0]
    break;
 80028aa:	e002      	b.n	80028b2 <Update_Characteristic+0x386>
    break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <Update_Characteristic+0x386>
    break;
 80028b0:	bf00      	nop
  }

}
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bdb0      	pop	{r4, r5, r7, pc}
 80028b8:	20000230 	.word	0x20000230
 80028bc:	0800d508 	.word	0x0800d508
 80028c0:	2000022d 	.word	0x2000022d
 80028c4:	0800d554 	.word	0x0800d554
 80028c8:	0800d57c 	.word	0x0800d57c

080028cc <Set_Notifications>:
 *                 0x03 enable both notifications and indications
 * @param  uint8_t The property index
 * @retval None
 */
void Set_Notifications(uint8_t dev_idx, uint8_t serv_idx, uint8_t char_idx, uint8_t status)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	71fb      	strb	r3, [r7, #7]
 80028de:	4603      	mov	r3, r0
 80028e0:	71bb      	strb	r3, [r7, #6]
 80028e2:	460b      	mov	r3, r1
 80028e4:	717b      	strb	r3, [r7, #5]
 80028e6:	4613      	mov	r3, r2
 80028e8:	713b      	strb	r3, [r7, #4]
  uint16_t connection_handle = saved_devices.dev_info[dev_idx].conn_handle;
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	4920      	ldr	r1, [pc, #128]	; (8002970 <Set_Notifications+0xa4>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	440b      	add	r3, r1
 80028f8:	3304      	adds	r3, #4
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	82fb      	strh	r3, [r7, #22]
  uint8_t  attribute_val_length = 2;
 80028fe:	2302      	movs	r3, #2
 8002900:	757b      	strb	r3, [r7, #21]
   * status = 0x00 disable both notifications and indications
   * status = 0x01 enable notifications
   * status = 0x02 enable indications
   * status = 0x03 enable both notifications and indications
   */
  uint8_t attribute_val[] = {status, 0x00};
 8002902:	793b      	ldrb	r3, [r7, #4]
 8002904:	733b      	strb	r3, [r7, #12]
 8002906:	2300      	movs	r3, #0
 8002908:	737b      	strb	r3, [r7, #13]
  uint8_t ret;

  uint16_t attr_handle = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].decl_handle + 2;
 800290a:	79fa      	ldrb	r2, [r7, #7]
 800290c:	4918      	ldr	r1, [pc, #96]	; (8002970 <Set_Notifications+0xa4>)
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	440b      	add	r3, r1
 8002918:	3330      	adds	r3, #48	; 0x30
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	441a      	add	r2, r3
 8002928:	797b      	ldrb	r3, [r7, #5]
 800292a:	019b      	lsls	r3, r3, #6
 800292c:	4413      	add	r3, r2
 800292e:	333a      	adds	r3, #58	; 0x3a
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	3302      	adds	r3, #2
 8002934:	827b      	strh	r3, [r7, #18]
  ret = aci_gatt_write_char_desc(connection_handle, attr_handle,
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	7d7a      	ldrb	r2, [r7, #21]
 800293c:	8a79      	ldrh	r1, [r7, #18]
 800293e:	8af8      	ldrh	r0, [r7, #22]
 8002940:	f007 f813 	bl	800996a <aci_gatt_write_char_desc>
 8002944:	4603      	mov	r3, r0
 8002946:	747b      	strb	r3, [r7, #17]
                                 attribute_val_length, attribute_val);
  if (ret != BLE_STATUS_SUCCESS) {
 8002948:	7c7b      	ldrb	r3, [r7, #17]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <Set_Notifications+0x9a>
    printf(" Unable to change notification/indication property on device %d (err 0x%02x, 0x%04x - 0x%04x)\r\n",
 800294e:	79f9      	ldrb	r1, [r7, #7]
 8002950:	7c7a      	ldrb	r2, [r7, #17]
 8002952:	8af8      	ldrh	r0, [r7, #22]
 8002954:	8a7b      	ldrh	r3, [r7, #18]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <Set_Notifications+0xa8>)
 800295c:	f009 fa02 	bl	800bd64 <iprintf>
           dev_idx, ret, connection_handle, attr_handle);
    central_status = SELECT_ANOTHER_CHARACTERISTIC;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <Set_Notifications+0xac>)
 8002962:	220e      	movs	r2, #14
 8002964:	701a      	strb	r2, [r3, #0]
  }
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	20000230 	.word	0x20000230
 8002974:	0800d5a4 	.word	0x0800d5a4
 8002978:	2000022d 	.word	0x2000022d

0800297c <Save_Found_Device>:
 * @param  position in the struct
 * @retval None
 */
void Save_Found_Device(tBDAddr addr, uint8_t* addr_type, uint8_t data_length,
                       uint8_t* data_value, uint8_t index)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	75fb      	strb	r3, [r7, #23]

  BLUENRG_memcpy(saved_devices.dev_info[index].bdaddr, addr, 6);
 8002990:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <Save_Found_Device+0x12c>)
 800299e:	4413      	add	r3, r2
 80029a0:	3306      	adds	r3, #6
 80029a2:	2206      	movs	r2, #6
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f009 fbb4 	bl	800c114 <memcpy>
  saved_devices.dev_info[index].addr_type   = *addr_type;
 80029ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	7818      	ldrb	r0, [r3, #0]
 80029b4:	493c      	ldr	r1, [pc, #240]	; (8002aa8 <Save_Found_Device+0x12c>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	440b      	add	r3, r1
 80029c0:	330c      	adds	r3, #12
 80029c2:	4602      	mov	r2, r0
 80029c4:	701a      	strb	r2, [r3, #0]
  saved_devices.dev_info[index].name_length = strlen("Unknown");
 80029c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029ca:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <Save_Found_Device+0x12c>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	440b      	add	r3, r1
 80029d6:	330d      	adds	r3, #13
 80029d8:	2207      	movs	r2, #7
 80029da:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(saved_devices.dev_info[index].name, "Unknown",
 80029dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	3308      	adds	r3, #8
 80029ea:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <Save_Found_Device+0x12c>)
 80029ec:	4413      	add	r3, r2
 80029ee:	1d98      	adds	r0, r3, #6
                 (saved_devices.dev_info[index].name_length));
 80029f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029f4:	492c      	ldr	r1, [pc, #176]	; (8002aa8 <Save_Found_Device+0x12c>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	330d      	adds	r3, #13
 8002a02:	781b      	ldrb	r3, [r3, #0]
  BLUENRG_memcpy(saved_devices.dev_info[index].name, "Unknown",
 8002a04:	461a      	mov	r2, r3
 8002a06:	4929      	ldr	r1, [pc, #164]	; (8002aac <Save_Found_Device+0x130>)
 8002a08:	f009 fb84 	bl	800c114 <memcpy>

  while (i < data_length)
 8002a0c:	e043      	b.n	8002a96 <Save_Found_Device+0x11a>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is a complete or a short local name */
    if ((data_value[i+1] == AD_TYPE_COMPLETE_LOCAL_NAME) ||
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	3301      	adds	r3, #1
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d006      	beq.n	8002a2a <Save_Found_Device+0xae>
        (data_value[i+1] == AD_TYPE_SHORTENED_LOCAL_NAME))
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
    if ((data_value[i+1] == AD_TYPE_COMPLETE_LOCAL_NAME) ||
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d12c      	bne.n	8002a84 <Save_Found_Device+0x108>
    {
      saved_devices.dev_info[index].name_length = (data_value[i]-1);
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b2d8      	uxtb	r0, r3
 8002a3a:	491b      	ldr	r1, [pc, #108]	; (8002aa8 <Save_Found_Device+0x12c>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	440b      	add	r3, r1
 8002a46:	330d      	adds	r3, #13
 8002a48:	4602      	mov	r2, r0
 8002a4a:	701a      	strb	r2, [r3, #0]
      BLUENRG_memcpy(saved_devices.dev_info[index].name, &data_value[i+2],
 8002a4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	3308      	adds	r3, #8
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <Save_Found_Device+0x12c>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	1d98      	adds	r0, r3, #6
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	3302      	adds	r3, #2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	18d1      	adds	r1, r2, r3
                     (saved_devices.dev_info[index].name_length));
 8002a68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002a6c:	4c0e      	ldr	r4, [pc, #56]	; (8002aa8 <Save_Found_Device+0x12c>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4423      	add	r3, r4
 8002a78:	330d      	adds	r3, #13
 8002a7a:	781b      	ldrb	r3, [r3, #0]
      BLUENRG_memcpy(saved_devices.dev_info[index].name, &data_value[i+2],
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f009 fb49 	bl	800c114 <memcpy>
      break;
 8002a82:	e00c      	b.n	8002a9e <Save_Found_Device+0x122>
    }
    else
    {
      /* move to next advertising field */
      i += (data_value[i] + 1);
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
  while (i < data_length)
 8002a96:	7dfa      	ldrb	r2, [r7, #23]
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3b7      	bcc.n	8002a0e <Save_Found_Device+0x92>
    }
  }

  return;
 8002a9e:	bf00      	nop
}
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000230 	.word	0x20000230
 8002aac:	0800d604 	.word	0x0800d604

08002ab0 <Save_NonConn_Device>:
 *         devices
 * @param  addr
 * @retval None
 */
void Save_NonConn_Device(tBDAddr addr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint8_t i = non_conn_devices.dev_idx;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	73fb      	strb	r3, [r7, #15]

  BLUENRG_memcpy(non_conn_devices.bdaddr[i], addr, 6);
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002aca:	4413      	add	r3, r2
 8002acc:	3302      	adds	r3, #2
 8002ace:	2206      	movs	r2, #6
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f009 fb1e 	bl	800c114 <memcpy>

  non_conn_devices.dev_num++;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	3301      	adds	r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002ae2:	705a      	strb	r2, [r3, #1]
  non_conn_devices.dev_idx++;
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <Save_NonConn_Device+0x48>)
 8002aee:	701a      	strb	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000414 	.word	0x20000414

08002afc <Print_Device_Info>:
 * @brief  Print all information related to a saved device
 * @param  device position in the saved devices structure
 * @retval None
 */
void Print_Device_Info(uint8_t device_index)
{
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  uint8_t i = device_index;
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	73fb      	strb	r3, [r7, #15]

  /* print the address */
  printf("\r\n");
 8002b0a:	484d      	ldr	r0, [pc, #308]	; (8002c40 <Print_Device_Info+0x144>)
 8002b0c:	f009 f998 	bl	800be40 <puts>
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b10:	7bf9      	ldrb	r1, [r7, #15]
         i, saved_devices.dev_info[i].bdaddr[5], saved_devices.dev_info[i].bdaddr[4],
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	484b      	ldr	r0, [pc, #300]	; (8002c44 <Print_Device_Info+0x148>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4403      	add	r3, r0
 8002b20:	330b      	adds	r3, #11
 8002b22:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b24:	469c      	mov	ip, r3
         i, saved_devices.dev_info[i].bdaddr[5], saved_devices.dev_info[i].bdaddr[4],
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	4846      	ldr	r0, [pc, #280]	; (8002c44 <Print_Device_Info+0x148>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4403      	add	r3, r0
 8002b34:	330a      	adds	r3, #10
 8002b36:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b38:	469e      	mov	lr, r3
         saved_devices.dev_info[i].bdaddr[3], saved_devices.dev_info[i].bdaddr[2],
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	4841      	ldr	r0, [pc, #260]	; (8002c44 <Print_Device_Info+0x148>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4403      	add	r3, r0
 8002b48:	3309      	adds	r3, #9
 8002b4a:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b4c:	461c      	mov	r4, r3
         saved_devices.dev_info[i].bdaddr[3], saved_devices.dev_info[i].bdaddr[2],
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	483c      	ldr	r0, [pc, #240]	; (8002c44 <Print_Device_Info+0x148>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4403      	add	r3, r0
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b60:	461d      	mov	r5, r3
         saved_devices.dev_info[i].bdaddr[1], saved_devices.dev_info[i].bdaddr[0]);
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	4837      	ldr	r0, [pc, #220]	; (8002c44 <Print_Device_Info+0x148>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4403      	add	r3, r0
 8002b70:	3307      	adds	r3, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b74:	461e      	mov	r6, r3
         saved_devices.dev_info[i].bdaddr[1], saved_devices.dev_info[i].bdaddr[0]);
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	4832      	ldr	r0, [pc, #200]	; (8002c44 <Print_Device_Info+0x148>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4403      	add	r3, r0
 8002b84:	3306      	adds	r3, #6
 8002b86:	781b      	ldrb	r3, [r3, #0]
  printf(" %d. BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002b88:	9303      	str	r3, [sp, #12]
 8002b8a:	9602      	str	r6, [sp, #8]
 8002b8c:	9501      	str	r5, [sp, #4]
 8002b8e:	9400      	str	r4, [sp, #0]
 8002b90:	4673      	mov	r3, lr
 8002b92:	4662      	mov	r2, ip
 8002b94:	482c      	ldr	r0, [pc, #176]	; (8002c48 <Print_Device_Info+0x14c>)
 8002b96:	f009 f8e5 	bl	800bd64 <iprintf>

  /* the device is connectable */
  printf("                connectable\n");
 8002b9a:	482c      	ldr	r0, [pc, #176]	; (8002c4c <Print_Device_Info+0x150>)
 8002b9c:	f009 f950 	bl	800be40 <puts>

  /* print the address type */
  printf("                %s address type\n",
         (saved_devices.dev_info[i].addr_type==0x00 ? "public" : (saved_devices.dev_info[i].addr_type==0x01 ? "private" : "unknown")));
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	4928      	ldr	r1, [pc, #160]	; (8002c44 <Print_Device_Info+0x148>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	440b      	add	r3, r1
 8002bae:	330c      	adds	r3, #12
 8002bb0:	781b      	ldrb	r3, [r3, #0]
  printf("                %s address type\n",
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <Print_Device_Info+0xd8>
         (saved_devices.dev_info[i].addr_type==0x00 ? "public" : (saved_devices.dev_info[i].addr_type==0x01 ? "private" : "unknown")));
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	4922      	ldr	r1, [pc, #136]	; (8002c44 <Print_Device_Info+0x148>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	440b      	add	r3, r1
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <Print_Device_Info+0xd4>
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <Print_Device_Info+0x154>)
 8002bce:	e002      	b.n	8002bd6 <Print_Device_Info+0xda>
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <Print_Device_Info+0x158>)
 8002bd2:	e000      	b.n	8002bd6 <Print_Device_Info+0xda>
  printf("                %s address type\n",
 8002bd4:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <Print_Device_Info+0x15c>)
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4820      	ldr	r0, [pc, #128]	; (8002c5c <Print_Device_Info+0x160>)
 8002bda:	f009 f8c3 	bl	800bd64 <iprintf>

  /* print the name */
  printf("                name ");
 8002bde:	4820      	ldr	r0, [pc, #128]	; (8002c60 <Print_Device_Info+0x164>)
 8002be0:	f009 f8c0 	bl	800bd64 <iprintf>
  printf("%s", saved_devices.dev_info[i].name);
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3308      	adds	r3, #8
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <Print_Device_Info+0x148>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3306      	adds	r3, #6
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481a      	ldr	r0, [pc, #104]	; (8002c64 <Print_Device_Info+0x168>)
 8002bfa:	f009 f8b3 	bl	800bd64 <iprintf>
  printf("\n");
 8002bfe:	200a      	movs	r0, #10
 8002c00:	f009 f8c2 	bl	800bd88 <putchar>

  if (saved_devices.dev_info[i].conn_handle != 0) {
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	490f      	ldr	r1, [pc, #60]	; (8002c44 <Print_Device_Info+0x148>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	440b      	add	r3, r1
 8002c12:	3304      	adds	r3, #4
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <Print_Device_Info+0x13a>
    printf("                connection handle 0x%04x\n", saved_devices.dev_info[i].conn_handle);
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	4909      	ldr	r1, [pc, #36]	; (8002c44 <Print_Device_Info+0x148>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	440b      	add	r3, r1
 8002c28:	3304      	adds	r3, #4
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480e      	ldr	r0, [pc, #56]	; (8002c68 <Print_Device_Info+0x16c>)
 8002c30:	f009 f898 	bl	800bd64 <iprintf>
  }

  return;
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
}
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800d10c 	.word	0x0800d10c
 8002c44:	20000230 	.word	0x20000230
 8002c48:	0800d60c 	.word	0x0800d60c
 8002c4c:	0800d648 	.word	0x0800d648
 8002c50:	0800d664 	.word	0x0800d664
 8002c54:	0800d194 	.word	0x0800d194
 8002c58:	0800d66c 	.word	0x0800d66c
 8002c5c:	0800d674 	.word	0x0800d674
 8002c60:	0800d698 	.word	0x0800d698
 8002c64:	0800d6b0 	.word	0x0800d6b0
 8002c68:	0800d6b4 	.word	0x0800d6b4

08002c6c <Print_NonConn_Device>:
 * @param  data_value
 * @retval None
 */
void Print_NonConn_Device(tBDAddr addr, uint8_t* addr_type, uint8_t data_length,
                          uint8_t* data_value)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b092      	sub	sp, #72	; 0x48
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t name_length;
  uint8_t name[MAX_NAME_LENGTH];

  printf(ANSI_COLOR_WHITE); /* to print logs in matt white (like a gray) */
 8002c82:	488b      	ldr	r0, [pc, #556]	; (8002eb0 <Print_NonConn_Device+0x244>)
 8002c84:	f009 f86e 	bl	800bd64 <iprintf>

  /* print the address */
  printf("\r\n");
 8002c88:	488a      	ldr	r0, [pc, #552]	; (8002eb4 <Print_NonConn_Device+0x248>)
 8002c8a:	f009 f8d9 	bl	800be40 <puts>
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3305      	adds	r3, #5
 8002c92:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002c94:	4618      	mov	r0, r3
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002c9c:	461c      	mov	r4, r3
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002ca4:	461d      	mov	r5, r3
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3302      	adds	r3, #2
 8002caa:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002cac:	461a      	mov	r2, r3
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002cb4:	4619      	mov	r1, r3
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
  printf("    BLE device: address %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	9101      	str	r1, [sp, #4]
 8002cbe:	9200      	str	r2, [sp, #0]
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	487c      	ldr	r0, [pc, #496]	; (8002eb8 <Print_NonConn_Device+0x24c>)
 8002cc8:	f009 f84c 	bl	800bd64 <iprintf>
  printf("                non-connectable\n");
 8002ccc:	487b      	ldr	r0, [pc, #492]	; (8002ebc <Print_NonConn_Device+0x250>)
 8002cce:	f009 f8b7 	bl	800be40 <puts>

  /* print the address type */
  printf("                %s address type\n",
         (*addr_type==0x00 ? "public" : (*addr_type==0x01 ? "private" : "unknown")));
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
  printf("                %s address type\n",
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <Print_NonConn_Device+0x7e>
         (*addr_type==0x00 ? "public" : (*addr_type==0x01 ? "private" : "unknown")));
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <Print_NonConn_Device+0x7a>
 8002ce2:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <Print_NonConn_Device+0x254>)
 8002ce4:	e002      	b.n	8002cec <Print_NonConn_Device+0x80>
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <Print_NonConn_Device+0x258>)
 8002ce8:	e000      	b.n	8002cec <Print_NonConn_Device+0x80>
  printf("                %s address type\n",
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <Print_NonConn_Device+0x25c>)
 8002cec:	4619      	mov	r1, r3
 8002cee:	4877      	ldr	r0, [pc, #476]	; (8002ecc <Print_NonConn_Device+0x260>)
 8002cf0:	f009 f838 	bl	800bd64 <iprintf>

  name_length = strlen("Unknown");
 8002cf4:	2307      	movs	r3, #7
 8002cf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  BLUENRG_memcpy(name, "Unknown", name_length);
 8002cfa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4973      	ldr	r1, [pc, #460]	; (8002ed0 <Print_NonConn_Device+0x264>)
 8002d04:	4618      	mov	r0, r3
 8002d06:	f009 fa05 	bl	800c114 <memcpy>
  while (i < data_length)
 8002d0a:	e030      	b.n	8002d6e <Print_NonConn_Device+0x102>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is a complete or a short local name */
    if ((data_value[i+1] == AD_TYPE_COMPLETE_LOCAL_NAME) ||
 8002d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d10:	3301      	adds	r3, #1
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	d007      	beq.n	8002d2c <Print_NonConn_Device+0xc0>
        (data_value[i+1] == AD_TYPE_SHORTENED_LOCAL_NAME))
 8002d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d20:	3301      	adds	r3, #1
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
    if ((data_value[i+1] == AD_TYPE_COMPLETE_LOCAL_NAME) ||
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d114      	bne.n	8002d56 <Print_NonConn_Device+0xea>
    {
      name_length = (data_value[i]-1);
 8002d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      BLUENRG_memcpy(name, &data_value[i+2], name_length);
 8002d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d40:	3302      	adds	r3, #2
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	18d1      	adds	r1, r2, r3
 8002d46:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f009 f9e0 	bl	800c114 <memcpy>
      break;
 8002d54:	e010      	b.n	8002d78 <Print_NonConn_Device+0x10c>
    }
    else
    {
      /* move to next advertising field */
      i += (data_value[i] + 1);
 8002d56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d64:	4413      	add	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (i < data_length)
 8002d6e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3c9      	bcc.n	8002d0c <Print_NonConn_Device+0xa0>
    }
  }

  /* print the name */
  printf("                name ");
 8002d78:	4856      	ldr	r0, [pc, #344]	; (8002ed4 <Print_NonConn_Device+0x268>)
 8002d7a:	f008 fff3 	bl	800bd64 <iprintf>
  printf("%s\n", name);
 8002d7e:	f107 0314 	add.w	r3, r7, #20
 8002d82:	4618      	mov	r0, r3
 8002d84:	f009 f85c 	bl	800be40 <puts>

  if (data_value[0]==0x02) { /* the AD Type Flags are at the beginning of the Advertising packet */
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d103      	bne.n	8002d98 <Print_NonConn_Device+0x12c>
    i=3;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d96:	e002      	b.n	8002d9e <Print_NonConn_Device+0x132>
  }
  else { /* no AD Type Flags at the beginning of the Advertising packet */
    i=0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   * Loc-UUID = Location UUID
   * Maj = Major number
   * Min = Minor number
   * SigPW = Signal Power
  */
  if ((data_value[1+i]==AD_TYPE_MANUFACTURER_SPECIFIC_DATA) && (data_value[4+i]==0x02)) {
 8002d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002da2:	3301      	adds	r3, #1
 8002da4:	461a      	mov	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2bff      	cmp	r3, #255	; 0xff
 8002dae:	d131      	bne.n	8002e14 <Print_NonConn_Device+0x1a8>
 8002db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002db4:	3304      	adds	r3, #4
 8002db6:	461a      	mov	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d128      	bne.n	8002e14 <Print_NonConn_Device+0x1a8>
    printf("                iBeacon ");
 8002dc2:	4845      	ldr	r0, [pc, #276]	; (8002ed8 <Print_NonConn_Device+0x26c>)
 8002dc4:	f008 ffce 	bl	800bd64 <iprintf>
    if ((data_value[1+i]==0xFF) &&
 8002dc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dcc:	3301      	adds	r3, #1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2bff      	cmp	r3, #255	; 0xff
 8002dd8:	d115      	bne.n	8002e06 <Print_NonConn_Device+0x19a>
        (data_value[2+i]==0x30) &&
 8002dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dde:	3302      	adds	r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
    if ((data_value[1+i]==0xFF) &&
 8002de8:	2b30      	cmp	r3, #48	; 0x30
 8002dea:	d10c      	bne.n	8002e06 <Print_NonConn_Device+0x19a>
          (data_value[3+i]==0x00)) {//Company identifier code (Default is 0x0030 - STMicroelectronics))
 8002dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002df0:	3303      	adds	r3, #3
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
        (data_value[2+i]==0x30) &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <Print_NonConn_Device+0x19a>
            printf("[Manuf.: ST]");
 8002dfe:	4837      	ldr	r0, [pc, #220]	; (8002edc <Print_NonConn_Device+0x270>)
 8002e00:	f008 ffb0 	bl	800bd64 <iprintf>
 8002e04:	e002      	b.n	8002e0c <Print_NonConn_Device+0x1a0>
          }
    else {
      printf("[Manuf.: Unknown]");
 8002e06:	4836      	ldr	r0, [pc, #216]	; (8002ee0 <Print_NonConn_Device+0x274>)
 8002e08:	f008 ffac 	bl	800bd64 <iprintf>
    }
    printf("\n");
 8002e0c:	200a      	movs	r0, #10
 8002e0e:	f008 ffbb 	bl	800bd88 <putchar>
 8002e12:	e046      	b.n	8002ea2 <Print_NonConn_Device+0x236>
   * fl = LE and BR/EDR flag
   * CL = Complete list of service UUID
   * SD = Service Data
   * E-UUID = Eddystone UUID (0xFEAA)
   */
  else if ((data_value[5+i]==AD_TYPE_SERVICE_DATA) && (data_value[6+i]==0xAA) && (data_value[7+i]==0xFE)) {
 8002e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e18:	3305      	adds	r3, #5
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b16      	cmp	r3, #22
 8002e24:	d13d      	bne.n	8002ea2 <Print_NonConn_Device+0x236>
 8002e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e2a:	3306      	adds	r3, #6
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2baa      	cmp	r3, #170	; 0xaa
 8002e36:	d134      	bne.n	8002ea2 <Print_NonConn_Device+0x236>
 8002e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	461a      	mov	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2bfe      	cmp	r3, #254	; 0xfe
 8002e48:	d12b      	bne.n	8002ea2 <Print_NonConn_Device+0x236>
    printf("                Eddystone Beacon ");
 8002e4a:	4826      	ldr	r0, [pc, #152]	; (8002ee4 <Print_NonConn_Device+0x278>)
 8002e4c:	f008 ff8a 	bl	800bd64 <iprintf>
    if (data_value[8+i]==0x00) {
 8002e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e54:	3308      	adds	r3, #8
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <Print_NonConn_Device+0x1fe>
      printf("[UID]");
 8002e62:	4821      	ldr	r0, [pc, #132]	; (8002ee8 <Print_NonConn_Device+0x27c>)
 8002e64:	f008 ff7e 	bl	800bd64 <iprintf>
 8002e68:	e018      	b.n	8002e9c <Print_NonConn_Device+0x230>
    }
    else if (data_value[8+i]==0x10) {
 8002e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e6e:	3308      	adds	r3, #8
 8002e70:	461a      	mov	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d103      	bne.n	8002e84 <Print_NonConn_Device+0x218>
      printf("[URL]");
 8002e7c:	481b      	ldr	r0, [pc, #108]	; (8002eec <Print_NonConn_Device+0x280>)
 8002e7e:	f008 ff71 	bl	800bd64 <iprintf>
 8002e82:	e00b      	b.n	8002e9c <Print_NonConn_Device+0x230>
    }
    else if (data_value[8+i]==0x20) {
 8002e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e88:	3308      	adds	r3, #8
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d102      	bne.n	8002e9c <Print_NonConn_Device+0x230>
      printf("[TLM]");
 8002e96:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <Print_NonConn_Device+0x284>)
 8002e98:	f008 ff64 	bl	800bd64 <iprintf>
    }
    printf("\n");
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f008 ff73 	bl	800bd88 <putchar>
  }

  printf(ANSI_COLOR_RESET); /* reset color to default value for log print */
 8002ea2:	4814      	ldr	r0, [pc, #80]	; (8002ef4 <Print_NonConn_Device+0x288>)
 8002ea4:	f008 ff5e 	bl	800bd64 <iprintf>

  return;
 8002ea8:	bf00      	nop
}
 8002eaa:	3738      	adds	r7, #56	; 0x38
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb0:	0800d6e0 	.word	0x0800d6e0
 8002eb4:	0800d10c 	.word	0x0800d10c
 8002eb8:	0800d6e8 	.word	0x0800d6e8
 8002ebc:	0800d720 	.word	0x0800d720
 8002ec0:	0800d664 	.word	0x0800d664
 8002ec4:	0800d194 	.word	0x0800d194
 8002ec8:	0800d66c 	.word	0x0800d66c
 8002ecc:	0800d674 	.word	0x0800d674
 8002ed0:	0800d604 	.word	0x0800d604
 8002ed4:	0800d698 	.word	0x0800d698
 8002ed8:	0800d740 	.word	0x0800d740
 8002edc:	0800d75c 	.word	0x0800d75c
 8002ee0:	0800d76c 	.word	0x0800d76c
 8002ee4:	0800d780 	.word	0x0800d780
 8002ee8:	0800d7a4 	.word	0x0800d7a4
 8002eec:	0800d7ac 	.word	0x0800d7ac
 8002ef0:	0800d7b4 	.word	0x0800d7b4
 8002ef4:	0800d0f8 	.word	0x0800d0f8

08002ef8 <Print_Service_Info>:
 * @param  device position in the saved devices structure
 * @param  service position in the saved services structure
 * @retval None
 */
void Print_Service_Info(uint8_t dev_idx, uint8_t serv_idx)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	460a      	mov	r2, r1
 8002f02:	71fb      	strb	r3, [r7, #7]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  uint8_t len;

  len = saved_devices.dev_info[dev_idx].serv_info[serv_idx].name_length;
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	496a      	ldr	r1, [pc, #424]	; (80030b4 <Print_Service_Info+0x1bc>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	440b      	add	r3, r1
 8002f16:	3330      	adds	r3, #48	; 0x30
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	79bb      	ldrb	r3, [r7, #6]
 8002f1c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	73bb      	strb	r3, [r7, #14]

  printf(ANSI_COLOR_RESET); /* reset color to default value for log print */
 8002f2a:	4863      	ldr	r0, [pc, #396]	; (80030b8 <Print_Service_Info+0x1c0>)
 8002f2c:	f008 ff1a 	bl	800bd64 <iprintf>
  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ACCESS_PROFILE_TYPE) ||
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	4960      	ldr	r1, [pc, #384]	; (80030b4 <Print_Service_Info+0x1bc>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3330      	adds	r3, #48	; 0x30
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d012      	beq.n	8002f7c <Print_Service_Info+0x84>
      (saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ATTRIBUTE_PROFILE_TYPE))
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	4956      	ldr	r1, [pc, #344]	; (80030b4 <Print_Service_Info+0x1bc>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	440b      	add	r3, r1
 8002f64:	3330      	adds	r3, #48	; 0x30
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	79bb      	ldrb	r3, [r7, #6]
 8002f6a:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type == GENERIC_ACCESS_PROFILE_TYPE) ||
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d102      	bne.n	8002f82 <Print_Service_Info+0x8a>
  {
    printf(ANSI_COLOR_WHITE); /* to print logs in matt white (like a gray) */
 8002f7c:	484f      	ldr	r0, [pc, #316]	; (80030bc <Print_Service_Info+0x1c4>)
 8002f7e:	f008 fef1 	bl	800bd64 <iprintf>
  }

  printf(" %d. ", serv_idx);
 8002f82:	79bb      	ldrb	r3, [r7, #6]
 8002f84:	4619      	mov	r1, r3
 8002f86:	484e      	ldr	r0, [pc, #312]	; (80030c0 <Print_Service_Info+0x1c8>)
 8002f88:	f008 feec 	bl	800bd64 <iprintf>
  for (i=0; i<len; i++) {
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e017      	b.n	8002fc2 <Print_Service_Info+0xca>
    printf("%c", saved_devices.dev_info[dev_idx].serv_info[serv_idx].name[i]);
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	4947      	ldr	r1, [pc, #284]	; (80030b4 <Print_Service_Info+0x1bc>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3330      	adds	r3, #48	; 0x30
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	79bb      	ldrb	r3, [r7, #6]
 8002fa6:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	441a      	add	r2, r3
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	795b      	ldrb	r3, [r3, #5]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f008 fee6 	bl	800bd88 <putchar>
  for (i=0; i<len; i++) {
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3e3      	bcc.n	8002f92 <Print_Service_Info+0x9a>
  }
  printf("\n");
 8002fca:	200a      	movs	r0, #10
 8002fcc:	f008 fedc 	bl	800bd88 <putchar>

  len = saved_devices.dev_info[dev_idx].serv_info[serv_idx].uuid_length;
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	4938      	ldr	r1, [pc, #224]	; (80030b4 <Print_Service_Info+0x1bc>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	440b      	add	r3, r1
 8002fde:	3330      	adds	r3, #48	; 0x30
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ff2:	73bb      	strb	r3, [r7, #14]
  printf("    - UUID ");
 8002ff4:	4833      	ldr	r0, [pc, #204]	; (80030c4 <Print_Service_Info+0x1cc>)
 8002ff6:	f008 feb5 	bl	800bd64 <iprintf>
  for (i=len; i>0; i--) {
 8002ffa:	7bbb      	ldrb	r3, [r7, #14]
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e029      	b.n	8003054 <Print_Service_Info+0x15c>
    printf("%02x", saved_devices.dev_info[dev_idx].serv_info[serv_idx].uuid[i-1]);
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	492c      	ldr	r1, [pc, #176]	; (80030b4 <Print_Service_Info+0x1bc>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	3330      	adds	r3, #48	; 0x30
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	79bb      	ldrb	r3, [r7, #6]
 8003014:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	441a      	add	r2, r3
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	3b01      	subs	r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003028:	4619      	mov	r1, r3
 800302a:	4827      	ldr	r0, [pc, #156]	; (80030c8 <Print_Service_Info+0x1d0>)
 800302c:	f008 fe9a 	bl	800bd64 <iprintf>
    if ((i==13) || (i==11) || (i==9) || (i==7)) {
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b0d      	cmp	r3, #13
 8003034:	d008      	beq.n	8003048 <Print_Service_Info+0x150>
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b0b      	cmp	r3, #11
 800303a:	d005      	beq.n	8003048 <Print_Service_Info+0x150>
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b09      	cmp	r3, #9
 8003040:	d002      	beq.n	8003048 <Print_Service_Info+0x150>
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b07      	cmp	r3, #7
 8003046:	d102      	bne.n	800304e <Print_Service_Info+0x156>
      printf("-");
 8003048:	202d      	movs	r0, #45	; 0x2d
 800304a:	f008 fe9d 	bl	800bd88 <putchar>
  for (i=len; i>0; i--) {
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3b01      	subs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1d2      	bne.n	8003000 <Print_Service_Info+0x108>
    }
  }
  printf("\n");
 800305a:	200a      	movs	r0, #10
 800305c:	f008 fe94 	bl	800bd88 <putchar>
  printf("    - attribute handles 0x%04x - 0x%04x\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].start_handle,
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	4914      	ldr	r1, [pc, #80]	; (80030b4 <Print_Service_Info+0x1bc>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	440b      	add	r3, r1
 800306e:	3330      	adds	r3, #48	; 0x30
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	881b      	ldrh	r3, [r3, #0]
  printf("    - attribute handles 0x%04x - 0x%04x\n",
 8003080:	4618      	mov	r0, r3
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].end_handle);
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <Print_Service_Info+0x1bc>)
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	440b      	add	r3, r1
 8003090:	3330      	adds	r3, #48	; 0x30
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	f240 21ba 	movw	r1, #698	; 0x2ba
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	885b      	ldrh	r3, [r3, #2]
  printf("    - attribute handles 0x%04x - 0x%04x\n",
 80030a2:	461a      	mov	r2, r3
 80030a4:	4601      	mov	r1, r0
 80030a6:	4809      	ldr	r0, [pc, #36]	; (80030cc <Print_Service_Info+0x1d4>)
 80030a8:	f008 fe5c 	bl	800bd64 <iprintf>
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000230 	.word	0x20000230
 80030b8:	0800d0f8 	.word	0x0800d0f8
 80030bc:	0800d6e0 	.word	0x0800d6e0
 80030c0:	0800d7bc 	.word	0x0800d7bc
 80030c4:	0800d7c4 	.word	0x0800d7c4
 80030c8:	0800d7d0 	.word	0x0800d7d0
 80030cc:	0800d7d8 	.word	0x0800d7d8

080030d0 <Print_Characteristic_Info>:
 * @param  service position in the saved service struct
 * @param  characteristic position in the saved characteristic struct
 * @retval None
 */
void Print_Characteristic_Info(uint8_t dev_idx, uint8_t serv_idx, uint8_t char_idx)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	460b      	mov	r3, r1
 80030dc:	71bb      	strb	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	717b      	strb	r3, [r7, #5]
  uint8_t  i, len;

  len = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].name_length;
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	49b5      	ldr	r1, [pc, #724]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	440b      	add	r3, r1
 80030f0:	3330      	adds	r3, #48	; 0x30
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	79bb      	ldrb	r3, [r7, #6]
 80030f6:	f240 21ba 	movw	r1, #698	; 0x2ba
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	441a      	add	r2, r3
 8003100:	797b      	ldrb	r3, [r7, #5]
 8003102:	019b      	lsls	r3, r3, #6
 8003104:	4413      	add	r3, r2
 8003106:	333e      	adds	r3, #62	; 0x3e
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	73bb      	strb	r3, [r7, #14]
  /* Char name */
  printf("    %d. ", char_idx);
 800310c:	797b      	ldrb	r3, [r7, #5]
 800310e:	4619      	mov	r1, r3
 8003110:	48ab      	ldr	r0, [pc, #684]	; (80033c0 <Print_Characteristic_Info+0x2f0>)
 8003112:	f008 fe27 	bl	800bd64 <iprintf>
  for (i=0; i<len; i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e01b      	b.n	8003154 <Print_Characteristic_Info+0x84>
    printf("%c", saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].name[i]);
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	49a7      	ldr	r1, [pc, #668]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	440b      	add	r3, r1
 800312a:	3330      	adds	r3, #48	; 0x30
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	79bb      	ldrb	r3, [r7, #6]
 8003130:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	18d1      	adds	r1, r2, r3
 800313a:	797a      	ldrb	r2, [r7, #5]
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	0192      	lsls	r2, r2, #6
 8003140:	440a      	add	r2, r1
 8003142:	4413      	add	r3, r2
 8003144:	333f      	adds	r3, #63	; 0x3f
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f008 fe1d 	bl	800bd88 <putchar>
  for (i=0; i<len; i++) {
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3301      	adds	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	7bbb      	ldrb	r3, [r7, #14]
 8003158:	429a      	cmp	r2, r3
 800315a:	d3df      	bcc.n	800311c <Print_Characteristic_Info+0x4c>
  }
  printf("\n");
 800315c:	200a      	movs	r0, #10
 800315e:	f008 fe13 	bl	800bd88 <putchar>

  len = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].uuid_length;
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	4995      	ldr	r1, [pc, #596]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	440b      	add	r3, r1
 8003170:	3330      	adds	r3, #48	; 0x30
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	79bb      	ldrb	r3, [r7, #6]
 8003176:	f240 21ba 	movw	r1, #698	; 0x2ba
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	441a      	add	r2, r3
 8003180:	797b      	ldrb	r3, [r7, #5]
 8003182:	019b      	lsls	r3, r3, #6
 8003184:	4413      	add	r3, r2
 8003186:	335f      	adds	r3, #95	; 0x5f
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	73bb      	strb	r3, [r7, #14]

  /* Char UUID */
  printf("       -. UUID ");
 800318c:	488d      	ldr	r0, [pc, #564]	; (80033c4 <Print_Characteristic_Info+0x2f4>)
 800318e:	f008 fde9 	bl	800bd64 <iprintf>
  for (i=len; i>0; i--) {
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e02c      	b.n	80031f2 <Print_Characteristic_Info+0x122>
    printf("%02x", saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].uuid[i-1]);
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	4988      	ldr	r1, [pc, #544]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	440b      	add	r3, r1
 80031a6:	3330      	adds	r3, #48	; 0x30
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	79bb      	ldrb	r3, [r7, #6]
 80031ac:	f240 21ba 	movw	r1, #698	; 0x2ba
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	18d1      	adds	r1, r2, r3
 80031b6:	797a      	ldrb	r2, [r7, #5]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	0192      	lsls	r2, r2, #6
 80031be:	440a      	add	r2, r1
 80031c0:	4413      	add	r3, r2
 80031c2:	3360      	adds	r3, #96	; 0x60
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	487f      	ldr	r0, [pc, #508]	; (80033c8 <Print_Characteristic_Info+0x2f8>)
 80031ca:	f008 fdcb 	bl	800bd64 <iprintf>
    if ((i==13) || (i==11) || (i==9) || (i==7)) {
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b0d      	cmp	r3, #13
 80031d2:	d008      	beq.n	80031e6 <Print_Characteristic_Info+0x116>
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b0b      	cmp	r3, #11
 80031d8:	d005      	beq.n	80031e6 <Print_Characteristic_Info+0x116>
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d002      	beq.n	80031e6 <Print_Characteristic_Info+0x116>
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d102      	bne.n	80031ec <Print_Characteristic_Info+0x11c>
      printf("-");
 80031e6:	202d      	movs	r0, #45	; 0x2d
 80031e8:	f008 fdce 	bl	800bd88 <putchar>
  for (i=len; i>0; i--) {
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1cf      	bne.n	8003198 <Print_Characteristic_Info+0xc8>
    }
  }
  printf("\n");
 80031f8:	200a      	movs	r0, #10
 80031fa:	f008 fdc5 	bl	800bd88 <putchar>

  /* Char declaration and value handles */
  printf("       -. declaration_handle = 0x%04x\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].decl_handle);
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	496e      	ldr	r1, [pc, #440]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	440b      	add	r3, r1
 800320c:	3330      	adds	r3, #48	; 0x30
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	79bb      	ldrb	r3, [r7, #6]
 8003212:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	441a      	add	r2, r3
 800321c:	797b      	ldrb	r3, [r7, #5]
 800321e:	019b      	lsls	r3, r3, #6
 8003220:	4413      	add	r3, r2
 8003222:	333a      	adds	r3, #58	; 0x3a
 8003224:	881b      	ldrh	r3, [r3, #0]
  printf("       -. declaration_handle = 0x%04x\n",
 8003226:	4619      	mov	r1, r3
 8003228:	4868      	ldr	r0, [pc, #416]	; (80033cc <Print_Characteristic_Info+0x2fc>)
 800322a:	f008 fd9b 	bl	800bd64 <iprintf>
  printf("       -. value_handle       = 0x%04x\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].value_handle);
 800322e:	79fa      	ldrb	r2, [r7, #7]
 8003230:	4962      	ldr	r1, [pc, #392]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	440b      	add	r3, r1
 800323c:	3330      	adds	r3, #48	; 0x30
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	79bb      	ldrb	r3, [r7, #6]
 8003242:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	441a      	add	r2, r3
 800324c:	797b      	ldrb	r3, [r7, #5]
 800324e:	019b      	lsls	r3, r3, #6
 8003250:	4413      	add	r3, r2
 8003252:	333c      	adds	r3, #60	; 0x3c
 8003254:	881b      	ldrh	r3, [r3, #0]
  printf("       -. value_handle       = 0x%04x\n",
 8003256:	4619      	mov	r1, r3
 8003258:	485d      	ldr	r0, [pc, #372]	; (80033d0 <Print_Characteristic_Info+0x300>)
 800325a:	f008 fd83 	bl	800bd64 <iprintf>

  /* Char properties */
  printf("       0. broadcast          = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].broadcast);
 800325e:	79fa      	ldrb	r2, [r7, #7]
 8003260:	4956      	ldr	r1, [pc, #344]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	440b      	add	r3, r1
 800326c:	3330      	adds	r3, #48	; 0x30
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	441a      	add	r2, r3
 800327c:	797b      	ldrb	r3, [r7, #5]
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	4413      	add	r3, r2
 8003282:	3371      	adds	r3, #113	; 0x71
 8003284:	781b      	ldrb	r3, [r3, #0]
  printf("       0. broadcast          = %d\n",
 8003286:	4619      	mov	r1, r3
 8003288:	4852      	ldr	r0, [pc, #328]	; (80033d4 <Print_Characteristic_Info+0x304>)
 800328a:	f008 fd6b 	bl	800bd64 <iprintf>
  printf("       1. read               = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].read);
 800328e:	79fa      	ldrb	r2, [r7, #7]
 8003290:	494a      	ldr	r1, [pc, #296]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	440b      	add	r3, r1
 800329c:	3330      	adds	r3, #48	; 0x30
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	441a      	add	r2, r3
 80032ac:	797b      	ldrb	r3, [r7, #5]
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	4413      	add	r3, r2
 80032b2:	3372      	adds	r3, #114	; 0x72
 80032b4:	781b      	ldrb	r3, [r3, #0]
  printf("       1. read               = %d\n",
 80032b6:	4619      	mov	r1, r3
 80032b8:	4847      	ldr	r0, [pc, #284]	; (80033d8 <Print_Characteristic_Info+0x308>)
 80032ba:	f008 fd53 	bl	800bd64 <iprintf>
  printf("       2. writeWoResp        = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].write_wo_resp);
 80032be:	79fa      	ldrb	r2, [r7, #7]
 80032c0:	493e      	ldr	r1, [pc, #248]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	3330      	adds	r3, #48	; 0x30
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	441a      	add	r2, r3
 80032dc:	797b      	ldrb	r3, [r7, #5]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	4413      	add	r3, r2
 80032e2:	3373      	adds	r3, #115	; 0x73
 80032e4:	781b      	ldrb	r3, [r3, #0]
  printf("       2. writeWoResp        = %d\n",
 80032e6:	4619      	mov	r1, r3
 80032e8:	483c      	ldr	r0, [pc, #240]	; (80033dc <Print_Characteristic_Info+0x30c>)
 80032ea:	f008 fd3b 	bl	800bd64 <iprintf>
  printf("       3. write              = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].write);
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	4932      	ldr	r1, [pc, #200]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	3330      	adds	r3, #48	; 0x30
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	79bb      	ldrb	r3, [r7, #6]
 8003302:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	441a      	add	r2, r3
 800330c:	797b      	ldrb	r3, [r7, #5]
 800330e:	019b      	lsls	r3, r3, #6
 8003310:	4413      	add	r3, r2
 8003312:	3374      	adds	r3, #116	; 0x74
 8003314:	781b      	ldrb	r3, [r3, #0]
  printf("       3. write              = %d\n",
 8003316:	4619      	mov	r1, r3
 8003318:	4831      	ldr	r0, [pc, #196]	; (80033e0 <Print_Characteristic_Info+0x310>)
 800331a:	f008 fd23 	bl	800bd64 <iprintf>
  printf("       4. notify             = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].notify);
 800331e:	79fa      	ldrb	r2, [r7, #7]
 8003320:	4926      	ldr	r1, [pc, #152]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	440b      	add	r3, r1
 800332c:	3330      	adds	r3, #48	; 0x30
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	79bb      	ldrb	r3, [r7, #6]
 8003332:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	441a      	add	r2, r3
 800333c:	797b      	ldrb	r3, [r7, #5]
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	4413      	add	r3, r2
 8003342:	3375      	adds	r3, #117	; 0x75
 8003344:	781b      	ldrb	r3, [r3, #0]
  printf("       4. notify             = %d\n",
 8003346:	4619      	mov	r1, r3
 8003348:	4826      	ldr	r0, [pc, #152]	; (80033e4 <Print_Characteristic_Info+0x314>)
 800334a:	f008 fd0b 	bl	800bd64 <iprintf>
  printf("       5. indicate           = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].indicate);
 800334e:	79fa      	ldrb	r2, [r7, #7]
 8003350:	491a      	ldr	r1, [pc, #104]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	440b      	add	r3, r1
 800335c:	3330      	adds	r3, #48	; 0x30
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	441a      	add	r2, r3
 800336c:	797b      	ldrb	r3, [r7, #5]
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	4413      	add	r3, r2
 8003372:	3376      	adds	r3, #118	; 0x76
 8003374:	781b      	ldrb	r3, [r3, #0]
  printf("       5. indicate           = %d\n",
 8003376:	4619      	mov	r1, r3
 8003378:	481b      	ldr	r0, [pc, #108]	; (80033e8 <Print_Characteristic_Info+0x318>)
 800337a:	f008 fcf3 	bl	800bd64 <iprintf>
  printf("       6. authSignedWrite    = %d\n",
         saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].auth_signed_write);
 800337e:	79fa      	ldrb	r2, [r7, #7]
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <Print_Characteristic_Info+0x2ec>)
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	440b      	add	r3, r1
 800338c:	3330      	adds	r3, #48	; 0x30
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	79bb      	ldrb	r3, [r7, #6]
 8003392:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	441a      	add	r2, r3
 800339c:	797b      	ldrb	r3, [r7, #5]
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	4413      	add	r3, r2
 80033a2:	3377      	adds	r3, #119	; 0x77
 80033a4:	781b      	ldrb	r3, [r3, #0]
  printf("       6. authSignedWrite    = %d\n",
 80033a6:	4619      	mov	r1, r3
 80033a8:	4810      	ldr	r0, [pc, #64]	; (80033ec <Print_Characteristic_Info+0x31c>)
 80033aa:	f008 fcdb 	bl	800bd64 <iprintf>

  printf(ANSI_COLOR_RESET);    /* reset previous color for log print */
 80033ae:	4810      	ldr	r0, [pc, #64]	; (80033f0 <Print_Characteristic_Info+0x320>)
 80033b0:	f008 fcd8 	bl	800bd64 <iprintf>

}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000230 	.word	0x20000230
 80033c0:	0800d804 	.word	0x0800d804
 80033c4:	0800d810 	.word	0x0800d810
 80033c8:	0800d7d0 	.word	0x0800d7d0
 80033cc:	0800d820 	.word	0x0800d820
 80033d0:	0800d848 	.word	0x0800d848
 80033d4:	0800d870 	.word	0x0800d870
 80033d8:	0800d894 	.word	0x0800d894
 80033dc:	0800d8b8 	.word	0x0800d8b8
 80033e0:	0800d8dc 	.word	0x0800d8dc
 80033e4:	0800d900 	.word	0x0800d900
 80033e8:	0800d924 	.word	0x0800d924
 80033ec:	0800d948 	.word	0x0800d948
 80033f0:	0800d0f8 	.word	0x0800d0f8

080033f4 <Print_HRF_Value>:
 * @param  The data length
 * @param  The received data
 * @retval None
 */
void Print_HRF_Value(uint8_t data_length, uint8_t* value)
{
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	b0a5      	sub	sp, #148	; 0x94
 80033f8:	af06      	add	r7, sp, #24
 80033fa:	4603      	mov	r3, r0
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint16_t tmp_ui16 = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  uint32_t tmp_ui32 = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	673b      	str	r3, [r7, #112]	; 0x70
  uint8_t  dev_idx  = saved_devices.dev_idx;
 800340a:	4bd0      	ldr	r3, [pc, #832]	; (800374c <Print_HRF_Value+0x358>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t  serv_idx = saved_devices.dev_info[dev_idx].serv_idx;
 8003412:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003416:	49cd      	ldr	r1, [pc, #820]	; (800374c <Print_HRF_Value+0x358>)
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	440b      	add	r3, r1
 8003422:	332e      	adds	r3, #46	; 0x2e
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  uint8_t  char_idx = saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_idx;
 800342a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800342e:	49c7      	ldr	r1, [pc, #796]	; (800374c <Print_HRF_Value+0x358>)
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	440b      	add	r3, r1
 800343a:	3330      	adds	r3, #48	; 0x30
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003442:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003450:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type != NO_SERVICE_TYPE) &&
 8003454:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003458:	49bc      	ldr	r1, [pc, #752]	; (800374c <Print_HRF_Value+0x358>)
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	440b      	add	r3, r1
 8003464:	3330      	adds	r3, #48	; 0x30
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800346c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8412 	beq.w	8003ca4 <Print_HRF_Value+0x8b0>
      (saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type != CUSTOM_SERVICE_TYPE))
 8003480:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003484:	49b1      	ldr	r1, [pc, #708]	; (800374c <Print_HRF_Value+0x358>)
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	3330      	adds	r3, #48	; 0x30
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003498:	f240 21ba 	movw	r1, #698	; 0x2ba
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].serv_type != NO_SERVICE_TYPE) &&
 80034a6:	2b07      	cmp	r3, #7
 80034a8:	f000 83fc 	beq.w	8003ca4 <Print_HRF_Value+0x8b0>
  {
    if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].char_type != NO_CHARACTERISTIC_TYPE) &&
 80034ac:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80034b0:	49a6      	ldr	r1, [pc, #664]	; (800374c <Print_HRF_Value+0x358>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	440b      	add	r3, r1
 80034bc:	3330      	adds	r3, #48	; 0x30
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80034c4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	441a      	add	r2, r3
 80034ce:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80034d2:	019b      	lsls	r3, r3, #6
 80034d4:	4413      	add	r3, r2
 80034d6:	3378      	adds	r3, #120	; 0x78
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 83e2 	beq.w	8003ca4 <Print_HRF_Value+0x8b0>
        (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].char_type != CUSTOM_CHAR_TYPE))
 80034e0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80034e4:	4999      	ldr	r1, [pc, #612]	; (800374c <Print_HRF_Value+0x358>)
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	440b      	add	r3, r1
 80034f0:	3330      	adds	r3, #48	; 0x30
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80034f8:	f240 21ba 	movw	r1, #698	; 0x2ba
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	441a      	add	r2, r3
 8003502:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	4413      	add	r3, r2
 800350a:	3378      	adds	r3, #120	; 0x78
 800350c:	781b      	ldrb	r3, [r3, #0]
    if ((saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].char_type != NO_CHARACTERISTIC_TYPE) &&
 800350e:	2b16      	cmp	r3, #22
 8003510:	f000 83c8 	beq.w	8003ca4 <Print_HRF_Value+0x8b0>
    {
      printf(" Value (HRF): ");
 8003514:	488e      	ldr	r0, [pc, #568]	; (8003750 <Print_HRF_Value+0x35c>)
 8003516:	f008 fc25 	bl	800bd64 <iprintf>
      /* Timestamp */
      printf("TStamp %05d ", Get_Timestamp(data_length, value));
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f89d 	bl	800465e <Get_Timestamp>
 8003524:	4603      	mov	r3, r0
 8003526:	4619      	mov	r1, r3
 8003528:	488a      	ldr	r0, [pc, #552]	; (8003754 <Print_HRF_Value+0x360>)
 800352a:	f008 fc1b 	bl	800bd64 <iprintf>

      switch (saved_devices.dev_info[dev_idx].serv_info[serv_idx].char_info[char_idx].char_type)
 800352e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003532:	4986      	ldr	r1, [pc, #536]	; (800374c <Print_HRF_Value+0x358>)
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	440b      	add	r3, r1
 800353e:	3330      	adds	r3, #48	; 0x30
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003546:	f240 21ba 	movw	r1, #698	; 0x2ba
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	441a      	add	r2, r3
 8003550:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	4413      	add	r3, r2
 8003558:	3378      	adds	r3, #120	; 0x78
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	2b12      	cmp	r3, #18
 8003560:	f200 839b 	bhi.w	8003c9a <Print_HRF_Value+0x8a6>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <Print_HRF_Value+0x178>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035b9 	.word	0x080035b9
 8003570:	08003711 	.word	0x08003711
 8003574:	08003775 	.word	0x08003775
 8003578:	080037b9 	.word	0x080037b9
 800357c:	080037ff 	.word	0x080037ff
 8003580:	08003839 	.word	0x08003839
 8003584:	08003861 	.word	0x08003861
 8003588:	08003869 	.word	0x08003869
 800358c:	08003883 	.word	0x08003883
 8003590:	08003899 	.word	0x08003899
 8003594:	080038af 	.word	0x080038af
 8003598:	080038c5 	.word	0x080038c5
 800359c:	08003aa5 	.word	0x08003aa5
 80035a0:	08003bb5 	.word	0x08003bb5
 80035a4:	08003bf7 	.word	0x08003bf7
 80035a8:	08003c11 	.word	0x08003c11
 80035ac:	08003c2b 	.word	0x08003c2b
 80035b0:	08003c45 	.word	0x08003c45
 80035b4:	08003c81 	.word	0x08003c81
      {
      case (ST_ENVIRONMENTAL_CHAR_TYPE):
        /* Pressure */
        tmp_ui32 = Get_Pressure(data_length, value);
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f86b 	bl	8004698 <Get_Pressure>
 80035c2:	6738      	str	r0, [r7, #112]	; 0x70
        printf("Press[mBar] %d.%d ", (uint16_t)(tmp_ui32/100), (uint16_t)(tmp_ui32%100));
 80035c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c6:	4a64      	ldr	r2, [pc, #400]	; (8003758 <Print_HRF_Value+0x364>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80035d4:	4b60      	ldr	r3, [pc, #384]	; (8003758 <Print_HRF_Value+0x364>)
 80035d6:	fba3 1302 	umull	r1, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2164      	movs	r1, #100	; 0x64
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	4601      	mov	r1, r0
 80035ea:	485c      	ldr	r0, [pc, #368]	; (800375c <Print_HRF_Value+0x368>)
 80035ec:	f008 fbba 	bl	800bd64 <iprintf>
        if (data_length == ENV_DATA_LEN_LONG) {
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d165      	bne.n	80036c2 <Print_HRF_Value+0x2ce>
          /* Humidity */
          tmp_ui16 = Get_Humidity(data_length, value);
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f877 	bl	80046ee <Get_Humidity>
 8003600:	4603      	mov	r3, r0
 8003602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
          printf("Hum[%c] %d.%d ", '%', tmp_ui16/10, tmp_ui16%10);
 8003606:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800360a:	4a55      	ldr	r2, [pc, #340]	; (8003760 <Print_HRF_Value+0x36c>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	08db      	lsrs	r3, r3, #3
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <Print_HRF_Value+0x36c>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	08d9      	lsrs	r1, r3, #3
 8003622:	460b      	mov	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	4602      	mov	r2, r0
 8003630:	2125      	movs	r1, #37	; 0x25
 8003632:	484c      	ldr	r0, [pc, #304]	; (8003764 <Print_HRF_Value+0x370>)
 8003634:	f008 fb96 	bl	800bd64 <iprintf>
          /* Temperature 2 */
          tmp_ui16 = Get_Temperature(data_length, value, 2);
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2202      	movs	r2, #2
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f001 f885 	bl	800474e <Get_Temperature>
 8003644:	4603      	mov	r3, r0
 8003646:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
          printf("Temp2[C] %d.%d ", tmp_ui16/10, tmp_ui16%10);
 800364a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800364e:	4a44      	ldr	r2, [pc, #272]	; (8003760 <Print_HRF_Value+0x36c>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	b29b      	uxth	r3, r3
 8003658:	4618      	mov	r0, r3
 800365a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <Print_HRF_Value+0x36c>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	08d9      	lsrs	r1, r3, #3
 8003666:	460b      	mov	r3, r1
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	4601      	mov	r1, r0
 8003676:	483c      	ldr	r0, [pc, #240]	; (8003768 <Print_HRF_Value+0x374>)
 8003678:	f008 fb74 	bl	800bd64 <iprintf>
          /* Temperature 1 */
          tmp_ui16 = Get_Temperature(data_length, value, 1);
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2201      	movs	r2, #1
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f863 	bl	800474e <Get_Temperature>
 8003688:	4603      	mov	r3, r0
 800368a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
          printf("Temp1[C] %d.%d \r\n", tmp_ui16/10, tmp_ui16%10);
 800368e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003692:	4a33      	ldr	r2, [pc, #204]	; (8003760 <Print_HRF_Value+0x36c>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	b29b      	uxth	r3, r3
 800369c:	4618      	mov	r0, r3
 800369e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <Print_HRF_Value+0x36c>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	08d9      	lsrs	r1, r3, #3
 80036aa:	460b      	mov	r3, r1
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	4601      	mov	r1, r0
 80036ba:	482c      	ldr	r0, [pc, #176]	; (800376c <Print_HRF_Value+0x378>)
 80036bc:	f008 fb52 	bl	800bd64 <iprintf>
        else if (data_length == ENV_DATA_LEN_SHORT) {
          /* Temperature 1 */
          tmp_ui16 = Get_Temperature(data_length, value, 1);
          printf("Temp1[C] %d.%d \r\n", tmp_ui16/10, tmp_ui16%10);
        }
        break;
 80036c0:	e2ef      	b.n	8003ca2 <Print_HRF_Value+0x8ae>
        else if (data_length == ENV_DATA_LEN_SHORT) {
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	f040 82ec 	bne.w	8003ca2 <Print_HRF_Value+0x8ae>
          tmp_ui16 = Get_Temperature(data_length, value, 1);
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2201      	movs	r2, #1
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f83c 	bl	800474e <Get_Temperature>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
          printf("Temp1[C] %d.%d \r\n", tmp_ui16/10, tmp_ui16%10);
 80036dc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <Print_HRF_Value+0x36c>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	08db      	lsrs	r3, r3, #3
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <Print_HRF_Value+0x36c>)
 80036f2:	fba3 1302 	umull	r1, r3, r3, r2
 80036f6:	08d9      	lsrs	r1, r3, #3
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4601      	mov	r1, r0
 8003708:	4818      	ldr	r0, [pc, #96]	; (800376c <Print_HRF_Value+0x378>)
 800370a:	f008 fb2b 	bl	800bd64 <iprintf>
        break;
 800370e:	e2c8      	b.n	8003ca2 <Print_HRF_Value+0x8ae>
      case (ST_PRESSURE_CHAR_TYPE):
        /* Pressure */
        tmp_ui32 = Get_Pressure(data_length, value);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 ffbf 	bl	8004698 <Get_Pressure>
 800371a:	6738      	str	r0, [r7, #112]	; 0x70
        printf("Press[mBar] %d.%d \r\n", (uint16_t)(tmp_ui32/100), (uint16_t)(tmp_ui32%100));
 800371c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800371e:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <Print_HRF_Value+0x364>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b29b      	uxth	r3, r3
 8003728:	4618      	mov	r0, r3
 800372a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <Print_HRF_Value+0x364>)
 800372e:	fba3 1302 	umull	r1, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2164      	movs	r1, #100	; 0x64
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4601      	mov	r1, r0
 8003742:	480b      	ldr	r0, [pc, #44]	; (8003770 <Print_HRF_Value+0x37c>)
 8003744:	f008 fb0e 	bl	800bd64 <iprintf>
        break;
 8003748:	e2ac      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
 800374a:	bf00      	nop
 800374c:	20000230 	.word	0x20000230
 8003750:	0800d96c 	.word	0x0800d96c
 8003754:	0800d97c 	.word	0x0800d97c
 8003758:	51eb851f 	.word	0x51eb851f
 800375c:	0800d98c 	.word	0x0800d98c
 8003760:	cccccccd 	.word	0xcccccccd
 8003764:	0800d9a0 	.word	0x0800d9a0
 8003768:	0800d9b0 	.word	0x0800d9b0
 800376c:	0800d9c0 	.word	0x0800d9c0
 8003770:	0800d9d4 	.word	0x0800d9d4
      case (ST_HUMIDITY_CHAR_TYPE):
        /* Humidity */
        tmp_ui16 = Get_Humidity(data_length, value);
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 ffb8 	bl	80046ee <Get_Humidity>
 800377e:	4603      	mov	r3, r0
 8003780:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        printf("Hum[%c] %d.%d \r\n", '%', tmp_ui16/10, tmp_ui16%10);
 8003784:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003788:	4ab0      	ldr	r2, [pc, #704]	; (8003a4c <Print_HRF_Value+0x658>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	b29b      	uxth	r3, r3
 8003792:	4618      	mov	r0, r3
 8003794:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003798:	4bac      	ldr	r3, [pc, #688]	; (8003a4c <Print_HRF_Value+0x658>)
 800379a:	fba3 1302 	umull	r1, r3, r3, r2
 800379e:	08d9      	lsrs	r1, r3, #3
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4602      	mov	r2, r0
 80037ae:	2125      	movs	r1, #37	; 0x25
 80037b0:	48a7      	ldr	r0, [pc, #668]	; (8003a50 <Print_HRF_Value+0x65c>)
 80037b2:	f008 fad7 	bl	800bd64 <iprintf>
        break;
 80037b6:	e275      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_TEMPERATURE_CHAR_TYPE):
        /* Temperature 1 */
        tmp_ui16 = Get_Temperature(data_length, value, 1);
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2201      	movs	r2, #1
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 ffc5 	bl	800474e <Get_Temperature>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        printf("Temp1[C] %d.%d \r\n", tmp_ui16/10, tmp_ui16%10);
 80037ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80037ce:	4a9f      	ldr	r2, [pc, #636]	; (8003a4c <Print_HRF_Value+0x658>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	4618      	mov	r0, r3
 80037da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80037de:	4b9b      	ldr	r3, [pc, #620]	; (8003a4c <Print_HRF_Value+0x658>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	08d9      	lsrs	r1, r3, #3
 80037e6:	460b      	mov	r3, r1
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	4601      	mov	r1, r0
 80037f6:	4897      	ldr	r0, [pc, #604]	; (8003a54 <Print_HRF_Value+0x660>)
 80037f8:	f008 fab4 	bl	800bd64 <iprintf>
        break;
 80037fc:	e252      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_CO_CHAR_TYPE):
        /* CO */
        tmp_ui32 = Get_CO(data_length, value);
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fffb 	bl	80047fe <Get_CO>
 8003808:	6738      	str	r0, [r7, #112]	; 0x70
        printf("CO[%c] %d.%d", '%', (uint16_t)(tmp_ui32/100), (uint16_t)(tmp_ui32%100));
 800380a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380c:	4a92      	ldr	r2, [pc, #584]	; (8003a58 <Print_HRF_Value+0x664>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800381a:	4b8f      	ldr	r3, [pc, #572]	; (8003a58 <Print_HRF_Value+0x664>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	; 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	4602      	mov	r2, r0
 800382e:	2125      	movs	r1, #37	; 0x25
 8003830:	488a      	ldr	r0, [pc, #552]	; (8003a5c <Print_HRF_Value+0x668>)
 8003832:	f008 fa97 	bl	800bd64 <iprintf>
        break;
 8003836:	e235      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_LED_CHAR_TYPE):
        {
          /* LED status (0=OFF, 1=ON) */
          uint8_t tmp_ui8 = Get_LED_Status(data_length, value);
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f803 	bl	8004848 <Get_LED_Status>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
          printf("LED %s \r\n", ((tmp_ui8 == 0) ? "OFF" : "ON"));
 8003848:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <Print_HRF_Value+0x460>
 8003850:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <Print_HRF_Value+0x66c>)
 8003852:	e000      	b.n	8003856 <Print_HRF_Value+0x462>
 8003854:	4b83      	ldr	r3, [pc, #524]	; (8003a64 <Print_HRF_Value+0x670>)
 8003856:	4619      	mov	r1, r3
 8003858:	4883      	ldr	r0, [pc, #524]	; (8003a68 <Print_HRF_Value+0x674>)
 800385a:	f008 fa83 	bl	800bd64 <iprintf>
        }
        break;
 800385e:	e221      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_CONFIG_CHAR_TYPE):
        printf(" HRF not supported! \r\n");
 8003860:	4882      	ldr	r0, [pc, #520]	; (8003a6c <Print_HRF_Value+0x678>)
 8003862:	f008 faed 	bl	800be40 <puts>
        break;
 8003866:	e21d      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_ACC_EVENT_CHAR_TYPE):
        printf(" Acc. Event: %s \r\n", Get_Acc_Event(data_length, value).type_name);
 8003868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800386c:	7bf9      	ldrb	r1, [r7, #15]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ffff 	bl	8004874 <Get_Acc_Event>
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	4619      	mov	r1, r3
 800387a:	487d      	ldr	r0, [pc, #500]	; (8003a70 <Print_HRF_Value+0x67c>)
 800387c:	f008 fa72 	bl	800bd64 <iprintf>
      break;
 8003880:	e210      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_MIC_EVENT_CHAR_TYPE):
        /* Microphone [db] */
        printf("Mic[db] %d \r\n", Get_Mic_Audio_Level(data_length, value));
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f001 f900 	bl	8004a8c <Get_Mic_Audio_Level>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	4878      	ldr	r0, [pc, #480]	; (8003a74 <Print_HRF_Value+0x680>)
 8003892:	f008 fa67 	bl	800bd64 <iprintf>
        break;
 8003896:	e205      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_PROXIMITY_CHAR_TYPE):
        /* Proximity [mm] */
        printf("PRX[mm] %d \r\n", Get_Proximity(data_length, value));
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f90a 	bl	8004ab6 <Get_Proximity>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4619      	mov	r1, r3
 80038a6:	4874      	ldr	r0, [pc, #464]	; (8003a78 <Print_HRF_Value+0x684>)
 80038a8:	f008 fa5c 	bl	800bd64 <iprintf>
        break;
 80038ac:	e1fa      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_LUX_CHAR_TYPE):
        /* Brightness */
        printf("LUX %d \r\n", Get_Lux_Level(data_length, value));
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f934 	bl	8004b20 <Get_Lux_Level>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4619      	mov	r1, r3
 80038bc:	486f      	ldr	r0, [pc, #444]	; (8003a7c <Print_HRF_Value+0x688>)
 80038be:	f008 fa51 	bl	800bd64 <iprintf>
        break;
 80038c2:	e1ef      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_ACC_GYRO_MAG_CHAR_TYPE):
        {
          motionData_t motion = Get_Motion_Data(data_length, value);
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	7bf9      	ldrb	r1, [r7, #15]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fa61 	bl	8004d94 <Get_Motion_Data>
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
                 (motion.acc.x.is_neg == 1) ? "-" : "", motion.acc.x.val,
 80038d2:	7cbb      	ldrb	r3, [r7, #18]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <Print_HRF_Value+0x4e8>
 80038d8:	4969      	ldr	r1, [pc, #420]	; (8003a80 <Print_HRF_Value+0x68c>)
 80038da:	e000      	b.n	80038de <Print_HRF_Value+0x4ea>
 80038dc:	4969      	ldr	r1, [pc, #420]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.acc.x.is_neg == 1) ? "-" : "", motion.acc.x.val,
 80038de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 80038e2:	461d      	mov	r5, r3
                 (motion.acc.y.is_neg == 1) ? "-" : "", motion.acc.y.val,
 80038e4:	7dbb      	ldrb	r3, [r7, #22]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <Print_HRF_Value+0x4fa>
 80038ea:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <Print_HRF_Value+0x68c>)
 80038ec:	e000      	b.n	80038f0 <Print_HRF_Value+0x4fc>
 80038ee:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.acc.y.is_neg == 1) ? "-" : "", motion.acc.y.val,
 80038f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 80038f4:	4618      	mov	r0, r3
                 (motion.acc.z.is_neg == 1) ? "-" : "", motion.acc.z.val);
 80038f6:	7ebb      	ldrb	r3, [r7, #26]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <Print_HRF_Value+0x50c>
 80038fc:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <Print_HRF_Value+0x68c>)
 80038fe:	e000      	b.n	8003902 <Print_HRF_Value+0x50e>
 8003900:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.acc.z.is_neg == 1) ? "-" : "", motion.acc.z.val);
 8003902:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
          printf("ACC[mg]  X %s%d Y %s%d Z %s%d ",
 8003906:	9402      	str	r4, [sp, #8]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	462a      	mov	r2, r5
 8003910:	485d      	ldr	r0, [pc, #372]	; (8003a88 <Print_HRF_Value+0x694>)
 8003912:	f008 fa27 	bl	800bd64 <iprintf>
          printf("\n                           GYR[dps] ");
 8003916:	485d      	ldr	r0, [pc, #372]	; (8003a8c <Print_HRF_Value+0x698>)
 8003918:	f008 fa24 	bl	800bd64 <iprintf>
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
                 (motion.gyr.x.is_neg == 1) ? "-" : "", motion.gyr.x.val/10, motion.gyr.x.val%10,
 800391c:	7fbb      	ldrb	r3, [r7, #30]
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <Print_HRF_Value+0x532>
 8003922:	4d57      	ldr	r5, [pc, #348]	; (8003a80 <Print_HRF_Value+0x68c>)
 8003924:	e000      	b.n	8003928 <Print_HRF_Value+0x534>
 8003926:	4d57      	ldr	r5, [pc, #348]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.gyr.x.is_neg == 1) ? "-" : "", motion.gyr.x.val/10, motion.gyr.x.val%10,
 8003928:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <Print_HRF_Value+0x69c>)
 800392e:	fb82 1203 	smull	r1, r2, r2, r3
 8003932:	1092      	asrs	r2, r2, #2
 8003934:	17db      	asrs	r3, r3, #31
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	b21b      	sxth	r3, r3
 800393a:	469c      	mov	ip, r3
                 (motion.gyr.x.is_neg == 1) ? "-" : "", motion.gyr.x.val/10, motion.gyr.x.val%10,
 800393c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <Print_HRF_Value+0x69c>)
 8003942:	fb83 1302 	smull	r1, r3, r3, r2
 8003946:	1099      	asrs	r1, r3, #2
 8003948:	17d3      	asrs	r3, r2, #31
 800394a:	1ac9      	subs	r1, r1, r3
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	b21b      	sxth	r3, r3
 8003958:	469e      	mov	lr, r3
                 (motion.gyr.y.is_neg == 1) ? "-" : "", motion.gyr.y.val/10, motion.gyr.y.val%10,
 800395a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <Print_HRF_Value+0x572>
 8003962:	4847      	ldr	r0, [pc, #284]	; (8003a80 <Print_HRF_Value+0x68c>)
 8003964:	e000      	b.n	8003968 <Print_HRF_Value+0x574>
 8003966:	4847      	ldr	r0, [pc, #284]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.gyr.y.is_neg == 1) ? "-" : "", motion.gyr.y.val/10, motion.gyr.y.val%10,
 8003968:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 800396c:	4a48      	ldr	r2, [pc, #288]	; (8003a90 <Print_HRF_Value+0x69c>)
 800396e:	fb82 1203 	smull	r1, r2, r2, r3
 8003972:	1092      	asrs	r2, r2, #2
 8003974:	17db      	asrs	r3, r3, #31
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	b21b      	sxth	r3, r3
 800397a:	461e      	mov	r6, r3
                 (motion.gyr.y.is_neg == 1) ? "-" : "", motion.gyr.y.val/10, motion.gyr.y.val%10,
 800397c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 8003980:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <Print_HRF_Value+0x69c>)
 8003982:	fb83 1302 	smull	r1, r3, r3, r2
 8003986:	1099      	asrs	r1, r3, #2
 8003988:	17d3      	asrs	r3, r2, #31
 800398a:	1ac9      	subs	r1, r1, r3
 800398c:	460b      	mov	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	b21b      	sxth	r3, r3
 8003998:	607b      	str	r3, [r7, #4]
                 (motion.gyr.z.is_neg == 1) ? "-" : "", motion.gyr.z.val/10, motion.gyr.z.val%10);
 800399a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <Print_HRF_Value+0x5b2>
 80039a2:	4c37      	ldr	r4, [pc, #220]	; (8003a80 <Print_HRF_Value+0x68c>)
 80039a4:	e000      	b.n	80039a8 <Print_HRF_Value+0x5b4>
 80039a6:	4c37      	ldr	r4, [pc, #220]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.gyr.z.is_neg == 1) ? "-" : "", motion.gyr.z.val/10, motion.gyr.z.val%10);
 80039a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 80039ac:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <Print_HRF_Value+0x69c>)
 80039ae:	fb82 1203 	smull	r1, r2, r2, r3
 80039b2:	1092      	asrs	r2, r2, #2
 80039b4:	17db      	asrs	r3, r3, #31
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	603b      	str	r3, [r7, #0]
                 (motion.gyr.z.is_neg == 1) ? "-" : "", motion.gyr.z.val/10, motion.gyr.z.val%10);
 80039bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
          printf("X %s%d.%d Y %s%d.%d Z %s%d.%d ",
 80039c0:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <Print_HRF_Value+0x69c>)
 80039c2:	fb83 1302 	smull	r1, r3, r3, r2
 80039c6:	1099      	asrs	r1, r3, #2
 80039c8:	17d3      	asrs	r3, r2, #31
 80039ca:	1ac9      	subs	r1, r1, r3
 80039cc:	460b      	mov	r3, r1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	9305      	str	r3, [sp, #20]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	9403      	str	r4, [sp, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	9601      	str	r6, [sp, #4]
 80039e6:	9000      	str	r0, [sp, #0]
 80039e8:	4673      	mov	r3, lr
 80039ea:	4662      	mov	r2, ip
 80039ec:	4629      	mov	r1, r5
 80039ee:	4829      	ldr	r0, [pc, #164]	; (8003a94 <Print_HRF_Value+0x6a0>)
 80039f0:	f008 f9b8 	bl	800bd64 <iprintf>
          printf("\n                           MAG[mGa] ");
 80039f4:	4828      	ldr	r0, [pc, #160]	; (8003a98 <Print_HRF_Value+0x6a4>)
 80039f6:	f008 f9b5 	bl	800bd64 <iprintf>
          printf("X %s%d Y %s%d Z %s%d ",
                 (motion.mag.x.is_neg == 1) ? "-" : "", motion.mag.x.val,
 80039fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
          printf("X %s%d Y %s%d Z %s%d ",
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <Print_HRF_Value+0x612>
 8003a02:	491f      	ldr	r1, [pc, #124]	; (8003a80 <Print_HRF_Value+0x68c>)
 8003a04:	e000      	b.n	8003a08 <Print_HRF_Value+0x614>
 8003a06:	491f      	ldr	r1, [pc, #124]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.mag.x.is_neg == 1) ? "-" : "", motion.mag.x.val,
 8003a08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
          printf("X %s%d Y %s%d Z %s%d ",
 8003a0c:	461d      	mov	r5, r3
                 (motion.mag.y.is_neg == 1) ? "-" : "", motion.mag.y.val,
 8003a0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
          printf("X %s%d Y %s%d Z %s%d ",
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <Print_HRF_Value+0x626>
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <Print_HRF_Value+0x68c>)
 8003a18:	e000      	b.n	8003a1c <Print_HRF_Value+0x628>
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.mag.y.is_neg == 1) ? "-" : "", motion.mag.y.val,
 8003a1c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
          printf("X %s%d Y %s%d Z %s%d ",
 8003a20:	4618      	mov	r0, r3
                 (motion.mag.z.is_neg == 1) ? "-" : "", motion.mag.z.val);
 8003a22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
          printf("X %s%d Y %s%d Z %s%d ",
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <Print_HRF_Value+0x63a>
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <Print_HRF_Value+0x68c>)
 8003a2c:	e000      	b.n	8003a30 <Print_HRF_Value+0x63c>
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <Print_HRF_Value+0x690>)
                 (motion.mag.z.is_neg == 1) ? "-" : "", motion.mag.z.val);
 8003a30:	f9b7 4030 	ldrsh.w	r4, [r7, #48]	; 0x30
          printf("X %s%d Y %s%d Z %s%d ",
 8003a34:	9402      	str	r4, [sp, #8]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	9000      	str	r0, [sp, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	4817      	ldr	r0, [pc, #92]	; (8003a9c <Print_HRF_Value+0x6a8>)
 8003a40:	f008 f990 	bl	800bd64 <iprintf>
          printf("\r\n");
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <Print_HRF_Value+0x6ac>)
 8003a46:	f008 f9fb 	bl	800be40 <puts>
        }
        break;
 8003a4a:	e12b      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
 8003a4c:	cccccccd 	.word	0xcccccccd
 8003a50:	0800d9ec 	.word	0x0800d9ec
 8003a54:	0800d9c0 	.word	0x0800d9c0
 8003a58:	51eb851f 	.word	0x51eb851f
 8003a5c:	0800da00 	.word	0x0800da00
 8003a60:	0800da10 	.word	0x0800da10
 8003a64:	0800da14 	.word	0x0800da14
 8003a68:	0800da18 	.word	0x0800da18
 8003a6c:	0800da24 	.word	0x0800da24
 8003a70:	0800da3c 	.word	0x0800da3c
 8003a74:	0800da50 	.word	0x0800da50
 8003a78:	0800da60 	.word	0x0800da60
 8003a7c:	0800da70 	.word	0x0800da70
 8003a80:	0800da7c 	.word	0x0800da7c
 8003a84:	0800da80 	.word	0x0800da80
 8003a88:	0800da84 	.word	0x0800da84
 8003a8c:	0800daa4 	.word	0x0800daa4
 8003a90:	66666667 	.word	0x66666667
 8003a94:	0800dacc 	.word	0x0800dacc
 8003a98:	0800daec 	.word	0x0800daec
 8003a9c:	0800db14 	.word	0x0800db14
 8003aa0:	0800d10c 	.word	0x0800d10c
      case (ST_QUATERNIONS_CHAR_TYPE):
        {
          quatData_t quat = Get_Quaternions_Data(data_length, value);
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	7bf9      	ldrb	r1, [r7, #15]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 faaa 	bl	8005006 <Get_Quaternions_Data>
          printf("QUAT1 ");
 8003ab2:	487e      	ldr	r0, [pc, #504]	; (8003cac <Print_HRF_Value+0x8b8>)
 8003ab4:	f008 f956 	bl	800bd64 <iprintf>
          printf("X %s%d Y %s%d Z %s%d ",
                 (quat.q1.x.is_neg == 1) ? "-" : "", quat.q1.x.val,
 8003ab8:	7cbb      	ldrb	r3, [r7, #18]
          printf("X %s%d Y %s%d Z %s%d ",
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <Print_HRF_Value+0x6ce>
 8003abe:	497c      	ldr	r1, [pc, #496]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003ac0:	e000      	b.n	8003ac4 <Print_HRF_Value+0x6d0>
 8003ac2:	497c      	ldr	r1, [pc, #496]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                 (quat.q1.x.is_neg == 1) ? "-" : "", quat.q1.x.val,
 8003ac4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
          printf("X %s%d Y %s%d Z %s%d ",
 8003ac8:	461d      	mov	r5, r3
                 (quat.q1.y.is_neg == 1) ? "-" : "", quat.q1.y.val,
 8003aca:	7dbb      	ldrb	r3, [r7, #22]
          printf("X %s%d Y %s%d Z %s%d ",
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <Print_HRF_Value+0x6e0>
 8003ad0:	4a77      	ldr	r2, [pc, #476]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003ad2:	e000      	b.n	8003ad6 <Print_HRF_Value+0x6e2>
 8003ad4:	4a77      	ldr	r2, [pc, #476]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                 (quat.q1.y.is_neg == 1) ? "-" : "", quat.q1.y.val,
 8003ad6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
          printf("X %s%d Y %s%d Z %s%d ",
 8003ada:	4618      	mov	r0, r3
                 (quat.q1.z.is_neg == 1) ? "-" : "", quat.q1.z.val);
 8003adc:	7ebb      	ldrb	r3, [r7, #26]
          printf("X %s%d Y %s%d Z %s%d ",
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <Print_HRF_Value+0x6f2>
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003ae4:	e000      	b.n	8003ae8 <Print_HRF_Value+0x6f4>
 8003ae6:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                 (quat.q1.z.is_neg == 1) ? "-" : "", quat.q1.z.val);
 8003ae8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
          printf("X %s%d Y %s%d Z %s%d ",
 8003aec:	9402      	str	r4, [sp, #8]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	9000      	str	r0, [sp, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	462a      	mov	r2, r5
 8003af6:	4870      	ldr	r0, [pc, #448]	; (8003cb8 <Print_HRF_Value+0x8c4>)
 8003af8:	f008 f934 	bl	800bd64 <iprintf>
          if ((data_length == QUATERNIONS_2_DATA_LEN) || (data_length == QUATERNIONS_3_DATA_LEN)) {
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b0e      	cmp	r3, #14
 8003b00:	d002      	beq.n	8003b08 <Print_HRF_Value+0x714>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b14      	cmp	r3, #20
 8003b06:	d126      	bne.n	8003b56 <Print_HRF_Value+0x762>
            printf("\n                           QUAT2 ");
 8003b08:	486c      	ldr	r0, [pc, #432]	; (8003cbc <Print_HRF_Value+0x8c8>)
 8003b0a:	f008 f92b 	bl	800bd64 <iprintf>
            printf("X %s%d Y %s%d Z %s%d ",
                   (quat.q2.x.is_neg == 1) ? "-" : "", quat.q2.x.val,
 8003b0e:	7fbb      	ldrb	r3, [r7, #30]
            printf("X %s%d Y %s%d Z %s%d ",
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <Print_HRF_Value+0x724>
 8003b14:	4966      	ldr	r1, [pc, #408]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b16:	e000      	b.n	8003b1a <Print_HRF_Value+0x726>
 8003b18:	4966      	ldr	r1, [pc, #408]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q2.x.is_neg == 1) ? "-" : "", quat.q2.x.val,
 8003b1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
            printf("X %s%d Y %s%d Z %s%d ",
 8003b1e:	461d      	mov	r5, r3
                   (quat.q2.y.is_neg == 1) ? "-" : "", quat.q2.y.val,
 8003b20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
            printf("X %s%d Y %s%d Z %s%d ",
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <Print_HRF_Value+0x738>
 8003b28:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b2a:	e000      	b.n	8003b2e <Print_HRF_Value+0x73a>
 8003b2c:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q2.y.is_neg == 1) ? "-" : "", quat.q2.y.val,
 8003b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
            printf("X %s%d Y %s%d Z %s%d ",
 8003b32:	4618      	mov	r0, r3
                   (quat.q2.z.is_neg == 1) ? "-" : "", quat.q2.z.val);
 8003b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
            printf("X %s%d Y %s%d Z %s%d ",
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <Print_HRF_Value+0x74c>
 8003b3c:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b3e:	e000      	b.n	8003b42 <Print_HRF_Value+0x74e>
 8003b40:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q2.z.is_neg == 1) ? "-" : "", quat.q2.z.val);
 8003b42:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
            printf("X %s%d Y %s%d Z %s%d ",
 8003b46:	9402      	str	r4, [sp, #8]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	9000      	str	r0, [sp, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4859      	ldr	r0, [pc, #356]	; (8003cb8 <Print_HRF_Value+0x8c4>)
 8003b52:	f008 f907 	bl	800bd64 <iprintf>
          }
          if (data_length == QUATERNIONS_3_DATA_LEN) {
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b14      	cmp	r3, #20
 8003b5a:	d127      	bne.n	8003bac <Print_HRF_Value+0x7b8>
            printf("\n                           QUAT3 ");
 8003b5c:	4858      	ldr	r0, [pc, #352]	; (8003cc0 <Print_HRF_Value+0x8cc>)
 8003b5e:	f008 f901 	bl	800bd64 <iprintf>
            printf("X %s%d Y %s%d Z %s%d ",
                   (quat.q3.x.is_neg == 1) ? "-" : "", quat.q3.x.val,
 8003b62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
            printf("X %s%d Y %s%d Z %s%d ",
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <Print_HRF_Value+0x77a>
 8003b6a:	4951      	ldr	r1, [pc, #324]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b6c:	e000      	b.n	8003b70 <Print_HRF_Value+0x77c>
 8003b6e:	4951      	ldr	r1, [pc, #324]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q3.x.is_neg == 1) ? "-" : "", quat.q3.x.val,
 8003b70:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
            printf("X %s%d Y %s%d Z %s%d ",
 8003b74:	461d      	mov	r5, r3
                   (quat.q3.y.is_neg == 1) ? "-" : "", quat.q3.y.val,
 8003b76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
            printf("X %s%d Y %s%d Z %s%d ",
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <Print_HRF_Value+0x78e>
 8003b7e:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b80:	e000      	b.n	8003b84 <Print_HRF_Value+0x790>
 8003b82:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q3.y.is_neg == 1) ? "-" : "", quat.q3.y.val,
 8003b84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
            printf("X %s%d Y %s%d Z %s%d ",
 8003b88:	4618      	mov	r0, r3
                   (quat.q3.z.is_neg == 1) ? "-" : "", quat.q3.z.val);
 8003b8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
            printf("X %s%d Y %s%d Z %s%d ",
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <Print_HRF_Value+0x7a2>
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <Print_HRF_Value+0x8bc>)
 8003b94:	e000      	b.n	8003b98 <Print_HRF_Value+0x7a4>
 8003b96:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <Print_HRF_Value+0x8c0>)
                   (quat.q3.z.is_neg == 1) ? "-" : "", quat.q3.z.val);
 8003b98:	f9b7 4030 	ldrsh.w	r4, [r7, #48]	; 0x30
            printf("X %s%d Y %s%d Z %s%d ",
 8003b9c:	9402      	str	r4, [sp, #8]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	9000      	str	r0, [sp, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	462a      	mov	r2, r5
 8003ba6:	4844      	ldr	r0, [pc, #272]	; (8003cb8 <Print_HRF_Value+0x8c4>)
 8003ba8:	f008 f8dc 	bl	800bd64 <iprintf>
          }
          printf("\r\n");
 8003bac:	4845      	ldr	r0, [pc, #276]	; (8003cc4 <Print_HRF_Value+0x8d0>)
 8003bae:	f008 f947 	bl	800be40 <puts>
        }
        break;
 8003bb2:	e077      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_ECOMPASS_CHAR_TYPE):
        /* E-Compass (angle to Magnetic North in cents of degree [0.00 -> 359,99]) */
        tmp_ui16 = Get_ECompass(data_length, value);
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 ffcf 	bl	8004b5c <Get_ECompass>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        printf("E-Compass[degree]: %d.%d \r\n", tmp_ui16/100, tmp_ui16%100);
 8003bc4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003bc8:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <Print_HRF_Value+0x8d4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003bd8:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <Print_HRF_Value+0x8d4>)
 8003bda:	fba2 1203 	umull	r1, r2, r2, r3
 8003bde:	0952      	lsrs	r2, r2, #5
 8003be0:	2164      	movs	r1, #100	; 0x64
 8003be2:	fb01 f202 	mul.w	r2, r1, r2
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	4601      	mov	r1, r0
 8003bee:	4837      	ldr	r0, [pc, #220]	; (8003ccc <Print_HRF_Value+0x8d8>)
 8003bf0:	f008 f8b8 	bl	800bd64 <iprintf>
        break;
 8003bf4:	e056      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_ACTIVITY_REC_CHAR_TYPE):
        /* Activity Recognition */
        printf("Activity Rec.: %s \r\n", Get_Activity_Recognition(data_length, value).type_name);
 8003bf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bfa:	7bf9      	ldrb	r1, [r7, #15]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 ffca 	bl	8004b98 <Get_Activity_Recognition>
 8003c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c06:	4619      	mov	r1, r3
 8003c08:	4831      	ldr	r0, [pc, #196]	; (8003cd0 <Print_HRF_Value+0x8dc>)
 8003c0a:	f008 f8ab 	bl	800bd64 <iprintf>
        break;
 8003c0e:	e049      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_CARRY_POSITION_REC_CHAR_TYPE):
        /* Carry Position Recognition */
        printf("Carry Pos. Rec.: %s \r\n", Get_Carry_Pos_Recognition(data_length, value).type_name);
 8003c10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c14:	7bf9      	ldrb	r1, [r7, #15]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ffef 	bl	8004bfc <Get_Carry_Pos_Recognition>
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	4619      	mov	r1, r3
 8003c22:	482c      	ldr	r0, [pc, #176]	; (8003cd4 <Print_HRF_Value+0x8e0>)
 8003c24:	f008 f89e 	bl	800bd64 <iprintf>
        break;
 8003c28:	e03c      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_GESTURE_REC_CHAR_TYPE):
        /* Gesture Recognition */
        printf("Gest. Rec.: %s \r\n", Get_Gesture_Recognition(data_length, value).type_name);
 8003c2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c2e:	7bf9      	ldrb	r1, [r7, #15]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 f814 	bl	8004c60 <Get_Gesture_Recognition>
 8003c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4826      	ldr	r0, [pc, #152]	; (8003cd8 <Print_HRF_Value+0x8e4>)
 8003c3e:	f008 f891 	bl	800bd64 <iprintf>
        break;
 8003c42:	e02f      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_ACC_PEDO_CHAR_TYPE):
        /* Pedometer */
        printf("Pedometer: ");
 8003c44:	4825      	ldr	r0, [pc, #148]	; (8003cdc <Print_HRF_Value+0x8e8>)
 8003c46:	f008 f88d 	bl	800bd64 <iprintf>
        printf("steps %d ", (uint16_t)(Get_Pedometer_Info(data_length, value).steps));
 8003c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c4e:	7bf9      	ldrb	r1, [r7, #15]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f866 	bl	8004d24 <Get_Pedometer_Info>
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4820      	ldr	r0, [pc, #128]	; (8003ce0 <Print_HRF_Value+0x8ec>)
 8003c60:	f008 f880 	bl	800bd64 <iprintf>
        printf("steps/min %d \r\n", Get_Pedometer_Info(data_length, value).steps_min);
 8003c64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c68:	7bf9      	ldrb	r1, [r7, #15]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 f859 	bl	8004d24 <Get_Pedometer_Info>
 8003c72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003c76:	4619      	mov	r1, r3
 8003c78:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <Print_HRF_Value+0x8f0>)
 8003c7a:	f008 f873 	bl	800bd64 <iprintf>
        break;
 8003c7e:	e011      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      case (ST_INTENSITY_DET_CHAR_TYPE):
        /* Intensity Detection */
        printf("Int. Det.: %s \r\n", Get_Motion_Intensity(data_length, value).type_name);
 8003c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c84:	7bf9      	ldrb	r1, [r7, #15]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 f817 	bl	8004cbc <Get_Motion_Intensity>
 8003c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c90:	4619      	mov	r1, r3
 8003c92:	4815      	ldr	r0, [pc, #84]	; (8003ce8 <Print_HRF_Value+0x8f4>)
 8003c94:	f008 f866 	bl	800bd64 <iprintf>
        break;
 8003c98:	e004      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
      default:
        printf(" \r\n");
 8003c9a:	4814      	ldr	r0, [pc, #80]	; (8003cec <Print_HRF_Value+0x8f8>)
 8003c9c:	f008 f8d0 	bl	800be40 <puts>
        break;
 8003ca0:	e000      	b.n	8003ca4 <Print_HRF_Value+0x8b0>
        break;
 8003ca2:	bf00      	nop
      }
    }
  }

}
 8003ca4:	bf00      	nop
 8003ca6:	377c      	adds	r7, #124	; 0x7c
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cac:	0800db2c 	.word	0x0800db2c
 8003cb0:	0800da7c 	.word	0x0800da7c
 8003cb4:	0800da80 	.word	0x0800da80
 8003cb8:	0800db14 	.word	0x0800db14
 8003cbc:	0800db34 	.word	0x0800db34
 8003cc0:	0800db58 	.word	0x0800db58
 8003cc4:	0800d10c 	.word	0x0800d10c
 8003cc8:	51eb851f 	.word	0x51eb851f
 8003ccc:	0800db7c 	.word	0x0800db7c
 8003cd0:	0800db98 	.word	0x0800db98
 8003cd4:	0800dbb0 	.word	0x0800dbb0
 8003cd8:	0800dbc8 	.word	0x0800dbc8
 8003cdc:	0800dbdc 	.word	0x0800dbdc
 8003ce0:	0800dbe8 	.word	0x0800dbe8
 8003ce4:	0800dbf4 	.word	0x0800dbf4
 8003ce8:	0800dc04 	.word	0x0800dc04
 8003cec:	0800dc18 	.word	0x0800dc18

08003cf0 <Is_Device_Saved>:
 * @brief  Search for an already saved device
 * @param  address of the device to search for
 * @retval TRUE if the device has been already saved, FALSE otherwise
 */
uint8_t Is_Device_Saved(tBDAddr addr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i=0; i<saved_devices.dev_num; i++) {
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e014      	b.n	8003d28 <Is_Device_Saved+0x38>
    PRINT_DBG("Saved device %d: %02x:%02x:%02x:%02x:%02x:%02x\n", i,
           saved_devices.dev_info[i].bdaddr[5], saved_devices.dev_info[i].bdaddr[4],
           saved_devices.dev_info[i].bdaddr[3], saved_devices.dev_info[i].bdaddr[2],
           saved_devices.dev_info[i].bdaddr[1], saved_devices.dev_info[i].bdaddr[0]);
    if (BLUENRG_memcmp(addr, saved_devices.dev_info[i].bdaddr, sizeof(saved_devices.dev_info[i].bdaddr)) == 0)
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <Is_Device_Saved+0x4c>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3306      	adds	r3, #6
 8003d0e:	2206      	movs	r2, #6
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f008 f974 	bl	800c000 <memcmp>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <Is_Device_Saved+0x32>
    {
      PRINT_DBG("Current device %02x:%02x:%02x:%02x:%02x:%02x already saved at pos %d\n",
                 addr[5], addr[4], addr[3], addr[2], addr[1], addr[0], i);
      return TRUE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e008      	b.n	8003d34 <Is_Device_Saved+0x44>
  for (i=0; i<saved_devices.dev_num; i++) {
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	3301      	adds	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <Is_Device_Saved+0x4c>)
 8003d2a:	789b      	ldrb	r3, [r3, #2]
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3e5      	bcc.n	8003cfe <Is_Device_Saved+0xe>
    }
  }
  PRINT_DBG("Current device %02x:%02x:%02x:%02x:%02x:%02x not yet saved (%d)\n",
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0],i);
  return FALSE;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000230 	.word	0x20000230

08003d40 <Is_Device_Scanned>:
 * @brief  Search for an already scanned device
 * @param  address of the device to search for
 * @retval TRUE if the device has been already scanned, FALSE otherwise
 */
uint8_t Is_Device_Scanned(tBDAddr addr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i=0; i<non_conn_devices.dev_num; i++) {
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e014      	b.n	8003d78 <Is_Device_Scanned+0x38>
    PRINT_DBG("Scanned device %d: %02x:%02x:%02x:%02x:%02x:%02x\n", i,
           non_conn_devices.bdaddr[i][5], non_conn_devices.bdaddr[i][4],
           non_conn_devices.bdaddr[i][3], non_conn_devices.bdaddr[i][2],
           non_conn_devices.bdaddr[i][1], non_conn_devices.bdaddr[i][0]);
    if (BLUENRG_memcmp(addr, non_conn_devices.bdaddr[i], sizeof(non_conn_devices.bdaddr[i])) == 0)
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <Is_Device_Scanned+0x4c>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	2206      	movs	r2, #6
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f008 f94c 	bl	800c000 <memcmp>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <Is_Device_Scanned+0x32>
    {
      PRINT_DBG("Current device %02x:%02x:%02x:%02x:%02x:%02x already scanned (at pos %d in the scanned device array)\n",
                 addr[5], addr[4], addr[3], addr[2], addr[1], addr[0], i);
      return TRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e008      	b.n	8003d84 <Is_Device_Scanned+0x44>
  for (i=0; i<non_conn_devices.dev_num; i++) {
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	3301      	adds	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <Is_Device_Scanned+0x4c>)
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d3e5      	bcc.n	8003d4e <Is_Device_Scanned+0xe>
    }
  }
  PRINT_DBG("Current device %02x:%02x:%02x:%02x:%02x:%02x not yet scanned (%d)\n",
         addr[5], addr[4], addr[3], addr[2], addr[1], addr[0],i);
  return FALSE;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000414 	.word	0x20000414

08003d90 <Get_Index>:
 * @brief  Translate the console input into an integer
 * @param  The console input
 * @retval The integer
 */
uint8_t Get_Index(uint8_t console_ch)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  uint8_t index = TYPED_ERROR_VALUE;
 8003d9a:	230b      	movs	r3, #11
 8003d9c:	73fb      	strb	r3, [r7, #15]

  switch (console_ch)
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	3b30      	subs	r3, #48	; 0x30
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d834      	bhi.n	8003e10 <Get_Index+0x80>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <Get_Index+0x1c>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003e0b 	.word	0x08003e0b
  {
  case ('0'):
    index = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8003dd8:	e01b      	b.n	8003e12 <Get_Index+0x82>
  case ('1'):
    index = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8003dde:	e018      	b.n	8003e12 <Get_Index+0x82>
  case ('2'):
    index = 2;
 8003de0:	2302      	movs	r3, #2
 8003de2:	73fb      	strb	r3, [r7, #15]
    break;
 8003de4:	e015      	b.n	8003e12 <Get_Index+0x82>
  case ('3'):
    index = 3;
 8003de6:	2303      	movs	r3, #3
 8003de8:	73fb      	strb	r3, [r7, #15]
    break;
 8003dea:	e012      	b.n	8003e12 <Get_Index+0x82>
  case ('4'):
    index = 4;
 8003dec:	2304      	movs	r3, #4
 8003dee:	73fb      	strb	r3, [r7, #15]
    break;
 8003df0:	e00f      	b.n	8003e12 <Get_Index+0x82>
  case ('5'):
    index = 5;
 8003df2:	2305      	movs	r3, #5
 8003df4:	73fb      	strb	r3, [r7, #15]
    break;
 8003df6:	e00c      	b.n	8003e12 <Get_Index+0x82>
  case ('6'):
    index = 6;
 8003df8:	2306      	movs	r3, #6
 8003dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8003dfc:	e009      	b.n	8003e12 <Get_Index+0x82>
  case ('7'):
    index = 7;
 8003dfe:	2307      	movs	r3, #7
 8003e00:	73fb      	strb	r3, [r7, #15]
    break;
 8003e02:	e006      	b.n	8003e12 <Get_Index+0x82>
  case ('8'):
    index = 8;
 8003e04:	2308      	movs	r3, #8
 8003e06:	73fb      	strb	r3, [r7, #15]
    break;
 8003e08:	e003      	b.n	8003e12 <Get_Index+0x82>
  case ('9'):
    index = 9;
 8003e0a:	2309      	movs	r3, #9
 8003e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8003e0e:	e000      	b.n	8003e12 <Get_Index+0x82>
  default:
    PRINT_DBG("\r Undefined input!\r\n");
    break;
 8003e10:	bf00      	nop
  }
  return index;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d163      	bne.n	8003efc <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3301      	adds	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e40:	d11e      	bne.n	8003e80 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3302      	adds	r3, #2
 8003e46:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e014      	b.n	8003e78 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	492b      	ldr	r1, [pc, #172]	; (8003f04 <APP_UserEvtRx+0xe4>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d108      	bne.n	8003e72 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <APP_UserEvtRx+0xe4>)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	3201      	adds	r2, #1
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3301      	adds	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	d9e7      	bls.n	8003e4e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8003e7e:	e03d      	b.n	8003efc <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	d11e      	bne.n	8003ec6 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e014      	b.n	8003ebe <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	491b      	ldr	r1, [pc, #108]	; (8003f08 <APP_UserEvtRx+0xe8>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d108      	bne.n	8003eb8 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <APP_UserEvtRx+0xe8>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	3202      	adds	r2, #2
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec2:	d9e7      	bls.n	8003e94 <APP_UserEvtRx+0x74>
}
 8003ec4:	e01a      	b.n	8003efc <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e014      	b.n	8003ef6 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	490e      	ldr	r1, [pc, #56]	; (8003f0c <APP_UserEvtRx+0xec>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d108      	bne.n	8003ef0 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <APP_UserEvtRx+0xec>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	3202      	adds	r2, #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d9e7      	bls.n	8003ecc <APP_UserEvtRx+0xac>
}
 8003efc:	bf00      	nop
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	0800e21c 	.word	0x0800e21c
 8003f08:	0800e26c 	.word	0x0800e26c
 8003f0c:	0800e1e4 	.word	0x0800e1e4

08003f10 <Uart_Receive_Char>:
/** @brief  Receives a character from serial port
 *  @param  None
 *  @retval Character received
 */
int Uart_Receive_Char(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&UartHandle, &ch, 1, HAL_MAX_DELAY);
 8003f16:	1df9      	adds	r1, r7, #7
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	480d      	ldr	r0, [pc, #52]	; (8003f54 <Uart_Receive_Char+0x44>)
 8003f20:	f004 fa66 	bl	80083f0 <HAL_UART_Receive>

  /* Echo character back to console */
  HAL_UART_Transmit(&UartHandle, &ch, 1, HAL_MAX_DELAY);
 8003f24:	1df9      	adds	r1, r7, #7
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4809      	ldr	r0, [pc, #36]	; (8003f54 <Uart_Receive_Char+0x44>)
 8003f2e:	f004 f9cb 	bl	80082c8 <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	2b0d      	cmp	r3, #13
 8003f36:	d108      	bne.n	8003f4a <Uart_Receive_Char+0x3a>
    uint8_t ret = '\n';
 8003f38:	230a      	movs	r3, #10
 8003f3a:	71bb      	strb	r3, [r7, #6]
    HAL_UART_Transmit(&UartHandle, &ret, 1, HAL_MAX_DELAY);
 8003f3c:	1db9      	adds	r1, r7, #6
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	2201      	movs	r2, #1
 8003f44:	4803      	ldr	r0, [pc, #12]	; (8003f54 <Uart_Receive_Char+0x44>)
 8003f46:	f004 f9bf 	bl	80082c8 <HAL_UART_Transmit>
  }

  return ch;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200020a0 	.word	0x200020a0

08003f58 <Uart_Receive_Char_Timeout>:
/** @brief  Receives a character from serial port
 *  @param  Timeout
 *  @retval Character received
 */
int Uart_Receive_Char_Timeout(int timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint8_t ch;
  HAL_UART_Receive(&UartHandle, &ch, 1, timeout);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f107 010f 	add.w	r1, r7, #15
 8003f66:	2201      	movs	r2, #1
 8003f68:	480a      	ldr	r0, [pc, #40]	; (8003f94 <Uart_Receive_Char_Timeout+0x3c>)
 8003f6a:	f004 fa41 	bl	80083f0 <HAL_UART_Receive>

  /* And cope with Windows */
  if(ch == '\r'){
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b0d      	cmp	r3, #13
 8003f72:	d109      	bne.n	8003f88 <Uart_Receive_Char_Timeout+0x30>
    uint8_t ret = '\n';
 8003f74:	230a      	movs	r3, #10
 8003f76:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UartHandle, &ret, 1, HAL_MAX_DELAY);
 8003f78:	f107 010e 	add.w	r1, r7, #14
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	2201      	movs	r2, #1
 8003f82:	4804      	ldr	r0, [pc, #16]	; (8003f94 <Uart_Receive_Char_Timeout+0x3c>)
 8003f84:	f004 f9a0 	bl	80082c8 <HAL_UART_Transmit>
  }

  return ch;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200020a0 	.word	0x200020a0

08003f98 <Main_Menu>:
 * @brief  Print available key options
 * @param  None
 * @retval None
 */
void Main_Menu(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  if ((central_status != SELECT_ANOTHER_CHARACTERISTIC) &&
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <Main_Menu+0xac>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b0e      	cmp	r3, #14
 8003fa2:	d040      	beq.n	8004026 <Main_Menu+0x8e>
      (central_status != RECEIVE_NOTIFICATIONS)) {
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <Main_Menu+0xac>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
  if ((central_status != SELECT_ANOTHER_CHARACTERISTIC) &&
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d03c      	beq.n	8004026 <Main_Menu+0x8e>
    printf("\n * *********************** MENU *********************** *\r\n");
 8003fac:	4826      	ldr	r0, [pc, #152]	; (8004048 <Main_Menu+0xb0>)
 8003fae:	f007 ff47 	bl	800be40 <puts>
    printf(" *                                                      *\r\n");
 8003fb2:	4826      	ldr	r0, [pc, #152]	; (800404c <Main_Menu+0xb4>)
 8003fb4:	f007 ff44 	bl	800be40 <puts>

    switch (central_status)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <Main_Menu+0xac>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b0d      	cmp	r3, #13
 8003fbe:	d015      	beq.n	8003fec <Main_Menu+0x54>
 8003fc0:	2b0d      	cmp	r3, #13
 8003fc2:	dc29      	bgt.n	8004018 <Main_Menu+0x80>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <Main_Menu+0x36>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d004      	beq.n	8003fd6 <Main_Menu+0x3e>
      printf(" *         [D/d] Disable notifications                  *\n");
      printf(" * [P/p]   Print device info                            *\n");
      printf(" * [C/c]   Close connection                             *\n");
      break;
    default:
      break;
 8003fcc:	e024      	b.n	8004018 <Main_Menu+0x80>
      printf(" * [S/s]   Scan the network                             *\n");
 8003fce:	4820      	ldr	r0, [pc, #128]	; (8004050 <Main_Menu+0xb8>)
 8003fd0:	f007 ff36 	bl	800be40 <puts>
      break;
 8003fd4:	e021      	b.n	800401a <Main_Menu+0x82>
      printf(" * [S/s]   Scan the network                             *\n");
 8003fd6:	481e      	ldr	r0, [pc, #120]	; (8004050 <Main_Menu+0xb8>)
 8003fd8:	f007 ff32 	bl	800be40 <puts>
             saved_devices.dev_num-1);
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <Main_Menu+0xbc>)
 8003fde:	789b      	ldrb	r3, [r3, #2]
      printf(" * [0 - %d] Connect to a device                          *\n",
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	481c      	ldr	r0, [pc, #112]	; (8004058 <Main_Menu+0xc0>)
 8003fe6:	f007 febd 	bl	800bd64 <iprintf>
      break;
 8003fea:	e016      	b.n	800401a <Main_Menu+0x82>
      printf(" * [x.y.z] Update the characteristic properties         *\n");
 8003fec:	481b      	ldr	r0, [pc, #108]	; (800405c <Main_Menu+0xc4>)
 8003fee:	f007 ff27 	bl	800be40 <puts>
      printf(" *         - x = service index                          *\n");
 8003ff2:	481b      	ldr	r0, [pc, #108]	; (8004060 <Main_Menu+0xc8>)
 8003ff4:	f007 ff24 	bl	800be40 <puts>
      printf(" *         - y = characteristic index                   *\n");
 8003ff8:	481a      	ldr	r0, [pc, #104]	; (8004064 <Main_Menu+0xcc>)
 8003ffa:	f007 ff21 	bl	800be40 <puts>
      printf(" *         - z = characteristic property index          *\n");
 8003ffe:	481a      	ldr	r0, [pc, #104]	; (8004068 <Main_Menu+0xd0>)
 8004000:	f007 ff1e 	bl	800be40 <puts>
      printf(" *         [D/d] Disable notifications                  *\n");
 8004004:	4819      	ldr	r0, [pc, #100]	; (800406c <Main_Menu+0xd4>)
 8004006:	f007 ff1b 	bl	800be40 <puts>
      printf(" * [P/p]   Print device info                            *\n");
 800400a:	4819      	ldr	r0, [pc, #100]	; (8004070 <Main_Menu+0xd8>)
 800400c:	f007 ff18 	bl	800be40 <puts>
      printf(" * [C/c]   Close connection                             *\n");
 8004010:	4818      	ldr	r0, [pc, #96]	; (8004074 <Main_Menu+0xdc>)
 8004012:	f007 ff15 	bl	800be40 <puts>
      break;
 8004016:	e000      	b.n	800401a <Main_Menu+0x82>
      break;
 8004018:	bf00      	nop
    }

    printf(" *                                                      *\r\n");
 800401a:	480c      	ldr	r0, [pc, #48]	; (800404c <Main_Menu+0xb4>)
 800401c:	f007 ff10 	bl	800be40 <puts>
    printf(" * *********************** ---- *********************** *\r\n");
 8004020:	4815      	ldr	r0, [pc, #84]	; (8004078 <Main_Menu+0xe0>)
 8004022:	f007 ff0d 	bl	800be40 <puts>
  }

  if (central_status != RECEIVE_NOTIFICATIONS) {
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <Main_Menu+0xac>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b12      	cmp	r3, #18
 800402c:	d002      	beq.n	8004034 <Main_Menu+0x9c>
    printf("\r\n Type your choice..... ");
 800402e:	4813      	ldr	r0, [pc, #76]	; (800407c <Main_Menu+0xe4>)
 8004030:	f007 fe98 	bl	800bd64 <iprintf>
  }
  fflush(stdout);
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <Main_Menu+0xe8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f007 fdce 	bl	800bbdc <fflush>
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000022d 	.word	0x2000022d
 8004048:	0800dc1c 	.word	0x0800dc1c
 800404c:	0800dc58 	.word	0x0800dc58
 8004050:	0800dc94 	.word	0x0800dc94
 8004054:	20000230 	.word	0x20000230
 8004058:	0800dcd0 	.word	0x0800dcd0
 800405c:	0800dd0c 	.word	0x0800dd0c
 8004060:	0800dd48 	.word	0x0800dd48
 8004064:	0800dd84 	.word	0x0800dd84
 8004068:	0800ddc0 	.word	0x0800ddc0
 800406c:	0800ddfc 	.word	0x0800ddfc
 8004070:	0800de38 	.word	0x0800de38
 8004074:	0800de74 	.word	0x0800de74
 8004078:	0800deb0 	.word	0x0800deb0
 800407c:	0800deec 	.word	0x0800deec
 8004080:	2000020c 	.word	0x2000020c

08004084 <Get_Value>:
 * @brief  Get a string from console
 * @param  The string buffer
 * @retval The string length
 */
uint8_t Get_Value(uint8_t* console_ch)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]

  while (i < MAX_STRING_LENGTH) {
 8004090:	e010      	b.n	80040b4 <Get_Value+0x30>
    console_ch[i] = Uart_Receive_Char();
 8004092:	f7ff ff3d 	bl	8003f10 <Uart_Receive_Char>
 8004096:	4601      	mov	r1, r0
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	b2ca      	uxtb	r2, r1
 80040a0:	701a      	strb	r2, [r3, #0]
    if (console_ch[i] == 0x0D) { /* hex for carriage return */
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b0d      	cmp	r3, #13
 80040ac:	d006      	beq.n	80040bc <Get_Value+0x38>
      break;
    }
    i++;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3301      	adds	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
  while (i < MAX_STRING_LENGTH) {
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b13      	cmp	r3, #19
 80040b8:	d9eb      	bls.n	8004092 <Get_Value+0xe>
 80040ba:	e000      	b.n	80040be <Get_Value+0x3a>
      break;
 80040bc:	bf00      	nop
  }
  return i;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80040cc:	2006      	movs	r0, #6
 80040ce:	f001 fe0e 	bl	8005cee <HAL_NVIC_EnableIRQ>
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80040da:	2006      	movs	r0, #6
 80040dc:	f001 fe15 	bl	8005d0a <HAL_NVIC_DisableIRQ>
}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ec:	4b22      	ldr	r3, [pc, #136]	; (8004178 <HCI_TL_SPI_Init+0x94>)
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <HCI_TL_SPI_Init+0x94>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f8:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HCI_TL_SPI_Init+0x94>)
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004108:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800410c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800411c:	f001 fe6e 	bl	8005dfc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004126:	2301      	movs	r3, #1
 8004128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800413c:	f001 fe5e 	bl	8005dfc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004140:	2302      	movs	r3, #2
 8004142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004144:	2301      	movs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800415a:	f001 fe4f 	bl	8005dfc <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800415e:	2201      	movs	r2, #1
 8004160:	2102      	movs	r1, #2
 8004162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004166:	f002 f8ff 	bl	8006368 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800416a:	f001 fa53 	bl	8005614 <BSP_SPI1_Init>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000

0800417c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8004180:	2101      	movs	r1, #1
 8004182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004186:	f001 ffe3 	bl	8006150 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800418a:	2102      	movs	r1, #2
 800418c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004190:	f001 ffde 	bl	8006150 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8004194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419c:	f001 ffd8 	bl	8006150 <HAL_GPIO_DeInit>
  return 0;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80041aa:	2201      	movs	r2, #1
 80041ac:	2102      	movs	r1, #2
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b2:	f002 f8d9 	bl	8006368 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80041b6:	2200      	movs	r2, #0
 80041b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041c0:	f002 f8d2 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80041c4:	2005      	movs	r0, #5
 80041c6:	f001 fc53 	bl	8005a70 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80041ca:	2201      	movs	r2, #1
 80041cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041d4:	f002 f8c8 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80041d8:	2005      	movs	r0, #5
 80041da:	f001 fc49 	bl	8005a70 <HAL_Delay>
  return 0;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80041f4:	2300      	movs	r3, #0
 80041f6:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80041f8:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <HCI_TL_SPI_Receive+0xe0>)
 80041fa:	f107 0310 	add.w	r3, r7, #16
 80041fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004202:	6018      	str	r0, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8004208:	f7ff ff65 	bl	80040d6 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800420c:	2200      	movs	r2, #0
 800420e:	2102      	movs	r1, #2
 8004210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004214:	f002 f8a8 	bl	8006368 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8004218:	f107 0108 	add.w	r1, r7, #8
 800421c:	f107 0310 	add.w	r3, r7, #16
 8004220:	2205      	movs	r2, #5
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fa26 	bl	8005674 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8004228:	7b3b      	ldrb	r3, [r7, #12]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	b21a      	sxth	r2, r3
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	b21b      	sxth	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	b21b      	sxth	r3, r3
 8004236:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8004238:	8bfb      	ldrh	r3, [r7, #30]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01e      	beq.n	800427c <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800423e:	8bfa      	ldrh	r2, [r7, #30]
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	429a      	cmp	r2, r3
 8004244:	d901      	bls.n	800424a <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800424a:	2300      	movs	r3, #0
 800424c:	777b      	strb	r3, [r7, #29]
 800424e:	e010      	b.n	8004272 <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8004250:	f107 0116 	add.w	r1, r7, #22
 8004254:	f107 0317 	add.w	r3, r7, #23
 8004258:	2201      	movs	r2, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f001 fa0a 	bl	8005674 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8004260:	7f7b      	ldrb	r3, [r7, #29]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	7dba      	ldrb	r2, [r7, #22]
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800426c:	7f7b      	ldrb	r3, [r7, #29]
 800426e:	3301      	adds	r3, #1
 8004270:	777b      	strb	r3, [r7, #29]
 8004272:	7f7b      	ldrb	r3, [r7, #29]
 8004274:	b29b      	uxth	r3, r3
 8004276:	8bfa      	ldrh	r2, [r7, #30]
 8004278:	429a      	cmp	r2, r3
 800427a:	d8e9      	bhi.n	8004250 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800427c:	f001 fbec 	bl	8005a58 <HAL_GetTick>
 8004280:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8004282:	e007      	b.n	8004294 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8004284:	2101      	movs	r1, #1
 8004286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800428a:	f002 f855 	bl	8006338 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8004294:	f001 fbe0 	bl	8005a58 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d3ef      	bcc.n	8004284 <HCI_TL_SPI_Receive+0xa0>
 80042a4:	e000      	b.n	80042a8 <HCI_TL_SPI_Receive+0xc4>
      break;
 80042a6:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80042a8:	f7ff ff0e 	bl	80040c8 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80042ac:	2201      	movs	r2, #1
 80042ae:	2102      	movs	r1, #2
 80042b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042b4:	f002 f858 	bl	8006368 <HAL_GPIO_WritePin>

  return len;
 80042b8:	7f7b      	ldrb	r3, [r7, #29]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	0800df08 	.word	0x0800df08

080042c8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <HCI_TL_SPI_Send+0x114>)
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042de:	6018      	str	r0, [r3, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80042e4:	f001 fbb8 	bl	8005a58 <HAL_GetTick>
 80042e8:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80042ea:	f7ff fef4 	bl	80040d6 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80042ee:	f001 fbb3 	bl	8005a58 <HAL_GetTick>
 80042f2:	61f8      	str	r0, [r7, #28]

    result = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80042f8:	2200      	movs	r2, #0
 80042fa:	2102      	movs	r1, #2
 80042fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004300:	f002 f832 	bl	8006368 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8004304:	e00a      	b.n	800431c <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8004306:	f001 fba7 	bl	8005a58 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	; 0x64
 8004312:	d903      	bls.n	800431c <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8004314:	f06f 0302 	mvn.w	r3, #2
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800431a:	e004      	b.n	8004326 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 800431c:	f000 f862 	bl	80043e4 <IsDataAvailable>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f113 0f03 	cmn.w	r3, #3
 800432c:	d106      	bne.n	800433c <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800432e:	2201      	movs	r2, #1
 8004330:	2102      	movs	r1, #2
 8004332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004336:	f002 f817 	bl	8006368 <HAL_GPIO_WritePin>
      break;
 800433a:	e031      	b.n	80043a0 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800433c:	f107 010c 	add.w	r1, r7, #12
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	2205      	movs	r2, #5
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f994 	bl	8005674 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	b21a      	sxth	r2, r3
 8004352:	7b7b      	ldrb	r3, [r7, #13]
 8004354:	b21b      	sxth	r3, r3
 8004356:	4313      	orrs	r3, r2
 8004358:	b21b      	sxth	r3, r3
 800435a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800435c:	8b7a      	ldrh	r2, [r7, #26]
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	429a      	cmp	r2, r3
 8004362:	d306      	bcc.n	8004372 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8004364:	887b      	ldrh	r3, [r7, #2]
 8004366:	461a      	mov	r2, r3
 8004368:	491d      	ldr	r1, [pc, #116]	; (80043e0 <HCI_TL_SPI_Send+0x118>)
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f982 	bl	8005674 <BSP_SPI1_SendRecv>
 8004370:	e002      	b.n	8004378 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8004372:	f06f 0301 	mvn.w	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004378:	2201      	movs	r2, #1
 800437a:	2102      	movs	r1, #2
 800437c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004380:	f001 fff2 	bl	8006368 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8004384:	f001 fb68 	bl	8005a58 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d903      	bls.n	800439a <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 8004392:	f06f 0302 	mvn.w	r3, #2
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004398:	e002      	b.n	80043a0 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	dba6      	blt.n	80042ee <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80043a0:	f001 fb5a 	bl	8005a58 <HAL_GetTick>
 80043a4:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80043a6:	e007      	b.n	80043b8 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80043a8:	2101      	movs	r1, #1
 80043aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ae:	f001 ffc3 	bl	8006338 <HAL_GPIO_ReadPin>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80043b8:	f001 fb4e 	bl	8005a58 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c6:	d3ef      	bcc.n	80043a8 <HCI_TL_SPI_Send+0xe0>
 80043c8:	e000      	b.n	80043cc <HCI_TL_SPI_Send+0x104>
      break;
 80043ca:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80043cc:	f7ff fe7c 	bl	80040c8 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3728      	adds	r7, #40	; 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	0800df10 	.word	0x0800df10
 80043e0:	20001fa0 	.word	0x20001fa0

080043e4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80043e8:	2101      	movs	r1, #1
 80043ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ee:	f001 ffa3 	bl	8006338 <HAL_GPIO_ReadPin>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
}
 80043fe:	4618      	mov	r0, r3
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <hci_tl_lowlevel_init+0x54>)
 800440c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <hci_tl_lowlevel_init+0x58>)
 8004410:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <hci_tl_lowlevel_init+0x5c>)
 8004414:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <hci_tl_lowlevel_init+0x60>)
 8004418:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <hci_tl_lowlevel_init+0x64>)
 800441c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <hci_tl_lowlevel_init+0x68>)
 8004420:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f007 f863 	bl	800b4f0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800442a:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 800442e:	4810      	ldr	r0, [pc, #64]	; (8004470 <hci_tl_lowlevel_init+0x6c>)
 8004430:	f001 fc9f 	bl	8005d72 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <hci_tl_lowlevel_init+0x70>)
 8004436:	2100      	movs	r1, #0
 8004438:	480d      	ldr	r0, [pc, #52]	; (8004470 <hci_tl_lowlevel_init+0x6c>)
 800443a:	f001 fc80 	bl	8005d3e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	2006      	movs	r0, #6
 8004444:	f001 fc37 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004448:	2006      	movs	r0, #6
 800444a:	f001 fc50 	bl	8005cee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800444e:	bf00      	nop
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	080040e5 	.word	0x080040e5
 800445c:	0800417d 	.word	0x0800417d
 8004460:	080042c9 	.word	0x080042c9
 8004464:	080041e5 	.word	0x080041e5
 8004468:	080041a7 	.word	0x080041a7
 800446c:	080056b5 	.word	0x080056b5
 8004470:	20001f98 	.word	0x20001f98
 8004474:	08004479 	.word	0x08004479

08004478 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800447c:	e005      	b.n	800448a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800447e:	2000      	movs	r0, #0
 8004480:	f007 f99a 	bl	800b7b8 <hci_notify_asynch_evt>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800448a:	f7ff ffab 	bl	80043e4 <IsDataAvailable>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f4      	bne.n	800447e <hci_tl_lowlevel_isr+0x6>
 8004494:	e000      	b.n	8004498 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8004496:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8004498:	bd80      	pop	{r7, pc}

0800449a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800449e:	f001 fa6b 	bl	8005978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044a2:	f000 f807 	bl	80044b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044a6:	f000 f857 	bl	8004558 <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 80044aa:	f7fc f891 	bl	80005d0 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 80044ae:	f7fc f8b7 	bl	8000620 <MX_BlueNRG_2_Process>
 80044b2:	e7fc      	b.n	80044ae <main+0x14>

080044b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b096      	sub	sp, #88	; 0x58
 80044b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	2244      	movs	r2, #68	; 0x44
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f007 fdac 	bl	800c020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044c8:	463b      	mov	r3, r7
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80044d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044da:	f001 ff6b 	bl	80063b4 <HAL_PWREx_ControlVoltageScaling>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80044e4:	f000 f8b6 	bl	8004654 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044e8:	2302      	movs	r3, #2
 80044ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044f2:	2310      	movs	r3, #16
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044f6:	2302      	movs	r3, #2
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044fa:	2302      	movs	r3, #2
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004502:	2308      	movs	r3, #8
 8004504:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004506:	2307      	movs	r3, #7
 8004508:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800450a:	2302      	movs	r3, #2
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800450e:	2302      	movs	r3, #2
 8004510:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4618      	mov	r0, r3
 8004518:	f001 ffa2 	bl	8006460 <HAL_RCC_OscConfig>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004522:	f000 f897 	bl	8004654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004526:	230f      	movs	r3, #15
 8004528:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800452a:	2303      	movs	r3, #3
 800452c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800453a:	463b      	mov	r3, r7
 800453c:	2103      	movs	r1, #3
 800453e:	4618      	mov	r0, r3
 8004540:	f002 fb76 	bl	8006c30 <HAL_RCC_ClockConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800454a:	f000 f883 	bl	8004654 <Error_Handler>
  }
}
 800454e:	bf00      	nop
 8004550:	3758      	adds	r7, #88	; 0x58
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	609a      	str	r2, [r3, #8]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <MX_GPIO_Init+0xf4>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	4a36      	ldr	r2, [pc, #216]	; (800464c <MX_GPIO_Init+0xf4>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800457a:	4b34      	ldr	r3, [pc, #208]	; (800464c <MX_GPIO_Init+0xf4>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004586:	4b31      	ldr	r3, [pc, #196]	; (800464c <MX_GPIO_Init+0xf4>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	4a30      	ldr	r2, [pc, #192]	; (800464c <MX_GPIO_Init+0xf4>)
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004592:	4b2e      	ldr	r3, [pc, #184]	; (800464c <MX_GPIO_Init+0xf4>)
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <MX_GPIO_Init+0xf4>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <MX_GPIO_Init+0xf4>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045aa:	4b28      	ldr	r3, [pc, #160]	; (800464c <MX_GPIO_Init+0xf4>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <MX_GPIO_Init+0xf4>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	4a24      	ldr	r2, [pc, #144]	; (800464c <MX_GPIO_Init+0xf4>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <MX_GPIO_Init+0xf4>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80045ce:	2200      	movs	r2, #0
 80045d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80045d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d8:	f001 fec6 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80045dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80045e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80045e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	4619      	mov	r1, r3
 80045f2:	4817      	ldr	r0, [pc, #92]	; (8004650 <MX_GPIO_Init+0xf8>)
 80045f4:	f001 fc02 	bl	8005dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4619      	mov	r1, r3
 800460c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004610:	f001 fbf4 	bl	8005dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8004614:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461a:	2301      	movs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	4619      	mov	r1, r3
 800462c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004630:	f001 fbe4 	bl	8005dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	2100      	movs	r1, #0
 8004638:	2006      	movs	r0, #6
 800463a:	f001 fb3c 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800463e:	2006      	movs	r0, #6
 8004640:	f001 fb55 	bl	8005cee <HAL_NVIC_EnableIRQ>

}
 8004644:	bf00      	nop
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	48000800 	.word	0x48000800

08004654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004658:	b672      	cpsid	i
}
 800465a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800465c:	e7fe      	b.n	800465c <Error_Handler+0x8>

0800465e <Get_Timestamp>:
 * @param  The data length
 * @param  The received data
 * @retval The timestamp value
 */
uint16_t Get_Timestamp(uint8_t data_length, uint8_t* value)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	6039      	str	r1, [r7, #0]
 8004668:	71fb      	strb	r3, [r7, #7]
  uint16_t timestamp = 0; /* no value */
 800466a:	2300      	movs	r3, #0
 800466c:	81fb      	strh	r3, [r7, #14]

  if (data_length > 1) {
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d90a      	bls.n	800468a <Get_Timestamp+0x2c>
    timestamp = (value[1]<<8) | value[0];
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b21a      	sxth	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b21b      	sxth	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	b21b      	sxth	r3, r3
 8004688:	81fb      	strh	r3, [r7, #14]
  }

  return timestamp;
 800468a:	89fb      	ldrh	r3, [r7, #14]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <Get_Pressure>:
 * @param  The data length
 * @param  The received data
 * @retval The pressure value [mBar]
 */
uint32_t Get_Pressure(uint8_t data_length, uint8_t* value)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
  uint32_t  pressure = 0; /* no value */
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

  if ((data_length == ENV_DATA_LEN_LONG)  ||
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d005      	beq.n	80046ba <Get_Pressure+0x22>
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d002      	beq.n	80046ba <Get_Pressure+0x22>
      (data_length == ENV_DATA_LEN_SHORT) ||
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d112      	bne.n	80046e0 <Get_Pressure+0x48>
      (data_length == PRESS_DATA_LEN))
  {
    pressure = (value[5]<<24) | (value[4]<<16) | (value[3]<<8) | value[2];
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	3305      	adds	r3, #5
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	061a      	lsls	r2, r3, #24
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	3304      	adds	r3, #4
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3303      	adds	r3, #3
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	4313      	orrs	r3, r2
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	3202      	adds	r2, #2
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  return pressure;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <Get_Humidity>:
 * @param  The data length
 * @param  The received data
 * @retval The humidity value [%]
 */
uint16_t Get_Humidity(uint8_t data_length, uint8_t* value)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	71fb      	strb	r3, [r7, #7]
  uint16_t humidity = 0; /* no value */
 80046fa:	2300      	movs	r3, #0
 80046fc:	81fb      	strh	r3, [r7, #14]

  if ((data_length == ENV_DATA_LEN_LONG) || (data_length == ENV_DATA_LEN_SHORT)) {
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d002      	beq.n	800470a <Get_Humidity+0x1c>
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	2b08      	cmp	r3, #8
 8004708:	d10b      	bne.n	8004722 <Get_Humidity+0x34>
    humidity = (value[7]<<8) | value[6];
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	3307      	adds	r3, #7
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	b21a      	sxth	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	3306      	adds	r3, #6
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b21b      	sxth	r3, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	b21b      	sxth	r3, r3
 8004720:	81fb      	strh	r3, [r7, #14]
  }

  if (data_length == HUM_DATA_LEN) {
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d10b      	bne.n	8004740 <Get_Humidity+0x52>
    humidity = (value[3]<<8) | value[2];
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3303      	adds	r3, #3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	b21a      	sxth	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	3302      	adds	r3, #2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b21b      	sxth	r3, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	b21b      	sxth	r3, r3
 800473e:	81fb      	strh	r3, [r7, #14]
  }

  return humidity;
 8004740:	89fb      	ldrh	r3, [r7, #14]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <Get_Temperature>:
 * @param  The received data
 * @param  The sensor from which the data is sent (1 or 2)
 * @retval The temperature value [Celtius degree]
 */
uint16_t Get_Temperature(uint8_t data_length, uint8_t* value, uint8_t sensor)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	6039      	str	r1, [r7, #0]
 8004758:	71fb      	strb	r3, [r7, #7]
 800475a:	4613      	mov	r3, r2
 800475c:	71bb      	strb	r3, [r7, #6]
  uint16_t temperature = 0; /* no value */
 800475e:	2300      	movs	r3, #0
 8004760:	81fb      	strh	r3, [r7, #14]

  switch (data_length)
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	2b0c      	cmp	r3, #12
 8004766:	d006      	beq.n	8004776 <Get_Temperature+0x28>
 8004768:	2b0c      	cmp	r3, #12
 800476a:	dc3e      	bgt.n	80047ea <Get_Temperature+0x9c>
 800476c:	2b04      	cmp	r3, #4
 800476e:	d02f      	beq.n	80047d0 <Get_Temperature+0x82>
 8004770:	2b08      	cmp	r3, #8
 8004772:	d020      	beq.n	80047b6 <Get_Temperature+0x68>
    break;
  case TEMP_DATA_LEN:
    temperature = (value[3]<<8) | value[2];
    break;
  default:
    break;
 8004774:	e039      	b.n	80047ea <Get_Temperature+0x9c>
    if (sensor == 1) {
 8004776:	79bb      	ldrb	r3, [r7, #6]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10c      	bne.n	8004796 <Get_Temperature+0x48>
      temperature = (value[11]<<8) | value[10];
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	330b      	adds	r3, #11
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b21a      	sxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	330a      	adds	r3, #10
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b21b      	sxth	r3, r3
 800478e:	4313      	orrs	r3, r2
 8004790:	b21b      	sxth	r3, r3
 8004792:	81fb      	strh	r3, [r7, #14]
    break;
 8004794:	e02b      	b.n	80047ee <Get_Temperature+0xa0>
    else if (sensor == 2) {
 8004796:	79bb      	ldrb	r3, [r7, #6]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d128      	bne.n	80047ee <Get_Temperature+0xa0>
      temperature = (value[9]<<8) | value[8];
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3309      	adds	r3, #9
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b21b      	sxth	r3, r3
 80047b2:	81fb      	strh	r3, [r7, #14]
    break;
 80047b4:	e01b      	b.n	80047ee <Get_Temperature+0xa0>
    temperature = (value[7]<<8) | value[6];
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3307      	adds	r3, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	b21a      	sxth	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	3306      	adds	r3, #6
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	b21b      	sxth	r3, r3
 80047c8:	4313      	orrs	r3, r2
 80047ca:	b21b      	sxth	r3, r3
 80047cc:	81fb      	strh	r3, [r7, #14]
    break;
 80047ce:	e00f      	b.n	80047f0 <Get_Temperature+0xa2>
    temperature = (value[3]<<8) | value[2];
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3303      	adds	r3, #3
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	b21a      	sxth	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3302      	adds	r3, #2
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b21b      	sxth	r3, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	b21b      	sxth	r3, r3
 80047e6:	81fb      	strh	r3, [r7, #14]
    break;
 80047e8:	e002      	b.n	80047f0 <Get_Temperature+0xa2>
    break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <Get_Temperature+0xa2>
    break;
 80047ee:	bf00      	nop
  }

  return temperature;
 80047f0:	89fb      	ldrh	r3, [r7, #14]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <Get_CO>:
 * @param  The data length
 * @param  The received data
 * @retval The CO value [%]
 */
uint32_t Get_CO(uint8_t data_length, uint8_t* value)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	6039      	str	r1, [r7, #0]
 8004808:	71fb      	strb	r3, [r7, #7]
  uint32_t  co = 0; /* no value */
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]

  if (data_length == CO_DATA_LEN) {
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d112      	bne.n	800483a <Get_CO+0x3c>
    co = (value[5]<<24) | (value[4]<<16) | (value[3]<<8) | value[2];
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	3305      	adds	r3, #5
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	061a      	lsls	r2, r3, #24
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	431a      	orrs	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3303      	adds	r3, #3
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	4313      	orrs	r3, r2
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	3202      	adds	r2, #2
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  return co;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <Get_LED_Status>:
 * @param  The data length
 * @param  The received data
 * @retval The LED status [0=off, 1=on]
 */
uint8_t Get_LED_Status(uint8_t data_length, uint8_t* value)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
  uint8_t  led_status = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  if (data_length == LED_DATA_LEN) {
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d102      	bne.n	8004864 <Get_LED_Status+0x1c>
    led_status = value[2];
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	73fb      	strb	r3, [r7, #15]
  }

  return led_status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <Get_Acc_Event>:
 * @param  The data length
 * @param  The received data
 * @retval The acceleration event type (value, name)
 */
accEvent_t Get_Acc_Event(uint8_t data_length, uint8_t* value)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	460b      	mov	r3, r1
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	72fb      	strb	r3, [r7, #11]
  accEvent_t acc_event;

  acc_event.type_val = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	823b      	strh	r3, [r7, #16]

  if (data_length == ACC_EVENT_DATA_LEN_SHORT) {
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d10d      	bne.n	80048a8 <Get_Acc_Event+0x34>
    acc_event.type_val = (value[3]<<8) | value[2];
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3303      	adds	r3, #3
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	b21a      	sxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3302      	adds	r3, #2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b21b      	sxth	r3, r3
 800489e:	4313      	orrs	r3, r2
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	823b      	strh	r3, [r7, #16]
 80048a6:	e00f      	b.n	80048c8 <Get_Acc_Event+0x54>
  }
  else if (data_length == ACC_EVENT_DATA_LEN_LONG) {
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d10c      	bne.n	80048c8 <Get_Acc_Event+0x54>
    /* in this case value[2] is always 0 (with no meaning) */
    acc_event.type_val = (value[4]<<8) | value[3];
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	b21a      	sxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3303      	adds	r3, #3
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b21b      	sxth	r3, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	823b      	strh	r3, [r7, #16]
  }

  switch (acc_event.type_val)
 80048c8:	8a3b      	ldrh	r3, [r7, #16]
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	f300 808c 	bgt.w	80049e8 <Get_Acc_Event+0x174>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f2c0 80b0 	blt.w	8004a36 <Get_Acc_Event+0x1c2>
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	f200 80ad 	bhi.w	8004a36 <Get_Acc_Event+0x1c2>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <Get_Acc_Event+0x70>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	080049ef 	.word	0x080049ef
 80048e8:	080049f5 	.word	0x080049f5
 80048ec:	080049fb 	.word	0x080049fb
 80048f0:	08004a01 	.word	0x08004a01
 80048f4:	08004a07 	.word	0x08004a07
 80048f8:	08004a0d 	.word	0x08004a0d
 80048fc:	08004a13 	.word	0x08004a13
 8004900:	08004a37 	.word	0x08004a37
 8004904:	08004a19 	.word	0x08004a19
 8004908:	08004a37 	.word	0x08004a37
 800490c:	08004a37 	.word	0x08004a37
 8004910:	08004a37 	.word	0x08004a37
 8004914:	08004a37 	.word	0x08004a37
 8004918:	08004a37 	.word	0x08004a37
 800491c:	08004a37 	.word	0x08004a37
 8004920:	08004a37 	.word	0x08004a37
 8004924:	08004a1f 	.word	0x08004a1f
 8004928:	08004a37 	.word	0x08004a37
 800492c:	08004a37 	.word	0x08004a37
 8004930:	08004a37 	.word	0x08004a37
 8004934:	08004a37 	.word	0x08004a37
 8004938:	08004a37 	.word	0x08004a37
 800493c:	08004a37 	.word	0x08004a37
 8004940:	08004a37 	.word	0x08004a37
 8004944:	08004a37 	.word	0x08004a37
 8004948:	08004a37 	.word	0x08004a37
 800494c:	08004a37 	.word	0x08004a37
 8004950:	08004a37 	.word	0x08004a37
 8004954:	08004a37 	.word	0x08004a37
 8004958:	08004a37 	.word	0x08004a37
 800495c:	08004a37 	.word	0x08004a37
 8004960:	08004a37 	.word	0x08004a37
 8004964:	08004a25 	.word	0x08004a25
 8004968:	08004a37 	.word	0x08004a37
 800496c:	08004a37 	.word	0x08004a37
 8004970:	08004a37 	.word	0x08004a37
 8004974:	08004a37 	.word	0x08004a37
 8004978:	08004a37 	.word	0x08004a37
 800497c:	08004a37 	.word	0x08004a37
 8004980:	08004a37 	.word	0x08004a37
 8004984:	08004a37 	.word	0x08004a37
 8004988:	08004a37 	.word	0x08004a37
 800498c:	08004a37 	.word	0x08004a37
 8004990:	08004a37 	.word	0x08004a37
 8004994:	08004a37 	.word	0x08004a37
 8004998:	08004a37 	.word	0x08004a37
 800499c:	08004a37 	.word	0x08004a37
 80049a0:	08004a37 	.word	0x08004a37
 80049a4:	08004a37 	.word	0x08004a37
 80049a8:	08004a37 	.word	0x08004a37
 80049ac:	08004a37 	.word	0x08004a37
 80049b0:	08004a37 	.word	0x08004a37
 80049b4:	08004a37 	.word	0x08004a37
 80049b8:	08004a37 	.word	0x08004a37
 80049bc:	08004a37 	.word	0x08004a37
 80049c0:	08004a37 	.word	0x08004a37
 80049c4:	08004a37 	.word	0x08004a37
 80049c8:	08004a37 	.word	0x08004a37
 80049cc:	08004a37 	.word	0x08004a37
 80049d0:	08004a37 	.word	0x08004a37
 80049d4:	08004a37 	.word	0x08004a37
 80049d8:	08004a37 	.word	0x08004a37
 80049dc:	08004a37 	.word	0x08004a37
 80049e0:	08004a37 	.word	0x08004a37
 80049e4:	08004a2b 	.word	0x08004a2b
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d021      	beq.n	8004a30 <Get_Acc_Event+0x1bc>
 80049ec:	e023      	b.n	8004a36 <Get_Acc_Event+0x1c2>
  {
  case (ACC_NOT_USED):
    acc_event.type_name = "NOT_USED";
 80049ee:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <Get_Acc_Event+0x1e4>)
 80049f0:	617b      	str	r3, [r7, #20]
    break;
 80049f2:	e023      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_TOP):
    acc_event.type_name = "6D_OR_TOP";
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <Get_Acc_Event+0x1e8>)
 80049f6:	617b      	str	r3, [r7, #20]
    break;
 80049f8:	e020      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_LEFT):
    acc_event.type_name = "6D_OR_LEFT";
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <Get_Acc_Event+0x1ec>)
 80049fc:	617b      	str	r3, [r7, #20]
    break;
 80049fe:	e01d      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_BOTTOM):
    acc_event.type_name = "6D_OR_BOTTOM";
 8004a00:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <Get_Acc_Event+0x1f0>)
 8004a02:	617b      	str	r3, [r7, #20]
    break;
 8004a04:	e01a      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_RIGHT):
    acc_event.type_name = "6D_OR_RIGHT";
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <Get_Acc_Event+0x1f4>)
 8004a08:	617b      	str	r3, [r7, #20]
    break;
 8004a0a:	e017      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_UP):
    acc_event.type_name = "6D_OR_UP";
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <Get_Acc_Event+0x1f8>)
 8004a0e:	617b      	str	r3, [r7, #20]
    break;
 8004a10:	e014      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_6D_OR_DOWN):
    acc_event.type_name = "6D_OR_DOWN";
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <Get_Acc_Event+0x1fc>)
 8004a14:	617b      	str	r3, [r7, #20]
    break;
 8004a16:	e011      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_TILT):
    acc_event.type_name = "TILT";
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <Get_Acc_Event+0x200>)
 8004a1a:	617b      	str	r3, [r7, #20]
    break;
 8004a1c:	e00e      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_FREE_FALL):
    acc_event.type_name = "FREE_FALL";
 8004a1e:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <Get_Acc_Event+0x204>)
 8004a20:	617b      	str	r3, [r7, #20]
    break;
 8004a22:	e00b      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_SINGLE_TAP):
    acc_event.type_name = "SINGLE_TAP";
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <Get_Acc_Event+0x208>)
 8004a26:	617b      	str	r3, [r7, #20]
    break;
 8004a28:	e008      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_DOUBLE_TAP):
    acc_event.type_name = "DOUBLE_TAP";
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <Get_Acc_Event+0x20c>)
 8004a2c:	617b      	str	r3, [r7, #20]
    break;
 8004a2e:	e005      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  case (ACC_WAKE_UP):
    acc_event.type_name = "WAKE_UP";
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <Get_Acc_Event+0x210>)
 8004a32:	617b      	str	r3, [r7, #20]
    break;
 8004a34:	e002      	b.n	8004a3c <Get_Acc_Event+0x1c8>
  default:
    acc_event.type_name = "NOT_RECOGNIZED";
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <Get_Acc_Event+0x214>)
 8004a38:	617b      	str	r3, [r7, #20]
    break;
 8004a3a:	bf00      	nop
  }

  return acc_event;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a48:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	0800df18 	.word	0x0800df18
 8004a5c:	0800df24 	.word	0x0800df24
 8004a60:	0800df30 	.word	0x0800df30
 8004a64:	0800df3c 	.word	0x0800df3c
 8004a68:	0800df4c 	.word	0x0800df4c
 8004a6c:	0800df58 	.word	0x0800df58
 8004a70:	0800df64 	.word	0x0800df64
 8004a74:	0800df70 	.word	0x0800df70
 8004a78:	0800df78 	.word	0x0800df78
 8004a7c:	0800df84 	.word	0x0800df84
 8004a80:	0800df90 	.word	0x0800df90
 8004a84:	0800df9c 	.word	0x0800df9c
 8004a88:	0800dfa4 	.word	0x0800dfa4

08004a8c <Get_Mic_Audio_Level>:
 * @param  The data length
 * @param  The received data
 * @retval The microphone audio level [db]
 */
uint8_t Get_Mic_Audio_Level(uint8_t data_length, uint8_t* value)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	71fb      	strb	r3, [r7, #7]
  uint8_t mic_audio_level = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]

  if (data_length == MIC_DATA_LEN) {
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d102      	bne.n	8004aa8 <Get_Mic_Audio_Level+0x1c>
    mic_audio_level = value[2];
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	73fb      	strb	r3, [r7, #15]
  }

  return mic_audio_level;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <Get_Proximity>:
 * @param  The data length
 * @param  The received data
 * @retval The proximity value [mm]
 */
uint16_t Get_Proximity(uint8_t data_length, uint8_t* value)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	4603      	mov	r3, r0
 8004abe:	6039      	str	r1, [r7, #0]
 8004ac0:	71fb      	strb	r3, [r7, #7]
  uint16_t proximity = 0; /* no value */
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	81fb      	strh	r3, [r7, #14]
  uint16_t data;

  if (data_length == PROX_DATA_LEN) {
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d122      	bne.n	8004b12 <Get_Proximity+0x5c>
    data = (value[3]<<8) | value[2];
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	3303      	adds	r3, #3
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	b21a      	sxth	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	81bb      	strh	r3, [r7, #12]
    /* if first bit == 1 => high range value (i.e. PRX data from 53L0A1 or Bluecoin)*/
    if ((data & INT16_FIRST_BIT_MASK) >> 15 == 1) {
 8004ae4:	89bb      	ldrh	r3, [r7, #12]
 8004ae6:	0bdb      	lsrs	r3, r3, #15
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10f      	bne.n	8004b0e <Get_Proximity+0x58>
      data = (data & ~INT16_FIRST_BIT_MASK);
 8004aee:	89bb      	ldrh	r3, [r7, #12]
 8004af0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004af4:	81bb      	strh	r3, [r7, #12]
      if (data > HIGH_RANGE_DATA_MAX) {
 8004af6:	89bb      	ldrh	r3, [r7, #12]
 8004af8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d903      	bls.n	8004b08 <Get_Proximity+0x52>
        proximity = OUT_OF_RANGE_VALUE;
 8004b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b04:	81fb      	strh	r3, [r7, #14]
 8004b06:	e004      	b.n	8004b12 <Get_Proximity+0x5c>
      }
      else {
        proximity = data;
 8004b08:	89bb      	ldrh	r3, [r7, #12]
 8004b0a:	81fb      	strh	r3, [r7, #14]
 8004b0c:	e001      	b.n	8004b12 <Get_Proximity+0x5c>
      }
    }
    else {
      proximity = data;
 8004b0e:	89bb      	ldrh	r3, [r7, #12]
 8004b10:	81fb      	strh	r3, [r7, #14]
    }
  }

  return proximity;
 8004b12:	89fb      	ldrh	r3, [r7, #14]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <Get_Lux_Level>:
 * @param  The data length
 * @param  The received data
 * @retval The lux level value
 */
uint16_t Get_Lux_Level(uint8_t data_length, uint8_t* value)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
  uint16_t lux_level = 0; /* no value */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	81fb      	strh	r3, [r7, #14]

  if (data_length == LUX_DATA_LEN) {
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d10b      	bne.n	8004b4e <Get_Lux_Level+0x2e>
    lux_level = (value[3]<<8) | value[2];
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	3303      	adds	r3, #3
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	b21a      	sxth	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	3302      	adds	r3, #2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b21b      	sxth	r3, r3
 8004b4c:	81fb      	strh	r3, [r7, #14]
  }

  return lux_level;
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <Get_ECompass>:
 * @param  The data length
 * @param  The received data
 * @retval The E-Compass value [0.00 -> 359,99]
 */
uint16_t Get_ECompass(uint8_t data_length, uint8_t* value)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  uint16_t e_compass = 0; /* no value */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	81fb      	strh	r3, [r7, #14]

  if (data_length == ECOMPASS_DATA_LEN) {
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d10b      	bne.n	8004b8a <Get_ECompass+0x2e>
    e_compass = (value[3]<<8) | value[2];
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	3303      	adds	r3, #3
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	b21a      	sxth	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	3302      	adds	r3, #2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b21b      	sxth	r3, r3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	81fb      	strh	r3, [r7, #14]
  }

  return e_compass;
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <Get_Activity_Recognition>:
 * @param  The data length
 * @param  The received data
 * @retval The activity type (value, name)
 */
activityRec_t Get_Activity_Recognition(uint8_t data_length, uint8_t* value)
{
 8004b98:	b4b0      	push	{r4, r5, r7}
 8004b9a:	b08f      	sub	sp, #60	; 0x3c
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	72fb      	strb	r3, [r7, #11]
  activityRec_t act_rec;
  /* activity recognition types */
  char *MAR_TYPES[7] = {"NOACTIVITY",
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <Get_Activity_Recognition+0x60>)
 8004ba8:	f107 0414 	add.w	r4, r7, #20
 8004bac:	461d      	mov	r5, r3
 8004bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                        "FASTWALKING",
                        "JOGGING",
                        "BIKING",
                        "DRIVING"};

  act_rec.type_val = 0;  /* no value */
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  if (data_length == ACT_REC_DATA_LEN) {
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d103      	bne.n	8004bce <Get_Activity_Recognition+0x36>
    act_rec.type_val  = value[2];
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	789b      	ldrb	r3, [r3, #2]
 8004bca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  }
  act_rec.type_name = MAR_TYPES[act_rec.type_val];
 8004bce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3338      	adds	r3, #56	; 0x38
 8004bd6:	443b      	add	r3, r7
 8004bd8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34

  return act_rec;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	461a      	mov	r2, r3
 8004be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004be6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	373c      	adds	r7, #60	; 0x3c
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bcb0      	pop	{r4, r5, r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	0800dff8 	.word	0x0800dff8

08004bfc <Get_Carry_Pos_Recognition>:
 * @param  The data length
 * @param  The received data
 * @retval The carry position type (value, name)
 */
carryPosition_t Get_Carry_Pos_Recognition(uint8_t data_length, uint8_t* value)
{
 8004bfc:	b4b0      	push	{r4, r5, r7}
 8004bfe:	b08f      	sub	sp, #60	; 0x3c
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	72fb      	strb	r3, [r7, #11]
  carryPosition_t carry_pos;
  /* carry position types */
  char *MCP_TYPES[8] = {"UNKNOWN",
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <Get_Carry_Pos_Recognition+0x60>)
 8004c0c:	f107 0410 	add.w	r4, r7, #16
 8004c10:	461d      	mov	r5, r3
 8004c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                        "SHIRTPOCKET",
                        "TROUSERPOCKET",
                        "ARMSWING",
                        "JACKETPOCKET"};

  carry_pos.type_val = 0; /* no value */
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  if (data_length == CARRY_POS_REC_DATA_LEN) {
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d103      	bne.n	8004c32 <Get_Carry_Pos_Recognition+0x36>
    carry_pos.type_val = value[2];
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	789b      	ldrb	r3, [r3, #2]
 8004c2e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  }
  carry_pos.type_name = MCP_TYPES[carry_pos.type_val];
 8004c32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3338      	adds	r3, #56	; 0x38
 8004c3a:	443b      	add	r3, r7
 8004c3c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34

  return carry_pos;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c4e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	373c      	adds	r7, #60	; 0x3c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bcb0      	pop	{r4, r5, r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	0800e070 	.word	0x0800e070

08004c60 <Get_Gesture_Recognition>:
 * @param  The data length
 * @param  The received data
 * @retval The gesture type (value, name)
 */
gestureRec_t Get_Gesture_Recognition(uint8_t data_length, uint8_t* value)
{
 8004c60:	b490      	push	{r4, r7}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	72fb      	strb	r3, [r7, #11]
  gestureRec_t gest_rec;
  /* gesture types */
  char *MGR_TYPES[4] = {"NOGESTURE",
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <Get_Gesture_Recognition+0x58>)
 8004c70:	f107 0410 	add.w	r4, r7, #16
 8004c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                        "PICKUP",
                        "GLANCE",
                        "WAKEUP"};
  gest_rec.type_val = 0; /* no value */
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3020 	strb.w	r3, [r7, #32]

  if (data_length == GESTURE_REC_DATA_LEN) {
 8004c80:	7afb      	ldrb	r3, [r7, #11]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d103      	bne.n	8004c8e <Get_Gesture_Recognition+0x2e>
    gest_rec.type_val = value[2];
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	789b      	ldrb	r3, [r3, #2]
 8004c8a:	f887 3020 	strb.w	r3, [r7, #32]
  }
  gest_rec.type_name = MGR_TYPES[gest_rec.type_val];
 8004c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	3328      	adds	r3, #40	; 0x28
 8004c96:	443b      	add	r3, r7
 8004c98:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24

  return gest_rec;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f107 0320 	add.w	r3, r7, #32
 8004ca6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004caa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc90      	pop	{r4, r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	0800e0b4 	.word	0x0800e0b4

08004cbc <Get_Motion_Intensity>:
 * @param  The data length
 * @param  The received data
 * @retval The motion intensity (value, name)
 */
intensityDet_t Get_Motion_Intensity(uint8_t data_length, uint8_t* value)
{
 8004cbc:	b4b0      	push	{r4, r5, r7}
 8004cbe:	b093      	sub	sp, #76	; 0x4c
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	72fb      	strb	r3, [r7, #11]
  intensityDet_t int_det;
  /* intensity detection types */
  char *MID_TYPES[11] = {"ON_DESK",
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <Get_Motion_Intensity+0x64>)
 8004ccc:	f107 0414 	add.w	r4, r7, #20
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                         "FWALKING",
                         "FWALKING_JOGGING",
                         "FJOGGING_BRUSHING",
                         "SPRINTING"};

  int_det.type_val = 0; /* no value */
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

  if (data_length == MOT_INTENSITY_DATA_LEN) {
 8004ce8:	7afb      	ldrb	r3, [r7, #11]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d103      	bne.n	8004cf6 <Get_Motion_Intensity+0x3a>
    int_det.type_val = value[2];
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  }
  int_det.type_name = MID_TYPES[int_det.type_val];
 8004cf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3348      	adds	r3, #72	; 0x48
 8004cfe:	443b      	add	r3, r7
 8004d00:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44

  return int_det;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	374c      	adds	r7, #76	; 0x4c
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bcb0      	pop	{r4, r5, r7}
 8004d1e:	4770      	bx	lr
 8004d20:	0800e16c 	.word	0x0800e16c

08004d24 <Get_Pedometer_Info>:
 * @param  The data length
 * @param  The received data
 * @retval The pedometer information
 */
pedometerInfo_t Get_Pedometer_Info(uint8_t data_length, uint8_t* value)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	72fb      	strb	r3, [r7, #11]
  pedometerInfo_t pedo_info;

  if (data_length == PEDOMETER_DATA_LEN) {
 8004d32:	7afb      	ldrb	r3, [r7, #11]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d11f      	bne.n	8004d78 <Get_Pedometer_Info+0x54>
    pedo_info.steps = (value[5]<<24) | (value[4]<<16) | (value[3]<<8) | value[2];
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3305      	adds	r3, #5
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	061a      	lsls	r2, r3, #24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3303      	adds	r3, #3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	4313      	orrs	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	3202      	adds	r2, #2
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
    pedo_info.steps_min = (value[7]<<8) | value[6];
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3307      	adds	r3, #7
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	b21a      	sxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3306      	adds	r3, #6
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	4313      	orrs	r3, r2
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	82bb      	strh	r3, [r7, #20]
  }

  return pedo_info;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f107 0310 	add.w	r3, r7, #16
 8004d80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d84:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <Get_Motion_Data>:
 * @param  The received data
 * @retval The motion data information (accelerometer [mg], gyroscope [dps] and
           magnetometer [mGa])
 */
motionData_t Get_Motion_Data(uint8_t data_length, uint8_t* value)
{
 8004d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d96:	b08f      	sub	sp, #60	; 0x3c
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	72fb      	strb	r3, [r7, #11]
  motionData_t mot_data;

  if (data_length == ACCGYRMAG_DATA_LEN) {
 8004da2:	7afb      	ldrb	r3, [r7, #11]
 8004da4:	2b14      	cmp	r3, #20
 8004da6:	f040 8114 	bne.w	8004fd2 <Get_Motion_Data+0x23e>
    /* Accelerometer */
    mot_data.acc.x.val = ((int8_t)value[3]<<8) | value[2];
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3303      	adds	r3, #3
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3302      	adds	r3, #2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b21b      	sxth	r3, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	b21b      	sxth	r3, r3
 8004dc2:	82bb      	strh	r3, [r7, #20]
    mot_data.acc.x.is_neg = (mot_data.acc.x.val < 0) ? 1 : 0;
 8004dc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dc8:	13db      	asrs	r3, r3, #15
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	75bb      	strb	r3, [r7, #22]
    mot_data.acc.x.val = (mot_data.acc.x.val < 0) ? (-mot_data.acc.x.val) : (mot_data.acc.x.val);
 8004dd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfb8      	it	lt
 8004dde:	425b      	neglt	r3, r3
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b21b      	sxth	r3, r3
 8004de4:	82bb      	strh	r3, [r7, #20]

    mot_data.acc.y.val = ((int8_t)value[5]<<8) | value[4];
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3305      	adds	r3, #5
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	833b      	strh	r3, [r7, #24]
    mot_data.acc.y.is_neg = (mot_data.acc.y.val < 0) ? 1 : 0;
 8004e00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e04:	13db      	asrs	r3, r3, #15
 8004e06:	b21b      	sxth	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	76bb      	strb	r3, [r7, #26]
    mot_data.acc.y.val = (mot_data.acc.y.val < 0) ? (-mot_data.acc.y.val) : (mot_data.acc.y.val);
 8004e12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	425b      	neglt	r3, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	833b      	strh	r3, [r7, #24]

    mot_data.acc.z.val = ((int8_t)value[7]<<8) | value[6];
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3307      	adds	r3, #7
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3306      	adds	r3, #6
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b21b      	sxth	r3, r3
 8004e3a:	83bb      	strh	r3, [r7, #28]
    mot_data.acc.z.is_neg = (mot_data.acc.z.val < 0) ? 1 : 0;
 8004e3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004e40:	13db      	asrs	r3, r3, #15
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	77bb      	strb	r3, [r7, #30]
    mot_data.acc.z.val = (mot_data.acc.z.val < 0) ? (-mot_data.acc.z.val) : (mot_data.acc.z.val);
 8004e4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfb8      	it	lt
 8004e56:	425b      	neglt	r3, r3
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	b21b      	sxth	r3, r3
 8004e5c:	83bb      	strh	r3, [r7, #28]

    /* Gyroscope */
    mot_data.gyr.x.val = ((int8_t)value[9]<<8) | value[8];
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3309      	adds	r3, #9
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	b21a      	sxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	843b      	strh	r3, [r7, #32]
    mot_data.gyr.x.is_neg = (mot_data.gyr.x.val < 0) ? 1 : 0;
 8004e78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004e7c:	13db      	asrs	r3, r3, #15
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    mot_data.gyr.x.val = (mot_data.gyr.x.val < 0) ? (-mot_data.gyr.x.val) : (mot_data.gyr.x.val);
 8004e8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfb8      	it	lt
 8004e94:	425b      	neglt	r3, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	843b      	strh	r3, [r7, #32]

    mot_data.gyr.y.val = ((int8_t)value[11]<<8) | value[10];
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	330b      	adds	r3, #11
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	330a      	adds	r3, #10
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
    mot_data.gyr.y.is_neg = (mot_data.gyr.y.val < 0) ? 1 : 0;
 8004eb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004eba:	13db      	asrs	r3, r3, #15
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    mot_data.gyr.y.val = (mot_data.gyr.y.val < 0) ? (-mot_data.gyr.y.val) : (mot_data.gyr.y.val);
 8004eca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	425b      	neglt	r3, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	84bb      	strh	r3, [r7, #36]	; 0x24

    mot_data.gyr.z.val = ((int8_t)value[13]<<8) | value[12];
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	330d      	adds	r3, #13
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	b21a      	sxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b21b      	sxth	r3, r3
 8004ef2:	853b      	strh	r3, [r7, #40]	; 0x28
    mot_data.gyr.z.is_neg = (mot_data.gyr.z.val < 0) ? 1 : 0;
 8004ef4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004ef8:	13db      	asrs	r3, r3, #15
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    mot_data.gyr.z.val = (mot_data.gyr.z.val < 0) ? (-mot_data.gyr.z.val) : (mot_data.gyr.z.val);
 8004f08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfb8      	it	lt
 8004f10:	425b      	neglt	r3, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	b21b      	sxth	r3, r3
 8004f16:	853b      	strh	r3, [r7, #40]	; 0x28

    /* Magnetometer */
    mot_data.mag.x.val = ((int8_t)value[15]<<8) | value[14];
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	330f      	adds	r3, #15
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	330e      	adds	r3, #14
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	85bb      	strh	r3, [r7, #44]	; 0x2c
    mot_data.mag.x.is_neg = (mot_data.mag.x.val < 0) ? 1 : 0;
 8004f32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004f36:	13db      	asrs	r3, r3, #15
 8004f38:	b21b      	sxth	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    mot_data.mag.x.val = (mot_data.mag.x.val < 0) ? (-mot_data.mag.x.val) : (mot_data.mag.x.val);
 8004f46:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	425b      	neglt	r3, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b21b      	sxth	r3, r3
 8004f54:	85bb      	strh	r3, [r7, #44]	; 0x2c

    mot_data.mag.y.val = ((int8_t)value[17]<<8) | value[16];
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3311      	adds	r3, #17
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b25b      	sxtb	r3, r3
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	b21a      	sxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3310      	adds	r3, #16
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b21b      	sxth	r3, r3
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	863b      	strh	r3, [r7, #48]	; 0x30
    mot_data.mag.y.is_neg = (mot_data.mag.y.val < 0) ? 1 : 0;
 8004f70:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004f74:	13db      	asrs	r3, r3, #15
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    mot_data.mag.y.val = (mot_data.mag.y.val < 0) ? (-mot_data.mag.y.val) : (mot_data.mag.y.val);
 8004f84:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfb8      	it	lt
 8004f8c:	425b      	neglt	r3, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	863b      	strh	r3, [r7, #48]	; 0x30

    mot_data.mag.z.val = ((int8_t)value[19]<<8) | value[18];
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3313      	adds	r3, #19
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	b21a      	sxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3312      	adds	r3, #18
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b21b      	sxth	r3, r3
 8004fac:	86bb      	strh	r3, [r7, #52]	; 0x34
    mot_data.mag.z.is_neg = (mot_data.mag.z.val < 0) ? 1 : 0;
 8004fae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004fb2:	13db      	asrs	r3, r3, #15
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    mot_data.mag.z.val = (mot_data.mag.z.val < 0) ? (-mot_data.mag.z.val) : (mot_data.mag.z.val);
 8004fc2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bfb8      	it	lt
 8004fca:	425b      	neglt	r3, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	86bb      	strh	r3, [r7, #52]	; 0x34
  }

  return mot_data;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f107 0414 	add.w	r4, r7, #20
 8004fd8:	469c      	mov	ip, r3
 8004fda:	f104 0e20 	add.w	lr, r4, #32
 8004fde:	4665      	mov	r5, ip
 8004fe0:	4626      	mov	r6, r4
 8004fe2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004fe4:	6028      	str	r0, [r5, #0]
 8004fe6:	6069      	str	r1, [r5, #4]
 8004fe8:	60aa      	str	r2, [r5, #8]
 8004fea:	60eb      	str	r3, [r5, #12]
 8004fec:	3410      	adds	r4, #16
 8004fee:	f10c 0c10 	add.w	ip, ip, #16
 8004ff2:	4574      	cmp	r4, lr
 8004ff4:	d1f3      	bne.n	8004fde <Get_Motion_Data+0x24a>
 8004ff6:	4663      	mov	r3, ip
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	6810      	ldr	r0, [r2, #0]
 8004ffc:	6018      	str	r0, [r3, #0]
}
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	373c      	adds	r7, #60	; 0x3c
 8005002:	46bd      	mov	sp, r7
 8005004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005006 <Get_Quaternions_Data>:
 * @param  The data length
 * @param  The received data
 * @retval The quaternions data
 */
quatData_t Get_Quaternions_Data(uint8_t data_length, uint8_t* value)
{
 8005006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005008:	b08f      	sub	sp, #60	; 0x3c
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	460b      	mov	r3, r1
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	72fb      	strb	r3, [r7, #11]
  quatData_t quat_data;

  /* Quaternions 1 */
  if ((data_length == QUATERNIONS_1_DATA_LEN) ||
 8005014:	7afb      	ldrb	r3, [r7, #11]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d005      	beq.n	8005026 <Get_Quaternions_Data+0x20>
 800501a:	7afb      	ldrb	r3, [r7, #11]
 800501c:	2b0e      	cmp	r3, #14
 800501e:	d002      	beq.n	8005026 <Get_Quaternions_Data+0x20>
      (data_length == QUATERNIONS_2_DATA_LEN) ||
 8005020:	7afb      	ldrb	r3, [r7, #11]
 8005022:	2b14      	cmp	r3, #20
 8005024:	d159      	bne.n	80050da <Get_Quaternions_Data+0xd4>
      (data_length == QUATERNIONS_3_DATA_LEN)) {
    quat_data.q1.x.val = ((int8_t)value[3]<<8) | value[2];
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3303      	adds	r3, #3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b25b      	sxtb	r3, r3
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	b21a      	sxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3302      	adds	r3, #2
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b21b      	sxth	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b21b      	sxth	r3, r3
 800503e:	82bb      	strh	r3, [r7, #20]
    quat_data.q1.x.is_neg = (quat_data.q1.x.val < 0) ? 1 : 0;
 8005040:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005044:	13db      	asrs	r3, r3, #15
 8005046:	b21b      	sxth	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	75bb      	strb	r3, [r7, #22]
    quat_data.q1.x.val = (quat_data.q1.x.val < 0) ? (-quat_data.q1.x.val) : (quat_data.q1.x.val);
 8005052:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	425b      	neglt	r3, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	b21b      	sxth	r3, r3
 8005060:	82bb      	strh	r3, [r7, #20]

    quat_data.q1.y.val = ((int8_t)value[5]<<8) | value[4];
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3305      	adds	r3, #5
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b25b      	sxtb	r3, r3
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b21a      	sxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3304      	adds	r3, #4
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b21b      	sxth	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b21b      	sxth	r3, r3
 800507a:	833b      	strh	r3, [r7, #24]
    quat_data.q1.y.is_neg = (quat_data.q1.y.val < 0) ? 1 : 0;
 800507c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005080:	13db      	asrs	r3, r3, #15
 8005082:	b21b      	sxth	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	76bb      	strb	r3, [r7, #26]
    quat_data.q1.y.val = (quat_data.q1.y.val < 0) ? (-quat_data.q1.y.val) : (quat_data.q1.y.val);
 800508e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	bfb8      	it	lt
 8005096:	425b      	neglt	r3, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	b21b      	sxth	r3, r3
 800509c:	833b      	strh	r3, [r7, #24]

    quat_data.q1.z.val = ((int8_t)value[7]<<8) | value[6];
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3307      	adds	r3, #7
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	b21a      	sxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3306      	adds	r3, #6
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	83bb      	strh	r3, [r7, #28]
    quat_data.q1.z.is_neg = (quat_data.q1.z.val < 0) ? 1 : 0;
 80050b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80050bc:	13db      	asrs	r3, r3, #15
 80050be:	b21b      	sxth	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	77bb      	strb	r3, [r7, #30]
    quat_data.q1.z.val = (quat_data.q1.z.val < 0) ? (-quat_data.q1.z.val) : (quat_data.q1.z.val);
 80050ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfb8      	it	lt
 80050d2:	425b      	neglt	r3, r3
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b21b      	sxth	r3, r3
 80050d8:	83bb      	strh	r3, [r7, #28]
  }
  if ((data_length == QUATERNIONS_2_DATA_LEN) ||
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	2b0e      	cmp	r3, #14
 80050de:	d002      	beq.n	80050e6 <Get_Quaternions_Data+0xe0>
 80050e0:	7afb      	ldrb	r3, [r7, #11]
 80050e2:	2b14      	cmp	r3, #20
 80050e4:	d15c      	bne.n	80051a0 <Get_Quaternions_Data+0x19a>
      (data_length == QUATERNIONS_3_DATA_LEN)) {
    quat_data.q2.x.val = ((int8_t)value[9]<<8) | value[8];
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3309      	adds	r3, #9
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3308      	adds	r3, #8
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b21b      	sxth	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	843b      	strh	r3, [r7, #32]
    quat_data.q2.x.is_neg = (quat_data.q2.x.val < 0) ? 1 : 0;
 8005100:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005104:	13db      	asrs	r3, r3, #15
 8005106:	b21b      	sxth	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    quat_data.q2.x.val = (quat_data.q2.x.val < 0) ? (-quat_data.q2.x.val) : (quat_data.q2.x.val);
 8005114:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005118:	2b00      	cmp	r3, #0
 800511a:	bfb8      	it	lt
 800511c:	425b      	neglt	r3, r3
 800511e:	b29b      	uxth	r3, r3
 8005120:	b21b      	sxth	r3, r3
 8005122:	843b      	strh	r3, [r7, #32]

    quat_data.q2.y.val = ((int8_t)value[11]<<8) | value[10];
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	330b      	adds	r3, #11
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	b25b      	sxtb	r3, r3
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	b21a      	sxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	330a      	adds	r3, #10
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b21b      	sxth	r3, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	b21b      	sxth	r3, r3
 800513c:	84bb      	strh	r3, [r7, #36]	; 0x24
    quat_data.q2.y.is_neg = (quat_data.q2.y.val < 0) ? 1 : 0;
 800513e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005142:	13db      	asrs	r3, r3, #15
 8005144:	b21b      	sxth	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    quat_data.q2.y.val = (quat_data.q2.y.val < 0) ? (-quat_data.q2.y.val) : (quat_data.q2.y.val);
 8005152:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfb8      	it	lt
 800515a:	425b      	neglt	r3, r3
 800515c:	b29b      	uxth	r3, r3
 800515e:	b21b      	sxth	r3, r3
 8005160:	84bb      	strh	r3, [r7, #36]	; 0x24

    quat_data.q2.z.val = ((int8_t)value[13]<<8) | value[12];
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	330d      	adds	r3, #13
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b25b      	sxtb	r3, r3
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	b21a      	sxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	330c      	adds	r3, #12
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b21b      	sxth	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b21b      	sxth	r3, r3
 800517a:	853b      	strh	r3, [r7, #40]	; 0x28
    quat_data.q2.z.is_neg = (quat_data.q2.z.val < 0) ? 1 : 0;
 800517c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005180:	13db      	asrs	r3, r3, #15
 8005182:	b21b      	sxth	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    quat_data.q2.z.val = (quat_data.q2.z.val < 0) ? (-quat_data.q2.z.val) : (quat_data.q2.z.val);
 8005190:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfb8      	it	lt
 8005198:	425b      	neglt	r3, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	b21b      	sxth	r3, r3
 800519e:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if (data_length == QUATERNIONS_3_DATA_LEN) {
 80051a0:	7afb      	ldrb	r3, [r7, #11]
 80051a2:	2b14      	cmp	r3, #20
 80051a4:	d15c      	bne.n	8005260 <Get_Quaternions_Data+0x25a>
    quat_data.q3.x.val = ((int8_t)value[15]<<8) | value[14];
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	330f      	adds	r3, #15
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	b21a      	sxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	330e      	adds	r3, #14
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b21b      	sxth	r3, r3
 80051be:	85bb      	strh	r3, [r7, #44]	; 0x2c
    quat_data.q3.x.is_neg = (quat_data.q3.x.val < 0) ? 1 : 0;
 80051c0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80051c4:	13db      	asrs	r3, r3, #15
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    quat_data.q3.x.val = (quat_data.q3.x.val < 0) ? (-quat_data.q3.x.val) : (quat_data.q3.x.val);
 80051d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bfb8      	it	lt
 80051dc:	425b      	neglt	r3, r3
 80051de:	b29b      	uxth	r3, r3
 80051e0:	b21b      	sxth	r3, r3
 80051e2:	85bb      	strh	r3, [r7, #44]	; 0x2c

    quat_data.q3.y.val = ((int8_t)value[17]<<8) | value[16];
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3311      	adds	r3, #17
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3310      	adds	r3, #16
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	863b      	strh	r3, [r7, #48]	; 0x30
    quat_data.q3.y.is_neg = (quat_data.q3.y.val < 0) ? 1 : 0;
 80051fe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005202:	13db      	asrs	r3, r3, #15
 8005204:	b21b      	sxth	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    quat_data.q3.y.val = (quat_data.q3.y.val < 0) ? (-quat_data.q3.y.val) : (quat_data.q3.y.val);
 8005212:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	b29b      	uxth	r3, r3
 800521e:	b21b      	sxth	r3, r3
 8005220:	863b      	strh	r3, [r7, #48]	; 0x30

    quat_data.q3.z.val = ((int8_t)value[19]<<8) | value[18];
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3313      	adds	r3, #19
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b25b      	sxtb	r3, r3
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	b21a      	sxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3312      	adds	r3, #18
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b21b      	sxth	r3, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	b21b      	sxth	r3, r3
 800523a:	86bb      	strh	r3, [r7, #52]	; 0x34
    quat_data.q3.z.is_neg = (quat_data.q3.z.val < 0) ? 1 : 0;
 800523c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005240:	13db      	asrs	r3, r3, #15
 8005242:	b21b      	sxth	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    quat_data.q3.z.val = (quat_data.q3.z.val < 0) ? (-quat_data.q3.z.val) : (quat_data.q3.z.val);
 8005250:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005254:	2b00      	cmp	r3, #0
 8005256:	bfb8      	it	lt
 8005258:	425b      	neglt	r3, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	b21b      	sxth	r3, r3
 800525e:	86bb      	strh	r3, [r7, #52]	; 0x34
  }

  return quat_data;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f107 0414 	add.w	r4, r7, #20
 8005266:	469c      	mov	ip, r3
 8005268:	f104 0e20 	add.w	lr, r4, #32
 800526c:	4665      	mov	r5, ip
 800526e:	4626      	mov	r6, r4
 8005270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005272:	6028      	str	r0, [r5, #0]
 8005274:	6069      	str	r1, [r5, #4]
 8005276:	60aa      	str	r2, [r5, #8]
 8005278:	60eb      	str	r3, [r5, #12]
 800527a:	3410      	adds	r4, #16
 800527c:	f10c 0c10 	add.w	ip, ip, #16
 8005280:	4574      	cmp	r4, lr
 8005282:	d1f3      	bne.n	800526c <Get_Quaternions_Data+0x266>
 8005284:	4663      	mov	r3, ip
 8005286:	4622      	mov	r2, r4
 8005288:	6810      	ldr	r0, [r2, #0]
 800528a:	6018      	str	r0, [r3, #0]
}
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	373c      	adds	r7, #60	; 0x3c
 8005290:	46bd      	mov	sp, r7
 8005292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_MspInit+0x44>)
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <HAL_MspInit+0x44>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6613      	str	r3, [r2, #96]	; 0x60
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_MspInit+0x44>)
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <HAL_MspInit+0x44>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <HAL_MspInit+0x44>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6593      	str	r3, [r2, #88]	; 0x58
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_MspInit+0x44>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052e0:	e7fe      	b.n	80052e0 <NMI_Handler+0x4>

080052e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052e6:	e7fe      	b.n	80052e6 <HardFault_Handler+0x4>

080052e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052ec:	e7fe      	b.n	80052ec <MemManage_Handler+0x4>

080052ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052f2:	e7fe      	b.n	80052f2 <BusFault_Handler+0x4>

080052f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <UsageFault_Handler+0x4>

080052fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005328:	f000 fb82 	bl	8005a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800532c:	bf00      	nop
 800532e:	bd80      	pop	{r7, pc}

08005330 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8005334:	4802      	ldr	r0, [pc, #8]	; (8005340 <EXTI0_IRQHandler+0x10>)
 8005336:	f000 fd31 	bl	8005d9c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20001f98 	.word	0x20001f98

08005344 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <BSP_LED_Init+0x20>)
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	0800e198 	.word	0x0800e198

08005368 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	4a06      	ldr	r2, [pc, #24]	; (8005390 <BSP_LED_On+0x28>)
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	2120      	movs	r1, #32
 800537c:	2201      	movs	r2, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fff2 	bl	8006368 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200001a0 	.word	0x200001a0

08005394 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	4a06      	ldr	r2, [pc, #24]	; (80053bc <BSP_LED_Off+0x28>)
 80053a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a6:	2120      	movs	r1, #32
 80053a8:	2200      	movs	r2, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 ffdc 	bl	8006368 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200001a0 	.word	0x200001a0

080053c0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c6:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053d2:	4b19      	ldr	r3, [pc, #100]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a11      	ldr	r2, [pc, #68]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <LED_USER_GPIO_Init+0x78>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8005406:	2200      	movs	r2, #0
 8005408:	2120      	movs	r1, #32
 800540a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800540e:	f000 ffab 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8005412:	2320      	movs	r3, #32
 8005414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005416:	2301      	movs	r3, #1
 8005418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	4619      	mov	r1, r3
 8005428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800542c:	f000 fce6 	bl	8005dfc <HAL_GPIO_Init>

}
 8005430:	bf00      	nop
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000

0800543c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d903      	bls.n	8005458 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005450:	f06f 0301 	mvn.w	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e025      	b.n	80054a4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	79fa      	ldrb	r2, [r7, #7]
 800545c:	4914      	ldr	r1, [pc, #80]	; (80054b0 <BSP_COM_Init+0x74>)
 800545e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005462:	4814      	ldr	r0, [pc, #80]	; (80054b4 <BSP_COM_Init+0x78>)
 8005464:	4613      	mov	r3, r2
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4403      	add	r3, r0
 800546e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005470:	79fa      	ldrb	r2, [r7, #7]
 8005472:	4613      	mov	r3, r2
 8005474:	015b      	lsls	r3, r3, #5
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <BSP_COM_Init+0x78>)
 800547c:	4413      	add	r3, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f86a 	bl	8005558 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005484:	79fa      	ldrb	r2, [r7, #7]
 8005486:	4613      	mov	r3, r2
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <BSP_COM_Init+0x78>)
 8005490:	4413      	add	r3, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f810 	bl	80054b8 <MX_USART2_UART_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800549e:	f06f 0303 	mvn.w	r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200001a4 	.word	0x200001a4
 80054b4:	200020a0 	.word	0x200020a0

080054b8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <MX_USART2_UART_Init+0x64>)
 80054c8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054d0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	220c      	movs	r2, #12
 80054e8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fe88 	bl	8008218 <HAL_UART_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40004400 	.word	0x40004400

08005520 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8005528:	4b09      	ldr	r3, [pc, #36]	; (8005550 <__io_putchar+0x30>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4613      	mov	r3, r2
 8005530:	015b      	lsls	r3, r3, #5
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <__io_putchar+0x34>)
 8005538:	1898      	adds	r0, r3, r2
 800553a:	1d39      	adds	r1, r7, #4
 800553c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005540:	2201      	movs	r2, #1
 8005542:	f002 fec1 	bl	80082c8 <HAL_UART_Transmit>
  return ch;
 8005546:	687b      	ldr	r3, [r7, #4]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20002124 	.word	0x20002124
 8005554:	200020a0 	.word	0x200020a0

08005558 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b0ac      	sub	sp, #176	; 0xb0
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	2288      	movs	r2, #136	; 0x88
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f006 fd59 	bl	800c020 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800556e:	2302      	movs	r3, #2
 8005570:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005572:	2300      	movs	r3, #0
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	4618      	mov	r0, r3
 800557c:	f001 fd5e 	bl	800703c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <USART2_MspInit+0xb8>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <USART2_MspInit+0xb8>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558a:	6593      	str	r3, [r2, #88]	; 0x58
 800558c:	4b20      	ldr	r3, [pc, #128]	; (8005610 <USART2_MspInit+0xb8>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <USART2_MspInit+0xb8>)
 800559a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <USART2_MspInit+0xb8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <USART2_MspInit+0xb8>)
 80055a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80055b0:	2304      	movs	r3, #4
 80055b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80055c8:	2307      	movs	r3, #7
 80055ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80055ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80055d2:	4619      	mov	r1, r3
 80055d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055d8:	f000 fc10 	bl	8005dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80055dc:	2308      	movs	r3, #8
 80055de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80055f4:	2307      	movs	r3, #7
 80055f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80055fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80055fe:	4619      	mov	r1, r3
 8005600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005604:	f000 fbfa 	bl	8005dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005608:	bf00      	nop
 800560a:	37b0      	adds	r7, #176	; 0xb0
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000

08005614 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <BSP_SPI1_Init+0x54>)
 8005620:	4a12      	ldr	r2, [pc, #72]	; (800566c <BSP_SPI1_Init+0x58>)
 8005622:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8005624:	4b12      	ldr	r3, [pc, #72]	; (8005670 <BSP_SPI1_Init+0x5c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	4911      	ldr	r1, [pc, #68]	; (8005670 <BSP_SPI1_Init+0x5c>)
 800562c:	600a      	str	r2, [r1, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d114      	bne.n	800565c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005632:	480d      	ldr	r0, [pc, #52]	; (8005668 <BSP_SPI1_Init+0x54>)
 8005634:	f002 fc7e 	bl	8007f34 <HAL_SPI_GetState>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10e      	bne.n	800565c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800563e:	480a      	ldr	r0, [pc, #40]	; (8005668 <BSP_SPI1_Init+0x54>)
 8005640:	f000 f882 	bl	8005748 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800564a:	4807      	ldr	r0, [pc, #28]	; (8005668 <BSP_SPI1_Init+0x54>)
 800564c:	f000 f83a 	bl	80056c4 <MX_SPI1_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8005656:	f06f 0307 	mvn.w	r3, #7
 800565a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800565c:	687b      	ldr	r3, [r7, #4]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20002128 	.word	0x20002128
 800566c:	40013000 	.word	0x40013000
 8005670:	2000218c 	.word	0x2000218c

08005674 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800568c:	9200      	str	r2, [sp, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	4807      	ldr	r0, [pc, #28]	; (80056b0 <BSP_SPI1_SendRecv+0x3c>)
 8005694:	f002 fa3b 	bl	8007b0e <HAL_SPI_TransmitReceive>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800569e:	f06f 0305 	mvn.w	r3, #5
 80056a2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80056a4:	697b      	ldr	r3, [r7, #20]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20002128 	.word	0x20002128

080056b4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056b8:	f000 f9ce 	bl	8005a58 <HAL_GetTick>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <MX_SPI1_Init+0x80>)
 80056d4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056dc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80056ea:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fe:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2228      	movs	r2, #40	; 0x28
 8005704:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2207      	movs	r2, #7
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f002 f942 	bl	80079b4 <HAL_SPI_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40013000 	.word	0x40013000

08005748 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <SPI1_MspInit+0xbc>)
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <SPI1_MspInit+0xbc>)
 8005756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800575a:	6613      	str	r3, [r2, #96]	; 0x60
 800575c:	4b29      	ldr	r3, [pc, #164]	; (8005804 <SPI1_MspInit+0xbc>)
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005768:	4b26      	ldr	r3, [pc, #152]	; (8005804 <SPI1_MspInit+0xbc>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	4a25      	ldr	r2, [pc, #148]	; (8005804 <SPI1_MspInit+0xbc>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005774:	4b23      	ldr	r3, [pc, #140]	; (8005804 <SPI1_MspInit+0xbc>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <SPI1_MspInit+0xbc>)
 8005782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <SPI1_MspInit+0xbc>)
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <SPI1_MspInit+0xbc>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579c:	2302      	movs	r3, #2
 800579e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a4:	2303      	movs	r3, #3
 80057a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80057a8:	2305      	movs	r3, #5
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4619      	mov	r1, r3
 80057b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057b6:	f000 fb21 	bl	8005dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057be:	2302      	movs	r3, #2
 80057c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c6:	2303      	movs	r3, #3
 80057c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80057ca:	2305      	movs	r3, #5
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80057ce:	f107 0314 	add.w	r3, r7, #20
 80057d2:	4619      	mov	r1, r3
 80057d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057d8:	f000 fb10 	bl	8005dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80057dc:	2308      	movs	r3, #8
 80057de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e8:	2303      	movs	r3, #3
 80057ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80057ec:	2305      	movs	r3, #5
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4619      	mov	r1, r3
 80057f6:	4804      	ldr	r0, [pc, #16]	; (8005808 <SPI1_MspInit+0xc0>)
 80057f8:	f000 fb00 	bl	8005dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80057fc:	bf00      	nop
 80057fe:	3728      	adds	r7, #40	; 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000
 8005808:	48000400 	.word	0x48000400

0800580c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e00a      	b.n	8005834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800581e:	f3af 8000 	nop.w
 8005822:	4601      	mov	r1, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	60ba      	str	r2, [r7, #8]
 800582a:	b2ca      	uxtb	r2, r1
 800582c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3301      	adds	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	dbf0      	blt.n	800581e <_read+0x12>
	}

return len;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e009      	b.n	800586c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	60ba      	str	r2, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fe5d 	bl	8005520 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	dbf1      	blt.n	8005858 <_write+0x12>
	}
	return len;
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <_close>:

int _close(int file)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
	return -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058a6:	605a      	str	r2, [r3, #4]
	return 0;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <_isatty>:

int _isatty(int file)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
	return 1;
 80058be:	2301      	movs	r3, #1
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
	return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <_sbrk+0x5c>)
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <_sbrk+0x60>)
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058fc:	4b13      	ldr	r3, [pc, #76]	; (800594c <_sbrk+0x64>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005904:	4b11      	ldr	r3, [pc, #68]	; (800594c <_sbrk+0x64>)
 8005906:	4a12      	ldr	r2, [pc, #72]	; (8005950 <_sbrk+0x68>)
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <_sbrk+0x64>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d207      	bcs.n	8005928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005918:	f006 fbd0 	bl	800c0bc <__errno>
 800591c:	4603      	mov	r3, r0
 800591e:	220c      	movs	r2, #12
 8005920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e009      	b.n	800593c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <_sbrk+0x64>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <_sbrk+0x64>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	4a05      	ldr	r2, [pc, #20]	; (800594c <_sbrk+0x64>)
 8005938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20018000 	.word	0x20018000
 8005948:	00000600 	.word	0x00000600
 800594c:	20002190 	.word	0x20002190
 8005950:	20002890 	.word	0x20002890

08005954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <SystemInit+0x20>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	4a05      	ldr	r2, [pc, #20]	; (8005974 <SystemInit+0x20>)
 8005960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <HAL_Init+0x3c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <HAL_Init+0x3c>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800598e:	2003      	movs	r0, #3
 8005990:	f000 f986 	bl	8005ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005994:	2000      	movs	r0, #0
 8005996:	f000 f80f 	bl	80059b8 <HAL_InitTick>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	71fb      	strb	r3, [r7, #7]
 80059a4:	e001      	b.n	80059aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059a6:	f7ff fc75 	bl	8005294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059aa:	79fb      	ldrb	r3, [r7, #7]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40022000 	.word	0x40022000

080059b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <HAL_InitTick+0x6c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d023      	beq.n	8005a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80059cc:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <HAL_InitTick+0x70>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <HAL_InitTick+0x6c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	4619      	mov	r1, r3
 80059d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059da:	fbb3 f3f1 	udiv	r3, r3, r1
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f99f 	bl	8005d26 <HAL_SYSTICK_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d809      	bhi.n	8005a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059f4:	2200      	movs	r2, #0
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	f000 f95b 	bl	8005cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <HAL_InitTick+0x74>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e007      	b.n	8005a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e004      	b.n	8005a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e001      	b.n	8005a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200001b0 	.word	0x200001b0
 8005a28:	200001a8 	.word	0x200001a8
 8005a2c:	200001ac 	.word	0x200001ac

08005a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_IncTick+0x20>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_IncTick+0x24>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <HAL_IncTick+0x24>)
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	200001b0 	.word	0x200001b0
 8005a54:	20002194 	.word	0x20002194

08005a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_GetTick+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20002194 	.word	0x20002194

08005a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a78:	f7ff ffee 	bl	8005a58 <HAL_GetTick>
 8005a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d005      	beq.n	8005a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_Delay+0x44>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a96:	bf00      	nop
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d8f7      	bhi.n	8005a98 <HAL_Delay+0x28>
  {
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200001b0 	.word	0x200001b0

08005ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	60d3      	str	r3, [r2, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <__NVIC_GetPriorityGrouping+0x18>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	f003 0307 	and.w	r3, r3, #7
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db0b      	blt.n	8005b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f003 021f 	and.w	r2, r3, #31
 8005b34:	4907      	ldr	r1, [pc, #28]	; (8005b54 <__NVIC_EnableIRQ+0x38>)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	e000e100 	.word	0xe000e100

08005b58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db12      	blt.n	8005b90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	f003 021f 	and.w	r2, r3, #31
 8005b70:	490a      	ldr	r1, [pc, #40]	; (8005b9c <__NVIC_DisableIRQ+0x44>)
 8005b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2001      	movs	r0, #1
 8005b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b7e:	3320      	adds	r3, #32
 8005b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b84:	f3bf 8f4f 	dsb	sy
}
 8005b88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b8a:	f3bf 8f6f 	isb	sy
}
 8005b8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db0a      	blt.n	8005bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	490c      	ldr	r1, [pc, #48]	; (8005bec <__NVIC_SetPriority+0x4c>)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc8:	e00a      	b.n	8005be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4908      	ldr	r1, [pc, #32]	; (8005bf0 <__NVIC_SetPriority+0x50>)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	440b      	add	r3, r1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	e000e100 	.word	0xe000e100
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf28      	it	cs
 8005c12:	2304      	movcs	r3, #4
 8005c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d902      	bls.n	8005c24 <NVIC_EncodePriority+0x30>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3b03      	subs	r3, #3
 8005c22:	e000      	b.n	8005c26 <NVIC_EncodePriority+0x32>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	401a      	ands	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	4313      	orrs	r3, r2
         );
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c6c:	d301      	bcc.n	8005c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <SysTick_Config+0x40>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c7a:	210f      	movs	r1, #15
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	f7ff ff8e 	bl	8005ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <SysTick_Config+0x40>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <SysTick_Config+0x40>)
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	e000e010 	.word	0xe000e010

08005ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff05 	bl	8005ab8 <__NVIC_SetPriorityGrouping>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc8:	f7ff ff1a 	bl	8005b00 <__NVIC_GetPriorityGrouping>
 8005ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	6978      	ldr	r0, [r7, #20]
 8005cd4:	f7ff ff8e 	bl	8005bf4 <NVIC_EncodePriority>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff5d 	bl	8005ba0 <__NVIC_SetPriority>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff0d 	bl	8005b1c <__NVIC_EnableIRQ>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff1d 	bl	8005b58 <__NVIC_DisableIRQ>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff94 	bl	8005c5c <SysTick_Config>
 8005d34:	4603      	mov	r3, r0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	460b      	mov	r3, r1
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
      break;
 8005d5c:	e002      	b.n	8005d64 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
      break;
 8005d62:	bf00      	nop
  }

  return status;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e003      	b.n	8005d8e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2201      	movs	r2, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <HAL_EXTI_IRQHandler+0x5c>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4798      	blx	r3
    }
  }
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40010414 	.word	0x40010414

08005dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0a:	e17f      	b.n	800610c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2101      	movs	r1, #1
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8171 	beq.w	8006106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d005      	beq.n	8005e3c <HAL_GPIO_Init+0x40>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d130      	bne.n	8005e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4013      	ands	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e72:	2201      	movs	r2, #1
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 0201 	and.w	r2, r3, #1
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d118      	bne.n	8005edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0201 	and.w	r2, r3, #1
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d017      	beq.n	8005f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4013      	ands	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d123      	bne.n	8005f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3208      	adds	r2, #8
 8005f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	220f      	movs	r2, #15
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4013      	ands	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	08da      	lsrs	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3208      	adds	r2, #8
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	2203      	movs	r2, #3
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f003 0203 	and.w	r2, r3, #3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80ac 	beq.w	8006106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fae:	4b5f      	ldr	r3, [pc, #380]	; (800612c <HAL_GPIO_Init+0x330>)
 8005fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb2:	4a5e      	ldr	r2, [pc, #376]	; (800612c <HAL_GPIO_Init+0x330>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8005fba:	4b5c      	ldr	r3, [pc, #368]	; (800612c <HAL_GPIO_Init+0x330>)
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fc6:	4a5a      	ldr	r2, [pc, #360]	; (8006130 <HAL_GPIO_Init+0x334>)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	3302      	adds	r3, #2
 8005fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	220f      	movs	r2, #15
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ff0:	d025      	beq.n	800603e <HAL_GPIO_Init+0x242>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a4f      	ldr	r2, [pc, #316]	; (8006134 <HAL_GPIO_Init+0x338>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01f      	beq.n	800603a <HAL_GPIO_Init+0x23e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a4e      	ldr	r2, [pc, #312]	; (8006138 <HAL_GPIO_Init+0x33c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d019      	beq.n	8006036 <HAL_GPIO_Init+0x23a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a4d      	ldr	r2, [pc, #308]	; (800613c <HAL_GPIO_Init+0x340>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_GPIO_Init+0x236>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a4c      	ldr	r2, [pc, #304]	; (8006140 <HAL_GPIO_Init+0x344>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00d      	beq.n	800602e <HAL_GPIO_Init+0x232>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a4b      	ldr	r2, [pc, #300]	; (8006144 <HAL_GPIO_Init+0x348>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <HAL_GPIO_Init+0x22e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a4a      	ldr	r2, [pc, #296]	; (8006148 <HAL_GPIO_Init+0x34c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_GPIO_Init+0x22a>
 8006022:	2306      	movs	r3, #6
 8006024:	e00c      	b.n	8006040 <HAL_GPIO_Init+0x244>
 8006026:	2307      	movs	r3, #7
 8006028:	e00a      	b.n	8006040 <HAL_GPIO_Init+0x244>
 800602a:	2305      	movs	r3, #5
 800602c:	e008      	b.n	8006040 <HAL_GPIO_Init+0x244>
 800602e:	2304      	movs	r3, #4
 8006030:	e006      	b.n	8006040 <HAL_GPIO_Init+0x244>
 8006032:	2303      	movs	r3, #3
 8006034:	e004      	b.n	8006040 <HAL_GPIO_Init+0x244>
 8006036:	2302      	movs	r3, #2
 8006038:	e002      	b.n	8006040 <HAL_GPIO_Init+0x244>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <HAL_GPIO_Init+0x244>
 800603e:	2300      	movs	r3, #0
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	f002 0203 	and.w	r2, r2, #3
 8006046:	0092      	lsls	r2, r2, #2
 8006048:	4093      	lsls	r3, r2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006050:	4937      	ldr	r1, [pc, #220]	; (8006130 <HAL_GPIO_Init+0x334>)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	3302      	adds	r3, #2
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800605e:	4b3b      	ldr	r3, [pc, #236]	; (800614c <HAL_GPIO_Init+0x350>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	43db      	mvns	r3, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006082:	4a32      	ldr	r2, [pc, #200]	; (800614c <HAL_GPIO_Init+0x350>)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006088:	4b30      	ldr	r3, [pc, #192]	; (800614c <HAL_GPIO_Init+0x350>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	43db      	mvns	r3, r3
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4013      	ands	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060ac:	4a27      	ldr	r2, [pc, #156]	; (800614c <HAL_GPIO_Init+0x350>)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060b2:	4b26      	ldr	r3, [pc, #152]	; (800614c <HAL_GPIO_Init+0x350>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4013      	ands	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060d6:	4a1d      	ldr	r2, [pc, #116]	; (800614c <HAL_GPIO_Init+0x350>)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <HAL_GPIO_Init+0x350>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4013      	ands	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006100:	4a12      	ldr	r2, [pc, #72]	; (800614c <HAL_GPIO_Init+0x350>)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	3301      	adds	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	f47f ae78 	bne.w	8005e0c <HAL_GPIO_Init+0x10>
  }
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
 8006130:	40010000 	.word	0x40010000
 8006134:	48000400 	.word	0x48000400
 8006138:	48000800 	.word	0x48000800
 800613c:	48000c00 	.word	0x48000c00
 8006140:	48001000 	.word	0x48001000
 8006144:	48001400 	.word	0x48001400
 8006148:	48001800 	.word	0x48001800
 800614c:	40010400 	.word	0x40010400

08006150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800615e:	e0cd      	b.n	80062fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006160:	2201      	movs	r2, #1
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80c0 	beq.w	80062f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006176:	4a68      	ldr	r2, [pc, #416]	; (8006318 <HAL_GPIO_DeInit+0x1c8>)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	3302      	adds	r3, #2
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	220f      	movs	r2, #15
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800619e:	d025      	beq.n	80061ec <HAL_GPIO_DeInit+0x9c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <HAL_GPIO_DeInit+0x1cc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d01f      	beq.n	80061e8 <HAL_GPIO_DeInit+0x98>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a5d      	ldr	r2, [pc, #372]	; (8006320 <HAL_GPIO_DeInit+0x1d0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d019      	beq.n	80061e4 <HAL_GPIO_DeInit+0x94>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a5c      	ldr	r2, [pc, #368]	; (8006324 <HAL_GPIO_DeInit+0x1d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_GPIO_DeInit+0x90>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a5b      	ldr	r2, [pc, #364]	; (8006328 <HAL_GPIO_DeInit+0x1d8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00d      	beq.n	80061dc <HAL_GPIO_DeInit+0x8c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a5a      	ldr	r2, [pc, #360]	; (800632c <HAL_GPIO_DeInit+0x1dc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <HAL_GPIO_DeInit+0x88>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a59      	ldr	r2, [pc, #356]	; (8006330 <HAL_GPIO_DeInit+0x1e0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d101      	bne.n	80061d4 <HAL_GPIO_DeInit+0x84>
 80061d0:	2306      	movs	r3, #6
 80061d2:	e00c      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061d4:	2307      	movs	r3, #7
 80061d6:	e00a      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061d8:	2305      	movs	r3, #5
 80061da:	e008      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061dc:	2304      	movs	r3, #4
 80061de:	e006      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061e0:	2303      	movs	r3, #3
 80061e2:	e004      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e002      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_GPIO_DeInit+0x9e>
 80061ec:	2300      	movs	r3, #0
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	f002 0203 	and.w	r2, r2, #3
 80061f4:	0092      	lsls	r2, r2, #2
 80061f6:	4093      	lsls	r3, r2
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d132      	bne.n	8006264 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80061fe:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	43db      	mvns	r3, r3
 8006206:	494b      	ldr	r1, [pc, #300]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 8006208:	4013      	ands	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800620c:	4b49      	ldr	r3, [pc, #292]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	43db      	mvns	r3, r3
 8006214:	4947      	ldr	r1, [pc, #284]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 8006216:	4013      	ands	r3, r2
 8006218:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800621a:	4b46      	ldr	r3, [pc, #280]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	43db      	mvns	r3, r3
 8006222:	4944      	ldr	r1, [pc, #272]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 8006224:	4013      	ands	r3, r2
 8006226:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006228:	4b42      	ldr	r3, [pc, #264]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	43db      	mvns	r3, r3
 8006230:	4940      	ldr	r1, [pc, #256]	; (8006334 <HAL_GPIO_DeInit+0x1e4>)
 8006232:	4013      	ands	r3, r2
 8006234:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	220f      	movs	r2, #15
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <HAL_GPIO_DeInit+0x1c8>)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	3302      	adds	r3, #2
 800624e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43da      	mvns	r2, r3
 8006256:	4830      	ldr	r0, [pc, #192]	; (8006318 <HAL_GPIO_DeInit+0x1c8>)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	400a      	ands	r2, r1
 800625e:	3302      	adds	r3, #2
 8006260:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	2103      	movs	r1, #3
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	08da      	lsrs	r2, r3, #3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3208      	adds	r2, #8
 8006280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	08d2      	lsrs	r2, r2, #3
 8006298:	4019      	ands	r1, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3208      	adds	r2, #8
 800629e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	2103      	movs	r1, #3
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	2101      	movs	r1, #1
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	43db      	mvns	r3, r3
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	2103      	movs	r1, #3
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	43db      	mvns	r3, r3
 80062dc:	401a      	ands	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	2101      	movs	r1, #1
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	401a      	ands	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	3301      	adds	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	f47f af2b 	bne.w	8006160 <HAL_GPIO_DeInit+0x10>
  }
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40010000 	.word	0x40010000
 800631c:	48000400 	.word	0x48000400
 8006320:	48000800 	.word	0x48000800
 8006324:	48000c00 	.word	0x48000c00
 8006328:	48001000 	.word	0x48001000
 800632c:	48001400 	.word	0x48001400
 8006330:	48001800 	.word	0x48001800
 8006334:	40010400 	.word	0x40010400

08006338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	887b      	ldrh	r3, [r7, #2]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e001      	b.n	800635a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
 8006374:	4613      	mov	r3, r2
 8006376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006378:	787b      	ldrb	r3, [r7, #1]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006384:	e002      	b.n	800638c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40007000 	.word	0x40007000

080063b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c2:	d130      	bne.n	8006426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d038      	beq.n	8006444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063da:	4a1e      	ldr	r2, [pc, #120]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2232      	movs	r2, #50	; 0x32
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
 80063ec:	4a1b      	ldr	r2, [pc, #108]	; (800645c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0c9b      	lsrs	r3, r3, #18
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063f8:	e002      	b.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006400:	4b14      	ldr	r3, [pc, #80]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640c:	d102      	bne.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f2      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006414:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d110      	bne.n	8006444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e00f      	b.n	8006446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800642e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006432:	d007      	beq.n	8006444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006434:	4b07      	ldr	r3, [pc, #28]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800643c:	4a05      	ldr	r2, [pc, #20]	; (8006454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800643e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40007000 	.word	0x40007000
 8006458:	200001a8 	.word	0x200001a8
 800645c:	431bde83 	.word	0x431bde83

08006460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e3d8      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006472:	4b97      	ldr	r3, [pc, #604]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800647c:	4b94      	ldr	r3, [pc, #592]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80e4 	beq.w	800665c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_RCC_OscConfig+0x4a>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	f040 808b 	bne.w	80065b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 8087 	bne.w	80065b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064aa:	4b89      	ldr	r3, [pc, #548]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_RCC_OscConfig+0x62>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e3b0      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	4b82      	ldr	r3, [pc, #520]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <HAL_RCC_OscConfig+0x7c>
 80064d2:	4b7f      	ldr	r3, [pc, #508]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064da:	e005      	b.n	80064e8 <HAL_RCC_OscConfig+0x88>
 80064dc:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80064de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d223      	bcs.n	8006534 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fd43 	bl	8006f7c <RCC_SetFlashLatencyFromMSIRange>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e391      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006500:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a72      	ldr	r2, [pc, #456]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006506:	f043 0308 	orr.w	r3, r3, #8
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	496d      	ldr	r1, [pc, #436]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800651e:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	4968      	ldr	r1, [pc, #416]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
 8006532:	e025      	b.n	8006580 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006534:	4b66      	ldr	r3, [pc, #408]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a65      	ldr	r2, [pc, #404]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800653a:	f043 0308 	orr.w	r3, r3, #8
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b63      	ldr	r3, [pc, #396]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	4960      	ldr	r1, [pc, #384]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006552:	4b5f      	ldr	r3, [pc, #380]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	495b      	ldr	r1, [pc, #364]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fd03 	bl	8006f7c <RCC_SetFlashLatencyFromMSIRange>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e351      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006580:	f000 fc38 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8006584:	4602      	mov	r2, r0
 8006586:	4b52      	ldr	r3, [pc, #328]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	091b      	lsrs	r3, r3, #4
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	4950      	ldr	r1, [pc, #320]	; (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006592:	5ccb      	ldrb	r3, [r1, r3]
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
 800659c:	4a4e      	ldr	r2, [pc, #312]	; (80066d8 <HAL_RCC_OscConfig+0x278>)
 800659e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065a0:	4b4e      	ldr	r3, [pc, #312]	; (80066dc <HAL_RCC_OscConfig+0x27c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fa07 	bl	80059b8 <HAL_InitTick>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d052      	beq.n	800665a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	e335      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d032      	beq.n	8006626 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065c0:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a42      	ldr	r2, [pc, #264]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065cc:	f7ff fa44 	bl	8005a58 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065d4:	f7ff fa40 	bl	8005a58 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e31e      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065e6:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065f2:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a36      	ldr	r2, [pc, #216]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	4931      	ldr	r1, [pc, #196]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	492c      	ldr	r1, [pc, #176]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	e01a      	b.n	800665c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006626:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006632:	f7ff fa11 	bl	8005a58 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800663a:	f7ff fa0d 	bl	8005a58 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e2eb      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800664c:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0x1da>
 8006658:	e000      	b.n	800665c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800665a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d074      	beq.n	8006752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b08      	cmp	r3, #8
 800666c:	d005      	beq.n	800667a <HAL_RCC_OscConfig+0x21a>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d10e      	bne.n	8006692 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d10b      	bne.n	8006692 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d064      	beq.n	8006750 <HAL_RCC_OscConfig+0x2f0>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d160      	bne.n	8006750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e2c8      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669a:	d106      	bne.n	80066aa <HAL_RCC_OscConfig+0x24a>
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80066a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e026      	b.n	80066f8 <HAL_RCC_OscConfig+0x298>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b2:	d115      	bne.n	80066e0 <HAL_RCC_OscConfig+0x280>
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80066ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4b03      	ldr	r3, [pc, #12]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a02      	ldr	r2, [pc, #8]	; (80066d0 <HAL_RCC_OscConfig+0x270>)
 80066c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e014      	b.n	80066f8 <HAL_RCC_OscConfig+0x298>
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800e19c 	.word	0x0800e19c
 80066d8:	200001a8 	.word	0x200001a8
 80066dc:	200001ac 	.word	0x200001ac
 80066e0:	4ba0      	ldr	r3, [pc, #640]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a9f      	ldr	r2, [pc, #636]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80066e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	4b9d      	ldr	r3, [pc, #628]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a9c      	ldr	r2, [pc, #624]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80066f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d013      	beq.n	8006728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7ff f9aa 	bl	8005a58 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006708:	f7ff f9a6 	bl	8005a58 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b64      	cmp	r3, #100	; 0x64
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e284      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671a:	4b92      	ldr	r3, [pc, #584]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x2a8>
 8006726:	e014      	b.n	8006752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7ff f996 	bl	8005a58 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006730:	f7ff f992 	bl	8005a58 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b64      	cmp	r3, #100	; 0x64
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e270      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006742:	4b88      	ldr	r3, [pc, #544]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x2d0>
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d060      	beq.n	8006820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b04      	cmp	r3, #4
 8006762:	d005      	beq.n	8006770 <HAL_RCC_OscConfig+0x310>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b0c      	cmp	r3, #12
 8006768:	d119      	bne.n	800679e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d116      	bne.n	800679e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006770:	4b7c      	ldr	r3, [pc, #496]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x328>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e24d      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006788:	4b76      	ldr	r3, [pc, #472]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	061b      	lsls	r3, r3, #24
 8006796:	4973      	ldr	r1, [pc, #460]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006798:	4313      	orrs	r3, r2
 800679a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800679c:	e040      	b.n	8006820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d023      	beq.n	80067ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a6:	4b6f      	ldr	r3, [pc, #444]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a6e      	ldr	r2, [pc, #440]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b2:	f7ff f951 	bl	8005a58 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ba:	f7ff f94d 	bl	8005a58 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e22b      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067cc:	4b65      	ldr	r3, [pc, #404]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d8:	4b62      	ldr	r3, [pc, #392]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	495f      	ldr	r1, [pc, #380]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
 80067ec:	e018      	b.n	8006820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ee:	4b5d      	ldr	r3, [pc, #372]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5c      	ldr	r2, [pc, #368]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80067f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7ff f92d 	bl	8005a58 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006802:	f7ff f929 	bl	8005a58 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e207      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006814:	4b53      	ldr	r3, [pc, #332]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d03c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006834:	4b4b      	ldr	r3, [pc, #300]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683a:	4a4a      	ldr	r2, [pc, #296]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006844:	f7ff f908 	bl	8005a58 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684c:	f7ff f904 	bl	8005a58 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e1e2      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800685e:	4b41      	ldr	r3, [pc, #260]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ef      	beq.n	800684c <HAL_RCC_OscConfig+0x3ec>
 800686c:	e01b      	b.n	80068a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800686e:	4b3d      	ldr	r3, [pc, #244]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006874:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7ff f8eb 	bl	8005a58 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006886:	f7ff f8e7 	bl	8005a58 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e1c5      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006898:	4b32      	ldr	r3, [pc, #200]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 800689a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ef      	bne.n	8006886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80a6 	beq.w	8006a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b4:	2300      	movs	r3, #0
 80068b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068b8:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c4:	4b27      	ldr	r3, [pc, #156]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	4a26      	ldr	r2, [pc, #152]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80068ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ce:	6593      	str	r3, [r2, #88]	; 0x58
 80068d0:	4b24      	ldr	r3, [pc, #144]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 80068d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068dc:	2301      	movs	r3, #1
 80068de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068e0:	4b21      	ldr	r3, [pc, #132]	; (8006968 <HAL_RCC_OscConfig+0x508>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d118      	bne.n	800691e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ec:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <HAL_RCC_OscConfig+0x508>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_RCC_OscConfig+0x508>)
 80068f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068f8:	f7ff f8ae 	bl	8005a58 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006900:	f7ff f8aa 	bl	8005a58 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e188      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <HAL_RCC_OscConfig+0x508>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d108      	bne.n	8006938 <HAL_RCC_OscConfig+0x4d8>
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006936:	e029      	b.n	800698c <HAL_RCC_OscConfig+0x52c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b05      	cmp	r3, #5
 800693e:	d115      	bne.n	800696c <HAL_RCC_OscConfig+0x50c>
 8006940:	4b08      	ldr	r3, [pc, #32]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	4a07      	ldr	r2, [pc, #28]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006948:	f043 0304 	orr.w	r3, r3, #4
 800694c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	4a03      	ldr	r2, [pc, #12]	; (8006964 <HAL_RCC_OscConfig+0x504>)
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006960:	e014      	b.n	800698c <HAL_RCC_OscConfig+0x52c>
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000
 8006968:	40007000 	.word	0x40007000
 800696c:	4b91      	ldr	r3, [pc, #580]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	4a90      	ldr	r2, [pc, #576]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800697c:	4b8d      	ldr	r3, [pc, #564]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006982:	4a8c      	ldr	r2, [pc, #560]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d016      	beq.n	80069c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7ff f860 	bl	8005a58 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7ff f85c 	bl	8005a58 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e138      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b2:	4b80      	ldr	r3, [pc, #512]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ed      	beq.n	800699c <HAL_RCC_OscConfig+0x53c>
 80069c0:	e015      	b.n	80069ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c2:	f7ff f849 	bl	8005a58 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7ff f845 	bl	8005a58 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e121      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e0:	4b74      	ldr	r3, [pc, #464]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ed      	bne.n	80069ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b6f      	ldr	r3, [pc, #444]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 80069f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f8:	4a6e      	ldr	r2, [pc, #440]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 810c 	beq.w	8006c22 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	f040 80d4 	bne.w	8006bbc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a14:	4b67      	ldr	r3, [pc, #412]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 0203 	and.w	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d130      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	3b01      	subs	r3, #1
 8006a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d127      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d11f      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a54:	2a07      	cmp	r2, #7
 8006a56:	bf14      	ite	ne
 8006a58:	2201      	movne	r2, #1
 8006a5a:	2200      	moveq	r2, #0
 8006a5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d113      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d109      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	3b01      	subs	r3, #1
 8006a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d06e      	beq.n	8006b68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b0c      	cmp	r3, #12
 8006a8e:	d069      	beq.n	8006b64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a90:	4b48      	ldr	r3, [pc, #288]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a9c:	4b45      	ldr	r3, [pc, #276]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0bb      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006aac:	4b41      	ldr	r3, [pc, #260]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a40      	ldr	r2, [pc, #256]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ab8:	f7fe ffce 	bl	8005a58 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac0:	f7fe ffca 	bl	8005a58 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e0a8      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad2:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ade:	4b35      	ldr	r3, [pc, #212]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <HAL_RCC_OscConfig+0x758>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006aee:	3a01      	subs	r2, #1
 8006af0:	0112      	lsls	r2, r2, #4
 8006af2:	4311      	orrs	r1, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006af8:	0212      	lsls	r2, r2, #8
 8006afa:	4311      	orrs	r1, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b00:	0852      	lsrs	r2, r2, #1
 8006b02:	3a01      	subs	r2, #1
 8006b04:	0552      	lsls	r2, r2, #21
 8006b06:	4311      	orrs	r1, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b0c:	0852      	lsrs	r2, r2, #1
 8006b0e:	3a01      	subs	r2, #1
 8006b10:	0652      	lsls	r2, r2, #25
 8006b12:	4311      	orrs	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b18:	0912      	lsrs	r2, r2, #4
 8006b1a:	0452      	lsls	r2, r2, #17
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	4925      	ldr	r1, [pc, #148]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b24:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b30:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b3c:	f7fe ff8c 	bl	8005a58 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b44:	f7fe ff88 	bl	8005a58 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e066      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b62:	e05e      	b.n	8006c22 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e05d      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d156      	bne.n	8006c22 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a0e      	ldr	r2, [pc, #56]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a0b      	ldr	r2, [pc, #44]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b8c:	f7fe ff64 	bl	8005a58 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fe ff60 	bl	8005a58 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e03e      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba6:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <HAL_RCC_OscConfig+0x754>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x734>
 8006bb2:	e036      	b.n	8006c22 <HAL_RCC_OscConfig+0x7c2>
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	2b0c      	cmp	r3, #12
 8006bc0:	d02d      	beq.n	8006c1e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006be6:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006bec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fe ff2f 	bl	8005a58 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fe ff2b 	bl	8005a58 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e009      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c10:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCC_OscConfig+0x7cc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x79e>
 8006c1c:	e001      	b.n	8006c22 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40021000 	.word	0x40021000

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0c8      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b66      	ldr	r3, [pc, #408]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b63      	ldr	r3, [pc, #396]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	4961      	ldr	r1, [pc, #388]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b5f      	ldr	r3, [pc, #380]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0b0      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d04c      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c88:	4b56      	ldr	r3, [pc, #344]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d121      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e09e      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ca0:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d115      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e092      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cb8:	4b4a      	ldr	r3, [pc, #296]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e086      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cc8:	4b46      	ldr	r3, [pc, #280]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e07e      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cd8:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f023 0203 	bic.w	r2, r3, #3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	493f      	ldr	r1, [pc, #252]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cea:	f7fe feb5 	bl	8005a58 <HAL_GetTick>
 8006cee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf0:	e00a      	b.n	8006d08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf2:	f7fe feb1 	bl	8005a58 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e066      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d08:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 020c 	and.w	r2, r3, #12
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d1eb      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	492c      	ldr	r1, [pc, #176]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d210      	bcs.n	8006d68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 0207 	bic.w	r2, r3, #7
 8006d4e:	4924      	ldr	r1, [pc, #144]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d56:	4b22      	ldr	r3, [pc, #136]	; (8006de0 <HAL_RCC_ClockConfig+0x1b0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e036      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4918      	ldr	r1, [pc, #96]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4910      	ldr	r1, [pc, #64]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006da6:	f000 f825 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <HAL_RCC_ClockConfig+0x1b4>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	490c      	ldr	r1, [pc, #48]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006db8:	5ccb      	ldrb	r3, [r1, r3]
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fdf4 	bl	80059b8 <HAL_InitTick>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40022000 	.word	0x40022000
 8006de4:	40021000 	.word	0x40021000
 8006de8:	0800e19c 	.word	0x0800e19c
 8006dec:	200001a8 	.word	0x200001a8
 8006df0:	200001ac 	.word	0x200001ac

08006df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e02:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e0c:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_RCC_GetSysClockFreq+0x34>
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d121      	bne.n	8006e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d11e      	bne.n	8006e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e28:	4b34      	ldr	r3, [pc, #208]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e34:	4b31      	ldr	r3, [pc, #196]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3a:	0a1b      	lsrs	r3, r3, #8
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e005      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e50:	4a2b      	ldr	r2, [pc, #172]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10d      	bne.n	8006e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e64:	e00a      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d102      	bne.n	8006e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e004      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e78:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8006e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b0c      	cmp	r3, #12
 8006e80:	d134      	bne.n	8006eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e82:	4b1e      	ldr	r3, [pc, #120]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d003      	beq.n	8006e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8006e98:	e005      	b.n	8006ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e9a:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e9c:	617b      	str	r3, [r7, #20]
      break;
 8006e9e:	e005      	b.n	8006eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ea2:	617b      	str	r3, [r7, #20]
      break;
 8006ea4:	e002      	b.n	8006eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	617b      	str	r3, [r7, #20]
      break;
 8006eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	fb03 f202 	mul.w	r2, r3, r2
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <HAL_RCC_GetSysClockFreq+0x108>)
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	0e5b      	lsrs	r3, r3, #25
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	3301      	adds	r3, #1
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006eec:	69bb      	ldr	r3, [r7, #24]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	; 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000
 8006f00:	0800e1b4 	.word	0x0800e1b4
 8006f04:	00f42400 	.word	0x00f42400
 8006f08:	007a1200 	.word	0x007a1200

08006f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f12:	681b      	ldr	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200001a8 	.word	0x200001a8

08006f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f28:	f7ff fff0 	bl	8006f0c <HAL_RCC_GetHCLKFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	0800e1ac 	.word	0x0800e1ac

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f54:	f7ff ffda 	bl	8006f0c <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	0adb      	lsrs	r3, r3, #11
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4904      	ldr	r1, [pc, #16]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000
 8006f78:	0800e1ac 	.word	0x0800e1ac

08006f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f88:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f94:	f7ff fa00 	bl	8006398 <HAL_PWREx_GetVoltageRange>
 8006f98:	6178      	str	r0, [r7, #20]
 8006f9a:	e014      	b.n	8006fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f9c:	4b25      	ldr	r3, [pc, #148]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	4a24      	ldr	r2, [pc, #144]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8006fa8:	4b22      	ldr	r3, [pc, #136]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fb4:	f7ff f9f0 	bl	8006398 <HAL_PWREx_GetVoltageRange>
 8006fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fba:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fcc:	d10b      	bne.n	8006fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b80      	cmp	r3, #128	; 0x80
 8006fd2:	d919      	bls.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8006fd8:	d902      	bls.n	8006fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fda:	2302      	movs	r3, #2
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	e013      	b.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e010      	b.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b80      	cmp	r3, #128	; 0x80
 8006fea:	d902      	bls.n	8006ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fec:	2303      	movs	r3, #3
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	e00a      	b.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d102      	bne.n	8006ffe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e004      	b.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b70      	cmp	r3, #112	; 0x70
 8007002:	d101      	bne.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007004:	2301      	movs	r3, #1
 8007006:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f023 0207 	bic.w	r2, r3, #7
 8007010:	4909      	ldr	r1, [pc, #36]	; (8007038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d001      	beq.n	800702a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40021000 	.word	0x40021000
 8007038:	40022000 	.word	0x40022000

0800703c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007044:	2300      	movs	r3, #0
 8007046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007048:	2300      	movs	r3, #0
 800704a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007054:	2b00      	cmp	r3, #0
 8007056:	d041      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007060:	d02a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007062:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007066:	d824      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706c:	d008      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800706e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007072:	d81e      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800707c:	d010      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800707e:	e018      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007080:	4b86      	ldr	r3, [pc, #536]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4a85      	ldr	r2, [pc, #532]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800708a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800708c:	e015      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fabb 	bl	8007610 <RCCEx_PLLSAI1_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800709e:	e00c      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3320      	adds	r3, #32
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fba6 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	74fb      	strb	r3, [r7, #19]
      break;
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ba:	7cfb      	ldrb	r3, [r7, #19]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070c0:	4b76      	ldr	r3, [pc, #472]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ce:	4973      	ldr	r1, [pc, #460]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070d6:	e001      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	7cfb      	ldrb	r3, [r7, #19]
 80070da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d041      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070f0:	d02a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80070f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070f6:	d824      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80070f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fc:	d008      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007102:	d81e      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800710c:	d010      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800710e:	e018      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007110:	4b62      	ldr	r3, [pc, #392]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a61      	ldr	r2, [pc, #388]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800711c:	e015      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fa73 	bl	8007610 <RCCEx_PLLSAI1_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800712e:	e00c      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3320      	adds	r3, #32
 8007134:	2100      	movs	r1, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fb5e 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 800713c:	4603      	mov	r3, r0
 800713e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007140:	e003      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	74fb      	strb	r3, [r7, #19]
      break;
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714a:	7cfb      	ldrb	r3, [r7, #19]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007150:	4b52      	ldr	r3, [pc, #328]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715e:	494f      	ldr	r1, [pc, #316]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007166:	e001      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	7cfb      	ldrb	r3, [r7, #19]
 800716a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a0 	beq.w	80072ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800717a:	2300      	movs	r3, #0
 800717c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800717e:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00d      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	4b41      	ldr	r3, [pc, #260]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	4a40      	ldr	r2, [pc, #256]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800719a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719e:	6593      	str	r3, [r2, #88]	; 0x58
 80071a0:	4b3e      	ldr	r3, [pc, #248]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ac:	2301      	movs	r3, #1
 80071ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071b0:	4b3b      	ldr	r3, [pc, #236]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3a      	ldr	r2, [pc, #232]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071bc:	f7fe fc4c 	bl	8005a58 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071c2:	e009      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c4:	f7fe fc48 	bl	8005a58 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d902      	bls.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	74fb      	strb	r3, [r7, #19]
        break;
 80071d6:	e005      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071d8:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ef      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d15c      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071ea:	4b2c      	ldr	r3, [pc, #176]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01f      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	429a      	cmp	r2, r3
 8007206:	d019      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007208:	4b24      	ldr	r3, [pc, #144]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007214:	4b21      	ldr	r3, [pc, #132]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800721c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800722c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fe fc07 	bl	8005a58 <HAL_GetTick>
 800724a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800724c:	e00b      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724e:	f7fe fc03 	bl	8005a58 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	4293      	cmp	r3, r2
 800725e:	d902      	bls.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	74fb      	strb	r3, [r7, #19]
            break;
 8007264:	e006      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ec      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728a:	4904      	ldr	r1, [pc, #16]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007292:	e009      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	74bb      	strb	r3, [r7, #18]
 8007298:	e006      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072a8:	7c7b      	ldrb	r3, [r7, #17]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d105      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ae:	4b9e      	ldr	r3, [pc, #632]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	4a9d      	ldr	r2, [pc, #628]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072c6:	4b98      	ldr	r3, [pc, #608]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f023 0203 	bic.w	r2, r3, #3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	4994      	ldr	r1, [pc, #592]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072e8:	4b8f      	ldr	r3, [pc, #572]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ee:	f023 020c 	bic.w	r2, r3, #12
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	498c      	ldr	r1, [pc, #560]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800730a:	4b87      	ldr	r3, [pc, #540]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	4983      	ldr	r1, [pc, #524]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800732c:	4b7e      	ldr	r3, [pc, #504]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	497b      	ldr	r1, [pc, #492]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800734e:	4b76      	ldr	r3, [pc, #472]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	4972      	ldr	r1, [pc, #456]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007370:	4b6d      	ldr	r3, [pc, #436]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737e:	496a      	ldr	r1, [pc, #424]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007392:	4b65      	ldr	r3, [pc, #404]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a0:	4961      	ldr	r1, [pc, #388]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073b4:	4b5c      	ldr	r3, [pc, #368]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c2:	4959      	ldr	r1, [pc, #356]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073d6:	4b54      	ldr	r3, [pc, #336]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e4:	4950      	ldr	r1, [pc, #320]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073f8:	4b4b      	ldr	r3, [pc, #300]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	4948      	ldr	r1, [pc, #288]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800741a:	4b43      	ldr	r3, [pc, #268]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007428:	493f      	ldr	r1, [pc, #252]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d028      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800743c:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744a:	4937      	ldr	r1, [pc, #220]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800745a:	d106      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800745c:	4b32      	ldr	r3, [pc, #200]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4a31      	ldr	r2, [pc, #196]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007466:	60d3      	str	r3, [r2, #12]
 8007468:	e011      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007472:	d10c      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	2101      	movs	r1, #1
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f8c8 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800748a:	7cfb      	ldrb	r3, [r7, #19]
 800748c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d028      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800749a:	4b23      	ldr	r3, [pc, #140]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	491f      	ldr	r1, [pc, #124]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074b8:	d106      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074c4:	60d3      	str	r3, [r2, #12]
 80074c6:	e011      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074d0:	d10c      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	2101      	movs	r1, #1
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 f899 	bl	8007610 <RCCEx_PLLSAI1_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074e2:	7cfb      	ldrb	r3, [r7, #19]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80074e8:	7cfb      	ldrb	r3, [r7, #19]
 80074ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d02b      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007506:	4908      	ldr	r1, [pc, #32]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a02      	ldr	r2, [pc, #8]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007522:	60d3      	str	r3, [r2, #12]
 8007524:	e014      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007534:	d10c      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3304      	adds	r3, #4
 800753a:	2101      	movs	r1, #1
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f867 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007546:	7cfb      	ldrb	r3, [r7, #19]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800754c:	7cfb      	ldrb	r3, [r7, #19]
 800754e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d02f      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800755c:	4b2b      	ldr	r3, [pc, #172]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800755e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800756a:	4928      	ldr	r1, [pc, #160]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757a:	d10d      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3304      	adds	r3, #4
 8007580:	2102      	movs	r1, #2
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f844 	bl	8007610 <RCCEx_PLLSAI1_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800758c:	7cfb      	ldrb	r3, [r7, #19]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d014      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007592:	7cfb      	ldrb	r3, [r7, #19]
 8007594:	74bb      	strb	r3, [r7, #18]
 8007596:	e011      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800759c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a0:	d10c      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3320      	adds	r3, #32
 80075a6:	2102      	movs	r1, #2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f925 	bl	80077f8 <RCCEx_PLLSAI2_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d6:	490d      	ldr	r1, [pc, #52]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fa:	4904      	ldr	r1, [pc, #16]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007602:	7cbb      	ldrb	r3, [r7, #18]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40021000 	.word	0x40021000

08007610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800761e:	4b75      	ldr	r3, [pc, #468]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d018      	beq.n	800765c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800762a:	4b72      	ldr	r3, [pc, #456]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0203 	and.w	r2, r3, #3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d10d      	bne.n	8007656 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
       ||
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007642:	4b6c      	ldr	r3, [pc, #432]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
       ||
 8007652:	429a      	cmp	r2, r3
 8007654:	d047      	beq.n	80076e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	73fb      	strb	r3, [r7, #15]
 800765a:	e044      	b.n	80076e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d018      	beq.n	8007696 <RCCEx_PLLSAI1_Config+0x86>
 8007664:	2b03      	cmp	r3, #3
 8007666:	d825      	bhi.n	80076b4 <RCCEx_PLLSAI1_Config+0xa4>
 8007668:	2b01      	cmp	r3, #1
 800766a:	d002      	beq.n	8007672 <RCCEx_PLLSAI1_Config+0x62>
 800766c:	2b02      	cmp	r3, #2
 800766e:	d009      	beq.n	8007684 <RCCEx_PLLSAI1_Config+0x74>
 8007670:	e020      	b.n	80076b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007672:	4b60      	ldr	r3, [pc, #384]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d11d      	bne.n	80076ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007682:	e01a      	b.n	80076ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007684:	4b5b      	ldr	r3, [pc, #364]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800768c:	2b00      	cmp	r3, #0
 800768e:	d116      	bne.n	80076be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007694:	e013      	b.n	80076be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007696:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10f      	bne.n	80076c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076a2:	4b54      	ldr	r3, [pc, #336]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076b2:	e006      	b.n	80076c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e004      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10d      	bne.n	80076e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076ca:	4b4a      	ldr	r3, [pc, #296]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	3b01      	subs	r3, #1
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	430b      	orrs	r3, r1
 80076e0:	4944      	ldr	r1, [pc, #272]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d17d      	bne.n	80077e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076ec:	4b41      	ldr	r3, [pc, #260]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a40      	ldr	r2, [pc, #256]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f8:	f7fe f9ae 	bl	8005a58 <HAL_GetTick>
 80076fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076fe:	e009      	b.n	8007714 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007700:	f7fe f9aa 	bl	8005a58 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d902      	bls.n	8007714 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
        break;
 8007712:	e005      	b.n	8007720 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007714:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1ef      	bne.n	8007700 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d160      	bne.n	80077e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d111      	bne.n	8007750 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800772c:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6892      	ldr	r2, [r2, #8]
 800773c:	0211      	lsls	r1, r2, #8
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	68d2      	ldr	r2, [r2, #12]
 8007742:	0912      	lsrs	r2, r2, #4
 8007744:	0452      	lsls	r2, r2, #17
 8007746:	430a      	orrs	r2, r1
 8007748:	492a      	ldr	r1, [pc, #168]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	610b      	str	r3, [r1, #16]
 800774e:	e027      	b.n	80077a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d112      	bne.n	800777c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800775e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6892      	ldr	r2, [r2, #8]
 8007766:	0211      	lsls	r1, r2, #8
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6912      	ldr	r2, [r2, #16]
 800776c:	0852      	lsrs	r2, r2, #1
 800776e:	3a01      	subs	r2, #1
 8007770:	0552      	lsls	r2, r2, #21
 8007772:	430a      	orrs	r2, r1
 8007774:	491f      	ldr	r1, [pc, #124]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007776:	4313      	orrs	r3, r2
 8007778:	610b      	str	r3, [r1, #16]
 800777a:	e011      	b.n	80077a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800777c:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6892      	ldr	r2, [r2, #8]
 800778c:	0211      	lsls	r1, r2, #8
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6952      	ldr	r2, [r2, #20]
 8007792:	0852      	lsrs	r2, r2, #1
 8007794:	3a01      	subs	r2, #1
 8007796:	0652      	lsls	r2, r2, #25
 8007798:	430a      	orrs	r2, r1
 800779a:	4916      	ldr	r1, [pc, #88]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800779c:	4313      	orrs	r3, r2
 800779e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077a0:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a13      	ldr	r2, [pc, #76]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fe f954 	bl	8005a58 <HAL_GetTick>
 80077b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077b2:	e009      	b.n	80077c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077b4:	f7fe f950 	bl	8005a58 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d902      	bls.n	80077c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	73fb      	strb	r3, [r7, #15]
          break;
 80077c6:	e005      	b.n	80077d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0ef      	beq.n	80077b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077da:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	4904      	ldr	r1, [pc, #16]	; (80077f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000

080077f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007806:	4b6a      	ldr	r3, [pc, #424]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d018      	beq.n	8007844 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007812:	4b67      	ldr	r3, [pc, #412]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0203 	and.w	r2, r3, #3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d10d      	bne.n	800783e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
       ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800782a:	4b61      	ldr	r3, [pc, #388]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	091b      	lsrs	r3, r3, #4
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
       ||
 800783a:	429a      	cmp	r2, r3
 800783c:	d047      	beq.n	80078ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	e044      	b.n	80078ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d018      	beq.n	800787e <RCCEx_PLLSAI2_Config+0x86>
 800784c:	2b03      	cmp	r3, #3
 800784e:	d825      	bhi.n	800789c <RCCEx_PLLSAI2_Config+0xa4>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d002      	beq.n	800785a <RCCEx_PLLSAI2_Config+0x62>
 8007854:	2b02      	cmp	r3, #2
 8007856:	d009      	beq.n	800786c <RCCEx_PLLSAI2_Config+0x74>
 8007858:	e020      	b.n	800789c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800785a:	4b55      	ldr	r3, [pc, #340]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d11d      	bne.n	80078a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800786a:	e01a      	b.n	80078a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800786c:	4b50      	ldr	r3, [pc, #320]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007874:	2b00      	cmp	r3, #0
 8007876:	d116      	bne.n	80078a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800787c:	e013      	b.n	80078a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800787e:	4b4c      	ldr	r3, [pc, #304]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800788a:	4b49      	ldr	r3, [pc, #292]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800789a:	e006      	b.n	80078aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
      break;
 80078a0:	e004      	b.n	80078ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078a2:	bf00      	nop
 80078a4:	e002      	b.n	80078ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10d      	bne.n	80078ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078b2:	4b3f      	ldr	r3, [pc, #252]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6819      	ldr	r1, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	430b      	orrs	r3, r1
 80078c8:	4939      	ldr	r1, [pc, #228]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d167      	bne.n	80079a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80078d4:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a35      	ldr	r2, [pc, #212]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e0:	f7fe f8ba 	bl	8005a58 <HAL_GetTick>
 80078e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078e6:	e009      	b.n	80078fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078e8:	f7fe f8b6 	bl	8005a58 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d902      	bls.n	80078fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
        break;
 80078fa:	e005      	b.n	8007908 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078fc:	4b2c      	ldr	r3, [pc, #176]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ef      	bne.n	80078e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d14a      	bne.n	80079a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d111      	bne.n	8007938 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007914:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6892      	ldr	r2, [r2, #8]
 8007924:	0211      	lsls	r1, r2, #8
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68d2      	ldr	r2, [r2, #12]
 800792a:	0912      	lsrs	r2, r2, #4
 800792c:	0452      	lsls	r2, r2, #17
 800792e:	430a      	orrs	r2, r1
 8007930:	491f      	ldr	r1, [pc, #124]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007932:	4313      	orrs	r3, r2
 8007934:	614b      	str	r3, [r1, #20]
 8007936:	e011      	b.n	800795c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007938:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6892      	ldr	r2, [r2, #8]
 8007948:	0211      	lsls	r1, r2, #8
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6912      	ldr	r2, [r2, #16]
 800794e:	0852      	lsrs	r2, r2, #1
 8007950:	3a01      	subs	r2, #1
 8007952:	0652      	lsls	r2, r2, #25
 8007954:	430a      	orrs	r2, r1
 8007956:	4916      	ldr	r1, [pc, #88]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007958:	4313      	orrs	r3, r2
 800795a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800795c:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007968:	f7fe f876 	bl	8005a58 <HAL_GetTick>
 800796c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800796e:	e009      	b.n	8007984 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007970:	f7fe f872 	bl	8005a58 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d902      	bls.n	8007984 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
          break;
 8007982:	e005      	b.n	8007990 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0ef      	beq.n	8007970 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007998:	695a      	ldr	r2, [r3, #20]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	4904      	ldr	r1, [pc, #16]	; (80079b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40021000 	.word	0x40021000

080079b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e095      	b.n	8007af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d108      	bne.n	80079e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079d6:	d009      	beq.n	80079ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	61da      	str	r2, [r3, #28]
 80079de:	e005      	b.n	80079ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f877 	bl	8007afa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a2c:	d902      	bls.n	8007a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e002      	b.n	8007a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a42:	d007      	beq.n	8007a54 <HAL_SPI_Init+0xa0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a4c:	d002      	beq.n	8007a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a96:	ea42 0103 	orr.w	r1, r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	f003 0204 	and.w	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ad0:	ea42 0103 	orr.w	r1, r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b08a      	sub	sp, #40	; 0x28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x26>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e1fb      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x41e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3c:	f7fd ff8c 	bl	8005a58 <HAL_GetTick>
 8007b40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b54:	887b      	ldrh	r3, [r7, #2]
 8007b56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b58:	7efb      	ldrb	r3, [r7, #27]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d00e      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x6e>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b64:	d106      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d102      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x66>
 8007b6e:	7efb      	ldrb	r3, [r7, #27]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d003      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b7a:	e1cd      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x80>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x80>
 8007b88:	887b      	ldrh	r3, [r7, #2]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b94:	e1c0      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d003      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	887a      	ldrh	r2, [r7, #2]
 8007bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	887a      	ldrh	r2, [r7, #2]
 8007bd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bec:	d802      	bhi.n	8007bf4 <HAL_SPI_TransmitReceive+0xe6>
 8007bee:	8a3b      	ldrh	r3, [r7, #16]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d908      	bls.n	8007c06 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	e007      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b40      	cmp	r3, #64	; 0x40
 8007c22:	d007      	beq.n	8007c34 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c3c:	d97c      	bls.n	8007d38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x13e>
 8007c46:	8a7b      	ldrh	r3, [r7, #18]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d169      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	881a      	ldrh	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	1c9a      	adds	r2, r3, #2
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c70:	e056      	b.n	8007d20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d11b      	bne.n	8007cb8 <HAL_SPI_TransmitReceive+0x1aa>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d016      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0x1aa>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d113      	bne.n	8007cb8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	881a      	ldrh	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	1c9a      	adds	r2, r3, #2
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d11c      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x1f2>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	1c9a      	adds	r2, r3, #2
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d00:	f7fd feaa 	bl	8005a58 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d807      	bhi.n	8007d20 <HAL_SPI_TransmitReceive+0x212>
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d003      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007d1e:	e0fb      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1a3      	bne.n	8007c72 <HAL_SPI_TransmitReceive+0x164>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d19d      	bne.n	8007c72 <HAL_SPI_TransmitReceive+0x164>
 8007d36:	e0df      	b.n	8007ef8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x23a>
 8007d40:	8a7b      	ldrh	r3, [r7, #18]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	f040 80cb 	bne.w	8007ede <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d912      	bls.n	8007d78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b02      	subs	r3, #2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d76:	e0b2      	b.n	8007ede <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d9e:	e09e      	b.n	8007ede <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d134      	bne.n	8007e18 <HAL_SPI_TransmitReceive+0x30a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d02f      	beq.n	8007e18 <HAL_SPI_TransmitReceive+0x30a>
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d12c      	bne.n	8007e18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d912      	bls.n	8007dee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	881a      	ldrh	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	1c9a      	adds	r2, r3, #2
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b02      	subs	r3, #2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dec:	e012      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d148      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x3aa>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d042      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d923      	bls.n	8007e86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	1c9a      	adds	r2, r3, #2
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b02      	subs	r3, #2
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d81f      	bhi.n	8007eb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e82:	605a      	str	r2, [r3, #4]
 8007e84:	e016      	b.n	8007eb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f103 020c 	add.w	r2, r3, #12
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eb8:	f7fd fdce 	bl	8005a58 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d803      	bhi.n	8007ed0 <HAL_SPI_TransmitReceive+0x3c2>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	d102      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x3c8>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007edc:	e01c      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f47f af5b 	bne.w	8007da0 <HAL_SPI_TransmitReceive+0x292>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f47f af54 	bne.w	8007da0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f945 	bl	800818c <SPI_EndRxTxTransaction>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60
 8007f14:	e000      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3728      	adds	r7, #40	; 0x28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f42:	b2db      	uxtb	r3, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f60:	f7fd fd7a 	bl	8005a58 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f70:	f7fd fd72 	bl	8005a58 <HAL_GetTick>
 8007f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	015b      	lsls	r3, r3, #5
 8007f7c:	0d1b      	lsrs	r3, r3, #20
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	fb02 f303 	mul.w	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f86:	e054      	b.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d050      	beq.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f90:	f7fd fd62 	bl	8005a58 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d902      	bls.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d13d      	bne.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fbe:	d111      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc8:	d004      	beq.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d107      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fec:	d10f      	bne.n	800800e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800800c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e017      	b.n	8008052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3b01      	subs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	429a      	cmp	r2, r3
 800804e:	d19b      	bne.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	200001a8 	.word	0x200001a8

08008060 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008072:	f7fd fcf1 	bl	8005a58 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	4413      	add	r3, r2
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008082:	f7fd fce9 	bl	8005a58 <HAL_GetTick>
 8008086:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008090:	4b3d      	ldr	r3, [pc, #244]	; (8008188 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	00da      	lsls	r2, r3, #3
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	0d1b      	lsrs	r3, r3, #20
 80080a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
 80080a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080a8:	e060      	b.n	800816c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080b0:	d107      	bne.n	80080c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d050      	beq.n	800816c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080ca:	f7fd fcc5 	bl	8005a58 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d902      	bls.n	80080e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d13d      	bne.n	800815c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080f8:	d111      	bne.n	800811e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008102:	d004      	beq.n	800810e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810c:	d107      	bne.n	800811e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800811c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008126:	d10f      	bne.n	8008148 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008146:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e010      	b.n	800817e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	3b01      	subs	r3, #1
 800816a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4013      	ands	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d196      	bne.n	80080aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200001a8 	.word	0x200001a8

0800818c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff5b 	bl	8008060 <SPI_WaitFifoStateUntilTimeout>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e027      	b.n	8008210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	2180      	movs	r1, #128	; 0x80
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fec0 	bl	8007f50 <SPI_WaitFlagStateUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e014      	b.n	8008210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff ff34 	bl	8008060 <SPI_WaitFifoStateUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008202:	f043 0220 	orr.w	r2, r3, #32
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e000      	b.n	8008210 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e040      	b.n	80082ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f83a 	bl	80082b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2224      	movs	r2, #36	; 0x24
 8008244:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0201 	bic.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f99c 	bl	8008594 <UART_SetConfig>
 800825c:	4603      	mov	r3, r0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e022      	b.n	80082ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fc48 	bl	8008b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fccf 	bl	8008c48 <UART_CheckIdleState>
 80082aa:	4603      	mov	r3, r0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 8082 	bne.w	80083e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_UART_Transmit+0x26>
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e07a      	b.n	80083e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_UART_Transmit+0x38>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e073      	b.n	80083e8 <HAL_UART_Transmit+0x120>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008316:	f7fd fb9f 	bl	8005a58 <HAL_GetTick>
 800831a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008334:	d108      	bne.n	8008348 <HAL_UART_Transmit+0x80>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d104      	bne.n	8008348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	e003      	b.n	8008350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008358:	e02d      	b.n	80083b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	2180      	movs	r1, #128	; 0x80
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fcb8 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e039      	b.n	80083e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	881a      	ldrh	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008386:	b292      	uxth	r2, r2
 8008388:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	3302      	adds	r3, #2
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	e008      	b.n	80083a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	b292      	uxth	r2, r2
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	3301      	adds	r3, #1
 80083a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1cb      	bne.n	800835a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2200      	movs	r2, #0
 80083ca:	2140      	movs	r1, #64	; 0x40
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fc84 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e005      	b.n	80083e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	; 0x28
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	603b      	str	r3, [r7, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008404:	2b20      	cmp	r3, #32
 8008406:	f040 80bf 	bne.w	8008588 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <HAL_UART_Receive+0x26>
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e0b7      	b.n	800858a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_UART_Receive+0x38>
 8008424:	2302      	movs	r3, #2
 8008426:	e0b0      	b.n	800858a <HAL_UART_Receive+0x19a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2222      	movs	r2, #34	; 0x22
 800843c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008444:	f7fd fb08 	bl	8005a58 <HAL_GetTick>
 8008448:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008462:	d10e      	bne.n	8008482 <HAL_UART_Receive+0x92>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d105      	bne.n	8008478 <HAL_UART_Receive+0x88>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008476:	e02d      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	22ff      	movs	r2, #255	; 0xff
 800847c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008480:	e028      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <HAL_UART_Receive+0xb6>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <HAL_UART_Receive+0xac>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	22ff      	movs	r2, #255	; 0xff
 8008496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800849a:	e01b      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	227f      	movs	r2, #127	; 0x7f
 80084a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084a4:	e016      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ae:	d10d      	bne.n	80084cc <HAL_UART_Receive+0xdc>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <HAL_UART_Receive+0xd2>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	227f      	movs	r2, #127	; 0x7f
 80084bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084c0:	e008      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	223f      	movs	r2, #63	; 0x3f
 80084c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084ca:	e003      	b.n	80084d4 <HAL_UART_Receive+0xe4>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e4:	d108      	bne.n	80084f8 <HAL_UART_Receive+0x108>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	61bb      	str	r3, [r7, #24]
 80084f6:	e003      	b.n	8008500 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008508:	e033      	b.n	8008572 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2200      	movs	r2, #0
 8008512:	2120      	movs	r1, #32
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fbe0 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e032      	b.n	800858a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10c      	bne.n	8008544 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008530:	b29a      	uxth	r2, r3
 8008532:	8a7b      	ldrh	r3, [r7, #18]
 8008534:	4013      	ands	r3, r2
 8008536:	b29a      	uxth	r2, r3
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	3302      	adds	r3, #2
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	e00d      	b.n	8008560 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800854a:	b29b      	uxth	r3, r3
 800854c:	b2da      	uxtb	r2, r3
 800854e:	8a7b      	ldrh	r3, [r7, #18]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	4013      	ands	r3, r2
 8008554:	b2da      	uxtb	r2, r3
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3301      	adds	r3, #1
 800855e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1c5      	bne.n	800850a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008598:	b08a      	sub	sp, #40	; 0x28
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	431a      	orrs	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	431a      	orrs	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4ba4      	ldr	r3, [pc, #656]	; (8008854 <UART_SetConfig+0x2c0>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	6812      	ldr	r2, [r2, #0]
 80085ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085cc:	430b      	orrs	r3, r1
 80085ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a99      	ldr	r2, [pc, #612]	; (8008858 <UART_SetConfig+0x2c4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fc:	4313      	orrs	r3, r2
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	430a      	orrs	r2, r1
 8008612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a90      	ldr	r2, [pc, #576]	; (800885c <UART_SetConfig+0x2c8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d126      	bne.n	800866c <UART_SetConfig+0xd8>
 800861e:	4b90      	ldr	r3, [pc, #576]	; (8008860 <UART_SetConfig+0x2cc>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	2b03      	cmp	r3, #3
 800862a:	d81b      	bhi.n	8008664 <UART_SetConfig+0xd0>
 800862c:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <UART_SetConfig+0xa0>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	08008645 	.word	0x08008645
 8008638:	08008655 	.word	0x08008655
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800865d 	.word	0x0800865d
 8008644:	2301      	movs	r3, #1
 8008646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800864a:	e116      	b.n	800887a <UART_SetConfig+0x2e6>
 800864c:	2302      	movs	r3, #2
 800864e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008652:	e112      	b.n	800887a <UART_SetConfig+0x2e6>
 8008654:	2304      	movs	r3, #4
 8008656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800865a:	e10e      	b.n	800887a <UART_SetConfig+0x2e6>
 800865c:	2308      	movs	r3, #8
 800865e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008662:	e10a      	b.n	800887a <UART_SetConfig+0x2e6>
 8008664:	2310      	movs	r3, #16
 8008666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866a:	e106      	b.n	800887a <UART_SetConfig+0x2e6>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a7c      	ldr	r2, [pc, #496]	; (8008864 <UART_SetConfig+0x2d0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d138      	bne.n	80086e8 <UART_SetConfig+0x154>
 8008676:	4b7a      	ldr	r3, [pc, #488]	; (8008860 <UART_SetConfig+0x2cc>)
 8008678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867c:	f003 030c 	and.w	r3, r3, #12
 8008680:	2b0c      	cmp	r3, #12
 8008682:	d82d      	bhi.n	80086e0 <UART_SetConfig+0x14c>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0xf8>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086c1 	.word	0x080086c1
 8008690:	080086e1 	.word	0x080086e1
 8008694:	080086e1 	.word	0x080086e1
 8008698:	080086e1 	.word	0x080086e1
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	080086e1 	.word	0x080086e1
 80086a4:	080086e1 	.word	0x080086e1
 80086a8:	080086e1 	.word	0x080086e1
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086e1 	.word	0x080086e1
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	080086e1 	.word	0x080086e1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c6:	e0d8      	b.n	800887a <UART_SetConfig+0x2e6>
 80086c8:	2302      	movs	r3, #2
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ce:	e0d4      	b.n	800887a <UART_SetConfig+0x2e6>
 80086d0:	2304      	movs	r3, #4
 80086d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d6:	e0d0      	b.n	800887a <UART_SetConfig+0x2e6>
 80086d8:	2308      	movs	r3, #8
 80086da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086de:	e0cc      	b.n	800887a <UART_SetConfig+0x2e6>
 80086e0:	2310      	movs	r3, #16
 80086e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086e6:	e0c8      	b.n	800887a <UART_SetConfig+0x2e6>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a5e      	ldr	r2, [pc, #376]	; (8008868 <UART_SetConfig+0x2d4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d125      	bne.n	800873e <UART_SetConfig+0x1aa>
 80086f2:	4b5b      	ldr	r3, [pc, #364]	; (8008860 <UART_SetConfig+0x2cc>)
 80086f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d016      	beq.n	800872e <UART_SetConfig+0x19a>
 8008700:	2b30      	cmp	r3, #48	; 0x30
 8008702:	d818      	bhi.n	8008736 <UART_SetConfig+0x1a2>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d00a      	beq.n	800871e <UART_SetConfig+0x18a>
 8008708:	2b20      	cmp	r3, #32
 800870a:	d814      	bhi.n	8008736 <UART_SetConfig+0x1a2>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <UART_SetConfig+0x182>
 8008710:	2b10      	cmp	r3, #16
 8008712:	d008      	beq.n	8008726 <UART_SetConfig+0x192>
 8008714:	e00f      	b.n	8008736 <UART_SetConfig+0x1a2>
 8008716:	2300      	movs	r3, #0
 8008718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871c:	e0ad      	b.n	800887a <UART_SetConfig+0x2e6>
 800871e:	2302      	movs	r3, #2
 8008720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008724:	e0a9      	b.n	800887a <UART_SetConfig+0x2e6>
 8008726:	2304      	movs	r3, #4
 8008728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800872c:	e0a5      	b.n	800887a <UART_SetConfig+0x2e6>
 800872e:	2308      	movs	r3, #8
 8008730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008734:	e0a1      	b.n	800887a <UART_SetConfig+0x2e6>
 8008736:	2310      	movs	r3, #16
 8008738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873c:	e09d      	b.n	800887a <UART_SetConfig+0x2e6>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4a      	ldr	r2, [pc, #296]	; (800886c <UART_SetConfig+0x2d8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d125      	bne.n	8008794 <UART_SetConfig+0x200>
 8008748:	4b45      	ldr	r3, [pc, #276]	; (8008860 <UART_SetConfig+0x2cc>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008752:	2bc0      	cmp	r3, #192	; 0xc0
 8008754:	d016      	beq.n	8008784 <UART_SetConfig+0x1f0>
 8008756:	2bc0      	cmp	r3, #192	; 0xc0
 8008758:	d818      	bhi.n	800878c <UART_SetConfig+0x1f8>
 800875a:	2b80      	cmp	r3, #128	; 0x80
 800875c:	d00a      	beq.n	8008774 <UART_SetConfig+0x1e0>
 800875e:	2b80      	cmp	r3, #128	; 0x80
 8008760:	d814      	bhi.n	800878c <UART_SetConfig+0x1f8>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <UART_SetConfig+0x1d8>
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d008      	beq.n	800877c <UART_SetConfig+0x1e8>
 800876a:	e00f      	b.n	800878c <UART_SetConfig+0x1f8>
 800876c:	2300      	movs	r3, #0
 800876e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008772:	e082      	b.n	800887a <UART_SetConfig+0x2e6>
 8008774:	2302      	movs	r3, #2
 8008776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877a:	e07e      	b.n	800887a <UART_SetConfig+0x2e6>
 800877c:	2304      	movs	r3, #4
 800877e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008782:	e07a      	b.n	800887a <UART_SetConfig+0x2e6>
 8008784:	2308      	movs	r3, #8
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878a:	e076      	b.n	800887a <UART_SetConfig+0x2e6>
 800878c:	2310      	movs	r3, #16
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008792:	e072      	b.n	800887a <UART_SetConfig+0x2e6>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a35      	ldr	r2, [pc, #212]	; (8008870 <UART_SetConfig+0x2dc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d12a      	bne.n	80087f4 <UART_SetConfig+0x260>
 800879e:	4b30      	ldr	r3, [pc, #192]	; (8008860 <UART_SetConfig+0x2cc>)
 80087a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ac:	d01a      	beq.n	80087e4 <UART_SetConfig+0x250>
 80087ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b2:	d81b      	bhi.n	80087ec <UART_SetConfig+0x258>
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b8:	d00c      	beq.n	80087d4 <UART_SetConfig+0x240>
 80087ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087be:	d815      	bhi.n	80087ec <UART_SetConfig+0x258>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <UART_SetConfig+0x238>
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c8:	d008      	beq.n	80087dc <UART_SetConfig+0x248>
 80087ca:	e00f      	b.n	80087ec <UART_SetConfig+0x258>
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d2:	e052      	b.n	800887a <UART_SetConfig+0x2e6>
 80087d4:	2302      	movs	r3, #2
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087da:	e04e      	b.n	800887a <UART_SetConfig+0x2e6>
 80087dc:	2304      	movs	r3, #4
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e2:	e04a      	b.n	800887a <UART_SetConfig+0x2e6>
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e046      	b.n	800887a <UART_SetConfig+0x2e6>
 80087ec:	2310      	movs	r3, #16
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e042      	b.n	800887a <UART_SetConfig+0x2e6>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a17      	ldr	r2, [pc, #92]	; (8008858 <UART_SetConfig+0x2c4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d13a      	bne.n	8008874 <UART_SetConfig+0x2e0>
 80087fe:	4b18      	ldr	r3, [pc, #96]	; (8008860 <UART_SetConfig+0x2cc>)
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800880c:	d01a      	beq.n	8008844 <UART_SetConfig+0x2b0>
 800880e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008812:	d81b      	bhi.n	800884c <UART_SetConfig+0x2b8>
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008818:	d00c      	beq.n	8008834 <UART_SetConfig+0x2a0>
 800881a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881e:	d815      	bhi.n	800884c <UART_SetConfig+0x2b8>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <UART_SetConfig+0x298>
 8008824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008828:	d008      	beq.n	800883c <UART_SetConfig+0x2a8>
 800882a:	e00f      	b.n	800884c <UART_SetConfig+0x2b8>
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008832:	e022      	b.n	800887a <UART_SetConfig+0x2e6>
 8008834:	2302      	movs	r3, #2
 8008836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883a:	e01e      	b.n	800887a <UART_SetConfig+0x2e6>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008842:	e01a      	b.n	800887a <UART_SetConfig+0x2e6>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e016      	b.n	800887a <UART_SetConfig+0x2e6>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e012      	b.n	800887a <UART_SetConfig+0x2e6>
 8008854:	efff69f3 	.word	0xefff69f3
 8008858:	40008000 	.word	0x40008000
 800885c:	40013800 	.word	0x40013800
 8008860:	40021000 	.word	0x40021000
 8008864:	40004400 	.word	0x40004400
 8008868:	40004800 	.word	0x40004800
 800886c:	40004c00 	.word	0x40004c00
 8008870:	40005000 	.word	0x40005000
 8008874:	2310      	movs	r3, #16
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a9f      	ldr	r2, [pc, #636]	; (8008afc <UART_SetConfig+0x568>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d17a      	bne.n	800897a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008888:	2b08      	cmp	r3, #8
 800888a:	d824      	bhi.n	80088d6 <UART_SetConfig+0x342>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <UART_SetConfig+0x300>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088d7 	.word	0x080088d7
 80088b4:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b8:	f7fe fb34 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 80088bc:	61f8      	str	r0, [r7, #28]
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b8f      	ldr	r3, [pc, #572]	; (8008b00 <UART_SetConfig+0x56c>)
 80088c2:	61fb      	str	r3, [r7, #28]
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fe fa95 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 80088ca:	61f8      	str	r0, [r7, #28]
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	61fb      	str	r3, [r7, #28]
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80fb 	beq.w	8008ae0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d305      	bcc.n	8008906 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	429a      	cmp	r2, r3
 8008904:	d903      	bls.n	800890e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800890c:	e0e8      	b.n	8008ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	2200      	movs	r2, #0
 8008912:	461c      	mov	r4, r3
 8008914:	4615      	mov	r5, r2
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	022b      	lsls	r3, r5, #8
 8008920:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008924:	0222      	lsls	r2, r4, #8
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	6849      	ldr	r1, [r1, #4]
 800892a:	0849      	lsrs	r1, r1, #1
 800892c:	2000      	movs	r0, #0
 800892e:	4688      	mov	r8, r1
 8008930:	4681      	mov	r9, r0
 8008932:	eb12 0a08 	adds.w	sl, r2, r8
 8008936:	eb43 0b09 	adc.w	fp, r3, r9
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008948:	4650      	mov	r0, sl
 800894a:	4659      	mov	r1, fp
 800894c:	f7f7 fc98 	bl	8000280 <__aeabi_uldivmod>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4613      	mov	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800895e:	d308      	bcc.n	8008972 <UART_SetConfig+0x3de>
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008966:	d204      	bcs.n	8008972 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	60da      	str	r2, [r3, #12]
 8008970:	e0b6      	b.n	8008ae0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008978:	e0b2      	b.n	8008ae0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008982:	d15e      	bne.n	8008a42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008988:	2b08      	cmp	r3, #8
 800898a:	d828      	bhi.n	80089de <UART_SetConfig+0x44a>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x400>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089df 	.word	0x080089df
 80089a4:	080089cf 	.word	0x080089cf
 80089a8:	080089df 	.word	0x080089df
 80089ac:	080089df 	.word	0x080089df
 80089b0:	080089df 	.word	0x080089df
 80089b4:	080089d7 	.word	0x080089d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b8:	f7fe fab4 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 80089bc:	61f8      	str	r0, [r7, #28]
        break;
 80089be:	e014      	b.n	80089ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c0:	f7fe fac6 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 80089c4:	61f8      	str	r0, [r7, #28]
        break;
 80089c6:	e010      	b.n	80089ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089c8:	4b4d      	ldr	r3, [pc, #308]	; (8008b00 <UART_SetConfig+0x56c>)
 80089ca:	61fb      	str	r3, [r7, #28]
        break;
 80089cc:	e00d      	b.n	80089ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ce:	f7fe fa11 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 80089d2:	61f8      	str	r0, [r7, #28]
        break;
 80089d4:	e009      	b.n	80089ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089da:	61fb      	str	r3, [r7, #28]
        break;
 80089dc:	e005      	b.n	80089ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80089e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d077      	beq.n	8008ae0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	005a      	lsls	r2, r3, #1
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	085b      	lsrs	r3, r3, #1
 80089fa:	441a      	add	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b0f      	cmp	r3, #15
 8008a0a:	d916      	bls.n	8008a3a <UART_SetConfig+0x4a6>
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a12:	d212      	bcs.n	8008a3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f023 030f 	bic.w	r3, r3, #15
 8008a1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	8afb      	ldrh	r3, [r7, #22]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	8afa      	ldrh	r2, [r7, #22]
 8008a36:	60da      	str	r2, [r3, #12]
 8008a38:	e052      	b.n	8008ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a40:	e04e      	b.n	8008ae0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d827      	bhi.n	8008a9a <UART_SetConfig+0x506>
 8008a4a:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <UART_SetConfig+0x4bc>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a7d 	.word	0x08008a7d
 8008a58:	08008a85 	.word	0x08008a85
 8008a5c:	08008a9b 	.word	0x08008a9b
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a9b 	.word	0x08008a9b
 8008a68:	08008a9b 	.word	0x08008a9b
 8008a6c:	08008a9b 	.word	0x08008a9b
 8008a70:	08008a93 	.word	0x08008a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a74:	f7fe fa56 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 8008a78:	61f8      	str	r0, [r7, #28]
        break;
 8008a7a:	e014      	b.n	8008aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7c:	f7fe fa68 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 8008a80:	61f8      	str	r0, [r7, #28]
        break;
 8008a82:	e010      	b.n	8008aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a84:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <UART_SetConfig+0x56c>)
 8008a86:	61fb      	str	r3, [r7, #28]
        break;
 8008a88:	e00d      	b.n	8008aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a8a:	f7fe f9b3 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8008a8e:	61f8      	str	r0, [r7, #28]
        break;
 8008a90:	e009      	b.n	8008aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a96:	61fb      	str	r3, [r7, #28]
        break;
 8008a98:	e005      	b.n	8008aa6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d019      	beq.n	8008ae0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	085a      	lsrs	r2, r3, #1
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	2b0f      	cmp	r3, #15
 8008ac4:	d909      	bls.n	8008ada <UART_SetConfig+0x546>
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008acc:	d205      	bcs.n	8008ada <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	e002      	b.n	8008ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3728      	adds	r7, #40	; 0x28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008afa:	bf00      	nop
 8008afc:	40008000 	.word	0x40008000
 8008b00:	00f42400 	.word	0x00f42400

08008b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00a      	beq.n	8008b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01a      	beq.n	8008c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c02:	d10a      	bne.n	8008c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c58:	f7fc fefe 	bl	8005a58 <HAL_GetTick>
 8008c5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d10e      	bne.n	8008c8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f82d 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e023      	b.n	8008cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d10e      	bne.n	8008cb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f817 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e00d      	b.n	8008cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b09c      	sub	sp, #112	; 0x70
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	603b      	str	r3, [r7, #0]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cea:	e0a5      	b.n	8008e38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf2:	f000 80a1 	beq.w	8008e38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf6:	f7fc feaf 	bl	8005a58 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d302      	bcc.n	8008d0c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d13e      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d20:	667b      	str	r3, [r7, #100]	; 0x64
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e6      	bne.n	8008d0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3308      	adds	r3, #8
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	663b      	str	r3, [r7, #96]	; 0x60
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e5      	bne.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2220      	movs	r2, #32
 8008d76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e067      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d04f      	beq.n	8008e38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da6:	d147      	bne.n	8008e38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	613b      	str	r3, [r7, #16]
   return(result);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3308      	adds	r3, #8
 8008e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e04:	623a      	str	r2, [r7, #32]
 8008e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e010      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69da      	ldr	r2, [r3, #28]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4013      	ands	r3, r2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	bf0c      	ite	eq
 8008e48:	2301      	moveq	r3, #1
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f43f af4a 	beq.w	8008cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3770      	adds	r7, #112	; 0x70
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008e62:	b590      	push	{r4, r7, lr}
 8008e64:	b0cf      	sub	sp, #316	; 0x13c
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008e72:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e7c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e80:	4622      	mov	r2, r4
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e88:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e94:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e98:	460a      	mov	r2, r1
 8008e9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	2207      	movs	r2, #7
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f003 f8b7 	bl	800c020 <memset>
  uint8_t index_input = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8008eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ebc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ec0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ec8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ed6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008eda:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ee2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ef0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ef4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008ef8:	7812      	ldrb	r2, [r2, #0]
 8008efa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008efc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008f00:	3301      	adds	r3, #1
 8008f02:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008f0a:	2218      	movs	r2, #24
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f003 f886 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8008f14:	233f      	movs	r3, #63	; 0x3f
 8008f16:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8008f1a:	238a      	movs	r3, #138	; 0x8a
 8008f1c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008f20:	f107 0314 	add.w	r3, r7, #20
 8008f24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008f28:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008f30:	f107 030c 	add.w	r3, r7, #12
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008f38:	2307      	movs	r3, #7
 8008f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008f3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f002 faf3 	bl	800b530 <hci_send_req>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	da01      	bge.n	8008f54 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008f50:	23ff      	movs	r3, #255	; 0xff
 8008f52:	e02e      	b.n	8008fb2 <aci_gap_init+0x150>
  if (resp.Status) {
 8008f54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <aci_gap_init+0x10c>
    return resp.Status;
 8008f62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	e021      	b.n	8008fb2 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008f88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008f9a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fa4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd90      	pop	{r4, r7, pc}

08008fbc <aci_gap_terminate>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b0cc      	sub	sp, #304	; 0x130
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fcc:	801a      	strh	r2, [r3, #0]
 8008fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008fd6:	460a      	mov	r2, r1
 8008fd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8008fda:	f107 030c 	add.w	r3, r7, #12
 8008fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ffc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009000:	8812      	ldrh	r2, [r2, #0]
 8009002:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009004:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009008:	3302      	adds	r3, #2
 800900a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Reason = htob(Reason, 1);
 800900e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009012:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009016:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800901e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009022:	3301      	adds	r3, #1
 8009024:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800902c:	2218      	movs	r2, #24
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f002 fff5 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009036:	233f      	movs	r3, #63	; 0x3f
 8009038:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x093;
 800903c:	2393      	movs	r3, #147	; 0x93
 800903e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009042:	230f      	movs	r3, #15
 8009044:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009050:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009058:	f107 030b 	add.w	r3, r7, #11
 800905c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009060:	2301      	movs	r3, #1
 8009062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f002 fa5f 	bl	800b530 <hci_send_req>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	da01      	bge.n	800907c <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8009078:	23ff      	movs	r3, #255	; 0xff
 800907a:	e00d      	b.n	8009098 <aci_gap_terminate+0xdc>
  if (status) {
 800907c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009080:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <aci_gap_terminate+0xda>
    return status;
 800908a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	e000      	b.n	8009098 <aci_gap_terminate+0xdc>
  }
  return BLE_STATUS_SUCCESS;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 80090a2:	b5b0      	push	{r4, r5, r7, lr}
 80090a4:	b0cc      	sub	sp, #304	; 0x130
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	4605      	mov	r5, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090b8:	462a      	mov	r2, r5
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090c4:	4622      	mov	r2, r4
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090cc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80090d0:	4602      	mov	r2, r0
 80090d2:	701a      	strb	r2, [r3, #0]
 80090d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80090dc:	460a      	mov	r2, r1
 80090de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 80090fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009102:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009106:	8812      	ldrh	r2, [r2, #0]
 8009108:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800910a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800910e:	3302      	adds	r3, #2
 8009110:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8009114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009118:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800911c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009120:	8812      	ldrh	r2, [r2, #0]
 8009122:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009124:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009128:	3302      	adds	r3, #2
 800912a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800912e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009136:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800913e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009142:	3301      	adds	r3, #1
 8009144:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8009148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009150:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009154:	7812      	ldrb	r2, [r2, #0]
 8009156:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009158:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800915c:	3301      	adds	r3, #1
 800915e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009166:	2218      	movs	r2, #24
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f002 ff58 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009170:	233f      	movs	r3, #63	; 0x3f
 8009172:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8009176:	2397      	movs	r3, #151	; 0x97
 8009178:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800917c:	230f      	movs	r3, #15
 800917e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009182:	f107 030c 	add.w	r3, r7, #12
 8009186:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800918a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800918e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009192:	f107 030b 	add.w	r3, r7, #11
 8009196:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800919a:	2301      	movs	r3, #1
 800919c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80091a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 f9c2 	bl	800b530 <hci_send_req>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da01      	bge.n	80091b6 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 80091b2:	23ff      	movs	r3, #255	; 0xff
 80091b4:	e00d      	b.n	80091d2 <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 80091b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ba:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 80091c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	e000      	b.n	80091d2 <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091d8:	46bd      	mov	sp, r7
 80091da:	bdb0      	pop	{r4, r5, r7, pc}

080091dc <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b0cf      	sub	sp, #316	; 0x13c
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80091ec:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091fa:	4622      	mov	r2, r4
 80091fc:	801a      	strh	r2, [r3, #0]
 80091fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009206:	4602      	mov	r2, r0
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800920e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009212:	460a      	mov	r2, r1
 8009214:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8009216:	f107 0314 	add.w	r3, r7, #20
 800921a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800921e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009222:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8009230:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009234:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009238:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800923c:	8812      	ldrh	r2, [r2, #0]
 800923e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009240:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009244:	3302      	adds	r3, #2
 8009246:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800924a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800924e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009252:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009256:	8812      	ldrh	r2, [r2, #0]
 8009258:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800925a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800925e:	3302      	adds	r3, #2
 8009260:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8009264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009268:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800926c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009274:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009278:	3301      	adds	r3, #1
 800927a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800927e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009282:	1d58      	adds	r0, r3, #5
 8009284:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009288:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800928c:	2206      	movs	r2, #6
 800928e:	6819      	ldr	r1, [r3, #0]
 8009290:	f002 ff40 	bl	800c114 <memcpy>
  index_input += 6;
 8009294:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009298:	3306      	adds	r3, #6
 800929a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800929e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092a2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80092a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80092a8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80092ac:	3301      	adds	r3, #1
 80092ae:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 80092b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092b6:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80092ba:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 80092bc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80092c0:	3302      	adds	r3, #2
 80092c2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 80092c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092ca:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80092ce:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80092d0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80092d4:	3302      	adds	r3, #2
 80092d6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 80092da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092de:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80092e2:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80092e4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80092e8:	3302      	adds	r3, #2
 80092ea:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 80092ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092f2:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80092f6:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80092f8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80092fc:	3302      	adds	r3, #2
 80092fe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8009302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009306:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800930a:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800930c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009310:	3302      	adds	r3, #2
 8009312:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8009316:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800931a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800931e:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8009320:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009324:	3302      	adds	r3, #2
 8009326:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800932a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800932e:	2218      	movs	r2, #24
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f002 fe74 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009338:	233f      	movs	r3, #63	; 0x3f
 800933a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800933e:	239c      	movs	r3, #156	; 0x9c
 8009340:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009344:	230f      	movs	r3, #15
 8009346:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800934a:	f107 0314 	add.w	r3, r7, #20
 800934e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009352:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009356:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800935a:	f107 0313 	add.w	r3, r7, #19
 800935e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009368:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f002 f8de 	bl	800b530 <hci_send_req>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	da01      	bge.n	800937e <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800937a:	23ff      	movs	r3, #255	; 0xff
 800937c:	e00d      	b.n	800939a <aci_gap_create_connection+0x1be>
  if (status) {
 800937e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009382:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <aci_gap_create_connection+0x1bc>
    return status;
 800938c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009390:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	e000      	b.n	800939a <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd90      	pop	{r4, r7, pc}

080093a4 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093ae:	f107 0308 	add.w	r3, r7, #8
 80093b2:	2218      	movs	r2, #24
 80093b4:	2100      	movs	r1, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f002 fe32 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80093bc:	233f      	movs	r3, #63	; 0x3f
 80093be:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80093c0:	f240 1301 	movw	r3, #257	; 0x101
 80093c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093c6:	1dfb      	adds	r3, r7, #7
 80093c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093ca:	2301      	movs	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80093ce:	f107 0308 	add.w	r3, r7, #8
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f002 f8ab 	bl	800b530 <hci_send_req>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da01      	bge.n	80093e4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80093e0:	23ff      	movs	r3, #255	; 0xff
 80093e2:	e005      	b.n	80093f0 <aci_gatt_init+0x4c>
  if (status) {
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <aci_gatt_init+0x4a>
    return status;
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	e000      	b.n	80093f0 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80093f8:	b5b0      	push	{r4, r5, r7, lr}
 80093fa:	b0cc      	sub	sp, #304	; 0x130
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4605      	mov	r5, r0
 8009400:	460c      	mov	r4, r1
 8009402:	4610      	mov	r0, r2
 8009404:	4619      	mov	r1, r3
 8009406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800940e:	462a      	mov	r2, r5
 8009410:	801a      	strh	r2, [r3, #0]
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800941a:	4622      	mov	r2, r4
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009426:	4602      	mov	r2, r0
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009432:	460a      	mov	r2, r1
 8009434:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009436:	f107 030c 	add.w	r3, r7, #12
 800943a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800943e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009442:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009458:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800945c:	8812      	ldrh	r2, [r2, #0]
 800945e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009460:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009464:	3302      	adds	r3, #2
 8009466:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800946a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800946e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009472:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800947a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800947e:	3302      	adds	r3, #2
 8009480:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800948c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009494:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009498:	3301      	adds	r3, #1
 800949a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800949e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094a6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80094ae:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80094b2:	3301      	adds	r3, #1
 80094b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80094b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094bc:	1d98      	adds	r0, r3, #6
 80094be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80094ce:	f002 fe21 	bl	800c114 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80094da:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	4413      	add	r3, r2
 80094e2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094ea:	2218      	movs	r2, #24
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f002 fd96 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80094f4:	233f      	movs	r3, #63	; 0x3f
 80094f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80094fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80094fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009502:	f107 030c 	add.w	r3, r7, #12
 8009506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800950a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800950e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009512:	f107 030b 	add.w	r3, r7, #11
 8009516:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f002 f802 	bl	800b530 <hci_send_req>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	da01      	bge.n	8009536 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009532:	23ff      	movs	r3, #255	; 0xff
 8009534:	e00d      	b.n	8009552 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8009536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <aci_gatt_update_char_value+0x158>
    return status;
 8009544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009548:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	e000      	b.n	8009552 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009558:	46bd      	mov	sp, r7
 800955a:	bdb0      	pop	{r4, r5, r7, pc}

0800955c <aci_gatt_disc_all_primary_services>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b0cc      	sub	sp, #304	; 0x130
 8009560:	af00      	add	r7, sp, #0
 8009562:	4602      	mov	r2, r0
 8009564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800956c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800956e:	f107 030c 	add.w	r3, r7, #12
 8009572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009590:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009598:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800959c:	3302      	adds	r3, #2
 800959e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095a6:	2218      	movs	r2, #24
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f002 fd38 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80095b0:	233f      	movs	r3, #63	; 0x3f
 80095b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 80095b6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80095ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80095be:	230f      	movs	r3, #15
 80095c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80095c4:	f107 030c 	add.w	r3, r7, #12
 80095c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80095d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095d4:	f107 030b 	add.w	r3, r7, #11
 80095d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095dc:	2301      	movs	r3, #1
 80095de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80095e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 ffa1 	bl	800b530 <hci_send_req>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da01      	bge.n	80095f8 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 80095f4:	23ff      	movs	r3, #255	; 0xff
 80095f6:	e00d      	b.n	8009614 <aci_gatt_disc_all_primary_services+0xb8>
  if (status) {
 80095f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <aci_gatt_disc_all_primary_services+0xb6>
    return status;
 8009606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	e000      	b.n	8009614 <aci_gatt_disc_all_primary_services+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <aci_gatt_disc_all_char_of_service>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 800961e:	b590      	push	{r4, r7, lr}
 8009620:	b0cd      	sub	sp, #308	; 0x134
 8009622:	af00      	add	r7, sp, #0
 8009624:	4604      	mov	r4, r0
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009632:	4622      	mov	r2, r4
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800963e:	4602      	mov	r2, r0
 8009640:	801a      	strh	r2, [r3, #0]
 8009642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009646:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800964a:	460a      	mov	r2, r1
 800964c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800964e:	f107 030c 	add.w	r3, r7, #12
 8009652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009670:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009674:	8812      	ldrh	r2, [r2, #0]
 8009676:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009678:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800967c:	3302      	adds	r3, #2
 800967e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Start_Handle = htob(Start_Handle, 2);
 8009682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009686:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800968a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800968e:	8812      	ldrh	r2, [r2, #0]
 8009690:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009692:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009696:	3302      	adds	r3, #2
 8009698:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->End_Handle = htob(End_Handle, 2);
 800969c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096a4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80096a8:	8812      	ldrh	r2, [r2, #0]
 80096aa:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80096ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80096b0:	3302      	adds	r3, #2
 80096b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ba:	2218      	movs	r2, #24
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f002 fcae 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80096c4:	233f      	movs	r3, #63	; 0x3f
 80096c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80096ca:	f240 1315 	movw	r3, #277	; 0x115
 80096ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80096d2:	230f      	movs	r3, #15
 80096d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80096e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096e8:	f107 030b 	add.w	r3, r7, #11
 80096ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80096f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 ff17 	bl	800b530 <hci_send_req>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	da01      	bge.n	800970c <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 8009708:	23ff      	movs	r3, #255	; 0xff
 800970a:	e00d      	b.n	8009728 <aci_gatt_disc_all_char_of_service+0x10a>
  if (status) {
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <aci_gatt_disc_all_char_of_service+0x108>
    return status;
 800971a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	e000      	b.n	8009728 <aci_gatt_disc_all_char_of_service+0x10a>
  }
  return BLE_STATUS_SUCCESS;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}

08009732 <aci_gatt_read_char_value>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_read_char_value(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b0cc      	sub	sp, #304	; 0x130
 8009736:	af00      	add	r7, sp, #0
 8009738:	4602      	mov	r2, r0
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800974c:	460a      	mov	r2, r1
 800974e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_read_char_value_cp0 *cp0 = (aci_gatt_read_char_value_cp0*)(cmd_buffer);
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800976a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800976e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009772:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009776:	8812      	ldrh	r2, [r2, #0]
 8009778:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800977a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800977e:	3302      	adds	r3, #2
 8009780:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8009784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009788:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800978c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009790:	8812      	ldrh	r2, [r2, #0]
 8009792:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009794:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009798:	3302      	adds	r3, #2
 800979a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800979e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097a2:	2218      	movs	r2, #24
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f002 fc3a 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80097ac:	233f      	movs	r3, #63	; 0x3f
 80097ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x118;
 80097b2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80097b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80097ba:	230f      	movs	r3, #15
 80097bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097c8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80097cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097d0:	f107 030b 	add.w	r3, r7, #11
 80097d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097d8:	2301      	movs	r3, #1
 80097da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80097de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 fea3 	bl	800b530 <hci_send_req>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da01      	bge.n	80097f4 <aci_gatt_read_char_value+0xc2>
    return BLE_STATUS_TIMEOUT;
 80097f0:	23ff      	movs	r3, #255	; 0xff
 80097f2:	e00d      	b.n	8009810 <aci_gatt_read_char_value+0xde>
  if (status) {
 80097f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <aci_gatt_read_char_value+0xdc>
    return status;
 8009802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009806:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	e000      	b.n	8009810 <aci_gatt_read_char_value+0xde>
  }
  return BLE_STATUS_SUCCESS;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <aci_gatt_write_char_value>:
}
tBleStatus aci_gatt_write_char_value(uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     uint8_t Attribute_Val[])
{
 800981a:	b590      	push	{r4, r7, lr}
 800981c:	b0cf      	sub	sp, #316	; 0x13c
 800981e:	af00      	add	r7, sp, #0
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800982a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009834:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009838:	4622      	mov	r2, r4
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009844:	4602      	mov	r2, r0
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800984c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009850:	460a      	mov	r2, r1
 8009852:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_value_cp0 *cp0 = (aci_gatt_write_char_value_cp0*)(cmd_buffer);
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800985c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009860:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800986e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009872:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009876:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800987a:	8812      	ldrh	r2, [r2, #0]
 800987c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800987e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009882:	3302      	adds	r3, #2
 8009884:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8009888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800988c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009890:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009894:	8812      	ldrh	r2, [r2, #0]
 8009896:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009898:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800989c:	3302      	adds	r3, #2
 800989e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80098a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80098aa:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80098b2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80098b6:	3301      	adds	r3, #1
 80098b8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80098bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098c0:	1d58      	adds	r0, r3, #5
 80098c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098c6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80098ca:	781a      	ldrb	r2, [r3, #0]
 80098cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098d4:	6819      	ldr	r1, [r3, #0]
 80098d6:	f002 fc1d 	bl	800c114 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 80098da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098de:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80098e2:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4413      	add	r3, r2
 80098ea:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80098f2:	2218      	movs	r2, #24
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f002 fb92 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 80098fc:	233f      	movs	r3, #63	; 0x3f
 80098fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x11c;
 8009902:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8009906:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800990a:	230f      	movs	r3, #15
 800990c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009918:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800991c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009920:	f107 0313 	add.w	r3, r7, #19
 8009924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009928:	2301      	movs	r3, #1
 800992a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800992e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009932:	2100      	movs	r1, #0
 8009934:	4618      	mov	r0, r3
 8009936:	f001 fdfb 	bl	800b530 <hci_send_req>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	da01      	bge.n	8009944 <aci_gatt_write_char_value+0x12a>
    return BLE_STATUS_TIMEOUT;
 8009940:	23ff      	movs	r3, #255	; 0xff
 8009942:	e00d      	b.n	8009960 <aci_gatt_write_char_value+0x146>
  if (status) {
 8009944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009948:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <aci_gatt_write_char_value+0x144>
    return status;
 8009952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009956:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	e000      	b.n	8009960 <aci_gatt_write_char_value+0x146>
  }
  return BLE_STATUS_SUCCESS;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009966:	46bd      	mov	sp, r7
 8009968:	bd90      	pop	{r4, r7, pc}

0800996a <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800996a:	b590      	push	{r4, r7, lr}
 800996c:	b0cf      	sub	sp, #316	; 0x13c
 800996e:	af00      	add	r7, sp, #0
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800997a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009984:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009988:	4622      	mov	r2, r4
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009994:	4602      	mov	r2, r0
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800999c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80099a0:	460a      	mov	r2, r1
 80099a2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80099ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099b0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80099be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80099ca:	8812      	ldrh	r2, [r2, #0]
 80099cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80099ce:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80099d2:	3302      	adds	r3, #2
 80099d4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80099d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80099e4:	8812      	ldrh	r2, [r2, #0]
 80099e6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80099e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80099ec:	3302      	adds	r3, #2
 80099ee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80099f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099fa:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009a02:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009a06:	3301      	adds	r3, #1
 8009a08:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 8009a0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a10:	1d58      	adds	r0, r3, #5
 8009a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a16:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	f002 fb75 	bl	800c114 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 8009a2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a2e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009a32:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a42:	2218      	movs	r2, #24
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 faea 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009a4c:	233f      	movs	r3, #63	; 0x3f
 8009a4e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8009a52:	f240 1321 	movw	r3, #289	; 0x121
 8009a56:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009a60:	f107 0314 	add.w	r3, r7, #20
 8009a64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009a68:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009a6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009a70:	f107 0313 	add.w	r3, r7, #19
 8009a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fd53 	bl	800b530 <hci_send_req>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da01      	bge.n	8009a94 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8009a90:	23ff      	movs	r3, #255	; 0xff
 8009a92:	e00d      	b.n	8009ab0 <aci_gatt_write_char_desc+0x146>
  if (status) {
 8009a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a98:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <aci_gatt_write_char_desc+0x144>
    return status;
 8009aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009aa6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	e000      	b.n	8009ab0 <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd90      	pop	{r4, r7, pc}

08009aba <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b08e      	sub	sp, #56	; 0x38
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009ac8:	f107 0310 	add.w	r3, r7, #16
 8009acc:	220f      	movs	r2, #15
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f002 faa5 	bl	800c020 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ad6:	f107 0320 	add.w	r3, r7, #32
 8009ada:	2218      	movs	r2, #24
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f002 fa9e 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009ae4:	233f      	movs	r3, #63	; 0x3f
 8009ae6:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 8009af2:	230f      	movs	r3, #15
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 8009af6:	f107 0320 	add.w	r3, r7, #32
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 fd17 	bl	800b530 <hci_send_req>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da01      	bge.n	8009b0c <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 8009b08:	23ff      	movs	r3, #255	; 0xff
 8009b0a:	e02c      	b.n	8009b66 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 8009b0c:	7c3b      	ldrb	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 8009b12:	7c3b      	ldrb	r3, [r7, #16]
 8009b14:	e027      	b.n	8009b66 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 8009b16:	7c7a      	ldrb	r2, [r7, #17]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 8009b1c:	7cba      	ldrb	r2, [r7, #18]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 8009b22:	7cfa      	ldrb	r2, [r7, #19]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 8009b28:	7d3a      	ldrb	r2, [r7, #20]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 8009b2e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b36:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 8009b38:	7dfa      	ldrb	r2, [r7, #23]
 8009b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b3c:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 8009b3e:	7e3a      	ldrb	r2, [r7, #24]
 8009b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b42:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 8009b44:	7e7a      	ldrb	r2, [r7, #25]
 8009b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b48:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 8009b4a:	7eba      	ldrb	r2, [r7, #26]
 8009b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b4e:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 8009b50:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b58:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 8009b5a:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3738      	adds	r7, #56	; 0x38
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b0ee      	sub	sp, #440	; 0x1b8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009b78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009b82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009b8c:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8009b90:	4602      	mov	r2, r0
 8009b92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8009b94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009b98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009b9c:	f107 0314 	add.w	r3, r7, #20
 8009ba0:	2280      	movs	r2, #128	; 0x80
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 fa3b 	bl	800c020 <memset>
  uint8_t index_input = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 8009bb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009bb4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8009bb8:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bc0:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009bce:	2218      	movs	r2, #24
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fa24 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009bd8:	233f      	movs	r3, #63	; 0x3f
 8009bda:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 8009bde:	230d      	movs	r3, #13
 8009be0:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 8009be4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009be8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 8009bec:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009bf0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 8009bf4:	f107 0314 	add.w	r3, r7, #20
 8009bf8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8009c02:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 fc91 	bl	800b530 <hci_send_req>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da01      	bge.n	8009c18 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009c14:	23ff      	movs	r3, #255	; 0xff
 8009c16:	e029      	b.n	8009c6c <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8009c18:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c1c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8009c26:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c2a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	e01c      	b.n	8009c6c <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8009c32:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c36:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009c3a:	785a      	ldrb	r2, [r3, #1]
 8009c3c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009c48:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c4c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f107 0314 	add.w	r3, r7, #20
 8009c5a:	1c99      	adds	r1, r3, #2
 8009c5c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009c60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f002 fa55 	bl	800c114 <memcpy>
  return BLE_STATUS_SUCCESS;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b0cc      	sub	sp, #304	; 0x130
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c82:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c90:	460a      	mov	r2, r1
 8009c92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cb6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009cbe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8009cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ccc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cd0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009cd4:	7812      	ldrb	r2, [r2, #0]
 8009cd6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009cd8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009cdc:	3301      	adds	r3, #1
 8009cde:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ce6:	2218      	movs	r2, #24
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 f998 	bl	800c020 <memset>
  rq.ogf = 0x3f;
 8009cf0:	233f      	movs	r3, #63	; 0x3f
 8009cf2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009cf6:	230f      	movs	r3, #15
 8009cf8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cfc:	f107 030c 	add.w	r3, r7, #12
 8009d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d04:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d0c:	f107 030b 	add.w	r3, r7, #11
 8009d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 fc05 	bl	800b530 <hci_send_req>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da01      	bge.n	8009d30 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009d2c:	23ff      	movs	r3, #255	; 0xff
 8009d2e:	e00d      	b.n	8009d4c <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8009d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d34:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <aci_hal_set_tx_power_level+0xd4>
    return status;
 8009d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d42:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	e000      	b.n	8009d4c <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	7818      	ldrb	r0, [r3, #0]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d70:	b299      	uxth	r1, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	78db      	ldrb	r3, [r3, #3]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f7 f8de 	bl	8000f38 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7818      	ldrb	r0, [r3, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009da0:	b299      	uxth	r1, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f000 ffca 	bl	800ad40 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8009db6:	b590      	push	{r4, r7, lr}
 8009db8:	b087      	sub	sp, #28
 8009dba:	af02      	add	r7, sp, #8
 8009dbc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	7818      	ldrb	r0, [r3, #0]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009dd0:	b299      	uxth	r1, r3
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	78da      	ldrb	r2, [r3, #3]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	889b      	ldrh	r3, [r3, #4]
 8009dda:	b29c      	uxth	r4, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	4623      	mov	r3, r4
 8009de6:	f000 ffba 	bl	800ad5e <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd90      	pop	{r4, r7, pc}

08009df4 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 ffbc 	bl	800ad86 <hci_hardware_error_event>

  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b0a6      	sub	sp, #152	; 0x98
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009e32:	2300      	movs	r3, #0
 8009e34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e38:	e02e      	b.n	8009e98 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8009e3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	3398      	adds	r3, #152	; 0x98
 8009e54:	443b      	add	r3, r7
 8009e56:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009e5a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e5e:	3302      	adds	r3, #2
 8009e60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009e64:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	3398      	adds	r3, #152	; 0x98
 8009e7e:	443b      	add	r3, r7
 8009e80:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009e84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e88:	3302      	adds	r3, #2
 8009e8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e92:	3301      	adds	r3, #1
 8009e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	dbc8      	blt.n	8009e3a <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	f107 0208 	add.w	r2, r7, #8
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 ff71 	bl	800ad9c <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8009eba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3798      	adds	r7, #152	; 0x98
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 ff6a 	bl	800adb4 <hci_data_buffer_overflow_event>

  return status;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	781a      	ldrb	r2, [r3, #0]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f000 ff5e 	bl	800adca <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f98d 	bl	800b24c <aci_blue_initialized_event>

  return status;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 f987 	bl	800b262 <aci_blue_events_lost_event>

  return status;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8009f5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f62:	b08d      	sub	sp, #52	; 0x34
 8009f64:	af08      	add	r7, sp, #32
 8009f66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f893 c000 	ldrb.w	ip, [r3]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8009f9c:	68b8      	ldr	r0, [r7, #8]
 8009f9e:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8009fa2:	68bc      	ldr	r4, [r7, #8]
 8009fa4:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8009fa8:	68bd      	ldr	r5, [r7, #8]
 8009faa:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8009fae:	68be      	ldr	r6, [r7, #8]
 8009fb0:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009fb8:	9307      	str	r3, [sp, #28]
 8009fba:	9606      	str	r6, [sp, #24]
 8009fbc:	9505      	str	r5, [sp, #20]
 8009fbe:	9404      	str	r4, [sp, #16]
 8009fc0:	9003      	str	r0, [sp, #12]
 8009fc2:	9102      	str	r1, [sp, #8]
 8009fc4:	9201      	str	r2, [sp, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	464b      	mov	r3, r9
 8009fcc:	4642      	mov	r2, r8
 8009fce:	4671      	mov	r1, lr
 8009fd0:	4660      	mov	r0, ip
 8009fd2:	f001 f950 	bl	800b276 <aci_blue_crash_info_event>

  return status;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009fe2 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	7818      	ldrb	r0, [r3, #0]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	7859      	ldrb	r1, [r3, #1]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a000:	461a      	mov	r2, r3
 800a002:	f001 f946 	bl	800b292 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f993 0000 	ldrsb.w	r0, [r3]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800a02e:	461a      	mov	r2, r3
 800a030:	f001 f93d 	bl	800b2ae <aci_hal_scan_req_report_event>

  return status;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	7818      	ldrb	r0, [r3, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800a05a:	461a      	mov	r2, r3
 800a05c:	f001 f935 	bl	800b2ca <aci_hal_fw_error_event>

  return status;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800a076:	f000 ff32 	bl	800aede <aci_gap_limited_discoverable_event>

  return status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b298      	uxth	r0, r3
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	7899      	ldrb	r1, [r3, #2]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	78db      	ldrb	r3, [r3, #3]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 ff22 	bl	800aeec <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 ff1e 	bl	800af0a <aci_gap_pass_key_req_event>

  return status;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 ff16 	bl	800af20 <aci_gap_authorization_req_event>

  return status;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 800a10a:	f000 ff14 	bl	800af36 <aci_gap_slave_security_initiated_event>

  return status;
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800a124:	f000 ff0e 	bl	800af44 <aci_gap_bond_lost_event>

  return status;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	7818      	ldrb	r0, [r3, #0]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	7859      	ldrb	r1, [r3, #1]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800a152:	f7f6 fd5f 	bl	8000c14 <aci_gap_proc_complete_event>

  return status;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	4618      	mov	r0, r3
 800a178:	f000 feeb 	bl	800af52 <aci_gap_addr_not_resolved_event>

  return status;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f000 fedf 	bl	800af68 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	789b      	ldrb	r3, [r3, #2]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f000 fed5 	bl	800af80 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f000 ffe0 	bl	800b1c4 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a216:	2300      	movs	r3, #0
 800a218:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	b298      	uxth	r0, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800a22c:	461a      	mov	r2, r3
 800a22e:	f000 ffd7 	bl	800b1e0 <aci_l2cap_proc_timeout_event>

  return status;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a23e:	b089      	sub	sp, #36	; 0x24
 800a240:	af04      	add	r7, sp, #16
 800a242:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b298      	uxth	r0, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	789c      	ldrb	r4, [r3, #2]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a25c:	b29d      	uxth	r5, r3
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a264:	b29e      	uxth	r6, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800a274:	b292      	uxth	r2, r2
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800a27c:	b289      	uxth	r1, r1
 800a27e:	9102      	str	r1, [sp, #8]
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4633      	mov	r3, r6
 800a286:	462a      	mov	r2, r5
 800a288:	4621      	mov	r1, r4
 800a28a:	f000 ffb7 	bl	800b1fc <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a298 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b298      	uxth	r0, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	7899      	ldrb	r1, [r3, #2]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	f000 ffad 	bl	800b224 <aci_l2cap_command_reject_event>

  return status;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd90      	pop	{r4, r7, pc}

0800a2d4 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	b298      	uxth	r0, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	b299      	uxth	r1, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	889b      	ldrh	r3, [r3, #4]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	88db      	ldrh	r3, [r3, #6]
 800a2fa:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	4623      	mov	r3, r4
 800a304:	f000 fe4a 	bl	800af9c <aci_gatt_attribute_modified_event>

  return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd90      	pop	{r4, r7, pc}

0800a312 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	b29b      	uxth	r3, r3
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fe4b 	bl	800afc4 <aci_gatt_proc_timeout_event>

  return status;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	b29b      	uxth	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f000 fe3f 	bl	800afda <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b298      	uxth	r0, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	7899      	ldrb	r1, [r3, #2]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800a388:	f000 fe35 	bl	800aff6 <aci_att_find_info_resp_event>

  return status;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b0a6      	sub	sp, #152	; 0x98
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3b6:	e02e      	b.n	800a416 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800a3b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a3bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	3398      	adds	r3, #152	; 0x98
 800a3d2:	443b      	add	r3, r7
 800a3d4:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800a3d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a3dc:	3302      	adds	r3, #2
 800a3de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800a3e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a3e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	3398      	adds	r3, #152	; 0x98
 800a3fc:	443b      	add	r3, r7
 800a3fe:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800a402:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a406:	3302      	adds	r3, #2
 800a408:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800a40c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a410:	3301      	adds	r3, #1
 800a412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	461a      	mov	r2, r3
 800a41e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a422:	4293      	cmp	r3, r2
 800a424:	dbc8      	blt.n	800a3b8 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800a426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	b298      	uxth	r0, r3
 800a42e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a432:	789b      	ldrb	r3, [r3, #2]
 800a434:	f107 0208 	add.w	r2, r7, #8
 800a438:	4619      	mov	r1, r3
 800a43a:	f000 fdec 	bl	800b016 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800a43e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a442:	4618      	mov	r0, r3
 800a444:	3798      	adds	r7, #152	; 0x98
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b298      	uxth	r0, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	7899      	ldrb	r1, [r3, #2]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a46c:	f7f6 ffc8 	bl	8001400 <aci_att_read_by_type_resp_event>

  return status;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	b298      	uxth	r0, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a498:	461a      	mov	r2, r3
 800a49a:	f7f7 fbd7 	bl	8001c4c <aci_att_read_resp_event>

  return status;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b298      	uxth	r0, r3
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f000 fdb3 	bl	800b032 <aci_att_read_blob_resp_event>

  return status;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	b298      	uxth	r0, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f000 fdaa 	bl	800b04e <aci_att_read_multiple_resp_event>

  return status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b298      	uxth	r0, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	7899      	ldrb	r1, [r3, #2]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a526:	f7f6 fda9 	bl	800107c <aci_att_read_by_group_type_resp_event>

  return status;
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b087      	sub	sp, #28
 800a538:	af02      	add	r7, sp, #8
 800a53a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b298      	uxth	r0, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	b299      	uxth	r1, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	889b      	ldrh	r3, [r3, #4]
 800a554:	b29a      	uxth	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	4623      	mov	r3, r4
 800a562:	f000 fd82 	bl	800b06a <aci_att_prepare_write_resp_event>

  return status;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd90      	pop	{r4, r7, pc}

0800a570 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b29b      	uxth	r3, r3
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fd83 	bl	800b092 <aci_att_exec_write_resp_event>

  return status;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b298      	uxth	r0, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	885b      	ldrh	r3, [r3, #2]
 800a5b0:	b299      	uxth	r1, r3
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a5ba:	f000 fd75 	bl	800b0a8 <aci_gatt_indication_event>

  return status;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b298      	uxth	r0, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	b299      	uxth	r1, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a5ec:	f7f7 fb70 	bl	8001cd0 <aci_gatt_notification_event>

  return status;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	789b      	ldrb	r3, [r3, #2]
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7f6 fb2e 	bl	8000c78 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	b298      	uxth	r0, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	7899      	ldrb	r1, [r3, #2]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a646:	b29a      	uxth	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	795b      	ldrb	r3, [r3, #5]
 800a64c:	f000 fd3c 	bl	800b0c8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b298      	uxth	r0, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	885b      	ldrh	r3, [r3, #2]
 800a674:	b299      	uxth	r1, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a67e:	f000 fd37 	bl	800b0f0 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	b298      	uxth	r0, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	b299      	uxth	r1, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a6b0:	f000 fd2e 	bl	800b110 <aci_gatt_write_permit_req_event>

  return status;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	b298      	uxth	r0, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	b299      	uxth	r1, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	f000 fd25 	bl	800b130 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b0a6      	sub	sp, #152	; 0x98
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800a704:	2303      	movs	r3, #3
 800a706:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a70a:	2300      	movs	r3, #0
 800a70c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a710:	e019      	b.n	800a746 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800a712:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a722:	b29a      	uxth	r2, r3
 800a724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	3398      	adds	r3, #152	; 0x98
 800a72c:	443b      	add	r3, r7
 800a72e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800a732:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a736:	3302      	adds	r3, #2
 800a738:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a73c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a740:	3301      	adds	r3, #1
 800a742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a74a:	789b      	ldrb	r3, [r3, #2]
 800a74c:	461a      	mov	r2, r3
 800a74e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a752:	4293      	cmp	r3, r2
 800a754:	dbdd      	blt.n	800a712 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800a756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b298      	uxth	r0, r3
 800a75e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a762:	789b      	ldrb	r3, [r3, #2]
 800a764:	f107 0208 	add.w	r2, r7, #8
 800a768:	4619      	mov	r1, r3
 800a76a:	f000 fcf0 	bl	800b14e <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800a76e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a772:	4618      	mov	r0, r3
 800a774:	3798      	adds	r7, #152	; 0x98
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f000 fce6 	bl	800b16a <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fce1 	bl	800b186 <aci_gatt_server_confirmation_event>

  return status;
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a7ce:	b590      	push	{r4, r7, lr}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	af02      	add	r7, sp, #8
 800a7d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	b298      	uxth	r0, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	885b      	ldrh	r3, [r3, #2]
 800a7e8:	b299      	uxth	r1, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	889b      	ldrh	r3, [r3, #4]
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	f000 fcce 	bl	800b19c <aci_gatt_prepare_write_permit_req_event>

  return status;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	bd90      	pop	{r4, r7, pc}

0800a80a <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800a80a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80c:	b08b      	sub	sp, #44	; 0x2c
 800a80e:	af06      	add	r7, sp, #24
 800a810:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	781d      	ldrb	r5, [r3, #0]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a824:	b29e      	uxth	r6, r3
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f893 c003 	ldrb.w	ip, [r3, #3]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800a83c:	b292      	uxth	r2, r2
 800a83e:	68b9      	ldr	r1, [r7, #8]
 800a840:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800a844:	b289      	uxth	r1, r1
 800a846:	68b8      	ldr	r0, [r7, #8]
 800a848:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800a84c:	b280      	uxth	r0, r0
 800a84e:	68bc      	ldr	r4, [r7, #8]
 800a850:	7c64      	ldrb	r4, [r4, #17]
 800a852:	9404      	str	r4, [sp, #16]
 800a854:	9003      	str	r0, [sp, #12]
 800a856:	9102      	str	r1, [sp, #8]
 800a858:	9201      	str	r2, [sp, #4]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	4673      	mov	r3, lr
 800a85e:	4662      	mov	r2, ip
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	f7f6 fac0 	bl	8000de8 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a872 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b0a4      	sub	sp, #144	; 0x90
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800a886:	2301      	movs	r3, #1
 800a888:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a88c:	2300      	movs	r3, #0
 800a88e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a892:	e0b3      	b.n	800a9fc <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800a894:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a898:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	4413      	add	r3, r2
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	7819      	ldrb	r1, [r3, #0]
 800a8ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	3390      	adds	r3, #144	; 0x90
 800a8ba:	443b      	add	r3, r7
 800a8bc:	3b88      	subs	r3, #136	; 0x88
 800a8be:	460a      	mov	r2, r1
 800a8c0:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a8c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800a8cc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a8d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	4413      	add	r3, r2
 800a8de:	440b      	add	r3, r1
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	7819      	ldrb	r1, [r3, #0]
 800a8e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	3390      	adds	r3, #144	; 0x90
 800a8f2:	443b      	add	r3, r7
 800a8f4:	3b87      	subs	r3, #135	; 0x87
 800a8f6:	460a      	mov	r2, r1
 800a8f8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a8fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a8fe:	3301      	adds	r3, #1
 800a900:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800a904:	f107 0108 	add.w	r1, r7, #8
 800a908:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	1c98      	adds	r0, r3, #2
 800a918:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a91c:	4613      	mov	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	4413      	add	r3, r2
 800a926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a92a:	4413      	add	r3, r2
 800a92c:	3303      	adds	r3, #3
 800a92e:	2206      	movs	r2, #6
 800a930:	4619      	mov	r1, r3
 800a932:	f001 fbef 	bl	800c114 <memcpy>
    size += 6;
 800a936:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a93a:	3306      	adds	r3, #6
 800a93c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800a940:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a944:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	440b      	add	r3, r1
 800a954:	3309      	adds	r3, #9
 800a956:	7819      	ldrb	r1, [r3, #0]
 800a958:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	3390      	adds	r3, #144	; 0x90
 800a966:	443b      	add	r3, r7
 800a968:	3b80      	subs	r3, #128	; 0x80
 800a96a:	460a      	mov	r2, r1
 800a96c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a96e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a972:	3301      	adds	r3, #1
 800a974:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800a978:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	4413      	add	r3, r2
 800a986:	3308      	adds	r3, #8
 800a988:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a98c:	4413      	add	r3, r2
 800a98e:	1c99      	adds	r1, r3, #2
 800a990:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	3390      	adds	r3, #144	; 0x90
 800a99e:	443b      	add	r3, r7
 800a9a0:	3b7c      	subs	r3, #124	; 0x7c
 800a9a2:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800a9a4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a9a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	3309      	adds	r3, #9
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800a9c6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b259      	sxtb	r1, r3
 800a9d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	3390      	adds	r3, #144	; 0x90
 800a9e0:	443b      	add	r3, r7
 800a9e2:	3b78      	subs	r3, #120	; 0x78
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a9e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a9f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	f6ff af43 	blt.w	800a894 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800aa0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	f107 0208 	add.w	r2, r7, #8
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f6 fab6 	bl	8000f8c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800aa20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3790      	adds	r7, #144	; 0x90
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af02      	add	r7, sp, #8
 800aa32:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	7818      	ldrb	r0, [r3, #0]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa46:	b299      	uxth	r1, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aa56:	b29c      	uxth	r4, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	4623      	mov	r3, r4
 800aa64:	f000 f9bf 	bl	800ade6 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd90      	pop	{r4, r7, pc}

0800aa72 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	7818      	ldrb	r0, [r3, #0]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa8c:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800aa92:	461a      	mov	r2, r3
 800aa94:	f000 f9bb 	bl	800ae0e <hci_le_read_remote_used_features_complete_event>

  return status;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	895b      	ldrh	r3, [r3, #10]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	461a      	mov	r2, r3
 800aac4:	f000 f9b1 	bl	800ae2a <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800aad2:	b590      	push	{r4, r7, lr}
 800aad4:	b087      	sub	sp, #28
 800aad6:	af02      	add	r7, sp, #8
 800aad8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b298      	uxth	r0, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	885b      	ldrh	r3, [r3, #2]
 800aaec:	b299      	uxth	r1, r3
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	889b      	ldrh	r3, [r3, #4]
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	88db      	ldrh	r3, [r3, #6]
 800aaf8:	b29c      	uxth	r4, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	891b      	ldrh	r3, [r3, #8]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4623      	mov	r3, r4
 800ab04:	f000 f99f 	bl	800ae46 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd90      	pop	{r4, r7, pc}

0800ab12 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f000 f99e 	bl	800ae6e <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f000 f995 	bl	800ae86 <hci_le_generate_dhkey_complete_event>

  return status;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800ab66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab6a:	b08d      	sub	sp, #52	; 0x34
 800ab6c:	af08      	add	r7, sp, #32
 800ab6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f893 c000 	ldrb.w	ip, [r3]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab84:	fa1f fe83 	uxth.w	lr, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f893 8003 	ldrb.w	r8, [r3, #3]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800ab9c:	68b9      	ldr	r1, [r7, #8]
 800ab9e:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800aba0:	68b8      	ldr	r0, [r7, #8]
 800aba2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800aba6:	b280      	uxth	r0, r0
 800aba8:	68bc      	ldr	r4, [r7, #8]
 800abaa:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800abae:	b2a4      	uxth	r4, r4
 800abb0:	68bd      	ldr	r5, [r7, #8]
 800abb2:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800abb6:	b2ad      	uxth	r5, r5
 800abb8:	68be      	ldr	r6, [r7, #8]
 800abba:	7f76      	ldrb	r6, [r6, #29]
 800abbc:	9606      	str	r6, [sp, #24]
 800abbe:	9505      	str	r5, [sp, #20]
 800abc0:	9404      	str	r4, [sp, #16]
 800abc2:	9003      	str	r0, [sp, #12]
 800abc4:	9102      	str	r1, [sp, #8]
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	464b      	mov	r3, r9
 800abcc:	4642      	mov	r2, r8
 800abce:	4671      	mov	r1, lr
 800abd0:	4660      	mov	r0, ip
 800abd2:	f000 f964 	bl	800ae9e <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800abe2 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b0a6      	sub	sp, #152	; 0x98
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800abea:	2300      	movs	r3, #0
 800abec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800abf6:	2301      	movs	r3, #1
 800abf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800abfc:	2300      	movs	r3, #0
 800abfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac02:	e085      	b.n	800ad10 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800ac04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	4413      	add	r3, r2
 800ac10:	3301      	adds	r3, #1
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac18:	011b      	lsls	r3, r3, #4
 800ac1a:	3398      	adds	r3, #152	; 0x98
 800ac1c:	443b      	add	r3, r7
 800ac1e:	3b90      	subs	r3, #144	; 0x90
 800ac20:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ac22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac26:	3301      	adds	r3, #1
 800ac28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800ac2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	4413      	add	r3, r2
 800ac38:	3302      	adds	r3, #2
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	3398      	adds	r3, #152	; 0x98
 800ac44:	443b      	add	r3, r7
 800ac46:	3b8f      	subs	r3, #143	; 0x8f
 800ac48:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ac4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac4e:	3301      	adds	r3, #1
 800ac50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800ac54:	f107 0208 	add.w	r2, r7, #8
 800ac58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	4413      	add	r3, r2
 800ac60:	1c98      	adds	r0, r3, #2
 800ac62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac6c:	4413      	add	r3, r2
 800ac6e:	3303      	adds	r3, #3
 800ac70:	2206      	movs	r2, #6
 800ac72:	4619      	mov	r1, r3
 800ac74:	f001 fa4e 	bl	800c114 <memcpy>
    size += 6;
 800ac78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac7c:	3306      	adds	r3, #6
 800ac7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800ac82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3309      	adds	r3, #9
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	3398      	adds	r3, #152	; 0x98
 800ac9a:	443b      	add	r3, r7
 800ac9c:	3b88      	subs	r3, #136	; 0x88
 800ac9e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800aca0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aca4:	3301      	adds	r3, #1
 800aca6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800acaa:	f107 0208 	add.w	r2, r7, #8
 800acae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	3308      	adds	r3, #8
 800acb6:	4413      	add	r3, r2
 800acb8:	1c58      	adds	r0, r3, #1
 800acba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	3308      	adds	r3, #8
 800acc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800acc6:	4413      	add	r3, r2
 800acc8:	3302      	adds	r3, #2
 800acca:	2206      	movs	r2, #6
 800accc:	4619      	mov	r1, r3
 800acce:	f001 fa21 	bl	800c114 <memcpy>
    size += 6;
 800acd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acd6:	3306      	adds	r3, #6
 800acd8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800acdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ace0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ace4:	011b      	lsls	r3, r3, #4
 800ace6:	4413      	add	r3, r2
 800ace8:	3310      	adds	r3, #16
 800acea:	f993 2000 	ldrsb.w	r2, [r3]
 800acee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	3398      	adds	r3, #152	; 0x98
 800acf6:	443b      	add	r3, r7
 800acf8:	3b81      	subs	r3, #129	; 0x81
 800acfa:	701a      	strb	r2, [r3, #0]
    size += 1;
 800acfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad00:	3301      	adds	r3, #1
 800ad02:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ad06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	f6ff af71 	blt.w	800ac04 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800ad22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f107 0208 	add.w	r2, r7, #8
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 f8c9 	bl	800aec6 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800ad34:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3798      	adds	r7, #152	; 0x98
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	80bb      	strh	r3, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800ad5e:	b490      	push	{r4, r7}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	71fb      	strb	r3, [r7, #7]
 800ad70:	4603      	mov	r3, r0
 800ad72:	80bb      	strh	r3, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	71bb      	strb	r3, [r7, #6]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bc90      	pop	{r4, r7}
 800ad84:	4770      	bx	lr

0800ad86 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800ad86:	b480      	push	{r7}
 800ad88:	b083      	sub	sp, #12
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	4603      	mov	r3, r0
 800add2:	460a      	mov	r2, r1
 800add4:	71fb      	strb	r3, [r7, #7]
 800add6:	4613      	mov	r3, r2
 800add8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800ade6:	b490      	push	{r4, r7}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	4604      	mov	r4, r0
 800adee:	4608      	mov	r0, r1
 800adf0:	4611      	mov	r1, r2
 800adf2:	461a      	mov	r2, r3
 800adf4:	4623      	mov	r3, r4
 800adf6:	71fb      	strb	r3, [r7, #7]
 800adf8:	4603      	mov	r3, r0
 800adfa:	80bb      	strh	r3, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	807b      	strh	r3, [r7, #2]
 800ae00:	4613      	mov	r3, r2
 800ae02:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bc90      	pop	{r4, r7}
 800ae0c:	4770      	bx	lr

0800ae0e <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	4603      	mov	r3, r0
 800ae16:	603a      	str	r2, [r7, #0]
 800ae18:	71fb      	strb	r3, [r7, #7]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	4603      	mov	r3, r0
 800ae32:	6039      	str	r1, [r7, #0]
 800ae34:	80fb      	strh	r3, [r7, #6]
 800ae36:	4613      	mov	r3, r2
 800ae38:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800ae46:	b490      	push	{r4, r7}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	4608      	mov	r0, r1
 800ae50:	4611      	mov	r1, r2
 800ae52:	461a      	mov	r2, r3
 800ae54:	4623      	mov	r3, r4
 800ae56:	80fb      	strh	r3, [r7, #6]
 800ae58:	4603      	mov	r3, r0
 800ae5a:	80bb      	strh	r3, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	807b      	strh	r3, [r7, #2]
 800ae60:	4613      	mov	r3, r2
 800ae62:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bc90      	pop	{r4, r7}
 800ae6c:	4770      	bx	lr

0800ae6e <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	4603      	mov	r3, r0
 800ae76:	6039      	str	r1, [r7, #0]
 800ae78:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	6039      	str	r1, [r7, #0]
 800ae90:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800ae9e:	b490      	push	{r4, r7}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	4604      	mov	r4, r0
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4623      	mov	r3, r4
 800aeae:	71fb      	strb	r3, [r7, #7]
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	80bb      	strh	r3, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	71bb      	strb	r3, [r7, #6]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc90      	pop	{r4, r7}
 800aec4:	4770      	bx	lr

0800aec6 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	4603      	mov	r3, r0
 800aece:	6039      	str	r1, [r7, #0]
 800aed0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800aede:	b480      	push	{r7}
 800aee0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800aee2:	bf00      	nop
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	80fb      	strh	r3, [r7, #6]
 800aef6:	460b      	mov	r3, r1
 800aef8:	717b      	strb	r3, [r7, #5]
 800aefa:	4613      	mov	r3, r2
 800aefc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	4603      	mov	r3, r0
 800af12:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800af36:	b480      	push	{r7}
 800af38:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800af3a:	bf00      	nop
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800af48:	bf00      	nop
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	4603      	mov	r3, r0
 800af5a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	460a      	mov	r2, r1
 800af8a:	80fb      	strh	r3, [r7, #6]
 800af8c:	4613      	mov	r3, r2
 800af8e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800af9c:	b490      	push	{r4, r7}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	4611      	mov	r1, r2
 800afa8:	461a      	mov	r2, r3
 800afaa:	4623      	mov	r3, r4
 800afac:	80fb      	strh	r3, [r7, #6]
 800afae:	4603      	mov	r3, r0
 800afb0:	80bb      	strh	r3, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	807b      	strh	r3, [r7, #2]
 800afb6:	4613      	mov	r3, r2
 800afb8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc90      	pop	{r4, r7}
 800afc2:	4770      	bx	lr

0800afc4 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	4603      	mov	r3, r0
 800afe2:	460a      	mov	r2, r1
 800afe4:	80fb      	strh	r3, [r7, #6]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	603b      	str	r3, [r7, #0]
 800affe:	4603      	mov	r3, r0
 800b000:	80fb      	strh	r3, [r7, #6]
 800b002:	460b      	mov	r3, r1
 800b004:	717b      	strb	r3, [r7, #5]
 800b006:	4613      	mov	r3, r2
 800b008:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800b00a:	bf00      	nop
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	4603      	mov	r3, r0
 800b01e:	603a      	str	r2, [r7, #0]
 800b020:	80fb      	strh	r3, [r7, #6]
 800b022:	460b      	mov	r3, r1
 800b024:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	4603      	mov	r3, r0
 800b03a:	603a      	str	r2, [r7, #0]
 800b03c:	80fb      	strh	r3, [r7, #6]
 800b03e:	460b      	mov	r3, r1
 800b040:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800b042:	bf00      	nop
 800b044:	370c      	adds	r7, #12
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	4603      	mov	r3, r0
 800b056:	603a      	str	r2, [r7, #0]
 800b058:	80fb      	strh	r3, [r7, #6]
 800b05a:	460b      	mov	r3, r1
 800b05c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800b06a:	b490      	push	{r4, r7}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	4604      	mov	r4, r0
 800b072:	4608      	mov	r0, r1
 800b074:	4611      	mov	r1, r2
 800b076:	461a      	mov	r2, r3
 800b078:	4623      	mov	r3, r4
 800b07a:	80fb      	strh	r3, [r7, #6]
 800b07c:	4603      	mov	r3, r0
 800b07e:	80bb      	strh	r3, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
 800b084:	4613      	mov	r3, r2
 800b086:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc90      	pop	{r4, r7}
 800b090:	4770      	bx	lr

0800b092 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	4603      	mov	r3, r0
 800b09a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	81fb      	strh	r3, [r7, #14]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	81bb      	strh	r3, [r7, #12]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800b0bc:	bf00      	nop
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800b0c8:	b490      	push	{r4, r7}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	80fb      	strh	r3, [r7, #6]
 800b0da:	4603      	mov	r3, r0
 800b0dc:	717b      	strb	r3, [r7, #5]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	807b      	strh	r3, [r7, #2]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bc90      	pop	{r4, r7}
 800b0ee:	4770      	bx	lr

0800b0f0 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	607b      	str	r3, [r7, #4]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	81fb      	strh	r3, [r7, #14]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	81bb      	strh	r3, [r7, #12]
 800b100:	4613      	mov	r3, r2
 800b102:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	607b      	str	r3, [r7, #4]
 800b118:	4603      	mov	r3, r0
 800b11a:	81fb      	strh	r3, [r7, #14]
 800b11c:	460b      	mov	r3, r1
 800b11e:	81bb      	strh	r3, [r7, #12]
 800b120:	4613      	mov	r3, r2
 800b122:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	80fb      	strh	r3, [r7, #6]
 800b13a:	460b      	mov	r3, r1
 800b13c:	80bb      	strh	r3, [r7, #4]
 800b13e:	4613      	mov	r3, r2
 800b140:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	4603      	mov	r3, r0
 800b156:	603a      	str	r2, [r7, #0]
 800b158:	80fb      	strh	r3, [r7, #6]
 800b15a:	460b      	mov	r3, r1
 800b15c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	4603      	mov	r3, r0
 800b172:	460a      	mov	r2, r1
 800b174:	80fb      	strh	r3, [r7, #6]
 800b176:	4613      	mov	r3, r2
 800b178:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	4603      	mov	r3, r0
 800b18e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800b19c:	b490      	push	{r4, r7}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4623      	mov	r3, r4
 800b1ac:	80fb      	strh	r3, [r7, #6]
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	80bb      	strh	r3, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	807b      	strh	r3, [r7, #2]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc90      	pop	{r4, r7}
 800b1c2:	4770      	bx	lr

0800b1c4 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	80fb      	strh	r3, [r7, #6]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	603a      	str	r2, [r7, #0]
 800b1ea:	80fb      	strh	r3, [r7, #6]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800b1fc:	b490      	push	{r4, r7}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	461a      	mov	r2, r3
 800b20a:	4623      	mov	r3, r4
 800b20c:	80fb      	strh	r3, [r7, #6]
 800b20e:	4603      	mov	r3, r0
 800b210:	717b      	strb	r3, [r7, #5]
 800b212:	460b      	mov	r3, r1
 800b214:	807b      	strh	r3, [r7, #2]
 800b216:	4613      	mov	r3, r2
 800b218:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bc90      	pop	{r4, r7}
 800b222:	4770      	bx	lr

0800b224 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800b224:	b490      	push	{r4, r7}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	461a      	mov	r2, r3
 800b232:	4623      	mov	r3, r4
 800b234:	80fb      	strh	r3, [r7, #6]
 800b236:	4603      	mov	r3, r0
 800b238:	717b      	strb	r3, [r7, #5]
 800b23a:	460b      	mov	r3, r1
 800b23c:	807b      	strh	r3, [r7, #2]
 800b23e:	4613      	mov	r3, r2
 800b240:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bc90      	pop	{r4, r7}
 800b24a:	4770      	bx	lr

0800b24c <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
 800b282:	4603      	mov	r3, r0
 800b284:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	4603      	mov	r3, r0
 800b29a:	603a      	str	r2, [r7, #0]
 800b29c:	71fb      	strb	r3, [r7, #7]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b083      	sub	sp, #12
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	603a      	str	r2, [r7, #0]
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	603a      	str	r2, [r7, #0]
 800b2d4:	71fb      	strb	r3, [r7, #7]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800b2da:	bf00      	nop
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b088      	sub	sp, #32
 800b2ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b2f0:	f107 0308 	add.w	r3, r7, #8
 800b2f4:	2218      	movs	r2, #24
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fe91 	bl	800c020 <memset>
  rq.ogf = 0x03;
 800b2fe:	2303      	movs	r3, #3
 800b300:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b302:	2303      	movs	r3, #3
 800b304:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b306:	1dfb      	adds	r3, r7, #7
 800b308:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	2100      	movs	r1, #0
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f90b 	bl	800b530 <hci_send_req>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	da01      	bge.n	800b324 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b320:	23ff      	movs	r3, #255	; 0xff
 800b322:	e005      	b.n	800b330 <hci_reset+0x4a>
  if (status) {
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <hci_reset+0x48>
    return status;
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	e000      	b.n	800b330 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3308      	adds	r3, #8
 800b344:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b04      	cmp	r3, #4
 800b34c:	d001      	beq.n	800b352 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800b34e:	2301      	movs	r3, #1
 800b350:	e00c      	b.n	800b36c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3302      	adds	r3, #2
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b360:	3b03      	subs	r3, #3
 800b362:	429a      	cmp	r2, r3
 800b364:	d001      	beq.n	800b36a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800b366:	2302      	movs	r3, #2
 800b368:	e000      	b.n	800b36c <verify_packet+0x34>
  
  return 0;      
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b0a6      	sub	sp, #152	; 0x98
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	607b      	str	r3, [r7, #4]
 800b380:	4603      	mov	r3, r0
 800b382:	81fb      	strh	r3, [r7, #14]
 800b384:	460b      	mov	r3, r1
 800b386:	81bb      	strh	r3, [r7, #12]
 800b388:	4613      	mov	r3, r2
 800b38a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b38c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b394:	b21a      	sxth	r2, r3
 800b396:	89fb      	ldrh	r3, [r7, #14]
 800b398:	029b      	lsls	r3, r3, #10
 800b39a:	b21b      	sxth	r3, r3
 800b39c:	4313      	orrs	r3, r2
 800b39e:	b21b      	sxth	r3, r3
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b3ac:	f107 0318 	add.w	r3, r7, #24
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f107 0314 	add.w	r3, r7, #20
 800b3b8:	8819      	ldrh	r1, [r3, #0]
 800b3ba:	789b      	ldrb	r3, [r3, #2]
 800b3bc:	8011      	strh	r1, [r2, #0]
 800b3be:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b3c0:	f107 0318 	add.w	r3, r7, #24
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	7afa      	ldrb	r2, [r7, #11]
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fea2 	bl	800c114 <memcpy>
  
  if (hciContext.io.Send)
 800b3d0:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <send_cmd+0x7c>)
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d009      	beq.n	800b3ec <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <send_cmd+0x7c>)
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	7afa      	ldrb	r2, [r7, #11]
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	3204      	adds	r2, #4
 800b3e2:	b291      	uxth	r1, r2
 800b3e4:	f107 0218 	add.w	r2, r7, #24
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	3798      	adds	r7, #152	; 0x98
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20002720 	.word	0x20002720

0800b3f8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800b402:	e00a      	b.n	800b41a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	4619      	mov	r1, r3
 800b40a:	6838      	ldr	r0, [r7, #0]
 800b40c:	f000 fae8 	bl	800b9e0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fa4f 	bl	800b8b8 <list_insert_head>
  while (!list_is_empty(src_list))
 800b41a:	6838      	ldr	r0, [r7, #0]
 800b41c:	f000 fa2a 	bl	800b874 <list_is_empty>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0ee      	beq.n	800b404 <move_list+0xc>
  }
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b436:	e009      	b.n	800b44c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b438:	1d3b      	adds	r3, r7, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4809      	ldr	r0, [pc, #36]	; (800b464 <free_event_list+0x34>)
 800b43e:	f000 faa8 	bl	800b992 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4619      	mov	r1, r3
 800b446:	4808      	ldr	r0, [pc, #32]	; (800b468 <free_event_list+0x38>)
 800b448:	f000 fa5c 	bl	800b904 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b44c:	4806      	ldr	r0, [pc, #24]	; (800b468 <free_event_list+0x38>)
 800b44e:	f000 faee 	bl	800ba2e <list_get_size>
 800b452:	4603      	mov	r3, r0
 800b454:	2b04      	cmp	r3, #4
 800b456:	ddef      	ble.n	800b438 <free_event_list+0x8>
  }
}
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200021a0 	.word	0x200021a0
 800b468:	20002198 	.word	0x20002198

0800b46c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b47c:	4a18      	ldr	r2, [pc, #96]	; (800b4e0 <hci_init+0x74>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b482:	4818      	ldr	r0, [pc, #96]	; (800b4e4 <hci_init+0x78>)
 800b484:	f000 f9e6 	bl	800b854 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b488:	4817      	ldr	r0, [pc, #92]	; (800b4e8 <hci_init+0x7c>)
 800b48a:	f000 f9e3 	bl	800b854 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b48e:	f7f8 ffb9 	bl	8004404 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
 800b496:	e00c      	b.n	800b4b2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	228c      	movs	r2, #140	; 0x8c
 800b49c:	fb02 f303 	mul.w	r3, r2, r3
 800b4a0:	4a12      	ldr	r2, [pc, #72]	; (800b4ec <hci_init+0x80>)
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	480f      	ldr	r0, [pc, #60]	; (800b4e4 <hci_init+0x78>)
 800b4a8:	f000 fa2c 	bl	800b904 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	73fb      	strb	r3, [r7, #15]
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	2b09      	cmp	r3, #9
 800b4b6:	d9ef      	bls.n	800b498 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b4b8:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <hci_init+0x74>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <hci_init+0x5c>
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <hci_init+0x74>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b4c8:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <hci_init+0x74>)
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <hci_init+0x6a>
 800b4d0:	4b03      	ldr	r3, [pc, #12]	; (800b4e0 <hci_init+0x74>)
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	4798      	blx	r3
}
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20002720 	.word	0x20002720
 800b4e4:	20002198 	.word	0x20002198
 800b4e8:	200021a0 	.word	0x200021a0
 800b4ec:	200021a8 	.word	0x200021a8

0800b4f0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a0b      	ldr	r2, [pc, #44]	; (800b52c <hci_register_io_bus+0x3c>)
 800b4fe:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4a09      	ldr	r2, [pc, #36]	; (800b52c <hci_register_io_bus+0x3c>)
 800b506:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	4a07      	ldr	r2, [pc, #28]	; (800b52c <hci_register_io_bus+0x3c>)
 800b50e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	4a05      	ldr	r2, [pc, #20]	; (800b52c <hci_register_io_bus+0x3c>)
 800b516:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	4a03      	ldr	r2, [pc, #12]	; (800b52c <hci_register_io_bus+0x3c>)
 800b51e:	6093      	str	r3, [r2, #8]
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	20002720 	.word	0x20002720

0800b530 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	; 0x38
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	885b      	ldrh	r3, [r3, #2]
 800b540:	b21b      	sxth	r3, r3
 800b542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b546:	b21a      	sxth	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	881b      	ldrh	r3, [r3, #0]
 800b54c:	029b      	lsls	r3, r3, #10
 800b54e:	b21b      	sxth	r3, r3
 800b550:	4313      	orrs	r3, r2
 800b552:	b21b      	sxth	r3, r3
 800b554:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b55a:	f107 0308 	add.w	r3, r7, #8
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 f978 	bl	800b854 <list_init_head>

  free_event_list();
 800b564:	f7ff ff64 	bl	800b430 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	8818      	ldrh	r0, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8859      	ldrh	r1, [r3, #2]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	b2da      	uxtb	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f7ff fefd 	bl	800b378 <send_cmd>
  
  if (async)
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <hci_send_req+0x58>
  {
    return 0;
 800b584:	2300      	movs	r3, #0
 800b586:	e0e2      	b.n	800b74e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b588:	f7fa fa66 	bl	8005a58 <HAL_GetTick>
 800b58c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b58e:	f7fa fa63 	bl	8005a58 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b59c:	f200 80b3 	bhi.w	800b706 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b5a0:	486d      	ldr	r0, [pc, #436]	; (800b758 <hci_send_req+0x228>)
 800b5a2:	f000 f967 	bl	800b874 <list_is_empty>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d000      	beq.n	800b5ae <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b5ac:	e7ef      	b.n	800b58e <hci_send_req+0x5e>
      {
        break;
 800b5ae:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b5b0:	f107 0310 	add.w	r3, r7, #16
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4868      	ldr	r0, [pc, #416]	; (800b758 <hci_send_req+0x228>)
 800b5b8:	f000 f9eb 	bl	800b992 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d17f      	bne.n	800b6ca <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b5de:	3b03      	subs	r3, #3
 800b5e0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b3e      	cmp	r3, #62	; 0x3e
 800b5e8:	d04c      	beq.n	800b684 <hci_send_req+0x154>
 800b5ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b5ec:	dc68      	bgt.n	800b6c0 <hci_send_req+0x190>
 800b5ee:	2b10      	cmp	r3, #16
 800b5f0:	f000 808b 	beq.w	800b70a <hci_send_req+0x1da>
 800b5f4:	2b10      	cmp	r3, #16
 800b5f6:	dc63      	bgt.n	800b6c0 <hci_send_req+0x190>
 800b5f8:	2b0e      	cmp	r3, #14
 800b5fa:	d023      	beq.n	800b644 <hci_send_req+0x114>
 800b5fc:	2b0f      	cmp	r3, #15
 800b5fe:	d15f      	bne.n	800b6c0 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	885b      	ldrh	r3, [r3, #2]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d17e      	bne.n	800b70e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	2b0f      	cmp	r3, #15
 800b616:	d004      	beq.n	800b622 <hci_send_req+0xf2>
          if (cs->status) {
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d051      	beq.n	800b6c4 <hci_send_req+0x194>
            goto failed;
 800b620:	e078      	b.n	800b714 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695a      	ldr	r2, [r3, #20]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	429a      	cmp	r2, r3
 800b62a:	bf28      	it	cs
 800b62c:	461a      	movcs	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6918      	ldr	r0, [r3, #16]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	461a      	mov	r2, r3
 800b63c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b63e:	f000 fd69 	bl	800c114 <memcpy>
        goto done;
 800b642:	e078      	b.n	800b736 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b652:	429a      	cmp	r2, r3
 800b654:	d15d      	bne.n	800b712 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	3303      	adds	r3, #3
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	3b03      	subs	r3, #3
 800b660:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695a      	ldr	r2, [r3, #20]
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	429a      	cmp	r2, r3
 800b66a:	bf28      	it	cs
 800b66c:	461a      	movcs	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6918      	ldr	r0, [r3, #16]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b67e:	f000 fd49 	bl	800c114 <memcpy>
        goto done;
 800b682:	e058      	b.n	800b736 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	461a      	mov	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d118      	bne.n	800b6c8 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	3b01      	subs	r3, #1
 800b69a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	695a      	ldr	r2, [r3, #20]
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	bf28      	it	cs
 800b6a6:	461a      	movcs	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6918      	ldr	r0, [r3, #16]
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	1c59      	adds	r1, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	f000 fd2b 	bl	800c114 <memcpy>
        goto done;
 800b6be:	e03a      	b.n	800b736 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800b6c0:	bf00      	nop
 800b6c2:	e002      	b.n	800b6ca <hci_send_req+0x19a>
          break;
 800b6c4:	bf00      	nop
 800b6c6:	e000      	b.n	800b6ca <hci_send_req+0x19a>
          break;
 800b6c8:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b6ca:	4824      	ldr	r0, [pc, #144]	; (800b75c <hci_send_req+0x22c>)
 800b6cc:	f000 f8d2 	bl	800b874 <list_is_empty>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00d      	beq.n	800b6f2 <hci_send_req+0x1c2>
 800b6d6:	4820      	ldr	r0, [pc, #128]	; (800b758 <hci_send_req+0x228>)
 800b6d8:	f000 f8cc 	bl	800b874 <list_is_empty>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d007      	beq.n	800b6f2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	481d      	ldr	r0, [pc, #116]	; (800b75c <hci_send_req+0x22c>)
 800b6e8:	f000 f90c 	bl	800b904 <list_insert_tail>
      hciReadPacket=NULL;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	e008      	b.n	800b704 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	f107 0308 	add.w	r3, r7, #8
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 f902 	bl	800b904 <list_insert_tail>
      hciReadPacket=NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	613b      	str	r3, [r7, #16]
  {
 800b704:	e740      	b.n	800b588 <hci_send_req+0x58>
        goto failed;
 800b706:	bf00      	nop
 800b708:	e004      	b.n	800b714 <hci_send_req+0x1e4>
        goto failed;
 800b70a:	bf00      	nop
 800b70c:	e002      	b.n	800b714 <hci_send_req+0x1e4>
          goto failed;
 800b70e:	bf00      	nop
 800b710:	e000      	b.n	800b714 <hci_send_req+0x1e4>
          goto failed;
 800b712:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	4619      	mov	r1, r3
 800b71e:	480f      	ldr	r0, [pc, #60]	; (800b75c <hci_send_req+0x22c>)
 800b720:	f000 f8ca 	bl	800b8b8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	4619      	mov	r1, r3
 800b72a:	480b      	ldr	r0, [pc, #44]	; (800b758 <hci_send_req+0x228>)
 800b72c:	f7ff fe64 	bl	800b3f8 <move_list>

  return -1;
 800b730:	f04f 33ff 	mov.w	r3, #4294967295
 800b734:	e00b      	b.n	800b74e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	4619      	mov	r1, r3
 800b73a:	4808      	ldr	r0, [pc, #32]	; (800b75c <hci_send_req+0x22c>)
 800b73c:	f000 f8bc 	bl	800b8b8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	4619      	mov	r1, r3
 800b746:	4804      	ldr	r0, [pc, #16]	; (800b758 <hci_send_req+0x228>)
 800b748:	f7ff fe56 	bl	800b3f8 <move_list>

  return 0;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3738      	adds	r7, #56	; 0x38
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200021a0 	.word	0x200021a0
 800b75c:	20002198 	.word	0x20002198

0800b760 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b76a:	e013      	b.n	800b794 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b76c:	1d3b      	adds	r3, r7, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	480e      	ldr	r0, [pc, #56]	; (800b7ac <hci_user_evt_proc+0x4c>)
 800b772:	f000 f90e 	bl	800b992 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b776:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <hci_user_evt_proc+0x50>)
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b77e:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <hci_user_evt_proc+0x50>)
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	3208      	adds	r2, #8
 800b786:	4610      	mov	r0, r2
 800b788:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4619      	mov	r1, r3
 800b78e:	4809      	ldr	r0, [pc, #36]	; (800b7b4 <hci_user_evt_proc+0x54>)
 800b790:	f000 f8b8 	bl	800b904 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b794:	4805      	ldr	r0, [pc, #20]	; (800b7ac <hci_user_evt_proc+0x4c>)
 800b796:	f000 f86d 	bl	800b874 <list_is_empty>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0e5      	beq.n	800b76c <hci_user_evt_proc+0xc>
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200021a0 	.word	0x200021a0
 800b7b0:	20002720 	.word	0x20002720
 800b7b4:	20002198 	.word	0x20002198

0800b7b8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b7c8:	481f      	ldr	r0, [pc, #124]	; (800b848 <hci_notify_asynch_evt+0x90>)
 800b7ca:	f000 f853 	bl	800b874 <list_is_empty>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d132      	bne.n	800b83a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b7d4:	f107 030c 	add.w	r3, r7, #12
 800b7d8:	4619      	mov	r1, r3
 800b7da:	481b      	ldr	r0, [pc, #108]	; (800b848 <hci_notify_asynch_evt+0x90>)
 800b7dc:	f000 f8d9 	bl	800b992 <list_remove_head>
    
    if (hciContext.io.Receive)
 800b7e0:	4b1a      	ldr	r3, [pc, #104]	; (800b84c <hci_notify_asynch_evt+0x94>)
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d02a      	beq.n	800b83e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b7e8:	4b18      	ldr	r3, [pc, #96]	; (800b84c <hci_notify_asynch_evt+0x94>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	3208      	adds	r2, #8
 800b7f0:	2180      	movs	r1, #128	; 0x80
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	4798      	blx	r3
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b7fa:	7cfb      	ldrb	r3, [r7, #19]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d016      	beq.n	800b82e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	7cfa      	ldrb	r2, [r7, #19]
 800b804:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fd94 	bl	800b338 <verify_packet>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	4619      	mov	r1, r3
 800b81a:	480d      	ldr	r0, [pc, #52]	; (800b850 <hci_notify_asynch_evt+0x98>)
 800b81c:	f000 f872 	bl	800b904 <list_insert_tail>
 800b820:	e00d      	b.n	800b83e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	4619      	mov	r1, r3
 800b826:	4808      	ldr	r0, [pc, #32]	; (800b848 <hci_notify_asynch_evt+0x90>)
 800b828:	f000 f846 	bl	800b8b8 <list_insert_head>
 800b82c:	e007      	b.n	800b83e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4619      	mov	r1, r3
 800b832:	4805      	ldr	r0, [pc, #20]	; (800b848 <hci_notify_asynch_evt+0x90>)
 800b834:	f000 f840 	bl	800b8b8 <list_insert_head>
 800b838:	e001      	b.n	800b83e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b83a:	2301      	movs	r3, #1
 800b83c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b83e:	697b      	ldr	r3, [r7, #20]
  
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20002198 	.word	0x20002198
 800b84c:	20002720 	.word	0x20002720
 800b850:	200021a0 	.word	0x200021a0

0800b854 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	605a      	str	r2, [r3, #4]
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b87c:	f3ef 8310 	mrs	r3, PRIMASK
 800b880:	60fb      	str	r3, [r7, #12]
  return(result);
 800b882:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b886:	b672      	cpsid	i
}
 800b888:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d102      	bne.n	800b89a <list_is_empty+0x26>
  {
    return_value = 1;
 800b894:	2301      	movs	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
 800b898:	e001      	b.n	800b89e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	75fb      	strb	r3, [r7, #23]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	f383 8810 	msr	PRIMASK, r3
}
 800b8a8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	371c      	adds	r7, #28
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b8ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8cc:	b672      	cpsid	i
}
 800b8ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	605a      	str	r2, [r3, #4]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f383 8810 	msr	PRIMASK, r3
}
 800b8f6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b8f8:	bf00      	nop
 800b8fa:	371c      	adds	r7, #28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b90e:	f3ef 8310 	mrs	r3, PRIMASK
 800b912:	60fb      	str	r3, [r7, #12]
  return(result);
 800b914:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b918:	b672      	cpsid	i
}
 800b91a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f383 8810 	msr	PRIMASK, r3
}
 800b942:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b944:	bf00      	nop
 800b946:	371c      	adds	r7, #28
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b958:	f3ef 8310 	mrs	r3, PRIMASK
 800b95c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b95e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b962:	b672      	cpsid	i
}
 800b964:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	6812      	ldr	r2, [r2, #0]
 800b96e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6852      	ldr	r2, [r2, #4]
 800b978:	605a      	str	r2, [r3, #4]
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f383 8810 	msr	PRIMASK, r3
}
 800b984:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b99c:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9a6:	b672      	cpsid	i
}
 800b9a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff ffca 	bl	800b950 <list_remove_node>
  (*node)->next = NULL;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	605a      	str	r2, [r3, #4]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f383 8810 	msr	PRIMASK, r3
}
 800b9d6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b9d8:	bf00      	nop
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f4:	b672      	cpsid	i
}
 800b9f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff ffa3 	bl	800b950 <list_remove_node>
  (*node)->next = NULL;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2200      	movs	r2, #0
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f383 8810 	msr	PRIMASK, r3
}
 800ba24:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ba26:	bf00      	nop
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b089      	sub	sp, #36	; 0x24
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  int size = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba3e:	613b      	str	r3, [r7, #16]
  return(result);
 800ba40:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba44:	b672      	cpsid	i
}
 800ba46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ba4e:	e005      	b.n	800ba5c <list_get_size+0x2e>
  {
    size++;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3301      	adds	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d1f5      	bne.n	800ba50 <list_get_size+0x22>
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f383 8810 	msr	PRIMASK, r3
}
 800ba6e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800ba70:	69fb      	ldr	r3, [r7, #28]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3724      	adds	r7, #36	; 0x24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
	...

0800ba80 <__sflush_r>:
 800ba80:	898a      	ldrh	r2, [r1, #12]
 800ba82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba86:	4605      	mov	r5, r0
 800ba88:	0710      	lsls	r0, r2, #28
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	d458      	bmi.n	800bb40 <__sflush_r+0xc0>
 800ba8e:	684b      	ldr	r3, [r1, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc05      	bgt.n	800baa0 <__sflush_r+0x20>
 800ba94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dc02      	bgt.n	800baa0 <__sflush_r+0x20>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baa2:	2e00      	cmp	r6, #0
 800baa4:	d0f9      	beq.n	800ba9a <__sflush_r+0x1a>
 800baa6:	2300      	movs	r3, #0
 800baa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800baac:	682f      	ldr	r7, [r5, #0]
 800baae:	6a21      	ldr	r1, [r4, #32]
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	d032      	beq.n	800bb1a <__sflush_r+0x9a>
 800bab4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	075a      	lsls	r2, r3, #29
 800baba:	d505      	bpl.n	800bac8 <__sflush_r+0x48>
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	1ac0      	subs	r0, r0, r3
 800bac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bac2:	b10b      	cbz	r3, 800bac8 <__sflush_r+0x48>
 800bac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bac6:	1ac0      	subs	r0, r0, r3
 800bac8:	2300      	movs	r3, #0
 800baca:	4602      	mov	r2, r0
 800bacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bace:	6a21      	ldr	r1, [r4, #32]
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b0      	blx	r6
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	d106      	bne.n	800bae8 <__sflush_r+0x68>
 800bada:	6829      	ldr	r1, [r5, #0]
 800badc:	291d      	cmp	r1, #29
 800bade:	d82b      	bhi.n	800bb38 <__sflush_r+0xb8>
 800bae0:	4a29      	ldr	r2, [pc, #164]	; (800bb88 <__sflush_r+0x108>)
 800bae2:	410a      	asrs	r2, r1
 800bae4:	07d6      	lsls	r6, r2, #31
 800bae6:	d427      	bmi.n	800bb38 <__sflush_r+0xb8>
 800bae8:	2200      	movs	r2, #0
 800baea:	6062      	str	r2, [r4, #4]
 800baec:	04d9      	lsls	r1, r3, #19
 800baee:	6922      	ldr	r2, [r4, #16]
 800baf0:	6022      	str	r2, [r4, #0]
 800baf2:	d504      	bpl.n	800bafe <__sflush_r+0x7e>
 800baf4:	1c42      	adds	r2, r0, #1
 800baf6:	d101      	bne.n	800bafc <__sflush_r+0x7c>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b903      	cbnz	r3, 800bafe <__sflush_r+0x7e>
 800bafc:	6560      	str	r0, [r4, #84]	; 0x54
 800bafe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb00:	602f      	str	r7, [r5, #0]
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d0c9      	beq.n	800ba9a <__sflush_r+0x1a>
 800bb06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	d002      	beq.n	800bb14 <__sflush_r+0x94>
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 fb0e 	bl	800c130 <_free_r>
 800bb14:	2000      	movs	r0, #0
 800bb16:	6360      	str	r0, [r4, #52]	; 0x34
 800bb18:	e7c0      	b.n	800ba9c <__sflush_r+0x1c>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	47b0      	blx	r6
 800bb20:	1c41      	adds	r1, r0, #1
 800bb22:	d1c8      	bne.n	800bab6 <__sflush_r+0x36>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0c5      	beq.n	800bab6 <__sflush_r+0x36>
 800bb2a:	2b1d      	cmp	r3, #29
 800bb2c:	d001      	beq.n	800bb32 <__sflush_r+0xb2>
 800bb2e:	2b16      	cmp	r3, #22
 800bb30:	d101      	bne.n	800bb36 <__sflush_r+0xb6>
 800bb32:	602f      	str	r7, [r5, #0]
 800bb34:	e7b1      	b.n	800ba9a <__sflush_r+0x1a>
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	e7ad      	b.n	800ba9c <__sflush_r+0x1c>
 800bb40:	690f      	ldr	r7, [r1, #16]
 800bb42:	2f00      	cmp	r7, #0
 800bb44:	d0a9      	beq.n	800ba9a <__sflush_r+0x1a>
 800bb46:	0793      	lsls	r3, r2, #30
 800bb48:	680e      	ldr	r6, [r1, #0]
 800bb4a:	bf08      	it	eq
 800bb4c:	694b      	ldreq	r3, [r1, #20]
 800bb4e:	600f      	str	r7, [r1, #0]
 800bb50:	bf18      	it	ne
 800bb52:	2300      	movne	r3, #0
 800bb54:	eba6 0807 	sub.w	r8, r6, r7
 800bb58:	608b      	str	r3, [r1, #8]
 800bb5a:	f1b8 0f00 	cmp.w	r8, #0
 800bb5e:	dd9c      	ble.n	800ba9a <__sflush_r+0x1a>
 800bb60:	6a21      	ldr	r1, [r4, #32]
 800bb62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb64:	4643      	mov	r3, r8
 800bb66:	463a      	mov	r2, r7
 800bb68:	4628      	mov	r0, r5
 800bb6a:	47b0      	blx	r6
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	dc06      	bgt.n	800bb7e <__sflush_r+0xfe>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	e78e      	b.n	800ba9c <__sflush_r+0x1c>
 800bb7e:	4407      	add	r7, r0
 800bb80:	eba8 0800 	sub.w	r8, r8, r0
 800bb84:	e7e9      	b.n	800bb5a <__sflush_r+0xda>
 800bb86:	bf00      	nop
 800bb88:	dfbffffe 	.word	0xdfbffffe

0800bb8c <_fflush_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	690b      	ldr	r3, [r1, #16]
 800bb90:	4605      	mov	r5, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	b913      	cbnz	r3, 800bb9c <_fflush_r+0x10>
 800bb96:	2500      	movs	r5, #0
 800bb98:	4628      	mov	r0, r5
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	b118      	cbz	r0, 800bba6 <_fflush_r+0x1a>
 800bb9e:	6a03      	ldr	r3, [r0, #32]
 800bba0:	b90b      	cbnz	r3, 800bba6 <_fflush_r+0x1a>
 800bba2:	f000 f8a9 	bl	800bcf8 <__sinit>
 800bba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0f3      	beq.n	800bb96 <_fflush_r+0xa>
 800bbae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbb0:	07d0      	lsls	r0, r2, #31
 800bbb2:	d404      	bmi.n	800bbbe <_fflush_r+0x32>
 800bbb4:	0599      	lsls	r1, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_fflush_r+0x32>
 800bbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbba:	f000 faa9 	bl	800c110 <__retarget_lock_acquire_recursive>
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f7ff ff5d 	bl	800ba80 <__sflush_r>
 800bbc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbc8:	07da      	lsls	r2, r3, #31
 800bbca:	4605      	mov	r5, r0
 800bbcc:	d4e4      	bmi.n	800bb98 <_fflush_r+0xc>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	059b      	lsls	r3, r3, #22
 800bbd2:	d4e1      	bmi.n	800bb98 <_fflush_r+0xc>
 800bbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbd6:	f000 fa9c 	bl	800c112 <__retarget_lock_release_recursive>
 800bbda:	e7dd      	b.n	800bb98 <_fflush_r+0xc>

0800bbdc <fflush>:
 800bbdc:	4601      	mov	r1, r0
 800bbde:	b920      	cbnz	r0, 800bbea <fflush+0xe>
 800bbe0:	4a04      	ldr	r2, [pc, #16]	; (800bbf4 <fflush+0x18>)
 800bbe2:	4905      	ldr	r1, [pc, #20]	; (800bbf8 <fflush+0x1c>)
 800bbe4:	4805      	ldr	r0, [pc, #20]	; (800bbfc <fflush+0x20>)
 800bbe6:	f000 b89f 	b.w	800bd28 <_fwalk_sglue>
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <fflush+0x24>)
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	f7ff bfcd 	b.w	800bb8c <_fflush_r>
 800bbf2:	bf00      	nop
 800bbf4:	200001b4 	.word	0x200001b4
 800bbf8:	0800bb8d 	.word	0x0800bb8d
 800bbfc:	200001c0 	.word	0x200001c0
 800bc00:	2000020c 	.word	0x2000020c

0800bc04 <std>:
 800bc04:	2300      	movs	r3, #0
 800bc06:	b510      	push	{r4, lr}
 800bc08:	4604      	mov	r4, r0
 800bc0a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc12:	6083      	str	r3, [r0, #8]
 800bc14:	8181      	strh	r1, [r0, #12]
 800bc16:	6643      	str	r3, [r0, #100]	; 0x64
 800bc18:	81c2      	strh	r2, [r0, #14]
 800bc1a:	6183      	str	r3, [r0, #24]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	2208      	movs	r2, #8
 800bc20:	305c      	adds	r0, #92	; 0x5c
 800bc22:	f000 f9fd 	bl	800c020 <memset>
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <std+0x38>)
 800bc28:	6263      	str	r3, [r4, #36]	; 0x24
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <std+0x3c>)
 800bc2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x40>)
 800bc30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <std+0x44>)
 800bc34:	6224      	str	r4, [r4, #32]
 800bc36:	6323      	str	r3, [r4, #48]	; 0x30
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0800be51 	.word	0x0800be51
 800bc40:	0800be73 	.word	0x0800be73
 800bc44:	0800beab 	.word	0x0800beab
 800bc48:	0800becf 	.word	0x0800becf

0800bc4c <stdio_exit_handler>:
 800bc4c:	4a02      	ldr	r2, [pc, #8]	; (800bc58 <stdio_exit_handler+0xc>)
 800bc4e:	4903      	ldr	r1, [pc, #12]	; (800bc5c <stdio_exit_handler+0x10>)
 800bc50:	4803      	ldr	r0, [pc, #12]	; (800bc60 <stdio_exit_handler+0x14>)
 800bc52:	f000 b869 	b.w	800bd28 <_fwalk_sglue>
 800bc56:	bf00      	nop
 800bc58:	200001b4 	.word	0x200001b4
 800bc5c:	0800bb8d 	.word	0x0800bb8d
 800bc60:	200001c0 	.word	0x200001c0

0800bc64 <cleanup_stdio>:
 800bc64:	6841      	ldr	r1, [r0, #4]
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <cleanup_stdio+0x34>)
 800bc68:	4299      	cmp	r1, r3
 800bc6a:	b510      	push	{r4, lr}
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	d001      	beq.n	800bc74 <cleanup_stdio+0x10>
 800bc70:	f7ff ff8c 	bl	800bb8c <_fflush_r>
 800bc74:	68a1      	ldr	r1, [r4, #8]
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <cleanup_stdio+0x38>)
 800bc78:	4299      	cmp	r1, r3
 800bc7a:	d002      	beq.n	800bc82 <cleanup_stdio+0x1e>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7ff ff85 	bl	800bb8c <_fflush_r>
 800bc82:	68e1      	ldr	r1, [r4, #12]
 800bc84:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <cleanup_stdio+0x3c>)
 800bc86:	4299      	cmp	r1, r3
 800bc88:	d004      	beq.n	800bc94 <cleanup_stdio+0x30>
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc90:	f7ff bf7c 	b.w	800bb8c <_fflush_r>
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	bf00      	nop
 800bc98:	20002740 	.word	0x20002740
 800bc9c:	200027a8 	.word	0x200027a8
 800bca0:	20002810 	.word	0x20002810

0800bca4 <global_stdio_init.part.0>:
 800bca4:	b510      	push	{r4, lr}
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <global_stdio_init.part.0+0x30>)
 800bca8:	4c0b      	ldr	r4, [pc, #44]	; (800bcd8 <global_stdio_init.part.0+0x34>)
 800bcaa:	4a0c      	ldr	r2, [pc, #48]	; (800bcdc <global_stdio_init.part.0+0x38>)
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	4620      	mov	r0, r4
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2104      	movs	r1, #4
 800bcb4:	f7ff ffa6 	bl	800bc04 <std>
 800bcb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	2109      	movs	r1, #9
 800bcc0:	f7ff ffa0 	bl	800bc04 <std>
 800bcc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bcc8:	2202      	movs	r2, #2
 800bcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcce:	2112      	movs	r1, #18
 800bcd0:	f7ff bf98 	b.w	800bc04 <std>
 800bcd4:	20002878 	.word	0x20002878
 800bcd8:	20002740 	.word	0x20002740
 800bcdc:	0800bc4d 	.word	0x0800bc4d

0800bce0 <__sfp_lock_acquire>:
 800bce0:	4801      	ldr	r0, [pc, #4]	; (800bce8 <__sfp_lock_acquire+0x8>)
 800bce2:	f000 ba15 	b.w	800c110 <__retarget_lock_acquire_recursive>
 800bce6:	bf00      	nop
 800bce8:	20002881 	.word	0x20002881

0800bcec <__sfp_lock_release>:
 800bcec:	4801      	ldr	r0, [pc, #4]	; (800bcf4 <__sfp_lock_release+0x8>)
 800bcee:	f000 ba10 	b.w	800c112 <__retarget_lock_release_recursive>
 800bcf2:	bf00      	nop
 800bcf4:	20002881 	.word	0x20002881

0800bcf8 <__sinit>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	f7ff fff0 	bl	800bce0 <__sfp_lock_acquire>
 800bd00:	6a23      	ldr	r3, [r4, #32]
 800bd02:	b11b      	cbz	r3, 800bd0c <__sinit+0x14>
 800bd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd08:	f7ff bff0 	b.w	800bcec <__sfp_lock_release>
 800bd0c:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <__sinit+0x28>)
 800bd0e:	6223      	str	r3, [r4, #32]
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <__sinit+0x2c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1f5      	bne.n	800bd04 <__sinit+0xc>
 800bd18:	f7ff ffc4 	bl	800bca4 <global_stdio_init.part.0>
 800bd1c:	e7f2      	b.n	800bd04 <__sinit+0xc>
 800bd1e:	bf00      	nop
 800bd20:	0800bc65 	.word	0x0800bc65
 800bd24:	20002878 	.word	0x20002878

0800bd28 <_fwalk_sglue>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	4688      	mov	r8, r1
 800bd30:	4614      	mov	r4, r2
 800bd32:	2600      	movs	r6, #0
 800bd34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd38:	f1b9 0901 	subs.w	r9, r9, #1
 800bd3c:	d505      	bpl.n	800bd4a <_fwalk_sglue+0x22>
 800bd3e:	6824      	ldr	r4, [r4, #0]
 800bd40:	2c00      	cmp	r4, #0
 800bd42:	d1f7      	bne.n	800bd34 <_fwalk_sglue+0xc>
 800bd44:	4630      	mov	r0, r6
 800bd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d907      	bls.n	800bd60 <_fwalk_sglue+0x38>
 800bd50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd54:	3301      	adds	r3, #1
 800bd56:	d003      	beq.n	800bd60 <_fwalk_sglue+0x38>
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	47c0      	blx	r8
 800bd5e:	4306      	orrs	r6, r0
 800bd60:	3568      	adds	r5, #104	; 0x68
 800bd62:	e7e9      	b.n	800bd38 <_fwalk_sglue+0x10>

0800bd64 <iprintf>:
 800bd64:	b40f      	push	{r0, r1, r2, r3}
 800bd66:	b507      	push	{r0, r1, r2, lr}
 800bd68:	4906      	ldr	r1, [pc, #24]	; (800bd84 <iprintf+0x20>)
 800bd6a:	ab04      	add	r3, sp, #16
 800bd6c:	6808      	ldr	r0, [r1, #0]
 800bd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd72:	6881      	ldr	r1, [r0, #8]
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	f000 fafd 	bl	800c374 <_vfiprintf_r>
 800bd7a:	b003      	add	sp, #12
 800bd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd80:	b004      	add	sp, #16
 800bd82:	4770      	bx	lr
 800bd84:	2000020c 	.word	0x2000020c

0800bd88 <putchar>:
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <putchar+0xc>)
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	6882      	ldr	r2, [r0, #8]
 800bd90:	f000 bdfc 	b.w	800c98c <_putc_r>
 800bd94:	2000020c 	.word	0x2000020c

0800bd98 <_puts_r>:
 800bd98:	6a03      	ldr	r3, [r0, #32]
 800bd9a:	b570      	push	{r4, r5, r6, lr}
 800bd9c:	6884      	ldr	r4, [r0, #8]
 800bd9e:	4605      	mov	r5, r0
 800bda0:	460e      	mov	r6, r1
 800bda2:	b90b      	cbnz	r3, 800bda8 <_puts_r+0x10>
 800bda4:	f7ff ffa8 	bl	800bcf8 <__sinit>
 800bda8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d405      	bmi.n	800bdba <_puts_r+0x22>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	0598      	lsls	r0, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_puts_r+0x22>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb6:	f000 f9ab 	bl	800c110 <__retarget_lock_acquire_recursive>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	0719      	lsls	r1, r3, #28
 800bdbe:	d513      	bpl.n	800bde8 <_puts_r+0x50>
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	b18b      	cbz	r3, 800bde8 <_puts_r+0x50>
 800bdc4:	3e01      	subs	r6, #1
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	60a3      	str	r3, [r4, #8]
 800bdd0:	b9e9      	cbnz	r1, 800be0e <_puts_r+0x76>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da2e      	bge.n	800be34 <_puts_r+0x9c>
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	210a      	movs	r1, #10
 800bdda:	4628      	mov	r0, r5
 800bddc:	f000 f87b 	bl	800bed6 <__swbuf_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	d007      	beq.n	800bdf4 <_puts_r+0x5c>
 800bde4:	250a      	movs	r5, #10
 800bde6:	e007      	b.n	800bdf8 <_puts_r+0x60>
 800bde8:	4621      	mov	r1, r4
 800bdea:	4628      	mov	r0, r5
 800bdec:	f000 f8b0 	bl	800bf50 <__swsetup_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0e7      	beq.n	800bdc4 <_puts_r+0x2c>
 800bdf4:	f04f 35ff 	mov.w	r5, #4294967295
 800bdf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdfa:	07da      	lsls	r2, r3, #31
 800bdfc:	d405      	bmi.n	800be0a <_puts_r+0x72>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	059b      	lsls	r3, r3, #22
 800be02:	d402      	bmi.n	800be0a <_puts_r+0x72>
 800be04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be06:	f000 f984 	bl	800c112 <__retarget_lock_release_recursive>
 800be0a:	4628      	mov	r0, r5
 800be0c:	bd70      	pop	{r4, r5, r6, pc}
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da04      	bge.n	800be1c <_puts_r+0x84>
 800be12:	69a2      	ldr	r2, [r4, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	dc06      	bgt.n	800be26 <_puts_r+0x8e>
 800be18:	290a      	cmp	r1, #10
 800be1a:	d004      	beq.n	800be26 <_puts_r+0x8e>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	6022      	str	r2, [r4, #0]
 800be22:	7019      	strb	r1, [r3, #0]
 800be24:	e7cf      	b.n	800bdc6 <_puts_r+0x2e>
 800be26:	4622      	mov	r2, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 f854 	bl	800bed6 <__swbuf_r>
 800be2e:	3001      	adds	r0, #1
 800be30:	d1c9      	bne.n	800bdc6 <_puts_r+0x2e>
 800be32:	e7df      	b.n	800bdf4 <_puts_r+0x5c>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	250a      	movs	r5, #10
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	6022      	str	r2, [r4, #0]
 800be3c:	701d      	strb	r5, [r3, #0]
 800be3e:	e7db      	b.n	800bdf8 <_puts_r+0x60>

0800be40 <puts>:
 800be40:	4b02      	ldr	r3, [pc, #8]	; (800be4c <puts+0xc>)
 800be42:	4601      	mov	r1, r0
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	f7ff bfa7 	b.w	800bd98 <_puts_r>
 800be4a:	bf00      	nop
 800be4c:	2000020c 	.word	0x2000020c

0800be50 <__sread>:
 800be50:	b510      	push	{r4, lr}
 800be52:	460c      	mov	r4, r1
 800be54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be58:	f000 f90c 	bl	800c074 <_read_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	bfab      	itete	ge
 800be60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be62:	89a3      	ldrhlt	r3, [r4, #12]
 800be64:	181b      	addge	r3, r3, r0
 800be66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be6a:	bfac      	ite	ge
 800be6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be6e:	81a3      	strhlt	r3, [r4, #12]
 800be70:	bd10      	pop	{r4, pc}

0800be72 <__swrite>:
 800be72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be76:	461f      	mov	r7, r3
 800be78:	898b      	ldrh	r3, [r1, #12]
 800be7a:	05db      	lsls	r3, r3, #23
 800be7c:	4605      	mov	r5, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	4616      	mov	r6, r2
 800be82:	d505      	bpl.n	800be90 <__swrite+0x1e>
 800be84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be88:	2302      	movs	r3, #2
 800be8a:	2200      	movs	r2, #0
 800be8c:	f000 f8e0 	bl	800c050 <_lseek_r>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	4628      	mov	r0, r5
 800bea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bea6:	f000 b8f7 	b.w	800c098 <_write_r>

0800beaa <__sseek>:
 800beaa:	b510      	push	{r4, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb2:	f000 f8cd 	bl	800c050 <_lseek_r>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	bf15      	itete	ne
 800bebc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bec6:	81a3      	strheq	r3, [r4, #12]
 800bec8:	bf18      	it	ne
 800beca:	81a3      	strhne	r3, [r4, #12]
 800becc:	bd10      	pop	{r4, pc}

0800bece <__sclose>:
 800bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed2:	f000 b8ad 	b.w	800c030 <_close_r>

0800bed6 <__swbuf_r>:
 800bed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed8:	460e      	mov	r6, r1
 800beda:	4614      	mov	r4, r2
 800bedc:	4605      	mov	r5, r0
 800bede:	b118      	cbz	r0, 800bee8 <__swbuf_r+0x12>
 800bee0:	6a03      	ldr	r3, [r0, #32]
 800bee2:	b90b      	cbnz	r3, 800bee8 <__swbuf_r+0x12>
 800bee4:	f7ff ff08 	bl	800bcf8 <__sinit>
 800bee8:	69a3      	ldr	r3, [r4, #24]
 800beea:	60a3      	str	r3, [r4, #8]
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	071a      	lsls	r2, r3, #28
 800bef0:	d525      	bpl.n	800bf3e <__swbuf_r+0x68>
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	b31b      	cbz	r3, 800bf3e <__swbuf_r+0x68>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	6922      	ldr	r2, [r4, #16]
 800befa:	1a98      	subs	r0, r3, r2
 800befc:	6963      	ldr	r3, [r4, #20]
 800befe:	b2f6      	uxtb	r6, r6
 800bf00:	4283      	cmp	r3, r0
 800bf02:	4637      	mov	r7, r6
 800bf04:	dc04      	bgt.n	800bf10 <__swbuf_r+0x3a>
 800bf06:	4621      	mov	r1, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f7ff fe3f 	bl	800bb8c <_fflush_r>
 800bf0e:	b9e0      	cbnz	r0, 800bf4a <__swbuf_r+0x74>
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	60a3      	str	r3, [r4, #8]
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	6022      	str	r2, [r4, #0]
 800bf1c:	701e      	strb	r6, [r3, #0]
 800bf1e:	6962      	ldr	r2, [r4, #20]
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d004      	beq.n	800bf30 <__swbuf_r+0x5a>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	07db      	lsls	r3, r3, #31
 800bf2a:	d506      	bpl.n	800bf3a <__swbuf_r+0x64>
 800bf2c:	2e0a      	cmp	r6, #10
 800bf2e:	d104      	bne.n	800bf3a <__swbuf_r+0x64>
 800bf30:	4621      	mov	r1, r4
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7ff fe2a 	bl	800bb8c <_fflush_r>
 800bf38:	b938      	cbnz	r0, 800bf4a <__swbuf_r+0x74>
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4628      	mov	r0, r5
 800bf42:	f000 f805 	bl	800bf50 <__swsetup_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0d5      	beq.n	800bef6 <__swbuf_r+0x20>
 800bf4a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf4e:	e7f4      	b.n	800bf3a <__swbuf_r+0x64>

0800bf50 <__swsetup_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <__swsetup_r+0xac>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b118      	cbz	r0, 800bf64 <__swsetup_r+0x14>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swsetup_r+0x14>
 800bf60:	f7ff feca 	bl	800bcf8 <__sinit>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf6a:	0718      	lsls	r0, r3, #28
 800bf6c:	d422      	bmi.n	800bfb4 <__swsetup_r+0x64>
 800bf6e:	06d9      	lsls	r1, r3, #27
 800bf70:	d407      	bmi.n	800bf82 <__swsetup_r+0x32>
 800bf72:	2309      	movs	r3, #9
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	e034      	b.n	800bfec <__swsetup_r+0x9c>
 800bf82:	0758      	lsls	r0, r3, #29
 800bf84:	d512      	bpl.n	800bfac <__swsetup_r+0x5c>
 800bf86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf88:	b141      	cbz	r1, 800bf9c <__swsetup_r+0x4c>
 800bf8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf8e:	4299      	cmp	r1, r3
 800bf90:	d002      	beq.n	800bf98 <__swsetup_r+0x48>
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f8cc 	bl	800c130 <_free_r>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6363      	str	r3, [r4, #52]	; 0x34
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	6063      	str	r3, [r4, #4]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f043 0308 	orr.w	r3, r3, #8
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b94b      	cbnz	r3, 800bfcc <__swsetup_r+0x7c>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc2:	d003      	beq.n	800bfcc <__swsetup_r+0x7c>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 fca4 	bl	800c914 <__smakebuf_r>
 800bfcc:	89a0      	ldrh	r0, [r4, #12]
 800bfce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd2:	f010 0301 	ands.w	r3, r0, #1
 800bfd6:	d00a      	beq.n	800bfee <__swsetup_r+0x9e>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60a3      	str	r3, [r4, #8]
 800bfdc:	6963      	ldr	r3, [r4, #20]
 800bfde:	425b      	negs	r3, r3
 800bfe0:	61a3      	str	r3, [r4, #24]
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	b943      	cbnz	r3, 800bff8 <__swsetup_r+0xa8>
 800bfe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfea:	d1c4      	bne.n	800bf76 <__swsetup_r+0x26>
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	0781      	lsls	r1, r0, #30
 800bff0:	bf58      	it	pl
 800bff2:	6963      	ldrpl	r3, [r4, #20]
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	e7f4      	b.n	800bfe2 <__swsetup_r+0x92>
 800bff8:	2000      	movs	r0, #0
 800bffa:	e7f7      	b.n	800bfec <__swsetup_r+0x9c>
 800bffc:	2000020c 	.word	0x2000020c

0800c000 <memcmp>:
 800c000:	b510      	push	{r4, lr}
 800c002:	3901      	subs	r1, #1
 800c004:	4402      	add	r2, r0
 800c006:	4290      	cmp	r0, r2
 800c008:	d101      	bne.n	800c00e <memcmp+0xe>
 800c00a:	2000      	movs	r0, #0
 800c00c:	e005      	b.n	800c01a <memcmp+0x1a>
 800c00e:	7803      	ldrb	r3, [r0, #0]
 800c010:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c014:	42a3      	cmp	r3, r4
 800c016:	d001      	beq.n	800c01c <memcmp+0x1c>
 800c018:	1b18      	subs	r0, r3, r4
 800c01a:	bd10      	pop	{r4, pc}
 800c01c:	3001      	adds	r0, #1
 800c01e:	e7f2      	b.n	800c006 <memcmp+0x6>

0800c020 <memset>:
 800c020:	4402      	add	r2, r0
 800c022:	4603      	mov	r3, r0
 800c024:	4293      	cmp	r3, r2
 800c026:	d100      	bne.n	800c02a <memset+0xa>
 800c028:	4770      	bx	lr
 800c02a:	f803 1b01 	strb.w	r1, [r3], #1
 800c02e:	e7f9      	b.n	800c024 <memset+0x4>

0800c030 <_close_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	; (800c04c <_close_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f9 fc1f 	bl	800587e <_close>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_close_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_close_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	2000287c 	.word	0x2000287c

0800c050 <_lseek_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d07      	ldr	r5, [pc, #28]	; (800c070 <_lseek_r+0x20>)
 800c054:	4604      	mov	r4, r0
 800c056:	4608      	mov	r0, r1
 800c058:	4611      	mov	r1, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	602a      	str	r2, [r5, #0]
 800c05e:	461a      	mov	r2, r3
 800c060:	f7f9 fc34 	bl	80058cc <_lseek>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	d102      	bne.n	800c06e <_lseek_r+0x1e>
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	b103      	cbz	r3, 800c06e <_lseek_r+0x1e>
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	2000287c 	.word	0x2000287c

0800c074 <_read_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_read_r+0x20>)
 800c078:	4604      	mov	r4, r0
 800c07a:	4608      	mov	r0, r1
 800c07c:	4611      	mov	r1, r2
 800c07e:	2200      	movs	r2, #0
 800c080:	602a      	str	r2, [r5, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	f7f9 fbc2 	bl	800580c <_read>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_read_r+0x1e>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_read_r+0x1e>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	2000287c 	.word	0x2000287c

0800c098 <_write_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d07      	ldr	r5, [pc, #28]	; (800c0b8 <_write_r+0x20>)
 800c09c:	4604      	mov	r4, r0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	602a      	str	r2, [r5, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f7f9 fbcd 	bl	8005846 <_write>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_write_r+0x1e>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_write_r+0x1e>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	2000287c 	.word	0x2000287c

0800c0bc <__errno>:
 800c0bc:	4b01      	ldr	r3, [pc, #4]	; (800c0c4 <__errno+0x8>)
 800c0be:	6818      	ldr	r0, [r3, #0]
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	2000020c 	.word	0x2000020c

0800c0c8 <__libc_init_array>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	4d0d      	ldr	r5, [pc, #52]	; (800c100 <__libc_init_array+0x38>)
 800c0cc:	4c0d      	ldr	r4, [pc, #52]	; (800c104 <__libc_init_array+0x3c>)
 800c0ce:	1b64      	subs	r4, r4, r5
 800c0d0:	10a4      	asrs	r4, r4, #2
 800c0d2:	2600      	movs	r6, #0
 800c0d4:	42a6      	cmp	r6, r4
 800c0d6:	d109      	bne.n	800c0ec <__libc_init_array+0x24>
 800c0d8:	4d0b      	ldr	r5, [pc, #44]	; (800c108 <__libc_init_array+0x40>)
 800c0da:	4c0c      	ldr	r4, [pc, #48]	; (800c10c <__libc_init_array+0x44>)
 800c0dc:	f000 fcbc 	bl	800ca58 <_init>
 800c0e0:	1b64      	subs	r4, r4, r5
 800c0e2:	10a4      	asrs	r4, r4, #2
 800c0e4:	2600      	movs	r6, #0
 800c0e6:	42a6      	cmp	r6, r4
 800c0e8:	d105      	bne.n	800c0f6 <__libc_init_array+0x2e>
 800c0ea:	bd70      	pop	{r4, r5, r6, pc}
 800c0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f0:	4798      	blx	r3
 800c0f2:	3601      	adds	r6, #1
 800c0f4:	e7ee      	b.n	800c0d4 <__libc_init_array+0xc>
 800c0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0fa:	4798      	blx	r3
 800c0fc:	3601      	adds	r6, #1
 800c0fe:	e7f2      	b.n	800c0e6 <__libc_init_array+0x1e>
 800c100:	0800e400 	.word	0x0800e400
 800c104:	0800e400 	.word	0x0800e400
 800c108:	0800e400 	.word	0x0800e400
 800c10c:	0800e404 	.word	0x0800e404

0800c110 <__retarget_lock_acquire_recursive>:
 800c110:	4770      	bx	lr

0800c112 <__retarget_lock_release_recursive>:
 800c112:	4770      	bx	lr

0800c114 <memcpy>:
 800c114:	440a      	add	r2, r1
 800c116:	4291      	cmp	r1, r2
 800c118:	f100 33ff 	add.w	r3, r0, #4294967295
 800c11c:	d100      	bne.n	800c120 <memcpy+0xc>
 800c11e:	4770      	bx	lr
 800c120:	b510      	push	{r4, lr}
 800c122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c12a:	4291      	cmp	r1, r2
 800c12c:	d1f9      	bne.n	800c122 <memcpy+0xe>
 800c12e:	bd10      	pop	{r4, pc}

0800c130 <_free_r>:
 800c130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c132:	2900      	cmp	r1, #0
 800c134:	d044      	beq.n	800c1c0 <_free_r+0x90>
 800c136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c13a:	9001      	str	r0, [sp, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f1a1 0404 	sub.w	r4, r1, #4
 800c142:	bfb8      	it	lt
 800c144:	18e4      	addlt	r4, r4, r3
 800c146:	f000 f8df 	bl	800c308 <__malloc_lock>
 800c14a:	4a1e      	ldr	r2, [pc, #120]	; (800c1c4 <_free_r+0x94>)
 800c14c:	9801      	ldr	r0, [sp, #4]
 800c14e:	6813      	ldr	r3, [r2, #0]
 800c150:	b933      	cbnz	r3, 800c160 <_free_r+0x30>
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	6014      	str	r4, [r2, #0]
 800c156:	b003      	add	sp, #12
 800c158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c15c:	f000 b8da 	b.w	800c314 <__malloc_unlock>
 800c160:	42a3      	cmp	r3, r4
 800c162:	d908      	bls.n	800c176 <_free_r+0x46>
 800c164:	6825      	ldr	r5, [r4, #0]
 800c166:	1961      	adds	r1, r4, r5
 800c168:	428b      	cmp	r3, r1
 800c16a:	bf01      	itttt	eq
 800c16c:	6819      	ldreq	r1, [r3, #0]
 800c16e:	685b      	ldreq	r3, [r3, #4]
 800c170:	1949      	addeq	r1, r1, r5
 800c172:	6021      	streq	r1, [r4, #0]
 800c174:	e7ed      	b.n	800c152 <_free_r+0x22>
 800c176:	461a      	mov	r2, r3
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	b10b      	cbz	r3, 800c180 <_free_r+0x50>
 800c17c:	42a3      	cmp	r3, r4
 800c17e:	d9fa      	bls.n	800c176 <_free_r+0x46>
 800c180:	6811      	ldr	r1, [r2, #0]
 800c182:	1855      	adds	r5, r2, r1
 800c184:	42a5      	cmp	r5, r4
 800c186:	d10b      	bne.n	800c1a0 <_free_r+0x70>
 800c188:	6824      	ldr	r4, [r4, #0]
 800c18a:	4421      	add	r1, r4
 800c18c:	1854      	adds	r4, r2, r1
 800c18e:	42a3      	cmp	r3, r4
 800c190:	6011      	str	r1, [r2, #0]
 800c192:	d1e0      	bne.n	800c156 <_free_r+0x26>
 800c194:	681c      	ldr	r4, [r3, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	6053      	str	r3, [r2, #4]
 800c19a:	440c      	add	r4, r1
 800c19c:	6014      	str	r4, [r2, #0]
 800c19e:	e7da      	b.n	800c156 <_free_r+0x26>
 800c1a0:	d902      	bls.n	800c1a8 <_free_r+0x78>
 800c1a2:	230c      	movs	r3, #12
 800c1a4:	6003      	str	r3, [r0, #0]
 800c1a6:	e7d6      	b.n	800c156 <_free_r+0x26>
 800c1a8:	6825      	ldr	r5, [r4, #0]
 800c1aa:	1961      	adds	r1, r4, r5
 800c1ac:	428b      	cmp	r3, r1
 800c1ae:	bf04      	itt	eq
 800c1b0:	6819      	ldreq	r1, [r3, #0]
 800c1b2:	685b      	ldreq	r3, [r3, #4]
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	bf04      	itt	eq
 800c1b8:	1949      	addeq	r1, r1, r5
 800c1ba:	6021      	streq	r1, [r4, #0]
 800c1bc:	6054      	str	r4, [r2, #4]
 800c1be:	e7ca      	b.n	800c156 <_free_r+0x26>
 800c1c0:	b003      	add	sp, #12
 800c1c2:	bd30      	pop	{r4, r5, pc}
 800c1c4:	20002884 	.word	0x20002884

0800c1c8 <sbrk_aligned>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	4e0e      	ldr	r6, [pc, #56]	; (800c204 <sbrk_aligned+0x3c>)
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	6831      	ldr	r1, [r6, #0]
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	b911      	cbnz	r1, 800c1da <sbrk_aligned+0x12>
 800c1d4:	f000 fc30 	bl	800ca38 <_sbrk_r>
 800c1d8:	6030      	str	r0, [r6, #0]
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f000 fc2b 	bl	800ca38 <_sbrk_r>
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	d00a      	beq.n	800c1fc <sbrk_aligned+0x34>
 800c1e6:	1cc4      	adds	r4, r0, #3
 800c1e8:	f024 0403 	bic.w	r4, r4, #3
 800c1ec:	42a0      	cmp	r0, r4
 800c1ee:	d007      	beq.n	800c200 <sbrk_aligned+0x38>
 800c1f0:	1a21      	subs	r1, r4, r0
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 fc20 	bl	800ca38 <_sbrk_r>
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	d101      	bne.n	800c200 <sbrk_aligned+0x38>
 800c1fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c200:	4620      	mov	r0, r4
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	20002888 	.word	0x20002888

0800c208 <_malloc_r>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	1ccd      	adds	r5, r1, #3
 800c20e:	f025 0503 	bic.w	r5, r5, #3
 800c212:	3508      	adds	r5, #8
 800c214:	2d0c      	cmp	r5, #12
 800c216:	bf38      	it	cc
 800c218:	250c      	movcc	r5, #12
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	4607      	mov	r7, r0
 800c21e:	db01      	blt.n	800c224 <_malloc_r+0x1c>
 800c220:	42a9      	cmp	r1, r5
 800c222:	d905      	bls.n	800c230 <_malloc_r+0x28>
 800c224:	230c      	movs	r3, #12
 800c226:	603b      	str	r3, [r7, #0]
 800c228:	2600      	movs	r6, #0
 800c22a:	4630      	mov	r0, r6
 800c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c304 <_malloc_r+0xfc>
 800c234:	f000 f868 	bl	800c308 <__malloc_lock>
 800c238:	f8d8 3000 	ldr.w	r3, [r8]
 800c23c:	461c      	mov	r4, r3
 800c23e:	bb5c      	cbnz	r4, 800c298 <_malloc_r+0x90>
 800c240:	4629      	mov	r1, r5
 800c242:	4638      	mov	r0, r7
 800c244:	f7ff ffc0 	bl	800c1c8 <sbrk_aligned>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	4604      	mov	r4, r0
 800c24c:	d155      	bne.n	800c2fa <_malloc_r+0xf2>
 800c24e:	f8d8 4000 	ldr.w	r4, [r8]
 800c252:	4626      	mov	r6, r4
 800c254:	2e00      	cmp	r6, #0
 800c256:	d145      	bne.n	800c2e4 <_malloc_r+0xdc>
 800c258:	2c00      	cmp	r4, #0
 800c25a:	d048      	beq.n	800c2ee <_malloc_r+0xe6>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	4631      	mov	r1, r6
 800c260:	4638      	mov	r0, r7
 800c262:	eb04 0903 	add.w	r9, r4, r3
 800c266:	f000 fbe7 	bl	800ca38 <_sbrk_r>
 800c26a:	4581      	cmp	r9, r0
 800c26c:	d13f      	bne.n	800c2ee <_malloc_r+0xe6>
 800c26e:	6821      	ldr	r1, [r4, #0]
 800c270:	1a6d      	subs	r5, r5, r1
 800c272:	4629      	mov	r1, r5
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff ffa7 	bl	800c1c8 <sbrk_aligned>
 800c27a:	3001      	adds	r0, #1
 800c27c:	d037      	beq.n	800c2ee <_malloc_r+0xe6>
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	442b      	add	r3, r5
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	f8d8 3000 	ldr.w	r3, [r8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d038      	beq.n	800c2fe <_malloc_r+0xf6>
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	42a2      	cmp	r2, r4
 800c290:	d12b      	bne.n	800c2ea <_malloc_r+0xe2>
 800c292:	2200      	movs	r2, #0
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	e00f      	b.n	800c2b8 <_malloc_r+0xb0>
 800c298:	6822      	ldr	r2, [r4, #0]
 800c29a:	1b52      	subs	r2, r2, r5
 800c29c:	d41f      	bmi.n	800c2de <_malloc_r+0xd6>
 800c29e:	2a0b      	cmp	r2, #11
 800c2a0:	d917      	bls.n	800c2d2 <_malloc_r+0xca>
 800c2a2:	1961      	adds	r1, r4, r5
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	6025      	str	r5, [r4, #0]
 800c2a8:	bf18      	it	ne
 800c2aa:	6059      	strne	r1, [r3, #4]
 800c2ac:	6863      	ldr	r3, [r4, #4]
 800c2ae:	bf08      	it	eq
 800c2b0:	f8c8 1000 	streq.w	r1, [r8]
 800c2b4:	5162      	str	r2, [r4, r5]
 800c2b6:	604b      	str	r3, [r1, #4]
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f104 060b 	add.w	r6, r4, #11
 800c2be:	f000 f829 	bl	800c314 <__malloc_unlock>
 800c2c2:	f026 0607 	bic.w	r6, r6, #7
 800c2c6:	1d23      	adds	r3, r4, #4
 800c2c8:	1af2      	subs	r2, r6, r3
 800c2ca:	d0ae      	beq.n	800c22a <_malloc_r+0x22>
 800c2cc:	1b9b      	subs	r3, r3, r6
 800c2ce:	50a3      	str	r3, [r4, r2]
 800c2d0:	e7ab      	b.n	800c22a <_malloc_r+0x22>
 800c2d2:	42a3      	cmp	r3, r4
 800c2d4:	6862      	ldr	r2, [r4, #4]
 800c2d6:	d1dd      	bne.n	800c294 <_malloc_r+0x8c>
 800c2d8:	f8c8 2000 	str.w	r2, [r8]
 800c2dc:	e7ec      	b.n	800c2b8 <_malloc_r+0xb0>
 800c2de:	4623      	mov	r3, r4
 800c2e0:	6864      	ldr	r4, [r4, #4]
 800c2e2:	e7ac      	b.n	800c23e <_malloc_r+0x36>
 800c2e4:	4634      	mov	r4, r6
 800c2e6:	6876      	ldr	r6, [r6, #4]
 800c2e8:	e7b4      	b.n	800c254 <_malloc_r+0x4c>
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	e7cc      	b.n	800c288 <_malloc_r+0x80>
 800c2ee:	230c      	movs	r3, #12
 800c2f0:	603b      	str	r3, [r7, #0]
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f000 f80e 	bl	800c314 <__malloc_unlock>
 800c2f8:	e797      	b.n	800c22a <_malloc_r+0x22>
 800c2fa:	6025      	str	r5, [r4, #0]
 800c2fc:	e7dc      	b.n	800c2b8 <_malloc_r+0xb0>
 800c2fe:	605b      	str	r3, [r3, #4]
 800c300:	deff      	udf	#255	; 0xff
 800c302:	bf00      	nop
 800c304:	20002884 	.word	0x20002884

0800c308 <__malloc_lock>:
 800c308:	4801      	ldr	r0, [pc, #4]	; (800c310 <__malloc_lock+0x8>)
 800c30a:	f7ff bf01 	b.w	800c110 <__retarget_lock_acquire_recursive>
 800c30e:	bf00      	nop
 800c310:	20002880 	.word	0x20002880

0800c314 <__malloc_unlock>:
 800c314:	4801      	ldr	r0, [pc, #4]	; (800c31c <__malloc_unlock+0x8>)
 800c316:	f7ff befc 	b.w	800c112 <__retarget_lock_release_recursive>
 800c31a:	bf00      	nop
 800c31c:	20002880 	.word	0x20002880

0800c320 <__sfputc_r>:
 800c320:	6893      	ldr	r3, [r2, #8]
 800c322:	3b01      	subs	r3, #1
 800c324:	2b00      	cmp	r3, #0
 800c326:	b410      	push	{r4}
 800c328:	6093      	str	r3, [r2, #8]
 800c32a:	da08      	bge.n	800c33e <__sfputc_r+0x1e>
 800c32c:	6994      	ldr	r4, [r2, #24]
 800c32e:	42a3      	cmp	r3, r4
 800c330:	db01      	blt.n	800c336 <__sfputc_r+0x16>
 800c332:	290a      	cmp	r1, #10
 800c334:	d103      	bne.n	800c33e <__sfputc_r+0x1e>
 800c336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c33a:	f7ff bdcc 	b.w	800bed6 <__swbuf_r>
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	1c58      	adds	r0, r3, #1
 800c342:	6010      	str	r0, [r2, #0]
 800c344:	7019      	strb	r1, [r3, #0]
 800c346:	4608      	mov	r0, r1
 800c348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <__sfputs_r>:
 800c34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	4614      	mov	r4, r2
 800c356:	18d5      	adds	r5, r2, r3
 800c358:	42ac      	cmp	r4, r5
 800c35a:	d101      	bne.n	800c360 <__sfputs_r+0x12>
 800c35c:	2000      	movs	r0, #0
 800c35e:	e007      	b.n	800c370 <__sfputs_r+0x22>
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	463a      	mov	r2, r7
 800c366:	4630      	mov	r0, r6
 800c368:	f7ff ffda 	bl	800c320 <__sfputc_r>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d1f3      	bne.n	800c358 <__sfputs_r+0xa>
 800c370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c374 <_vfiprintf_r>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	460d      	mov	r5, r1
 800c37a:	b09d      	sub	sp, #116	; 0x74
 800c37c:	4614      	mov	r4, r2
 800c37e:	4698      	mov	r8, r3
 800c380:	4606      	mov	r6, r0
 800c382:	b118      	cbz	r0, 800c38c <_vfiprintf_r+0x18>
 800c384:	6a03      	ldr	r3, [r0, #32]
 800c386:	b90b      	cbnz	r3, 800c38c <_vfiprintf_r+0x18>
 800c388:	f7ff fcb6 	bl	800bcf8 <__sinit>
 800c38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c38e:	07d9      	lsls	r1, r3, #31
 800c390:	d405      	bmi.n	800c39e <_vfiprintf_r+0x2a>
 800c392:	89ab      	ldrh	r3, [r5, #12]
 800c394:	059a      	lsls	r2, r3, #22
 800c396:	d402      	bmi.n	800c39e <_vfiprintf_r+0x2a>
 800c398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c39a:	f7ff feb9 	bl	800c110 <__retarget_lock_acquire_recursive>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	071b      	lsls	r3, r3, #28
 800c3a2:	d501      	bpl.n	800c3a8 <_vfiprintf_r+0x34>
 800c3a4:	692b      	ldr	r3, [r5, #16]
 800c3a6:	b99b      	cbnz	r3, 800c3d0 <_vfiprintf_r+0x5c>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff fdd0 	bl	800bf50 <__swsetup_r>
 800c3b0:	b170      	cbz	r0, 800c3d0 <_vfiprintf_r+0x5c>
 800c3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b4:	07dc      	lsls	r4, r3, #31
 800c3b6:	d504      	bpl.n	800c3c2 <_vfiprintf_r+0x4e>
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	b01d      	add	sp, #116	; 0x74
 800c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c2:	89ab      	ldrh	r3, [r5, #12]
 800c3c4:	0598      	lsls	r0, r3, #22
 800c3c6:	d4f7      	bmi.n	800c3b8 <_vfiprintf_r+0x44>
 800c3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ca:	f7ff fea2 	bl	800c112 <__retarget_lock_release_recursive>
 800c3ce:	e7f3      	b.n	800c3b8 <_vfiprintf_r+0x44>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d4:	2320      	movs	r3, #32
 800c3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3de:	2330      	movs	r3, #48	; 0x30
 800c3e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c594 <_vfiprintf_r+0x220>
 800c3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3e8:	f04f 0901 	mov.w	r9, #1
 800c3ec:	4623      	mov	r3, r4
 800c3ee:	469a      	mov	sl, r3
 800c3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f4:	b10a      	cbz	r2, 800c3fa <_vfiprintf_r+0x86>
 800c3f6:	2a25      	cmp	r2, #37	; 0x25
 800c3f8:	d1f9      	bne.n	800c3ee <_vfiprintf_r+0x7a>
 800c3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c3fe:	d00b      	beq.n	800c418 <_vfiprintf_r+0xa4>
 800c400:	465b      	mov	r3, fp
 800c402:	4622      	mov	r2, r4
 800c404:	4629      	mov	r1, r5
 800c406:	4630      	mov	r0, r6
 800c408:	f7ff ffa1 	bl	800c34e <__sfputs_r>
 800c40c:	3001      	adds	r0, #1
 800c40e:	f000 80a9 	beq.w	800c564 <_vfiprintf_r+0x1f0>
 800c412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c414:	445a      	add	r2, fp
 800c416:	9209      	str	r2, [sp, #36]	; 0x24
 800c418:	f89a 3000 	ldrb.w	r3, [sl]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 80a1 	beq.w	800c564 <_vfiprintf_r+0x1f0>
 800c422:	2300      	movs	r3, #0
 800c424:	f04f 32ff 	mov.w	r2, #4294967295
 800c428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42c:	f10a 0a01 	add.w	sl, sl, #1
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	9307      	str	r3, [sp, #28]
 800c434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c438:	931a      	str	r3, [sp, #104]	; 0x68
 800c43a:	4654      	mov	r4, sl
 800c43c:	2205      	movs	r2, #5
 800c43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c442:	4854      	ldr	r0, [pc, #336]	; (800c594 <_vfiprintf_r+0x220>)
 800c444:	f7f3 fecc 	bl	80001e0 <memchr>
 800c448:	9a04      	ldr	r2, [sp, #16]
 800c44a:	b9d8      	cbnz	r0, 800c484 <_vfiprintf_r+0x110>
 800c44c:	06d1      	lsls	r1, r2, #27
 800c44e:	bf44      	itt	mi
 800c450:	2320      	movmi	r3, #32
 800c452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c456:	0713      	lsls	r3, r2, #28
 800c458:	bf44      	itt	mi
 800c45a:	232b      	movmi	r3, #43	; 0x2b
 800c45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c460:	f89a 3000 	ldrb.w	r3, [sl]
 800c464:	2b2a      	cmp	r3, #42	; 0x2a
 800c466:	d015      	beq.n	800c494 <_vfiprintf_r+0x120>
 800c468:	9a07      	ldr	r2, [sp, #28]
 800c46a:	4654      	mov	r4, sl
 800c46c:	2000      	movs	r0, #0
 800c46e:	f04f 0c0a 	mov.w	ip, #10
 800c472:	4621      	mov	r1, r4
 800c474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c478:	3b30      	subs	r3, #48	; 0x30
 800c47a:	2b09      	cmp	r3, #9
 800c47c:	d94d      	bls.n	800c51a <_vfiprintf_r+0x1a6>
 800c47e:	b1b0      	cbz	r0, 800c4ae <_vfiprintf_r+0x13a>
 800c480:	9207      	str	r2, [sp, #28]
 800c482:	e014      	b.n	800c4ae <_vfiprintf_r+0x13a>
 800c484:	eba0 0308 	sub.w	r3, r0, r8
 800c488:	fa09 f303 	lsl.w	r3, r9, r3
 800c48c:	4313      	orrs	r3, r2
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	46a2      	mov	sl, r4
 800c492:	e7d2      	b.n	800c43a <_vfiprintf_r+0xc6>
 800c494:	9b03      	ldr	r3, [sp, #12]
 800c496:	1d19      	adds	r1, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	9103      	str	r1, [sp, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bfbb      	ittet	lt
 800c4a0:	425b      	neglt	r3, r3
 800c4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a6:	9307      	strge	r3, [sp, #28]
 800c4a8:	9307      	strlt	r3, [sp, #28]
 800c4aa:	bfb8      	it	lt
 800c4ac:	9204      	strlt	r2, [sp, #16]
 800c4ae:	7823      	ldrb	r3, [r4, #0]
 800c4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b2:	d10c      	bne.n	800c4ce <_vfiprintf_r+0x15a>
 800c4b4:	7863      	ldrb	r3, [r4, #1]
 800c4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b8:	d134      	bne.n	800c524 <_vfiprintf_r+0x1b0>
 800c4ba:	9b03      	ldr	r3, [sp, #12]
 800c4bc:	1d1a      	adds	r2, r3, #4
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	9203      	str	r2, [sp, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bfb8      	it	lt
 800c4c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4ca:	3402      	adds	r4, #2
 800c4cc:	9305      	str	r3, [sp, #20]
 800c4ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c5a4 <_vfiprintf_r+0x230>
 800c4d2:	7821      	ldrb	r1, [r4, #0]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	f7f3 fe82 	bl	80001e0 <memchr>
 800c4dc:	b138      	cbz	r0, 800c4ee <_vfiprintf_r+0x17a>
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	eba0 000a 	sub.w	r0, r0, sl
 800c4e4:	2240      	movs	r2, #64	; 0x40
 800c4e6:	4082      	lsls	r2, r0
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	3401      	adds	r4, #1
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f2:	4829      	ldr	r0, [pc, #164]	; (800c598 <_vfiprintf_r+0x224>)
 800c4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4f8:	2206      	movs	r2, #6
 800c4fa:	f7f3 fe71 	bl	80001e0 <memchr>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d03f      	beq.n	800c582 <_vfiprintf_r+0x20e>
 800c502:	4b26      	ldr	r3, [pc, #152]	; (800c59c <_vfiprintf_r+0x228>)
 800c504:	bb1b      	cbnz	r3, 800c54e <_vfiprintf_r+0x1da>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	3307      	adds	r3, #7
 800c50a:	f023 0307 	bic.w	r3, r3, #7
 800c50e:	3308      	adds	r3, #8
 800c510:	9303      	str	r3, [sp, #12]
 800c512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c514:	443b      	add	r3, r7
 800c516:	9309      	str	r3, [sp, #36]	; 0x24
 800c518:	e768      	b.n	800c3ec <_vfiprintf_r+0x78>
 800c51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51e:	460c      	mov	r4, r1
 800c520:	2001      	movs	r0, #1
 800c522:	e7a6      	b.n	800c472 <_vfiprintf_r+0xfe>
 800c524:	2300      	movs	r3, #0
 800c526:	3401      	adds	r4, #1
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	4619      	mov	r1, r3
 800c52c:	f04f 0c0a 	mov.w	ip, #10
 800c530:	4620      	mov	r0, r4
 800c532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c536:	3a30      	subs	r2, #48	; 0x30
 800c538:	2a09      	cmp	r2, #9
 800c53a:	d903      	bls.n	800c544 <_vfiprintf_r+0x1d0>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0c6      	beq.n	800c4ce <_vfiprintf_r+0x15a>
 800c540:	9105      	str	r1, [sp, #20]
 800c542:	e7c4      	b.n	800c4ce <_vfiprintf_r+0x15a>
 800c544:	fb0c 2101 	mla	r1, ip, r1, r2
 800c548:	4604      	mov	r4, r0
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7f0      	b.n	800c530 <_vfiprintf_r+0x1bc>
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	462a      	mov	r2, r5
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <_vfiprintf_r+0x22c>)
 800c556:	a904      	add	r1, sp, #16
 800c558:	4630      	mov	r0, r6
 800c55a:	f3af 8000 	nop.w
 800c55e:	4607      	mov	r7, r0
 800c560:	1c78      	adds	r0, r7, #1
 800c562:	d1d6      	bne.n	800c512 <_vfiprintf_r+0x19e>
 800c564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c566:	07d9      	lsls	r1, r3, #31
 800c568:	d405      	bmi.n	800c576 <_vfiprintf_r+0x202>
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	059a      	lsls	r2, r3, #22
 800c56e:	d402      	bmi.n	800c576 <_vfiprintf_r+0x202>
 800c570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c572:	f7ff fdce 	bl	800c112 <__retarget_lock_release_recursive>
 800c576:	89ab      	ldrh	r3, [r5, #12]
 800c578:	065b      	lsls	r3, r3, #25
 800c57a:	f53f af1d 	bmi.w	800c3b8 <_vfiprintf_r+0x44>
 800c57e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c580:	e71c      	b.n	800c3bc <_vfiprintf_r+0x48>
 800c582:	ab03      	add	r3, sp, #12
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	462a      	mov	r2, r5
 800c588:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <_vfiprintf_r+0x22c>)
 800c58a:	a904      	add	r1, sp, #16
 800c58c:	4630      	mov	r0, r6
 800c58e:	f000 f879 	bl	800c684 <_printf_i>
 800c592:	e7e4      	b.n	800c55e <_vfiprintf_r+0x1ea>
 800c594:	0800e3c4 	.word	0x0800e3c4
 800c598:	0800e3ce 	.word	0x0800e3ce
 800c59c:	00000000 	.word	0x00000000
 800c5a0:	0800c34f 	.word	0x0800c34f
 800c5a4:	0800e3ca 	.word	0x0800e3ca

0800c5a8 <_printf_common>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	4616      	mov	r6, r2
 800c5ae:	4699      	mov	r9, r3
 800c5b0:	688a      	ldr	r2, [r1, #8]
 800c5b2:	690b      	ldr	r3, [r1, #16]
 800c5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	bfb8      	it	lt
 800c5bc:	4613      	movlt	r3, r2
 800c5be:	6033      	str	r3, [r6, #0]
 800c5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	b10a      	cbz	r2, 800c5ce <_printf_common+0x26>
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	6033      	str	r3, [r6, #0]
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	0699      	lsls	r1, r3, #26
 800c5d2:	bf42      	ittt	mi
 800c5d4:	6833      	ldrmi	r3, [r6, #0]
 800c5d6:	3302      	addmi	r3, #2
 800c5d8:	6033      	strmi	r3, [r6, #0]
 800c5da:	6825      	ldr	r5, [r4, #0]
 800c5dc:	f015 0506 	ands.w	r5, r5, #6
 800c5e0:	d106      	bne.n	800c5f0 <_printf_common+0x48>
 800c5e2:	f104 0a19 	add.w	sl, r4, #25
 800c5e6:	68e3      	ldr	r3, [r4, #12]
 800c5e8:	6832      	ldr	r2, [r6, #0]
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	42ab      	cmp	r3, r5
 800c5ee:	dc26      	bgt.n	800c63e <_printf_common+0x96>
 800c5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5f4:	1e13      	subs	r3, r2, #0
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	0692      	lsls	r2, r2, #26
 800c5fe:	d42b      	bmi.n	800c658 <_printf_common+0xb0>
 800c600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c604:	4649      	mov	r1, r9
 800c606:	4638      	mov	r0, r7
 800c608:	47c0      	blx	r8
 800c60a:	3001      	adds	r0, #1
 800c60c:	d01e      	beq.n	800c64c <_printf_common+0xa4>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	6922      	ldr	r2, [r4, #16]
 800c612:	f003 0306 	and.w	r3, r3, #6
 800c616:	2b04      	cmp	r3, #4
 800c618:	bf02      	ittt	eq
 800c61a:	68e5      	ldreq	r5, [r4, #12]
 800c61c:	6833      	ldreq	r3, [r6, #0]
 800c61e:	1aed      	subeq	r5, r5, r3
 800c620:	68a3      	ldr	r3, [r4, #8]
 800c622:	bf0c      	ite	eq
 800c624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c628:	2500      	movne	r5, #0
 800c62a:	4293      	cmp	r3, r2
 800c62c:	bfc4      	itt	gt
 800c62e:	1a9b      	subgt	r3, r3, r2
 800c630:	18ed      	addgt	r5, r5, r3
 800c632:	2600      	movs	r6, #0
 800c634:	341a      	adds	r4, #26
 800c636:	42b5      	cmp	r5, r6
 800c638:	d11a      	bne.n	800c670 <_printf_common+0xc8>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e008      	b.n	800c650 <_printf_common+0xa8>
 800c63e:	2301      	movs	r3, #1
 800c640:	4652      	mov	r2, sl
 800c642:	4649      	mov	r1, r9
 800c644:	4638      	mov	r0, r7
 800c646:	47c0      	blx	r8
 800c648:	3001      	adds	r0, #1
 800c64a:	d103      	bne.n	800c654 <_printf_common+0xac>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	3501      	adds	r5, #1
 800c656:	e7c6      	b.n	800c5e6 <_printf_common+0x3e>
 800c658:	18e1      	adds	r1, r4, r3
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	2030      	movs	r0, #48	; 0x30
 800c65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c662:	4422      	add	r2, r4
 800c664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c66c:	3302      	adds	r3, #2
 800c66e:	e7c7      	b.n	800c600 <_printf_common+0x58>
 800c670:	2301      	movs	r3, #1
 800c672:	4622      	mov	r2, r4
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d0e6      	beq.n	800c64c <_printf_common+0xa4>
 800c67e:	3601      	adds	r6, #1
 800c680:	e7d9      	b.n	800c636 <_printf_common+0x8e>
	...

0800c684 <_printf_i>:
 800c684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	7e0f      	ldrb	r7, [r1, #24]
 800c68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c68c:	2f78      	cmp	r7, #120	; 0x78
 800c68e:	4691      	mov	r9, r2
 800c690:	4680      	mov	r8, r0
 800c692:	460c      	mov	r4, r1
 800c694:	469a      	mov	sl, r3
 800c696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c69a:	d807      	bhi.n	800c6ac <_printf_i+0x28>
 800c69c:	2f62      	cmp	r7, #98	; 0x62
 800c69e:	d80a      	bhi.n	800c6b6 <_printf_i+0x32>
 800c6a0:	2f00      	cmp	r7, #0
 800c6a2:	f000 80d4 	beq.w	800c84e <_printf_i+0x1ca>
 800c6a6:	2f58      	cmp	r7, #88	; 0x58
 800c6a8:	f000 80c0 	beq.w	800c82c <_printf_i+0x1a8>
 800c6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6b4:	e03a      	b.n	800c72c <_printf_i+0xa8>
 800c6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6ba:	2b15      	cmp	r3, #21
 800c6bc:	d8f6      	bhi.n	800c6ac <_printf_i+0x28>
 800c6be:	a101      	add	r1, pc, #4	; (adr r1, 800c6c4 <_printf_i+0x40>)
 800c6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6c4:	0800c71d 	.word	0x0800c71d
 800c6c8:	0800c731 	.word	0x0800c731
 800c6cc:	0800c6ad 	.word	0x0800c6ad
 800c6d0:	0800c6ad 	.word	0x0800c6ad
 800c6d4:	0800c6ad 	.word	0x0800c6ad
 800c6d8:	0800c6ad 	.word	0x0800c6ad
 800c6dc:	0800c731 	.word	0x0800c731
 800c6e0:	0800c6ad 	.word	0x0800c6ad
 800c6e4:	0800c6ad 	.word	0x0800c6ad
 800c6e8:	0800c6ad 	.word	0x0800c6ad
 800c6ec:	0800c6ad 	.word	0x0800c6ad
 800c6f0:	0800c835 	.word	0x0800c835
 800c6f4:	0800c75d 	.word	0x0800c75d
 800c6f8:	0800c7ef 	.word	0x0800c7ef
 800c6fc:	0800c6ad 	.word	0x0800c6ad
 800c700:	0800c6ad 	.word	0x0800c6ad
 800c704:	0800c857 	.word	0x0800c857
 800c708:	0800c6ad 	.word	0x0800c6ad
 800c70c:	0800c75d 	.word	0x0800c75d
 800c710:	0800c6ad 	.word	0x0800c6ad
 800c714:	0800c6ad 	.word	0x0800c6ad
 800c718:	0800c7f7 	.word	0x0800c7f7
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	602a      	str	r2, [r5, #0]
 800c724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c72c:	2301      	movs	r3, #1
 800c72e:	e09f      	b.n	800c870 <_printf_i+0x1ec>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	0607      	lsls	r7, r0, #24
 800c736:	f103 0104 	add.w	r1, r3, #4
 800c73a:	6029      	str	r1, [r5, #0]
 800c73c:	d501      	bpl.n	800c742 <_printf_i+0xbe>
 800c73e:	681e      	ldr	r6, [r3, #0]
 800c740:	e003      	b.n	800c74a <_printf_i+0xc6>
 800c742:	0646      	lsls	r6, r0, #25
 800c744:	d5fb      	bpl.n	800c73e <_printf_i+0xba>
 800c746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	da03      	bge.n	800c756 <_printf_i+0xd2>
 800c74e:	232d      	movs	r3, #45	; 0x2d
 800c750:	4276      	negs	r6, r6
 800c752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c756:	485a      	ldr	r0, [pc, #360]	; (800c8c0 <_printf_i+0x23c>)
 800c758:	230a      	movs	r3, #10
 800c75a:	e012      	b.n	800c782 <_printf_i+0xfe>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	1d19      	adds	r1, r3, #4
 800c762:	6029      	str	r1, [r5, #0]
 800c764:	0605      	lsls	r5, r0, #24
 800c766:	d501      	bpl.n	800c76c <_printf_i+0xe8>
 800c768:	681e      	ldr	r6, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0xee>
 800c76c:	0641      	lsls	r1, r0, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0xe4>
 800c770:	881e      	ldrh	r6, [r3, #0]
 800c772:	4853      	ldr	r0, [pc, #332]	; (800c8c0 <_printf_i+0x23c>)
 800c774:	2f6f      	cmp	r7, #111	; 0x6f
 800c776:	bf0c      	ite	eq
 800c778:	2308      	moveq	r3, #8
 800c77a:	230a      	movne	r3, #10
 800c77c:	2100      	movs	r1, #0
 800c77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c782:	6865      	ldr	r5, [r4, #4]
 800c784:	60a5      	str	r5, [r4, #8]
 800c786:	2d00      	cmp	r5, #0
 800c788:	bfa2      	ittt	ge
 800c78a:	6821      	ldrge	r1, [r4, #0]
 800c78c:	f021 0104 	bicge.w	r1, r1, #4
 800c790:	6021      	strge	r1, [r4, #0]
 800c792:	b90e      	cbnz	r6, 800c798 <_printf_i+0x114>
 800c794:	2d00      	cmp	r5, #0
 800c796:	d04b      	beq.n	800c830 <_printf_i+0x1ac>
 800c798:	4615      	mov	r5, r2
 800c79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c79e:	fb03 6711 	mls	r7, r3, r1, r6
 800c7a2:	5dc7      	ldrb	r7, [r0, r7]
 800c7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7a8:	4637      	mov	r7, r6
 800c7aa:	42bb      	cmp	r3, r7
 800c7ac:	460e      	mov	r6, r1
 800c7ae:	d9f4      	bls.n	800c79a <_printf_i+0x116>
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d10b      	bne.n	800c7cc <_printf_i+0x148>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	07de      	lsls	r6, r3, #31
 800c7b8:	d508      	bpl.n	800c7cc <_printf_i+0x148>
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	6861      	ldr	r1, [r4, #4]
 800c7be:	4299      	cmp	r1, r3
 800c7c0:	bfde      	ittt	le
 800c7c2:	2330      	movle	r3, #48	; 0x30
 800c7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7cc:	1b52      	subs	r2, r2, r5
 800c7ce:	6122      	str	r2, [r4, #16]
 800c7d0:	f8cd a000 	str.w	sl, [sp]
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	aa03      	add	r2, sp, #12
 800c7d8:	4621      	mov	r1, r4
 800c7da:	4640      	mov	r0, r8
 800c7dc:	f7ff fee4 	bl	800c5a8 <_printf_common>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d14a      	bne.n	800c87a <_printf_i+0x1f6>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	b004      	add	sp, #16
 800c7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	f043 0320 	orr.w	r3, r3, #32
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	4833      	ldr	r0, [pc, #204]	; (800c8c4 <_printf_i+0x240>)
 800c7f8:	2778      	movs	r7, #120	; 0x78
 800c7fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	6829      	ldr	r1, [r5, #0]
 800c802:	061f      	lsls	r7, r3, #24
 800c804:	f851 6b04 	ldr.w	r6, [r1], #4
 800c808:	d402      	bmi.n	800c810 <_printf_i+0x18c>
 800c80a:	065f      	lsls	r7, r3, #25
 800c80c:	bf48      	it	mi
 800c80e:	b2b6      	uxthmi	r6, r6
 800c810:	07df      	lsls	r7, r3, #31
 800c812:	bf48      	it	mi
 800c814:	f043 0320 	orrmi.w	r3, r3, #32
 800c818:	6029      	str	r1, [r5, #0]
 800c81a:	bf48      	it	mi
 800c81c:	6023      	strmi	r3, [r4, #0]
 800c81e:	b91e      	cbnz	r6, 800c828 <_printf_i+0x1a4>
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	f023 0320 	bic.w	r3, r3, #32
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	2310      	movs	r3, #16
 800c82a:	e7a7      	b.n	800c77c <_printf_i+0xf8>
 800c82c:	4824      	ldr	r0, [pc, #144]	; (800c8c0 <_printf_i+0x23c>)
 800c82e:	e7e4      	b.n	800c7fa <_printf_i+0x176>
 800c830:	4615      	mov	r5, r2
 800c832:	e7bd      	b.n	800c7b0 <_printf_i+0x12c>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	6826      	ldr	r6, [r4, #0]
 800c838:	6961      	ldr	r1, [r4, #20]
 800c83a:	1d18      	adds	r0, r3, #4
 800c83c:	6028      	str	r0, [r5, #0]
 800c83e:	0635      	lsls	r5, r6, #24
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	d501      	bpl.n	800c848 <_printf_i+0x1c4>
 800c844:	6019      	str	r1, [r3, #0]
 800c846:	e002      	b.n	800c84e <_printf_i+0x1ca>
 800c848:	0670      	lsls	r0, r6, #25
 800c84a:	d5fb      	bpl.n	800c844 <_printf_i+0x1c0>
 800c84c:	8019      	strh	r1, [r3, #0]
 800c84e:	2300      	movs	r3, #0
 800c850:	6123      	str	r3, [r4, #16]
 800c852:	4615      	mov	r5, r2
 800c854:	e7bc      	b.n	800c7d0 <_printf_i+0x14c>
 800c856:	682b      	ldr	r3, [r5, #0]
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	602a      	str	r2, [r5, #0]
 800c85c:	681d      	ldr	r5, [r3, #0]
 800c85e:	6862      	ldr	r2, [r4, #4]
 800c860:	2100      	movs	r1, #0
 800c862:	4628      	mov	r0, r5
 800c864:	f7f3 fcbc 	bl	80001e0 <memchr>
 800c868:	b108      	cbz	r0, 800c86e <_printf_i+0x1ea>
 800c86a:	1b40      	subs	r0, r0, r5
 800c86c:	6060      	str	r0, [r4, #4]
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	6123      	str	r3, [r4, #16]
 800c872:	2300      	movs	r3, #0
 800c874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c878:	e7aa      	b.n	800c7d0 <_printf_i+0x14c>
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4649      	mov	r1, r9
 800c880:	4640      	mov	r0, r8
 800c882:	47d0      	blx	sl
 800c884:	3001      	adds	r0, #1
 800c886:	d0ad      	beq.n	800c7e4 <_printf_i+0x160>
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	079b      	lsls	r3, r3, #30
 800c88c:	d413      	bmi.n	800c8b6 <_printf_i+0x232>
 800c88e:	68e0      	ldr	r0, [r4, #12]
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	4298      	cmp	r0, r3
 800c894:	bfb8      	it	lt
 800c896:	4618      	movlt	r0, r3
 800c898:	e7a6      	b.n	800c7e8 <_printf_i+0x164>
 800c89a:	2301      	movs	r3, #1
 800c89c:	4632      	mov	r2, r6
 800c89e:	4649      	mov	r1, r9
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	47d0      	blx	sl
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d09d      	beq.n	800c7e4 <_printf_i+0x160>
 800c8a8:	3501      	adds	r5, #1
 800c8aa:	68e3      	ldr	r3, [r4, #12]
 800c8ac:	9903      	ldr	r1, [sp, #12]
 800c8ae:	1a5b      	subs	r3, r3, r1
 800c8b0:	42ab      	cmp	r3, r5
 800c8b2:	dcf2      	bgt.n	800c89a <_printf_i+0x216>
 800c8b4:	e7eb      	b.n	800c88e <_printf_i+0x20a>
 800c8b6:	2500      	movs	r5, #0
 800c8b8:	f104 0619 	add.w	r6, r4, #25
 800c8bc:	e7f5      	b.n	800c8aa <_printf_i+0x226>
 800c8be:	bf00      	nop
 800c8c0:	0800e3d5 	.word	0x0800e3d5
 800c8c4:	0800e3e6 	.word	0x0800e3e6

0800c8c8 <__swhatbuf_r>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d0:	2900      	cmp	r1, #0
 800c8d2:	b096      	sub	sp, #88	; 0x58
 800c8d4:	4615      	mov	r5, r2
 800c8d6:	461e      	mov	r6, r3
 800c8d8:	da0d      	bge.n	800c8f6 <__swhatbuf_r+0x2e>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8e0:	f04f 0100 	mov.w	r1, #0
 800c8e4:	bf0c      	ite	eq
 800c8e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8ea:	2340      	movne	r3, #64	; 0x40
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	6031      	str	r1, [r6, #0]
 800c8f0:	602b      	str	r3, [r5, #0]
 800c8f2:	b016      	add	sp, #88	; 0x58
 800c8f4:	bd70      	pop	{r4, r5, r6, pc}
 800c8f6:	466a      	mov	r2, sp
 800c8f8:	f000 f87c 	bl	800c9f4 <_fstat_r>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	dbec      	blt.n	800c8da <__swhatbuf_r+0x12>
 800c900:	9901      	ldr	r1, [sp, #4]
 800c902:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c906:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c90a:	4259      	negs	r1, r3
 800c90c:	4159      	adcs	r1, r3
 800c90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c912:	e7eb      	b.n	800c8ec <__swhatbuf_r+0x24>

0800c914 <__smakebuf_r>:
 800c914:	898b      	ldrh	r3, [r1, #12]
 800c916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c918:	079d      	lsls	r5, r3, #30
 800c91a:	4606      	mov	r6, r0
 800c91c:	460c      	mov	r4, r1
 800c91e:	d507      	bpl.n	800c930 <__smakebuf_r+0x1c>
 800c920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	2301      	movs	r3, #1
 800c92a:	6163      	str	r3, [r4, #20]
 800c92c:	b002      	add	sp, #8
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	ab01      	add	r3, sp, #4
 800c932:	466a      	mov	r2, sp
 800c934:	f7ff ffc8 	bl	800c8c8 <__swhatbuf_r>
 800c938:	9900      	ldr	r1, [sp, #0]
 800c93a:	4605      	mov	r5, r0
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff fc63 	bl	800c208 <_malloc_r>
 800c942:	b948      	cbnz	r0, 800c958 <__smakebuf_r+0x44>
 800c944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c948:	059a      	lsls	r2, r3, #22
 800c94a:	d4ef      	bmi.n	800c92c <__smakebuf_r+0x18>
 800c94c:	f023 0303 	bic.w	r3, r3, #3
 800c950:	f043 0302 	orr.w	r3, r3, #2
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	e7e3      	b.n	800c920 <__smakebuf_r+0xc>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	6020      	str	r0, [r4, #0]
 800c95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	9b00      	ldr	r3, [sp, #0]
 800c964:	6163      	str	r3, [r4, #20]
 800c966:	9b01      	ldr	r3, [sp, #4]
 800c968:	6120      	str	r0, [r4, #16]
 800c96a:	b15b      	cbz	r3, 800c984 <__smakebuf_r+0x70>
 800c96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c970:	4630      	mov	r0, r6
 800c972:	f000 f851 	bl	800ca18 <_isatty_r>
 800c976:	b128      	cbz	r0, 800c984 <__smakebuf_r+0x70>
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	f023 0303 	bic.w	r3, r3, #3
 800c97e:	f043 0301 	orr.w	r3, r3, #1
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	431d      	orrs	r5, r3
 800c988:	81a5      	strh	r5, [r4, #12]
 800c98a:	e7cf      	b.n	800c92c <__smakebuf_r+0x18>

0800c98c <_putc_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	460d      	mov	r5, r1
 800c990:	4614      	mov	r4, r2
 800c992:	4606      	mov	r6, r0
 800c994:	b118      	cbz	r0, 800c99e <_putc_r+0x12>
 800c996:	6a03      	ldr	r3, [r0, #32]
 800c998:	b90b      	cbnz	r3, 800c99e <_putc_r+0x12>
 800c99a:	f7ff f9ad 	bl	800bcf8 <__sinit>
 800c99e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9a0:	07d8      	lsls	r0, r3, #31
 800c9a2:	d405      	bmi.n	800c9b0 <_putc_r+0x24>
 800c9a4:	89a3      	ldrh	r3, [r4, #12]
 800c9a6:	0599      	lsls	r1, r3, #22
 800c9a8:	d402      	bmi.n	800c9b0 <_putc_r+0x24>
 800c9aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ac:	f7ff fbb0 	bl	800c110 <__retarget_lock_acquire_recursive>
 800c9b0:	68a3      	ldr	r3, [r4, #8]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	60a3      	str	r3, [r4, #8]
 800c9b8:	da05      	bge.n	800c9c6 <_putc_r+0x3a>
 800c9ba:	69a2      	ldr	r2, [r4, #24]
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	db12      	blt.n	800c9e6 <_putc_r+0x5a>
 800c9c0:	b2eb      	uxtb	r3, r5
 800c9c2:	2b0a      	cmp	r3, #10
 800c9c4:	d00f      	beq.n	800c9e6 <_putc_r+0x5a>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	701d      	strb	r5, [r3, #0]
 800c9ce:	b2ed      	uxtb	r5, r5
 800c9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9d2:	07da      	lsls	r2, r3, #31
 800c9d4:	d405      	bmi.n	800c9e2 <_putc_r+0x56>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	059b      	lsls	r3, r3, #22
 800c9da:	d402      	bmi.n	800c9e2 <_putc_r+0x56>
 800c9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9de:	f7ff fb98 	bl	800c112 <__retarget_lock_release_recursive>
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f7ff fa73 	bl	800bed6 <__swbuf_r>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	e7ed      	b.n	800c9d0 <_putc_r+0x44>

0800c9f4 <_fstat_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	; (800ca14 <_fstat_r+0x20>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f8 ff48 	bl	8005896 <_fstat>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_fstat_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_fstat_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	2000287c 	.word	0x2000287c

0800ca18 <_isatty_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d06      	ldr	r5, [pc, #24]	; (800ca34 <_isatty_r+0x1c>)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f8 ff47 	bl	80058b6 <_isatty>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_isatty_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_isatty_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	2000287c 	.word	0x2000287c

0800ca38 <_sbrk_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4d06      	ldr	r5, [pc, #24]	; (800ca54 <_sbrk_r+0x1c>)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4604      	mov	r4, r0
 800ca40:	4608      	mov	r0, r1
 800ca42:	602b      	str	r3, [r5, #0]
 800ca44:	f7f8 ff50 	bl	80058e8 <_sbrk>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d102      	bne.n	800ca52 <_sbrk_r+0x1a>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	b103      	cbz	r3, 800ca52 <_sbrk_r+0x1a>
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	2000287c 	.word	0x2000287c

0800ca58 <_init>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	bf00      	nop
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr

0800ca64 <_fini>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr
