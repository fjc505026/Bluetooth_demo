
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009838  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d8  0800a3d8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e0  0800a3e0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a3e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000084  0800a46c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800a46c  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001da07  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009b  00000000  00000000  0003dafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e55e  00000000  00000000  0003db99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039a4  00000000  00000000  0005c0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001888  00000000  00000000  0005faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fba1a  00000000  00000000  00061328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001314  00000000  00000000  0015cd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b3de  00000000  00000000  0015e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000704c  00000000  00000000  00189434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099b0 	.word	0x080099b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080099b0 	.word	0x080099b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 ffe4 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fcc7 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 facc 	bl	8001b3a <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	0800a3e8 	.word	0x0800a3e8
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80005b4:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80005b8:	20000a28 	.word	0x20000a28

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <BLUENRG2__vSendData>:
//! @param  Nb_bytes : number of bytes to send
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vSendData( uint8_t *data_buffer, uint8_t Nb_bytes ) 
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
    uint32_t U32Tickstart = HAL_GetTick();
 80005cc:	f002 f838 	bl	8002640 <HAL_GetTick>
 80005d0:	60f8      	str	r0, [r7, #12]

    // printf("Send data %d %d to Char Handle %#X \r\n", data_buffer[0],data_buffer[1],BLUENRG2__stConnCTX.RemoteRx.u16Handle );

    while( BLE_STATUS_NOT_ALLOWED == aci_gatt_write_without_resp( BLUENRG2__stConnCTX.u16Handle,
 80005d2:	e00a      	b.n	80005ea <BLUENRG2__vSendData+0x2a>
                                        BLUENRG2__stConnCTX.RemoteRx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET, 
                                        Nb_bytes,
                                        data_buffer ) )
    {
        hci_user_evt_proc();
 80005d4:	f008 f8c0 	bl	8008758 <hci_user_evt_proc>
        // Radio is busy (buffer full).
        if( ( HAL_GetTick() - U32Tickstart ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
 80005d8:	f002 f832 	bl	8002640 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d80d      	bhi.n	8000606 <BLUENRG2__vSendData+0x46>
    while( BLE_STATUS_NOT_ALLOWED == aci_gatt_write_without_resp( BLUENRG2__stConnCTX.u16Handle,
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <BLUENRG2__vSendData+0x50>)
 80005ec:	8858      	ldrh	r0, [r3, #2]
                                        BLUENRG2__stConnCTX.RemoteRx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET, 
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <BLUENRG2__vSendData+0x50>)
 80005f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    while( BLE_STATUS_NOT_ALLOWED == aci_gatt_write_without_resp( BLUENRG2__stConnCTX.u16Handle,
 80005f2:	3301      	adds	r3, #1
 80005f4:	b299      	uxth	r1, r3
 80005f6:	78fa      	ldrb	r2, [r7, #3]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f006 f957 	bl	80068ac <aci_gatt_write_without_resp>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b46      	cmp	r3, #70	; 0x46
 8000602:	d0e7      	beq.n	80005d4 <BLUENRG2__vSendData+0x14>
            break;
    }

}
 8000604:	e000      	b.n	8000608 <BLUENRG2__vSendData+0x48>
            break;
 8000606:	bf00      	nop
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000a8 	.word	0x200000a8

08000614 <BLUENRG2_vInit>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vInit( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    BLUENRG2__vUserInit();
 8000618:	f000 f826 	bl	8000668 <BLUENRG2__vUserInit>
    hci_init( APP_UserEvtRx, NULL );
 800061c:	2100      	movs	r1, #0
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <BLUENRG2_vInit+0x34>)
 8000620:	f007 ff20 	bl	8008464 <hci_init>
    PRINT_DBG( "BlueNRG-2 BLE Sample Application\r\n" );
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <BLUENRG2_vInit+0x38>)
 8000626:	f008 fb3d 	bl	8008ca4 <puts>

    if( BLE_STATUS_SUCCESS != BLUENRG2__u8CentralAppInit() )
 800062a:	f000 f82b 	bl	8000684 <BLUENRG2__u8CentralAppInit>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <BLUENRG2_vInit+0x28>
    {
        PRINT_DBG( "BLUENRG2__u8CentralAppInit() Failed\r\n" );
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <BLUENRG2_vInit+0x3c>)
 8000636:	f008 fb35 	bl	8008ca4 <puts>
        while( true )
 800063a:	e7fe      	b.n	800063a <BLUENRG2_vInit+0x26>
            ;
    }

    PRINT_DBG( "BLE Stack Initialized & Device Configured\r\n" );
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <BLUENRG2_vInit+0x40>)
 800063e:	f008 fb31 	bl	8008ca4 <puts>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	08001679 	.word	0x08001679
 800064c:	080099c8 	.word	0x080099c8
 8000650:	080099ec 	.word	0x080099ec
 8000654:	08009a14 	.word	0x08009a14

08000658 <BLUENRG2_vProcess>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vProcess( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

    hci_user_evt_proc();
 800065c:	f008 f87c 	bl	8008758 <hci_user_evt_proc>
    BLUENRG2__vUserProcess();
 8000660:	f000 f8e8 	bl	8000834 <BLUENRG2__vUserProcess>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <BLUENRG2__vUserInit>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserInit( void )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    BSP_PB_Init( BUTTON_KEY, BUTTON_MODE_GPIO );
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f001 fc1c 	bl	8001eac <BSP_PB_Init>
    BSP_LED_Init( LED2 );
 8000674:	2000      	movs	r0, #0
 8000676:	f001 fb9d 	bl	8001db4 <BSP_LED_Init>

    BSP_COM_Init( COM1 );
 800067a:	2000      	movs	r0, #0
 800067c:	f001 fcd2 	bl	8002024 <BSP_COM_Init>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <BLUENRG2__u8CentralAppInit>:
//!
//! \return
//!   Status
//*****************************************************
static uint8_t BLUENRG2__u8CentralAppInit( void )
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b090      	sub	sp, #64	; 0x40
 8000688:	af06      	add	r7, sp, #24
    uint8_t  u8Ret;
    uint16_t u16ServiceHandle, u16DevNameCharHandle, u16AppearanceCharHandle;
    uint8_t  au8BdAddr[BLUENRG2_BDADDR_BYTE_NUM];
    uint8_t  u8BaAddrLen;

    const uint8_t cu8NVMConfigDataAddr = 0x80U; // Offset of the static random address stored in NVM
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    hci_reset(); // Sw reset of the BLE chip
 8000690:	f007 fdb5 	bl	80081fe <hci_reset>

    HAL_Delay( 2000 ); // BlueNRG device requires 2000ms delay for booting
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f001 ffde 	bl	8002658 <HAL_Delay>

    u8Ret = BLUENRG2__u8PrintBLEFwInfo();
 800069c:	f000 fb86 	bl	8000dac <BLUENRG2__u8PrintBLEFwInfo>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 80006a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <BLUENRG2__u8CentralAppInit+0x36>
    {
        PRINT_DBG( "Get Bluetooth Chip Info failed !\r\n" );
 80006ae:	4857      	ldr	r0, [pc, #348]	; (800080c <BLUENRG2__u8CentralAppInit+0x188>)
 80006b0:	f008 faf8 	bl	8008ca4 <puts>
        return u8Ret;
 80006b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b8:	e0a3      	b.n	8000802 <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_hal_read_config_data( cu8NVMConfigDataAddr, &u8BaAddrLen, au8BdAddr );
 80006ba:	f107 0218 	add.w	r2, r7, #24
 80006be:	f107 0117 	add.w	r1, r7, #23
 80006c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 f9ef 	bl	8006aaa <aci_hal_read_config_data>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( ( u8Ret != BLE_STATUS_SUCCESS ) || ( 0xC0 != ( au8BdAddr[5U] & 0xC0 ) ) )
 80006d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d104      	bne.n	80006e4 <BLUENRG2__u8CentralAppInit+0x60>
 80006da:	7f7b      	ldrb	r3, [r7, #29]
 80006dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80006e0:	2bc0      	cmp	r3, #192	; 0xc0
 80006e2:	d003      	beq.n	80006ec <BLUENRG2__u8CentralAppInit+0x68>
    {
        PRINT_DBG( "Read Broadcast Address failed !\r\n" );
 80006e4:	484a      	ldr	r0, [pc, #296]	; (8000810 <BLUENRG2__u8CentralAppInit+0x18c>)
 80006e6:	f008 fadd 	bl	8008ca4 <puts>
        while( true )
 80006ea:	e7fe      	b.n	80006ea <BLUENRG2__u8CentralAppInit+0x66>
            ;
        return u8Ret;
    }

    aci_hal_set_tx_power_level( BLUENRG2_TX_POWER_HIGH, BLUENRG2_TX_POWER_8_DBM );
 80006ec:	2107      	movs	r1, #7
 80006ee:	2001      	movs	r0, #1
 80006f0:	f006 fa5f 	bl	8006bb2 <aci_hal_set_tx_power_level>

    u8Ret = aci_gatt_init();
 80006f4:	f005 fcb5 	bl	8006062 <aci_gatt_init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <BLUENRG2__u8CentralAppInit+0x94>
    {
        PRINT_DBG( "GATT_Init failed: 0x%02x\r\n", u8Ret );
 8000706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800070a:	4619      	mov	r1, r3
 800070c:	4841      	ldr	r0, [pc, #260]	; (8000814 <BLUENRG2__u8CentralAppInit+0x190>)
 800070e:	f008 fa63 	bl	8008bd8 <iprintf>
        return u8Ret;
 8000712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000716:	e074      	b.n	8000802 <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_gap_init( GAP_CENTRAL_ROLE, 0x0, (uint8_t) BLUENRG2_DEV_NAME_LEN, &u16ServiceHandle,
 8000718:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	2211      	movs	r2, #17
 800072c:	2100      	movs	r1, #0
 800072e:	2004      	movs	r0, #4
 8000730:	f005 f9e3 	bl	8005afa <aci_gap_init>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                          &u16DevNameCharHandle, &u16AppearanceCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 800073a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <BLUENRG2__u8CentralAppInit+0xd0>
    {
        PRINT_DBG( "GAP_Init failed: 0x%02x\r\n", u8Ret );
 8000742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000746:	4619      	mov	r1, r3
 8000748:	4833      	ldr	r0, [pc, #204]	; (8000818 <BLUENRG2__u8CentralAppInit+0x194>)
 800074a:	f008 fa45 	bl	8008bd8 <iprintf>
        return u8Ret;
 800074e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000752:	e056      	b.n	8000802 <BLUENRG2__u8CentralAppInit+0x17e>
    }

    // Update device name
    uint8_t au8TempDeviceName[BLUENRG2_DEV_NAME_LEN] = BLUENRG2_DEV_NAME;
 8000754:	4b31      	ldr	r3, [pc, #196]	; (800081c <BLUENRG2__u8CentralAppInit+0x198>)
 8000756:	1d3c      	adds	r4, r7, #4
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	682b      	ldr	r3, [r5, #0]
 8000760:	7023      	strb	r3, [r4, #0]
    u8Ret = aci_gatt_update_char_value( u16ServiceHandle, u16DevNameCharHandle, (uint8_t) 0U,
 8000762:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8000764:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2311      	movs	r3, #17
 800076c:	2200      	movs	r2, #0
 800076e:	f005 fe80 	bl	8006472 <aci_gatt_update_char_value>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        (uint8_t) BLUENRG2_DEV_NAME_LEN, au8TempDeviceName );

    // Clear security database: this implies that each time the application is executed
    // the full bonding process is executed (with PassKey generation and setting).
    u8Ret = aci_gap_clear_security_db();
 8000778:	f005 fa6c 	bl	8005c54 <aci_gap_clear_security_db>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <BLUENRG2__u8CentralAppInit+0x10c>
    {
        PRINT_DBG( "aci_gap_clear_security_db() failed:\r\n" );
 800078a:	4825      	ldr	r0, [pc, #148]	; (8000820 <BLUENRG2__u8CentralAppInit+0x19c>)
 800078c:	f008 fa8a 	bl	8008ca4 <puts>
    }

    //  Set the I/O capability otherwise the Central device (e.g. the smartphone) will
    //  propose a PIN that will be accepted without any control.
    if( aci_gap_set_io_capability( IO_CAP_DISPLAY_ONLY ) == BLE_STATUS_SUCCESS )
 8000790:	2000      	movs	r0, #0
 8000792:	f005 f888 	bl	80058a6 <aci_gap_set_io_capability>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <BLUENRG2__u8CentralAppInit+0x11e>
    {
        PRINT_DBG( "I/O Capability Configurated\r\n" );
 800079c:	4821      	ldr	r0, [pc, #132]	; (8000824 <BLUENRG2__u8CentralAppInit+0x1a0>)
 800079e:	f008 fa81 	bl	8008ca4 <puts>
    }

    // BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype)
    // clang-format off
    u8Ret = aci_gap_set_authentication_requirement( BONDING, MITM_PROTECTION_REQUIRED, SC_IS_SUPPORTED,
 80007a2:	2300      	movs	r3, #0
 80007a4:	9304      	str	r3, [sp, #16]
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <BLUENRG2__u8CentralAppInit+0x1a4>)
 80007a8:	9303      	str	r3, [sp, #12]
 80007aa:	2300      	movs	r3, #0
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2310      	movs	r3, #16
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2307      	movs	r3, #7
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	2001      	movs	r0, #1
 80007be:	f005 f8cf 	bl	8005960 <aci_gap_set_authentication_requirement>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                    KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING,
                                                    BLUENRG2_AUTHENTICATION_PASS_KEY, BLUENRG2_AUTHENTICATION_ADDR_PUBLIC_ID );
    // clang-format on

    if( u8Ret != BLE_STATUS_SUCCESS )
 80007c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <BLUENRG2__u8CentralAppInit+0x158>
    {
        PRINT_DBG( "aci_gap_set_authentication_requirement()failed\r\n" );
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <BLUENRG2__u8CentralAppInit+0x1a8>)
 80007d2:	f008 fa67 	bl	8008ca4 <puts>
        return u8Ret;
 80007d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007da:	e012      	b.n	8000802 <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = GATT_DB_u8AddService(); // Add Device Service & Characteristics
 80007dc:	f000 feb4 	bl	8001548 <GATT_DB_u8AddService>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80007e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d008      	beq.n	8000800 <BLUENRG2__u8CentralAppInit+0x17c>
    {
        PRINT_DBG( "Error while adding service: 0x%02x\r\n", u8Ret );
 80007ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007f2:	4619      	mov	r1, r3
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <BLUENRG2__u8CentralAppInit+0x1ac>)
 80007f6:	f008 f9ef 	bl	8008bd8 <iprintf>
        return u8Ret;
 80007fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fe:	e000      	b.n	8000802 <BLUENRG2__u8CentralAppInit+0x17e>
    }

    return BLE_STATUS_SUCCESS;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bdb0      	pop	{r4, r5, r7, pc}
 800080a:	bf00      	nop
 800080c:	08009a40 	.word	0x08009a40
 8000810:	08009a64 	.word	0x08009a64
 8000814:	08009a88 	.word	0x08009a88
 8000818:	08009aa4 	.word	0x08009aa4
 800081c:	08009b60 	.word	0x08009b60
 8000820:	08009ac0 	.word	0x08009ac0
 8000824:	08009ae8 	.word	0x08009ae8
 8000828:	0001e240 	.word	0x0001e240
 800082c:	08009b08 	.word	0x08009b08
 8000830:	08009b38 	.word	0x08009b38

08000834 <BLUENRG2__vUserProcess>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserProcess( void )
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b08b      	sub	sp, #44	; 0x2c
 8000838:	af02      	add	r7, sp, #8
    static uint32_t          u32LastRSSIReadTick;
    static uint32_t          u32CurrentFSMStartTick;
    static BLUENRG2_tenState enLastFSMState;

    if( enLastFSMState != BLUENRG2__enState )
 800083a:	4ba3      	ldr	r3, [pc, #652]	; (8000ac8 <BLUENRG2__vUserProcess+0x294>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4ba3      	ldr	r3, [pc, #652]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d00c      	beq.n	8000860 <BLUENRG2__vUserProcess+0x2c>
    {
        PRINT_DBG( "FSM : %d -> %d \r\n", enLastFSMState, BLUENRG2__enState );
 8000846:	4ba0      	ldr	r3, [pc, #640]	; (8000ac8 <BLUENRG2__vUserProcess+0x294>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	4b9f      	ldr	r3, [pc, #636]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	489f      	ldr	r0, [pc, #636]	; (8000ad0 <BLUENRG2__vUserProcess+0x29c>)
 8000854:	f008 f9c0 	bl	8008bd8 <iprintf>
        enLastFSMState = BLUENRG2__enState;
 8000858:	4b9c      	ldr	r3, [pc, #624]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	4b9a      	ldr	r3, [pc, #616]	; (8000ac8 <BLUENRG2__vUserProcess+0x294>)
 800085e:	701a      	strb	r2, [r3, #0]
    }

    switch( BLUENRG2__enState )
 8000860:	4b9a      	ldr	r3, [pc, #616]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b08      	cmp	r3, #8
 8000866:	f200 8123 	bhi.w	8000ab0 <BLUENRG2__vUserProcess+0x27c>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <BLUENRG2__vUserProcess+0x3c>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000895 	.word	0x08000895
 8000874:	080008af 	.word	0x080008af
 8000878:	080008e7 	.word	0x080008e7
 800087c:	0800094d 	.word	0x0800094d
 8000880:	08000977 	.word	0x08000977
 8000884:	080009a1 	.word	0x080009a1
 8000888:	080009cb 	.word	0x080009cb
 800088c:	08000a1d 	.word	0x08000a1d
 8000890:	08000a7f 	.word	0x08000a7f
    {
        case BLUENRG2_STAT_INIT:
        {
            BLUENRG2__vResetConnectionContext(); // Reset Connection context
 8000894:	f000 fa08 	bl	8000ca8 <BLUENRG2__vResetConnectionContext>
            BLUENRG2__vStartScan();              // Result in hci_le_advertising_report_event
 8000898:	f000 f990 	bl	8000bbc <BLUENRG2__vStartScan>
            BLUENRG2__enState      = BLUENRG2_SCANNING;
 800089c:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 80008a2:	f001 fecd 	bl	8002640 <HAL_GetTick>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a8a      	ldr	r2, [pc, #552]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 80008aa:	6013      	str	r3, [r2, #0]
        }
        break;
 80008ac:	e107      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_SCANNING:
        {
            // aci_gap_proc_complete_event() if no dev found, will reset to BLUENRG2_STAT_INIT
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 80008ae:	f001 fec7 	bl	8002640 <HAL_GetTick>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b87      	ldr	r3, [pc, #540]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	f64e 2260 	movw	r2, #60000	; 0xea60
 80008be:	4293      	cmp	r3, r2
 80008c0:	f240 80f8 	bls.w	8000ab4 <BLUENRG2__vUserProcess+0x280>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState ); // current can't reach here
 80008c4:	4b81      	ldr	r3, [pc, #516]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4883      	ldr	r0, [pc, #524]	; (8000ad8 <BLUENRG2__vUserProcess+0x2a4>)
 80008cc:	f008 f984 	bl	8008bd8 <iprintf>
                BLUENRG2__vStopScan();
 80008d0:	f000 f996 	bl	8000c00 <BLUENRG2__vStopScan>
                u32CurrentFSMStartTick = HAL_GetTick();
 80008d4:	f001 feb4 	bl	8002640 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a7e      	ldr	r2, [pc, #504]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 80008dc:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_IDLE;
 80008de:	4b7b      	ldr	r3, [pc, #492]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 80008e0:	2208      	movs	r2, #8
 80008e2:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80008e4:	e0e6      	b.n	8000ab4 <BLUENRG2__vUserProcess+0x280>

        case BLUENRG2_STAT_START_CONNECT:
        {

            const char *apcDevAddrTypeStr[] = { "Public Device", "Random Device", "Public Identity",
 80008e6:	4b7d      	ldr	r3, [pc, #500]	; (8000adc <BLUENRG2__vUserProcess+0x2a8>)
 80008e8:	f107 040c 	add.w	r4, r7, #12
 80008ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                "Random Identity" };

            printf( "[Connecting] Device Addr Type : %s, Value : ",
                    apcDevAddrTypeStr[BLUENRG2__stConnCTX.stDevice.u8Type] );
 80008f2:	4b7b      	ldr	r3, [pc, #492]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 80008f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
            printf( "[Connecting] Device Addr Type : %s, Value : ",
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	3320      	adds	r3, #32
 80008fc:	443b      	add	r3, r7
 80008fe:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000902:	4619      	mov	r1, r3
 8000904:	4877      	ldr	r0, [pc, #476]	; (8000ae4 <BLUENRG2__vUserProcess+0x2b0>)
 8000906:	f008 f967 	bl	8008bd8 <iprintf>

            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 800090a:	2306      	movs	r3, #6
 800090c:	77fb      	strb	r3, [r7, #31]
 800090e:	e00c      	b.n	800092a <BLUENRG2__vUserProcess+0xf6>
            {
                printf( "%02X ", BLUENRG2__stConnCTX.stDevice.au8Addr[u8ByteIdx - 1] );
 8000910:	7ffb      	ldrb	r3, [r7, #31]
 8000912:	3b01      	subs	r3, #1
 8000914:	4a72      	ldr	r2, [pc, #456]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 8000916:	4413      	add	r3, r2
 8000918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800091c:	4619      	mov	r1, r3
 800091e:	4872      	ldr	r0, [pc, #456]	; (8000ae8 <BLUENRG2__vUserProcess+0x2b4>)
 8000920:	f008 f95a 	bl	8008bd8 <iprintf>
            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 8000924:	7ffb      	ldrb	r3, [r7, #31]
 8000926:	3b01      	subs	r3, #1
 8000928:	77fb      	strb	r3, [r7, #31]
 800092a:	7ffb      	ldrb	r3, [r7, #31]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ef      	bne.n	8000910 <BLUENRG2__vUserProcess+0xdc>
            }
            printf( "\r\n" );
 8000930:	486e      	ldr	r0, [pc, #440]	; (8000aec <BLUENRG2__vUserProcess+0x2b8>)
 8000932:	f008 f9b7 	bl	8008ca4 <puts>

            BLUENRG2__vStartConnect();
 8000936:	f000 f97f 	bl	8000c38 <BLUENRG2__vStartConnect>
            BLUENRG2__enState      = BLUENRG2_STAT_CONNECTING;
 800093a:	4b64      	ldr	r3, [pc, #400]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 800093c:	2203      	movs	r2, #3
 800093e:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 8000940:	f001 fe7e 	bl	8002640 <HAL_GetTick>
 8000944:	4603      	mov	r3, r0
 8000946:	4a63      	ldr	r2, [pc, #396]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 8000948:	6013      	str	r3, [r2, #0]
        }
        break;
 800094a:	e0b8      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_CONNECTING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 800094c:	f001 fe78 	bl	8002640 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	f64e 2260 	movw	r2, #60000	; 0xea60
 800095c:	4293      	cmp	r3, r2
 800095e:	f240 80ab 	bls.w	8000ab8 <BLUENRG2__vUserProcess+0x284>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	485b      	ldr	r0, [pc, #364]	; (8000ad8 <BLUENRG2__vUserProcess+0x2a4>)
 800096a:	f008 f935 	bl	8008bd8 <iprintf>
                BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800096e:	4b57      	ldr	r3, [pc, #348]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000970:	2208      	movs	r2, #8
 8000972:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000974:	e0a0      	b.n	8000ab8 <BLUENRG2__vUserProcess+0x284>

        case BLUENRG2_STAT_GET_REMOTE_TX:
        {
            if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 8000978:	799b      	ldrb	r3, [r3, #6]
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <BLUENRG2__vUserProcess+0x164>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 8000984:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 8000986:	8858      	ldrh	r0, [r3, #2]
 8000988:	4b59      	ldr	r3, [pc, #356]	; (8000af0 <BLUENRG2__vUserProcess+0x2bc>)
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2302      	movs	r3, #2
 800098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000992:	2101      	movs	r1, #1
 8000994:	f005 fe1f 	bl	80065d6 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteTx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8000998:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 800099a:	2208      	movs	r2, #8
 800099c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800099e:	e08e      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_GET_REMOTE_RX:
        {
            if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 80009a0:	4b4f      	ldr	r3, [pc, #316]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 80009a2:	7e9b      	ldrb	r3, [r3, #26]
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d009      	beq.n	80009c2 <BLUENRG2__vUserProcess+0x18e>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 80009ae:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 80009b0:	8858      	ldrh	r0, [r3, #2]
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <BLUENRG2__vUserProcess+0x2c0>)
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009bc:	2101      	movs	r1, #1
 80009be:	f005 fe0a 	bl	80065d6 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteRx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009c8:	e079      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY:
        {

            uint8_t au8ClientCharConfigData[] = { 0x01, 0x00 }; // Enable notifications
 80009ca:	2301      	movs	r3, #1
 80009cc:	813b      	strh	r3, [r7, #8]

            u32CurrentFSMStartTick = HAL_GetTick();
 80009ce:	f001 fe37 	bl	8002640 <HAL_GetTick>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 80009d6:	6013      	str	r3, [r2, #0]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009d8:	e009      	b.n	80009ee <BLUENRG2__vUserProcess+0x1ba>
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
                                             sizeof( au8ClientCharConfigData ),
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
            {
                // Radio is busy.
                if( ( HAL_GetTick() - u32CurrentFSMStartTick ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
 80009da:	f001 fe31 	bl	8002640 <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d80e      	bhi.n	8000a0c <BLUENRG2__vUserProcess+0x1d8>
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 80009f0:	8858      	ldrh	r0, [r3, #2]
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 80009f4:	8b1b      	ldrh	r3, [r3, #24]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009f6:	3302      	adds	r3, #2
 80009f8:	b299      	uxth	r1, r3
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2202      	movs	r2, #2
 8000a00:	f005 feac 	bl	800675c <aci_gatt_write_char_desc>
 8000a04:	4603      	mov	r3, r0
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
 8000a06:	2b46      	cmp	r3, #70	; 0x46
 8000a08:	d0e7      	beq.n	80009da <BLUENRG2__vUserProcess+0x1a6>
 8000a0a:	e000      	b.n	8000a0e <BLUENRG2__vUserProcess+0x1da>
                    break;
 8000a0c:	bf00      	nop
            }
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <BLUENRG2__vUserProcess+0x2c4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]

            BLUENRG2__enState = BLUENRG2_STAT_MAIN_CONNECTED;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000a1a:	e050      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_MAIN_CONNECTED:
        {

            if( HAL_GetTick() - u32LastRSSIReadTick > BLUENRG2_RSSI_READING_PERIOD )
 8000a1c:	f001 fe10 	bl	8002640 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <BLUENRG2__vUserProcess+0x2c8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a2c:	d911      	bls.n	8000a52 <BLUENRG2__vUserProcess+0x21e>
            {
                int8_t u8TmpRssi;
                hci_read_rssi( BLUENRG2__stConnCTX.u16Handle, &u8TmpRssi );
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <BLUENRG2__vUserProcess+0x2ac>)
 8000a30:	885b      	ldrh	r3, [r3, #2]
 8000a32:	1dfa      	adds	r2, r7, #7
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f007 fc0a 	bl	8008250 <hci_read_rssi>
                BLUENRG2__vUpdateLockStatus( u8TmpRssi, true );
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 faaa 	bl	8000f9c <BLUENRG2__vUpdateLockStatus>
                u32LastRSSIReadTick = HAL_GetTick();
 8000a48:	f001 fdfa 	bl	8002640 <HAL_GetTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	; (8000afc <BLUENRG2__vUserProcess+0x2c8>)
 8000a50:	6013      	str	r3, [r2, #0]
            }

            if( BLUENRG2__bMasterDevIsUnlocked )
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <BLUENRG2__vUserProcess+0x2cc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00d      	beq.n	8000a76 <BLUENRG2__vUserProcess+0x242>
            {
                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 fa7a 	bl	8001f54 <BSP_PB_GetState>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d103      	bne.n	8000a6e <BLUENRG2__vUserProcess+0x23a>
                {
                    BSP_LED_Off( LED2 );
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 f9cc 	bl	8001e04 <BSP_LED_Off>
            else
            {
                BSP_LED_On( LED2 );
            }
        }
        break;
 8000a6c:	e027      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>
                    BSP_LED_On( LED2 );
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f001 f9b2 	bl	8001dd8 <BSP_LED_On>
        break;
 8000a74:	e023      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>
                BSP_LED_On( LED2 );
 8000a76:	2000      	movs	r0, #0
 8000a78:	f001 f9ae 	bl	8001dd8 <BSP_LED_On>
        break;
 8000a7c:	e01f      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_IDLE:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000a7e:	f001 fddf 	bl	8002640 <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d914      	bls.n	8000abc <BLUENRG2__vUserProcess+0x288>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <BLUENRG2__vUserProcess+0x2a4>)
 8000a9a:	f008 f89d 	bl	8008bd8 <iprintf>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000a9e:	f001 fdcf 	bl	8002640 <HAL_GetTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <BLUENRG2__vUserProcess+0x2a0>)
 8000aa6:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_INIT;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <BLUENRG2__vUserProcess+0x298>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000aae:	e005      	b.n	8000abc <BLUENRG2__vUserProcess+0x288>

        default:
            break;
 8000ab0:	bf00      	nop
 8000ab2:	e004      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>
        break;
 8000ab4:	bf00      	nop
 8000ab6:	e002      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>
        break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <BLUENRG2__vUserProcess+0x28a>
        break;
 8000abc:	bf00      	nop
    }
}
 8000abe:	bf00      	nop
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000122 	.word	0x20000122
 8000acc:	200000a7 	.word	0x200000a7
 8000ad0:	08009b74 	.word	0x08009b74
 8000ad4:	20000124 	.word	0x20000124
 8000ad8:	08009b88 	.word	0x08009b88
 8000adc:	08009c1c 	.word	0x08009c1c
 8000ae0:	200000a8 	.word	0x200000a8
 8000ae4:	08009ba0 	.word	0x08009ba0
 8000ae8:	08009bd0 	.word	0x08009bd0
 8000aec:	08009bd8 	.word	0x08009bd8
 8000af0:	200000b0 	.word	0x200000b0
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	200000df 	.word	0x200000df
 8000afc:	20000128 	.word	0x20000128
 8000b00:	200000e0 	.word	0x200000e0

08000b04 <BLUENRG2__vReceiveData>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vReceiveData( uint8_t *pu8Data, uint8_t u8DataLen_Byte )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
   static int8_t i8LastValidRssiThreshold = INT8_MIN;

    if ( 2U == u8DataLen_Byte && isdigit(pu8Data[ 0 ]) && isdigit(pu8Data[ 1 ]) )
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d145      	bne.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <BLUENRG2__vReceiveData+0xa8>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d03b      	beq.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <BLUENRG2__vReceiveData+0xa8>)
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d030      	beq.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
    { 
        uint8_t u8DecimalData = (pu8Data[ 0 ] - '0') * 10 + (pu8Data[ 1 ] - '0');
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	3b10      	subs	r3, #16
 8000b5a:	73fb      	strb	r3, [r7, #15]
       
        int8_t i8Temp =  0 - u8DecimalData;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	425b      	negs	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	73bb      	strb	r3, [r7, #14]

        if( ( 0 > i8Temp ) && (i8Temp > -100) )
 8000b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da1a      	bge.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
 8000b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b70:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000b74:	db15      	blt.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
        {
            if ( i8LastValidRssiThreshold != i8Temp )
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <BLUENRG2__vReceiveData+0xac>)
 8000b78:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d00e      	beq.n	8000ba2 <BLUENRG2__vReceiveData+0x9e>
            {
                BLUENRG2__i8RssiThreshold = i8Temp;
 8000b84:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <BLUENRG2__vReceiveData+0xb0>)
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	7013      	strb	r3, [r2, #0]
                printf("New Threshold set to %d \r\n", BLUENRG2__i8RssiThreshold );
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <BLUENRG2__vReceiveData+0xb0>)
 8000b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <BLUENRG2__vReceiveData+0xb4>)
 8000b94:	f008 f820 	bl	8008bd8 <iprintf>
                i8LastValidRssiThreshold = BLUENRG2__i8RssiThreshold;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <BLUENRG2__vReceiveData+0xb0>)
 8000b9a:	f993 2000 	ldrsb.w	r2, [r3]
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <BLUENRG2__vReceiveData+0xac>)
 8000ba0:	701a      	strb	r2, [r3, #0]
            
        }

    }
    
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	0800a2a4 	.word	0x0800a2a4
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	08009c2c 	.word	0x08009c2c

08000bbc <BLUENRG2__vStartScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartScan( void )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_start_general_discovery_proc( SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00 );
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bce:	f005 f86a 	bl	8005ca6 <aci_gap_start_general_discovery_proc>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <BLUENRG2__vStartScan+0x2c>
    {
        printf( "aci_gap_start_general_discovery_proc() failed, %#X\n", u8Ret );
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <BLUENRG2__vStartScan+0x3c>)
 8000be2:	f007 fff9 	bl	8008bd8 <iprintf>
    }
    else
    {
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
    }
}
 8000be6:	e002      	b.n	8000bee <BLUENRG2__vStartScan+0x32>
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <BLUENRG2__vStartScan+0x40>)
 8000bea:	f008 f85b 	bl	8008ca4 <puts>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08009c48 	.word	0x08009c48
 8000bfc:	08009c7c 	.word	0x08009c7c

08000c00 <BLUENRG2__vStopScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStopScan( void )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_terminate_gap_proc( GAP_GENERAL_DISCOVERY_PROC );
 8000c06:	2002      	movs	r0, #2
 8000c08:	f005 f9ce 	bl	8005fa8 <aci_gap_terminate_gap_proc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <BLUENRG2__vStopScan+0x22>
    {
        printf( "aci_gap_terminate_gap_proc() failed, %#X\r\n", u8Ret );
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <BLUENRG2__vStopScan+0x30>)
 8000c1c:	f007 ffdc 	bl	8008bd8 <iprintf>
    }
    else
    {
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
    }
}
 8000c20:	e002      	b.n	8000c28 <BLUENRG2__vStopScan+0x28>
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <BLUENRG2__vStopScan+0x34>)
 8000c24:	f008 f83e 	bl	8008ca4 <puts>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08009cac 	.word	0x08009cac
 8000c34:	08009cd8 	.word	0x08009cd8

08000c38 <BLUENRG2__vStartConnect>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartConnect( void )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af08      	add	r7, sp, #32

    // Do connection with first discovered device
    uint8_t u8Ret =
    aci_gap_create_connection( SCAN_P, SCAN_L, BLUENRG2__stConnCTX.stDevice.u8Type,
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <BLUENRG2__vStartConnect+0x60>)
 8000c40:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000c44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c48:	9306      	str	r3, [sp, #24]
 8000c4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c4e:	9305      	str	r3, [sp, #20]
 8000c50:	233c      	movs	r3, #60	; 0x3c
 8000c52:	9304      	str	r3, [sp, #16]
 8000c54:	2300      	movs	r3, #0
 8000c56:	9303      	str	r3, [sp, #12]
 8000c58:	2328      	movs	r3, #40	; 0x28
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2328      	movs	r3, #40	; 0x28
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	2300      	movs	r3, #0
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <BLUENRG2__vStartConnect+0x64>)
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c6e:	f005 f8b7 	bl	8005de0 <aci_gap_create_connection>
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
                               BLUENRG2__stConnCTX.stDevice.au8Addr, PUBLIC_ADDR, 40, 40, 0, 60, 2000, 2000 );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <BLUENRG2__vStartConnect+0x50>
    {
        PRINT_DBG( "aci_gap_create_connection() failed: 0x%02x\r\n", u8Ret );
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <BLUENRG2__vStartConnect+0x68>)
 8000c82:	f007 ffa9 	bl	8008bd8 <iprintf>
    }
    else
    {
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
    }
}
 8000c86:	e002      	b.n	8000c8e <BLUENRG2__vStartConnect+0x56>
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <BLUENRG2__vStartConnect+0x6c>)
 8000c8a:	f008 f80b 	bl	8008ca4 <puts>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	200000d8 	.word	0x200000d8
 8000ca0:	08009cfc 	.word	0x08009cfc
 8000ca4:	08009d2c 	.word	0x08009d2c

08000ca8 <BLUENRG2__vResetConnectionContext>:
 * Description    : Reset the discovery context.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vResetConnectionContext( void )
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
    BSP_LED_On( LED2 );
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f892 	bl	8001dd8 <BSP_LED_On>
    BLUENRG_memset( &BLUENRG2__stConnCTX, 0, sizeof( BLUENRG2__stConnCTX ) );
 8000cb4:	2236      	movs	r2, #54	; 0x36
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4830      	ldr	r0, [pc, #192]	; (8000d7c <BLUENRG2__vResetConnectionContext+0xd4>)
 8000cba:	f008 f8e3 	bl	8008e84 <memset>

    BLUENRG2__stConnCTX.RemoteTx.bValid = false;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <BLUENRG2__vResetConnectionContext+0xd4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	719a      	strb	r2, [r3, #6]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteTx.uUUID.UUID_128, BLUENRG2__cau8RemoteTxCharUUID,
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <BLUENRG2__vResetConnectionContext+0xd4>)
 8000cc6:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <BLUENRG2__vResetConnectionContext+0xd8>)
 8000cc8:	f103 0408 	add.w	r4, r3, #8
 8000ccc:	4613      	mov	r3, r2
 8000cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteTxCharUUID ) );

    BLUENRG2__stConnCTX.RemoteRx.bValid = false;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <BLUENRG2__vResetConnectionContext+0xd4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	769a      	strb	r2, [r3, #26]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteRx.uUUID.UUID_128, BLUENRG2__cau8RemoteRxCharUUID,
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <BLUENRG2__vResetConnectionContext+0xd4>)
 8000cdc:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000cde:	f103 041c 	add.w	r4, r3, #28
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteRxCharUUID ) );

    BLUENRG2__bRemoteTxNotifyEnabled = false;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <BLUENRG2__vResetConnectionContext+0xe0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bTXbufferFull          = false;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <BLUENRG2__vResetConnectionContext+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bMasterDevIsUnlocked   = false;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <BLUENRG2__vResetConnectionContext+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

    BLUENRG2__st8Queue.bValid = false;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <BLUENRG2__vResetConnectionContext+0xec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	719a      	strb	r2, [r3, #6]
    BLUENRG2__st8Queue.u8Idx  = 0U;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <BLUENRG2__vResetConnectionContext+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	715a      	strb	r2, [r3, #5]

    BLUENRG2__u8MTUExchanged     = 0U;
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <BLUENRG2__vResetConnectionContext+0xf0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
    BLUENRG2__u8MTUExchangedWait = 0U;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <BLUENRG2__vResetConnectionContext+0xf4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
    BLUENRG2__u16WriteCharLen    = (uint16_t) CHAR_VALUE_LENGTH - (uint16_t) 3U;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <BLUENRG2__vResetConnectionContext+0xf8>)
 8000d16:	223c      	movs	r2, #60	; 0x3c
 8000d18:	801a      	strh	r2, [r3, #0]

    for( uint16_t U16Idx = 0U; U16Idx < (uint16_t) ( CHAR_VALUE_LENGTH - 3U ); U16Idx++ )
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	e024      	b.n	8000d6a <BLUENRG2__vResetConnectionContext+0xc2>
    {
        BLUENRG2__au8DataBuf[U16Idx] = 0x31U + ( U16Idx % 10U );
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <BLUENRG2__vResetConnectionContext+0xfc>)
 8000d24:	fba3 1302 	umull	r1, r3, r3, r2
 8000d28:	08d9      	lsrs	r1, r3, #3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	3231      	adds	r2, #49	; 0x31
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <BLUENRG2__vResetConnectionContext+0x100>)
 8000d40:	54d1      	strb	r1, [r2, r3]
        if( ( U16Idx + 1U ) % 10U == 0U )
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	1c59      	adds	r1, r3, #1
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <BLUENRG2__vResetConnectionContext+0xfc>)
 8000d48:	fba3 2301 	umull	r2, r3, r3, r1
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	1aca      	subs	r2, r1, r3
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d103      	bne.n	8000d64 <BLUENRG2__vResetConnectionContext+0xbc>
        {
            BLUENRG2__au8DataBuf[U16Idx] = 'x';
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <BLUENRG2__vResetConnectionContext+0x100>)
 8000d60:	2178      	movs	r1, #120	; 0x78
 8000d62:	54d1      	strb	r1, [r2, r3]
    for( uint16_t U16Idx = 0U; U16Idx < (uint16_t) ( CHAR_VALUE_LENGTH - 3U ); U16Idx++ )
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	3301      	adds	r3, #1
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d6e:	d9d7      	bls.n	8000d20 <BLUENRG2__vResetConnectionContext+0x78>
        }
    }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a8 	.word	0x200000a8
 8000d80:	0800a048 	.word	0x0800a048
 8000d84:	0800a058 	.word	0x0800a058
 8000d88:	200000df 	.word	0x200000df
 8000d8c:	200000de 	.word	0x200000de
 8000d90:	200000e0 	.word	0x200000e0
 8000d94:	200000a0 	.word	0x200000a0
 8000d98:	20000120 	.word	0x20000120
 8000d9c:	20000121 	.word	0x20000121
 8000da0:	20000002 	.word	0x20000002
 8000da4:	cccccccd 	.word	0xcccccccd
 8000da8:	200000e4 	.word	0x200000e4

08000dac <BLUENRG2__u8PrintBLEFwInfo>:
 * Description    : Setup the device address.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static uint8_t BLUENRG2__u8PrintBLEFwInfo( void )
{
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b094      	sub	sp, #80	; 0x50
 8000db0:	af08      	add	r7, sp, #32
    uint16_t u16DTMBuildNum;

    uint8_t  u8BLEStackVerMajor, u8BLEStackVerMinor, u8BLEStackVerPatch, u8BLEStackDevelopment;
    uint16_t u16BLEStackVariant, u16BLEStackBuildNum;

    uint8_t au8Alphabet[] = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <BLUENRG2__u8PrintBLEFwInfo+0xec>)
 8000db4:	1d3c      	adds	r4, r7, #4
 8000db6:	461d      	mov	r5, r3
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc0:	c403      	stmia	r4!, {r0, r1}
 8000dc2:	8022      	strh	r2, [r4, #0]
 8000dc4:	3402      	adds	r4, #2
 8000dc6:	0c13      	lsrs	r3, r2, #16
 8000dc8:	7023      	strb	r3, [r4, #0]
                              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
    // clang-format off
    uint8_t u8Status = aci_hal_get_firmware_details( &u8DTMVerMajor, &u8DTMVerMinor, &u8DTMVerPatch, &u8DTMVerVariant,
 8000dca:	f107 042b 	add.w	r4, r7, #43	; 0x2b
 8000dce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000dd2:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000dd6:	f107 002e 	add.w	r0, r7, #46	; 0x2e
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	9306      	str	r3, [sp, #24]
 8000de0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000de4:	9305      	str	r3, [sp, #20]
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	9304      	str	r3, [sp, #16]
 8000dec:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000df0:	9303      	str	r3, [sp, #12]
 8000df2:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4623      	mov	r3, r4
 8000e06:	f005 fdf6 	bl	80069f6 <aci_hal_get_firmware_details>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                     &u16DTMBuildNum, &u8BLEStackVerMajor, &u8BLEStackVerMinor,
                                                     &u8BLEStackVerPatch, &u8BLEStackDevelopment, &u16BLEStackVariant, 
                                                     &u16BLEStackBuildNum 
                                                    );
    // clang-format on
    PRINT_DBG( "\r\n--------------------------------------------------------\r\n\n" );
 8000e10:	4822      	ldr	r0, [pc, #136]	; (8000e9c <BLUENRG2__u8PrintBLEFwInfo+0xf0>)
 8000e12:	f007 ff47 	bl	8008ca4 <puts>
    PRINT_DBG( " Lumen BLE Central App v%d.%d.%d \r\n", 0, 0, 0 );
 8000e16:	2300      	movs	r3, #0
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <BLUENRG2__u8PrintBLEFwInfo+0xf4>)
 8000e1e:	f007 fedb 	bl	8008bd8 <iprintf>

    if( u8Status == BLE_STATUS_SUCCESS )
 8000e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d12c      	bne.n	8000e84 <BLUENRG2__u8PrintBLEFwInfo+0xd8>
    {
        PRINT_DBG( "- BlueNRG-2 FW v%d.%d%c \r\n", u8BLEStackVerMajor, u8BLEStackVerMinor,
 8000e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e34:	461a      	mov	r2, r3
 8000e36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e3a:	3330      	adds	r3, #48	; 0x30
 8000e3c:	443b      	add	r3, r7
 8000e3e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <BLUENRG2__u8PrintBLEFwInfo+0xf8>)
 8000e44:	f007 fec8 	bl	8008bd8 <iprintf>
                   au8Alphabet[u8BLEStackVerPatch] );

        PRINT_DBG( "- DTM %s v%d.%d%c \r\n",
 8000e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d007      	beq.n	8000e60 <BLUENRG2__u8PrintBLEFwInfo+0xb4>
 8000e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d101      	bne.n	8000e5c <BLUENRG2__u8PrintBLEFwInfo+0xb0>
 8000e58:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <BLUENRG2__u8PrintBLEFwInfo+0xfc>)
 8000e5a:	e002      	b.n	8000e62 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000e5c:	4913      	ldr	r1, [pc, #76]	; (8000eac <BLUENRG2__u8PrintBLEFwInfo+0x100>)
 8000e5e:	e000      	b.n	8000e62 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000e60:	4913      	ldr	r1, [pc, #76]	; (8000eb0 <BLUENRG2__u8PrintBLEFwInfo+0x104>)
 8000e62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e66:	461a      	mov	r2, r3
 8000e68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	443b      	add	r3, r7
 8000e76:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <BLUENRG2__u8PrintBLEFwInfo+0x108>)
 8000e80:	f007 feaa 	bl	8008bd8 <iprintf>
                   u8DTMVerVariant == 0x01 ? "UART" : ( u8DTMVerVariant == 0x02 ? "SPI" : "Unknown" ), u8DTMVerMajor,
                   u8DTMVerMinor, au8Alphabet[u8DTMVerPatch] );
    }
    PRINT_DBG( "\r\n" );
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <BLUENRG2__u8PrintBLEFwInfo+0x10c>)
 8000e86:	f007 ff0d 	bl	8008ca4 <puts>

    return u8Status;
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08009df8 	.word	0x08009df8
 8000e9c:	08009d4c 	.word	0x08009d4c
 8000ea0:	08009d8c 	.word	0x08009d8c
 8000ea4:	08009db0 	.word	0x08009db0
 8000ea8:	08009dcc 	.word	0x08009dcc
 8000eac:	08009dd0 	.word	0x08009dd0
 8000eb0:	08009dd8 	.word	0x08009dd8
 8000eb4:	08009de0 	.word	0x08009de0
 8000eb8:	08009bd8 	.word	0x08009bd8

08000ebc <BLUENRG2__bFindDeviceName>:
 * Input          : Data length.
 *                  Data value
 * Return         : TRUE if the local name found is the expected one, FALSE otherwise.
 *******************************************************************************/
static bool BLUENRG2__bFindDeviceName( uint8_t u8DataLen, uint8_t *pu8Data )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Index = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]

    while( u8Index < u8DataLen )
 8000ecc:	e02f      	b.n	8000f2e <BLUENRG2__bFindDeviceName+0x72>
    {
        /* Advertising data fields: len, type, values */
        /* Check if field is complete local name and the length is the expected one for BLE
         * CentralApp  */
        if( pu8Data[u8Index + 1U] == AD_TYPE_COMPLETE_LOCAL_NAME )
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b09      	cmp	r3, #9
 8000eda:	d11f      	bne.n	8000f1c <BLUENRG2__bFindDeviceName+0x60>
        {
            // check if found device name is start with LUMEN
            uint8_t au8FindKeyStr[] = "BLE Device"; //TODO
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <BLUENRG2__bFindDeviceName+0x84>)
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee4:	c303      	stmia	r3!, {r0, r1}
 8000ee6:	801a      	strh	r2, [r3, #0]
 8000ee8:	3302      	adds	r3, #2
 8000eea:	0c12      	lsrs	r2, r2, #16
 8000eec:	701a      	strb	r2, [r3, #0]

            pu8Data[u8Index + 1 + sizeof( au8FindKeyStr )] = '\0'; // Limit device name string
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]

            if( 0U == BLUENRG_memcmp( &pu8Data[u8Index + 2], au8FindKeyStr, sizeof( au8FindKeyStr ) - 1 ) )
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	3302      	adds	r3, #2
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	f107 010c 	add.w	r1, r7, #12
 8000f06:	220a      	movs	r2, #10
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 ffab 	bl	8008e64 <memcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <BLUENRG2__bFindDeviceName+0x5c>
            {
                return TRUE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e00f      	b.n	8000f38 <BLUENRG2__bFindDeviceName+0x7c>
            }
            else
            {
                return FALSE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e00d      	b.n	8000f38 <BLUENRG2__bFindDeviceName+0x7c>
            }
        }
        else
        {
            u8Index += ( pu8Data[u8Index] + 1U ); // move to next advertising field, Refer to Core 5.2 Figure 11.1
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	75fb      	strb	r3, [r7, #23]
    while( u8Index < u8DataLen )
 8000f2e:	7dfa      	ldrb	r2, [r7, #23]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3cb      	bcc.n	8000ece <BLUENRG2__bFindDeviceName+0x12>
        }
    }

    return FALSE;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08009e14 	.word	0x08009e14

08000f44 <BLUENRG2__vAttributeModifiedCB>:
 *                  Length of the data.
 *                  Attribute data.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vAttributeModifiedCB( uint16_t u16AttributeHandle, uint8_t u8DataLen, uint8_t *pau8AttrData )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	603a      	str	r2, [r7, #0]
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	460b      	mov	r3, r1
 8000f52:	717b      	strb	r3, [r7, #5]
    if( u16AttributeHandle == u16LocalRxCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <BLUENRG2__vAttributeModifiedCB+0x4c>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d105      	bne.n	8000f6c <BLUENRG2__vAttributeModifiedCB+0x28>
    {
        BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );    // Local Rx data
 8000f60:	797b      	ldrb	r3, [r7, #5]
 8000f62:	4619      	mov	r1, r3
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f7ff fdcd 	bl	8000b04 <BLUENRG2__vReceiveData>
        if( pau8AttrData[0] == 0x01 )
        {
            BLUENRG2__bRemoteTxNotifyEnabled = true;
        }
    }
}
 8000f6a:	e00c      	b.n	8000f86 <BLUENRG2__vAttributeModifiedCB+0x42>
    else if( u16AttributeHandle == u16LocalTxCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <BLUENRG2__vAttributeModifiedCB+0x50>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	3302      	adds	r3, #2
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d106      	bne.n	8000f86 <BLUENRG2__vAttributeModifiedCB+0x42>
        if( pau8AttrData[0] == 0x01 )
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <BLUENRG2__vAttributeModifiedCB+0x42>
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <BLUENRG2__vAttributeModifiedCB+0x54>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000132 	.word	0x20000132
 8000f94:	20000130 	.word	0x20000130
 8000f98:	200000df 	.word	0x200000df

08000f9c <BLUENRG2__vUpdateLockStatus>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUpdateLockStatus( int8_t i8Rssi,  bool bDebounceEnable )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
    static bool bLastLockState = false;

    if( i8Rssi != BLUENRG2_RSSI_INVALID_VALUE )
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb2:	d067      	beq.n	8001084 <BLUENRG2__vUpdateLockStatus+0xe8>
    {
        if( !bDebounceEnable )
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <BLUENRG2__vUpdateLockStatus+0x4e>
        {
            if( i8Rssi >= BLUENRG2__i8RssiThreshold )
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <BLUENRG2__vUpdateLockStatus+0x11c>)
 8000fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	db03      	blt.n	8000fd6 <BLUENRG2__vUpdateLockStatus+0x3a>
            {
                BLUENRG2__bMasterDevIsUnlocked = true;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e002      	b.n	8000fdc <BLUENRG2__vUpdateLockStatus+0x40>
            }
            else
            {
                BLUENRG2__bMasterDevIsUnlocked = false;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
            }
            PRINT_DBG( "[RSSI] raw %d dBm\r\n", i8Rssi );
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4837      	ldr	r0, [pc, #220]	; (80010c0 <BLUENRG2__vUpdateLockStatus+0x124>)
 8000fe4:	f007 fdf8 	bl	8008bd8 <iprintf>
 8000fe8:	e04c      	b.n	8001084 <BLUENRG2__vUpdateLockStatus+0xe8>
        }
        else
        {
            int8_t i8ProcessedRssi;

            if( ( i8ProcessedRssi = BLUENRG2__i8GetProcessedRSSI( i8Rssi ) ) && BLUENRG2__bIsProcessedRSSIValid() )
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f874 	bl	80010dc <BLUENRG2__i8GetProcessedRSSI>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d041      	beq.n	8001084 <BLUENRG2__vUpdateLockStatus+0xe8>
 8001000:	f000 f8d2 	bl	80011a8 <BLUENRG2__bIsProcessedRSSIValid>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d03c      	beq.n	8001084 <BLUENRG2__vUpdateLockStatus+0xe8>
            {
                PRINT_DBG( "[RSSI] raw %d dBm, cali %d dBm\r\n", i8Rssi, i8ProcessedRssi );
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001012:	4619      	mov	r1, r3
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <BLUENRG2__vUpdateLockStatus+0x128>)
 8001016:	f007 fddf 	bl	8008bd8 <iprintf>
                uint8_t u8DecimalValue[ 2 ];
                u8DecimalValue[ 0 ] =  (uint8_t)abs(i8ProcessedRssi / 10);
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <BLUENRG2__vUpdateLockStatus+0x12c>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b25b      	sxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	bfb8      	it	lt
 8001030:	425b      	neglt	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	733b      	strb	r3, [r7, #12]
                u8DecimalValue[ 1 ] =  (uint8_t)abs(i8ProcessedRssi % 10);
 8001036:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <BLUENRG2__vUpdateLockStatus+0x12c>)
 800103c:	fb83 1302 	smull	r1, r3, r3, r2
 8001040:	1099      	asrs	r1, r3, #2
 8001042:	17d3      	asrs	r3, r2, #31
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	460b      	mov	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfb8      	it	lt
 8001056:	425b      	neglt	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	737b      	strb	r3, [r7, #13]

                BLUENRG2__vSendData( u8DecimalValue, sizeof(u8DecimalValue) );
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff faac 	bl	80005c0 <BLUENRG2__vSendData>
                if( i8ProcessedRssi >= BLUENRG2__i8RssiThreshold )
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <BLUENRG2__vUpdateLockStatus+0x11c>)
 800106a:	f993 3000 	ldrsb.w	r3, [r3]
 800106e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001072:	429a      	cmp	r2, r3
 8001074:	db03      	blt.n	800107e <BLUENRG2__vUpdateLockStatus+0xe2>
                {
                    BLUENRG2__bMasterDevIsUnlocked = true;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e002      	b.n	8001084 <BLUENRG2__vUpdateLockStatus+0xe8>
                }
                else
                {
                    BLUENRG2__bMasterDevIsUnlocked = false;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    if( bLastLockState != BLUENRG2__bMasterDevIsUnlocked )
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <BLUENRG2__vUpdateLockStatus+0x130>)
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d00e      	beq.n	80010ae <BLUENRG2__vUpdateLockStatus+0x112>
    {
        bLastLockState = BLUENRG2__bMasterDevIsUnlocked;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <BLUENRG2__vUpdateLockStatus+0x130>)
 8001096:	701a      	strb	r2, [r3, #0]
        PRINT_DBG( "%s !!! \r\n", BLUENRG2__bMasterDevIsUnlocked ? "UNLOCKED" : "LOCKED" );
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <BLUENRG2__vUpdateLockStatus+0x120>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <BLUENRG2__vUpdateLockStatus+0x108>
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <BLUENRG2__vUpdateLockStatus+0x134>)
 80010a2:	e000      	b.n	80010a6 <BLUENRG2__vUpdateLockStatus+0x10a>
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <BLUENRG2__vUpdateLockStatus+0x138>)
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <BLUENRG2__vUpdateLockStatus+0x13c>)
 80010aa:	f007 fd95 	bl	8008bd8 <iprintf>
    }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	200000e0 	.word	0x200000e0
 80010c0:	08009e20 	.word	0x08009e20
 80010c4:	08009e34 	.word	0x08009e34
 80010c8:	66666667 	.word	0x66666667
 80010cc:	2000012c 	.word	0x2000012c
 80010d0:	08009e58 	.word	0x08009e58
 80010d4:	08009e64 	.word	0x08009e64
 80010d8:	08009e6c 	.word	0x08009e6c

080010dc <BLUENRG2__i8GetProcessedRSSI>:

static int8_t BLUENRG2__i8GetProcessedRSSI( int8_t i8RSSIVal )
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    int8_t i8ReturnValue = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]

    BLUENRG2__st8Queue.i8Buffer[BLUENRG2__st8Queue.u8Idx] = i8RSSIVal;
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 80010ec:	795b      	ldrb	r3, [r3, #5]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	5453      	strb	r3, [r2, r1]
    BLUENRG2__st8Queue.u8Idx++;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001100:	715a      	strb	r2, [r3, #5]

    if( BLUENRG2__st8Queue.u8Idx >= BLUENRG2_Q_SZ )
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d905      	bls.n	8001116 <BLUENRG2__i8GetProcessedRSSI+0x3a>
    {
        BLUENRG2__st8Queue.bValid = true;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 800110c:	2201      	movs	r2, #1
 800110e:	719a      	strb	r2, [r3, #6]

        BLUENRG2__st8Queue.u8Idx = 0U;
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001112:	2200      	movs	r2, #0
 8001114:	715a      	strb	r2, [r3, #5]
    }

    if( BLUENRG2__st8Queue.bValid )
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d038      	beq.n	8001190 <BLUENRG2__i8GetProcessedRSSI+0xb4>
    {
        int32_t i32TempRssi = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]

        int8_t i8MinValue = INT8_MAX;
 8001122:	237f      	movs	r3, #127	; 0x7f
 8001124:	73fb      	strb	r3, [r7, #15]
        int8_t i8MaxValue = INT8_MIN;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	73bb      	strb	r3, [r7, #14]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 800112a:	2300      	movs	r3, #0
 800112c:	737b      	strb	r3, [r7, #13]
 800112e:	e01b      	b.n	8001168 <BLUENRG2__i8GetProcessedRSSI+0x8c>
        {
            int8_t i8Value = BLUENRG2__st8Queue.i8Buffer[u8Idx];
 8001130:	7b7b      	ldrb	r3, [r7, #13]
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	733b      	strb	r3, [r7, #12]

            if( i8Value > i8MaxValue )
 8001138:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800113c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001140:	429a      	cmp	r2, r3
 8001142:	dd01      	ble.n	8001148 <BLUENRG2__i8GetProcessedRSSI+0x6c>
            {
                i8MaxValue = i8Value;
 8001144:	7b3b      	ldrb	r3, [r7, #12]
 8001146:	73bb      	strb	r3, [r7, #14]
            }

            if( i8Value < i8MinValue )
 8001148:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	429a      	cmp	r2, r3
 8001152:	da01      	bge.n	8001158 <BLUENRG2__i8GetProcessedRSSI+0x7c>
            {
                i8MinValue = i8Value;
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	73fb      	strb	r3, [r7, #15]
            }
            i32TempRssi += i8Value;
 8001158:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	3301      	adds	r3, #1
 8001166:	737b      	strb	r3, [r7, #13]
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d9e0      	bls.n	8001130 <BLUENRG2__i8GetProcessedRSSI+0x54>
        }

        i32TempRssi -= i8MinValue;
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	613b      	str	r3, [r7, #16]
        i32TempRssi -= i8MaxValue;
 8001178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]

        i8ReturnValue = (int8_t) ( i32TempRssi / (int32_t) ( BLUENRG2_Q_SZ - 2 ) );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <BLUENRG2__i8GetProcessedRSSI+0xc8>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	75fb      	strb	r3, [r7, #23]
    }

    return i8ReturnValue;
 8001190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	200000a0 	.word	0x200000a0
 80011a4:	55555556 	.word	0x55555556

080011a8 <BLUENRG2__bIsProcessedRSSIValid>:

static bool BLUENRG2__bIsProcessedRSSIValid( void )
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    return BLUENRG2__st8Queue.bValid;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <BLUENRG2__bIsProcessedRSSIValid+0x14>)
 80011ae:	799b      	ldrb	r3, [r3, #6]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000a0 	.word	0x200000a0

080011c0 <hci_le_connection_complete_event>:
                                       uint16_t Conn_Interval,
                                       uint16_t Conn_Latency,
                                       uint16_t Supervision_Timeout,
                                       uint8_t  Master_Clock_Accuracy )

{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	80bb      	strh	r3, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	4613      	mov	r3, r2
 80011dc:	70fb      	strb	r3, [r7, #3]
    BLUENRG2__stConnCTX.u16Handle = Connection_Handle;
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <hci_le_connection_complete_event+0x8c>)
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	8053      	strh	r3, [r2, #2]
    BLUENRG2__stConnCTX.u8Role    = Role;
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <hci_le_connection_complete_event+0x8c>)
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	7113      	strb	r3, [r2, #4]

    PRINT_DBG( "Connection Complete with peer address: " );
 80011ea:	4819      	ldr	r0, [pc, #100]	; (8001250 <hci_le_connection_complete_event+0x90>)
 80011ec:	f007 fcf4 	bl	8008bd8 <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80011f0:	2305      	movs	r3, #5
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e00e      	b.n	8001214 <hci_le_connection_complete_event+0x54>
    {
        PRINT_DBG( "%02X-", Peer_Address[i8Idx] );
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	6a3a      	ldr	r2, [r7, #32]
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <hci_le_connection_complete_event+0x94>)
 8001204:	f007 fce8 	bl	8008bd8 <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dcec      	bgt.n	80011f6 <hci_le_connection_complete_event+0x36>
    }
    PRINT_DBG( "%02X\r\n", Peer_Address[0] );
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <hci_le_connection_complete_event+0x98>)
 8001224:	f007 fcd8 	bl	8008bd8 <iprintf>

    if( BLUENRG2__stConnCTX.u8Role == BLUENRG2_MASTER_ROLE )
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <hci_le_connection_complete_event+0x8c>)
 800122a:	791b      	ldrb	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <hci_le_connection_complete_event+0x7e>
    {
        BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_TX;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <hci_le_connection_complete_event+0x9c>)
 8001232:	2204      	movs	r2, #4
 8001234:	701a      	strb	r2, [r3, #0]

        BLUENRG2__stConnCTX.bHasConnection = true;
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <hci_le_connection_complete_event+0x8c>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
    }
}
 800123c:	e002      	b.n	8001244 <hci_le_connection_complete_event+0x84>
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <hci_le_connection_complete_event+0x9c>)
 8001240:	2208      	movs	r2, #8
 8001242:	701a      	strb	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	200000a8 	.word	0x200000a8
 8001250:	08009e78 	.word	0x08009e78
 8001254:	08009ea0 	.word	0x08009ea0
 8001258:	08009ea8 	.word	0x08009ea8
 800125c:	200000a7 	.word	0x200000a7

08001260 <hci_disconnection_complete_event>:
//*****************************************************
//! \brief  This event indicates the discconnection from a peer device.
//!
//*****************************************************
void hci_disconnection_complete_event( uint8_t Status, uint16_t Connection_Handle, uint8_t Reason )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	460b      	mov	r3, r1
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	71bb      	strb	r3, [r7, #6]

    PRINT_DBG( "Disconnection with reason: 0x%02X\r\n", Reason );
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <hci_disconnection_complete_event+0x2c>)
 8001278:	f007 fcae 	bl	8008bd8 <iprintf>
    BLUENRG2__enState = BLUENRG2_STAT_INIT;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <hci_disconnection_complete_event+0x30>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08009eb0 	.word	0x08009eb0
 8001290:	200000a7 	.word	0x200000a7

08001294 <hci_le_advertising_report_event>:
//*****************************************************
//! \brief  An advertising report is received.
//!
//*****************************************************
void hci_le_advertising_report_event( uint8_t Num_Reports, Advertising_Report_t Advertising_Report[] )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
    /* Advertising_Report contains all the expected parameters */
    uint8_t u8DataLen = Advertising_Report[0].Length_Data;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	7a1b      	ldrb	r3, [r3, #8]
 80012a4:	73fb      	strb	r3, [r7, #15]

    if( !BLUENRG2__stConnCTX.stDevice.bValid )
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <hci_le_advertising_report_event+0x74>)
 80012a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80012ac:	f083 0301 	eor.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d023      	beq.n	80012fe <hci_le_advertising_report_event+0x6a>
    {
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11f      	bne.n	80012fe <hci_le_advertising_report_event+0x6a>
            BLUENRG2__bFindDeviceName( u8DataLen, Advertising_Report[0].Data ) )
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fdf8 	bl	8000ebc <BLUENRG2__bFindDeviceName>
 80012cc:	4603      	mov	r3, r0
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d015      	beq.n	80012fe <hci_le_advertising_report_event+0x6a>
        {
            // BLUENRG2__vUpdateLockStatus( Advertising_Report[0].RSSI, BLUENRG2_RSSI_THRESHOLD_NEAR, false );

            // if( BLUENRG2__bMasterDevIsUnlocked )
            // {
                BLUENRG2__stConnCTX.stDevice.bValid = true;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <hci_le_advertising_report_event+0x74>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                BLUENRG2__stConnCTX.stDevice.u8Type = Advertising_Report[0].Address_Type;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	785a      	ldrb	r2, [r3, #1]
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <hci_le_advertising_report_event+0x74>)
 80012e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                BLUENRG_memcpy( BLUENRG2__stConnCTX.stDevice.au8Addr, Advertising_Report[0].Address,
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	1c9a      	adds	r2, r3, #2
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <hci_le_advertising_report_event+0x74>)
 80012ea:	3330      	adds	r3, #48	; 0x30
 80012ec:	6810      	ldr	r0, [r2, #0]
 80012ee:	6018      	str	r0, [r3, #0]
 80012f0:	8892      	ldrh	r2, [r2, #4]
 80012f2:	809a      	strh	r2, [r3, #4]
                                sizeof( Advertising_Report[0].Address ) );
                PRINT_DBG( "Device found\r\n" );
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <hci_le_advertising_report_event+0x78>)
 80012f6:	f007 fcd5 	bl	8008ca4 <puts>
                BLUENRG2__vStopScan();
 80012fa:	f7ff fc81 	bl	8000c00 <BLUENRG2__vStopScan>
            // }
        }
    }
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000a8 	.word	0x200000a8
 800130c:	08009ed4 	.word	0x08009ed4

08001310 <aci_gap_proc_complete_event>:
//*****************************************************
//! \brief  This event indicates the end of a GAP procedure.
//!
//*****************************************************
void aci_gap_proc_complete_event( uint8_t Procedure_Code, uint8_t Status, uint8_t u8DataLen, uint8_t Data[] )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
    if( Procedure_Code == GAP_GENERAL_DISCOVERY_PROC )
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d112      	bne.n	8001350 <aci_gap_proc_complete_event+0x40>
    {
        /* gap procedure complete has been raised as consequence of a GAP
           terminate procedure done after a device found event during the discovery procedure */
        if( BLUENRG2__stConnCTX.stDevice.bValid && !BLUENRG2__stConnCTX.bHasConnection )
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <aci_gap_proc_complete_event+0x4c>)
 800132c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <aci_gap_proc_complete_event+0x3a>
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <aci_gap_proc_complete_event+0x4c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <aci_gap_proc_complete_event+0x3a>
        {
            BLUENRG2__enState = BLUENRG2_STAT_START_CONNECT;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <aci_gap_proc_complete_event+0x50>)
 8001344:	2202      	movs	r2, #2
 8001346:	701a      	strb	r2, [r3, #0]
        {
            // discovery procedure has been completed and no device found:
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
        }
    }
}
 8001348:	e002      	b.n	8001350 <aci_gap_proc_complete_event+0x40>
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <aci_gap_proc_complete_event+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	200000a8 	.word	0x200000a8
 8001360:	200000a7 	.word	0x200000a7

08001364 <aci_gatt_attribute_modified_event>:
                                        uint16_t Attr_Handle, 
                                        uint16_t Offset,
                                        uint16_t Attr_Data_Length,
                                        uint8_t Attr_Data[] )
// clang-format on
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4604      	mov	r4, r0
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4603      	mov	r3, r0
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
    BLUENRG2__vAttributeModifiedCB( Attr_Handle, Attr_Data_Length, Attr_Data );
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fdda 	bl	8000f44 <BLUENRG2__vAttributeModifiedCB>
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <aci_gatt_notification_event>:
//*****************************************************
void aci_gatt_notification_event( uint16_t Connection_Handle,
                                  uint16_t Attribute_Handle,
                                  uint8_t  Attribute_Value_Length,
                                  uint8_t  Attribute_Value[] )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4603      	mov	r3, r0
 80013a2:	81fb      	strh	r3, [r7, #14]
 80013a4:	460b      	mov	r3, r1
 80013a6:	81bb      	strh	r3, [r7, #12]
 80013a8:	4613      	mov	r3, r2
 80013aa:	72fb      	strb	r3, [r7, #11]
    if( Attribute_Handle == BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET )
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <aci_gatt_notification_event+0x34>)
 80013b0:	8b1b      	ldrh	r3, [r3, #24]
 80013b2:	3301      	adds	r3, #1
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d104      	bne.n	80013c2 <aci_gatt_notification_event+0x2a>
    {
        BLUENRG2__vReceiveData( Attribute_Value, Attribute_Value_Length );
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fba1 	bl	8000b04 <BLUENRG2__vReceiveData>
    }
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000a8 	.word	0x200000a8

080013d0 <aci_gatt_disc_read_char_by_uuid_resp_event>:
//*****************************************************
void aci_gatt_disc_read_char_by_uuid_resp_event( uint16_t Connection_Handle,
                                                 uint16_t Attribute_Handle,
                                                 uint8_t  Attribute_Value_Length,
                                                 uint8_t  Attribute_Value[] )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4603      	mov	r3, r0
 80013da:	81fb      	strh	r3, [r7, #14]
 80013dc:	460b      	mov	r3, r1
 80013de:	81bb      	strh	r3, [r7, #12]
 80013e0:	4613      	mov	r3, r2
 80013e2:	72fb      	strb	r3, [r7, #11]
    PRINT_DBG( "aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle );
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>)
 80013ea:	f007 fbf5 	bl	8008bd8 <iprintf>

    if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80013f0:	799b      	ldrb	r3, [r3, #6]
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00c      	beq.n	8001416 <aci_gatt_disc_read_char_by_uuid_resp_event+0x46>
    {
        BLUENRG2__stConnCTX.RemoteTx.u16Handle = Attribute_Handle;
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	8313      	strh	r3, [r2, #24]
        PRINT_DBG( "Remote TX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteTx.u16Handle );
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001404:	8b1b      	ldrh	r3, [r3, #24]
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 800140a:	f007 fbe5 	bl	8008bd8 <iprintf>
        BLUENRG2__stConnCTX.RemoteTx.bValid = true;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001410:	2201      	movs	r2, #1
 8001412:	719a      	strb	r2, [r3, #6]
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
        }
    }
}
 8001414:	e012      	b.n	800143c <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001418:	7e9b      	ldrb	r3, [r3, #26]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
 8001424:	4a08      	ldr	r2, [pc, #32]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	8593      	strh	r3, [r2, #44]	; 0x2c
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800142c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 8001432:	f007 fbd1 	bl	8008bd8 <iprintf>
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001438:	2201      	movs	r2, #1
 800143a:	769a      	strb	r2, [r3, #26]
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	08009ee4 	.word	0x08009ee4
 8001448:	200000a8 	.word	0x200000a8
 800144c:	08009f2c 	.word	0x08009f2c
 8001450:	08009f4c 	.word	0x08009f4c

08001454 <aci_gatt_proc_complete_event>:
//*****************************************************
//! \brief  GATT procedure complete event.
//!
//*****************************************************
void aci_gatt_proc_complete_event( uint16_t Connection_Handle, uint8_t Error_Code )
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	717b      	strb	r3, [r7, #5]
    if( BLUENRG2__stConnCTX.RemoteTx.bValid )
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <aci_gatt_proc_complete_event+0x50>)
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d014      	beq.n	8001496 <aci_gatt_proc_complete_event+0x42>
    {
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <aci_gatt_proc_complete_event+0x50>)
 800146e:	7e9b      	ldrb	r3, [r3, #26]
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <aci_gatt_proc_complete_event+0x2e>
        {
            BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_RX;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <aci_gatt_proc_complete_event+0x54>)
 800147c:	2205      	movs	r2, #5
 800147e:	701a      	strb	r2, [r3, #0]
            {
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
            }
        }
    }
}
 8001480:	e009      	b.n	8001496 <aci_gatt_proc_complete_event+0x42>
            if( !BLUENRG2__bRemoteTxNotifyEnabled )
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <aci_gatt_proc_complete_event+0x58>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <aci_gatt_proc_complete_event+0x42>
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <aci_gatt_proc_complete_event+0x54>)
 8001492:	2206      	movs	r2, #6
 8001494:	701a      	strb	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200000a8 	.word	0x200000a8
 80014a8:	200000a7 	.word	0x200000a7
 80014ac:	200000df 	.word	0x200000df

080014b0 <aci_gatt_tx_pool_available_event>:
//*****************************************************
//! \brief  GATT TX pool available event
//!
//*****************************************************
void aci_gatt_tx_pool_available_event( uint16_t Connection_Handle, uint16_t Available_Buffers )
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	4613      	mov	r3, r2
 80014be:	80bb      	strh	r3, [r7, #4]
    BLUENRG2__bTXbufferFull = false;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <aci_gatt_tx_pool_available_event+0x24>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200000de 	.word	0x200000de

080014d8 <aci_att_exchange_mtu_resp_event>:
//*****************************************************
//! \brief  GATT ATT exchange MTU response event.
//!
//*****************************************************
void aci_att_exchange_mtu_resp_event( uint16_t Connection_Handle, uint16_t Server_RX_MTU )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	4613      	mov	r3, r2
 80014e6:	80bb      	strh	r3, [r7, #4]
    PRINT_DBG( "aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU );
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4812      	ldr	r0, [pc, #72]	; (8001538 <aci_att_exchange_mtu_resp_event+0x60>)
 80014ee:	f007 fb73 	bl	8008bd8 <iprintf>

    if( Server_RX_MTU <= CLIENT_MAX_MTU_SIZE )
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	2b9e      	cmp	r3, #158	; 0x9e
 80014f6:	d805      	bhi.n	8001504 <aci_att_exchange_mtu_resp_event+0x2c>
    {
        BLUENRG2__u16WriteCharLen = Server_RX_MTU - 3;
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	3b03      	subs	r3, #3
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <aci_att_exchange_mtu_resp_event+0x64>)
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	e002      	b.n	800150a <aci_att_exchange_mtu_resp_event+0x32>
    }
    else
    {
        BLUENRG2__u16WriteCharLen = CLIENT_MAX_MTU_SIZE - 3;
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <aci_att_exchange_mtu_resp_event+0x64>)
 8001506:	229b      	movs	r2, #155	; 0x9b
 8001508:	801a      	strh	r2, [r3, #0]
    }

    if( ( BLUENRG2__u8MTUExchangedWait == 0 ) || ( ( BLUENRG2__u8MTUExchangedWait == 1 ) ) )
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <aci_att_exchange_mtu_resp_event+0x68>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <aci_att_exchange_mtu_resp_event+0x42>
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <aci_att_exchange_mtu_resp_event+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d109      	bne.n	800152e <aci_att_exchange_mtu_resp_event+0x56>
        /**
         * The aci_att_exchange_mtu_resp_event is received also if the
         * aci_gatt_exchange_config is called by the other peer.
         * Here we manage this case.
         */
        if( BLUENRG2__u8MTUExchangedWait == 0 )
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <aci_att_exchange_mtu_resp_event+0x68>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <aci_att_exchange_mtu_resp_event+0x50>
        {
            BLUENRG2__u8MTUExchangedWait = 2;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <aci_att_exchange_mtu_resp_event+0x68>)
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]
        }
        BLUENRG2__u8MTUExchanged = 1;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <aci_att_exchange_mtu_resp_event+0x6c>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
    }
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	08009f6c 	.word	0x08009f6c
 800153c:	20000002 	.word	0x20000002
 8001540:	20000121 	.word	0x20000121
 8001544:	20000120 	.word	0x20000120

08001548 <GATT_DB_u8AddService>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t GATT_DB_u8AddService( void )
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b09d      	sub	sp, #116	; 0x74
 800154c:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800154e:	2306      	movs	r3, #6
 8001550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  const uint8_t cu8ServiceUUID[GATT_DB_CUSTOM_UUID_BYTE_NUM] = GATT_DB_CONTROL_UUID;
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <GATT_DB_u8AddService+0x110>)
 8001556:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800155a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDTx[GATT_DB_CUSTOM_UUID_BYTE_NUM]  = GATT_DB_LOCAL_TX_UUID;
 8001560:	4b3e      	ldr	r3, [pc, #248]	; (800165c <GATT_DB_u8AddService+0x114>)
 8001562:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDRx[GATT_DB_CUSTOM_UUID_BYTE_NUM]  = GATT_DB_LOCAL_RX_UUID;
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <GATT_DB_u8AddService+0x118>)
 800156e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  Service_UUID_t  unTempServiceUUID;
  Char_UUID_t unTempCharUUID;

  BLUENRG_memcpy(&unTempServiceUUID.Service_UUID_128, cu8ServiceUUID, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 8001578:	f107 0414 	add.w	r4, r7, #20
 800157c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &unTempServiceUUID, PRIMARY_SERVICE, max_attribute_records, &u16LocalServHandle);
 8001586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800158a:	f107 0114 	add.w	r1, r7, #20
 800158e:	4a35      	ldr	r2, [pc, #212]	; (8001664 <GATT_DB_u8AddService+0x11c>)
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	2002      	movs	r0, #2
 8001596:	f004 fd8e 	bl	80060b6 <aci_gatt_add_service>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d14a      	bne.n	800163e <GATT_DB_u8AddService+0xf6>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDTx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80015a8:	1d3c      	adds	r4, r7, #4
 80015aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY|CHAR_PROP_READ, ATTR_PERMISSION_NONE, 0,
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <GATT_DB_u8AddService+0x11c>)
 80015b6:	8818      	ldrh	r0, [r3, #0]
 80015b8:	1d3a      	adds	r2, r7, #4
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <GATT_DB_u8AddService+0x120>)
 80015bc:	9305      	str	r3, [sp, #20]
 80015be:	2301      	movs	r3, #1
 80015c0:	9304      	str	r3, [sp, #16]
 80015c2:	2310      	movs	r3, #16
 80015c4:	9303      	str	r3, [sp, #12]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	2312      	movs	r3, #18
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	233f      	movs	r3, #63	; 0x3f
 80015d4:	2102      	movs	r1, #2
 80015d6:	f004 fe44 	bl	8006262 <aci_gatt_add_char>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalTxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12c      	bne.n	8001642 <GATT_DB_u8AddService+0xfa>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDRx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80015e8:	1d3c      	adds	r4, r7, #4
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <GATT_DB_u8AddService+0x11c>)
 80015f6:	8818      	ldrh	r0, [r3, #0]
 80015f8:	1d3a      	adds	r2, r7, #4
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <GATT_DB_u8AddService+0x124>)
 80015fc:	9305      	str	r3, [sp, #20]
 80015fe:	2301      	movs	r3, #1
 8001600:	9304      	str	r3, [sp, #16]
 8001602:	2310      	movs	r3, #16
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	2301      	movs	r3, #1
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2300      	movs	r3, #0
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	230c      	movs	r3, #12
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	233f      	movs	r3, #63	; 0x3f
 8001614:	2102      	movs	r1, #2
 8001616:	f004 fe24 	bl	8006262 <aci_gatt_add_char>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalRxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001620:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10e      	bne.n	8001646 <GATT_DB_u8AddService+0xfe>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", u16LocalTxCharHandle, u16LocalRxCharHandle);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <GATT_DB_u8AddService+0x120>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <GATT_DB_u8AddService+0x124>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <GATT_DB_u8AddService+0x128>)
 8001636:	f007 facf 	bl	8008bd8 <iprintf>
  return BLE_STATUS_SUCCESS;
 800163a:	2300      	movs	r3, #0
 800163c:	e008      	b.n	8001650 <GATT_DB_u8AddService+0x108>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001646:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <GATT_DB_u8AddService+0x12c>)
 800164a:	f007 fb2b 	bl	8008ca4 <puts>
  return BLE_STATUS_ERROR ;
 800164e:	2347      	movs	r3, #71	; 0x47
}
 8001650:	4618      	mov	r0, r3
 8001652:	375c      	adds	r7, #92	; 0x5c
 8001654:	46bd      	mov	sp, r7
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	0800a008 	.word	0x0800a008
 800165c:	0800a018 	.word	0x0800a018
 8001660:	0800a028 	.word	0x0800a028
 8001664:	2000012e 	.word	0x2000012e
 8001668:	20000130 	.word	0x20000130
 800166c:	20000132 	.word	0x20000132
 8001670:	08009fa0 	.word	0x08009fa0
 8001674:	08009fe4 	.word	0x08009fe4

08001678 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d163      	bne.n	8001754 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b3e      	cmp	r3, #62	; 0x3e
 8001698:	d11e      	bne.n	80016d8 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3302      	adds	r3, #2
 800169e:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	e014      	b.n	80016d0 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	492b      	ldr	r1, [pc, #172]	; (800175c <APP_UserEvtRx+0xe4>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d108      	bne.n	80016ca <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <APP_UserEvtRx+0xe4>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	3201      	adds	r2, #1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	d9e7      	bls.n	80016a6 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80016d6:	e03d      	b.n	8001754 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	d11e      	bne.n	800171e <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3302      	adds	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e014      	b.n	8001716 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <APP_UserEvtRx+0xe8>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d108      	bne.n	8001710 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <APP_UserEvtRx+0xe8>)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	3202      	adds	r2, #2
 800170c:	4610      	mov	r0, r2
 800170e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3301      	adds	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b2a      	cmp	r3, #42	; 0x2a
 800171a:	d9e7      	bls.n	80016ec <APP_UserEvtRx+0x74>
}
 800171c:	e01a      	b.n	8001754 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e014      	b.n	800174e <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <APP_UserEvtRx+0xec>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001732:	429a      	cmp	r2, r3
 8001734:	d108      	bne.n	8001748 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <APP_UserEvtRx+0xec>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4413      	add	r3, r2
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	3202      	adds	r2, #2
 8001744:	4610      	mov	r0, r2
 8001746:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d9e7      	bls.n	8001724 <APP_UserEvtRx+0xac>
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	0800a0fc 	.word	0x0800a0fc
 8001760:	0800a14c 	.word	0x0800a14c
 8001764:	0800a0c4 	.word	0x0800a0c4

08001768 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800176c:	2006      	movs	r0, #6
 800176e:	f001 f8b2 	bl	80028d6 <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800177a:	2006      	movs	r0, #6
 800177c:	f001 f8b9 	bl	80028f2 <HAL_NVIC_DisableIRQ>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HCI_TL_SPI_Init+0x94>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <HCI_TL_SPI_Init+0x94>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HCI_TL_SPI_Init+0x94>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80017a4:	2301      	movs	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f001 f912 	bl	80029e4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f001 f902 	bl	80029e4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80017e0:	2302      	movs	r3, #2
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f001 f8f3 	bl	80029e4 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2102      	movs	r1, #2
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f001 fba3 	bl	8002f50 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800180a:	f000 fcf7 	bl	80021fc <BSP_SPI1_Init>
 800180e:	4603      	mov	r3, r0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001820:	2101      	movs	r1, #1
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f001 fa87 	bl	8002d38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800182a:	2102      	movs	r1, #2
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f001 fa82 	bl	8002d38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f001 fa7c 	bl	8002d38 <HAL_GPIO_DeInit>
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}

08001846 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	2102      	movs	r1, #2
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f001 fb7d 	bl	8002f50 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 fb76 	bl	8002f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001864:	2005      	movs	r0, #5
 8001866:	f000 fef7 	bl	8002658 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f001 fb6c 	bl	8002f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001878:	2005      	movs	r0, #5
 800187a:	f000 feed 	bl	8002658 <HAL_Delay>
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}

08001884 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HCI_TL_SPI_Receive+0xe0>)
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a2:	6018      	str	r0, [r3, #0]
 80018a4:	3304      	adds	r3, #4
 80018a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80018a8:	f7ff ff65 	bl	8001776 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2102      	movs	r1, #2
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f001 fb4c 	bl	8002f50 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2205      	movs	r2, #5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fcca 	bl	800225c <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80018c8:	7b3b      	ldrb	r3, [r7, #12]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80018d8:	8bfb      	ldrh	r3, [r7, #30]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01e      	beq.n	800191c <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80018de:	8bfa      	ldrh	r2, [r7, #30]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d901      	bls.n	80018ea <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	777b      	strb	r3, [r7, #29]
 80018ee:	e010      	b.n	8001912 <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80018f0:	f107 0116 	add.w	r1, r7, #22
 80018f4:	f107 0317 	add.w	r3, r7, #23
 80018f8:	2201      	movs	r2, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fcae 	bl	800225c <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001900:	7f7b      	ldrb	r3, [r7, #29]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	7dba      	ldrb	r2, [r7, #22]
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800190c:	7f7b      	ldrb	r3, [r7, #29]
 800190e:	3301      	adds	r3, #1
 8001910:	777b      	strb	r3, [r7, #29]
 8001912:	7f7b      	ldrb	r3, [r7, #29]
 8001914:	b29b      	uxth	r3, r3
 8001916:	8bfa      	ldrh	r2, [r7, #30]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8e9      	bhi.n	80018f0 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800191c:	f000 fe90 	bl	8002640 <HAL_GetTick>
 8001920:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001922:	e007      	b.n	8001934 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001924:	2101      	movs	r1, #1
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f001 faf9 	bl	8002f20 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001934:	f000 fe84 	bl	8002640 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001942:	d3ef      	bcc.n	8001924 <HCI_TL_SPI_Receive+0xa0>
 8001944:	e000      	b.n	8001948 <HCI_TL_SPI_Receive+0xc4>
      break;
 8001946:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001948:	f7ff ff0e 	bl	8001768 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f001 fafc 	bl	8002f50 <HAL_GPIO_WritePin>

  return len;
 8001958:	7f7b      	ldrb	r3, [r7, #29]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	0800a038 	.word	0x0800a038

08001968 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001974:	4a41      	ldr	r2, [pc, #260]	; (8001a7c <HCI_TL_SPI_Send+0x114>)
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800197e:	6018      	str	r0, [r3, #0]
 8001980:	3304      	adds	r3, #4
 8001982:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001984:	f000 fe5c 	bl	8002640 <HAL_GetTick>
 8001988:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800198a:	f7ff fef4 	bl	8001776 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800198e:	f000 fe57 	bl	8002640 <HAL_GetTick>
 8001992:	61f8      	str	r0, [r7, #28]

    result = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2102      	movs	r1, #2
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f001 fad6 	bl	8002f50 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80019a4:	e00a      	b.n	80019bc <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80019a6:	f000 fe4b 	bl	8002640 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d903      	bls.n	80019bc <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80019b4:	f06f 0302 	mvn.w	r3, #2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80019ba:	e004      	b.n	80019c6 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80019bc:	f000 f862 	bl	8001a84 <IsDataAvailable>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0ef      	beq.n	80019a6 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f113 0f03 	cmn.w	r3, #3
 80019cc:	d106      	bne.n	80019dc <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d6:	f001 fabb 	bl	8002f50 <HAL_GPIO_WritePin>
      break;
 80019da:	e031      	b.n	8001a40 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80019dc:	f107 010c 	add.w	r1, r7, #12
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2205      	movs	r2, #5
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fc38 	bl	800225c <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80019fc:	8b7a      	ldrh	r2, [r7, #26]
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d306      	bcc.n	8001a12 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	461a      	mov	r2, r3
 8001a08:	491d      	ldr	r1, [pc, #116]	; (8001a80 <HCI_TL_SPI_Send+0x118>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fc26 	bl	800225c <BSP_SPI1_SendRecv>
 8001a10:	e002      	b.n	8001a18 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8001a12:	f06f 0301 	mvn.w	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f001 fa96 	bl	8002f50 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a24:	f000 fe0c 	bl	8002640 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d903      	bls.n	8001a3a <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 8001a32:	f06f 0302 	mvn.w	r3, #2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001a38:	e002      	b.n	8001a40 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dba6      	blt.n	800198e <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001a40:	f000 fdfe 	bl	8002640 <HAL_GetTick>
 8001a44:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a46:	e007      	b.n	8001a58 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001a48:	2101      	movs	r1, #1
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f001 fa67 	bl	8002f20 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a58:	f000 fdf2 	bl	8002640 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a66:	d3ef      	bcc.n	8001a48 <HCI_TL_SPI_Send+0xe0>
 8001a68:	e000      	b.n	8001a6c <HCI_TL_SPI_Send+0x104>
      break;
 8001a6a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001a6c:	f7ff fe7c 	bl	8001768 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0800a040 	.word	0x0800a040
 8001a80:	2000013c 	.word	0x2000013c

08001a84 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f001 fa47 	bl	8002f20 <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <hci_tl_lowlevel_init+0x54>)
 8001aac:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <hci_tl_lowlevel_init+0x58>)
 8001ab0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <hci_tl_lowlevel_init+0x5c>)
 8001ab4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <hci_tl_lowlevel_init+0x60>)
 8001ab8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <hci_tl_lowlevel_init+0x64>)
 8001abc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <hci_tl_lowlevel_init+0x68>)
 8001ac0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 fd0f 	bl	80084e8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001aca:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001ace:	4810      	ldr	r0, [pc, #64]	; (8001b10 <hci_tl_lowlevel_init+0x6c>)
 8001ad0:	f000 ff43 	bl	800295a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <hci_tl_lowlevel_init+0x70>)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <hci_tl_lowlevel_init+0x6c>)
 8001ada:	f000 ff24 	bl	8002926 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2006      	movs	r0, #6
 8001ae4:	f000 fedb 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ae8:	2006      	movs	r0, #6
 8001aea:	f000 fef4 	bl	80028d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08001785 	.word	0x08001785
 8001afc:	0800181d 	.word	0x0800181d
 8001b00:	08001969 	.word	0x08001969
 8001b04:	08001885 	.word	0x08001885
 8001b08:	08001847 	.word	0x08001847
 8001b0c:	0800229d 	.word	0x0800229d
 8001b10:	20000134 	.word	0x20000134
 8001b14:	08001b19 	.word	0x08001b19

08001b18 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001b1c:	e005      	b.n	8001b2a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f006 fe46 	bl	80087b0 <hci_notify_asynch_evt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001b2a:	f7ff ffab 	bl	8001a84 <IsDataAvailable>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f4      	bne.n	8001b1e <hci_tl_lowlevel_isr+0x6>
 8001b34:	e000      	b.n	8001b38 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001b36:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0

  HAL_Init();
 8001b3e:	f000 fd0f 	bl	8002560 <HAL_Init>
  SystemClock_Config();
 8001b42:	f000 f807 	bl	8001b54 <SystemClock_Config>
  MX_GPIO_Init();
 8001b46:	f000 f857 	bl	8001bf8 <MX_GPIO_Init>
  
  BLUENRG2_vInit();
 8001b4a:	f7fe fd63 	bl	8000614 <BLUENRG2_vInit>

  while (1)
  {
    BLUENRG2_vProcess();
 8001b4e:	f7fe fd83 	bl	8000658 <BLUENRG2_vProcess>
 8001b52:	e7fc      	b.n	8001b4e <main+0x14>

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b096      	sub	sp, #88	; 0x58
 8001b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2244      	movs	r2, #68	; 0x44
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f007 f98e 	bl	8008e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b7a:	f001 fa0f 	bl	8002f9c <HAL_PWREx_ControlVoltageScaling>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b84:	f000 f8ae 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b92:	2310      	movs	r3, #16
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fa46 	bl	8003048 <HAL_RCC_OscConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001bc2:	f000 f88f 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2103      	movs	r1, #3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fe1a 	bl	8003818 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bea:	f000 f87b 	bl	8001ce4 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3758      	adds	r7, #88	; 0x58
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f001 f96a 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f000 fea6 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001c98:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f000 fe96 	bl	80029e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2006      	movs	r0, #6
 8001cbe:	f000 fdee 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f000 fe07 	bl	80028d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2028      	movs	r0, #40	; 0x28
 8001cce:	f000 fde6 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd2:	2028      	movs	r0, #40	; 0x28
 8001cd4:	f000 fdff 	bl	80028d6 <HAL_NVIC_EnableIRQ>

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cec:	e7fe      	b.n	8001cec <Error_Handler+0x8>
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 fc48 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <EXTI0_IRQHandler+0x10>)
 8001d92:	f000 fdf7 	bl	8002984 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000134 	.word	0x20000134

08001da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <EXTI15_10_IRQHandler+0x10>)
 8001da6:	f000 fded 	bl	8002984 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000010 	.word	0x20000010

08001db4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <BSP_LED_Init+0x20>)
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0800a068 	.word	0x0800a068

08001dd8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <BSP_LED_On+0x28>)
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	2120      	movs	r1, #32
 8001dec:	2201      	movs	r2, #1
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 f8ae 	bl	8002f50 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008

08001e04 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <BSP_LED_Off+0x28>)
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	2120      	movs	r1, #32
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 f898 	bl	8002f50 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008

08001e30 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <LED_USER_GPIO_Init+0x78>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2120      	movs	r1, #32
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f001 f867 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001e82:	2320      	movs	r3, #32
 8001e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f000 fda2 	bl	80029e4 <HAL_GPIO_Init>

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <BSP_PB_Init+0x94>)
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d132      	bne.n	8001f36 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <BSP_PB_Init+0x98>)
 8001ed6:	441a      	add	r2, r3
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <BSP_PB_Init+0x9c>)
 8001edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fd39 	bl	800295a <HAL_EXTI_GetHandle>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001eee:	f06f 0303 	mvn.w	r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e01f      	b.n	8001f36 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <BSP_PB_Init+0x98>)
 8001efc:	1898      	adds	r0, r3, r2
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <BSP_PB_Init+0xa0>)
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	461a      	mov	r2, r3
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f000 fd0c 	bl	8002926 <HAL_EXTI_RegisterCallback>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f14:	f06f 0303 	mvn.w	r3, #3
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e00c      	b.n	8001f36 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f1c:	2028      	movs	r0, #40	; 0x28
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <BSP_PB_Init+0xa4>)
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f000 fcb8 	bl	800289e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f2e:	2328      	movs	r3, #40	; 0x28
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fcd0 	bl	80028d6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800a06c 	.word	0x0800a06c
 8001f44:	20000010 	.word	0x20000010
 8001f48:	0800a070 	.word	0x0800a070
 8001f4c:	0800a074 	.word	0x0800a074
 8001f50:	0800a078 	.word	0x0800a078

08001f54 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <BSP_PB_GetState+0x34>)
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 ffd7 	bl	8002f20 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff fff0 	bl	8001f8c <BSP_PB_Callback>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <BUTTON_USER_GPIO_Init+0x6c>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ffc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	4619      	mov	r1, r3
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <BUTTON_USER_GPIO_Init+0x70>)
 800200e:	f000 fce9 	bl	80029e4 <HAL_GPIO_Init>

}
 8002012:	bf00      	nop
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	48000800 	.word	0x48000800

08002024 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d903      	bls.n	8002040 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002038:	f06f 0301 	mvn.w	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e025      	b.n	800208c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	4914      	ldr	r1, [pc, #80]	; (8002098 <BSP_COM_Init+0x74>)
 8002046:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <BSP_COM_Init+0x78>)
 800204c:	4613      	mov	r3, r2
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4403      	add	r3, r0
 8002056:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	4613      	mov	r3, r2
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <BSP_COM_Init+0x78>)
 8002064:	4413      	add	r3, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f86a 	bl	8002140 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	4613      	mov	r3, r2
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <BSP_COM_Init+0x78>)
 8002078:	4413      	add	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f810 	bl	80020a0 <MX_USART2_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002086:	f06f 0303 	mvn.w	r3, #3
 800208a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000018 	.word	0x20000018
 800209c:	2000023c 	.word	0x2000023c

080020a0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a15      	ldr	r2, [pc, #84]	; (8002104 <MX_USART2_UART_Init+0x64>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f002 fe88 	bl	8004e00 <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40004400 	.word	0x40004400

08002108 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <__io_putchar+0x30>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4613      	mov	r3, r2
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <__io_putchar+0x34>)
 8002120:	1898      	adds	r0, r3, r2
 8002122:	1d39      	adds	r1, r7, #4
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	2201      	movs	r2, #1
 800212a:	f002 fec1 	bl	8004eb0 <HAL_UART_Transmit>
  return ch;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200002c0 	.word	0x200002c0
 800213c:	2000023c 	.word	0x2000023c

08002140 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ac      	sub	sp, #176	; 0xb0
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2288      	movs	r2, #136	; 0x88
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f006 fe97 	bl	8008e84 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002156:	2302      	movs	r3, #2
 8002158:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800215a:	2300      	movs	r3, #0
 800215c:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fd5e 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <USART2_MspInit+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <USART2_MspInit+0xb8>)
 800216e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <USART2_MspInit+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <USART2_MspInit+0xb8>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <USART2_MspInit+0xb8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <USART2_MspInit+0xb8>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002198:	2304      	movs	r3, #4
 800219a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80021b0:	2307      	movs	r3, #7
 80021b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80021b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f000 fc10 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80021c4:	2308      	movs	r3, #8
 80021c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80021dc:	2307      	movs	r3, #7
 80021de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80021e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f000 fbfa 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80021f0:	bf00      	nop
 80021f2:	37b0      	adds	r7, #176	; 0xb0
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000

080021fc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <BSP_SPI1_Init+0x54>)
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <BSP_SPI1_Init+0x58>)
 800220a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <BSP_SPI1_Init+0x5c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	4911      	ldr	r1, [pc, #68]	; (8002258 <BSP_SPI1_Init+0x5c>)
 8002214:	600a      	str	r2, [r1, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d114      	bne.n	8002244 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <BSP_SPI1_Init+0x54>)
 800221c:	f002 fc7e 	bl	8004b1c <HAL_SPI_GetState>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <BSP_SPI1_Init+0x54>)
 8002228:	f000 f882 	bl	8002330 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <BSP_SPI1_Init+0x54>)
 8002234:	f000 f83a 	bl	80022ac <MX_SPI1_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800223e:	f06f 0307 	mvn.w	r3, #7
 8002242:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200002c4 	.word	0x200002c4
 8002254:	40013000 	.word	0x40013000
 8002258:	20000328 	.word	0x20000328

0800225c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002274:	9200      	str	r2, [sp, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <BSP_SPI1_SendRecv+0x3c>)
 800227c:	f002 fa3b 	bl	80046f6 <HAL_SPI_TransmitReceive>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002286:	f06f 0305 	mvn.w	r3, #5
 800228a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800228c:	697b      	ldr	r3, [r7, #20]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200002c4 	.word	0x200002c4

0800229c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80022a0:	f000 f9ce 	bl	8002640 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <MX_SPI1_Init+0x80>)
 80022bc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022d2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2228      	movs	r2, #40	; 0x28
 80022ec:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2207      	movs	r2, #7
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f002 f942 	bl	800459c <HAL_SPI_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40013000 	.word	0x40013000

08002330 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <SPI1_MspInit+0xbc>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <SPI1_MspInit+0xbc>)
 800233e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002342:	6613      	str	r3, [r2, #96]	; 0x60
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <SPI1_MspInit+0xbc>)
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <SPI1_MspInit+0xbc>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <SPI1_MspInit+0xbc>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <SPI1_MspInit+0xbc>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b20      	ldr	r3, [pc, #128]	; (80023ec <SPI1_MspInit+0xbc>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <SPI1_MspInit+0xbc>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <SPI1_MspInit+0xbc>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002390:	2305      	movs	r3, #5
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239e:	f000 fb21 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f000 fb10 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80023c4:	2308      	movs	r3, #8
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80023d4:	2305      	movs	r3, #5
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4804      	ldr	r0, [pc, #16]	; (80023f0 <SPI1_MspInit+0xc0>)
 80023e0:	f000 fb00 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	48000400 	.word	0x48000400

080023f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e00a      	b.n	800241c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002406:	f3af 8000 	nop.w
 800240a:	4601      	mov	r1, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf0      	blt.n	8002406 <_read+0x12>
	}

return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e009      	b.n	8002454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fe5d 	bl	8002108 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf1      	blt.n	8002440 <_write+0x12>
	}
	return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_close>:

int _close(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	return -1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248e:	605a      	str	r2, [r3, #4]
	return 0;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_isatty>:

int _isatty(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return 1;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f006 fd0e 	bl	8008f20 <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20018000 	.word	0x20018000
 8002530:	00000400 	.word	0x00000400
 8002534:	2000032c 	.word	0x2000032c
 8002538:	20000a28 	.word	0x20000a28

0800253c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_Init+0x3c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_Init+0x3c>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f000 f986 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800257c:	2000      	movs	r0, #0
 800257e:	f000 f80f 	bl	80025a0 <HAL_InitTick>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	e001      	b.n	8002592 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800258e:	f7ff fbaf 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002592:	79fb      	ldrb	r3, [r7, #7]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40022000 	.word	0x40022000

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_InitTick+0x6c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_InitTick+0x70>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_InitTick+0x6c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f99f 	bl	800290e <HAL_SYSTICK_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d809      	bhi.n	80025f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025dc:	2200      	movs	r2, #0
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f000 f95b 	bl	800289e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_InitTick+0x74>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e007      	b.n	8002600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e004      	b.n	8002600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e001      	b.n	8002600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000024 	.word	0x20000024
 8002610:	2000001c 	.word	0x2000001c
 8002614:	20000020 	.word	0x20000020

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000024 	.word	0x20000024
 800263c:	20000330 	.word	0x20000330

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000330 	.word	0x20000330

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffee 	bl	8002640 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffde 	bl	8002640 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000024 	.word	0x20000024

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db12      	blt.n	8002778 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	490a      	ldr	r1, [pc, #40]	; (8002784 <__NVIC_DisableIRQ+0x44>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	3320      	adds	r3, #32
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800276c:	f3bf 8f4f 	dsb	sy
}
 8002770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002772:	f3bf 8f6f 	isb	sy
}
 8002776:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff05 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff1a 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff0d 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff1d 	bl	8002740 <__NVIC_DisableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff94 	bl	8002844 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	460b      	mov	r3, r1
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d103      	bne.n	8002946 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
      break;
 8002944:	e002      	b.n	800294c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
      break;
 800294a:	bf00      	nop
  }

  return status;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e003      	b.n	8002976 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2201      	movs	r2, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_EXTI_IRQHandler+0x5c>)
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4798      	blx	r3
    }
  }
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40010414 	.word	0x40010414

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	e17f      	b.n	8002cf4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8171 	beq.w	8002cee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d005      	beq.n	8002a24 <HAL_GPIO_Init+0x40>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d130      	bne.n	8002a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d118      	bne.n	8002ac4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	08db      	lsrs	r3, r3, #3
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	6939      	ldr	r1, [r7, #16]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80ac 	beq.w	8002cee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_GPIO_Init+0x330>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	4a5e      	ldr	r2, [pc, #376]	; (8002d14 <HAL_GPIO_Init+0x330>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_GPIO_Init+0x330>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_GPIO_Init+0x334>)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x242>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	; (8002d1c <HAL_GPIO_Init+0x338>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x23e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4e      	ldr	r2, [pc, #312]	; (8002d20 <HAL_GPIO_Init+0x33c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x23a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_GPIO_Init+0x340>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x236>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_GPIO_Init+0x344>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x232>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4b      	ldr	r2, [pc, #300]	; (8002d2c <HAL_GPIO_Init+0x348>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x22e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4a      	ldr	r2, [pc, #296]	; (8002d30 <HAL_GPIO_Init+0x34c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x22a>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e00c      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e00a      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x244>
 8002c26:	2300      	movs	r3, #0
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c38:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_GPIO_Init+0x334>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c6a:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f47f ae78 	bne.w	80029f4 <HAL_GPIO_Init+0x10>
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	48000800 	.word	0x48000800
 8002d24:	48000c00 	.word	0x48000c00
 8002d28:	48001000 	.word	0x48001000
 8002d2c:	48001400 	.word	0x48001400
 8002d30:	48001800 	.word	0x48001800
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d46:	e0cd      	b.n	8002ee4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80c0 	beq.w	8002ede <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d5e:	4a68      	ldr	r2, [pc, #416]	; (8002f00 <HAL_GPIO_DeInit+0x1c8>)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d86:	d025      	beq.n	8002dd4 <HAL_GPIO_DeInit+0x9c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_GPIO_DeInit+0x1cc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01f      	beq.n	8002dd0 <HAL_GPIO_DeInit+0x98>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_GPIO_DeInit+0x1d0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d019      	beq.n	8002dcc <HAL_GPIO_DeInit+0x94>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_GPIO_DeInit+0x1d4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_GPIO_DeInit+0x90>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a5b      	ldr	r2, [pc, #364]	; (8002f10 <HAL_GPIO_DeInit+0x1d8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_GPIO_DeInit+0x8c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a5a      	ldr	r2, [pc, #360]	; (8002f14 <HAL_GPIO_DeInit+0x1dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_DeInit+0x88>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a59      	ldr	r2, [pc, #356]	; (8002f18 <HAL_GPIO_DeInit+0x1e0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_GPIO_DeInit+0x84>
 8002db8:	2306      	movs	r3, #6
 8002dba:	e00c      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dbc:	2307      	movs	r3, #7
 8002dbe:	e00a      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dc0:	2305      	movs	r3, #5
 8002dc2:	e008      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e006      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e004      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e002      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_GPIO_DeInit+0x9e>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	f002 0203 	and.w	r2, r2, #3
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	4093      	lsls	r3, r2
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d132      	bne.n	8002e4c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	494b      	ldr	r1, [pc, #300]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4947      	ldr	r1, [pc, #284]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4944      	ldr	r1, [pc, #272]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e10:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	4940      	ldr	r1, [pc, #256]	; (8002f1c <HAL_GPIO_DeInit+0x1e4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_GPIO_DeInit+0x1c8>)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	4830      	ldr	r0, [pc, #192]	; (8002f00 <HAL_GPIO_DeInit+0x1c8>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	400a      	ands	r2, r1
 8002e46:	3302      	adds	r3, #2
 8002e48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2103      	movs	r1, #3
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	08d2      	lsrs	r2, r2, #3
 8002e80:	4019      	ands	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2103      	movs	r1, #3
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	2101      	movs	r1, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af2b 	bne.w	8002d48 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400
 8002f18:	48001800 	.word	0x48001800
 8002f1c:	40010400 	.word	0x40010400

08002f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	887b      	ldrh	r3, [r7, #2]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e001      	b.n	8002f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40007000 	.word	0x40007000

08002f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d130      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb8:	d038      	beq.n	800302c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2232      	movs	r2, #50	; 0x32
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0c9b      	lsrs	r3, r3, #18
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe0:	e002      	b.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d102      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f2      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d110      	bne.n	800302c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e00f      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d007      	beq.n	800302c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000
 8003040:	2000001c 	.word	0x2000001c
 8003044:	431bde83 	.word	0x431bde83

08003048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e3d8      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305a:	4b97      	ldr	r3, [pc, #604]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003064:	4b94      	ldr	r3, [pc, #592]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80e4 	beq.w	8003244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_RCC_OscConfig+0x4a>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	f040 808b 	bne.w	80031a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8087 	bne.w	80031a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003092:	4b89      	ldr	r3, [pc, #548]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e3b0      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCC_OscConfig+0x7c>
 80030ba:	4b7f      	ldr	r3, [pc, #508]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_OscConfig+0x88>
 80030c4:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d223      	bcs.n	800311c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fd43 	bl	8003b64 <RCC_SetFlashLatencyFromMSIRange>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e391      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e8:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a72      	ldr	r2, [pc, #456]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b70      	ldr	r3, [pc, #448]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	496d      	ldr	r1, [pc, #436]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	4968      	ldr	r1, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
 800311a:	e025      	b.n	8003168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a65      	ldr	r2, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4960      	ldr	r1, [pc, #384]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	495b      	ldr	r1, [pc, #364]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fd03 	bl	8003b64 <RCC_SetFlashLatencyFromMSIRange>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e351      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003168:	f000 fc38 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4950      	ldr	r1, [pc, #320]	; (80032bc <HAL_RCC_OscConfig+0x274>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_RCC_OscConfig+0x278>)
 8003186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003188:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_RCC_OscConfig+0x27c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fa07 	bl	80025a0 <HAL_InitTick>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d052      	beq.n	8003242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	e335      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d032      	beq.n	800320e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a42      	ldr	r2, [pc, #264]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b4:	f7ff fa44 	bl	8002640 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031bc:	f7ff fa40 	bl	8002640 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e31e      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ce:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4931      	ldr	r1, [pc, #196]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f8:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	492c      	ldr	r1, [pc, #176]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e01a      	b.n	8003244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800321a:	f7ff fa11 	bl	8002640 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003222:	f7ff fa0d 	bl	8002640 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e2eb      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x1da>
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d074      	beq.n	800333a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x21a>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d10e      	bne.n	800327a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d10b      	bne.n	800327a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d064      	beq.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d160      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e2c8      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x24a>
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x298>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329a:	d115      	bne.n	80032c8 <HAL_RCC_OscConfig+0x280>
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a02      	ldr	r2, [pc, #8]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x298>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	0800a07c 	.word	0x0800a07c
 80032c0:	2000001c 	.word	0x2000001c
 80032c4:	20000020 	.word	0x20000020
 80032c8:	4ba0      	ldr	r3, [pc, #640]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a9f      	ldr	r2, [pc, #636]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b9d      	ldr	r3, [pc, #628]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a9c      	ldr	r2, [pc, #624]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7ff f9aa 	bl	8002640 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff f9a6 	bl	8002640 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e284      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003302:	4b92      	ldr	r3, [pc, #584]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2a8>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff f996 	bl	8002640 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f992 	bl	8002640 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e270      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x2d0>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d060      	beq.n	8003408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d005      	beq.n	8003358 <HAL_RCC_OscConfig+0x310>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d119      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d116      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x328>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e24d      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4973      	ldr	r1, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	e040      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d023      	beq.n	80033d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338e:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6e      	ldr	r2, [pc, #440]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7ff f951 	bl	8002640 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a2:	f7ff f94d 	bl	8002640 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e22b      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b62      	ldr	r3, [pc, #392]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	495f      	ldr	r1, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e018      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7ff f92d 	bl	8002640 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7ff f929 	bl	8002640 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e207      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03c      	beq.n	800348e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01c      	beq.n	8003456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	4a4a      	ldr	r2, [pc, #296]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7ff f908 	bl	8002640 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7ff f904 	bl	8002640 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1e2      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <HAL_RCC_OscConfig+0x3ec>
 8003454:	e01b      	b.n	800348e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345c:	4a3b      	ldr	r2, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7ff f8eb 	bl	8002640 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7ff f8e7 	bl	8002640 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1c5      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80a6 	beq.w	80035e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x504>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCC_OscConfig+0x508>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d118      	bne.n	8003506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <HAL_RCC_OscConfig+0x508>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x508>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e0:	f7ff f8ae 	bl	8002640 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7ff f8aa 	bl	8002640 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e188      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x508>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x4d8>
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351e:	e029      	b.n	8003574 <HAL_RCC_OscConfig+0x52c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d115      	bne.n	8003554 <HAL_RCC_OscConfig+0x50c>
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <HAL_RCC_OscConfig+0x504>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_RCC_OscConfig+0x504>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x52c>
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	4b91      	ldr	r3, [pc, #580]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	4a90      	ldr	r2, [pc, #576]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003564:	4b8d      	ldr	r3, [pc, #564]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	4a8c      	ldr	r2, [pc, #560]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d016      	beq.n	80035aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7ff f860 	bl	8002640 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7ff f85c 	bl	8002640 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e138      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359a:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ed      	beq.n	8003584 <HAL_RCC_OscConfig+0x53c>
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7ff f849 	bl	8002640 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7ff f845 	bl	8002640 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e121      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c8:	4b74      	ldr	r3, [pc, #464]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ed      	bne.n	80035b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 810c 	beq.w	800380a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80d4 	bne.w	80037a4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035fc:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d130      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	3b01      	subs	r3, #1
 800361c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d127      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11f      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363c:	2a07      	cmp	r2, #7
 800363e:	bf14      	ite	ne
 8003640:	2201      	movne	r2, #1
 8003642:	2200      	moveq	r2, #0
 8003644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	4293      	cmp	r3, r2
 8003648:	d113      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d109      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d06e      	beq.n	8003750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d069      	beq.n	800374c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003678:	4b48      	ldr	r3, [pc, #288]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0bb      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a40      	ldr	r2, [pc, #256]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800369a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a0:	f7fe ffce 	bl	8002640 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe ffca 	bl	8002640 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0a8      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCC_OscConfig+0x754>)
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x758>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e0:	0212      	lsls	r2, r2, #8
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0552      	lsls	r2, r2, #21
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0652      	lsls	r2, r2, #25
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003700:	0912      	lsrs	r2, r2, #4
 8003702:	0452      	lsls	r2, r2, #17
 8003704:	430a      	orrs	r2, r1
 8003706:	4925      	ldr	r1, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a1f      	ldr	r2, [pc, #124]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003724:	f7fe ff8c 	bl	8002640 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe ff88 	bl	8002640 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e066      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374a:	e05e      	b.n	800380a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e05d      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d156      	bne.n	800380a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0e      	ldr	r2, [pc, #56]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a0b      	ldr	r2, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x754>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fe ff64 	bl	8002640 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe ff60 	bl	8002640 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e03e      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_OscConfig+0x754>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x734>
 800379a:	e036      	b.n	800380a <HAL_RCC_OscConfig+0x7c2>
 800379c:	40021000 	.word	0x40021000
 80037a0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d02d      	beq.n	8003806 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037c8:	f023 0303 	bic.w	r3, r3, #3
 80037cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fe ff2f 	bl	8002640 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe ff2b 	bl	8002640 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e009      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_OscConfig+0x7cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x79e>
 8003804:	e001      	b.n	800380a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0c8      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4961      	ldr	r1, [pc, #388]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b0      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d04c      	beq.n	8003902 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003870:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e09e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d107      	bne.n	8003898 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d115      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e092      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e086      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e07e      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	493f      	ldr	r1, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d2:	f7fe feb5 	bl	8002640 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038da:	f7fe feb1 	bl	8002640 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e066      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 020c 	and.w	r2, r3, #12
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	429a      	cmp	r2, r3
 8003900:	d1eb      	bne.n	80038da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	492c      	ldr	r1, [pc, #176]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d210      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4924      	ldr	r1, [pc, #144]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e036      	b.n	80039be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4918      	ldr	r1, [pc, #96]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4910      	ldr	r1, [pc, #64]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398e:	f000 f825 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490c      	ldr	r1, [pc, #48]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fdf4 	bl	80025a0 <HAL_InitTick>
 80039b8:	4603      	mov	r3, r0
 80039ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	0800a07c 	.word	0x0800a07c
 80039d4:	2000001c 	.word	0x2000001c
 80039d8:	20000020 	.word	0x20000020

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x34>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d11e      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a38:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e004      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d134      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xac>
 8003a80:	e005      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a84:	617b      	str	r3, [r7, #20]
      break;
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8a:	617b      	str	r3, [r7, #20]
      break;
 8003a8c:	e002      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	fb03 f202 	mul.w	r2, r3, r2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0e5b      	lsrs	r3, r3, #25
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	0800a094 	.word	0x0800a094
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000001c 	.word	0x2000001c

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	0800a08c 	.word	0x0800a08c

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b3c:	f7ff ffda 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0adb      	lsrs	r3, r3, #11
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	0800a08c 	.word	0x0800a08c

08003b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b7c:	f7ff fa00 	bl	8002f80 <HAL_PWREx_GetVoltageRange>
 8003b80:	6178      	str	r0, [r7, #20]
 8003b82:	e014      	b.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b9c:	f7ff f9f0 	bl	8002f80 <HAL_PWREx_GetVoltageRange>
 8003ba0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d10b      	bne.n	8003bce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d919      	bls.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc0:	d902      	bls.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e013      	b.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc8:	2301      	movs	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e010      	b.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d902      	bls.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e00a      	b.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d102      	bne.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be0:	2302      	movs	r3, #2
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e004      	b.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d101      	bne.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bec:	2301      	movs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 0207 	bic.w	r2, r3, #7
 8003bf8:	4909      	ldr	r1, [pc, #36]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40022000 	.word	0x40022000

08003c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d041      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c48:	d02a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c4e:	d824      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c5a:	d81e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c64:	d010      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c66:	e018      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c68:	4b86      	ldr	r3, [pc, #536]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a85      	ldr	r2, [pc, #532]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c74:	e015      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fabb 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c86:	e00c      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3320      	adds	r3, #32
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fba6 	bl	80043e0 <RCCEx_PLLSAI2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca8:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb6:	4973      	ldr	r1, [pc, #460]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d041      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cd8:	d02a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cde:	d824      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cea:	d81e      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf4:	d010      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cf6:	e018      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cf8:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a61      	ldr	r2, [pc, #388]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fa73 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d16:	e00c      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fb5e 	bl	80043e0 <RCCEx_PLLSAI2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d28:	e003      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d46:	494f      	ldr	r1, [pc, #316]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a0 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
 8003d88:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fc4c 	bl	8002640 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003daa:	e009      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fe fc48 	bl	8002640 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d902      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003dbe:	e005      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d15c      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d019      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fc07 	bl	8002640 <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e34:	e00b      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fe fc03 	bl	8002640 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d902      	bls.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ec      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	4904      	ldr	r1, [pc, #16]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e7a:	e009      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
 8003e80:	e006      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e90:	7c7b      	ldrb	r3, [r7, #17]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d105      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e96:	4b9e      	ldr	r3, [pc, #632]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	4a9d      	ldr	r2, [pc, #628]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eae:	4b98      	ldr	r3, [pc, #608]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f023 0203 	bic.w	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	4994      	ldr	r1, [pc, #592]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed0:	4b8f      	ldr	r3, [pc, #572]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 020c 	bic.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	498c      	ldr	r1, [pc, #560]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef2:	4b87      	ldr	r3, [pc, #540]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4983      	ldr	r1, [pc, #524]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f14:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	497b      	ldr	r1, [pc, #492]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f44:	4972      	ldr	r1, [pc, #456]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f58:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	496a      	ldr	r1, [pc, #424]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	4961      	ldr	r1, [pc, #388]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f9c:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	4959      	ldr	r1, [pc, #356]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbe:	4b54      	ldr	r3, [pc, #336]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	4950      	ldr	r1, [pc, #320]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	4948      	ldr	r1, [pc, #288]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004002:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	493f      	ldr	r1, [pc, #252]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d028      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004024:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	4937      	ldr	r1, [pc, #220]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004042:	d106      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b32      	ldr	r3, [pc, #200]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
 8004050:	e011      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405a:	d10c      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f8c8 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d028      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004082:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	491f      	ldr	r1, [pc, #124]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a0:	d106      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ac:	60d3      	str	r3, [r2, #12]
 80040ae:	e011      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f899 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	4908      	ldr	r1, [pc, #32]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d109      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a02      	ldr	r2, [pc, #8]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410a:	60d3      	str	r3, [r2, #12]
 800410c:	e014      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f867 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004152:	4928      	ldr	r1, [pc, #160]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004162:	d10d      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f844 	bl	80041f8 <RCCEx_PLLSAI1_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d014      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	74bb      	strb	r3, [r7, #18]
 800417e:	e011      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3320      	adds	r3, #32
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f925 	bl	80043e0 <RCCEx_PLLSAI2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b0:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041be:	490d      	ldr	r1, [pc, #52]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	4904      	ldr	r1, [pc, #16]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004206:	4b75      	ldr	r3, [pc, #468]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004212:	4b72      	ldr	r3, [pc, #456]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0203 	and.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d10d      	bne.n	800423e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
       ||
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800422a:	4b6c      	ldr	r3, [pc, #432]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
       ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d047      	beq.n	80042ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
 8004242:	e044      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d018      	beq.n	800427e <RCCEx_PLLSAI1_Config+0x86>
 800424c:	2b03      	cmp	r3, #3
 800424e:	d825      	bhi.n	800429c <RCCEx_PLLSAI1_Config+0xa4>
 8004250:	2b01      	cmp	r3, #1
 8004252:	d002      	beq.n	800425a <RCCEx_PLLSAI1_Config+0x62>
 8004254:	2b02      	cmp	r3, #2
 8004256:	d009      	beq.n	800426c <RCCEx_PLLSAI1_Config+0x74>
 8004258:	e020      	b.n	800429c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800425a:	4b60      	ldr	r3, [pc, #384]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11d      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426a:	e01a      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800426c:	4b5b      	ldr	r3, [pc, #364]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d116      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427c:	e013      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800427e:	4b57      	ldr	r3, [pc, #348]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800428a:	4b54      	ldr	r3, [pc, #336]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800429a:	e006      	b.n	80042aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e004      	b.n	80042ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10d      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042b2:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	430b      	orrs	r3, r1
 80042c8:	4944      	ldr	r1, [pc, #272]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d17d      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042d4:	4b41      	ldr	r3, [pc, #260]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a40      	ldr	r2, [pc, #256]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fe f9ae 	bl	8002640 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e6:	e009      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e8:	f7fe f9aa 	bl	8002640 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	73fb      	strb	r3, [r7, #15]
        break;
 80042fa:	e005      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042fc:	4b37      	ldr	r3, [pc, #220]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ef      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d160      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d111      	bne.n	8004338 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6892      	ldr	r2, [r2, #8]
 8004324:	0211      	lsls	r1, r2, #8
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68d2      	ldr	r2, [r2, #12]
 800432a:	0912      	lsrs	r2, r2, #4
 800432c:	0452      	lsls	r2, r2, #17
 800432e:	430a      	orrs	r2, r1
 8004330:	492a      	ldr	r1, [pc, #168]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	610b      	str	r3, [r1, #16]
 8004336:	e027      	b.n	8004388 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d112      	bne.n	8004364 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004346:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6892      	ldr	r2, [r2, #8]
 800434e:	0211      	lsls	r1, r2, #8
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6912      	ldr	r2, [r2, #16]
 8004354:	0852      	lsrs	r2, r2, #1
 8004356:	3a01      	subs	r2, #1
 8004358:	0552      	lsls	r2, r2, #21
 800435a:	430a      	orrs	r2, r1
 800435c:	491f      	ldr	r1, [pc, #124]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	610b      	str	r3, [r1, #16]
 8004362:	e011      	b.n	8004388 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800436c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	0211      	lsls	r1, r2, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6952      	ldr	r2, [r2, #20]
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0652      	lsls	r2, r2, #25
 8004380:	430a      	orrs	r2, r1
 8004382:	4916      	ldr	r1, [pc, #88]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800438e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fe f954 	bl	8002640 <HAL_GetTick>
 8004398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439a:	e009      	b.n	80043b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800439c:	f7fe f950 	bl	8002640 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d902      	bls.n	80043b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	73fb      	strb	r3, [r7, #15]
          break;
 80043ae:	e005      	b.n	80043bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ef      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4904      	ldr	r1, [pc, #16]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000

080043e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ee:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d018      	beq.n	800442c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043fa:	4b67      	ldr	r3, [pc, #412]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0203 	and.w	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
       ||
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
       ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d047      	beq.n	80044b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	e044      	b.n	80044b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d018      	beq.n	8004466 <RCCEx_PLLSAI2_Config+0x86>
 8004434:	2b03      	cmp	r3, #3
 8004436:	d825      	bhi.n	8004484 <RCCEx_PLLSAI2_Config+0xa4>
 8004438:	2b01      	cmp	r3, #1
 800443a:	d002      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0x62>
 800443c:	2b02      	cmp	r3, #2
 800443e:	d009      	beq.n	8004454 <RCCEx_PLLSAI2_Config+0x74>
 8004440:	e020      	b.n	8004484 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004442:	4b55      	ldr	r3, [pc, #340]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11d      	bne.n	800448a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e01a      	b.n	800448a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004464:	e013      	b.n	800448e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004466:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004482:	e006      	b.n	8004492 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e004      	b.n	8004494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004492:	bf00      	nop
    }

    if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	430b      	orrs	r3, r1
 80044b0:	4939      	ldr	r1, [pc, #228]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d167      	bne.n	800458c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a35      	ldr	r2, [pc, #212]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fe f8ba 	bl	8002640 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ce:	e009      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d0:	f7fe f8b6 	bl	8002640 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
        break;
 80044e2:	e005      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e4:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ef      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14a      	bne.n	800458c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d111      	bne.n	8004520 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6892      	ldr	r2, [r2, #8]
 800450c:	0211      	lsls	r1, r2, #8
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	0912      	lsrs	r2, r2, #4
 8004514:	0452      	lsls	r2, r2, #17
 8004516:	430a      	orrs	r2, r1
 8004518:	491f      	ldr	r1, [pc, #124]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	614b      	str	r3, [r1, #20]
 800451e:	e011      	b.n	8004544 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6912      	ldr	r2, [r2, #16]
 8004536:	0852      	lsrs	r2, r2, #1
 8004538:	3a01      	subs	r2, #1
 800453a:	0652      	lsls	r2, r2, #25
 800453c:	430a      	orrs	r2, r1
 800453e:	4916      	ldr	r1, [pc, #88]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe f876 	bl	8002640 <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004556:	e009      	b.n	800456c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004558:	f7fe f872 	bl	8002640 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	73fb      	strb	r3, [r7, #15]
          break;
 800456a:	e005      	b.n	8004578 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4904      	ldr	r1, [pc, #16]	; (8004598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000

0800459c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e095      	b.n	80046da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d108      	bne.n	80045c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045be:	d009      	beq.n	80045d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	61da      	str	r2, [r3, #28]
 80045c6:	e005      	b.n	80045d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f877 	bl	80046e2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004614:	d902      	bls.n	800461c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e002      	b.n	8004622 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800461c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004620:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800462a:	d007      	beq.n	800463c <HAL_SPI_Init+0xa0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004634:	d002      	beq.n	800463c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	ea42 0103 	orr.w	r1, r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0204 	and.w	r2, r3, #4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046b8:	ea42 0103 	orr.w	r1, r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b08a      	sub	sp, #40	; 0x28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004704:	2301      	movs	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_SPI_TransmitReceive+0x26>
 8004718:	2302      	movs	r3, #2
 800471a:	e1fb      	b.n	8004b14 <HAL_SPI_TransmitReceive+0x41e>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004724:	f7fd ff8c 	bl	8002640 <HAL_GetTick>
 8004728:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004730:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004740:	7efb      	ldrb	r3, [r7, #27]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d00e      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x6e>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474c:	d106      	bne.n	800475c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_SPI_TransmitReceive+0x66>
 8004756:	7efb      	ldrb	r3, [r7, #27]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d003      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800475c:	2302      	movs	r3, #2
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004762:	e1cd      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x80>
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800477c:	e1c0      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b04      	cmp	r3, #4
 8004788:	d003      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2205      	movs	r2, #5
 800478e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	887a      	ldrh	r2, [r7, #2]
 80047be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d4:	d802      	bhi.n	80047dc <HAL_SPI_TransmitReceive+0xe6>
 80047d6:	8a3b      	ldrh	r3, [r7, #16]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d908      	bls.n	80047ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e007      	b.n	80047fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d007      	beq.n	800481c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004824:	d97c      	bls.n	8004920 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x13e>
 800482e:	8a7b      	ldrh	r3, [r7, #18]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d169      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004858:	e056      	b.n	8004908 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d11b      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x1aa>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x1aa>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b01      	cmp	r3, #1
 8004876:	d113      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d11c      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x1f2>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	b292      	uxth	r2, r2
 80048c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e4:	2301      	movs	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e8:	f7fd feaa 	bl	8002640 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d807      	bhi.n	8004908 <HAL_SPI_TransmitReceive+0x212>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d003      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004906:	e0fb      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1a3      	bne.n	800485a <HAL_SPI_TransmitReceive+0x164>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d19d      	bne.n	800485a <HAL_SPI_TransmitReceive+0x164>
 800491e:	e0df      	b.n	8004ae0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x23a>
 8004928:	8a7b      	ldrh	r3, [r7, #18]
 800492a:	2b01      	cmp	r3, #1
 800492c:	f040 80cb 	bne.w	8004ac6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d912      	bls.n	8004960 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b02      	subs	r3, #2
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495e:	e0b2      	b.n	8004ac6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004986:	e09e      	b.n	8004ac6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d134      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x30a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02f      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x30a>
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d12c      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d912      	bls.n	80049d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	881a      	ldrh	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	1c9a      	adds	r2, r3, #2
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b02      	subs	r3, #2
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049d4:	e012      	b.n	80049fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d148      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x3aa>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d042      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d923      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	b292      	uxth	r2, r2
 8004a32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b02      	subs	r3, #2
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d81f      	bhi.n	8004a9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	e016      	b.n	8004a9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f103 020c 	add.w	r2, r3, #12
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aa0:	f7fd fdce 	bl	8002640 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d803      	bhi.n	8004ab8 <HAL_SPI_TransmitReceive+0x3c2>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x3c8>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ac4:	e01c      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af5b 	bne.w	8004988 <HAL_SPI_TransmitReceive+0x292>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f af54 	bne.w	8004988 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f945 	bl	8004d74 <SPI_EndRxTxTransaction>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
 8004afc:	e000      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b2a:	b2db      	uxtb	r3, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b48:	f7fd fd7a 	bl	8002640 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b58:	f7fd fd72 	bl	8002640 <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b5e:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	015b      	lsls	r3, r3, #5
 8004b64:	0d1b      	lsrs	r3, r3, #20
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b6e:	e054      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d050      	beq.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b78:	f7fd fd62 	bl	8002640 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d902      	bls.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d13d      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba6:	d111      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d004      	beq.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d107      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd4:	d10f      	bne.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e017      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d19b      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000001c 	.word	0x2000001c

08004c48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c5a:	f7fd fcf1 	bl	8002640 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c6a:	f7fd fce9 	bl	8002640 <HAL_GetTick>
 8004c6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c78:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00da      	lsls	r2, r3, #3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	0d1b      	lsrs	r3, r3, #20
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c90:	e060      	b.n	8004d54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c98:	d107      	bne.n	8004caa <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d050      	beq.n	8004d54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cb2:	f7fd fcc5 	bl	8002640 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d902      	bls.n	8004cc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13d      	bne.n	8004d44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce0:	d111      	bne.n	8004d06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cea:	d004      	beq.n	8004cf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d107      	bne.n	8004d06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0e:	d10f      	bne.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e010      	b.n	8004d66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d196      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2000001c 	.word	0x2000001c

08004d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff ff5b 	bl	8004c48 <SPI_WaitFifoStateUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e027      	b.n	8004df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff fec0 	bl	8004b38 <SPI_WaitFlagStateUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e014      	b.n	8004df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff ff34 	bl	8004c48 <SPI_WaitFifoStateUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e000      	b.n	8004df8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e040      	b.n	8004e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f83a 	bl	8004e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8ca 	bl	8004fd8 <UART_SetConfig>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e022      	b.n	8004e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fb76 	bl	8005548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fbfd 	bl	800568c <UART_CheckIdleState>
 8004e92:	4603      	mov	r3, r0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 8082 	bne.w	8004fce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Transmit+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07a      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x38>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e073      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efe:	f7fd fb9f 	bl	8002640 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1c:	d108      	bne.n	8004f30 <HAL_UART_Transmit+0x80>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e003      	b.n	8004f38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f40:	e02d      	b.n	8004f9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fbe6 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e039      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3302      	adds	r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e008      	b.n	8004f8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b292      	uxth	r2, r2
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1cb      	bne.n	8004f42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2140      	movs	r1, #64	; 0x40
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fbb2 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e005      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b08a      	sub	sp, #40	; 0x28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4ba4      	ldr	r3, [pc, #656]	; (8005298 <UART_SetConfig+0x2c0>)
 8005008:	4013      	ands	r3, r2
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005010:	430b      	orrs	r3, r1
 8005012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a99      	ldr	r2, [pc, #612]	; (800529c <UART_SetConfig+0x2c4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	4313      	orrs	r3, r2
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a90      	ldr	r2, [pc, #576]	; (80052a0 <UART_SetConfig+0x2c8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d126      	bne.n	80050b0 <UART_SetConfig+0xd8>
 8005062:	4b90      	ldr	r3, [pc, #576]	; (80052a4 <UART_SetConfig+0x2cc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d81b      	bhi.n	80050a8 <UART_SetConfig+0xd0>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0xa0>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005099 	.word	0x08005099
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a1 	.word	0x080050a1
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e116      	b.n	80052be <UART_SetConfig+0x2e6>
 8005090:	2302      	movs	r3, #2
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e112      	b.n	80052be <UART_SetConfig+0x2e6>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e10e      	b.n	80052be <UART_SetConfig+0x2e6>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e10a      	b.n	80052be <UART_SetConfig+0x2e6>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e106      	b.n	80052be <UART_SetConfig+0x2e6>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7c      	ldr	r2, [pc, #496]	; (80052a8 <UART_SetConfig+0x2d0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d138      	bne.n	800512c <UART_SetConfig+0x154>
 80050ba:	4b7a      	ldr	r3, [pc, #488]	; (80052a4 <UART_SetConfig+0x2cc>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d82d      	bhi.n	8005124 <UART_SetConfig+0x14c>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0xf8>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005105 	.word	0x08005105
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005125 	.word	0x08005125
 80050dc:	08005125 	.word	0x08005125
 80050e0:	08005115 	.word	0x08005115
 80050e4:	08005125 	.word	0x08005125
 80050e8:	08005125 	.word	0x08005125
 80050ec:	08005125 	.word	0x08005125
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005125 	.word	0x08005125
 80050f8:	08005125 	.word	0x08005125
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800511d 	.word	0x0800511d
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e0d8      	b.n	80052be <UART_SetConfig+0x2e6>
 800510c:	2302      	movs	r3, #2
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e0d4      	b.n	80052be <UART_SetConfig+0x2e6>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e0d0      	b.n	80052be <UART_SetConfig+0x2e6>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e0cc      	b.n	80052be <UART_SetConfig+0x2e6>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e0c8      	b.n	80052be <UART_SetConfig+0x2e6>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5e      	ldr	r2, [pc, #376]	; (80052ac <UART_SetConfig+0x2d4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d125      	bne.n	8005182 <UART_SetConfig+0x1aa>
 8005136:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <UART_SetConfig+0x2cc>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005140:	2b30      	cmp	r3, #48	; 0x30
 8005142:	d016      	beq.n	8005172 <UART_SetConfig+0x19a>
 8005144:	2b30      	cmp	r3, #48	; 0x30
 8005146:	d818      	bhi.n	800517a <UART_SetConfig+0x1a2>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d00a      	beq.n	8005162 <UART_SetConfig+0x18a>
 800514c:	2b20      	cmp	r3, #32
 800514e:	d814      	bhi.n	800517a <UART_SetConfig+0x1a2>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <UART_SetConfig+0x182>
 8005154:	2b10      	cmp	r3, #16
 8005156:	d008      	beq.n	800516a <UART_SetConfig+0x192>
 8005158:	e00f      	b.n	800517a <UART_SetConfig+0x1a2>
 800515a:	2300      	movs	r3, #0
 800515c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005160:	e0ad      	b.n	80052be <UART_SetConfig+0x2e6>
 8005162:	2302      	movs	r3, #2
 8005164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005168:	e0a9      	b.n	80052be <UART_SetConfig+0x2e6>
 800516a:	2304      	movs	r3, #4
 800516c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005170:	e0a5      	b.n	80052be <UART_SetConfig+0x2e6>
 8005172:	2308      	movs	r3, #8
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005178:	e0a1      	b.n	80052be <UART_SetConfig+0x2e6>
 800517a:	2310      	movs	r3, #16
 800517c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005180:	e09d      	b.n	80052be <UART_SetConfig+0x2e6>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <UART_SetConfig+0x2d8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d125      	bne.n	80051d8 <UART_SetConfig+0x200>
 800518c:	4b45      	ldr	r3, [pc, #276]	; (80052a4 <UART_SetConfig+0x2cc>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005196:	2bc0      	cmp	r3, #192	; 0xc0
 8005198:	d016      	beq.n	80051c8 <UART_SetConfig+0x1f0>
 800519a:	2bc0      	cmp	r3, #192	; 0xc0
 800519c:	d818      	bhi.n	80051d0 <UART_SetConfig+0x1f8>
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d00a      	beq.n	80051b8 <UART_SetConfig+0x1e0>
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d814      	bhi.n	80051d0 <UART_SetConfig+0x1f8>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <UART_SetConfig+0x1d8>
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d008      	beq.n	80051c0 <UART_SetConfig+0x1e8>
 80051ae:	e00f      	b.n	80051d0 <UART_SetConfig+0x1f8>
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e082      	b.n	80052be <UART_SetConfig+0x2e6>
 80051b8:	2302      	movs	r3, #2
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	e07e      	b.n	80052be <UART_SetConfig+0x2e6>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c6:	e07a      	b.n	80052be <UART_SetConfig+0x2e6>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ce:	e076      	b.n	80052be <UART_SetConfig+0x2e6>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d6:	e072      	b.n	80052be <UART_SetConfig+0x2e6>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a35      	ldr	r2, [pc, #212]	; (80052b4 <UART_SetConfig+0x2dc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d12a      	bne.n	8005238 <UART_SetConfig+0x260>
 80051e2:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <UART_SetConfig+0x2cc>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f0:	d01a      	beq.n	8005228 <UART_SetConfig+0x250>
 80051f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f6:	d81b      	bhi.n	8005230 <UART_SetConfig+0x258>
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d00c      	beq.n	8005218 <UART_SetConfig+0x240>
 80051fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005202:	d815      	bhi.n	8005230 <UART_SetConfig+0x258>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <UART_SetConfig+0x238>
 8005208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520c:	d008      	beq.n	8005220 <UART_SetConfig+0x248>
 800520e:	e00f      	b.n	8005230 <UART_SetConfig+0x258>
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e052      	b.n	80052be <UART_SetConfig+0x2e6>
 8005218:	2302      	movs	r3, #2
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e04e      	b.n	80052be <UART_SetConfig+0x2e6>
 8005220:	2304      	movs	r3, #4
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e04a      	b.n	80052be <UART_SetConfig+0x2e6>
 8005228:	2308      	movs	r3, #8
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e046      	b.n	80052be <UART_SetConfig+0x2e6>
 8005230:	2310      	movs	r3, #16
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005236:	e042      	b.n	80052be <UART_SetConfig+0x2e6>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <UART_SetConfig+0x2c4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d13a      	bne.n	80052b8 <UART_SetConfig+0x2e0>
 8005242:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <UART_SetConfig+0x2cc>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800524c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005250:	d01a      	beq.n	8005288 <UART_SetConfig+0x2b0>
 8005252:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005256:	d81b      	bhi.n	8005290 <UART_SetConfig+0x2b8>
 8005258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525c:	d00c      	beq.n	8005278 <UART_SetConfig+0x2a0>
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d815      	bhi.n	8005290 <UART_SetConfig+0x2b8>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <UART_SetConfig+0x298>
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d008      	beq.n	8005280 <UART_SetConfig+0x2a8>
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x2b8>
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e022      	b.n	80052be <UART_SetConfig+0x2e6>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e01e      	b.n	80052be <UART_SetConfig+0x2e6>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e01a      	b.n	80052be <UART_SetConfig+0x2e6>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e016      	b.n	80052be <UART_SetConfig+0x2e6>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e012      	b.n	80052be <UART_SetConfig+0x2e6>
 8005298:	efff69f3 	.word	0xefff69f3
 800529c:	40008000 	.word	0x40008000
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40004400 	.word	0x40004400
 80052ac:	40004800 	.word	0x40004800
 80052b0:	40004c00 	.word	0x40004c00
 80052b4:	40005000 	.word	0x40005000
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a9f      	ldr	r2, [pc, #636]	; (8005540 <UART_SetConfig+0x568>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d17a      	bne.n	80053be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d824      	bhi.n	800531a <UART_SetConfig+0x342>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0x300>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	0800531b 	.word	0x0800531b
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800531b 	.word	0x0800531b
 80052e8:	0800530b 	.word	0x0800530b
 80052ec:	0800531b 	.word	0x0800531b
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800531b 	.word	0x0800531b
 80052f8:	08005313 	.word	0x08005313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052fc:	f7fe fc06 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005300:	61f8      	str	r0, [r7, #28]
        break;
 8005302:	e010      	b.n	8005326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005304:	4b8f      	ldr	r3, [pc, #572]	; (8005544 <UART_SetConfig+0x56c>)
 8005306:	61fb      	str	r3, [r7, #28]
        break;
 8005308:	e00d      	b.n	8005326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530a:	f7fe fb67 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800530e:	61f8      	str	r0, [r7, #28]
        break;
 8005310:	e009      	b.n	8005326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005316:	61fb      	str	r3, [r7, #28]
        break;
 8005318:	e005      	b.n	8005326 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80fb 	beq.w	8005524 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	429a      	cmp	r2, r3
 800533c:	d305      	bcc.n	800534a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	429a      	cmp	r2, r3
 8005348:	d903      	bls.n	8005352 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005350:	e0e8      	b.n	8005524 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2200      	movs	r2, #0
 8005356:	461c      	mov	r4, r3
 8005358:	4615      	mov	r5, r2
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	022b      	lsls	r3, r5, #8
 8005364:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005368:	0222      	lsls	r2, r4, #8
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	6849      	ldr	r1, [r1, #4]
 800536e:	0849      	lsrs	r1, r1, #1
 8005370:	2000      	movs	r0, #0
 8005372:	4688      	mov	r8, r1
 8005374:	4681      	mov	r9, r0
 8005376:	eb12 0a08 	adds.w	sl, r2, r8
 800537a:	eb43 0b09 	adc.w	fp, r3, r9
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538c:	4650      	mov	r0, sl
 800538e:	4659      	mov	r1, fp
 8005390:	f7fa ff6e 	bl	8000270 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a2:	d308      	bcc.n	80053b6 <UART_SetConfig+0x3de>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d204      	bcs.n	80053b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	e0b6      	b.n	8005524 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053bc:	e0b2      	b.n	8005524 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c6:	d15e      	bne.n	8005486 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d828      	bhi.n	8005422 <UART_SetConfig+0x44a>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x400>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
 80053f0:	08005423 	.word	0x08005423
 80053f4:	08005423 	.word	0x08005423
 80053f8:	0800541b 	.word	0x0800541b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe fb86 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005400:	61f8      	str	r0, [r7, #28]
        break;
 8005402:	e014      	b.n	800542e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fe fb98 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005408:	61f8      	str	r0, [r7, #28]
        break;
 800540a:	e010      	b.n	800542e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <UART_SetConfig+0x56c>)
 800540e:	61fb      	str	r3, [r7, #28]
        break;
 8005410:	e00d      	b.n	800542e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005412:	f7fe fae3 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8005416:	61f8      	str	r0, [r7, #28]
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	61fb      	str	r3, [r7, #28]
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800542c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d077      	beq.n	8005524 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	005a      	lsls	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	441a      	add	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d916      	bls.n	800547e <UART_SetConfig+0x4a6>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	d212      	bcs.n	800547e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f023 030f 	bic.w	r3, r3, #15
 8005460:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	b29b      	uxth	r3, r3
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	b29a      	uxth	r2, r3
 800546e:	8afb      	ldrh	r3, [r7, #22]
 8005470:	4313      	orrs	r3, r2
 8005472:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	8afa      	ldrh	r2, [r7, #22]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e052      	b.n	8005524 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005484:	e04e      	b.n	8005524 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800548a:	2b08      	cmp	r3, #8
 800548c:	d827      	bhi.n	80054de <UART_SetConfig+0x506>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0x4bc>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	080054df 	.word	0x080054df
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054df 	.word	0x080054df
 80054ac:	080054df 	.word	0x080054df
 80054b0:	080054df 	.word	0x080054df
 80054b4:	080054d7 	.word	0x080054d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b8:	f7fe fb28 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80054bc:	61f8      	str	r0, [r7, #28]
        break;
 80054be:	e014      	b.n	80054ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c0:	f7fe fb3a 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 80054c4:	61f8      	str	r0, [r7, #28]
        break;
 80054c6:	e010      	b.n	80054ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <UART_SetConfig+0x56c>)
 80054ca:	61fb      	str	r3, [r7, #28]
        break;
 80054cc:	e00d      	b.n	80054ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ce:	f7fe fa85 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 80054d2:	61f8      	str	r0, [r7, #28]
        break;
 80054d4:	e009      	b.n	80054ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054da:	61fb      	str	r3, [r7, #28]
        break;
 80054dc:	e005      	b.n	80054ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054e8:	bf00      	nop
    }

    if (pclk != 0U)
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d019      	beq.n	8005524 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	085a      	lsrs	r2, r3, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	441a      	add	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d909      	bls.n	800551e <UART_SetConfig+0x546>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d205      	bcs.n	800551e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60da      	str	r2, [r3, #12]
 800551c:	e002      	b.n	8005524 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005530:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	40008000 	.word	0x40008000
 8005544:	00f42400 	.word	0x00f42400

08005548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01a      	beq.n	800565e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d10a      	bne.n	800565e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800569c:	f7fc ffd0 	bl	8002640 <HAL_GetTick>
 80056a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d10e      	bne.n	80056ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f82d 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e023      	b.n	8005716 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d10e      	bne.n	80056fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f817 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e00d      	b.n	8005716 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b09c      	sub	sp, #112	; 0x70
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572e:	e0a5      	b.n	800587c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	f000 80a1 	beq.w	800587c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fc ff81 	bl	8002640 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <UART_WaitOnFlagUntilTimeout+0x32>
 800574a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574c:	2b00      	cmp	r3, #0
 800574e:	d13e      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005770:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800577c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e6      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e067      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d04f      	beq.n	800587c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ea:	d147      	bne.n	800587c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800580a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
 8005816:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800581a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e6      	bne.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	613b      	str	r3, [r7, #16]
   return(result);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005848:	623a      	str	r2, [r7, #32]
 800584a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	61bb      	str	r3, [r7, #24]
   return(result);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e010      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	429a      	cmp	r2, r3
 8005898:	f43f af4a 	beq.w	8005730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3770      	adds	r7, #112	; 0x70
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b0cc      	sub	sp, #304	; 0x130
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4602      	mov	r2, r0
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80058b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058da:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058e6:	3301      	adds	r3, #1
 80058e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058f0:	2218      	movs	r2, #24
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f003 fac5 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 80058fa:	233f      	movs	r3, #63	; 0x3f
 80058fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005900:	2385      	movs	r3, #133	; 0x85
 8005902:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800590e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005916:	f107 030b 	add.w	r3, r7, #11
 800591a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800591e:	2301      	movs	r3, #1
 8005920:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f002 fdfc 	bl	8008528 <hci_send_req>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	da01      	bge.n	800593a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005936:	23ff      	movs	r3, #255	; 0xff
 8005938:	e00d      	b.n	8005956 <aci_gap_set_io_capability+0xb0>
  if (status) {
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <aci_gap_set_io_capability+0xae>
    return status;
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	e000      	b.n	8005956 <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8005960:	b5b0      	push	{r4, r5, r7, lr}
 8005962:	b0cc      	sub	sp, #304	; 0x130
 8005964:	af00      	add	r7, sp, #0
 8005966:	4605      	mov	r5, r0
 8005968:	460c      	mov	r4, r1
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005976:	462a      	mov	r2, r5
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005982:	4622      	mov	r2, r4
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800598e:	4602      	mov	r2, r0
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599a:	460a      	mov	r2, r1
 800599c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800599e:	f107 030c 	add.w	r3, r7, #12
 80059a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80059b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059c8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059cc:	3301      	adds	r3, #1
 80059ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80059d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80059e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059e6:	3301      	adds	r3, #1
 80059e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059f4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80059f8:	7812      	ldrb	r2, [r2, #0]
 80059fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a00:	3301      	adds	r3, #1
 8005a02:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005a16:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8005a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a24:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005a28:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005a2a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005a3c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005a3e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a42:	3301      	adds	r3, #1
 8005a44:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8005a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005a50:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005a52:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a56:	3301      	adds	r3, #1
 8005a58:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005a64:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005a68:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005a7a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005a7c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a80:	3301      	adds	r3, #1
 8005a82:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a8a:	2218      	movs	r2, #24
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f003 f9f8 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005a94:	233f      	movs	r3, #63	; 0x3f
 8005a96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005a9a:	2386      	movs	r3, #134	; 0x86
 8005a9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005aa0:	f107 030c 	add.w	r3, r7, #12
 8005aa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005aa8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005aac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ab0:	f107 030b 	add.w	r3, r7, #11
 8005ab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 fd2f 	bl	8008528 <hci_send_req>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da01      	bge.n	8005ad4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005ad0:	23ff      	movs	r3, #255	; 0xff
 8005ad2:	e00d      	b.n	8005af0 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	e000      	b.n	8005af0 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bdb0      	pop	{r4, r5, r7, pc}

08005afa <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005afa:	b590      	push	{r4, r7, lr}
 8005afc:	b0cf      	sub	sp, #316	; 0x13c
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4604      	mov	r4, r0
 8005b02:	4608      	mov	r0, r1
 8005b04:	4611      	mov	r1, r2
 8005b06:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b0a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b14:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b18:	4622      	mov	r2, r4
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b20:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005b24:	4602      	mov	r2, r0
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	2207      	movs	r2, #7
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f003 f99d 	bl	8008e84 <memset>
  uint8_t index_input = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b58:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b60:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b64:	3301      	adds	r3, #1
 8005b66:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b72:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b7a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b88:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b8c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b94:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ba2:	2218      	movs	r2, #24
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f003 f96c 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005bac:	233f      	movs	r3, #63	; 0x3f
 8005bae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005bb2:	238a      	movs	r3, #138	; 0x8a
 8005bb4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005bc0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005bd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f002 fca3 	bl	8008528 <hci_send_req>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da01      	bge.n	8005bec <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005be8:	23ff      	movs	r3, #255	; 0xff
 8005bea:	e02e      	b.n	8005c4a <aci_gap_init+0x150>
  if (resp.Status) {
 8005bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <aci_gap_init+0x10c>
    return resp.Status;
 8005bfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	e021      	b.n	8005c4a <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c18:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005c20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c28:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c32:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005c34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c3c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c46:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd90      	pop	{r4, r7, pc}

08005c54 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	2218      	movs	r2, #24
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f003 f90c 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005c6c:	233f      	movs	r3, #63	; 0x3f
 8005c6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8005c70:	2394      	movs	r3, #148	; 0x94
 8005c72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c74:	1dfb      	adds	r3, r7, #7
 8005c76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005c7c:	f107 0308 	add.w	r3, r7, #8
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f002 fc50 	bl	8008528 <hci_send_req>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da01      	bge.n	8005c92 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005c8e:	23ff      	movs	r3, #255	; 0xff
 8005c90:	e005      	b.n	8005c9e <aci_gap_clear_security_db+0x4a>
  if (status) {
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <aci_gap_clear_security_db+0x48>
    return status;
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	e000      	b.n	8005c9e <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005ca6:	b5b0      	push	{r4, r5, r7, lr}
 8005ca8:	b0cc      	sub	sp, #304	; 0x130
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc8:	4622      	mov	r2, r4
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005ce0:	460a      	mov	r2, r1
 8005ce2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005d0a:	8812      	ldrh	r2, [r2, #0]
 8005d0c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d0e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d12:	3302      	adds	r3, #2
 8005d14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d24:	8812      	ldrh	r2, [r2, #0]
 8005d26:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005d28:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d3a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d42:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d46:	3301      	adds	r3, #1
 8005d48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d54:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d5c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d60:	3301      	adds	r3, #1
 8005d62:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f003 f888 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005d74:	233f      	movs	r3, #63	; 0x3f
 8005d76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005d7a:	2397      	movs	r3, #151	; 0x97
 8005d7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005d80:	230f      	movs	r3, #15
 8005d82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d8e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d96:	f107 030b 	add.w	r3, r7, #11
 8005d9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fbbc 	bl	8008528 <hci_send_req>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da01      	bge.n	8005dba <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005db6:	23ff      	movs	r3, #255	; 0xff
 8005db8:	e00d      	b.n	8005dd6 <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	e000      	b.n	8005dd6 <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bdb0      	pop	{r4, r5, r7, pc}

08005de0 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b0cf      	sub	sp, #316	; 0x13c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005df0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dfa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005dfe:	4622      	mov	r2, r4
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e12:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005e16:	460a      	mov	r2, r1
 8005e18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e26:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005e40:	8812      	ldrh	r2, [r2, #0]
 8005e42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e44:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e52:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e56:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e5a:	8812      	ldrh	r2, [r2, #0]
 8005e5c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005e5e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e62:	3302      	adds	r3, #2
 8005e64:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e6c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e70:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e78:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e86:	1d58      	adds	r0, r3, #5
 8005e88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005e90:	2206      	movs	r2, #6
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	f003 f870 	bl	8008f78 <memcpy>
  index_input += 6;
 8005e98:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e9c:	3306      	adds	r3, #6
 8005e9e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ea6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005eaa:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005eac:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eba:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005ebe:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005ec0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ece:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005ed2:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005ed4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ed8:	3302      	adds	r3, #2
 8005eda:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ee2:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005ee6:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005ee8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005eec:	3302      	adds	r3, #2
 8005eee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005ef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ef6:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005efa:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005efc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f00:	3302      	adds	r3, #2
 8005f02:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f0a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005f0e:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005f10:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f14:	3302      	adds	r3, #2
 8005f16:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f1e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005f22:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005f24:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f28:	3302      	adds	r3, #2
 8005f2a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f32:	2218      	movs	r2, #24
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f002 ffa4 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005f3c:	233f      	movs	r3, #63	; 0x3f
 8005f3e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005f42:	239c      	movs	r3, #156	; 0x9c
 8005f44:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005f48:	230f      	movs	r3, #15
 8005f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005f56:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005f5e:	f107 0313 	add.w	r3, r7, #19
 8005f62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005f6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fad8 	bl	8008528 <hci_send_req>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da01      	bge.n	8005f82 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005f7e:	23ff      	movs	r3, #255	; 0xff
 8005f80:	e00d      	b.n	8005f9e <aci_gap_create_connection+0x1be>
  if (status) {
 8005f82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f86:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <aci_gap_create_connection+0x1bc>
    return status;
 8005f90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f94:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	e000      	b.n	8005f9e <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b0cc      	sub	sp, #304	; 0x130
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4602      	mov	r2, r0
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005fb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005fba:	f107 030c 	add.w	r3, r7, #12
 8005fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fdc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005fe4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ff2:	2218      	movs	r2, #24
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 ff44 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8005ffc:	233f      	movs	r3, #63	; 0x3f
 8005ffe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8006002:	239d      	movs	r3, #157	; 0x9d
 8006004:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006010:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006018:	f107 030b 	add.w	r3, r7, #11
 800601c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006020:	2301      	movs	r3, #1
 8006022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f002 fa7b 	bl	8008528 <hci_send_req>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	da01      	bge.n	800603c <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8006038:	23ff      	movs	r3, #255	; 0xff
 800603a:	e00d      	b.n	8006058 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 800603c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006040:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <aci_gap_terminate_gap_proc+0xae>
    return status;
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	e000      	b.n	8006058 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	2218      	movs	r2, #24
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f002 ff05 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 800607a:	233f      	movs	r3, #63	; 0x3f
 800607c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800607e:	f240 1301 	movw	r3, #257	; 0x101
 8006082:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006084:	1dfb      	adds	r3, r7, #7
 8006086:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f002 fa48 	bl	8008528 <hci_send_req>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	da01      	bge.n	80060a2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800609e:	23ff      	movs	r3, #255	; 0xff
 80060a0:	e005      	b.n	80060ae <aci_gatt_init+0x4c>
  if (status) {
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <aci_gatt_init+0x4a>
    return status;
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	e000      	b.n	80060ae <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80060b6:	b590      	push	{r4, r7, lr}
 80060b8:	b0cf      	sub	sp, #316	; 0x13c
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	4604      	mov	r4, r0
 80060be:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80060c2:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80060c6:	6001      	str	r1, [r0, #0]
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060d0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060d4:	4622      	mov	r2, r4
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060dc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80060e0:	4602      	mov	r2, r0
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060e8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80060ec:	460a      	mov	r2, r1
 80060ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80060f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060fc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d00a      	beq.n	800611c <aci_gatt_add_service+0x66>
 8006106:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800610a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d101      	bne.n	8006118 <aci_gatt_add_service+0x62>
 8006114:	2311      	movs	r3, #17
 8006116:	e002      	b.n	800611e <aci_gatt_add_service+0x68>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <aci_gatt_add_service+0x68>
 800611c:	2303      	movs	r3, #3
 800611e:	f107 020c 	add.w	r2, r7, #12
 8006122:	4413      	add	r3, r2
 8006124:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006128:	f107 0308 	add.w	r3, r7, #8
 800612c:	2203      	movs	r2, #3
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f002 fea7 	bl	8008e84 <memset>
  uint8_t index_input = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800613c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006140:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006144:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800614c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006150:	3301      	adds	r3, #1
 8006152:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8006156:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800615a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d002      	beq.n	800616a <aci_gatt_add_service+0xb4>
 8006164:	2b02      	cmp	r3, #2
 8006166:	d004      	beq.n	8006172 <aci_gatt_add_service+0xbc>
 8006168:	e007      	b.n	800617a <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 800616a:	2302      	movs	r3, #2
 800616c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006170:	e005      	b.n	800617e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006172:	2310      	movs	r3, #16
 8006174:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006178:	e001      	b.n	800617e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800617a:	2347      	movs	r3, #71	; 0x47
 800617c:	e06c      	b.n	8006258 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800617e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006182:	1c58      	adds	r0, r3, #1
 8006184:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006188:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800618c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006190:	6819      	ldr	r1, [r3, #0]
 8006192:	f002 fef1 	bl	8008f78 <memcpy>
    index_input += size;
 8006196:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800619a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800619e:	4413      	add	r3, r2
 80061a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80061a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061ac:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80061b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061b8:	3301      	adds	r3, #1
 80061ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061c6:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80061ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061d2:	3301      	adds	r3, #1
 80061d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061dc:	2218      	movs	r2, #24
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 fe4f 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 80061e6:	233f      	movs	r3, #63	; 0x3f
 80061e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80061ec:	f44f 7381 	mov.w	r3, #258	; 0x102
 80061f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006204:	f107 0308 	add.w	r3, r7, #8
 8006208:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800620c:	2303      	movs	r3, #3
 800620e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f002 f985 	bl	8008528 <hci_send_req>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	da01      	bge.n	8006228 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006224:	23ff      	movs	r3, #255	; 0xff
 8006226:	e017      	b.n	8006258 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8006228:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800622c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	e00a      	b.n	8006258 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006242:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006254:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800625e:	46bd      	mov	sp, r7
 8006260:	bd90      	pop	{r4, r7, pc}

08006262 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8006262:	b590      	push	{r4, r7, lr}
 8006264:	b0d1      	sub	sp, #324	; 0x144
 8006266:	af00      	add	r7, sp, #0
 8006268:	4604      	mov	r4, r0
 800626a:	4608      	mov	r0, r1
 800626c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006270:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006274:	600a      	str	r2, [r1, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800627c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006280:	4622      	mov	r2, r4
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006288:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800628c:	4602      	mov	r2, r0
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006294:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006298:	460a      	mov	r2, r1
 800629a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800629c:	f107 0314 	add.w	r3, r7, #20
 80062a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80062a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062a8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d00a      	beq.n	80062c8 <aci_gatt_add_char+0x66>
 80062b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062b6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d101      	bne.n	80062c4 <aci_gatt_add_char+0x62>
 80062c0:	2313      	movs	r3, #19
 80062c2:	e002      	b.n	80062ca <aci_gatt_add_char+0x68>
 80062c4:	2303      	movs	r3, #3
 80062c6:	e000      	b.n	80062ca <aci_gatt_add_char+0x68>
 80062c8:	2305      	movs	r3, #5
 80062ca:	f107 0214 	add.w	r2, r7, #20
 80062ce:	4413      	add	r3, r2
 80062d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	2203      	movs	r2, #3
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f002 fdd1 	bl	8008e84 <memset>
  uint8_t index_input = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80062e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062f0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80062f4:	8812      	ldrh	r2, [r2, #0]
 80062f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062f8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062fc:	3302      	adds	r3, #2
 80062fe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006302:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006306:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800630a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006312:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006316:	3301      	adds	r3, #1
 8006318:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800631c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006320:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d002      	beq.n	8006330 <aci_gatt_add_char+0xce>
 800632a:	2b02      	cmp	r3, #2
 800632c:	d004      	beq.n	8006338 <aci_gatt_add_char+0xd6>
 800632e:	e007      	b.n	8006340 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8006330:	2302      	movs	r3, #2
 8006332:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006336:	e005      	b.n	8006344 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006338:	2310      	movs	r3, #16
 800633a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800633e:	e001      	b.n	8006344 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006340:	2347      	movs	r3, #71	; 0x47
 8006342:	e091      	b.n	8006468 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8006344:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006348:	1cd8      	adds	r0, r3, #3
 800634a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800634e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006352:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006356:	6819      	ldr	r1, [r3, #0]
 8006358:	f002 fe0e 	bl	8008f78 <memcpy>
    index_input += size;
 800635c:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006360:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006364:	4413      	add	r3, r2
 8006366:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800636a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800636e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006372:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006376:	8812      	ldrh	r2, [r2, #0]
 8006378:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800637a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800637e:	3302      	adds	r3, #2
 8006380:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006384:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006388:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800638c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800638e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006392:	3301      	adds	r3, #1
 8006394:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8006398:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800639c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80063a0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80063a2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063a6:	3301      	adds	r3, #1
 80063a8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80063ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063b0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80063b4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80063b6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063ba:	3301      	adds	r3, #1
 80063bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80063c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063c4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80063c8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80063ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063ce:	3301      	adds	r3, #1
 80063d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80063d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80063dc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80063de:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063e2:	3301      	adds	r3, #1
 80063e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063ec:	2218      	movs	r2, #24
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f002 fd47 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 80063f6:	233f      	movs	r3, #63	; 0x3f
 80063f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80063fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006400:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800640c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006410:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800641c:	2303      	movs	r3, #3
 800641e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006422:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006426:	2100      	movs	r1, #0
 8006428:	4618      	mov	r0, r3
 800642a:	f002 f87d 	bl	8008528 <hci_send_req>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	da01      	bge.n	8006438 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006434:	23ff      	movs	r3, #255	; 0xff
 8006436:	e017      	b.n	8006468 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8006438:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800643c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006446:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800644a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	e00a      	b.n	8006468 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006464:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800646e:	46bd      	mov	sp, r7
 8006470:	bd90      	pop	{r4, r7, pc}

08006472 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8006472:	b5b0      	push	{r4, r5, r7, lr}
 8006474:	b0cc      	sub	sp, #304	; 0x130
 8006476:	af00      	add	r7, sp, #0
 8006478:	4605      	mov	r5, r0
 800647a:	460c      	mov	r4, r1
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006488:	462a      	mov	r2, r5
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006494:	4622      	mov	r2, r4
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80064a0:	4602      	mov	r2, r0
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80064ac:	460a      	mov	r2, r1
 80064ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80064ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064d2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064d6:	8812      	ldrh	r2, [r2, #0]
 80064d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064de:	3302      	adds	r3, #2
 80064e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064f0:	8812      	ldrh	r2, [r2, #0]
 80064f2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064f4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064f8:	3302      	adds	r3, #2
 80064fa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006506:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800650e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006512:	3301      	adds	r3, #1
 8006514:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8006518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006520:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006528:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800652c:	3301      	adds	r3, #1
 800652e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	1d98      	adds	r0, r3, #6
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006548:	f002 fd16 	bl	8008f78 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800654c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006550:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006554:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	4413      	add	r3, r2
 800655c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006560:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006564:	2218      	movs	r2, #24
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f002 fc8b 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 800656e:	233f      	movs	r3, #63	; 0x3f
 8006570:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006574:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006578:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800657c:	f107 030c 	add.w	r3, r7, #12
 8006580:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006584:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800658c:	f107 030b 	add.w	r3, r7, #11
 8006590:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006594:	2301      	movs	r3, #1
 8006596:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800659a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 ffc1 	bl	8008528 <hci_send_req>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da01      	bge.n	80065b0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80065ac:	23ff      	movs	r3, #255	; 0xff
 80065ae:	e00d      	b.n	80065cc <aci_gatt_update_char_value+0x15a>
  if (status) {
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <aci_gatt_update_char_value+0x158>
    return status;
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	e000      	b.n	80065cc <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bdb0      	pop	{r4, r5, r7, pc}

080065d6 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80065d6:	b5b0      	push	{r4, r5, r7, lr}
 80065d8:	b0ce      	sub	sp, #312	; 0x138
 80065da:	af00      	add	r7, sp, #0
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065e8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065ec:	462a      	mov	r2, r5
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065f8:	4622      	mov	r2, r4
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006600:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006604:	4602      	mov	r2, r0
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800660c:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006610:	460a      	mov	r2, r1
 8006612:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 8006614:	f107 0310 	add.w	r3, r7, #16
 8006618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 800661c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006620:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800662e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006632:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006636:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800663a:	8812      	ldrh	r2, [r2, #0]
 800663c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800663e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006642:	3302      	adds	r3, #2
 8006644:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 8006648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800664c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006650:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006654:	8812      	ldrh	r2, [r2, #0]
 8006656:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006658:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800665c:	3302      	adds	r3, #2
 800665e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 8006662:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006666:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800666a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800666e:	8812      	ldrh	r2, [r2, #0]
 8006670:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006672:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006676:	3302      	adds	r3, #2
 8006678:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 800667c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006680:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006684:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800668c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006690:	3301      	adds	r3, #1
 8006692:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 8006696:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800669a:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d002      	beq.n	80066aa <aci_gatt_disc_char_by_uuid+0xd4>
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d004      	beq.n	80066b2 <aci_gatt_disc_char_by_uuid+0xdc>
 80066a8:	e007      	b.n	80066ba <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 80066aa:	2302      	movs	r3, #2
 80066ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066b0:	e005      	b.n	80066be <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 80066b2:	2310      	movs	r3, #16
 80066b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066b8:	e001      	b.n	80066be <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 80066ba:	2347      	movs	r3, #71	; 0x47
 80066bc:	e049      	b.n	8006752 <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 80066be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066c2:	3307      	adds	r3, #7
 80066c4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80066c8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 fc53 	bl	8008f78 <memcpy>
    index_input += size;
 80066d2:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80066d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80066da:	4413      	add	r3, r2
 80066dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066e0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066e4:	2218      	movs	r2, #24
 80066e6:	2100      	movs	r1, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 fbcb 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 80066ee:	233f      	movs	r3, #63	; 0x3f
 80066f0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 80066f4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80066f8:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 80066fc:	230f      	movs	r3, #15
 80066fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 8006702:	f107 0310 	add.w	r3, r7, #16
 8006706:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 800670a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800670e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 8006712:	f107 030f 	add.w	r3, r7, #15
 8006716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 800671a:	2301      	movs	r3, #1
 800671c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 8006720:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fefe 	bl	8008528 <hci_send_req>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	da01      	bge.n	8006736 <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 8006732:	23ff      	movs	r3, #255	; 0xff
 8006734:	e00d      	b.n	8006752 <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 8006736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800673a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 8006744:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006748:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	e000      	b.n	8006752 <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006758:	46bd      	mov	sp, r7
 800675a:	bdb0      	pop	{r4, r5, r7, pc}

0800675c <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b0cf      	sub	sp, #316	; 0x13c
 8006760:	af00      	add	r7, sp, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	4611      	mov	r1, r2
 8006768:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800676c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006776:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800677a:	4622      	mov	r2, r4
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006786:	4602      	mov	r2, r0
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800678e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006792:	460a      	mov	r2, r1
 8006794:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800679e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067a2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80067b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067b8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80067bc:	8812      	ldrh	r2, [r2, #0]
 80067be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80067c0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067c4:	3302      	adds	r3, #2
 80067c6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80067ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067d6:	8812      	ldrh	r2, [r2, #0]
 80067d8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80067da:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067de:	3302      	adds	r3, #2
 80067e0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80067e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067ec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80067f4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067f8:	3301      	adds	r3, #1
 80067fa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80067fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006802:	1d58      	adds	r0, r3, #5
 8006804:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006808:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006812:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006816:	6819      	ldr	r1, [r3, #0]
 8006818:	f002 fbae 	bl	8008f78 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800681c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006820:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006824:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	4413      	add	r3, r2
 800682c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006830:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006834:	2218      	movs	r2, #24
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f002 fb23 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 800683e:	233f      	movs	r3, #63	; 0x3f
 8006840:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8006844:	f240 1321 	movw	r3, #289	; 0x121
 8006848:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800684c:	230f      	movs	r3, #15
 800684e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800685a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800685e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8006862:	f107 0313 	add.w	r3, r7, #19
 8006866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800686a:	2301      	movs	r3, #1
 800686c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006870:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006874:	2100      	movs	r1, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fe56 	bl	8008528 <hci_send_req>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	da01      	bge.n	8006886 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8006882:	23ff      	movs	r3, #255	; 0xff
 8006884:	e00d      	b.n	80068a2 <aci_gatt_write_char_desc+0x146>
  if (status) {
 8006886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800688a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <aci_gatt_write_char_desc+0x144>
    return status;
 8006894:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006898:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	e000      	b.n	80068a2 <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd90      	pop	{r4, r7, pc}

080068ac <aci_gatt_write_without_resp>:
}
tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b0cf      	sub	sp, #316	; 0x13c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80068bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80068ca:	4622      	mov	r2, r4
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d6:	4602      	mov	r2, r0
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068de:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80068e2:	460a      	mov	r2, r1
 80068e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80068e6:	f107 0314 	add.w	r3, r7, #20
 80068ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80068ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068f2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006900:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006904:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006908:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800690c:	8812      	ldrh	r2, [r2, #0]
 800690e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006910:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006914:	3302      	adds	r3, #2
 8006916:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800691a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800691e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006922:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800692a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800692e:	3302      	adds	r3, #2
 8006930:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8006934:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006938:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800693c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006944:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006948:	3301      	adds	r3, #1
 800694a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800694e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006952:	1d58      	adds	r0, r3, #5
 8006954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006958:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006962:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006966:	6819      	ldr	r1, [r3, #0]
 8006968:	f002 fb06 	bl	8008f78 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800696c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006970:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006974:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	4413      	add	r3, r2
 800697c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006984:	2218      	movs	r2, #24
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f002 fa7b 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 800698e:	233f      	movs	r3, #63	; 0x3f
 8006990:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8006994:	f240 1323 	movw	r3, #291	; 0x123
 8006998:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800699c:	f107 0314 	add.w	r3, r7, #20
 80069a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80069a4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80069a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80069ac:	f107 0313 	add.w	r3, r7, #19
 80069b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80069ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 fdb1 	bl	8008528 <hci_send_req>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da01      	bge.n	80069d0 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 80069cc:	23ff      	movs	r3, #255	; 0xff
 80069ce:	e00d      	b.n	80069ec <aci_gatt_write_without_resp+0x140>
  if (status) {
 80069d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80069d4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <aci_gatt_write_without_resp+0x13e>
    return status;
 80069de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80069e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	e000      	b.n	80069ec <aci_gatt_write_without_resp+0x140>
  }
  return BLE_STATUS_SUCCESS;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}

080069f6 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b08e      	sub	sp, #56	; 0x38
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	220f      	movs	r2, #15
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 fa39 	bl	8008e84 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a12:	f107 0320 	add.w	r3, r7, #32
 8006a16:	2218      	movs	r2, #24
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f002 fa32 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8006a20:	233f      	movs	r3, #63	; 0x3f
 8006a22:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8006a24:	2301      	movs	r3, #1
 8006a26:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 8006a28:	f107 0310 	add.w	r3, r7, #16
 8006a2c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 8006a2e:	230f      	movs	r3, #15
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 8006a32:	f107 0320 	add.w	r3, r7, #32
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 fd75 	bl	8008528 <hci_send_req>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da01      	bge.n	8006a48 <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 8006a44:	23ff      	movs	r3, #255	; 0xff
 8006a46:	e02c      	b.n	8006aa2 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 8006a48:	7c3b      	ldrb	r3, [r7, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 8006a4e:	7c3b      	ldrb	r3, [r7, #16]
 8006a50:	e027      	b.n	8006aa2 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 8006a52:	7c7a      	ldrb	r2, [r7, #17]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 8006a58:	7cba      	ldrb	r2, [r7, #18]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 8006a5e:	7cfa      	ldrb	r2, [r7, #19]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 8006a64:	7d3a      	ldrb	r2, [r7, #20]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 8006a6a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a72:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 8006a74:	7dfa      	ldrb	r2, [r7, #23]
 8006a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a78:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 8006a7a:	7e3a      	ldrb	r2, [r7, #24]
 8006a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7e:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 8006a80:	7e7a      	ldrb	r2, [r7, #25]
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 8006a86:	7eba      	ldrb	r2, [r7, #26]
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 8006a8c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a94:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 8006a96:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a9e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3738      	adds	r7, #56	; 0x38
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b0ee      	sub	sp, #440	; 0x1b8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006ab4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006abe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006ac8:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8006acc:	4602      	mov	r2, r0
 8006ace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8006ad0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ad4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	2280      	movs	r2, #128	; 0x80
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 f9cf 	bl	8008e84 <memset>
  uint8_t index_input = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 8006aec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8006af0:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8006af4:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006afc:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8006b00:	3301      	adds	r3, #1
 8006b02:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006b06:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f002 f9b8 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8006b14:	233f      	movs	r3, #63	; 0x3f
 8006b16:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 8006b1a:	230d      	movs	r3, #13
 8006b1c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 8006b20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006b24:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 8006b28:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8006b2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8006b3e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fcef 	bl	8008528 <hci_send_req>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da01      	bge.n	8006b54 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8006b50:	23ff      	movs	r3, #255	; 0xff
 8006b52:	e029      	b.n	8006ba8 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8006b54:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b58:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8006b62:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b66:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	e01c      	b.n	8006ba8 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8006b6e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b72:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006b76:	785a      	ldrb	r2, [r3, #1]
 8006b78:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8006b84:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f107 0314 	add.w	r3, r7, #20
 8006b96:	1c99      	adds	r1, r3, #2
 8006b98:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006b9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f002 f9e9 	bl	8008f78 <memcpy>
  return BLE_STATUS_SUCCESS;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b0cc      	sub	sp, #304	; 0x130
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	4602      	mov	r2, r0
 8006bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006bcc:	460a      	mov	r2, r1
 8006bce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bdc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bf2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006bfa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c0c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c14:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c22:	2218      	movs	r2, #24
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 f92c 	bl	8008e84 <memset>
  rq.ogf = 0x3f;
 8006c2c:	233f      	movs	r3, #63	; 0x3f
 8006c2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006c32:	230f      	movs	r3, #15
 8006c34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c40:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006c44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c48:	f107 030b 	add.w	r3, r7, #11
 8006c4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 fc63 	bl	8008528 <hci_send_req>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da01      	bge.n	8006c6c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006c68:	23ff      	movs	r3, #255	; 0xff
 8006c6a:	e00d      	b.n	8006c88 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	e000      	b.n	8006c88 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7818      	ldrb	r0, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006cac:	b299      	uxth	r1, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	78db      	ldrb	r3, [r3, #3]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fa fad4 	bl	8001260 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	7818      	ldrb	r0, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006cdc:	b299      	uxth	r1, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f000 ffca 	bl	8007c7c <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006cf2:	b590      	push	{r4, r7, lr}
 8006cf4:	b087      	sub	sp, #28
 8006cf6:	af02      	add	r7, sp, #8
 8006cf8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	7818      	ldrb	r0, [r3, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d0c:	b299      	uxth	r1, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	78da      	ldrb	r2, [r3, #3]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	889b      	ldrh	r3, [r3, #4]
 8006d16:	b29c      	uxth	r4, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	88db      	ldrh	r3, [r3, #6]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4623      	mov	r3, r4
 8006d22:	f000 ffba 	bl	8007c9a <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 ffbc 	bl	8007cc2 <hci_hardware_error_event>

  return status;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b0a6      	sub	sp, #152	; 0x98
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d74:	e02e      	b.n	8006dd4 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006d76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	3398      	adds	r3, #152	; 0x98
 8006d90:	443b      	add	r3, r7
 8006d92:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006d96:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006da0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3398      	adds	r3, #152	; 0x98
 8006dba:	443b      	add	r3, r7
 8006dbc:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006dc0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de0:	4293      	cmp	r3, r2
 8006de2:	dbc8      	blt.n	8006d76 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f107 0208 	add.w	r2, r7, #8
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 ff71 	bl	8007cd8 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006df6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3798      	adds	r7, #152	; 0x98
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ff6a 	bl	8007cf0 <hci_data_buffer_overflow_event>

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f000 ff5e 	bl	8007d06 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 f97b 	bl	8008164 <aci_blue_initialized_event>

  return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 f975 	bl	800817a <aci_blue_events_lost_event>

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e9e:	b08d      	sub	sp, #52	; 0x34
 8006ea0:	af08      	add	r7, sp, #32
 8006ea2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f893 c000 	ldrb.w	ip, [r3]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006ed8:	68b8      	ldr	r0, [r7, #8]
 8006eda:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006ede:	68bc      	ldr	r4, [r7, #8]
 8006ee0:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006ee4:	68bd      	ldr	r5, [r7, #8]
 8006ee6:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006eea:	68be      	ldr	r6, [r7, #8]
 8006eec:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006ef4:	9307      	str	r3, [sp, #28]
 8006ef6:	9606      	str	r6, [sp, #24]
 8006ef8:	9505      	str	r5, [sp, #20]
 8006efa:	9404      	str	r4, [sp, #16]
 8006efc:	9003      	str	r0, [sp, #12]
 8006efe:	9102      	str	r1, [sp, #8]
 8006f00:	9201      	str	r2, [sp, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	464b      	mov	r3, r9
 8006f08:	4642      	mov	r2, r8
 8006f0a:	4671      	mov	r1, lr
 8006f0c:	4660      	mov	r0, ip
 8006f0e:	f001 f93e 	bl	800818e <aci_blue_crash_info_event>

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006f1e <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	7818      	ldrb	r0, [r3, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	7859      	ldrb	r1, [r3, #1]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f001 f934 	bl	80081aa <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f993 0000 	ldrsb.w	r0, [r3]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f001 f92b 	bl	80081c6 <aci_hal_scan_req_report_event>

  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	7818      	ldrb	r0, [r3, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006f96:	461a      	mov	r2, r3
 8006f98:	f001 f923 	bl	80081e2 <aci_hal_fw_error_event>

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006fb2:	f000 ff32 	bl	8007e1a <aci_gap_limited_discoverable_event>

  return status;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b298      	uxth	r0, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	7899      	ldrb	r1, [r3, #2]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 ff22 	bl	8007e28 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	4618      	mov	r0, r3
 8007006:	f000 ff1e 	bl	8007e46 <aci_gap_pass_key_req_event>

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29b      	uxth	r3, r3
 800702a:	4618      	mov	r0, r3
 800702c:	f000 ff16 	bl	8007e5c <aci_gap_authorization_req_event>

  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8007046:	f000 ff14 	bl	8007e72 <aci_gap_slave_security_initiated_event>

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8007060:	f000 ff0e 	bl	8007e80 <aci_gap_bond_lost_event>

  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	7818      	ldrb	r0, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7859      	ldrb	r1, [r3, #1]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800708e:	f7fa f93f 	bl	8001310 <aci_gap_proc_complete_event>

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 feeb 	bl	8007e8e <aci_gap_addr_not_resolved_event>

  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f000 fedf 	bl	8007ea4 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29a      	uxth	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f000 fed5 	bl	8007ebc <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29a      	uxth	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	b29b      	uxth	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f000 ffce 	bl	80080dc <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b298      	uxth	r0, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007168:	461a      	mov	r2, r3
 800716a:	f000 ffc5 	bl	80080f8 <aci_l2cap_proc_timeout_event>

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717a:	b089      	sub	sp, #36	; 0x24
 800717c:	af04      	add	r7, sp, #16
 800717e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b298      	uxth	r0, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	789c      	ldrb	r4, [r3, #2]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007198:	b29d      	uxth	r5, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80071a0:	b29e      	uxth	r6, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80071b0:	b292      	uxth	r2, r2
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 80071b8:	b289      	uxth	r1, r1
 80071ba:	9102      	str	r1, [sp, #8]
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4633      	mov	r3, r6
 80071c2:	462a      	mov	r2, r5
 80071c4:	4621      	mov	r1, r4
 80071c6:	f000 ffa5 	bl	8008114 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071d4 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80071d4:	b590      	push	{r4, r7, lr}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af02      	add	r7, sp, #8
 80071da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b298      	uxth	r0, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	7899      	ldrb	r1, [r3, #2]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4623      	mov	r3, r4
 8007202:	f000 ff9b 	bl	800813c <aci_l2cap_command_reject_event>

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bd90      	pop	{r4, r7, pc}

08007210 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b087      	sub	sp, #28
 8007214:	af02      	add	r7, sp, #8
 8007216:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b298      	uxth	r0, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	885b      	ldrh	r3, [r3, #2]
 800722a:	b299      	uxth	r1, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	889b      	ldrh	r3, [r3, #4]
 8007230:	b29a      	uxth	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	4623      	mov	r3, r4
 8007240:	f7fa f890 	bl	8001364 <aci_gatt_attribute_modified_event>

  return status;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}

0800724e <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fe37 	bl	8007ed8 <aci_gatt_proc_timeout_event>

  return status;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29a      	uxth	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	b29b      	uxth	r3, r3
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fa f920 	bl	80014d8 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b298      	uxth	r0, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	7899      	ldrb	r1, [r3, #2]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80072c4:	f000 fe13 	bl	8007eee <aci_att_find_info_resp_event>

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b0a6      	sub	sp, #152	; 0x98
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80072e6:	2303      	movs	r3, #3
 80072e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f2:	e02e      	b.n	8007352 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80072f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80072f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	3398      	adds	r3, #152	; 0x98
 800730e:	443b      	add	r3, r7
 8007310:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007314:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007318:	3302      	adds	r3, #2
 800731a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800731e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	3398      	adds	r3, #152	; 0x98
 8007338:	443b      	add	r3, r7
 800733a:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800733e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007342:	3302      	adds	r3, #2
 8007344:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800734c:	3301      	adds	r3, #1
 800734e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007356:	789b      	ldrb	r3, [r3, #2]
 8007358:	461a      	mov	r2, r3
 800735a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800735e:	4293      	cmp	r3, r2
 8007360:	dbc8      	blt.n	80072f4 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8007362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b298      	uxth	r0, r3
 800736a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800736e:	789b      	ldrb	r3, [r3, #2]
 8007370:	f107 0208 	add.w	r2, r7, #8
 8007374:	4619      	mov	r1, r3
 8007376:	f000 fdca 	bl	8007f0e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800737a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800737e:	4618      	mov	r0, r3
 8007380:	3798      	adds	r7, #152	; 0x98
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b298      	uxth	r0, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	7899      	ldrb	r1, [r3, #2]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80073a8:	f000 fdbf 	bl	8007f2a <aci_att_read_by_type_resp_event>

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b298      	uxth	r0, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 80073d4:	461a      	mov	r2, r3
 80073d6:	f000 fdb8 	bl	8007f4a <aci_att_read_resp_event>

  return status;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b298      	uxth	r0, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007402:	461a      	mov	r2, r3
 8007404:	f000 fdaf 	bl	8007f66 <aci_att_read_blob_resp_event>

  return status;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b298      	uxth	r0, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8007430:	461a      	mov	r2, r3
 8007432:	f000 fda6 	bl	8007f82 <aci_att_read_multiple_resp_event>

  return status;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b298      	uxth	r0, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	7899      	ldrb	r1, [r3, #2]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007462:	f000 fd9c 	bl	8007f9e <aci_att_read_by_group_type_resp_event>

  return status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b087      	sub	sp, #28
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b298      	uxth	r0, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	b299      	uxth	r1, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	889b      	ldrh	r3, [r3, #4]
 8007490:	b29a      	uxth	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4623      	mov	r3, r4
 800749e:	f000 fd8e 	bl	8007fbe <aci_att_prepare_write_resp_event>

  return status;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd90      	pop	{r4, r7, pc}

080074ac <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fd8f 	bl	8007fe6 <aci_att_exec_write_resp_event>

  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b298      	uxth	r0, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	885b      	ldrh	r3, [r3, #2]
 80074ec:	b299      	uxth	r1, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 80074f6:	f000 fd81 	bl	8007ffc <aci_gatt_indication_event>

  return status;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b298      	uxth	r0, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	885b      	ldrh	r3, [r3, #2]
 800751e:	b299      	uxth	r1, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007528:	f7f9 ff36 	bl	8001398 <aci_gatt_notification_event>

  return status;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	789b      	ldrb	r3, [r3, #2]
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7f9 ff7e 	bl	8001454 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b298      	uxth	r0, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	7899      	ldrb	r1, [r3, #2]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007582:	b29a      	uxth	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	795b      	ldrb	r3, [r3, #5]
 8007588:	f000 fd48 	bl	800801c <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b298      	uxth	r0, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	885b      	ldrh	r3, [r3, #2]
 80075b0:	b299      	uxth	r1, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80075ba:	f7f9 ff09 	bl	80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b298      	uxth	r0, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	b299      	uxth	r1, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80075ec:	f000 fd2a 	bl	8008044 <aci_gatt_write_permit_req_event>

  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b298      	uxth	r0, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	885b      	ldrh	r3, [r3, #2]
 8007614:	b299      	uxth	r1, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	889b      	ldrh	r3, [r3, #4]
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	f000 fd21 	bl	8008064 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b0a6      	sub	sp, #152	; 0x98
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8007640:	2303      	movs	r3, #3
 8007642:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007646:	2300      	movs	r3, #0
 8007648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800764c:	e019      	b.n	8007682 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800764e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4413      	add	r3, r2
 800765a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	3398      	adds	r3, #152	; 0x98
 8007668:	443b      	add	r3, r7
 800766a:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800766e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007672:	3302      	adds	r3, #2
 8007674:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	461a      	mov	r2, r3
 800768a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800768e:	4293      	cmp	r3, r2
 8007690:	dbdd      	blt.n	800764e <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b298      	uxth	r0, r3
 800769a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800769e:	789b      	ldrb	r3, [r3, #2]
 80076a0:	f107 0208 	add.w	r2, r7, #8
 80076a4:	4619      	mov	r1, r3
 80076a6:	f000 fcec 	bl	8008082 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 80076aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3798      	adds	r7, #152	; 0x98
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7f9 feeb 	bl	80014b0 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fccf 	bl	800809e <aci_gatt_server_confirmation_event>

  return status;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800770a:	b590      	push	{r4, r7, lr}
 800770c:	b087      	sub	sp, #28
 800770e:	af02      	add	r7, sp, #8
 8007710:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b298      	uxth	r0, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	b299      	uxth	r1, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	b29a      	uxth	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	f000 fcbc 	bl	80080b4 <aci_gatt_prepare_write_permit_req_event>

  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	bd90      	pop	{r4, r7, pc}

08007746 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8007746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007748:	b08b      	sub	sp, #44	; 0x2c
 800774a:	af06      	add	r7, sp, #24
 800774c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	781d      	ldrb	r5, [r3, #0]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007760:	b29e      	uxth	r6, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f893 c003 	ldrb.w	ip, [r3, #3]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8007778:	b292      	uxth	r2, r2
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8007780:	b289      	uxth	r1, r1
 8007782:	68b8      	ldr	r0, [r7, #8]
 8007784:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8007788:	b280      	uxth	r0, r0
 800778a:	68bc      	ldr	r4, [r7, #8]
 800778c:	7c64      	ldrb	r4, [r4, #17]
 800778e:	9404      	str	r4, [sp, #16]
 8007790:	9003      	str	r0, [sp, #12]
 8007792:	9102      	str	r1, [sp, #8]
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	4673      	mov	r3, lr
 800779a:	4662      	mov	r2, ip
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	f7f9 fd0e 	bl	80011c0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ae <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b0a4      	sub	sp, #144	; 0x90
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077ce:	e0b3      	b.n	8007938 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80077d0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80077d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4413      	add	r3, r2
 80077e2:	440b      	add	r3, r1
 80077e4:	3301      	adds	r3, #1
 80077e6:	7819      	ldrb	r1, [r3, #0]
 80077e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	3390      	adds	r3, #144	; 0x90
 80077f6:	443b      	add	r3, r7
 80077f8:	3b88      	subs	r3, #136	; 0x88
 80077fa:	460a      	mov	r2, r1
 80077fc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80077fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007802:	3301      	adds	r3, #1
 8007804:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007808:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800780c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4413      	add	r3, r2
 800781a:	440b      	add	r3, r1
 800781c:	3302      	adds	r3, #2
 800781e:	7819      	ldrb	r1, [r3, #0]
 8007820:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	3390      	adds	r3, #144	; 0x90
 800782e:	443b      	add	r3, r7
 8007830:	3b87      	subs	r3, #135	; 0x87
 8007832:	460a      	mov	r2, r1
 8007834:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007836:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800783a:	3301      	adds	r3, #1
 800783c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	1c98      	adds	r0, r3, #2
 8007854:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007866:	4413      	add	r3, r2
 8007868:	3303      	adds	r3, #3
 800786a:	2206      	movs	r2, #6
 800786c:	4619      	mov	r1, r3
 800786e:	f001 fb83 	bl	8008f78 <memcpy>
    size += 6;
 8007872:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007876:	3306      	adds	r3, #6
 8007878:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800787c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007880:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	440b      	add	r3, r1
 8007890:	3309      	adds	r3, #9
 8007892:	7819      	ldrb	r1, [r3, #0]
 8007894:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	3390      	adds	r3, #144	; 0x90
 80078a2:	443b      	add	r3, r7
 80078a4:	3b80      	subs	r3, #128	; 0x80
 80078a6:	460a      	mov	r2, r1
 80078a8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80078aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80078ae:	3301      	adds	r3, #1
 80078b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 80078b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	4413      	add	r3, r2
 80078c2:	3308      	adds	r3, #8
 80078c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078c8:	4413      	add	r3, r2
 80078ca:	1c99      	adds	r1, r3, #2
 80078cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	3390      	adds	r3, #144	; 0x90
 80078da:	443b      	add	r3, r7
 80078dc:	3b7c      	subs	r3, #124	; 0x7c
 80078de:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 80078e0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80078e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4413      	add	r3, r2
 80078f2:	440b      	add	r3, r1
 80078f4:	3309      	adds	r3, #9
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80078fc:	4413      	add	r3, r2
 80078fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007902:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b259      	sxtb	r1, r3
 800790e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3390      	adds	r3, #144	; 0x90
 800791c:	443b      	add	r3, r7
 800791e:	3b78      	subs	r3, #120	; 0x78
 8007920:	460a      	mov	r2, r1
 8007922:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007924:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007928:	3301      	adds	r3, #1
 800792a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800792e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007932:	3301      	adds	r3, #1
 8007934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007944:	4293      	cmp	r3, r2
 8007946:	f6ff af43 	blt.w	80077d0 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800794a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f107 0208 	add.w	r2, r7, #8
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7f9 fc9c 	bl	8001294 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800795c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007960:	4618      	mov	r0, r3
 8007962:	3790      	adds	r7, #144	; 0x90
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b087      	sub	sp, #28
 800796c:	af02      	add	r7, sp, #8
 800796e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	7818      	ldrb	r0, [r3, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007982:	b299      	uxth	r1, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800798a:	b29a      	uxth	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007992:	b29c      	uxth	r4, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800799a:	b29b      	uxth	r3, r3
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4623      	mov	r3, r4
 80079a0:	f000 f9bf 	bl	8007d22 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd90      	pop	{r4, r7, pc}

080079ae <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	7818      	ldrb	r0, [r3, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079c8:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80079ce:	461a      	mov	r2, r3
 80079d0:	f000 f9bb 	bl	8007d4a <hci_le_read_remote_used_features_complete_event>

  return status;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	895b      	ldrh	r3, [r3, #10]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	f000 f9b1 	bl	8007d66 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8007a0e:	b590      	push	{r4, r7, lr}
 8007a10:	b087      	sub	sp, #28
 8007a12:	af02      	add	r7, sp, #8
 8007a14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b298      	uxth	r0, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	b299      	uxth	r1, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	889b      	ldrh	r3, [r3, #4]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	88db      	ldrh	r3, [r3, #6]
 8007a34:	b29c      	uxth	r4, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	891b      	ldrh	r3, [r3, #8]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	4623      	mov	r3, r4
 8007a40:	f000 f99f 	bl	8007d82 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd90      	pop	{r4, r7, pc}

08007a4e <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f000 f99e 	bl	8007daa <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f000 f995 	bl	8007dc2 <hci_le_generate_dhkey_complete_event>

  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007aa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa6:	b08d      	sub	sp, #52	; 0x34
 8007aa8:	af08      	add	r7, sp, #32
 8007aaa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f893 c000 	ldrb.w	ip, [r3]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ac0:	fa1f fe83 	uxth.w	lr, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f893 8003 	ldrb.w	r8, [r3, #3]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007adc:	68b8      	ldr	r0, [r7, #8]
 8007ade:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007ae2:	b280      	uxth	r0, r0
 8007ae4:	68bc      	ldr	r4, [r7, #8]
 8007ae6:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8007aea:	b2a4      	uxth	r4, r4
 8007aec:	68bd      	ldr	r5, [r7, #8]
 8007aee:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007af2:	b2ad      	uxth	r5, r5
 8007af4:	68be      	ldr	r6, [r7, #8]
 8007af6:	7f76      	ldrb	r6, [r6, #29]
 8007af8:	9606      	str	r6, [sp, #24]
 8007afa:	9505      	str	r5, [sp, #20]
 8007afc:	9404      	str	r4, [sp, #16]
 8007afe:	9003      	str	r0, [sp, #12]
 8007b00:	9102      	str	r1, [sp, #8]
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	464b      	mov	r3, r9
 8007b08:	4642      	mov	r2, r8
 8007b0a:	4671      	mov	r1, lr
 8007b0c:	4660      	mov	r0, ip
 8007b0e:	f000 f964 	bl	8007dda <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007b1e <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b0a6      	sub	sp, #152	; 0x98
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b3e:	e085      	b.n	8007c4c <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8007b40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	3398      	adds	r3, #152	; 0x98
 8007b58:	443b      	add	r3, r7
 8007b5a:	3b90      	subs	r3, #144	; 0x90
 8007b5c:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007b5e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007b62:	3301      	adds	r3, #1
 8007b64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8007b68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	4413      	add	r3, r2
 8007b74:	3302      	adds	r3, #2
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	3398      	adds	r3, #152	; 0x98
 8007b80:	443b      	add	r3, r7
 8007b82:	3b8f      	subs	r3, #143	; 0x8f
 8007b84:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007b86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	4413      	add	r3, r2
 8007b9c:	1c98      	adds	r0, r3, #2
 8007b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ba8:	4413      	add	r3, r2
 8007baa:	3303      	adds	r3, #3
 8007bac:	2206      	movs	r2, #6
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f001 f9e2 	bl	8008f78 <memcpy>
    size += 6;
 8007bb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007bb8:	3306      	adds	r3, #6
 8007bba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007bbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4413      	add	r3, r2
 8007bca:	3309      	adds	r3, #9
 8007bcc:	781a      	ldrb	r2, [r3, #0]
 8007bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	3398      	adds	r3, #152	; 0x98
 8007bd6:	443b      	add	r3, r7
 8007bd8:	3b88      	subs	r3, #136	; 0x88
 8007bda:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007bdc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007be0:	3301      	adds	r3, #1
 8007be2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	4413      	add	r3, r2
 8007bf4:	1c58      	adds	r0, r3, #1
 8007bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007c02:	4413      	add	r3, r2
 8007c04:	3302      	adds	r3, #2
 8007c06:	2206      	movs	r2, #6
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f001 f9b5 	bl	8008f78 <memcpy>
    size += 6;
 8007c0e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c12:	3306      	adds	r3, #6
 8007c14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007c18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	4413      	add	r3, r2
 8007c24:	3310      	adds	r3, #16
 8007c26:	f993 2000 	ldrsb.w	r2, [r3]
 8007c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	3398      	adds	r3, #152	; 0x98
 8007c32:	443b      	add	r3, r7
 8007c34:	3b81      	subs	r3, #129	; 0x81
 8007c36:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007c38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c46:	3301      	adds	r3, #1
 8007c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	f6ff af71 	blt.w	8007b40 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8007c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f107 0208 	add.w	r2, r7, #8
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8c9 	bl	8007e02 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007c70:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3798      	adds	r7, #152	; 0x98
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
 8007c86:	460b      	mov	r3, r1
 8007c88:	80bb      	strh	r3, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007c9a:	b490      	push	{r4, r7}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4623      	mov	r3, r4
 8007caa:	71fb      	strb	r3, [r7, #7]
 8007cac:	4603      	mov	r3, r0
 8007cae:	80bb      	strh	r3, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	71bb      	strb	r3, [r7, #6]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc90      	pop	{r4, r7}
 8007cc0:	4770      	bx	lr

08007cc2 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	4603      	mov	r3, r0
 8007cca:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	460a      	mov	r2, r1
 8007d10:	71fb      	strb	r3, [r7, #7]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007d22:	b490      	push	{r4, r7}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4623      	mov	r3, r4
 8007d32:	71fb      	strb	r3, [r7, #7]
 8007d34:	4603      	mov	r3, r0
 8007d36:	80bb      	strh	r3, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc90      	pop	{r4, r7}
 8007d48:	4770      	bx	lr

08007d4a <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	4603      	mov	r3, r0
 8007d52:	603a      	str	r2, [r7, #0]
 8007d54:	71fb      	strb	r3, [r7, #7]
 8007d56:	460b      	mov	r3, r1
 8007d58:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	6039      	str	r1, [r7, #0]
 8007d70:	80fb      	strh	r3, [r7, #6]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007d82:	b490      	push	{r4, r7}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	4604      	mov	r4, r0
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4623      	mov	r3, r4
 8007d92:	80fb      	strh	r3, [r7, #6]
 8007d94:	4603      	mov	r3, r0
 8007d96:	80bb      	strh	r3, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc90      	pop	{r4, r7}
 8007da8:	4770      	bx	lr

08007daa <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4603      	mov	r3, r0
 8007db2:	6039      	str	r1, [r7, #0]
 8007db4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	6039      	str	r1, [r7, #0]
 8007dcc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007dda:	b490      	push	{r4, r7}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	4604      	mov	r4, r0
 8007de2:	4608      	mov	r0, r1
 8007de4:	4611      	mov	r1, r2
 8007de6:	461a      	mov	r2, r3
 8007de8:	4623      	mov	r3, r4
 8007dea:	71fb      	strb	r3, [r7, #7]
 8007dec:	4603      	mov	r3, r0
 8007dee:	80bb      	strh	r3, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	71bb      	strb	r3, [r7, #6]
 8007df4:	4613      	mov	r3, r2
 8007df6:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bc90      	pop	{r4, r7}
 8007e00:	4770      	bx	lr

08007e02 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	6039      	str	r1, [r7, #0]
 8007e0c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	80fb      	strh	r3, [r7, #6]
 8007e32:	460b      	mov	r3, r1
 8007e34:	717b      	strb	r3, [r7, #5]
 8007e36:	4613      	mov	r3, r2
 8007e38:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007e72:	b480      	push	{r7}
 8007e74:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007e76:	bf00      	nop
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	4603      	mov	r3, r0
 8007e96:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	80fb      	strh	r3, [r7, #6]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	603b      	str	r3, [r7, #0]
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	80fb      	strh	r3, [r7, #6]
 8007efa:	460b      	mov	r3, r1
 8007efc:	717b      	strb	r3, [r7, #5]
 8007efe:	4613      	mov	r3, r2
 8007f00:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	4603      	mov	r3, r0
 8007f16:	603a      	str	r2, [r7, #0]
 8007f18:	80fb      	strh	r3, [r7, #6]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4603      	mov	r3, r0
 8007f34:	80fb      	strh	r3, [r7, #6]
 8007f36:	460b      	mov	r3, r1
 8007f38:	717b      	strb	r3, [r7, #5]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	4603      	mov	r3, r0
 8007f52:	603a      	str	r2, [r7, #0]
 8007f54:	80fb      	strh	r3, [r7, #6]
 8007f56:	460b      	mov	r3, r1
 8007f58:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	603a      	str	r2, [r7, #0]
 8007f70:	80fb      	strh	r3, [r7, #6]
 8007f72:	460b      	mov	r3, r1
 8007f74:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	603a      	str	r2, [r7, #0]
 8007f8c:	80fb      	strh	r3, [r7, #6]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	80fb      	strh	r3, [r7, #6]
 8007faa:	460b      	mov	r3, r1
 8007fac:	717b      	strb	r3, [r7, #5]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007fbe:	b490      	push	{r4, r7}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4623      	mov	r3, r4
 8007fce:	80fb      	strh	r3, [r7, #6]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	80bb      	strh	r3, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	807b      	strh	r3, [r7, #2]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc90      	pop	{r4, r7}
 8007fe4:	4770      	bx	lr

08007fe6 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	4603      	mov	r3, r0
 8007fee:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	4603      	mov	r3, r0
 8008006:	81fb      	strh	r3, [r7, #14]
 8008008:	460b      	mov	r3, r1
 800800a:	81bb      	strh	r3, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800801c:	b490      	push	{r4, r7}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	461a      	mov	r2, r3
 800802a:	4623      	mov	r3, r4
 800802c:	80fb      	strh	r3, [r7, #6]
 800802e:	4603      	mov	r3, r0
 8008030:	717b      	strb	r3, [r7, #5]
 8008032:	460b      	mov	r3, r1
 8008034:	807b      	strh	r3, [r7, #2]
 8008036:	4613      	mov	r3, r2
 8008038:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bc90      	pop	{r4, r7}
 8008042:	4770      	bx	lr

08008044 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	4603      	mov	r3, r0
 800804e:	81fb      	strh	r3, [r7, #14]
 8008050:	460b      	mov	r3, r1
 8008052:	81bb      	strh	r3, [r7, #12]
 8008054:	4613      	mov	r3, r2
 8008056:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	80fb      	strh	r3, [r7, #6]
 800806e:	460b      	mov	r3, r1
 8008070:	80bb      	strh	r3, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	4603      	mov	r3, r0
 800808a:	603a      	str	r2, [r7, #0]
 800808c:	80fb      	strh	r3, [r7, #6]
 800808e:	460b      	mov	r3, r1
 8008090:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	4603      	mov	r3, r0
 80080a6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 80080b4:	b490      	push	{r4, r7}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	4623      	mov	r3, r4
 80080c4:	80fb      	strh	r3, [r7, #6]
 80080c6:	4603      	mov	r3, r0
 80080c8:	80bb      	strh	r3, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	807b      	strh	r3, [r7, #2]
 80080ce:	4613      	mov	r3, r2
 80080d0:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc90      	pop	{r4, r7}
 80080da:	4770      	bx	lr

080080dc <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	460a      	mov	r2, r1
 80080e6:	80fb      	strh	r3, [r7, #6]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	603a      	str	r2, [r7, #0]
 8008102:	80fb      	strh	r3, [r7, #6]
 8008104:	460b      	mov	r3, r1
 8008106:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8008114:	b490      	push	{r4, r7}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	4623      	mov	r3, r4
 8008124:	80fb      	strh	r3, [r7, #6]
 8008126:	4603      	mov	r3, r0
 8008128:	717b      	strb	r3, [r7, #5]
 800812a:	460b      	mov	r3, r1
 800812c:	807b      	strh	r3, [r7, #2]
 800812e:	4613      	mov	r3, r2
 8008130:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bc90      	pop	{r4, r7}
 800813a:	4770      	bx	lr

0800813c <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800813c:	b490      	push	{r4, r7}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	4611      	mov	r1, r2
 8008148:	461a      	mov	r2, r3
 800814a:	4623      	mov	r3, r4
 800814c:	80fb      	strh	r3, [r7, #6]
 800814e:	4603      	mov	r3, r0
 8008150:	717b      	strb	r3, [r7, #5]
 8008152:	460b      	mov	r3, r1
 8008154:	807b      	strh	r3, [r7, #2]
 8008156:	4613      	mov	r3, r2
 8008158:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bc90      	pop	{r4, r7}
 8008162:	4770      	bx	lr

08008164 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	4603      	mov	r3, r0
 80081b2:	603a      	str	r2, [r7, #0]
 80081b4:	71fb      	strb	r3, [r7, #7]
 80081b6:	460b      	mov	r3, r1
 80081b8:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	4603      	mov	r3, r0
 80081ce:	603a      	str	r2, [r7, #0]
 80081d0:	71fb      	strb	r3, [r7, #7]
 80081d2:	460b      	mov	r3, r1
 80081d4:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	4603      	mov	r3, r0
 80081ea:	603a      	str	r2, [r7, #0]
 80081ec:	71fb      	strb	r3, [r7, #7]
 80081ee:	460b      	mov	r3, r1
 80081f0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b088      	sub	sp, #32
 8008202:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	2218      	movs	r2, #24
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fe37 	bl	8008e84 <memset>
  rq.ogf = 0x03;
 8008216:	2303      	movs	r3, #3
 8008218:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800821a:	2303      	movs	r3, #3
 800821c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800821e:	1dfb      	adds	r3, r7, #7
 8008220:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008222:	2301      	movs	r3, #1
 8008224:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008226:	f107 0308 	add.w	r3, r7, #8
 800822a:	2100      	movs	r1, #0
 800822c:	4618      	mov	r0, r3
 800822e:	f000 f97b 	bl	8008528 <hci_send_req>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	da01      	bge.n	800823c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008238:	23ff      	movs	r3, #255	; 0xff
 800823a:	e005      	b.n	8008248 <hci_reset+0x4a>
  if (status) {
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <hci_reset+0x48>
    return status;
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	e000      	b.n	8008248 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b0cc      	sub	sp, #304	; 0x130
 8008254:	af00      	add	r7, sp, #0
 8008256:	4602      	mov	r2, r0
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008260:	6019      	str	r1, [r3, #0]
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800826a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008274:	f107 0308 	add.w	r3, r7, #8
 8008278:	2204      	movs	r2, #4
 800827a:	2100      	movs	r1, #0
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fe01 	bl	8008e84 <memset>
  uint8_t index_input = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008290:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008298:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800829c:	3302      	adds	r3, #2
 800829e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082a6:	2218      	movs	r2, #24
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fdea 	bl	8008e84 <memset>
  rq.ogf = 0x05;
 80082b0:	2305      	movs	r3, #5
 80082b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 80082b6:	2305      	movs	r3, #5
 80082b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082c4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80082c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80082cc:	f107 0308 	add.w	r3, r7, #8
 80082d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80082d4:	2304      	movs	r3, #4
 80082d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80082da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082de:	2100      	movs	r1, #0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f921 	bl	8008528 <hci_send_req>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da01      	bge.n	80082f0 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 80082ec:	23ff      	movs	r3, #255	; 0xff
 80082ee:	e019      	b.n	8008324 <hci_read_rssi+0xd4>
  if (resp.Status) {
 80082f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <hci_read_rssi+0xba>
    return resp.Status;
 80082fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008302:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	e00c      	b.n	8008324 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008312:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8008316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3308      	adds	r3, #8
 800833a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d001      	beq.n	8008348 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008344:	2301      	movs	r3, #1
 8008346:	e00c      	b.n	8008362 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3302      	adds	r3, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008356:	3b03      	subs	r3, #3
 8008358:	429a      	cmp	r2, r3
 800835a:	d001      	beq.n	8008360 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800835c:	2302      	movs	r3, #2
 800835e:	e000      	b.n	8008362 <verify_packet+0x34>
  
  return 0;      
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
	...

08008370 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b0a6      	sub	sp, #152	; 0x98
 8008374:	af00      	add	r7, sp, #0
 8008376:	607b      	str	r3, [r7, #4]
 8008378:	4603      	mov	r3, r0
 800837a:	81fb      	strh	r3, [r7, #14]
 800837c:	460b      	mov	r3, r1
 800837e:	81bb      	strh	r3, [r7, #12]
 8008380:	4613      	mov	r3, r2
 8008382:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800838c:	b21a      	sxth	r2, r3
 800838e:	89fb      	ldrh	r3, [r7, #14]
 8008390:	029b      	lsls	r3, r3, #10
 8008392:	b21b      	sxth	r3, r3
 8008394:	4313      	orrs	r3, r2
 8008396:	b21b      	sxth	r3, r3
 8008398:	b29b      	uxth	r3, r3
 800839a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80083a0:	2301      	movs	r3, #1
 80083a2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80083a4:	f107 0318 	add.w	r3, r7, #24
 80083a8:	3301      	adds	r3, #1
 80083aa:	461a      	mov	r2, r3
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	8819      	ldrh	r1, [r3, #0]
 80083b2:	789b      	ldrb	r3, [r3, #2]
 80083b4:	8011      	strh	r1, [r2, #0]
 80083b6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80083b8:	f107 0318 	add.w	r3, r7, #24
 80083bc:	3304      	adds	r3, #4
 80083be:	7afa      	ldrb	r2, [r7, #11]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fdd8 	bl	8008f78 <memcpy>
  
  if (hciContext.io.Send)
 80083c8:	4b08      	ldr	r3, [pc, #32]	; (80083ec <send_cmd+0x7c>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <send_cmd+0x7c>)
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	7afa      	ldrb	r2, [r7, #11]
 80083d6:	b292      	uxth	r2, r2
 80083d8:	3204      	adds	r2, #4
 80083da:	b291      	uxth	r1, r2
 80083dc:	f107 0218 	add.w	r2, r7, #24
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
  }
}
 80083e4:	bf00      	nop
 80083e6:	3798      	adds	r7, #152	; 0x98
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	200008bc 	.word	0x200008bc

080083f0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80083fa:	e00a      	b.n	8008412 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	4619      	mov	r1, r3
 8008402:	6838      	ldr	r0, [r7, #0]
 8008404:	f000 fae8 	bl	80089d8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa4f 	bl	80088b0 <list_insert_head>
  while (!list_is_empty(src_list))
 8008412:	6838      	ldr	r0, [r7, #0]
 8008414:	f000 fa2a 	bl	800886c <list_is_empty>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0ee      	beq.n	80083fc <move_list+0xc>
  }
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800842e:	e009      	b.n	8008444 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008430:	1d3b      	adds	r3, r7, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4809      	ldr	r0, [pc, #36]	; (800845c <free_event_list+0x34>)
 8008436:	f000 faa8 	bl	800898a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4619      	mov	r1, r3
 800843e:	4808      	ldr	r0, [pc, #32]	; (8008460 <free_event_list+0x38>)
 8008440:	f000 fa5c 	bl	80088fc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008444:	4806      	ldr	r0, [pc, #24]	; (8008460 <free_event_list+0x38>)
 8008446:	f000 faee 	bl	8008a26 <list_get_size>
 800844a:	4603      	mov	r3, r0
 800844c:	2b04      	cmp	r3, #4
 800844e:	ddef      	ble.n	8008430 <free_event_list+0x8>
  }
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000033c 	.word	0x2000033c
 8008460:	20000334 	.word	0x20000334

08008464 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <hci_init+0x74>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800847a:	4818      	ldr	r0, [pc, #96]	; (80084dc <hci_init+0x78>)
 800847c:	f000 f9e6 	bl	800884c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008480:	4817      	ldr	r0, [pc, #92]	; (80084e0 <hci_init+0x7c>)
 8008482:	f000 f9e3 	bl	800884c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008486:	f7f9 fb0d 	bl	8001aa4 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
 800848e:	e00c      	b.n	80084aa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	228c      	movs	r2, #140	; 0x8c
 8008494:	fb02 f303 	mul.w	r3, r2, r3
 8008498:	4a12      	ldr	r2, [pc, #72]	; (80084e4 <hci_init+0x80>)
 800849a:	4413      	add	r3, r2
 800849c:	4619      	mov	r1, r3
 800849e:	480f      	ldr	r0, [pc, #60]	; (80084dc <hci_init+0x78>)
 80084a0:	f000 fa2c 	bl	80088fc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	3301      	adds	r3, #1
 80084a8:	73fb      	strb	r3, [r7, #15]
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d9ef      	bls.n	8008490 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <hci_init+0x74>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <hci_init+0x5c>
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <hci_init+0x74>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2000      	movs	r0, #0
 80084be:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <hci_init+0x74>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <hci_init+0x6a>
 80084c8:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <hci_init+0x74>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	4798      	blx	r3
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200008bc 	.word	0x200008bc
 80084dc:	20000334 	.word	0x20000334
 80084e0:	2000033c 	.word	0x2000033c
 80084e4:	20000344 	.word	0x20000344

080084e8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a0b      	ldr	r2, [pc, #44]	; (8008524 <hci_register_io_bus+0x3c>)
 80084f6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	4a09      	ldr	r2, [pc, #36]	; (8008524 <hci_register_io_bus+0x3c>)
 80084fe:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	4a07      	ldr	r2, [pc, #28]	; (8008524 <hci_register_io_bus+0x3c>)
 8008506:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	4a05      	ldr	r2, [pc, #20]	; (8008524 <hci_register_io_bus+0x3c>)
 800850e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4a03      	ldr	r2, [pc, #12]	; (8008524 <hci_register_io_bus+0x3c>)
 8008516:	6093      	str	r3, [r2, #8]
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	200008bc 	.word	0x200008bc

08008528 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	; 0x38
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	b21b      	sxth	r3, r3
 800853a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800853e:	b21a      	sxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	029b      	lsls	r3, r3, #10
 8008546:	b21b      	sxth	r3, r3
 8008548:	4313      	orrs	r3, r2
 800854a:	b21b      	sxth	r3, r3
 800854c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f978 	bl	800884c <list_init_head>

  free_event_list();
 800855c:	f7ff ff64 	bl	8008428 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8818      	ldrh	r0, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8859      	ldrh	r1, [r3, #2]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f7ff fefd 	bl	8008370 <send_cmd>
  
  if (async)
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <hci_send_req+0x58>
  {
    return 0;
 800857c:	2300      	movs	r3, #0
 800857e:	e0e2      	b.n	8008746 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008580:	f7fa f85e 	bl	8002640 <HAL_GetTick>
 8008584:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008586:	f7fa f85b 	bl	8002640 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008594:	f200 80b3 	bhi.w	80086fe <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008598:	486d      	ldr	r0, [pc, #436]	; (8008750 <hci_send_req+0x228>)
 800859a:	f000 f967 	bl	800886c <list_is_empty>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d000      	beq.n	80085a6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80085a4:	e7ef      	b.n	8008586 <hci_send_req+0x5e>
      {
        break;
 80085a6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	4868      	ldr	r0, [pc, #416]	; (8008750 <hci_send_req+0x228>)
 80085b0:	f000 f9eb 	bl	800898a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3308      	adds	r3, #8
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d17f      	bne.n	80086c2 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	3301      	adds	r3, #1
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3308      	adds	r3, #8
 80085cc:	3303      	adds	r3, #3
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80085d6:	3b03      	subs	r3, #3
 80085d8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b3e      	cmp	r3, #62	; 0x3e
 80085e0:	d04c      	beq.n	800867c <hci_send_req+0x154>
 80085e2:	2b3e      	cmp	r3, #62	; 0x3e
 80085e4:	dc68      	bgt.n	80086b8 <hci_send_req+0x190>
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	f000 808b 	beq.w	8008702 <hci_send_req+0x1da>
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	dc63      	bgt.n	80086b8 <hci_send_req+0x190>
 80085f0:	2b0e      	cmp	r3, #14
 80085f2:	d023      	beq.n	800863c <hci_send_req+0x114>
 80085f4:	2b0f      	cmp	r3, #15
 80085f6:	d15f      	bne.n	80086b8 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b29b      	uxth	r3, r3
 8008602:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008604:	429a      	cmp	r2, r3
 8008606:	d17e      	bne.n	8008706 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b0f      	cmp	r3, #15
 800860e:	d004      	beq.n	800861a <hci_send_req+0xf2>
          if (cs->status) {
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d051      	beq.n	80086bc <hci_send_req+0x194>
            goto failed;
 8008618:	e078      	b.n	800870c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	429a      	cmp	r2, r3
 8008622:	bf28      	it	cs
 8008624:	461a      	movcs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6918      	ldr	r0, [r3, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	461a      	mov	r2, r3
 8008634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008636:	f000 fc9f 	bl	8008f78 <memcpy>
        goto done;
 800863a:	e078      	b.n	800872e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008646:	b29b      	uxth	r3, r3
 8008648:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800864a:	429a      	cmp	r2, r3
 800864c:	d15d      	bne.n	800870a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	3303      	adds	r3, #3
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	3b03      	subs	r3, #3
 8008658:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695a      	ldr	r2, [r3, #20]
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	429a      	cmp	r2, r3
 8008662:	bf28      	it	cs
 8008664:	461a      	movcs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6918      	ldr	r0, [r3, #16]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	461a      	mov	r2, r3
 8008674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008676:	f000 fc7f 	bl	8008f78 <memcpy>
        goto done;
 800867a:	e058      	b.n	800872e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d118      	bne.n	80086c0 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3b01      	subs	r3, #1
 8008692:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	695a      	ldr	r2, [r3, #20]
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	429a      	cmp	r2, r3
 800869c:	bf28      	it	cs
 800869e:	461a      	movcs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6918      	ldr	r0, [r3, #16]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	461a      	mov	r2, r3
 80086b2:	f000 fc61 	bl	8008f78 <memcpy>
        goto done;
 80086b6:	e03a      	b.n	800872e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <hci_send_req+0x19a>
          break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <hci_send_req+0x19a>
          break;
 80086c0:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80086c2:	4824      	ldr	r0, [pc, #144]	; (8008754 <hci_send_req+0x22c>)
 80086c4:	f000 f8d2 	bl	800886c <list_is_empty>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00d      	beq.n	80086ea <hci_send_req+0x1c2>
 80086ce:	4820      	ldr	r0, [pc, #128]	; (8008750 <hci_send_req+0x228>)
 80086d0:	f000 f8cc 	bl	800886c <list_is_empty>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	4619      	mov	r1, r3
 80086de:	481d      	ldr	r0, [pc, #116]	; (8008754 <hci_send_req+0x22c>)
 80086e0:	f000 f90c 	bl	80088fc <list_insert_tail>
      hciReadPacket=NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	e008      	b.n	80086fc <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	f107 0308 	add.w	r3, r7, #8
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f902 	bl	80088fc <list_insert_tail>
      hciReadPacket=NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	613b      	str	r3, [r7, #16]
  {
 80086fc:	e740      	b.n	8008580 <hci_send_req+0x58>
        goto failed;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <hci_send_req+0x1e4>
        goto failed;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <hci_send_req+0x1e4>
          goto failed;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <hci_send_req+0x1e4>
          goto failed;
 800870a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4619      	mov	r1, r3
 8008716:	480f      	ldr	r0, [pc, #60]	; (8008754 <hci_send_req+0x22c>)
 8008718:	f000 f8ca 	bl	80088b0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4619      	mov	r1, r3
 8008722:	480b      	ldr	r0, [pc, #44]	; (8008750 <hci_send_req+0x228>)
 8008724:	f7ff fe64 	bl	80083f0 <move_list>

  return -1;
 8008728:	f04f 33ff 	mov.w	r3, #4294967295
 800872c:	e00b      	b.n	8008746 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	4619      	mov	r1, r3
 8008732:	4808      	ldr	r0, [pc, #32]	; (8008754 <hci_send_req+0x22c>)
 8008734:	f000 f8bc 	bl	80088b0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	4619      	mov	r1, r3
 800873e:	4804      	ldr	r0, [pc, #16]	; (8008750 <hci_send_req+0x228>)
 8008740:	f7ff fe56 	bl	80083f0 <move_list>

  return 0;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3738      	adds	r7, #56	; 0x38
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	2000033c 	.word	0x2000033c
 8008754:	20000334 	.word	0x20000334

08008758 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008762:	e013      	b.n	800878c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	4619      	mov	r1, r3
 8008768:	480e      	ldr	r0, [pc, #56]	; (80087a4 <hci_user_evt_proc+0x4c>)
 800876a:	f000 f90e 	bl	800898a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800876e:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <hci_user_evt_proc+0x50>)
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <hci_user_evt_proc+0x50>)
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	3208      	adds	r2, #8
 800877e:	4610      	mov	r0, r2
 8008780:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4619      	mov	r1, r3
 8008786:	4809      	ldr	r0, [pc, #36]	; (80087ac <hci_user_evt_proc+0x54>)
 8008788:	f000 f8b8 	bl	80088fc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800878c:	4805      	ldr	r0, [pc, #20]	; (80087a4 <hci_user_evt_proc+0x4c>)
 800878e:	f000 f86d 	bl	800886c <list_is_empty>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0e5      	beq.n	8008764 <hci_user_evt_proc+0xc>
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	2000033c 	.word	0x2000033c
 80087a8:	200008bc 	.word	0x200008bc
 80087ac:	20000334 	.word	0x20000334

080087b0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80087c0:	481f      	ldr	r0, [pc, #124]	; (8008840 <hci_notify_asynch_evt+0x90>)
 80087c2:	f000 f853 	bl	800886c <list_is_empty>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d132      	bne.n	8008832 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80087cc:	f107 030c 	add.w	r3, r7, #12
 80087d0:	4619      	mov	r1, r3
 80087d2:	481b      	ldr	r0, [pc, #108]	; (8008840 <hci_notify_asynch_evt+0x90>)
 80087d4:	f000 f8d9 	bl	800898a <list_remove_head>
    
    if (hciContext.io.Receive)
 80087d8:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <hci_notify_asynch_evt+0x94>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02a      	beq.n	8008836 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80087e0:	4b18      	ldr	r3, [pc, #96]	; (8008844 <hci_notify_asynch_evt+0x94>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	3208      	adds	r2, #8
 80087e8:	2180      	movs	r1, #128	; 0x80
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80087f2:	7cfb      	ldrb	r3, [r7, #19]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d016      	beq.n	8008826 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	7cfa      	ldrb	r2, [r7, #19]
 80087fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fd93 	bl	800832e <verify_packet>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4619      	mov	r1, r3
 8008812:	480d      	ldr	r0, [pc, #52]	; (8008848 <hci_notify_asynch_evt+0x98>)
 8008814:	f000 f872 	bl	80088fc <list_insert_tail>
 8008818:	e00d      	b.n	8008836 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4619      	mov	r1, r3
 800881e:	4808      	ldr	r0, [pc, #32]	; (8008840 <hci_notify_asynch_evt+0x90>)
 8008820:	f000 f846 	bl	80088b0 <list_insert_head>
 8008824:	e007      	b.n	8008836 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4619      	mov	r1, r3
 800882a:	4805      	ldr	r0, [pc, #20]	; (8008840 <hci_notify_asynch_evt+0x90>)
 800882c:	f000 f840 	bl	80088b0 <list_insert_head>
 8008830:	e001      	b.n	8008836 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008832:	2301      	movs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008836:	697b      	ldr	r3, [r7, #20]
  
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000334 	.word	0x20000334
 8008844:	200008bc 	.word	0x200008bc
 8008848:	2000033c 	.word	0x2000033c

0800884c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	605a      	str	r2, [r3, #4]
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008874:	f3ef 8310 	mrs	r3, PRIMASK
 8008878:	60fb      	str	r3, [r7, #12]
  return(result);
 800887a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800887c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800887e:	b672      	cpsid	i
}
 8008880:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d102      	bne.n	8008892 <list_is_empty+0x26>
  {
    return_value = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
 8008890:	e001      	b.n	8008896 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f383 8810 	msr	PRIMASK, r3
}
 80088a0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ba:	f3ef 8310 	mrs	r3, PRIMASK
 80088be:	60fb      	str	r3, [r7, #12]
  return(result);
 80088c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088c4:	b672      	cpsid	i
}
 80088c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f383 8810 	msr	PRIMASK, r3
}
 80088ee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008906:	f3ef 8310 	mrs	r3, PRIMASK
 800890a:	60fb      	str	r3, [r7, #12]
  return(result);
 800890c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800890e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008910:	b672      	cpsid	i
}
 8008912:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f383 8810 	msr	PRIMASK, r3
}
 800893a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	60fb      	str	r3, [r7, #12]
  return(result);
 8008956:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800895a:	b672      	cpsid	i
}
 800895c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6852      	ldr	r2, [r2, #4]
 8008970:	605a      	str	r2, [r3, #4]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f383 8810 	msr	PRIMASK, r3
}
 800897c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800897e:	bf00      	nop
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008994:	f3ef 8310 	mrs	r3, PRIMASK
 8008998:	60fb      	str	r3, [r7, #12]
  return(result);
 800899a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800899c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800899e:	b672      	cpsid	i
}
 80089a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff ffca 	bl	8008948 <list_remove_node>
  (*node)->next = NULL;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	605a      	str	r2, [r3, #4]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f383 8810 	msr	PRIMASK, r3
}
 80089ce:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80089d0:	bf00      	nop
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e2:	f3ef 8310 	mrs	r3, PRIMASK
 80089e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089ec:	b672      	cpsid	i
}
 80089ee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff ffa3 	bl	8008948 <list_remove_node>
  (*node)->next = NULL;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	605a      	str	r2, [r3, #4]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f383 8810 	msr	PRIMASK, r3
}
 8008a1c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008a1e:	bf00      	nop
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b089      	sub	sp, #36	; 0x24
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a32:	f3ef 8310 	mrs	r3, PRIMASK
 8008a36:	613b      	str	r3, [r7, #16]
  return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a3c:	b672      	cpsid	i
}
 8008a3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008a46:	e005      	b.n	8008a54 <list_get_size+0x2e>
  {
    size++;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d1f5      	bne.n	8008a48 <list_get_size+0x22>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f383 8810 	msr	PRIMASK, r3
}
 8008a66:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008a68:	69fb      	ldr	r3, [r7, #28]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3724      	adds	r7, #36	; 0x24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <std>:
 8008a78:	2300      	movs	r3, #0
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a86:	6083      	str	r3, [r0, #8]
 8008a88:	8181      	strh	r1, [r0, #12]
 8008a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a8c:	81c2      	strh	r2, [r0, #14]
 8008a8e:	6183      	str	r3, [r0, #24]
 8008a90:	4619      	mov	r1, r3
 8008a92:	2208      	movs	r2, #8
 8008a94:	305c      	adds	r0, #92	; 0x5c
 8008a96:	f000 f9f5 	bl	8008e84 <memset>
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <std+0x38>)
 8008a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x3c>)
 8008aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x40>)
 8008aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x44>)
 8008aa8:	6224      	str	r4, [r4, #32]
 8008aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	08008cb5 	.word	0x08008cb5
 8008ab4:	08008cd7 	.word	0x08008cd7
 8008ab8:	08008d0f 	.word	0x08008d0f
 8008abc:	08008d33 	.word	0x08008d33

08008ac0 <stdio_exit_handler>:
 8008ac0:	4a02      	ldr	r2, [pc, #8]	; (8008acc <stdio_exit_handler+0xc>)
 8008ac2:	4903      	ldr	r1, [pc, #12]	; (8008ad0 <stdio_exit_handler+0x10>)
 8008ac4:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <stdio_exit_handler+0x14>)
 8008ac6:	f000 b869 	b.w	8008b9c <_fwalk_sglue>
 8008aca:	bf00      	nop
 8008acc:	20000028 	.word	0x20000028
 8008ad0:	08009839 	.word	0x08009839
 8008ad4:	20000034 	.word	0x20000034

08008ad8 <cleanup_stdio>:
 8008ad8:	6841      	ldr	r1, [r0, #4]
 8008ada:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <cleanup_stdio+0x34>)
 8008adc:	4299      	cmp	r1, r3
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	d001      	beq.n	8008ae8 <cleanup_stdio+0x10>
 8008ae4:	f000 fea8 	bl	8009838 <_fflush_r>
 8008ae8:	68a1      	ldr	r1, [r4, #8]
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <cleanup_stdio+0x38>)
 8008aec:	4299      	cmp	r1, r3
 8008aee:	d002      	beq.n	8008af6 <cleanup_stdio+0x1e>
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fea1 	bl	8009838 <_fflush_r>
 8008af6:	68e1      	ldr	r1, [r4, #12]
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <cleanup_stdio+0x3c>)
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d004      	beq.n	8008b08 <cleanup_stdio+0x30>
 8008afe:	4620      	mov	r0, r4
 8008b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b04:	f000 be98 	b.w	8009838 <_fflush_r>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200008dc 	.word	0x200008dc
 8008b10:	20000944 	.word	0x20000944
 8008b14:	200009ac 	.word	0x200009ac

08008b18 <global_stdio_init.part.0>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <global_stdio_init.part.0+0x30>)
 8008b1c:	4c0b      	ldr	r4, [pc, #44]	; (8008b4c <global_stdio_init.part.0+0x34>)
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <global_stdio_init.part.0+0x38>)
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	2200      	movs	r2, #0
 8008b26:	2104      	movs	r1, #4
 8008b28:	f7ff ffa6 	bl	8008a78 <std>
 8008b2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b30:	2201      	movs	r2, #1
 8008b32:	2109      	movs	r1, #9
 8008b34:	f7ff ffa0 	bl	8008a78 <std>
 8008b38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b42:	2112      	movs	r1, #18
 8008b44:	f7ff bf98 	b.w	8008a78 <std>
 8008b48:	20000a14 	.word	0x20000a14
 8008b4c:	200008dc 	.word	0x200008dc
 8008b50:	08008ac1 	.word	0x08008ac1

08008b54 <__sfp_lock_acquire>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__sfp_lock_acquire+0x8>)
 8008b56:	f000 ba0d 	b.w	8008f74 <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20000a1d 	.word	0x20000a1d

08008b60 <__sfp_lock_release>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__sfp_lock_release+0x8>)
 8008b62:	f000 ba08 	b.w	8008f76 <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	20000a1d 	.word	0x20000a1d

08008b6c <__sinit>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	4604      	mov	r4, r0
 8008b70:	f7ff fff0 	bl	8008b54 <__sfp_lock_acquire>
 8008b74:	6a23      	ldr	r3, [r4, #32]
 8008b76:	b11b      	cbz	r3, 8008b80 <__sinit+0x14>
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f7ff bff0 	b.w	8008b60 <__sfp_lock_release>
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <__sinit+0x28>)
 8008b82:	6223      	str	r3, [r4, #32]
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <__sinit+0x2c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f5      	bne.n	8008b78 <__sinit+0xc>
 8008b8c:	f7ff ffc4 	bl	8008b18 <global_stdio_init.part.0>
 8008b90:	e7f2      	b.n	8008b78 <__sinit+0xc>
 8008b92:	bf00      	nop
 8008b94:	08008ad9 	.word	0x08008ad9
 8008b98:	20000a14 	.word	0x20000a14

08008b9c <_fwalk_sglue>:
 8008b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	4688      	mov	r8, r1
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bac:	f1b9 0901 	subs.w	r9, r9, #1
 8008bb0:	d505      	bpl.n	8008bbe <_fwalk_sglue+0x22>
 8008bb2:	6824      	ldr	r4, [r4, #0]
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	d1f7      	bne.n	8008ba8 <_fwalk_sglue+0xc>
 8008bb8:	4630      	mov	r0, r6
 8008bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d907      	bls.n	8008bd4 <_fwalk_sglue+0x38>
 8008bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	d003      	beq.n	8008bd4 <_fwalk_sglue+0x38>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	4638      	mov	r0, r7
 8008bd0:	47c0      	blx	r8
 8008bd2:	4306      	orrs	r6, r0
 8008bd4:	3568      	adds	r5, #104	; 0x68
 8008bd6:	e7e9      	b.n	8008bac <_fwalk_sglue+0x10>

08008bd8 <iprintf>:
 8008bd8:	b40f      	push	{r0, r1, r2, r3}
 8008bda:	b507      	push	{r0, r1, r2, lr}
 8008bdc:	4906      	ldr	r1, [pc, #24]	; (8008bf8 <iprintf+0x20>)
 8008bde:	ab04      	add	r3, sp, #16
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be6:	6881      	ldr	r1, [r0, #8]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f000 faf5 	bl	80091d8 <_vfiprintf_r>
 8008bee:	b003      	add	sp, #12
 8008bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf4:	b004      	add	sp, #16
 8008bf6:	4770      	bx	lr
 8008bf8:	20000080 	.word	0x20000080

08008bfc <_puts_r>:
 8008bfc:	6a03      	ldr	r3, [r0, #32]
 8008bfe:	b570      	push	{r4, r5, r6, lr}
 8008c00:	6884      	ldr	r4, [r0, #8]
 8008c02:	4605      	mov	r5, r0
 8008c04:	460e      	mov	r6, r1
 8008c06:	b90b      	cbnz	r3, 8008c0c <_puts_r+0x10>
 8008c08:	f7ff ffb0 	bl	8008b6c <__sinit>
 8008c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c0e:	07db      	lsls	r3, r3, #31
 8008c10:	d405      	bmi.n	8008c1e <_puts_r+0x22>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	0598      	lsls	r0, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_puts_r+0x22>
 8008c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1a:	f000 f9ab 	bl	8008f74 <__retarget_lock_acquire_recursive>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	0719      	lsls	r1, r3, #28
 8008c22:	d513      	bpl.n	8008c4c <_puts_r+0x50>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	b18b      	cbz	r3, 8008c4c <_puts_r+0x50>
 8008c28:	3e01      	subs	r6, #1
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c30:	3b01      	subs	r3, #1
 8008c32:	60a3      	str	r3, [r4, #8]
 8008c34:	b9e9      	cbnz	r1, 8008c72 <_puts_r+0x76>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da2e      	bge.n	8008c98 <_puts_r+0x9c>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	210a      	movs	r1, #10
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f87b 	bl	8008d3a <__swbuf_r>
 8008c44:	3001      	adds	r0, #1
 8008c46:	d007      	beq.n	8008c58 <_puts_r+0x5c>
 8008c48:	250a      	movs	r5, #10
 8008c4a:	e007      	b.n	8008c5c <_puts_r+0x60>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f8b0 	bl	8008db4 <__swsetup_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0e7      	beq.n	8008c28 <_puts_r+0x2c>
 8008c58:	f04f 35ff 	mov.w	r5, #4294967295
 8008c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_puts_r+0x72>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	059b      	lsls	r3, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_puts_r+0x72>
 8008c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6a:	f000 f984 	bl	8008f76 <__retarget_lock_release_recursive>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da04      	bge.n	8008c80 <_puts_r+0x84>
 8008c76:	69a2      	ldr	r2, [r4, #24]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	dc06      	bgt.n	8008c8a <_puts_r+0x8e>
 8008c7c:	290a      	cmp	r1, #10
 8008c7e:	d004      	beq.n	8008c8a <_puts_r+0x8e>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	7019      	strb	r1, [r3, #0]
 8008c88:	e7cf      	b.n	8008c2a <_puts_r+0x2e>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 f854 	bl	8008d3a <__swbuf_r>
 8008c92:	3001      	adds	r0, #1
 8008c94:	d1c9      	bne.n	8008c2a <_puts_r+0x2e>
 8008c96:	e7df      	b.n	8008c58 <_puts_r+0x5c>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	250a      	movs	r5, #10
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	701d      	strb	r5, [r3, #0]
 8008ca2:	e7db      	b.n	8008c5c <_puts_r+0x60>

08008ca4 <puts>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	; (8008cb0 <puts+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f7ff bfa7 	b.w	8008bfc <_puts_r>
 8008cae:	bf00      	nop
 8008cb0:	20000080 	.word	0x20000080

08008cb4 <__sread>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbc:	f000 f90c 	bl	8008ed8 <_read_r>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	bfab      	itete	ge
 8008cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cc8:	181b      	addge	r3, r3, r0
 8008cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cce:	bfac      	ite	ge
 8008cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cd2:	81a3      	strhlt	r3, [r4, #12]
 8008cd4:	bd10      	pop	{r4, pc}

08008cd6 <__swrite>:
 8008cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cda:	461f      	mov	r7, r3
 8008cdc:	898b      	ldrh	r3, [r1, #12]
 8008cde:	05db      	lsls	r3, r3, #23
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	4616      	mov	r6, r2
 8008ce6:	d505      	bpl.n	8008cf4 <__swrite+0x1e>
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	2302      	movs	r3, #2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f000 f8e0 	bl	8008eb4 <_lseek_r>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	4632      	mov	r2, r6
 8008d02:	463b      	mov	r3, r7
 8008d04:	4628      	mov	r0, r5
 8008d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	f000 b8f7 	b.w	8008efc <_write_r>

08008d0e <__sseek>:
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d16:	f000 f8cd 	bl	8008eb4 <_lseek_r>
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	bf15      	itete	ne
 8008d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d2a:	81a3      	strheq	r3, [r4, #12]
 8008d2c:	bf18      	it	ne
 8008d2e:	81a3      	strhne	r3, [r4, #12]
 8008d30:	bd10      	pop	{r4, pc}

08008d32 <__sclose>:
 8008d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d36:	f000 b8ad 	b.w	8008e94 <_close_r>

08008d3a <__swbuf_r>:
 8008d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	4614      	mov	r4, r2
 8008d40:	4605      	mov	r5, r0
 8008d42:	b118      	cbz	r0, 8008d4c <__swbuf_r+0x12>
 8008d44:	6a03      	ldr	r3, [r0, #32]
 8008d46:	b90b      	cbnz	r3, 8008d4c <__swbuf_r+0x12>
 8008d48:	f7ff ff10 	bl	8008b6c <__sinit>
 8008d4c:	69a3      	ldr	r3, [r4, #24]
 8008d4e:	60a3      	str	r3, [r4, #8]
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	071a      	lsls	r2, r3, #28
 8008d54:	d525      	bpl.n	8008da2 <__swbuf_r+0x68>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	b31b      	cbz	r3, 8008da2 <__swbuf_r+0x68>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	6922      	ldr	r2, [r4, #16]
 8008d5e:	1a98      	subs	r0, r3, r2
 8008d60:	6963      	ldr	r3, [r4, #20]
 8008d62:	b2f6      	uxtb	r6, r6
 8008d64:	4283      	cmp	r3, r0
 8008d66:	4637      	mov	r7, r6
 8008d68:	dc04      	bgt.n	8008d74 <__swbuf_r+0x3a>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f000 fd63 	bl	8009838 <_fflush_r>
 8008d72:	b9e0      	cbnz	r0, 8008dae <__swbuf_r+0x74>
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	701e      	strb	r6, [r3, #0]
 8008d82:	6962      	ldr	r2, [r4, #20]
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d004      	beq.n	8008d94 <__swbuf_r+0x5a>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	07db      	lsls	r3, r3, #31
 8008d8e:	d506      	bpl.n	8008d9e <__swbuf_r+0x64>
 8008d90:	2e0a      	cmp	r6, #10
 8008d92:	d104      	bne.n	8008d9e <__swbuf_r+0x64>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 fd4e 	bl	8009838 <_fflush_r>
 8008d9c:	b938      	cbnz	r0, 8008dae <__swbuf_r+0x74>
 8008d9e:	4638      	mov	r0, r7
 8008da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da2:	4621      	mov	r1, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 f805 	bl	8008db4 <__swsetup_r>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d0d5      	beq.n	8008d5a <__swbuf_r+0x20>
 8008dae:	f04f 37ff 	mov.w	r7, #4294967295
 8008db2:	e7f4      	b.n	8008d9e <__swbuf_r+0x64>

08008db4 <__swsetup_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <__swsetup_r+0xac>)
 8008db8:	4605      	mov	r5, r0
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	b118      	cbz	r0, 8008dc8 <__swsetup_r+0x14>
 8008dc0:	6a03      	ldr	r3, [r0, #32]
 8008dc2:	b90b      	cbnz	r3, 8008dc8 <__swsetup_r+0x14>
 8008dc4:	f7ff fed2 	bl	8008b6c <__sinit>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dce:	0718      	lsls	r0, r3, #28
 8008dd0:	d422      	bmi.n	8008e18 <__swsetup_r+0x64>
 8008dd2:	06d9      	lsls	r1, r3, #27
 8008dd4:	d407      	bmi.n	8008de6 <__swsetup_r+0x32>
 8008dd6:	2309      	movs	r3, #9
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e034      	b.n	8008e50 <__swsetup_r+0x9c>
 8008de6:	0758      	lsls	r0, r3, #29
 8008de8:	d512      	bpl.n	8008e10 <__swsetup_r+0x5c>
 8008dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dec:	b141      	cbz	r1, 8008e00 <__swsetup_r+0x4c>
 8008dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d002      	beq.n	8008dfc <__swsetup_r+0x48>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f8cc 	bl	8008f94 <_free_r>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6063      	str	r3, [r4, #4]
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f043 0308 	orr.w	r3, r3, #8
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b94b      	cbnz	r3, 8008e30 <__swsetup_r+0x7c>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e26:	d003      	beq.n	8008e30 <__swsetup_r+0x7c>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 fd52 	bl	80098d4 <__smakebuf_r>
 8008e30:	89a0      	ldrh	r0, [r4, #12]
 8008e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e36:	f010 0301 	ands.w	r3, r0, #1
 8008e3a:	d00a      	beq.n	8008e52 <__swsetup_r+0x9e>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6963      	ldr	r3, [r4, #20]
 8008e42:	425b      	negs	r3, r3
 8008e44:	61a3      	str	r3, [r4, #24]
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	b943      	cbnz	r3, 8008e5c <__swsetup_r+0xa8>
 8008e4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e4e:	d1c4      	bne.n	8008dda <__swsetup_r+0x26>
 8008e50:	bd38      	pop	{r3, r4, r5, pc}
 8008e52:	0781      	lsls	r1, r0, #30
 8008e54:	bf58      	it	pl
 8008e56:	6963      	ldrpl	r3, [r4, #20]
 8008e58:	60a3      	str	r3, [r4, #8]
 8008e5a:	e7f4      	b.n	8008e46 <__swsetup_r+0x92>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7f7      	b.n	8008e50 <__swsetup_r+0x9c>
 8008e60:	20000080 	.word	0x20000080

08008e64 <memcmp>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	3901      	subs	r1, #1
 8008e68:	4402      	add	r2, r0
 8008e6a:	4290      	cmp	r0, r2
 8008e6c:	d101      	bne.n	8008e72 <memcmp+0xe>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e005      	b.n	8008e7e <memcmp+0x1a>
 8008e72:	7803      	ldrb	r3, [r0, #0]
 8008e74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d001      	beq.n	8008e80 <memcmp+0x1c>
 8008e7c:	1b18      	subs	r0, r3, r4
 8008e7e:	bd10      	pop	{r4, pc}
 8008e80:	3001      	adds	r0, #1
 8008e82:	e7f2      	b.n	8008e6a <memcmp+0x6>

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <_close_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d06      	ldr	r5, [pc, #24]	; (8008eb0 <_close_r+0x1c>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7f9 fae1 	bl	8002466 <_close>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_close_r+0x1a>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_close_r+0x1a>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	20000a18 	.word	0x20000a18

08008eb4 <_lseek_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_lseek_r+0x20>)
 8008eb8:	4604      	mov	r4, r0
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	602a      	str	r2, [r5, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f7f9 faf6 	bl	80024b4 <_lseek>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_lseek_r+0x1e>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_lseek_r+0x1e>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20000a18 	.word	0x20000a18

08008ed8 <_read_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_read_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f9 fa84 	bl	80023f4 <_read>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_read_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_read_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20000a18 	.word	0x20000a18

08008efc <_write_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	; (8008f1c <_write_r+0x20>)
 8008f00:	4604      	mov	r4, r0
 8008f02:	4608      	mov	r0, r1
 8008f04:	4611      	mov	r1, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f7f9 fa8f 	bl	800242e <_write>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_write_r+0x1e>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_write_r+0x1e>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20000a18 	.word	0x20000a18

08008f20 <__errno>:
 8008f20:	4b01      	ldr	r3, [pc, #4]	; (8008f28 <__errno+0x8>)
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20000080 	.word	0x20000080

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4d0d      	ldr	r5, [pc, #52]	; (8008f64 <__libc_init_array+0x38>)
 8008f30:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	2600      	movs	r6, #0
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	4d0b      	ldr	r5, [pc, #44]	; (8008f6c <__libc_init_array+0x40>)
 8008f3e:	4c0c      	ldr	r4, [pc, #48]	; (8008f70 <__libc_init_array+0x44>)
 8008f40:	f000 fd36 	bl	80099b0 <_init>
 8008f44:	1b64      	subs	r4, r4, r5
 8008f46:	10a4      	asrs	r4, r4, #2
 8008f48:	2600      	movs	r6, #0
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	0800a3e0 	.word	0x0800a3e0
 8008f68:	0800a3e0 	.word	0x0800a3e0
 8008f6c:	0800a3e0 	.word	0x0800a3e0
 8008f70:	0800a3e4 	.word	0x0800a3e4

08008f74 <__retarget_lock_acquire_recursive>:
 8008f74:	4770      	bx	lr

08008f76 <__retarget_lock_release_recursive>:
 8008f76:	4770      	bx	lr

08008f78 <memcpy>:
 8008f78:	440a      	add	r2, r1
 8008f7a:	4291      	cmp	r1, r2
 8008f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f80:	d100      	bne.n	8008f84 <memcpy+0xc>
 8008f82:	4770      	bx	lr
 8008f84:	b510      	push	{r4, lr}
 8008f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	d1f9      	bne.n	8008f86 <memcpy+0xe>
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <_free_r>:
 8008f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d044      	beq.n	8009024 <_free_r+0x90>
 8008f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9e:	9001      	str	r0, [sp, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fa6:	bfb8      	it	lt
 8008fa8:	18e4      	addlt	r4, r4, r3
 8008faa:	f000 f8df 	bl	800916c <__malloc_lock>
 8008fae:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <_free_r+0x94>)
 8008fb0:	9801      	ldr	r0, [sp, #4]
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	b933      	cbnz	r3, 8008fc4 <_free_r+0x30>
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	6014      	str	r4, [r2, #0]
 8008fba:	b003      	add	sp, #12
 8008fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fc0:	f000 b8da 	b.w	8009178 <__malloc_unlock>
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d908      	bls.n	8008fda <_free_r+0x46>
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	1961      	adds	r1, r4, r5
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	bf01      	itttt	eq
 8008fd0:	6819      	ldreq	r1, [r3, #0]
 8008fd2:	685b      	ldreq	r3, [r3, #4]
 8008fd4:	1949      	addeq	r1, r1, r5
 8008fd6:	6021      	streq	r1, [r4, #0]
 8008fd8:	e7ed      	b.n	8008fb6 <_free_r+0x22>
 8008fda:	461a      	mov	r2, r3
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b10b      	cbz	r3, 8008fe4 <_free_r+0x50>
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d9fa      	bls.n	8008fda <_free_r+0x46>
 8008fe4:	6811      	ldr	r1, [r2, #0]
 8008fe6:	1855      	adds	r5, r2, r1
 8008fe8:	42a5      	cmp	r5, r4
 8008fea:	d10b      	bne.n	8009004 <_free_r+0x70>
 8008fec:	6824      	ldr	r4, [r4, #0]
 8008fee:	4421      	add	r1, r4
 8008ff0:	1854      	adds	r4, r2, r1
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	d1e0      	bne.n	8008fba <_free_r+0x26>
 8008ff8:	681c      	ldr	r4, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	6053      	str	r3, [r2, #4]
 8008ffe:	440c      	add	r4, r1
 8009000:	6014      	str	r4, [r2, #0]
 8009002:	e7da      	b.n	8008fba <_free_r+0x26>
 8009004:	d902      	bls.n	800900c <_free_r+0x78>
 8009006:	230c      	movs	r3, #12
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	e7d6      	b.n	8008fba <_free_r+0x26>
 800900c:	6825      	ldr	r5, [r4, #0]
 800900e:	1961      	adds	r1, r4, r5
 8009010:	428b      	cmp	r3, r1
 8009012:	bf04      	itt	eq
 8009014:	6819      	ldreq	r1, [r3, #0]
 8009016:	685b      	ldreq	r3, [r3, #4]
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	bf04      	itt	eq
 800901c:	1949      	addeq	r1, r1, r5
 800901e:	6021      	streq	r1, [r4, #0]
 8009020:	6054      	str	r4, [r2, #4]
 8009022:	e7ca      	b.n	8008fba <_free_r+0x26>
 8009024:	b003      	add	sp, #12
 8009026:	bd30      	pop	{r4, r5, pc}
 8009028:	20000a20 	.word	0x20000a20

0800902c <sbrk_aligned>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0e      	ldr	r6, [pc, #56]	; (8009068 <sbrk_aligned+0x3c>)
 8009030:	460c      	mov	r4, r1
 8009032:	6831      	ldr	r1, [r6, #0]
 8009034:	4605      	mov	r5, r0
 8009036:	b911      	cbnz	r1, 800903e <sbrk_aligned+0x12>
 8009038:	f000 fcaa 	bl	8009990 <_sbrk_r>
 800903c:	6030      	str	r0, [r6, #0]
 800903e:	4621      	mov	r1, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f000 fca5 	bl	8009990 <_sbrk_r>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d00a      	beq.n	8009060 <sbrk_aligned+0x34>
 800904a:	1cc4      	adds	r4, r0, #3
 800904c:	f024 0403 	bic.w	r4, r4, #3
 8009050:	42a0      	cmp	r0, r4
 8009052:	d007      	beq.n	8009064 <sbrk_aligned+0x38>
 8009054:	1a21      	subs	r1, r4, r0
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fc9a 	bl	8009990 <_sbrk_r>
 800905c:	3001      	adds	r0, #1
 800905e:	d101      	bne.n	8009064 <sbrk_aligned+0x38>
 8009060:	f04f 34ff 	mov.w	r4, #4294967295
 8009064:	4620      	mov	r0, r4
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	20000a24 	.word	0x20000a24

0800906c <_malloc_r>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	1ccd      	adds	r5, r1, #3
 8009072:	f025 0503 	bic.w	r5, r5, #3
 8009076:	3508      	adds	r5, #8
 8009078:	2d0c      	cmp	r5, #12
 800907a:	bf38      	it	cc
 800907c:	250c      	movcc	r5, #12
 800907e:	2d00      	cmp	r5, #0
 8009080:	4607      	mov	r7, r0
 8009082:	db01      	blt.n	8009088 <_malloc_r+0x1c>
 8009084:	42a9      	cmp	r1, r5
 8009086:	d905      	bls.n	8009094 <_malloc_r+0x28>
 8009088:	230c      	movs	r3, #12
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	2600      	movs	r6, #0
 800908e:	4630      	mov	r0, r6
 8009090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009168 <_malloc_r+0xfc>
 8009098:	f000 f868 	bl	800916c <__malloc_lock>
 800909c:	f8d8 3000 	ldr.w	r3, [r8]
 80090a0:	461c      	mov	r4, r3
 80090a2:	bb5c      	cbnz	r4, 80090fc <_malloc_r+0x90>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff ffc0 	bl	800902c <sbrk_aligned>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	4604      	mov	r4, r0
 80090b0:	d155      	bne.n	800915e <_malloc_r+0xf2>
 80090b2:	f8d8 4000 	ldr.w	r4, [r8]
 80090b6:	4626      	mov	r6, r4
 80090b8:	2e00      	cmp	r6, #0
 80090ba:	d145      	bne.n	8009148 <_malloc_r+0xdc>
 80090bc:	2c00      	cmp	r4, #0
 80090be:	d048      	beq.n	8009152 <_malloc_r+0xe6>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	4631      	mov	r1, r6
 80090c4:	4638      	mov	r0, r7
 80090c6:	eb04 0903 	add.w	r9, r4, r3
 80090ca:	f000 fc61 	bl	8009990 <_sbrk_r>
 80090ce:	4581      	cmp	r9, r0
 80090d0:	d13f      	bne.n	8009152 <_malloc_r+0xe6>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	1a6d      	subs	r5, r5, r1
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa7 	bl	800902c <sbrk_aligned>
 80090de:	3001      	adds	r0, #1
 80090e0:	d037      	beq.n	8009152 <_malloc_r+0xe6>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	442b      	add	r3, r5
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	f8d8 3000 	ldr.w	r3, [r8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d038      	beq.n	8009162 <_malloc_r+0xf6>
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	42a2      	cmp	r2, r4
 80090f4:	d12b      	bne.n	800914e <_malloc_r+0xe2>
 80090f6:	2200      	movs	r2, #0
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	e00f      	b.n	800911c <_malloc_r+0xb0>
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	1b52      	subs	r2, r2, r5
 8009100:	d41f      	bmi.n	8009142 <_malloc_r+0xd6>
 8009102:	2a0b      	cmp	r2, #11
 8009104:	d917      	bls.n	8009136 <_malloc_r+0xca>
 8009106:	1961      	adds	r1, r4, r5
 8009108:	42a3      	cmp	r3, r4
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	6059      	strne	r1, [r3, #4]
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	bf08      	it	eq
 8009114:	f8c8 1000 	streq.w	r1, [r8]
 8009118:	5162      	str	r2, [r4, r5]
 800911a:	604b      	str	r3, [r1, #4]
 800911c:	4638      	mov	r0, r7
 800911e:	f104 060b 	add.w	r6, r4, #11
 8009122:	f000 f829 	bl	8009178 <__malloc_unlock>
 8009126:	f026 0607 	bic.w	r6, r6, #7
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	1af2      	subs	r2, r6, r3
 800912e:	d0ae      	beq.n	800908e <_malloc_r+0x22>
 8009130:	1b9b      	subs	r3, r3, r6
 8009132:	50a3      	str	r3, [r4, r2]
 8009134:	e7ab      	b.n	800908e <_malloc_r+0x22>
 8009136:	42a3      	cmp	r3, r4
 8009138:	6862      	ldr	r2, [r4, #4]
 800913a:	d1dd      	bne.n	80090f8 <_malloc_r+0x8c>
 800913c:	f8c8 2000 	str.w	r2, [r8]
 8009140:	e7ec      	b.n	800911c <_malloc_r+0xb0>
 8009142:	4623      	mov	r3, r4
 8009144:	6864      	ldr	r4, [r4, #4]
 8009146:	e7ac      	b.n	80090a2 <_malloc_r+0x36>
 8009148:	4634      	mov	r4, r6
 800914a:	6876      	ldr	r6, [r6, #4]
 800914c:	e7b4      	b.n	80090b8 <_malloc_r+0x4c>
 800914e:	4613      	mov	r3, r2
 8009150:	e7cc      	b.n	80090ec <_malloc_r+0x80>
 8009152:	230c      	movs	r3, #12
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	4638      	mov	r0, r7
 8009158:	f000 f80e 	bl	8009178 <__malloc_unlock>
 800915c:	e797      	b.n	800908e <_malloc_r+0x22>
 800915e:	6025      	str	r5, [r4, #0]
 8009160:	e7dc      	b.n	800911c <_malloc_r+0xb0>
 8009162:	605b      	str	r3, [r3, #4]
 8009164:	deff      	udf	#255	; 0xff
 8009166:	bf00      	nop
 8009168:	20000a20 	.word	0x20000a20

0800916c <__malloc_lock>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__malloc_lock+0x8>)
 800916e:	f7ff bf01 	b.w	8008f74 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	20000a1c 	.word	0x20000a1c

08009178 <__malloc_unlock>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__malloc_unlock+0x8>)
 800917a:	f7ff befc 	b.w	8008f76 <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	20000a1c 	.word	0x20000a1c

08009184 <__sfputc_r>:
 8009184:	6893      	ldr	r3, [r2, #8]
 8009186:	3b01      	subs	r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	b410      	push	{r4}
 800918c:	6093      	str	r3, [r2, #8]
 800918e:	da08      	bge.n	80091a2 <__sfputc_r+0x1e>
 8009190:	6994      	ldr	r4, [r2, #24]
 8009192:	42a3      	cmp	r3, r4
 8009194:	db01      	blt.n	800919a <__sfputc_r+0x16>
 8009196:	290a      	cmp	r1, #10
 8009198:	d103      	bne.n	80091a2 <__sfputc_r+0x1e>
 800919a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919e:	f7ff bdcc 	b.w	8008d3a <__swbuf_r>
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	1c58      	adds	r0, r3, #1
 80091a6:	6010      	str	r0, [r2, #0]
 80091a8:	7019      	strb	r1, [r3, #0]
 80091aa:	4608      	mov	r0, r1
 80091ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <__sfputs_r>:
 80091b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	4614      	mov	r4, r2
 80091ba:	18d5      	adds	r5, r2, r3
 80091bc:	42ac      	cmp	r4, r5
 80091be:	d101      	bne.n	80091c4 <__sfputs_r+0x12>
 80091c0:	2000      	movs	r0, #0
 80091c2:	e007      	b.n	80091d4 <__sfputs_r+0x22>
 80091c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c8:	463a      	mov	r2, r7
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7ff ffda 	bl	8009184 <__sfputc_r>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d1f3      	bne.n	80091bc <__sfputs_r+0xa>
 80091d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d8 <_vfiprintf_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	460d      	mov	r5, r1
 80091de:	b09d      	sub	sp, #116	; 0x74
 80091e0:	4614      	mov	r4, r2
 80091e2:	4698      	mov	r8, r3
 80091e4:	4606      	mov	r6, r0
 80091e6:	b118      	cbz	r0, 80091f0 <_vfiprintf_r+0x18>
 80091e8:	6a03      	ldr	r3, [r0, #32]
 80091ea:	b90b      	cbnz	r3, 80091f0 <_vfiprintf_r+0x18>
 80091ec:	f7ff fcbe 	bl	8008b6c <__sinit>
 80091f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f2:	07d9      	lsls	r1, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_vfiprintf_r+0x2a>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_vfiprintf_r+0x2a>
 80091fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fe:	f7ff feb9 	bl	8008f74 <__retarget_lock_acquire_recursive>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	071b      	lsls	r3, r3, #28
 8009206:	d501      	bpl.n	800920c <_vfiprintf_r+0x34>
 8009208:	692b      	ldr	r3, [r5, #16]
 800920a:	b99b      	cbnz	r3, 8009234 <_vfiprintf_r+0x5c>
 800920c:	4629      	mov	r1, r5
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff fdd0 	bl	8008db4 <__swsetup_r>
 8009214:	b170      	cbz	r0, 8009234 <_vfiprintf_r+0x5c>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07dc      	lsls	r4, r3, #31
 800921a:	d504      	bpl.n	8009226 <_vfiprintf_r+0x4e>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b01d      	add	sp, #116	; 0x74
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	0598      	lsls	r0, r3, #22
 800922a:	d4f7      	bmi.n	800921c <_vfiprintf_r+0x44>
 800922c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922e:	f7ff fea2 	bl	8008f76 <__retarget_lock_release_recursive>
 8009232:	e7f3      	b.n	800921c <_vfiprintf_r+0x44>
 8009234:	2300      	movs	r3, #0
 8009236:	9309      	str	r3, [sp, #36]	; 0x24
 8009238:	2320      	movs	r3, #32
 800923a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800923e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009242:	2330      	movs	r3, #48	; 0x30
 8009244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093f8 <_vfiprintf_r+0x220>
 8009248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800924c:	f04f 0901 	mov.w	r9, #1
 8009250:	4623      	mov	r3, r4
 8009252:	469a      	mov	sl, r3
 8009254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009258:	b10a      	cbz	r2, 800925e <_vfiprintf_r+0x86>
 800925a:	2a25      	cmp	r2, #37	; 0x25
 800925c:	d1f9      	bne.n	8009252 <_vfiprintf_r+0x7a>
 800925e:	ebba 0b04 	subs.w	fp, sl, r4
 8009262:	d00b      	beq.n	800927c <_vfiprintf_r+0xa4>
 8009264:	465b      	mov	r3, fp
 8009266:	4622      	mov	r2, r4
 8009268:	4629      	mov	r1, r5
 800926a:	4630      	mov	r0, r6
 800926c:	f7ff ffa1 	bl	80091b2 <__sfputs_r>
 8009270:	3001      	adds	r0, #1
 8009272:	f000 80a9 	beq.w	80093c8 <_vfiprintf_r+0x1f0>
 8009276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009278:	445a      	add	r2, fp
 800927a:	9209      	str	r2, [sp, #36]	; 0x24
 800927c:	f89a 3000 	ldrb.w	r3, [sl]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80a1 	beq.w	80093c8 <_vfiprintf_r+0x1f0>
 8009286:	2300      	movs	r3, #0
 8009288:	f04f 32ff 	mov.w	r2, #4294967295
 800928c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009290:	f10a 0a01 	add.w	sl, sl, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	9307      	str	r3, [sp, #28]
 8009298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800929c:	931a      	str	r3, [sp, #104]	; 0x68
 800929e:	4654      	mov	r4, sl
 80092a0:	2205      	movs	r2, #5
 80092a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a6:	4854      	ldr	r0, [pc, #336]	; (80093f8 <_vfiprintf_r+0x220>)
 80092a8:	f7f6 ff92 	bl	80001d0 <memchr>
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	b9d8      	cbnz	r0, 80092e8 <_vfiprintf_r+0x110>
 80092b0:	06d1      	lsls	r1, r2, #27
 80092b2:	bf44      	itt	mi
 80092b4:	2320      	movmi	r3, #32
 80092b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ba:	0713      	lsls	r3, r2, #28
 80092bc:	bf44      	itt	mi
 80092be:	232b      	movmi	r3, #43	; 0x2b
 80092c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c4:	f89a 3000 	ldrb.w	r3, [sl]
 80092c8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ca:	d015      	beq.n	80092f8 <_vfiprintf_r+0x120>
 80092cc:	9a07      	ldr	r2, [sp, #28]
 80092ce:	4654      	mov	r4, sl
 80092d0:	2000      	movs	r0, #0
 80092d2:	f04f 0c0a 	mov.w	ip, #10
 80092d6:	4621      	mov	r1, r4
 80092d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092dc:	3b30      	subs	r3, #48	; 0x30
 80092de:	2b09      	cmp	r3, #9
 80092e0:	d94d      	bls.n	800937e <_vfiprintf_r+0x1a6>
 80092e2:	b1b0      	cbz	r0, 8009312 <_vfiprintf_r+0x13a>
 80092e4:	9207      	str	r2, [sp, #28]
 80092e6:	e014      	b.n	8009312 <_vfiprintf_r+0x13a>
 80092e8:	eba0 0308 	sub.w	r3, r0, r8
 80092ec:	fa09 f303 	lsl.w	r3, r9, r3
 80092f0:	4313      	orrs	r3, r2
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	46a2      	mov	sl, r4
 80092f6:	e7d2      	b.n	800929e <_vfiprintf_r+0xc6>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	1d19      	adds	r1, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	9103      	str	r1, [sp, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	bfbb      	ittet	lt
 8009304:	425b      	neglt	r3, r3
 8009306:	f042 0202 	orrlt.w	r2, r2, #2
 800930a:	9307      	strge	r3, [sp, #28]
 800930c:	9307      	strlt	r3, [sp, #28]
 800930e:	bfb8      	it	lt
 8009310:	9204      	strlt	r2, [sp, #16]
 8009312:	7823      	ldrb	r3, [r4, #0]
 8009314:	2b2e      	cmp	r3, #46	; 0x2e
 8009316:	d10c      	bne.n	8009332 <_vfiprintf_r+0x15a>
 8009318:	7863      	ldrb	r3, [r4, #1]
 800931a:	2b2a      	cmp	r3, #42	; 0x2a
 800931c:	d134      	bne.n	8009388 <_vfiprintf_r+0x1b0>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	1d1a      	adds	r2, r3, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	9203      	str	r2, [sp, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfb8      	it	lt
 800932a:	f04f 33ff 	movlt.w	r3, #4294967295
 800932e:	3402      	adds	r4, #2
 8009330:	9305      	str	r3, [sp, #20]
 8009332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009408 <_vfiprintf_r+0x230>
 8009336:	7821      	ldrb	r1, [r4, #0]
 8009338:	2203      	movs	r2, #3
 800933a:	4650      	mov	r0, sl
 800933c:	f7f6 ff48 	bl	80001d0 <memchr>
 8009340:	b138      	cbz	r0, 8009352 <_vfiprintf_r+0x17a>
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	eba0 000a 	sub.w	r0, r0, sl
 8009348:	2240      	movs	r2, #64	; 0x40
 800934a:	4082      	lsls	r2, r0
 800934c:	4313      	orrs	r3, r2
 800934e:	3401      	adds	r4, #1
 8009350:	9304      	str	r3, [sp, #16]
 8009352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009356:	4829      	ldr	r0, [pc, #164]	; (80093fc <_vfiprintf_r+0x224>)
 8009358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800935c:	2206      	movs	r2, #6
 800935e:	f7f6 ff37 	bl	80001d0 <memchr>
 8009362:	2800      	cmp	r0, #0
 8009364:	d03f      	beq.n	80093e6 <_vfiprintf_r+0x20e>
 8009366:	4b26      	ldr	r3, [pc, #152]	; (8009400 <_vfiprintf_r+0x228>)
 8009368:	bb1b      	cbnz	r3, 80093b2 <_vfiprintf_r+0x1da>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	3307      	adds	r3, #7
 800936e:	f023 0307 	bic.w	r3, r3, #7
 8009372:	3308      	adds	r3, #8
 8009374:	9303      	str	r3, [sp, #12]
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	443b      	add	r3, r7
 800937a:	9309      	str	r3, [sp, #36]	; 0x24
 800937c:	e768      	b.n	8009250 <_vfiprintf_r+0x78>
 800937e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009382:	460c      	mov	r4, r1
 8009384:	2001      	movs	r0, #1
 8009386:	e7a6      	b.n	80092d6 <_vfiprintf_r+0xfe>
 8009388:	2300      	movs	r3, #0
 800938a:	3401      	adds	r4, #1
 800938c:	9305      	str	r3, [sp, #20]
 800938e:	4619      	mov	r1, r3
 8009390:	f04f 0c0a 	mov.w	ip, #10
 8009394:	4620      	mov	r0, r4
 8009396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800939a:	3a30      	subs	r2, #48	; 0x30
 800939c:	2a09      	cmp	r2, #9
 800939e:	d903      	bls.n	80093a8 <_vfiprintf_r+0x1d0>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d0c6      	beq.n	8009332 <_vfiprintf_r+0x15a>
 80093a4:	9105      	str	r1, [sp, #20]
 80093a6:	e7c4      	b.n	8009332 <_vfiprintf_r+0x15a>
 80093a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ac:	4604      	mov	r4, r0
 80093ae:	2301      	movs	r3, #1
 80093b0:	e7f0      	b.n	8009394 <_vfiprintf_r+0x1bc>
 80093b2:	ab03      	add	r3, sp, #12
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	462a      	mov	r2, r5
 80093b8:	4b12      	ldr	r3, [pc, #72]	; (8009404 <_vfiprintf_r+0x22c>)
 80093ba:	a904      	add	r1, sp, #16
 80093bc:	4630      	mov	r0, r6
 80093be:	f3af 8000 	nop.w
 80093c2:	4607      	mov	r7, r0
 80093c4:	1c78      	adds	r0, r7, #1
 80093c6:	d1d6      	bne.n	8009376 <_vfiprintf_r+0x19e>
 80093c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ca:	07d9      	lsls	r1, r3, #31
 80093cc:	d405      	bmi.n	80093da <_vfiprintf_r+0x202>
 80093ce:	89ab      	ldrh	r3, [r5, #12]
 80093d0:	059a      	lsls	r2, r3, #22
 80093d2:	d402      	bmi.n	80093da <_vfiprintf_r+0x202>
 80093d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d6:	f7ff fdce 	bl	8008f76 <__retarget_lock_release_recursive>
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	065b      	lsls	r3, r3, #25
 80093de:	f53f af1d 	bmi.w	800921c <_vfiprintf_r+0x44>
 80093e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e4:	e71c      	b.n	8009220 <_vfiprintf_r+0x48>
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462a      	mov	r2, r5
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <_vfiprintf_r+0x22c>)
 80093ee:	a904      	add	r1, sp, #16
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 f879 	bl	80094e8 <_printf_i>
 80093f6:	e7e4      	b.n	80093c2 <_vfiprintf_r+0x1ea>
 80093f8:	0800a3a5 	.word	0x0800a3a5
 80093fc:	0800a3af 	.word	0x0800a3af
 8009400:	00000000 	.word	0x00000000
 8009404:	080091b3 	.word	0x080091b3
 8009408:	0800a3ab 	.word	0x0800a3ab

0800940c <_printf_common>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	4616      	mov	r6, r2
 8009412:	4699      	mov	r9, r3
 8009414:	688a      	ldr	r2, [r1, #8]
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800941c:	4293      	cmp	r3, r2
 800941e:	bfb8      	it	lt
 8009420:	4613      	movlt	r3, r2
 8009422:	6033      	str	r3, [r6, #0]
 8009424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009428:	4607      	mov	r7, r0
 800942a:	460c      	mov	r4, r1
 800942c:	b10a      	cbz	r2, 8009432 <_printf_common+0x26>
 800942e:	3301      	adds	r3, #1
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	0699      	lsls	r1, r3, #26
 8009436:	bf42      	ittt	mi
 8009438:	6833      	ldrmi	r3, [r6, #0]
 800943a:	3302      	addmi	r3, #2
 800943c:	6033      	strmi	r3, [r6, #0]
 800943e:	6825      	ldr	r5, [r4, #0]
 8009440:	f015 0506 	ands.w	r5, r5, #6
 8009444:	d106      	bne.n	8009454 <_printf_common+0x48>
 8009446:	f104 0a19 	add.w	sl, r4, #25
 800944a:	68e3      	ldr	r3, [r4, #12]
 800944c:	6832      	ldr	r2, [r6, #0]
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	42ab      	cmp	r3, r5
 8009452:	dc26      	bgt.n	80094a2 <_printf_common+0x96>
 8009454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009458:	1e13      	subs	r3, r2, #0
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	bf18      	it	ne
 800945e:	2301      	movne	r3, #1
 8009460:	0692      	lsls	r2, r2, #26
 8009462:	d42b      	bmi.n	80094bc <_printf_common+0xb0>
 8009464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d01e      	beq.n	80094b0 <_printf_common+0xa4>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	6922      	ldr	r2, [r4, #16]
 8009476:	f003 0306 	and.w	r3, r3, #6
 800947a:	2b04      	cmp	r3, #4
 800947c:	bf02      	ittt	eq
 800947e:	68e5      	ldreq	r5, [r4, #12]
 8009480:	6833      	ldreq	r3, [r6, #0]
 8009482:	1aed      	subeq	r5, r5, r3
 8009484:	68a3      	ldr	r3, [r4, #8]
 8009486:	bf0c      	ite	eq
 8009488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800948c:	2500      	movne	r5, #0
 800948e:	4293      	cmp	r3, r2
 8009490:	bfc4      	itt	gt
 8009492:	1a9b      	subgt	r3, r3, r2
 8009494:	18ed      	addgt	r5, r5, r3
 8009496:	2600      	movs	r6, #0
 8009498:	341a      	adds	r4, #26
 800949a:	42b5      	cmp	r5, r6
 800949c:	d11a      	bne.n	80094d4 <_printf_common+0xc8>
 800949e:	2000      	movs	r0, #0
 80094a0:	e008      	b.n	80094b4 <_printf_common+0xa8>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4652      	mov	r2, sl
 80094a6:	4649      	mov	r1, r9
 80094a8:	4638      	mov	r0, r7
 80094aa:	47c0      	blx	r8
 80094ac:	3001      	adds	r0, #1
 80094ae:	d103      	bne.n	80094b8 <_printf_common+0xac>
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b8:	3501      	adds	r5, #1
 80094ba:	e7c6      	b.n	800944a <_printf_common+0x3e>
 80094bc:	18e1      	adds	r1, r4, r3
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	2030      	movs	r0, #48	; 0x30
 80094c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094c6:	4422      	add	r2, r4
 80094c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094d0:	3302      	adds	r3, #2
 80094d2:	e7c7      	b.n	8009464 <_printf_common+0x58>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4622      	mov	r2, r4
 80094d8:	4649      	mov	r1, r9
 80094da:	4638      	mov	r0, r7
 80094dc:	47c0      	blx	r8
 80094de:	3001      	adds	r0, #1
 80094e0:	d0e6      	beq.n	80094b0 <_printf_common+0xa4>
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7d9      	b.n	800949a <_printf_common+0x8e>
	...

080094e8 <_printf_i>:
 80094e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	7e0f      	ldrb	r7, [r1, #24]
 80094ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094f0:	2f78      	cmp	r7, #120	; 0x78
 80094f2:	4691      	mov	r9, r2
 80094f4:	4680      	mov	r8, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	469a      	mov	sl, r3
 80094fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094fe:	d807      	bhi.n	8009510 <_printf_i+0x28>
 8009500:	2f62      	cmp	r7, #98	; 0x62
 8009502:	d80a      	bhi.n	800951a <_printf_i+0x32>
 8009504:	2f00      	cmp	r7, #0
 8009506:	f000 80d4 	beq.w	80096b2 <_printf_i+0x1ca>
 800950a:	2f58      	cmp	r7, #88	; 0x58
 800950c:	f000 80c0 	beq.w	8009690 <_printf_i+0x1a8>
 8009510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009518:	e03a      	b.n	8009590 <_printf_i+0xa8>
 800951a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800951e:	2b15      	cmp	r3, #21
 8009520:	d8f6      	bhi.n	8009510 <_printf_i+0x28>
 8009522:	a101      	add	r1, pc, #4	; (adr r1, 8009528 <_printf_i+0x40>)
 8009524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009528:	08009581 	.word	0x08009581
 800952c:	08009595 	.word	0x08009595
 8009530:	08009511 	.word	0x08009511
 8009534:	08009511 	.word	0x08009511
 8009538:	08009511 	.word	0x08009511
 800953c:	08009511 	.word	0x08009511
 8009540:	08009595 	.word	0x08009595
 8009544:	08009511 	.word	0x08009511
 8009548:	08009511 	.word	0x08009511
 800954c:	08009511 	.word	0x08009511
 8009550:	08009511 	.word	0x08009511
 8009554:	08009699 	.word	0x08009699
 8009558:	080095c1 	.word	0x080095c1
 800955c:	08009653 	.word	0x08009653
 8009560:	08009511 	.word	0x08009511
 8009564:	08009511 	.word	0x08009511
 8009568:	080096bb 	.word	0x080096bb
 800956c:	08009511 	.word	0x08009511
 8009570:	080095c1 	.word	0x080095c1
 8009574:	08009511 	.word	0x08009511
 8009578:	08009511 	.word	0x08009511
 800957c:	0800965b 	.word	0x0800965b
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	1d1a      	adds	r2, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	602a      	str	r2, [r5, #0]
 8009588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800958c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009590:	2301      	movs	r3, #1
 8009592:	e09f      	b.n	80096d4 <_printf_i+0x1ec>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	0607      	lsls	r7, r0, #24
 800959a:	f103 0104 	add.w	r1, r3, #4
 800959e:	6029      	str	r1, [r5, #0]
 80095a0:	d501      	bpl.n	80095a6 <_printf_i+0xbe>
 80095a2:	681e      	ldr	r6, [r3, #0]
 80095a4:	e003      	b.n	80095ae <_printf_i+0xc6>
 80095a6:	0646      	lsls	r6, r0, #25
 80095a8:	d5fb      	bpl.n	80095a2 <_printf_i+0xba>
 80095aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	da03      	bge.n	80095ba <_printf_i+0xd2>
 80095b2:	232d      	movs	r3, #45	; 0x2d
 80095b4:	4276      	negs	r6, r6
 80095b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ba:	485a      	ldr	r0, [pc, #360]	; (8009724 <_printf_i+0x23c>)
 80095bc:	230a      	movs	r3, #10
 80095be:	e012      	b.n	80095e6 <_printf_i+0xfe>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	1d19      	adds	r1, r3, #4
 80095c6:	6029      	str	r1, [r5, #0]
 80095c8:	0605      	lsls	r5, r0, #24
 80095ca:	d501      	bpl.n	80095d0 <_printf_i+0xe8>
 80095cc:	681e      	ldr	r6, [r3, #0]
 80095ce:	e002      	b.n	80095d6 <_printf_i+0xee>
 80095d0:	0641      	lsls	r1, r0, #25
 80095d2:	d5fb      	bpl.n	80095cc <_printf_i+0xe4>
 80095d4:	881e      	ldrh	r6, [r3, #0]
 80095d6:	4853      	ldr	r0, [pc, #332]	; (8009724 <_printf_i+0x23c>)
 80095d8:	2f6f      	cmp	r7, #111	; 0x6f
 80095da:	bf0c      	ite	eq
 80095dc:	2308      	moveq	r3, #8
 80095de:	230a      	movne	r3, #10
 80095e0:	2100      	movs	r1, #0
 80095e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095e6:	6865      	ldr	r5, [r4, #4]
 80095e8:	60a5      	str	r5, [r4, #8]
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	bfa2      	ittt	ge
 80095ee:	6821      	ldrge	r1, [r4, #0]
 80095f0:	f021 0104 	bicge.w	r1, r1, #4
 80095f4:	6021      	strge	r1, [r4, #0]
 80095f6:	b90e      	cbnz	r6, 80095fc <_printf_i+0x114>
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	d04b      	beq.n	8009694 <_printf_i+0x1ac>
 80095fc:	4615      	mov	r5, r2
 80095fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009602:	fb03 6711 	mls	r7, r3, r1, r6
 8009606:	5dc7      	ldrb	r7, [r0, r7]
 8009608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800960c:	4637      	mov	r7, r6
 800960e:	42bb      	cmp	r3, r7
 8009610:	460e      	mov	r6, r1
 8009612:	d9f4      	bls.n	80095fe <_printf_i+0x116>
 8009614:	2b08      	cmp	r3, #8
 8009616:	d10b      	bne.n	8009630 <_printf_i+0x148>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	07de      	lsls	r6, r3, #31
 800961c:	d508      	bpl.n	8009630 <_printf_i+0x148>
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	4299      	cmp	r1, r3
 8009624:	bfde      	ittt	le
 8009626:	2330      	movle	r3, #48	; 0x30
 8009628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800962c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009630:	1b52      	subs	r2, r2, r5
 8009632:	6122      	str	r2, [r4, #16]
 8009634:	f8cd a000 	str.w	sl, [sp]
 8009638:	464b      	mov	r3, r9
 800963a:	aa03      	add	r2, sp, #12
 800963c:	4621      	mov	r1, r4
 800963e:	4640      	mov	r0, r8
 8009640:	f7ff fee4 	bl	800940c <_printf_common>
 8009644:	3001      	adds	r0, #1
 8009646:	d14a      	bne.n	80096de <_printf_i+0x1f6>
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	b004      	add	sp, #16
 800964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	f043 0320 	orr.w	r3, r3, #32
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	4833      	ldr	r0, [pc, #204]	; (8009728 <_printf_i+0x240>)
 800965c:	2778      	movs	r7, #120	; 0x78
 800965e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	6829      	ldr	r1, [r5, #0]
 8009666:	061f      	lsls	r7, r3, #24
 8009668:	f851 6b04 	ldr.w	r6, [r1], #4
 800966c:	d402      	bmi.n	8009674 <_printf_i+0x18c>
 800966e:	065f      	lsls	r7, r3, #25
 8009670:	bf48      	it	mi
 8009672:	b2b6      	uxthmi	r6, r6
 8009674:	07df      	lsls	r7, r3, #31
 8009676:	bf48      	it	mi
 8009678:	f043 0320 	orrmi.w	r3, r3, #32
 800967c:	6029      	str	r1, [r5, #0]
 800967e:	bf48      	it	mi
 8009680:	6023      	strmi	r3, [r4, #0]
 8009682:	b91e      	cbnz	r6, 800968c <_printf_i+0x1a4>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	f023 0320 	bic.w	r3, r3, #32
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	2310      	movs	r3, #16
 800968e:	e7a7      	b.n	80095e0 <_printf_i+0xf8>
 8009690:	4824      	ldr	r0, [pc, #144]	; (8009724 <_printf_i+0x23c>)
 8009692:	e7e4      	b.n	800965e <_printf_i+0x176>
 8009694:	4615      	mov	r5, r2
 8009696:	e7bd      	b.n	8009614 <_printf_i+0x12c>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	6826      	ldr	r6, [r4, #0]
 800969c:	6961      	ldr	r1, [r4, #20]
 800969e:	1d18      	adds	r0, r3, #4
 80096a0:	6028      	str	r0, [r5, #0]
 80096a2:	0635      	lsls	r5, r6, #24
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	d501      	bpl.n	80096ac <_printf_i+0x1c4>
 80096a8:	6019      	str	r1, [r3, #0]
 80096aa:	e002      	b.n	80096b2 <_printf_i+0x1ca>
 80096ac:	0670      	lsls	r0, r6, #25
 80096ae:	d5fb      	bpl.n	80096a8 <_printf_i+0x1c0>
 80096b0:	8019      	strh	r1, [r3, #0]
 80096b2:	2300      	movs	r3, #0
 80096b4:	6123      	str	r3, [r4, #16]
 80096b6:	4615      	mov	r5, r2
 80096b8:	e7bc      	b.n	8009634 <_printf_i+0x14c>
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	602a      	str	r2, [r5, #0]
 80096c0:	681d      	ldr	r5, [r3, #0]
 80096c2:	6862      	ldr	r2, [r4, #4]
 80096c4:	2100      	movs	r1, #0
 80096c6:	4628      	mov	r0, r5
 80096c8:	f7f6 fd82 	bl	80001d0 <memchr>
 80096cc:	b108      	cbz	r0, 80096d2 <_printf_i+0x1ea>
 80096ce:	1b40      	subs	r0, r0, r5
 80096d0:	6060      	str	r0, [r4, #4]
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	2300      	movs	r3, #0
 80096d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096dc:	e7aa      	b.n	8009634 <_printf_i+0x14c>
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	462a      	mov	r2, r5
 80096e2:	4649      	mov	r1, r9
 80096e4:	4640      	mov	r0, r8
 80096e6:	47d0      	blx	sl
 80096e8:	3001      	adds	r0, #1
 80096ea:	d0ad      	beq.n	8009648 <_printf_i+0x160>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	079b      	lsls	r3, r3, #30
 80096f0:	d413      	bmi.n	800971a <_printf_i+0x232>
 80096f2:	68e0      	ldr	r0, [r4, #12]
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	4298      	cmp	r0, r3
 80096f8:	bfb8      	it	lt
 80096fa:	4618      	movlt	r0, r3
 80096fc:	e7a6      	b.n	800964c <_printf_i+0x164>
 80096fe:	2301      	movs	r3, #1
 8009700:	4632      	mov	r2, r6
 8009702:	4649      	mov	r1, r9
 8009704:	4640      	mov	r0, r8
 8009706:	47d0      	blx	sl
 8009708:	3001      	adds	r0, #1
 800970a:	d09d      	beq.n	8009648 <_printf_i+0x160>
 800970c:	3501      	adds	r5, #1
 800970e:	68e3      	ldr	r3, [r4, #12]
 8009710:	9903      	ldr	r1, [sp, #12]
 8009712:	1a5b      	subs	r3, r3, r1
 8009714:	42ab      	cmp	r3, r5
 8009716:	dcf2      	bgt.n	80096fe <_printf_i+0x216>
 8009718:	e7eb      	b.n	80096f2 <_printf_i+0x20a>
 800971a:	2500      	movs	r5, #0
 800971c:	f104 0619 	add.w	r6, r4, #25
 8009720:	e7f5      	b.n	800970e <_printf_i+0x226>
 8009722:	bf00      	nop
 8009724:	0800a3b6 	.word	0x0800a3b6
 8009728:	0800a3c7 	.word	0x0800a3c7

0800972c <__sflush_r>:
 800972c:	898a      	ldrh	r2, [r1, #12]
 800972e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	4605      	mov	r5, r0
 8009734:	0710      	lsls	r0, r2, #28
 8009736:	460c      	mov	r4, r1
 8009738:	d458      	bmi.n	80097ec <__sflush_r+0xc0>
 800973a:	684b      	ldr	r3, [r1, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc05      	bgt.n	800974c <__sflush_r+0x20>
 8009740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	dc02      	bgt.n	800974c <__sflush_r+0x20>
 8009746:	2000      	movs	r0, #0
 8009748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800974e:	2e00      	cmp	r6, #0
 8009750:	d0f9      	beq.n	8009746 <__sflush_r+0x1a>
 8009752:	2300      	movs	r3, #0
 8009754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009758:	682f      	ldr	r7, [r5, #0]
 800975a:	6a21      	ldr	r1, [r4, #32]
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	d032      	beq.n	80097c6 <__sflush_r+0x9a>
 8009760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	075a      	lsls	r2, r3, #29
 8009766:	d505      	bpl.n	8009774 <__sflush_r+0x48>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	1ac0      	subs	r0, r0, r3
 800976c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800976e:	b10b      	cbz	r3, 8009774 <__sflush_r+0x48>
 8009770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009772:	1ac0      	subs	r0, r0, r3
 8009774:	2300      	movs	r3, #0
 8009776:	4602      	mov	r2, r0
 8009778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800977a:	6a21      	ldr	r1, [r4, #32]
 800977c:	4628      	mov	r0, r5
 800977e:	47b0      	blx	r6
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	d106      	bne.n	8009794 <__sflush_r+0x68>
 8009786:	6829      	ldr	r1, [r5, #0]
 8009788:	291d      	cmp	r1, #29
 800978a:	d82b      	bhi.n	80097e4 <__sflush_r+0xb8>
 800978c:	4a29      	ldr	r2, [pc, #164]	; (8009834 <__sflush_r+0x108>)
 800978e:	410a      	asrs	r2, r1
 8009790:	07d6      	lsls	r6, r2, #31
 8009792:	d427      	bmi.n	80097e4 <__sflush_r+0xb8>
 8009794:	2200      	movs	r2, #0
 8009796:	6062      	str	r2, [r4, #4]
 8009798:	04d9      	lsls	r1, r3, #19
 800979a:	6922      	ldr	r2, [r4, #16]
 800979c:	6022      	str	r2, [r4, #0]
 800979e:	d504      	bpl.n	80097aa <__sflush_r+0x7e>
 80097a0:	1c42      	adds	r2, r0, #1
 80097a2:	d101      	bne.n	80097a8 <__sflush_r+0x7c>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b903      	cbnz	r3, 80097aa <__sflush_r+0x7e>
 80097a8:	6560      	str	r0, [r4, #84]	; 0x54
 80097aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ac:	602f      	str	r7, [r5, #0]
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d0c9      	beq.n	8009746 <__sflush_r+0x1a>
 80097b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b6:	4299      	cmp	r1, r3
 80097b8:	d002      	beq.n	80097c0 <__sflush_r+0x94>
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7ff fbea 	bl	8008f94 <_free_r>
 80097c0:	2000      	movs	r0, #0
 80097c2:	6360      	str	r0, [r4, #52]	; 0x34
 80097c4:	e7c0      	b.n	8009748 <__sflush_r+0x1c>
 80097c6:	2301      	movs	r3, #1
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b0      	blx	r6
 80097cc:	1c41      	adds	r1, r0, #1
 80097ce:	d1c8      	bne.n	8009762 <__sflush_r+0x36>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0c5      	beq.n	8009762 <__sflush_r+0x36>
 80097d6:	2b1d      	cmp	r3, #29
 80097d8:	d001      	beq.n	80097de <__sflush_r+0xb2>
 80097da:	2b16      	cmp	r3, #22
 80097dc:	d101      	bne.n	80097e2 <__sflush_r+0xb6>
 80097de:	602f      	str	r7, [r5, #0]
 80097e0:	e7b1      	b.n	8009746 <__sflush_r+0x1a>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7ad      	b.n	8009748 <__sflush_r+0x1c>
 80097ec:	690f      	ldr	r7, [r1, #16]
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	d0a9      	beq.n	8009746 <__sflush_r+0x1a>
 80097f2:	0793      	lsls	r3, r2, #30
 80097f4:	680e      	ldr	r6, [r1, #0]
 80097f6:	bf08      	it	eq
 80097f8:	694b      	ldreq	r3, [r1, #20]
 80097fa:	600f      	str	r7, [r1, #0]
 80097fc:	bf18      	it	ne
 80097fe:	2300      	movne	r3, #0
 8009800:	eba6 0807 	sub.w	r8, r6, r7
 8009804:	608b      	str	r3, [r1, #8]
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	dd9c      	ble.n	8009746 <__sflush_r+0x1a>
 800980c:	6a21      	ldr	r1, [r4, #32]
 800980e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009810:	4643      	mov	r3, r8
 8009812:	463a      	mov	r2, r7
 8009814:	4628      	mov	r0, r5
 8009816:	47b0      	blx	r6
 8009818:	2800      	cmp	r0, #0
 800981a:	dc06      	bgt.n	800982a <__sflush_r+0xfe>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e78e      	b.n	8009748 <__sflush_r+0x1c>
 800982a:	4407      	add	r7, r0
 800982c:	eba8 0800 	sub.w	r8, r8, r0
 8009830:	e7e9      	b.n	8009806 <__sflush_r+0xda>
 8009832:	bf00      	nop
 8009834:	dfbffffe 	.word	0xdfbffffe

08009838 <_fflush_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	4605      	mov	r5, r0
 800983e:	460c      	mov	r4, r1
 8009840:	b913      	cbnz	r3, 8009848 <_fflush_r+0x10>
 8009842:	2500      	movs	r5, #0
 8009844:	4628      	mov	r0, r5
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	b118      	cbz	r0, 8009852 <_fflush_r+0x1a>
 800984a:	6a03      	ldr	r3, [r0, #32]
 800984c:	b90b      	cbnz	r3, 8009852 <_fflush_r+0x1a>
 800984e:	f7ff f98d 	bl	8008b6c <__sinit>
 8009852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f3      	beq.n	8009842 <_fflush_r+0xa>
 800985a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800985c:	07d0      	lsls	r0, r2, #31
 800985e:	d404      	bmi.n	800986a <_fflush_r+0x32>
 8009860:	0599      	lsls	r1, r3, #22
 8009862:	d402      	bmi.n	800986a <_fflush_r+0x32>
 8009864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009866:	f7ff fb85 	bl	8008f74 <__retarget_lock_acquire_recursive>
 800986a:	4628      	mov	r0, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7ff ff5d 	bl	800972c <__sflush_r>
 8009872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009874:	07da      	lsls	r2, r3, #31
 8009876:	4605      	mov	r5, r0
 8009878:	d4e4      	bmi.n	8009844 <_fflush_r+0xc>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	059b      	lsls	r3, r3, #22
 800987e:	d4e1      	bmi.n	8009844 <_fflush_r+0xc>
 8009880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009882:	f7ff fb78 	bl	8008f76 <__retarget_lock_release_recursive>
 8009886:	e7dd      	b.n	8009844 <_fflush_r+0xc>

08009888 <__swhatbuf_r>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	2900      	cmp	r1, #0
 8009892:	b096      	sub	sp, #88	; 0x58
 8009894:	4615      	mov	r5, r2
 8009896:	461e      	mov	r6, r3
 8009898:	da0d      	bge.n	80098b6 <__swhatbuf_r+0x2e>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098a0:	f04f 0100 	mov.w	r1, #0
 80098a4:	bf0c      	ite	eq
 80098a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098aa:	2340      	movne	r3, #64	; 0x40
 80098ac:	2000      	movs	r0, #0
 80098ae:	6031      	str	r1, [r6, #0]
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	b016      	add	sp, #88	; 0x58
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	466a      	mov	r2, sp
 80098b8:	f000 f848 	bl	800994c <_fstat_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dbec      	blt.n	800989a <__swhatbuf_r+0x12>
 80098c0:	9901      	ldr	r1, [sp, #4]
 80098c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098ca:	4259      	negs	r1, r3
 80098cc:	4159      	adcs	r1, r3
 80098ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098d2:	e7eb      	b.n	80098ac <__swhatbuf_r+0x24>

080098d4 <__smakebuf_r>:
 80098d4:	898b      	ldrh	r3, [r1, #12]
 80098d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d8:	079d      	lsls	r5, r3, #30
 80098da:	4606      	mov	r6, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	d507      	bpl.n	80098f0 <__smakebuf_r+0x1c>
 80098e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	2301      	movs	r3, #1
 80098ea:	6163      	str	r3, [r4, #20]
 80098ec:	b002      	add	sp, #8
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	ab01      	add	r3, sp, #4
 80098f2:	466a      	mov	r2, sp
 80098f4:	f7ff ffc8 	bl	8009888 <__swhatbuf_r>
 80098f8:	9900      	ldr	r1, [sp, #0]
 80098fa:	4605      	mov	r5, r0
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff fbb5 	bl	800906c <_malloc_r>
 8009902:	b948      	cbnz	r0, 8009918 <__smakebuf_r+0x44>
 8009904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d4ef      	bmi.n	80098ec <__smakebuf_r+0x18>
 800990c:	f023 0303 	bic.w	r3, r3, #3
 8009910:	f043 0302 	orr.w	r3, r3, #2
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	e7e3      	b.n	80098e0 <__smakebuf_r+0xc>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	6020      	str	r0, [r4, #0]
 800991c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	6163      	str	r3, [r4, #20]
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	6120      	str	r0, [r4, #16]
 800992a:	b15b      	cbz	r3, 8009944 <__smakebuf_r+0x70>
 800992c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f81d 	bl	8009970 <_isatty_r>
 8009936:	b128      	cbz	r0, 8009944 <__smakebuf_r+0x70>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	81a3      	strh	r3, [r4, #12]
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	431d      	orrs	r5, r3
 8009948:	81a5      	strh	r5, [r4, #12]
 800994a:	e7cf      	b.n	80098ec <__smakebuf_r+0x18>

0800994c <_fstat_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_fstat_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f8 fd90 	bl	800247e <_fstat>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_fstat_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_fstat_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	20000a18 	.word	0x20000a18

08009970 <_isatty_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_isatty_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f8 fd8f 	bl	800249e <_isatty>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_isatty_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_isatty_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20000a18 	.word	0x20000a18

08009990 <_sbrk_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d06      	ldr	r5, [pc, #24]	; (80099ac <_sbrk_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	f7f8 fd98 	bl	80024d0 <_sbrk>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_sbrk_r+0x1a>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_sbrk_r+0x1a>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20000a18 	.word	0x20000a18

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
