
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f68  08009f68  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f70  08009f70  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000098  0800a010  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  0800a010  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001da1f  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009e  00000000  00000000  0003db2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e3aa  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039e6  00000000  00000000  0005bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001870  00000000  00000000  0005f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeab  00000000  00000000  000611c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001305  00000000  00000000  0015c073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b18f  00000000  00000000  0015d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fe4  00000000  00000000  00188508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009780 	.word	0x08009780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08009780 	.word	0x08009780

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 ffd0 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fbaf 	bl	8008cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 faa2 	bl	8001ae6 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	08009f78 	.word	0x08009f78
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 80005b4:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 80005b8:	20000a64 	.word	0x20000a64

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  uint8_t ret;

  User_Init();
 80005c6:	f000 f9eb 	bl	80009a0 <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 80005ca:	2100      	movs	r1, #0
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_BlueNRG_2_Init+0x40>)
 80005ce:	f007 fe31 	bl	8008234 <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_BlueNRG_2_Init+0x44>)
 80005d4:	f008 fa4e 	bl	8008a74 <puts>


  ret = CentralAppInit();
 80005d8:	f000 f990 	bl	80008fc <CentralAppInit>
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <MX_BlueNRG_2_Init+0x32>
  {
    PRINT_DBG("CentralAppInit()--> Failed 0x%02x\r\n", ret);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4807      	ldr	r0, [pc, #28]	; (8000608 <MX_BlueNRG_2_Init+0x48>)
 80005ec:	f008 f9dc 	bl	80089a8 <iprintf>
    while(1);
 80005f0:	e7fe      	b.n	80005f0 <MX_BlueNRG_2_Init+0x30>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_BlueNRG_2_Init+0x4c>)
 80005f4:	f008 fa3e 	bl	8008a74 <puts>

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08001625 	.word	0x08001625
 8000604:	08009798 	.word	0x08009798
 8000608:	080097bc 	.word	0x080097bc
 800060c:	080097e0 	.word	0x080097e0

08000610 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  hci_user_evt_proc();
 8000614:	f007 ff88 	bl	8008528 <hci_user_evt_proc>
  User_Process();
 8000618:	f000 fc2e 	bl	8000e78 <User_Process>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
  // {
  //   PRINT_DBG("%d", data_buffer[i]);
  // }
  // fflush(stdout);

  if( 1U == data_buffer[0])
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d107      	bne.n	8000644 <receiveData+0x24>
  {
    APP__u32RxDataCnt++;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <receiveData+0x2c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <receiveData+0x2c>)
 800063c:	6013      	str	r3, [r2, #0]
    PRINT_DBG("[RX] Notified\r\n");
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <receiveData+0x30>)
 8000640:	f008 fa18 	bl	8008a74 <puts>
  }

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000d0 	.word	0x200000d0
 8000650:	0800980c 	.word	0x0800980c

08000654 <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 8000662:	2200      	movs	r2, #0
 8000664:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 8000668:	2200      	movs	r2, #0
 800066a:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <Reset_DiscoveryContext+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 800067e:	2206      	movs	r2, #6
 8000680:	2100      	movs	r1, #0
 8000682:	4821      	ldr	r0, [pc, #132]	; (8000708 <Reset_DiscoveryContext+0xb4>)
 8000684:	f008 fae6 	bl	8008c54 <memset>
  device_role = 0xFF;
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <Reset_DiscoveryContext+0xb8>)
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <Reset_DiscoveryContext+0xbc>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <Reset_DiscoveryContext+0xc0>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
  write_char_len = CHAR_VALUE_LENGTH-3;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <Reset_DiscoveryContext+0xc4>)
 800069c:	223c      	movs	r2, #60	; 0x3c
 800069e:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	80fb      	strh	r3, [r7, #6]
 80006a4:	e026      	b.n	80006f4 <Reset_DiscoveryContext+0xa0>
    data[i] = 0x31 + (i%10);
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <Reset_DiscoveryContext+0xc8>)
 80006aa:	fba3 1302 	umull	r1, r3, r3, r2
 80006ae:	08d9      	lsrs	r1, r3, #3
 80006b0:	460b      	mov	r3, r1
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	440b      	add	r3, r1
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	3231      	adds	r2, #49	; 0x31
 80006c2:	b2d1      	uxtb	r1, r2
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <Reset_DiscoveryContext+0xcc>)
 80006c6:	54d1      	strb	r1, [r2, r3]
    if ((i+1)%10==0) {
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	1c59      	adds	r1, r3, #1
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <Reset_DiscoveryContext+0xd0>)
 80006ce:	fb83 2301 	smull	r2, r3, r3, r1
 80006d2:	109a      	asrs	r2, r3, #2
 80006d4:	17cb      	asrs	r3, r1, #31
 80006d6:	1ad2      	subs	r2, r2, r3
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1aca      	subs	r2, r1, r3
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	d103      	bne.n	80006ee <Reset_DiscoveryContext+0x9a>
      data[i]='x';
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <Reset_DiscoveryContext+0xcc>)
 80006ea:	2178      	movs	r1, #120	; 0x78
 80006ec:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	3301      	adds	r3, #1
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	2b3b      	cmp	r3, #59	; 0x3b
 80006f8:	d9d5      	bls.n	80006a6 <Reset_DiscoveryContext+0x52>
    }
  }
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000b8 	.word	0x200000b8
 8000708:	200000c1 	.word	0x200000c1
 800070c:	20000005 	.word	0x20000005
 8000710:	200000fe 	.word	0x200000fe
 8000714:	200000ff 	.word	0x200000ff
 8000718:	20000006 	.word	0x20000006
 800071c:	cccccccd 	.word	0xcccccccd
 8000720:	20000100 	.word	0x20000100
 8000724:	66666667 	.word	0x66666667

08000728 <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800072e:	4a33      	ldr	r2, [pc, #204]	; (80007fc <Setup_DeviceAddress+0xd4>)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000738:	6018      	str	r0, [r3, #0]
 800073a:	3304      	adds	r3, #4
 800073c:	8019      	strh	r1, [r3, #0]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f007 fca5 	bl	8008090 <hci_le_rand>
 8000746:	4603      	mov	r3, r0
 8000748:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
 800074a:	7d7b      	ldrb	r3, [r7, #21]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d004      	beq.n	800075a <Setup_DeviceAddress+0x32>
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
 8000750:	7d7b      	ldrb	r3, [r7, #21]
 8000752:	4619      	mov	r1, r3
 8000754:	482a      	ldr	r0, [pc, #168]	; (8000800 <Setup_DeviceAddress+0xd8>)
 8000756:	f008 f927 	bl	80089a8 <iprintf>
  }

  discovery_time = 3000; /* at least 3 seconds */
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <Setup_DeviceAddress+0xdc>)
 800075c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000760:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	75fb      	strb	r3, [r7, #23]
 8000766:	e010      	b.n	800078a <Setup_DeviceAddress+0x62>
  {
    discovery_time += (2*random_number[i]);
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	3318      	adds	r3, #24
 800076c:	443b      	add	r3, r7
 800076e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000772:	b29b      	uxth	r3, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <Setup_DeviceAddress+0xdc>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	4413      	add	r3, r2
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <Setup_DeviceAddress+0xdc>)
 8000782:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	3301      	adds	r3, #1
 8000788:	75fb      	strb	r3, [r7, #23]
 800078a:	7dfb      	ldrb	r3, [r7, #23]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d9eb      	bls.n	8000768 <Setup_DeviceAddress+0x40>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 8000790:	793b      	ldrb	r3, [r7, #4]
 8000792:	733b      	strb	r3, [r7, #12]
  bdaddr[1] = (uint8_t) (random_number[3]);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	737b      	strb	r3, [r7, #13]
  bdaddr[2] = (uint8_t) (random_number[6]);
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	73bb      	strb	r3, [r7, #14]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	461a      	mov	r2, r3
 80007a2:	2106      	movs	r1, #6
 80007a4:	2000      	movs	r0, #0
 80007a6:	f005 ffae 	bl	8006706 <aci_hal_write_config_data>
 80007aa:	4603      	mov	r3, r0
 80007ac:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
 80007ae:	7d7b      	ldrb	r3, [r7, #21]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <Setup_DeviceAddress+0x98>
  {
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <Setup_DeviceAddress+0xe0>)
 80007ba:	f008 f8f5 	bl	80089a8 <iprintf>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 80007be:	e019      	b.n	80007f4 <Setup_DeviceAddress+0xcc>
    PRINT_DBG("Public address: ");
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <Setup_DeviceAddress+0xe4>)
 80007c2:	f008 f8f1 	bl	80089a8 <iprintf>
    for (uint8_t i=5; i>0; i--)
 80007c6:	2305      	movs	r3, #5
 80007c8:	75bb      	strb	r3, [r7, #22]
 80007ca:	e00b      	b.n	80007e4 <Setup_DeviceAddress+0xbc>
      PRINT_DBG("%02X-", bdaddr[i]);
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	3318      	adds	r3, #24
 80007d0:	443b      	add	r3, r7
 80007d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007d6:	4619      	mov	r1, r3
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <Setup_DeviceAddress+0xe8>)
 80007da:	f008 f8e5 	bl	80089a8 <iprintf>
    for (uint8_t i=5; i>0; i--)
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	75bb      	strb	r3, [r7, #22]
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f0      	bne.n	80007cc <Setup_DeviceAddress+0xa4>
    PRINT_DBG("%02X\r\n", bdaddr[0]);
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <Setup_DeviceAddress+0xec>)
 80007f0:	f008 f8da 	bl	80089a8 <iprintf>
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08009884 	.word	0x08009884
 8000800:	0800981c 	.word	0x0800981c
 8000804:	200000fc 	.word	0x200000fc
 8000808:	08009840 	.word	0x08009840
 800080c:	08009860 	.word	0x08009860
 8000810:	08009874 	.word	0x08009874
 8000814:	0800987c 	.word	0x0800987c

08000818 <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  uint8_t index = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]

  while (index < data_length)
 8000828:	e02d      	b.n	8000886 <Find_DeviceName+0x6e>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE CentralApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3301      	adds	r3, #1
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	4413      	add	r3, r2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b09      	cmp	r3, #9
 8000836:	d11d      	bne.n	8000874 <Find_DeviceName+0x5c>
    {
      data_value[index+10] = '\0';
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	330a      	adds	r3, #10
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
      PRINT_DBG("[Device name] %s\r\n", &data_value[index+1]);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	3301      	adds	r3, #1
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <Find_DeviceName+0x80>)
 8000850:	f008 f8aa 	bl	80089a8 <iprintf>
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], 3) == 0)
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3301      	adds	r3, #1
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	4413      	add	r3, r2
 800085c:	2203      	movs	r2, #3
 800085e:	490f      	ldr	r1, [pc, #60]	; (800089c <Find_DeviceName+0x84>)
 8000860:	4618      	mov	r0, r3
 8000862:	f008 f9e7 	bl	8008c34 <memcmp>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <Find_DeviceName+0x58>
      {
        return TRUE;
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <Find_DeviceName+0x78>
      }
      else
      {
        return FALSE;
 8000870:	2300      	movs	r3, #0
 8000872:	e00d      	b.n	8000890 <Find_DeviceName+0x78>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4413      	add	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3301      	adds	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
  while (index < data_length)
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3cd      	bcc.n	800082a <Find_DeviceName+0x12>
    }
  }

  return FALSE;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	0800988c 	.word	0x0800988c
 800089c:	20000008 	.word	0x20000008

080008a0 <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	603a      	str	r2, [r7, #0]
 80008aa:	80fb      	strh	r3, [r7, #6]
 80008ac:	460b      	mov	r3, r1
 80008ae:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1)
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <Attribute_Modified_CB+0x50>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d105      	bne.n	80008c8 <Attribute_Modified_CB+0x28>
  {
    receiveData(att_data, data_length);
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	4619      	mov	r1, r3
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f7ff fead 	bl	8000620 <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 80008c6:	e00f      	b.n	80008e8 <Attribute_Modified_CB+0x48>
  else if(handle == TXCharHandle + 2)
 80008c8:	88fa      	ldrh	r2, [r7, #6]
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Attribute_Modified_CB+0x54>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	3302      	adds	r3, #2
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d109      	bne.n	80008e8 <Attribute_Modified_CB+0x48>
    if(att_data[0] == 0x01)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <Attribute_Modified_CB+0x48>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <Attribute_Modified_CB+0x58>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <Attribute_Modified_CB+0x58>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000014c 	.word	0x2000014c
 80008f4:	2000014a 	.word	0x2000014a
 80008f8:	20000000 	.word	0x20000000

080008fc <CentralAppInit>:
* Description    : Init CentralApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t CentralAppInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  const uint8_t cu8DeviceNameLen = 7U;
 8000902:	2307      	movs	r3, #7
 8000904:	71fb      	strb	r3, [r7, #7]

  /* Sw reset of the device */
  hci_reset();
 8000906:	f007 fab2 	bl	8007e6e <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 800090a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090e:	f001 fe8f 	bl	8002630 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 8000912:	f7ff ff09 	bl	8000728 <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8000916:	2104      	movs	r1, #4
 8000918:	2001      	movs	r0, #1
 800091a:	f005 ff82 	bl	8006822 <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 800091e:	f005 fb7f 	bl	8006020 <aci_gatt_init>
 8000922:	4603      	mov	r3, r0
 8000924:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <CentralAppInit+0x3e>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <CentralAppInit+0x98>)
 8000932:	f008 f839 	bl	80089a8 <iprintf>
    return ret;
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	e027      	b.n	800098a <CentralAppInit+0x8e>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE,0x0,cu8DeviceNameLen, &service_handle,
 800093a:	1d39      	adds	r1, r7, #4
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	463b      	mov	r3, r7
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	1cbb      	adds	r3, r7, #2
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	460b      	mov	r3, r1
 8000948:	2100      	movs	r1, #0
 800094a:	2004      	movs	r0, #4
 800094c:	f005 f8dd 	bl	8005b0a <aci_gap_init>
 8000950:	4603      	mov	r3, r0
 8000952:	71bb      	strb	r3, [r7, #6]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <CentralAppInit+0x6c>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4619      	mov	r1, r3
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <CentralAppInit+0x9c>)
 8000960:	f008 f822 	bl	80089a8 <iprintf>
    return ret;
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	e010      	b.n	800098a <CentralAppInit+0x8e>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 8000968:	f000 fdc0 	bl	80014ec <Add_Sample_Service>
 800096c:	4603      	mov	r3, r0
 800096e:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d006      	beq.n	8000984 <CentralAppInit+0x88>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	4619      	mov	r1, r3
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <CentralAppInit+0xa0>)
 800097c:	f008 f814 	bl	80089a8 <iprintf>
    return ret;
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	e002      	b.n	800098a <CentralAppInit+0x8e>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 8000984:	f7ff fe66 	bl	8000654 <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	080098a0 	.word	0x080098a0
 8000998:	080098bc 	.word	0x080098bc
 800099c:	080098d8 	.word	0x080098d8

080009a0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f001 fa6c 	bl	8001e84 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f001 f9d7 	bl	8001d60 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f001 fb22 	bl	8001ffc <BSP_COM_Init>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Connection_StateMachine>:
* Description    : Connection state machine.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Connection_StateMachine(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af08      	add	r7, sp, #32
  uint8_t ret;

  switch (discovery.device_state)
 80009c2:	4bae      	ldr	r3, [pc, #696]	; (8000c7c <Connection_StateMachine+0x2c0>)
 80009c4:	8a1b      	ldrh	r3, [r3, #16]
 80009c6:	2b80      	cmp	r3, #128	; 0x80
 80009c8:	f000 818a 	beq.w	8000ce0 <Connection_StateMachine+0x324>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	f300 818a 	bgt.w	8000ce6 <Connection_StateMachine+0x32a>
 80009d2:	2b20      	cmp	r3, #32
 80009d4:	dc4a      	bgt.n	8000a6c <Connection_StateMachine+0xb0>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f2c0 8185 	blt.w	8000ce6 <Connection_StateMachine+0x32a>
 80009dc:	2b20      	cmp	r3, #32
 80009de:	f200 8182 	bhi.w	8000ce6 <Connection_StateMachine+0x32a>
 80009e2:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <Connection_StateMachine+0x2c>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	08000a73 	.word	0x08000a73
 80009ec:	08000a7f 	.word	0x08000a7f
 80009f0:	08000c23 	.word	0x08000c23
 80009f4:	08000ce7 	.word	0x08000ce7
 80009f8:	08000acf 	.word	0x08000acf
 80009fc:	08000ce7 	.word	0x08000ce7
 8000a00:	08000ce7 	.word	0x08000ce7
 8000a04:	08000ce7 	.word	0x08000ce7
 8000a08:	08000b93 	.word	0x08000b93
 8000a0c:	08000ce7 	.word	0x08000ce7
 8000a10:	08000ce7 	.word	0x08000ce7
 8000a14:	08000ce7 	.word	0x08000ce7
 8000a18:	08000ce7 	.word	0x08000ce7
 8000a1c:	08000ce7 	.word	0x08000ce7
 8000a20:	08000ce7 	.word	0x08000ce7
 8000a24:	08000ce7 	.word	0x08000ce7
 8000a28:	08000c2b 	.word	0x08000c2b
 8000a2c:	08000ce7 	.word	0x08000ce7
 8000a30:	08000ce7 	.word	0x08000ce7
 8000a34:	08000ce7 	.word	0x08000ce7
 8000a38:	08000ce7 	.word	0x08000ce7
 8000a3c:	08000ce7 	.word	0x08000ce7
 8000a40:	08000ce7 	.word	0x08000ce7
 8000a44:	08000ce7 	.word	0x08000ce7
 8000a48:	08000ce7 	.word	0x08000ce7
 8000a4c:	08000ce7 	.word	0x08000ce7
 8000a50:	08000ce7 	.word	0x08000ce7
 8000a54:	08000ce7 	.word	0x08000ce7
 8000a58:	08000ce7 	.word	0x08000ce7
 8000a5c:	08000ce7 	.word	0x08000ce7
 8000a60:	08000ce7 	.word	0x08000ce7
 8000a64:	08000ce7 	.word	0x08000ce7
 8000a68:	08000b63 	.word	0x08000b63
 8000a6c:	2b40      	cmp	r3, #64	; 0x40
 8000a6e:	d061      	beq.n	8000b34 <Connection_StateMachine+0x178>
    {
      Reset_DiscoveryContext();
    }
    break; /* end case (DISCOVERY_ERROR) */
  default:
    break;
 8000a70:	e139      	b.n	8000ce6 <Connection_StateMachine+0x32a>
      Reset_DiscoveryContext();
 8000a72:	f7ff fdef 	bl	8000654 <Reset_DiscoveryContext>
      discovery.device_state = START_DISCOVERY_PROC;
 8000a76:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	821a      	strh	r2, [r3, #16]
    break; /* end case (INIT_STATE) */
 8000a7c:	e136      	b.n	8000cec <Connection_StateMachine+0x330>
      ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a86:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a8a:	f005 f8eb 	bl	8005c64 <aci_gap_start_general_discovery_proc>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d008      	beq.n	8000aaa <Connection_StateMachine+0xee>
        PRINT_DBG("aci_gap_start_general_discovery_proc() failed: %02X\r\n",ret);
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4878      	ldr	r0, [pc, #480]	; (8000c80 <Connection_StateMachine+0x2c4>)
 8000a9e:	f007 ff83 	bl	80089a8 <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 8000aa8:	e120      	b.n	8000cec <Connection_StateMachine+0x330>
        PRINT_DBG("aci_gap_start_general_discovery_proc OK\r\n");
 8000aaa:	4876      	ldr	r0, [pc, #472]	; (8000c84 <Connection_StateMachine+0x2c8>)
 8000aac:	f007 ffe2 	bl	8008a74 <puts>
        discovery.startTime = HAL_GetTick();
 8000ab0:	f001 fdb2 	bl	8002618 <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a71      	ldr	r2, [pc, #452]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ab8:	6053      	str	r3, [r2, #4]
        discovery.check_disc_proc_timer = TRUE;
 8000aba:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 8000ac0:	4b6e      	ldr	r3, [pc, #440]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 8000acc:	e10e      	b.n	8000cec <Connection_StateMachine+0x330>
      if (discovery.check_disc_proc_timer == TRUE)
 8000ace:	4b6b      	ldr	r3, [pc, #428]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d114      	bne.n	8000b00 <Connection_StateMachine+0x144>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000ad6:	f001 fd9f 	bl	8002618 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	4a69      	ldr	r2, [pc, #420]	; (8000c88 <Connection_StateMachine+0x2cc>)
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f240 80ff 	bls.w	8000cea <Connection_StateMachine+0x32e>
          discovery.check_disc_proc_timer = FALSE;
 8000aec:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
          discovery.startTime = 0;
 8000af2:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_TERMINATE_GAP_PROC;
 8000af8:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000afa:	2220      	movs	r2, #32
 8000afc:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000afe:	e0f4      	b.n	8000cea <Connection_StateMachine+0x32e>
      else if (discovery.check_disc_mode_timer == TRUE)
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	f040 80f0 	bne.w	8000cea <Connection_StateMachine+0x32e>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000b0a:	f001 fd85 	bl	8002618 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a5c      	ldr	r2, [pc, #368]	; (8000c88 <Connection_StateMachine+0x2cc>)
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	f240 80e5 	bls.w	8000cea <Connection_StateMachine+0x32e>
          discovery.check_disc_mode_timer = FALSE;
 8000b20:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	705a      	strb	r2, [r3, #1]
          discovery.startTime = 0;
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 8000b2c:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b2e:	2240      	movs	r2, #64	; 0x40
 8000b30:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000b32:	e0da      	b.n	8000cea <Connection_StateMachine+0x32e>
      ret = aci_gap_set_non_discoverable();
 8000b34:	f004 febd 	bl	80058b2 <aci_gap_set_non_discoverable>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d008      	beq.n	8000b54 <Connection_StateMachine+0x198>
        PRINT_DBG("aci_gap_set_non_discoverable() failed: 0x%02x\r\n", ret);
 8000b42:	79bb      	ldrb	r3, [r7, #6]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4851      	ldr	r0, [pc, #324]	; (8000c8c <Connection_StateMachine+0x2d0>)
 8000b48:	f007 ff2e 	bl	80089a8 <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8000b4c:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000b52:	e0cb      	b.n	8000cec <Connection_StateMachine+0x330>
        PRINT_DBG("aci_gap_set_non_discoverable() OK\r\n");
 8000b54:	484e      	ldr	r0, [pc, #312]	; (8000c90 <Connection_StateMachine+0x2d4>)
 8000b56:	f007 ff8d 	bl	8008a74 <puts>
        discovery.device_state = INIT_STATE;
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000b60:	e0c4      	b.n	8000cec <Connection_StateMachine+0x330>
      ret = aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC); // GENERAL_DISCOVERY_PROCEDURE
 8000b62:	2002      	movs	r0, #2
 8000b64:	f005 f9ff 	bl	8005f66 <aci_gap_terminate_gap_proc>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d008      	beq.n	8000b84 <Connection_StateMachine+0x1c8>
        PRINT_DBG("aci_gap_terminate_gap_procedure() failed: 0x%02x\r\n", ret);
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4847      	ldr	r0, [pc, #284]	; (8000c94 <Connection_StateMachine+0x2d8>)
 8000b78:	f007 ff16 	bl	80089a8 <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	821a      	strh	r2, [r3, #16]
        break;
 8000b82:	e0b3      	b.n	8000cec <Connection_StateMachine+0x330>
        PRINT_DBG("aci_gap_terminate_gap_procedure() OK\r\n");
 8000b84:	4844      	ldr	r0, [pc, #272]	; (8000c98 <Connection_StateMachine+0x2dc>)
 8000b86:	f007 ff75 	bl	8008a74 <puts>
        discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_TERMINATE_GAP_PROC) */
 8000b90:	e0ac      	b.n	8000cec <Connection_StateMachine+0x330>
      PRINT_DBG("Device Found with address: ");
 8000b92:	4842      	ldr	r0, [pc, #264]	; (8000c9c <Connection_StateMachine+0x2e0>)
 8000b94:	f007 ff08 	bl	80089a8 <iprintf>
      for (uint8_t i=5; i>0; i--)
 8000b98:	2305      	movs	r3, #5
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	e00a      	b.n	8000bb4 <Connection_StateMachine+0x1f8>
        PRINT_DBG("%02X-", discovery.device_found_address[i]);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a36      	ldr	r2, [pc, #216]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	7a5b      	ldrb	r3, [r3, #9]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <Connection_StateMachine+0x2e4>)
 8000baa:	f007 fefd 	bl	80089a8 <iprintf>
      for (uint8_t i=5; i>0; i--)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f1      	bne.n	8000b9e <Connection_StateMachine+0x1e2>
      PRINT_DBG("%02X\r\n", discovery.device_found_address[0]);
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000bbc:	7a5b      	ldrb	r3, [r3, #9]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4838      	ldr	r0, [pc, #224]	; (8000ca4 <Connection_StateMachine+0x2e8>)
 8000bc2:	f007 fef1 	bl	80089a8 <iprintf>
      ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000bc8:	7a1a      	ldrb	r2, [r3, #8]
 8000bca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bce:	9306      	str	r3, [sp, #24]
 8000bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bd4:	9305      	str	r3, [sp, #20]
 8000bd6:	233c      	movs	r3, #60	; 0x3c
 8000bd8:	9304      	str	r3, [sp, #16]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9303      	str	r3, [sp, #12]
 8000bde:	2328      	movs	r3, #40	; 0x28
 8000be0:	9302      	str	r3, [sp, #8]
 8000be2:	2328      	movs	r3, #40	; 0x28
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	2300      	movs	r3, #0
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <Connection_StateMachine+0x2ec>)
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bf4:	f005 f8d3 	bl	8005d9e <aci_gap_create_connection>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d008      	beq.n	8000c14 <Connection_StateMachine+0x258>
        PRINT_DBG("aci_gap_create_connection() failed: 0x%02x\r\n", ret);
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4829      	ldr	r0, [pc, #164]	; (8000cac <Connection_StateMachine+0x2f0>)
 8000c08:	f007 fece 	bl	80089a8 <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000c12:	e06b      	b.n	8000cec <Connection_StateMachine+0x330>
        PRINT_DBG("aci_gap_create_connection() OK\r\n");
 8000c14:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <Connection_StateMachine+0x2f4>)
 8000c16:	f007 ff2d 	bl	8008a74 <puts>
        discovery.device_state = WAIT_EVENT;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000c20:	e064      	b.n	8000cec <Connection_StateMachine+0x330>
      discovery.device_state = WAIT_EVENT;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_EVENT) */
 8000c28:	e060      	b.n	8000cec <Connection_StateMachine+0x330>
      hci_le_set_scan_response_data(0,NULL);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f007 f9b6 	bl	8007f9e <hci_le_set_scan_response_data>
      ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000c32:	2300      	movs	r3, #0
 8000c34:	9306      	str	r3, [sp, #24]
 8000c36:	2300      	movs	r3, #0
 8000c38:	9305      	str	r3, [sp, #20]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9304      	str	r3, [sp, #16]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9303      	str	r3, [sp, #12]
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <Connection_StateMachine+0x2f8>)
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2312      	movs	r3, #18
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f004 fe53 	bl	8005904 <aci_gap_set_discoverable>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d029      	beq.n	8000cbc <Connection_StateMachine+0x300>
        PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <Connection_StateMachine+0x2fc>)
 8000c6e:	f007 fe9b 	bl	80089a8 <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8000c72:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <Connection_StateMachine+0x2c0>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000c78:	e038      	b.n	8000cec <Connection_StateMachine+0x330>
 8000c7a:	bf00      	nop
 8000c7c:	200000b8 	.word	0x200000b8
 8000c80:	08009900 	.word	0x08009900
 8000c84:	08009938 	.word	0x08009938
 8000c88:	200000fc 	.word	0x200000fc
 8000c8c:	08009964 	.word	0x08009964
 8000c90:	08009994 	.word	0x08009994
 8000c94:	080099b8 	.word	0x080099b8
 8000c98:	080099ec 	.word	0x080099ec
 8000c9c:	08009a14 	.word	0x08009a14
 8000ca0:	08009874 	.word	0x08009874
 8000ca4:	0800987c 	.word	0x0800987c
 8000ca8:	200000c1 	.word	0x200000c1
 8000cac:	08009a30 	.word	0x08009a30
 8000cb0:	08009a60 	.word	0x08009a60
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	08009a80 	.word	0x08009a80
        PRINT_DBG("aci_gap_set_discoverable() OK\r\n");
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <Connection_StateMachine+0x338>)
 8000cbe:	f007 fed9 	bl	8008a74 <puts>
        discovery.startTime = HAL_GetTick();
 8000cc2:	f001 fca9 	bl	8002618 <HAL_GetTick>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <Connection_StateMachine+0x33c>)
 8000cca:	6053      	str	r3, [r2, #4]
        discovery.check_disc_mode_timer = TRUE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <Connection_StateMachine+0x33c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	705a      	strb	r2, [r3, #1]
        discovery.check_disc_proc_timer = FALSE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <Connection_StateMachine+0x33c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <Connection_StateMachine+0x33c>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000cde:	e005      	b.n	8000cec <Connection_StateMachine+0x330>
      Reset_DiscoveryContext();
 8000ce0:	f7ff fcb8 	bl	8000654 <Reset_DiscoveryContext>
    break; /* end case (DISCOVERY_ERROR) */
 8000ce4:	e002      	b.n	8000cec <Connection_StateMachine+0x330>
    break;
 8000ce6:	bf00      	nop
 8000ce8:	e000      	b.n	8000cec <Connection_StateMachine+0x330>
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000cea:	bf00      	nop
  }/* end switch */

}/* end Connection_StateMachine() */
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08009aac 	.word	0x08009aac
 8000cf8:	200000b8 	.word	0x200000b8

08000cfc <APP__vUpdateDetectRange>:


static void APP__vUpdateDetectRange( int8_t i8Rssi )
{
 8000cfc:	b5b0      	push	{r4, r5, r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  static APP_tenRange enLastRange = APP_RANGE_NONE;
  
  if ( i8Rssi == (int8_t)127 )
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0c:	d103      	bne.n	8000d16 <APP__vUpdateDetectRange+0x1a>
  {
    APP__enDetectRange = APP_RANGE_NONE;
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e01d      	b.n	8000d52 <APP__vUpdateDetectRange+0x56>
  }
  else if ( i8Rssi  > APP_RSSI_THRESHOLD_NEAR) // 0-0.5M
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8000d1e:	db03      	blt.n	8000d28 <APP__vUpdateDetectRange+0x2c>
  {
     APP__enDetectRange = APP_RANGE_NEAR;
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e014      	b.n	8000d52 <APP__vUpdateDetectRange+0x56>
  }
  else if ( i8Rssi  > APP_RSSI_THRESHOLD_MID) // 0.5M-1M
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	f113 0f4a 	cmn.w	r3, #74	; 0x4a
 8000d30:	db03      	blt.n	8000d3a <APP__vUpdateDetectRange+0x3e>
  {
    APP__enDetectRange = APP_RANGE_MID;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e00b      	b.n	8000d52 <APP__vUpdateDetectRange+0x56>
  }
  else if ( i8Rssi  > APP_RSSI_THRESHOLD_FAR) // 1M-3M
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000d42:	db03      	blt.n	8000d4c <APP__vUpdateDetectRange+0x50>
  {
      APP__enDetectRange = APP_RANGE_FAR;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <APP__vUpdateDetectRange+0x56>
  }
  else  // more than 3M
  {
    APP__enDetectRange = APP_RANGE_CONNECT;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d4e:	2203      	movs	r2, #3
 8000d50:	701a      	strb	r2, [r3, #0]
  }

  if ( enLastRange != APP__enDetectRange)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <APP__vUpdateDetectRange+0xac>)
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d01d      	beq.n	8000d9a <APP__vUpdateDetectRange+0x9e>
  {
    const char * apccRangeStr[] = {"NEAR", "MID", "FAR", "CONNECTABLE","NONE"};
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <APP__vUpdateDetectRange+0xb0>)
 8000d60:	f107 040c 	add.w	r4, r7, #12
 8000d64:	461d      	mov	r5, r3
 8000d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	6023      	str	r3, [r4, #0]
    PRINT_DBG("[RANGE] %s -> %s \r\n",apccRangeStr[ (uint8_t)enLastRange], apccRangeStr[ (uint8_t)APP__enDetectRange]);
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <APP__vUpdateDetectRange+0xac>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	3320      	adds	r3, #32
 8000d76:	443b      	add	r3, r7
 8000d78:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	3320      	adds	r3, #32
 8000d84:	443b      	add	r3, r7
 8000d86:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <APP__vUpdateDetectRange+0xb4>)
 8000d8e:	f007 fe0b 	bl	80089a8 <iprintf>
    enLastRange = APP__enDetectRange;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <APP__vUpdateDetectRange+0xa8>)
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <APP__vUpdateDetectRange+0xac>)
 8000d98:	701a      	strb	r2, [r3, #0]
  }


}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bdb0      	pop	{r4, r5, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004
 8000da8:	2000001a 	.word	0x2000001a
 8000dac:	08009b04 	.word	0x08009b04
 8000db0:	08009acc 	.word	0x08009acc

08000db4 <APP__vLEDHanlder>:

static void APP__vLEDHanlder( APP_tenRange enRange )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  static uint32_t  u32LastTick = 0U;
  static uint32_t  u32LastRxDataCnt = 0U; 

  switch (enRange)
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d845      	bhi.n	8000e50 <APP__vLEDHanlder+0x9c>
 8000dc4:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <APP__vLEDHanlder+0x18>)
 8000dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dca:	bf00      	nop
 8000dcc:	08000e0f 	.word	0x08000e0f
 8000dd0:	08000ded 	.word	0x08000ded
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000ddd 	.word	0x08000ddd
      // if( HAL_GetTick() - u32LastTick > 3*APP_FAR_LED_TOGGLE_TIMEOUT )
      // {
      //   BSP_LED_Toggle(LED2);
      //   u32LastTick = HAL_GetTick();
      // }
      BSP_LED_Off(LED2);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 ffe7 	bl	8001db0 <BSP_LED_Off>
    } break;
 8000de2:	e03c      	b.n	8000e5e <APP__vLEDHanlder+0xaa>
    case APP_RANGE_FAR:
    {
      BSP_LED_Off(LED2);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 ffe3 	bl	8001db0 <BSP_LED_Off>
      // if( HAL_GetTick() - u32LastTick > APP_FAR_LED_TOGGLE_TIMEOUT )
      // {
      //   BSP_LED_Toggle(LED2);
      //   u32LastTick = HAL_GetTick();
      // }
    } break;
 8000dea:	e038      	b.n	8000e5e <APP__vLEDHanlder+0xaa>

    case APP_RANGE_MID:
    {
      if( HAL_GetTick() - u32LastTick > APP_MID_LED_TOGGLE_TIMEOUT )
 8000dec:	f001 fc14 	bl	8002618 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <APP__vLEDHanlder+0xb4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b32      	cmp	r3, #50	; 0x32
 8000dfa:	d92d      	bls.n	8000e58 <APP__vLEDHanlder+0xa4>
      {
        BSP_LED_Toggle(LED2);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 ffed 	bl	8001ddc <BSP_LED_Toggle>
        u32LastTick = HAL_GetTick();
 8000e02:	f001 fc09 	bl	8002618 <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <APP__vLEDHanlder+0xb4>)
 8000e0a:	6013      	str	r3, [r2, #0]
      }
    } break;
 8000e0c:	e024      	b.n	8000e58 <APP__vLEDHanlder+0xa4>

    case APP_RANGE_NEAR:
    {
      if ( APP__u32RxDataCnt != u32LastRxDataCnt )   // RX Counter has been changed
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <APP__vLEDHanlder+0xb8>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <APP__vLEDHanlder+0xbc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00e      	beq.n	8000e38 <APP__vLEDHanlder+0x84>
      {
        u32LastRxDataCnt = APP__u32RxDataCnt;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <APP__vLEDHanlder+0xb8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <APP__vLEDHanlder+0xbc>)
 8000e20:	6013      	str	r3, [r2, #0]
        APP__u8LEDTurnOn = 1U;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <APP__vLEDHanlder+0xc0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED2);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 ffab 	bl	8001d84 <BSP_LED_On>
        u32LastTick = HAL_GetTick();
 8000e2e:	f001 fbf3 	bl	8002618 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <APP__vLEDHanlder+0xb4>)
 8000e36:	6013      	str	r3, [r2, #0]
      }

      if( HAL_GetTick() - u32LastTick > APP_NEAR_LED_ON_TIMEOUT )
 8000e38:	f001 fbee 	bl	8002618 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <APP__vLEDHanlder+0xb4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2bfa      	cmp	r3, #250	; 0xfa
 8000e46:	d909      	bls.n	8000e5c <APP__vLEDHanlder+0xa8>
      {
        BSP_LED_Off(LED2);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 ffb1 	bl	8001db0 <BSP_LED_Off>
      }

    } break;
 8000e4e:	e005      	b.n	8000e5c <APP__vLEDHanlder+0xa8>
    case APP_RANGE_NONE:
    default:
    {
      BSP_LED_Off(LED2);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 ffad 	bl	8001db0 <BSP_LED_Off>
    } break;
 8000e56:	e002      	b.n	8000e5e <APP__vLEDHanlder+0xaa>
    } break;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <APP__vLEDHanlder+0xaa>
    } break;
 8000e5c:	bf00      	nop
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000013c 	.word	0x2000013c
 8000e6c:	200000d0 	.word	0x200000d0
 8000e70:	20000140 	.word	0x20000140
 8000e74:	200000d4 	.word	0x200000d4

08000e78 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b08f      	sub	sp, #60	; 0x3c
 8000e7c:	af02      	add	r7, sp, #8
  static uint32_t u32LastRssiReadTick = 0U;

  if(APP_FLAG(SET_CONNECTABLE))
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <User_Process+0x1d8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d008      	beq.n	8000e9c <User_Process+0x24>
  {
    Connection_StateMachine();
 8000e8a:	f7ff fd97 	bl	80009bc <Connection_StateMachine>
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f001 f84c 	bl	8001f2c <BSP_PB_GetState>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b6e      	ldr	r3, [pc, #440]	; (8001054 <User_Process+0x1dc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
  }

  if (device_role == MASTER_ROLE)
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <User_Process+0x1e0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 809f 	bne.w	8000fe4 <User_Process+0x16c>
  {
    /* Start TX handle Characteristic discovery if not yet done */
    if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8000ea6:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <User_Process+0x1d8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d02a      	beq.n	8000f08 <User_Process+0x90>
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <User_Process+0x1d8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d124      	bne.n	8000f08 <User_Process+0x90>
    {
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000ebe:	4b64      	ldr	r3, [pc, #400]	; (8001050 <User_Process+0x1d8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d14e      	bne.n	8000f68 <User_Process+0xf0>
      {
        /* Discovery TX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <User_Process+0x1e4>)
 8000ecc:	f107 041c 	add.w	r4, r7, #28
 8000ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Tx.UUID_16, charUuid128_TX, 16);
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <User_Process+0x1e8>)
 8000ed8:	461c      	mov	r4, r3
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Tx);
 8000ee4:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <User_Process+0x1ec>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	b298      	uxth	r0, r3
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <User_Process+0x1e8>)
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	f005 fa9b 	bl	8006430 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_TX_CHAR_HANDLE);
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <User_Process+0x1d8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f02:	4a53      	ldr	r2, [pc, #332]	; (8001050 <User_Process+0x1d8>)
 8000f04:	6013      	str	r3, [r2, #0]
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000f06:	e02f      	b.n	8000f68 <User_Process+0xf0>
      }
    }
    /* Start RX handle Characteristic discovery if not yet done */
    else if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8000f08:	4b51      	ldr	r3, [pc, #324]	; (8001050 <User_Process+0x1d8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d029      	beq.n	8000f68 <User_Process+0xf0>
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <User_Process+0x1d8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d123      	bne.n	8000f68 <User_Process+0xf0>
    {
      /* Discovery RX characteristic handle by UUID 128 bits */
      if (!APP_FLAG(START_READ_RX_CHAR_HANDLE))
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <User_Process+0x1d8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d11d      	bne.n	8000f68 <User_Process+0xf0>
      {
        /* Discovery RX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000f2c:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <User_Process+0x1f0>)
 8000f2e:	f107 040c 	add.w	r4, r7, #12
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Rx.UUID_16, charUuid128_RX, 16);
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <User_Process+0x1f4>)
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Rx);
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <User_Process+0x1ec>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <User_Process+0x1f4>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2302      	movs	r3, #2
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	2101      	movs	r1, #1
 8000f58:	f005 fa6a 	bl	8006430 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_RX_CHAR_HANDLE);
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <User_Process+0x1d8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <User_Process+0x1d8>)
 8000f66:	6013      	str	r3, [r2, #0]
      }
    }

    if(APP_FLAG(CONNECTED) && APP_FLAG(END_READ_TX_CHAR_HANDLE) && APP_FLAG(END_READ_RX_CHAR_HANDLE) && !APP_FLAG(NOTIFICATIONS_ENABLED))
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <User_Process+0x1d8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d037      	beq.n	8000fe4 <User_Process+0x16c>
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <User_Process+0x1d8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d031      	beq.n	8000fe4 <User_Process+0x16c>
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <User_Process+0x1d8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02b      	beq.n	8000fe4 <User_Process+0x16c>
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <User_Process+0x1d8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d125      	bne.n	8000fe4 <User_Process+0x16c>
      //       // Radio is busy.
      //       if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
      //     }
      //     APP_FLAG_SET(NOTIFICATIONS_ENABLED);
      // }
        uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000f98:	2301      	movs	r3, #1
 8000f9a:	813b      	strh	r3, [r7, #8]
        uint32_t tickstart = HAL_GetTick();
 8000f9c:	f001 fb3c 	bl	8002618 <HAL_GetTick>
 8000fa0:	62f8      	str	r0, [r7, #44]	; 0x2c

        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000fa2:	e008      	b.n	8000fb6 <User_Process+0x13e>
        {
          // Radio is busy.
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000fa4:	f001 fb38 	bl	8002618 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d80f      	bhi.n	8000fd6 <User_Process+0x15e>
        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <User_Process+0x1ec>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <User_Process+0x1f8>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f005 faf4 	bl	80065b6 <aci_gatt_write_char_desc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b46      	cmp	r3, #70	; 0x46
 8000fd2:	d0e7      	beq.n	8000fa4 <User_Process+0x12c>
 8000fd4:	e000      	b.n	8000fd8 <User_Process+0x160>
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000fd6:	bf00      	nop
        }
        APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <User_Process+0x1d8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <User_Process+0x1d8>)
 8000fe2:	6013      	str	r3, [r2, #0]
    }
  } /* if (device_role == MASTER_ROLE) */


  if( APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED) )
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <User_Process+0x1d8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d026      	beq.n	800103e <User_Process+0x1c6>
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <User_Process+0x1d8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d020      	beq.n	800103e <User_Process+0x1c6>
  {
    if ( HAL_GetTick() -  u32LastRssiReadTick > APP_RSSI_READING_PERIOD )
 8000ffc:	f001 fb0c 	bl	8002618 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <User_Process+0x1fc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800100c:	d917      	bls.n	800103e <User_Process+0x1c6>
    {
      int8_t i8tempRssi;
      hci_read_rssi(connection_handle, &i8tempRssi);
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <User_Process+0x1ec>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	1dfa      	adds	r2, r7, #7
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f006 ff51 	bl	8007ec0 <hci_read_rssi>
      APP__vUpdateDetectRange(i8tempRssi);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe6a 	bl	8000cfc <APP__vUpdateDetectRange>
      PRINT_DBG("[RSSI] %d dBm\r\n",i8tempRssi);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4619      	mov	r1, r3
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <User_Process+0x200>)
 8001030:	f007 fcba 	bl	80089a8 <iprintf>
      u32LastRssiReadTick = HAL_GetTick();
 8001034:	f001 faf0 	bl	8002618 <HAL_GetTick>
 8001038:	4603      	mov	r3, r0
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <User_Process+0x1fc>)
 800103c:	6013      	str	r3, [r2, #0]
    }
  
  }

  APP__vLEDHanlder( APP__enDetectRange );
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <User_Process+0x204>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff feb6 	bl	8000db4 <APP__vLEDHanlder>
}
 8001048:	bf00      	nop
 800104a:	3734      	adds	r7, #52	; 0x34
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	200000b4 	.word	0x200000b4
 8001058:	20000005 	.word	0x20000005
 800105c:	08009b28 	.word	0x08009b28
 8001060:	200000d8 	.word	0x200000d8
 8001064:	200000cc 	.word	0x200000cc
 8001068:	08009b38 	.word	0x08009b38
 800106c:	200000e8 	.word	0x200000e8
 8001070:	200000f8 	.word	0x200000f8
 8001074:	20000144 	.word	0x20000144
 8001078:	08009b18 	.word	0x08009b18
 800107c:	20000004 	.word	0x20000004

08001080 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	460b      	mov	r3, r1
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	4613      	mov	r3, r2
 8001092:	717b      	strb	r3, [r7, #5]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d119      	bne.n	80010ce <aci_gap_proc_complete_event+0x4e>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 800109c:	78db      	ldrb	r3, [r3, #3]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10c      	bne.n	80010bc <aci_gap_proc_complete_event+0x3c>
    {
      discovery.do_connect = FALSE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010b6:	2208      	movs	r2, #8
 80010b8:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = INIT_STATE;
    }
  }
}
 80010ba:	e008      	b.n	80010ce <aci_gap_proc_complete_event+0x4e>
      discovery.check_disc_proc_timer = FALSE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
      discovery.device_state = INIT_STATE;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <aci_gap_proc_complete_event+0x5c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	821a      	strh	r2, [r3, #16]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000b8 	.word	0x200000b8

080010e0 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	4613      	mov	r3, r2
 80010fc:	70fb      	strb	r3, [r7, #3]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <hci_le_connection_complete_event+0x98>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <hci_le_connection_complete_event+0x98>)
 8001108:	6013      	str	r3, [r2, #0]
  discovery.check_disc_proc_timer = FALSE;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <hci_le_connection_complete_event+0x9c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <hci_le_connection_complete_event+0x9c>)
 8001112:	2200      	movs	r2, #0
 8001114:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <hci_le_connection_complete_event+0x9c>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <hci_le_connection_complete_event+0xa0>)
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	8013      	strh	r3, [r2, #0]

  APP_FLAG_SET(CONNECTED);
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <hci_le_connection_complete_event+0x98>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <hci_le_connection_complete_event+0x98>)
 800112c:	6013      	str	r3, [r2, #0]
  discovery.device_state = INIT_STATE;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <hci_le_connection_complete_event+0x9c>)
 8001130:	2200      	movs	r2, #0
 8001132:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <hci_le_connection_complete_event+0xa4>)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	7013      	strb	r3, [r2, #0]

  PRINT_DBG("Connection Complete with peer address: ");
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <hci_le_connection_complete_event+0xa8>)
 800113c:	f007 fc34 	bl	80089a8 <iprintf>
  for (uint8_t i=5; i>0; i--)
 8001140:	2305      	movs	r3, #5
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e00a      	b.n	800115c <hci_le_connection_complete_event+0x7c>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	6a3a      	ldr	r2, [r7, #32]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <hci_le_connection_complete_event+0xac>)
 8001152:	f007 fc29 	bl	80089a8 <iprintf>
  for (uint8_t i=5; i>0; i--)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3b01      	subs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f1      	bne.n	8001146 <hci_le_connection_complete_event+0x66>
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <hci_le_connection_complete_event+0xb0>)
 800116a:	f007 fc1d 	bl	80089a8 <iprintf>

}/* end hci_le_connection_complete_event() */
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	200000b8 	.word	0x200000b8
 8001180:	200000cc 	.word	0x200000cc
 8001184:	20000005 	.word	0x20000005
 8001188:	08009b48 	.word	0x08009b48
 800118c:	08009874 	.word	0x08009874
 8001190:	0800987c 	.word	0x0800987c

08001194 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	71bb      	strb	r3, [r7, #6]
  APP_FLAG_CLEAR(CONNECTED);
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011b0:	6013      	str	r3, [r2, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011bc:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011c8:	6013      	str	r3, [r2, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011d4:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011e0:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011ec:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011f8:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <hci_disconnection_complete_event+0x90>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <hci_disconnection_complete_event+0x90>)
 8001204:	6013      	str	r3, [r2, #0]

  APP__vUpdateDetectRange(127);
 8001206:	207f      	movs	r0, #127	; 0x7f
 8001208:	f7ff fd78 	bl	8000cfc <APP__vUpdateDetectRange>

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <hci_disconnection_complete_event+0x94>)
 8001212:	f007 fbc9 	bl	80089a8 <iprintf>
  Reset_DiscoveryContext();
 8001216:	f7ff fa1d 	bl	8000654 <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000
 8001228:	08009b70 	.word	0x08009b70

0800122c <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7a1b      	ldrb	r3, [r3, #8]
 8001242:	75bb      	strb	r3, [r7, #22]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	757b      	strb	r3, [r7, #21]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	1c9a      	adds	r2, r3, #2
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	6810      	ldr	r0, [r2, #0]
 8001254:	6018      	str	r0, [r3, #0]
 8001256:	8892      	ldrh	r2, [r2, #4]
 8001258:	809a      	strh	r2, [r3, #4]

  /* BLE CentralApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d135      	bne.n	80012ce <hci_le_advertising_report_event+0xa2>
  {
    /* BLE CentralApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d132      	bne.n	80012ce <hci_le_advertising_report_event+0xa2>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fad1 	bl	8000818 <Find_DeviceName>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d028      	beq.n	80012ce <hci_le_advertising_report_event+0xa2>
    {
      int8_t i8Rssi = Advertising_Report[0].RSSI;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	7c1b      	ldrb	r3, [r3, #16]
 8001280:	753b      	strb	r3, [r7, #20]

      APP__vUpdateDetectRange(i8Rssi);
 8001282:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd38 	bl	8000cfc <APP__vUpdateDetectRange>

      if( APP__enDetectRange == APP_RANGE_NEAR )
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <hci_le_advertising_report_event+0xb0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11c      	bne.n	80012ce <hci_le_advertising_report_event+0xa2>
      {
        discovery.is_device_found = TRUE;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 8001296:	2201      	movs	r2, #1
 8001298:	709a      	strb	r2, [r3, #2]
        discovery.do_connect = TRUE;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 800129c:	2201      	movs	r2, #1
 800129e:	70da      	strb	r2, [r3, #3]
        discovery.check_disc_proc_timer = FALSE;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
        /* store first device found:  address type and address value */
        discovery.device_found_address_type = bdaddr_type;
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	7213      	strb	r3, [r2, #8]
        BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 80012b4:	3309      	adds	r3, #9
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	6810      	ldr	r0, [r2, #0]
 80012bc:	6018      	str	r0, [r3, #0]
 80012be:	8892      	ldrh	r2, [r2, #4]
 80012c0:	809a      	strh	r2, [r3, #4]
        /* device is found: terminate discovery procedure */
        discovery.device_state = DO_TERMINATE_GAP_PROC;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <hci_le_advertising_report_event+0xac>)
 80012c4:	2220      	movs	r2, #32
 80012c6:	821a      	strh	r2, [r3, #16]
        PRINT_DBG("Device found\r\n");
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <hci_le_advertising_report_event+0xb4>)
 80012ca:	f007 fbd3 	bl	8008a74 <puts>
      }

    }
  }
} /* hci_le_advertising_report_event() */
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000b8 	.word	0x200000b8
 80012dc:	20000004 	.word	0x20000004
 80012e0:	08009b94 	.word	0x08009b94

080012e4 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4604      	mov	r4, r0
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4623      	mov	r3, r4
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	b2d9      	uxtb	r1, r3
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fac8 	bl	80008a0 <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}

08001318 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4603      	mov	r3, r0
 8001322:	81fb      	strh	r3, [r7, #14]
 8001324:	460b      	mov	r3, r1
 8001326:	81bb      	strh	r3, [r7, #12]
 8001328:	4613      	mov	r3, r2
 800132a:	72fb      	strb	r3, [r7, #11]
  if(Attribute_Handle == tx_handle+1)
 800132c:	89ba      	ldrh	r2, [r7, #12]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <aci_gatt_notification_event+0x34>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	429a      	cmp	r2, r3
 8001336:	d104      	bne.n	8001342 <aci_gatt_notification_event+0x2a>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff f96f 	bl	8000620 <receiveData>
  }
} /* end aci_gatt_notification_event() */
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000f8 	.word	0x200000f8

08001350 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4603      	mov	r3, r0
 800135a:	81fb      	strh	r3, [r7, #14]
 800135c:	460b      	mov	r3, r1
 800135e:	81bb      	strh	r3, [r7, #12]
 8001360:	4613      	mov	r3, r2
 8001362:	72fb      	strb	r3, [r7, #11]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4619      	mov	r1, r3
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 800136a:	f007 fb1d 	bl	80089a8 <iprintf>
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00f      	beq.n	800139a <aci_gatt_disc_read_char_by_uuid_resp_event+0x4a>
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <aci_gatt_disc_read_char_by_uuid_resp_event+0x4a>
  {
    tx_handle = Attribute_Handle;
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <aci_gatt_disc_read_char_by_uuid_resp_event+0x84>)
 8001388:	89bb      	ldrh	r3, [r7, #12]
 800138a:	8013      	strh	r3, [r2, #0]
    PRINT_DBG("TX Char Handle 0x%04X\r\n", tx_handle);
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <aci_gatt_disc_read_char_by_uuid_resp_event+0x84>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <aci_gatt_disc_read_char_by_uuid_resp_event+0x88>)
 8001394:	f007 fb08 	bl	80089a8 <iprintf>
      //   BSP_LED_Toggle(LED2);
      //   HAL_Delay(250);
      // }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8001398:	e014      	b.n	80013c4 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00e      	beq.n	80013c4 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d108      	bne.n	80013c4 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
      rx_handle = Attribute_Handle;
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <aci_gatt_disc_read_char_by_uuid_resp_event+0x8c>)
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	8013      	strh	r3, [r2, #0]
      PRINT_DBG("RX Char Handle 0x%04X\r\n", rx_handle);
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <aci_gatt_disc_read_char_by_uuid_resp_event+0x8c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x90>)
 80013c0:	f007 faf2 	bl	80089a8 <iprintf>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	08009ba4 	.word	0x08009ba4
 80013d0:	20000000 	.word	0x20000000
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	08009bec 	.word	0x08009bec
 80013dc:	200000fa 	.word	0x200000fa
 80013e0:	08009c04 	.word	0x08009c04

080013e4 <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	717b      	strb	r3, [r7, #5]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00c      	beq.n	800141a <aci_gatt_proc_complete_event+0x36>
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <aci_gatt_proc_complete_event+0x36>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 8001416:	6013      	str	r3, [r2, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 8001418:	e011      	b.n	800143e <aci_gatt_proc_complete_event+0x5a>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <aci_gatt_proc_complete_event+0x5a>
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <aci_gatt_proc_complete_event+0x5a>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <aci_gatt_proc_complete_event+0x68>)
 800143c:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_proc_complete_event() */
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000000 	.word	0x20000000

08001450 <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	460a      	mov	r2, r1
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	4613      	mov	r3, r2
 800145e:	80bb      	strh	r3, [r7, #4]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <aci_gatt_tx_pool_available_event+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <aci_gatt_tx_pool_available_event+0x28>)
 800146a:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_tx_pool_available_event() */
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	4613      	mov	r3, r2
 800148a:	80bb      	strh	r3, [r7, #4]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	4619      	mov	r1, r3
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <aci_att_exchange_mtu_resp_event+0x60>)
 8001492:	f007 fa89 	bl	80089a8 <iprintf>

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	2b9e      	cmp	r3, #158	; 0x9e
 800149a:	d805      	bhi.n	80014a8 <aci_att_exchange_mtu_resp_event+0x2c>
    write_char_len = Server_RX_MTU - 3;
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	3b03      	subs	r3, #3
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <aci_att_exchange_mtu_resp_event+0x64>)
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	e002      	b.n	80014ae <aci_att_exchange_mtu_resp_event+0x32>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <aci_att_exchange_mtu_resp_event+0x64>)
 80014aa:	229b      	movs	r2, #155	; 0x9b
 80014ac:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <aci_att_exchange_mtu_resp_event+0x68>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <aci_att_exchange_mtu_resp_event+0x42>
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <aci_att_exchange_mtu_resp_event+0x68>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d109      	bne.n	80014d2 <aci_att_exchange_mtu_resp_event+0x56>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <aci_att_exchange_mtu_resp_event+0x68>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <aci_att_exchange_mtu_resp_event+0x50>
      mtu_exchanged_wait = 2;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <aci_att_exchange_mtu_resp_event+0x68>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <aci_att_exchange_mtu_resp_event+0x6c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
  }
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08009c1c 	.word	0x08009c1c
 80014e0:	20000006 	.word	0x20000006
 80014e4:	200000ff 	.word	0x200000ff
 80014e8:	200000fe 	.word	0x200000fe

080014ec <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b095      	sub	sp, #84	; 0x54
 80014f0:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 80014f2:	2306      	movs	r3, #6
 80014f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <Add_Sample_Service+0x110>)
 80014fa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80014fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001504:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <Add_Sample_Service+0x114>)
 8001506:	f107 0414 	add.w	r4, r7, #20
 800150a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <Add_Sample_Service+0x118>)
 8001512:	1d3c      	adds	r4, r7, #4
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <Add_Sample_Service+0x11c>)
 800151c:	461c      	mov	r4, r3
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 8001528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <Add_Sample_Service+0x120>)
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	4935      	ldr	r1, [pc, #212]	; (8001608 <Add_Sample_Service+0x11c>)
 8001534:	2002      	movs	r0, #2
 8001536:	f004 fd9d 	bl	8006074 <aci_gatt_add_service>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001540:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001544:	2b00      	cmp	r3, #0
 8001546:	d14b      	bne.n	80015e0 <Add_Sample_Service+0xf4>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 8001548:	4b31      	ldr	r3, [pc, #196]	; (8001610 <Add_Sample_Service+0x124>)
 800154a:	461c      	mov	r4, r3
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <Add_Sample_Service+0x120>)
 8001558:	8818      	ldrh	r0, [r3, #0]
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <Add_Sample_Service+0x128>)
 800155c:	9305      	str	r3, [sp, #20]
 800155e:	2301      	movs	r3, #1
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	2310      	movs	r3, #16
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	2300      	movs	r3, #0
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	2300      	movs	r3, #0
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2310      	movs	r3, #16
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	233f      	movs	r3, #63	; 0x3f
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <Add_Sample_Service+0x124>)
 8001576:	2102      	movs	r1, #2
 8001578:	f004 fe52 	bl	8006220 <aci_gatt_add_char>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001582:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001586:	2b00      	cmp	r3, #0
 8001588:	d12c      	bne.n	80015e4 <Add_Sample_Service+0xf8>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <Add_Sample_Service+0x124>)
 800158c:	461c      	mov	r4, r3
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <Add_Sample_Service+0x120>)
 8001598:	8818      	ldrh	r0, [r3, #0]
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <Add_Sample_Service+0x12c>)
 800159c:	9305      	str	r3, [sp, #20]
 800159e:	2301      	movs	r3, #1
 80015a0:	9304      	str	r3, [sp, #16]
 80015a2:	2310      	movs	r3, #16
 80015a4:	9303      	str	r3, [sp, #12]
 80015a6:	2301      	movs	r3, #1
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	230c      	movs	r3, #12
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	233f      	movs	r3, #63	; 0x3f
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <Add_Sample_Service+0x124>)
 80015b6:	2102      	movs	r1, #2
 80015b8:	f004 fe32 	bl	8006220 <aci_gatt_add_char>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10e      	bne.n	80015e8 <Add_Sample_Service+0xfc>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <Add_Sample_Service+0x128>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <Add_Sample_Service+0x12c>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <Add_Sample_Service+0x130>)
 80015d8:	f007 f9e6 	bl	80089a8 <iprintf>
  return BLE_STATUS_SUCCESS;
 80015dc:	2300      	movs	r3, #0
 80015de:	e008      	b.n	80015f2 <Add_Sample_Service+0x106>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015e0:	bf00      	nop
 80015e2:	e002      	b.n	80015ea <Add_Sample_Service+0xfe>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <Add_Sample_Service+0xfe>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015e8:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <Add_Sample_Service+0x134>)
 80015ec:	f007 fa42 	bl	8008a74 <puts>
  return BLE_STATUS_ERROR ;
 80015f0:	2347      	movs	r3, #71	; 0x47
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	373c      	adds	r7, #60	; 0x3c
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	08009cb8 	.word	0x08009cb8
 8001600:	08009cc8 	.word	0x08009cc8
 8001604:	08009cd8 	.word	0x08009cd8
 8001608:	20000150 	.word	0x20000150
 800160c:	20000148 	.word	0x20000148
 8001610:	20000160 	.word	0x20000160
 8001614:	2000014a 	.word	0x2000014a
 8001618:	2000014c 	.word	0x2000014c
 800161c:	08009c50 	.word	0x08009c50
 8001620:	08009c94 	.word	0x08009c94

08001624 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d163      	bne.n	8001700 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b3e      	cmp	r3, #62	; 0x3e
 8001644:	d11e      	bne.n	8001684 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3302      	adds	r3, #2
 800164a:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	e014      	b.n	800167c <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	492b      	ldr	r1, [pc, #172]	; (8001708 <APP_UserEvtRx+0xe4>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001660:	429a      	cmp	r2, r3
 8001662:	d108      	bne.n	8001676 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001664:	4a28      	ldr	r2, [pc, #160]	; (8001708 <APP_UserEvtRx+0xe4>)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	3201      	adds	r2, #1
 8001672:	4610      	mov	r0, r2
 8001674:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b09      	cmp	r3, #9
 8001680:	d9e7      	bls.n	8001652 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8001682:	e03d      	b.n	8001700 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d11e      	bne.n	80016ca <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3302      	adds	r3, #2
 8001690:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e014      	b.n	80016c2 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29a      	uxth	r2, r3
 800169e:	491b      	ldr	r1, [pc, #108]	; (800170c <APP_UserEvtRx+0xe8>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d108      	bne.n	80016bc <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <APP_UserEvtRx+0xe8>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	3202      	adds	r2, #2
 80016b8:	4610      	mov	r0, r2
 80016ba:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b2a      	cmp	r3, #42	; 0x2a
 80016c6:	d9e7      	bls.n	8001698 <APP_UserEvtRx+0x74>
}
 80016c8:	e01a      	b.n	8001700 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e014      	b.n	80016fa <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <APP_UserEvtRx+0xec>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d108      	bne.n	80016f4 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <APP_UserEvtRx+0xec>)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	3202      	adds	r2, #2
 80016f0:	4610      	mov	r0, r2
 80016f2:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	3301      	adds	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d9e7      	bls.n	80016d0 <APP_UserEvtRx+0xac>
}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	08009d8c 	.word	0x08009d8c
 800170c:	08009ddc 	.word	0x08009ddc
 8001710:	08009d54 	.word	0x08009d54

08001714 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001718:	2006      	movs	r0, #6
 800171a:	f001 f8c8 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001726:	2006      	movs	r0, #6
 8001728:	f001 f8cf 	bl	80028ca <HAL_NVIC_DisableIRQ>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HCI_TL_SPI_Init+0x94>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HCI_TL_SPI_Init+0x94>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HCI_TL_SPI_Init+0x94>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001750:	2301      	movs	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001754:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 f928 	bl	80029bc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800176c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f001 f918 	bl	80029bc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800178c:	2302      	movs	r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f001 f909 	bl	80029bc <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2102      	movs	r1, #2
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f001 fbb9 	bl	8002f28 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80017b6:	f000 fd0d 	bl	80021d4 <BSP_SPI1_Init>
 80017ba:	4603      	mov	r3, r0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000

080017c8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80017cc:	2101      	movs	r1, #1
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f001 fa9d 	bl	8002d10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80017d6:	2102      	movs	r1, #2
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f001 fa98 	bl	8002d10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80017e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f001 fa92 	bl	8002d10 <HAL_GPIO_DeInit>
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2102      	movs	r1, #2
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f001 fb93 	bl	8002f28 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f001 fb8c 	bl	8002f28 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001810:	2005      	movs	r0, #5
 8001812:	f000 ff0d 	bl	8002630 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f001 fb82 	bl	8002f28 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001824:	2005      	movs	r0, #5
 8001826:	f000 ff03 	bl	8002630 <HAL_Delay>
  return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}

08001830 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001844:	4a32      	ldr	r2, [pc, #200]	; (8001910 <HCI_TL_SPI_Receive+0xe0>)
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184e:	6018      	str	r0, [r3, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8001854:	f7ff ff65 	bl	8001722 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2102      	movs	r1, #2
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 fb62 	bl	8002f28 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001864:	f107 0108 	add.w	r1, r7, #8
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2205      	movs	r2, #5
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fce0 	bl	8002234 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8001874:	7b3b      	ldrb	r3, [r7, #12]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01e      	beq.n	80018c8 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800188a:	8bfa      	ldrh	r2, [r7, #30]
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	429a      	cmp	r2, r3
 8001890:	d901      	bls.n	8001896 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8001896:	2300      	movs	r3, #0
 8001898:	777b      	strb	r3, [r7, #29]
 800189a:	e010      	b.n	80018be <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800189c:	f107 0116 	add.w	r1, r7, #22
 80018a0:	f107 0317 	add.w	r3, r7, #23
 80018a4:	2201      	movs	r2, #1
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fcc4 	bl	8002234 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80018ac:	7f7b      	ldrb	r3, [r7, #29]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	7dba      	ldrb	r2, [r7, #22]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80018b8:	7f7b      	ldrb	r3, [r7, #29]
 80018ba:	3301      	adds	r3, #1
 80018bc:	777b      	strb	r3, [r7, #29]
 80018be:	7f7b      	ldrb	r3, [r7, #29]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8bfa      	ldrh	r2, [r7, #30]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8e9      	bhi.n	800189c <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f000 fea6 	bl	8002618 <HAL_GetTick>
 80018cc:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80018ce:	e007      	b.n	80018e0 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80018d0:	2101      	movs	r1, #1
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f001 fb0f 	bl	8002ef8 <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80018e0:	f000 fe9a 	bl	8002618 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ee:	d3ef      	bcc.n	80018d0 <HCI_TL_SPI_Receive+0xa0>
 80018f0:	e000      	b.n	80018f4 <HCI_TL_SPI_Receive+0xc4>
      break;
 80018f2:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80018f4:	f7ff ff0e 	bl	8001714 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2102      	movs	r1, #2
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f001 fb12 	bl	8002f28 <HAL_GPIO_WritePin>

  return len;
 8001904:	7f7b      	ldrb	r3, [r7, #29]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08009ce8 	.word	0x08009ce8

08001914 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001920:	4a41      	ldr	r2, [pc, #260]	; (8001a28 <HCI_TL_SPI_Send+0x114>)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192a:	6018      	str	r0, [r3, #0]
 800192c:	3304      	adds	r3, #4
 800192e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001930:	f000 fe72 	bl	8002618 <HAL_GetTick>
 8001934:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001936:	f7ff fef4 	bl	8001722 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800193a:	f000 fe6d 	bl	8002618 <HAL_GetTick>
 800193e:	61f8      	str	r0, [r7, #28]

    result = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2102      	movs	r1, #2
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f001 faec 	bl	8002f28 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8001950:	e00a      	b.n	8001968 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8001952:	f000 fe61 	bl	8002618 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d903      	bls.n	8001968 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8001960:	f06f 0302 	mvn.w	r3, #2
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001966:	e004      	b.n	8001972 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8001968:	f000 f862 	bl	8001a30 <IsDataAvailable>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0ef      	beq.n	8001952 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f113 0f03 	cmn.w	r3, #3
 8001978:	d106      	bne.n	8001988 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2102      	movs	r1, #2
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f001 fad1 	bl	8002f28 <HAL_GPIO_WritePin>
      break;
 8001986:	e031      	b.n	80019ec <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001988:	f107 010c 	add.w	r1, r7, #12
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2205      	movs	r2, #5
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fc4e 	bl	8002234 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b21a      	sxth	r2, r3
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80019a8:	8b7a      	ldrh	r2, [r7, #26]
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d306      	bcc.n	80019be <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	461a      	mov	r2, r3
 80019b4:	491d      	ldr	r1, [pc, #116]	; (8001a2c <HCI_TL_SPI_Send+0x118>)
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fc3c 	bl	8002234 <BSP_SPI1_SendRecv>
 80019bc:	e002      	b.n	80019c4 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80019be:	f06f 0301 	mvn.w	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2102      	movs	r1, #2
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f001 faac 	bl	8002f28 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80019d0:	f000 fe22 	bl	8002618 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d903      	bls.n	80019e6 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 80019de:	f06f 0302 	mvn.w	r3, #2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80019e4:	e002      	b.n	80019ec <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dba6      	blt.n	800193a <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80019ec:	f000 fe14 	bl	8002618 <HAL_GetTick>
 80019f0:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80019f2:	e007      	b.n	8001a04 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80019f4:	2101      	movs	r1, #1
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f001 fa7d 	bl	8002ef8 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a04:	f000 fe08 	bl	8002618 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a12:	d3ef      	bcc.n	80019f4 <HCI_TL_SPI_Send+0xe0>
 8001a14:	e000      	b.n	8001a18 <HCI_TL_SPI_Send+0x104>
      break;
 8001a16:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001a18:	f7ff fe7c 	bl	8001714 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08009cf0 	.word	0x08009cf0
 8001a2c:	20000178 	.word	0x20000178

08001a30 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a34:	2101      	movs	r1, #1
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f001 fa5d 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <hci_tl_lowlevel_init+0x54>)
 8001a58:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <hci_tl_lowlevel_init+0x58>)
 8001a5c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <hci_tl_lowlevel_init+0x5c>)
 8001a60:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <hci_tl_lowlevel_init+0x60>)
 8001a64:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <hci_tl_lowlevel_init+0x64>)
 8001a68:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <hci_tl_lowlevel_init+0x68>)
 8001a6c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fc21 	bl	80082b8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001a76:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001a7a:	4810      	ldr	r0, [pc, #64]	; (8001abc <hci_tl_lowlevel_init+0x6c>)
 8001a7c:	f000 ff59 	bl	8002932 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <hci_tl_lowlevel_init+0x70>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <hci_tl_lowlevel_init+0x6c>)
 8001a86:	f000 ff3a 	bl	80028fe <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2006      	movs	r0, #6
 8001a90:	f000 fef1 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a94:	2006      	movs	r0, #6
 8001a96:	f000 ff0a 	bl	80028ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08001731 	.word	0x08001731
 8001aa8:	080017c9 	.word	0x080017c9
 8001aac:	08001915 	.word	0x08001915
 8001ab0:	08001831 	.word	0x08001831
 8001ab4:	080017f3 	.word	0x080017f3
 8001ab8:	08002275 	.word	0x08002275
 8001abc:	20000170 	.word	0x20000170
 8001ac0:	08001ac5 	.word	0x08001ac5

08001ac4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001ac8:	e005      	b.n	8001ad6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001aca:	2000      	movs	r0, #0
 8001acc:	f006 fd58 	bl	8008580 <hci_notify_asynch_evt>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001ad6:	f7ff ffab 	bl	8001a30 <IsDataAvailable>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f4      	bne.n	8001aca <hci_tl_lowlevel_isr+0x6>
 8001ae0:	e000      	b.n	8001ae4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001ae2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0

  HAL_Init();
 8001aea:	f000 fd25 	bl	8002538 <HAL_Init>
  SystemClock_Config();
 8001aee:	f000 f807 	bl	8001b00 <SystemClock_Config>

  MX_GPIO_Init();
 8001af2:	f000 f857 	bl	8001ba4 <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 8001af6:	f7fe fd63 	bl	80005c0 <MX_BlueNRG_2_Init>

  while (1)
  {
    MX_BlueNRG_2_Process();
 8001afa:	f7fe fd89 	bl	8000610 <MX_BlueNRG_2_Process>
 8001afe:	e7fc      	b.n	8001afa <main+0x14>

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b096      	sub	sp, #88	; 0x58
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	2244      	movs	r2, #68	; 0x44
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 f8a0 	bl	8008c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b26:	f001 fa3f 	bl	8002fa8 <HAL_PWREx_ControlVoltageScaling>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b30:	f000 f8ae 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b46:	2302      	movs	r3, #2
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b52:	2307      	movs	r3, #7
 8001b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fa76 	bl	8003054 <HAL_RCC_OscConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b6e:	f000 f88f 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	230f      	movs	r3, #15
 8001b74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2303      	movs	r3, #3
 8001b78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fe4a 	bl	8003824 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b96:	f000 f87b 	bl	8001c90 <Error_Handler>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3758      	adds	r7, #88	; 0x58
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c24:	f001 f980 	bl	8002f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f000 febc 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001c44:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f000 feac 	bl	80029bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f000 fe04 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c6e:	2006      	movs	r0, #6
 8001c70:	f000 fe1d 	bl	80028ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2028      	movs	r0, #40	; 0x28
 8001c7a:	f000 fdfc 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c7e:	2028      	movs	r0, #40	; 0x28
 8001c80:	f000 fe15 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 fc5e 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <EXTI0_IRQHandler+0x10>)
 8001d3e:	f000 fe0d 	bl	800295c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000170 	.word	0x20000170

08001d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <EXTI15_10_IRQHandler+0x10>)
 8001d52:	f000 fe03 	bl	800295c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000024 	.word	0x20000024

08001d60 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <BSP_LED_Init+0x20>)
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08009cf8 	.word	0x08009cf8

08001d84 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <BSP_LED_On+0x28>)
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	2120      	movs	r1, #32
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 f8c4 	bl	8002f28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000001c 	.word	0x2000001c

08001db0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <BSP_LED_Off+0x28>)
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 f8ae 	bl	8002f28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000001c 	.word	0x2000001c

08001ddc <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <BSP_LED_Toggle+0x28>)
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	2220      	movs	r2, #32
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 f8b0 	bl	8002f58 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000001c 	.word	0x2000001c

08001e08 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <LED_USER_GPIO_Init+0x78>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2120      	movs	r1, #32
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f001 f867 	bl	8002f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f000 fda2 	bl	80029bc <HAL_GPIO_Init>

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <BSP_PB_Init+0x94>)
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d132      	bne.n	8001f0e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <BSP_PB_Init+0x98>)
 8001eae:	441a      	add	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	491b      	ldr	r1, [pc, #108]	; (8001f20 <BSP_PB_Init+0x9c>)
 8001eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f000 fd39 	bl	8002932 <HAL_EXTI_GetHandle>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ec6:	f06f 0303 	mvn.w	r3, #3
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e01f      	b.n	8001f0e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <BSP_PB_Init+0x98>)
 8001ed4:	1898      	adds	r0, r3, r2
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <BSP_PB_Init+0xa0>)
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f000 fd0c 	bl	80028fe <HAL_EXTI_RegisterCallback>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001eec:	f06f 0303 	mvn.w	r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00c      	b.n	8001f0e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ef4:	2028      	movs	r0, #40	; 0x28
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <BSP_PB_Init+0xa4>)
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	f000 fcb8 	bl	8002876 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f06:	2328      	movs	r3, #40	; 0x28
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fcd0 	bl	80028ae <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	08009cfc 	.word	0x08009cfc
 8001f1c:	20000024 	.word	0x20000024
 8001f20:	08009d00 	.word	0x08009d00
 8001f24:	08009d04 	.word	0x08009d04
 8001f28:	08009d08 	.word	0x08009d08

08001f2c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <BSP_PB_GetState+0x34>)
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 ffd7 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000020 	.word	0x20000020

08001f64 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fff0 	bl	8001f64 <BSP_PB_Callback>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <BUTTON_USER_GPIO_Init+0x70>)
 8001fe6:	f000 fce9 	bl	80029bc <HAL_GPIO_Init>

}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	48000800 	.word	0x48000800

08001ffc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d903      	bls.n	8002018 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002010:	f06f 0301 	mvn.w	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e025      	b.n	8002064 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	4914      	ldr	r1, [pc, #80]	; (8002070 <BSP_COM_Init+0x74>)
 800201e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002022:	4814      	ldr	r0, [pc, #80]	; (8002074 <BSP_COM_Init+0x78>)
 8002024:	4613      	mov	r3, r2
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4403      	add	r3, r0
 800202e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	4613      	mov	r3, r2
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <BSP_COM_Init+0x78>)
 800203c:	4413      	add	r3, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f86a 	bl	8002118 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	4613      	mov	r3, r2
 8002048:	015b      	lsls	r3, r3, #5
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <BSP_COM_Init+0x78>)
 8002050:	4413      	add	r3, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f810 	bl	8002078 <MX_USART2_UART_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800205e:	f06f 0303 	mvn.w	r3, #3
 8002062:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000002c 	.word	0x2000002c
 8002074:	20000278 	.word	0x20000278

08002078 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART2_UART_Init+0x64>)
 8002088:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f002 fea2 	bl	8004e0c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40004400 	.word	0x40004400

080020e0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <__io_putchar+0x30>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4613      	mov	r3, r2
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <__io_putchar+0x34>)
 80020f8:	1898      	adds	r0, r3, r2
 80020fa:	1d39      	adds	r1, r7, #4
 80020fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002100:	2201      	movs	r2, #1
 8002102:	f002 fedb 	bl	8004ebc <HAL_UART_Transmit>
  return ch;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200002fc 	.word	0x200002fc
 8002114:	20000278 	.word	0x20000278

08002118 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0ac      	sub	sp, #176	; 0xb0
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2288      	movs	r2, #136	; 0x88
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f006 fd93 	bl	8008c54 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002132:	2300      	movs	r3, #0
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4618      	mov	r0, r3
 800213c:	f001 fd78 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <USART2_MspInit+0xb8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <USART2_MspInit+0xb8>)
 8002146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <USART2_MspInit+0xb8>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <USART2_MspInit+0xb8>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <USART2_MspInit+0xb8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <USART2_MspInit+0xb8>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002170:	2304      	movs	r3, #4
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002188:	2307      	movs	r3, #7
 800218a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800218e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002198:	f000 fc10 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800219c:	2308      	movs	r3, #8
 800219e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80021ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c4:	f000 fbfa 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80021c8:	bf00      	nop
 80021ca:	37b0      	adds	r7, #176	; 0xb0
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000

080021d4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <BSP_SPI1_Init+0x54>)
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <BSP_SPI1_Init+0x58>)
 80021e2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <BSP_SPI1_Init+0x5c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4911      	ldr	r1, [pc, #68]	; (8002230 <BSP_SPI1_Init+0x5c>)
 80021ec:	600a      	str	r2, [r1, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d114      	bne.n	800221c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <BSP_SPI1_Init+0x54>)
 80021f4:	f002 fc98 	bl	8004b28 <HAL_SPI_GetState>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10e      	bne.n	800221c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <BSP_SPI1_Init+0x54>)
 8002200:	f000 f882 	bl	8002308 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <BSP_SPI1_Init+0x54>)
 800220c:	f000 f83a 	bl	8002284 <MX_SPI1_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002216:	f06f 0307 	mvn.w	r3, #7
 800221a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000300 	.word	0x20000300
 800222c:	40013000 	.word	0x40013000
 8002230:	20000364 	.word	0x20000364

08002234 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224c:	9200      	str	r2, [sp, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	4807      	ldr	r0, [pc, #28]	; (8002270 <BSP_SPI1_SendRecv+0x3c>)
 8002254:	f002 fa55 	bl	8004702 <HAL_SPI_TransmitReceive>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800225e:	f06f 0305 	mvn.w	r3, #5
 8002262:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002264:	697b      	ldr	r3, [r7, #20]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000300 	.word	0x20000300

08002274 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002278:	f000 f9ce 	bl	8002618 <HAL_GetTick>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <MX_SPI1_Init+0x80>)
 8002294:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800229c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022aa:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2228      	movs	r2, #40	; 0x28
 80022c4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2207      	movs	r2, #7
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f002 f95c 	bl	80045a8 <HAL_SPI_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40013000 	.word	0x40013000

08002308 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <SPI1_MspInit+0xbc>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <SPI1_MspInit+0xbc>)
 8002316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231a:	6613      	str	r3, [r2, #96]	; 0x60
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <SPI1_MspInit+0xbc>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <SPI1_MspInit+0xbc>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <SPI1_MspInit+0xbc>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <SPI1_MspInit+0xbc>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <SPI1_MspInit+0xbc>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <SPI1_MspInit+0xbc>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <SPI1_MspInit+0xbc>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002368:	2305      	movs	r3, #5
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002376:	f000 fb21 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800238a:	2305      	movs	r3, #5
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002398:	f000 fb10 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800239c:	2308      	movs	r3, #8
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80023ac:	2305      	movs	r3, #5
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <SPI1_MspInit+0xc0>)
 80023b8:	f000 fb00 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000400 	.word	0x48000400

080023cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e00a      	b.n	80023f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023de:	f3af 8000 	nop.w
 80023e2:	4601      	mov	r1, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbf0      	blt.n	80023de <_read+0x12>
	}

return len;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e009      	b.n	800242c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60ba      	str	r2, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe5d 	bl	80020e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf1      	blt.n	8002418 <_write+0x12>
	}
	return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_close>:

int _close(int file)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
	return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002466:	605a      	str	r2, [r3, #4]
	return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_isatty>:

int _isatty(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	return 1;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f006 fc0a 	bl	8008cf0 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20018000 	.word	0x20018000
 8002508:	00000400 	.word	0x00000400
 800250c:	20000368 	.word	0x20000368
 8002510:	20000a68 	.word	0x20000a68

08002514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_Init+0x3c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_Init+0x3c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254e:	2003      	movs	r0, #3
 8002550:	f000 f986 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002554:	2000      	movs	r0, #0
 8002556:	f000 f80f 	bl	8002578 <HAL_InitTick>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	e001      	b.n	800256a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002566:	f7ff fb99 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800256a:	79fb      	ldrb	r3, [r7, #7]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40022000 	.word	0x40022000

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_InitTick+0x6c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_InitTick+0x70>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_InitTick+0x6c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f99f 	bl	80028e6 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d809      	bhi.n	80025c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b4:	2200      	movs	r2, #0
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f000 f95b 	bl	8002876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_InitTick+0x74>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e007      	b.n	80025d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e004      	b.n	80025d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e001      	b.n	80025d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000038 	.word	0x20000038
 80025e8:	20000030 	.word	0x20000030
 80025ec:	20000034 	.word	0x20000034

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000038 	.word	0x20000038
 8002614:	2000036c 	.word	0x2000036c

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	2000036c 	.word	0x2000036c

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffee 	bl	8002618 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffde 	bl	8002618 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000038 	.word	0x20000038

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db12      	blt.n	8002750 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <__NVIC_DisableIRQ+0x44>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	3320      	adds	r3, #32
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002744:	f3bf 8f4f 	dsb	sy
}
 8002748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800274a:	f3bf 8f6f 	isb	sy
}
 800274e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff05 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff1a 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff8e 	bl	80027b4 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff0d 	bl	80026dc <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff1d 	bl	8002718 <__NVIC_DisableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff94 	bl	800281c <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80028fe:	b480      	push	{r7}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	460b      	mov	r3, r1
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	605a      	str	r2, [r3, #4]
      break;
 800291c:	e002      	b.n	8002924 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
      break;
 8002922:	bf00      	nop
  }

  return status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e003      	b.n	800294e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2201      	movs	r2, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_EXTI_IRQHandler+0x5c>)
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4798      	blx	r3
    }
  }
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40010414 	.word	0x40010414

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	e17f      	b.n	8002ccc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8171 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d005      	beq.n	80029fc <HAL_GPIO_Init+0x40>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d130      	bne.n	8002a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	2201      	movs	r2, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0201 	and.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d118      	bne.n	8002a9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ac 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b86:	4a5a      	ldr	r2, [pc, #360]	; (8002cf0 <HAL_GPIO_Init+0x334>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x242>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	; (8002cf4 <HAL_GPIO_Init+0x338>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x23e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	; (8002cf8 <HAL_GPIO_Init+0x33c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x23a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <HAL_GPIO_Init+0x340>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x236>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_GPIO_Init+0x344>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x232>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_GPIO_Init+0x348>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_GPIO_Init+0x34c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c10:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_GPIO_Init+0x334>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c42:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f ae78 	bne.w	80029cc <HAL_GPIO_Init+0x10>
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	48001000 	.word	0x48001000
 8002d04:	48001400 	.word	0x48001400
 8002d08:	48001800 	.word	0x48001800
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d1e:	e0cd      	b.n	8002ebc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d20:	2201      	movs	r2, #1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80c0 	beq.w	8002eb6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d36:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_GPIO_DeInit+0x1c8>)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d5e:	d025      	beq.n	8002dac <HAL_GPIO_DeInit+0x9c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a5e      	ldr	r2, [pc, #376]	; (8002edc <HAL_GPIO_DeInit+0x1cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d01f      	beq.n	8002da8 <HAL_GPIO_DeInit+0x98>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_GPIO_DeInit+0x1d0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d019      	beq.n	8002da4 <HAL_GPIO_DeInit+0x94>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_GPIO_DeInit+0x1d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_GPIO_DeInit+0x90>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ee8 <HAL_GPIO_DeInit+0x1d8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00d      	beq.n	8002d9c <HAL_GPIO_DeInit+0x8c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a5a      	ldr	r2, [pc, #360]	; (8002eec <HAL_GPIO_DeInit+0x1dc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <HAL_GPIO_DeInit+0x88>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a59      	ldr	r2, [pc, #356]	; (8002ef0 <HAL_GPIO_DeInit+0x1e0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_GPIO_DeInit+0x84>
 8002d90:	2306      	movs	r3, #6
 8002d92:	e00c      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002d94:	2307      	movs	r3, #7
 8002d96:	e00a      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002d98:	2305      	movs	r3, #5
 8002d9a:	e008      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_DeInit+0x9e>
 8002dac:	2300      	movs	r3, #0
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d132      	bne.n	8002e24 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	494b      	ldr	r1, [pc, #300]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4947      	ldr	r1, [pc, #284]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	4944      	ldr	r1, [pc, #272]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4940      	ldr	r1, [pc, #256]	; (8002ef4 <HAL_GPIO_DeInit+0x1e4>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <HAL_GPIO_DeInit+0x1c8>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	4830      	ldr	r0, [pc, #192]	; (8002ed8 <HAL_GPIO_DeInit+0x1c8>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	3302      	adds	r3, #2
 8002e20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	08d2      	lsrs	r2, r2, #3
 8002e58:	4019      	ands	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2103      	movs	r1, #3
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af2b 	bne.w	8002d20 <HAL_GPIO_DeInit+0x10>
  }
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	48001000 	.word	0x48001000
 8002eec:	48001400 	.word	0x48001400
 8002ef0:	48001800 	.word	0x48001800
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43d9      	mvns	r1, r3
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	400b      	ands	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d130      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d038      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2232      	movs	r2, #50	; 0x32
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fec:	e002      	b.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d102      	bne.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f2      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d110      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d007      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003036:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40007000 	.word	0x40007000
 800304c:	20000030 	.word	0x20000030
 8003050:	431bde83 	.word	0x431bde83

08003054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e3d8      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003066:	4b97      	ldr	r3, [pc, #604]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003070:	4b94      	ldr	r3, [pc, #592]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80e4 	beq.w	8003250 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_RCC_OscConfig+0x4a>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	f040 808b 	bne.w	80031ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 8087 	bne.w	80031ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e3b0      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCC_OscConfig+0x7c>
 80030c6:	4b7f      	ldr	r3, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ce:	e005      	b.n	80030dc <HAL_RCC_OscConfig+0x88>
 80030d0:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d223      	bcs.n	8003128 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fd43 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e391      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f4:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b70      	ldr	r3, [pc, #448]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	496d      	ldr	r1, [pc, #436]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	4968      	ldr	r1, [pc, #416]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	e025      	b.n	8003174 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003128:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4960      	ldr	r1, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	495b      	ldr	r1, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fd03 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e351      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003174:	f000 fc38 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	4950      	ldr	r1, [pc, #320]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	4a4e      	ldr	r2, [pc, #312]	; (80032cc <HAL_RCC_OscConfig+0x278>)
 8003192:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003194:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <HAL_RCC_OscConfig+0x27c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff f9ed 	bl	8002578 <HAL_InitTick>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d052      	beq.n	800324e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	e335      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d032      	beq.n	800321a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c0:	f7ff fa2a 	bl	8002618 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c8:	f7ff fa26 	bl	8002618 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e31e      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a36      	ldr	r2, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4931      	ldr	r1, [pc, #196]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	492c      	ldr	r1, [pc, #176]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e01a      	b.n	8003250 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003226:	f7ff f9f7 	bl	8002618 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800322e:	f7ff f9f3 	bl	8002618 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e2eb      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x1da>
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800324e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d074      	beq.n	8003346 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x21a>
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d10e      	bne.n	8003286 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d064      	beq.n	8003344 <HAL_RCC_OscConfig+0x2f0>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d160      	bne.n	8003344 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e2c8      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x24a>
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e026      	b.n	80032ec <HAL_RCC_OscConfig+0x298>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a6:	d115      	bne.n	80032d4 <HAL_RCC_OscConfig+0x280>
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80032ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e014      	b.n	80032ec <HAL_RCC_OscConfig+0x298>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	08009d0c 	.word	0x08009d0c
 80032cc:	20000030 	.word	0x20000030
 80032d0:	20000034 	.word	0x20000034
 80032d4:	4ba0      	ldr	r3, [pc, #640]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a9f      	ldr	r2, [pc, #636]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b9d      	ldr	r3, [pc, #628]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a9c      	ldr	r2, [pc, #624]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f990 	bl	8002618 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7ff f98c 	bl	8002618 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e284      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330e:	4b92      	ldr	r3, [pc, #584]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x2a8>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7ff f97c 	bl	8002618 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7ff f978 	bl	8002618 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e270      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d0>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d060      	beq.n	8003414 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x310>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d119      	bne.n	8003392 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d116      	bne.n	8003392 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	4b7c      	ldr	r3, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x328>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e24d      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	4973      	ldr	r1, [pc, #460]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003390:	e040      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d023      	beq.n	80033e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339a:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6e      	ldr	r2, [pc, #440]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7ff f937 	bl	8002618 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7ff f933 	bl	8002618 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e22b      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	495f      	ldr	r1, [pc, #380]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e018      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5c      	ldr	r2, [pc, #368]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7ff f913 	bl	8002618 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f6:	f7ff f90f 	bl	8002618 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e207      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d03c      	beq.n	800349a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01c      	beq.n	8003462 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003428:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	4a4a      	ldr	r2, [pc, #296]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7ff f8ee 	bl	8002618 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7ff f8ea 	bl	8002618 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1e2      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ef      	beq.n	8003440 <HAL_RCC_OscConfig+0x3ec>
 8003460:	e01b      	b.n	800349a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7ff f8d1 	bl	8002618 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7ff f8cd 	bl	8002618 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1c5      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800348c:	4b32      	ldr	r3, [pc, #200]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ef      	bne.n	800347a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a6 	beq.w	80035f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCC_OscConfig+0x508>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d118      	bne.n	8003512 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <HAL_RCC_OscConfig+0x508>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_RCC_OscConfig+0x508>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7ff f894 	bl	8002618 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7ff f890 	bl	8002618 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e188      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_RCC_OscConfig+0x508>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_RCC_OscConfig+0x4d8>
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800352a:	e029      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d115      	bne.n	8003560 <HAL_RCC_OscConfig+0x50c>
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a03      	ldr	r2, [pc, #12]	; (8003558 <HAL_RCC_OscConfig+0x504>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003554:	e014      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	4a90      	ldr	r2, [pc, #576]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003570:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a8c      	ldr	r2, [pc, #560]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7ff f846 	bl	8002618 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7ff f842 	bl	8002618 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e138      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ed      	beq.n	8003590 <HAL_RCC_OscConfig+0x53c>
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7ff f82f 	bl	8002618 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7ff f82b 	bl	8002618 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e121      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d4:	4b74      	ldr	r3, [pc, #464]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ed      	bne.n	80035be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80035ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 810c 	beq.w	8003816 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	2b02      	cmp	r3, #2
 8003604:	f040 80d4 	bne.w	80037b0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d130      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	3b01      	subs	r3, #1
 8003628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d127      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d11f      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003648:	2a07      	cmp	r2, #7
 800364a:	bf14      	ite	ne
 800364c:	2201      	movne	r2, #1
 800364e:	2200      	moveq	r2, #0
 8003650:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003652:	4293      	cmp	r3, r2
 8003654:	d113      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d109      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d06e      	beq.n	800375c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d069      	beq.n	8003758 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003684:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0bb      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ac:	f7fe ffb4 	bl	8002618 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe ffb0 	bl	8002618 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0a8      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_RCC_OscConfig+0x758>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ec:	0212      	lsls	r2, r2, #8
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0552      	lsls	r2, r2, #21
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003700:	0852      	lsrs	r2, r2, #1
 8003702:	3a01      	subs	r2, #1
 8003704:	0652      	lsls	r2, r2, #25
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370c:	0912      	lsrs	r2, r2, #4
 800370e:	0452      	lsls	r2, r2, #17
 8003710:	430a      	orrs	r2, r1
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003730:	f7fe ff72 	bl	8002618 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe ff6e 	bl	8002618 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e066      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003756:	e05e      	b.n	8003816 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e05d      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d156      	bne.n	8003816 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003780:	f7fe ff4a 	bl	8002618 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe ff46 	bl	8002618 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03e      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_OscConfig+0x754>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x734>
 80037a6:	e036      	b.n	8003816 <HAL_RCC_OscConfig+0x7c2>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	d02d      	beq.n	8003812 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037d4:	f023 0303 	bic.w	r3, r3, #3
 80037d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 80037e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe ff15 	bl	8002618 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fe ff11 	bl	8002618 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e009      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x7cc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x79e>
 8003810:	e001      	b.n	8003816 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0c8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d910      	bls.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4961      	ldr	r1, [pc, #388]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0b0      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d04c      	beq.n	800390e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387c:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d121      	bne.n	80038cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e09e      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d115      	bne.n	80038cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e092      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e086      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e07e      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 0203 	bic.w	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	493f      	ldr	r1, [pc, #252]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fe fe9b 	bl	8002618 <HAL_GetTick>
 80038e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e6:	f7fe fe97 	bl	8002618 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e066      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 020c 	and.w	r2, r3, #12
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	429a      	cmp	r2, r3
 800390c:	d1eb      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	492c      	ldr	r1, [pc, #176]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d210      	bcs.n	800395c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 0207 	bic.w	r2, r3, #7
 8003942:	4924      	ldr	r1, [pc, #144]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1b0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e036      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4918      	ldr	r1, [pc, #96]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4910      	ldr	r1, [pc, #64]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399a:	f000 f825 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_ClockConfig+0x1b4>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490c      	ldr	r1, [pc, #48]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fdda 	bl	8002578 <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c8:	7afb      	ldrb	r3, [r7, #11]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40022000 	.word	0x40022000
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08009d0c 	.word	0x08009d0c
 80039e0:	20000030 	.word	0x20000030
 80039e4:	20000034 	.word	0x20000034

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f6:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d11e      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a28:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e005      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a44:	4a2b      	ldr	r2, [pc, #172]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a60:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e004      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a6c:	4b23      	ldr	r3, [pc, #140]	; (8003afc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d134      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d003      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0xac>
 8003a8c:	e005      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	e005      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a96:	617b      	str	r3, [r7, #20]
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	617b      	str	r3, [r7, #20]
      break;
 8003a9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	3301      	adds	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	fb03 f202 	mul.w	r2, r3, r2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	0e5b      	lsrs	r3, r3, #25
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08009d24 	.word	0x08009d24
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	007a1200 	.word	0x007a1200

08003b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000030 	.word	0x20000030

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08009d1c 	.word	0x08009d1c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b48:	f7ff ffda 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0adb      	lsrs	r3, r3, #11
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4904      	ldr	r1, [pc, #16]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	08009d1c 	.word	0x08009d1c

08003b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b88:	f7ff fa00 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003b8c:	6178      	str	r0, [r7, #20]
 8003b8e:	e014      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f9f0 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d10b      	bne.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d919      	bls.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2ba0      	cmp	r3, #160	; 0xa0
 8003bcc:	d902      	bls.n	8003bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bce:	2302      	movs	r3, #2
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e013      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e010      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d902      	bls.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003be0:	2303      	movs	r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e00a      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d102      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e004      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b70      	cmp	r3, #112	; 0x70
 8003bf6:	d101      	bne.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 0207 	bic.w	r2, r3, #7
 8003c04:	4909      	ldr	r1, [pc, #36]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d001      	beq.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d041      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c54:	d02a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c66:	d81e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c72:	e018      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c74:	4b86      	ldr	r3, [pc, #536]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a85      	ldr	r2, [pc, #532]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c80:	e015      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fabb 	bl	8004204 <RCCEx_PLLSAI1_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3320      	adds	r3, #32
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fba6 	bl	80043ec <RCCEx_PLLSAI2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc2:	4973      	ldr	r1, [pc, #460]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d041      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ce4:	d02a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ce6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cea:	d824      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf6:	d81e      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d00:	d010      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d02:	e018      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d04:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a61      	ldr	r2, [pc, #388]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d10:	e015      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fa73 	bl	8004204 <RCCEx_PLLSAI1_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d22:	e00c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3320      	adds	r3, #32
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fb5e 	bl	80043ec <RCCEx_PLLSAI2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	74fb      	strb	r3, [r7, #19]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d52:	494f      	ldr	r1, [pc, #316]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a0 	beq.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	6593      	str	r3, [r2, #88]	; 0x58
 8003d94:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3a      	ldr	r2, [pc, #232]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db0:	f7fe fc32 	bl	8002618 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db6:	e009      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fe fc2e 	bl	8002618 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ef      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d15c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01f      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fbed 	bl	8002618 <HAL_GetTick>
 8003e3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e40:	e00b      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe fbe9 	bl	8002618 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d902      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	74fb      	strb	r3, [r7, #19]
            break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ec      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7e:	4904      	ldr	r1, [pc, #16]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e86:	e009      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9c:	7c7b      	ldrb	r3, [r7, #17]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b9e      	ldr	r3, [pc, #632]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4a9d      	ldr	r2, [pc, #628]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eba:	4b98      	ldr	r3, [pc, #608]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f023 0203 	bic.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	4994      	ldr	r1, [pc, #592]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003edc:	4b8f      	ldr	r3, [pc, #572]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 020c 	bic.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	498c      	ldr	r1, [pc, #560]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003efe:	4b87      	ldr	r3, [pc, #540]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	4983      	ldr	r1, [pc, #524]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f20:	4b7e      	ldr	r3, [pc, #504]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	497b      	ldr	r1, [pc, #492]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f42:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	4972      	ldr	r1, [pc, #456]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f64:	4b6d      	ldr	r3, [pc, #436]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	496a      	ldr	r1, [pc, #424]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b65      	ldr	r3, [pc, #404]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	4961      	ldr	r1, [pc, #388]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa8:	4b5c      	ldr	r3, [pc, #368]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	4959      	ldr	r1, [pc, #356]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fca:	4b54      	ldr	r3, [pc, #336]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	4950      	ldr	r1, [pc, #320]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	4948      	ldr	r1, [pc, #288]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800400e:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	493f      	ldr	r1, [pc, #252]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d028      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004030:	4b3a      	ldr	r3, [pc, #232]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	4937      	ldr	r1, [pc, #220]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404e:	d106      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a31      	ldr	r2, [pc, #196]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
 800405c:	e011      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004066:	d10c      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f8c8 	bl	8004204 <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d028      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	491f      	ldr	r1, [pc, #124]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ac:	d106      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b8:	60d3      	str	r3, [r2, #12]
 80040ba:	e011      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2101      	movs	r1, #1
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f899 	bl	8004204 <RCCEx_PLLSAI1_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02b      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	4908      	ldr	r1, [pc, #32]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410a:	d109      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a02      	ldr	r2, [pc, #8]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e014      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f867 	bl	8004204 <RCCEx_PLLSAI1_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d02f      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415e:	4928      	ldr	r1, [pc, #160]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d10d      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2102      	movs	r1, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f844 	bl	8004204 <RCCEx_PLLSAI1_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	74bb      	strb	r3, [r7, #18]
 800418a:	e011      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3320      	adds	r3, #32
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f925 	bl	80043ec <RCCEx_PLLSAI2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ca:	490d      	ldr	r1, [pc, #52]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ee:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000

08004204 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004212:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800421e:	4b72      	ldr	r3, [pc, #456]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d10d      	bne.n	800424a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
       ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004236:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
       ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d047      	beq.n	80042da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e044      	b.n	80042da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d018      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x86>
 8004258:	2b03      	cmp	r3, #3
 800425a:	d825      	bhi.n	80042a8 <RCCEx_PLLSAI1_Config+0xa4>
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <RCCEx_PLLSAI1_Config+0x62>
 8004260:	2b02      	cmp	r3, #2
 8004262:	d009      	beq.n	8004278 <RCCEx_PLLSAI1_Config+0x74>
 8004264:	e020      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004266:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e01a      	b.n	80042ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004278:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e013      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428a:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004296:	4b54      	ldr	r3, [pc, #336]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a6:	e006      	b.n	80042b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e004      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	430b      	orrs	r3, r1
 80042d4:	4944      	ldr	r1, [pc, #272]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d17d      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042e0:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fe f994 	bl	8002618 <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f4:	f7fe f990 	bl	8002618 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
        break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004308:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ef      	bne.n	80042f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d160      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004320:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
 8004330:	0211      	lsls	r1, r2, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	0912      	lsrs	r2, r2, #4
 8004338:	0452      	lsls	r2, r2, #17
 800433a:	430a      	orrs	r2, r1
 800433c:	492a      	ldr	r1, [pc, #168]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]
 8004342:	e027      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d112      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6892      	ldr	r2, [r2, #8]
 800435a:	0211      	lsls	r1, r2, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6912      	ldr	r2, [r2, #16]
 8004360:	0852      	lsrs	r2, r2, #1
 8004362:	3a01      	subs	r2, #1
 8004364:	0552      	lsls	r2, r2, #21
 8004366:	430a      	orrs	r2, r1
 8004368:	491f      	ldr	r1, [pc, #124]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
 800436e:	e011      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	0211      	lsls	r1, r2, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6952      	ldr	r2, [r2, #20]
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0652      	lsls	r2, r2, #25
 800438c:	430a      	orrs	r2, r1
 800438e:	4916      	ldr	r1, [pc, #88]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800439e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fe f93a 	bl	8002618 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a6:	e009      	b.n	80043bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a8:	f7fe f936 	bl	8002618 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d902      	bls.n	80043bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ba:	e005      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ef      	beq.n	80043a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4904      	ldr	r1, [pc, #16]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000

080043ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fa:	4b6a      	ldr	r3, [pc, #424]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0203 	and.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d10d      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
       ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800441e:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
       ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d047      	beq.n	80044c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e044      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d018      	beq.n	8004472 <RCCEx_PLLSAI2_Config+0x86>
 8004440:	2b03      	cmp	r3, #3
 8004442:	d825      	bhi.n	8004490 <RCCEx_PLLSAI2_Config+0xa4>
 8004444:	2b01      	cmp	r3, #1
 8004446:	d002      	beq.n	800444e <RCCEx_PLLSAI2_Config+0x62>
 8004448:	2b02      	cmp	r3, #2
 800444a:	d009      	beq.n	8004460 <RCCEx_PLLSAI2_Config+0x74>
 800444c:	e020      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800444e:	4b55      	ldr	r3, [pc, #340]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11d      	bne.n	8004496 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445e:	e01a      	b.n	8004496 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004460:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d116      	bne.n	800449a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004470:	e013      	b.n	800449a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004472:	4b4c      	ldr	r3, [pc, #304]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800447e:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800448e:	e006      	b.n	800449e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e004      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800449e:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10d      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044a6:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	430b      	orrs	r3, r1
 80044bc:	4939      	ldr	r1, [pc, #228]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d167      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d4:	f7fe f8a0 	bl	8002618 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044da:	e009      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044dc:	f7fe f89c 	bl	8002618 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d902      	bls.n	80044f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	73fb      	strb	r3, [r7, #15]
        break;
 80044ee:	e005      	b.n	80044fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ef      	bne.n	80044dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d14a      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d111      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6892      	ldr	r2, [r2, #8]
 8004518:	0211      	lsls	r1, r2, #8
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	0912      	lsrs	r2, r2, #4
 8004520:	0452      	lsls	r2, r2, #17
 8004522:	430a      	orrs	r2, r1
 8004524:	491f      	ldr	r1, [pc, #124]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	614b      	str	r3, [r1, #20]
 800452a:	e011      	b.n	8004550 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004534:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6892      	ldr	r2, [r2, #8]
 800453c:	0211      	lsls	r1, r2, #8
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6912      	ldr	r2, [r2, #16]
 8004542:	0852      	lsrs	r2, r2, #1
 8004544:	3a01      	subs	r2, #1
 8004546:	0652      	lsls	r2, r2, #25
 8004548:	430a      	orrs	r2, r1
 800454a:	4916      	ldr	r1, [pc, #88]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fe f85c 	bl	8002618 <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004562:	e009      	b.n	8004578 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004564:	f7fe f858 	bl	8002618 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d902      	bls.n	8004578 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	73fb      	strb	r3, [r7, #15]
          break;
 8004576:	e005      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4904      	ldr	r1, [pc, #16]	; (80045a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e095      	b.n	80046e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f877 	bl	80046ee <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004620:	d902      	bls.n	8004628 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e002      	b.n	800462e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004636:	d007      	beq.n	8004648 <HAL_SPI_Init+0xa0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	ea42 0103 	orr.w	r1, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0204 	and.w	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046c4:	ea42 0103 	orr.w	r1, r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b08a      	sub	sp, #40	; 0x28
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x26>
 8004724:	2302      	movs	r3, #2
 8004726:	e1fb      	b.n	8004b20 <HAL_SPI_TransmitReceive+0x41e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004730:	f7fd ff72 	bl	8002618 <HAL_GetTick>
 8004734:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800473c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004748:	887b      	ldrh	r3, [r7, #2]
 800474a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800474c:	7efb      	ldrb	r3, [r7, #27]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d00e      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x6e>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004758:	d106      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x66>
 8004762:	7efb      	ldrb	r3, [r7, #27]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d003      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004768:	2302      	movs	r3, #2
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800476e:	e1cd      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x80>
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004788:	e1c0      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b04      	cmp	r3, #4
 8004794:	d003      	beq.n	800479e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2205      	movs	r2, #5
 800479a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	887a      	ldrh	r2, [r7, #2]
 80047ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	887a      	ldrh	r2, [r7, #2]
 80047ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e0:	d802      	bhi.n	80047e8 <HAL_SPI_TransmitReceive+0xe6>
 80047e2:	8a3b      	ldrh	r3, [r7, #16]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d908      	bls.n	80047fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e007      	b.n	800480a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d007      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004830:	d97c      	bls.n	800492c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x13e>
 800483a:	8a7b      	ldrh	r3, [r7, #18]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d169      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	1c9a      	adds	r2, r3, #2
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004864:	e056      	b.n	8004914 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d11b      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1aa>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x1aa>
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b01      	cmp	r3, #1
 8004882:	d113      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	1c9a      	adds	r2, r3, #2
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d11c      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x1f2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	b292      	uxth	r2, r2
 80048d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	1c9a      	adds	r2, r3, #2
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048f4:	f7fd fe90 	bl	8002618 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004900:	429a      	cmp	r2, r3
 8004902:	d807      	bhi.n	8004914 <HAL_SPI_TransmitReceive+0x212>
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d003      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004912:	e0fb      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1a3      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x164>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d19d      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x164>
 800492a:	e0df      	b.n	8004aec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_SPI_TransmitReceive+0x23a>
 8004934:	8a7b      	ldrh	r3, [r7, #18]
 8004936:	2b01      	cmp	r3, #1
 8004938:	f040 80cb 	bne.w	8004ad2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d912      	bls.n	800496c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b02      	subs	r3, #2
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800496a:	e0b2      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004992:	e09e      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d134      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x30a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02f      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x30a>
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d12c      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d912      	bls.n	80049e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	881a      	ldrh	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	1c9a      	adds	r2, r3, #2
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b02      	subs	r3, #2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e0:	e012      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d148      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x3aa>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d042      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d923      	bls.n	8004a7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	b292      	uxth	r2, r2
 8004a3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b02      	subs	r3, #2
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d81f      	bhi.n	8004aa8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	e016      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f103 020c 	add.w	r2, r3, #12
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aac:	f7fd fdb4 	bl	8002618 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d803      	bhi.n	8004ac4 <HAL_SPI_TransmitReceive+0x3c2>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d102      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x3c8>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ad0:	e01c      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f47f af5b 	bne.w	8004994 <HAL_SPI_TransmitReceive+0x292>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f47f af54 	bne.w	8004994 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f945 	bl	8004d80 <SPI_EndRxTxTransaction>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60
 8004b08:	e000      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3728      	adds	r7, #40	; 0x28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b36:	b2db      	uxtb	r3, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b54:	f7fd fd60 	bl	8002618 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b64:	f7fd fd58 	bl	8002618 <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	015b      	lsls	r3, r3, #5
 8004b70:	0d1b      	lsrs	r3, r3, #20
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b7a:	e054      	b.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d050      	beq.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b84:	f7fd fd48 	bl	8002618 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d902      	bls.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d13d      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d111      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbc:	d004      	beq.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d107      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d10f      	bne.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e017      	b.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d19b      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000030 	.word	0x20000030

08004c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c66:	f7fd fcd7 	bl	8002618 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	4413      	add	r3, r2
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c76:	f7fd fccf 	bl	8002618 <HAL_GetTick>
 8004c7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	00da      	lsls	r2, r3, #3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	0d1b      	lsrs	r3, r3, #20
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c9c:	e060      	b.n	8004d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ca4:	d107      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d050      	beq.n	8004d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cbe:	f7fd fcab 	bl	8002618 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d902      	bls.n	8004cd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d13d      	bne.n	8004d50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cec:	d111      	bne.n	8004d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf6:	d004      	beq.n	8004d02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d107      	bne.n	8004d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d10f      	bne.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e010      	b.n	8004d72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d196      	bne.n	8004c9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000030 	.word	0x20000030

08004d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff ff5b 	bl	8004c54 <SPI_WaitFifoStateUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e027      	b.n	8004e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff fec0 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e014      	b.n	8004e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ff34 	bl	8004c54 <SPI_WaitFifoStateUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e000      	b.n	8004e04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e040      	b.n	8004ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f83a 	bl	8004ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	; 0x24
 8004e38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8ca 	bl	8004fe4 <UART_SetConfig>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e022      	b.n	8004ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fb76 	bl	8005554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fbfd 	bl	8005698 <UART_CheckIdleState>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f040 8082 	bne.w	8004fda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_Transmit+0x26>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e07a      	b.n	8004fdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Transmit+0x38>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e073      	b.n	8004fdc <HAL_UART_Transmit+0x120>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0a:	f7fd fb85 	bl	8002618 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f28:	d108      	bne.n	8004f3c <HAL_UART_Transmit+0x80>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e003      	b.n	8004f44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f4c:	e02d      	b.n	8004faa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fbe6 	bl	800572a <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e039      	b.n	8004fdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3302      	adds	r3, #2
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e008      	b.n	8004f98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b292      	uxth	r2, r2
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3301      	adds	r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1cb      	bne.n	8004f4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fbb2 	bl	800572a <UART_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e005      	b.n	8004fdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b08a      	sub	sp, #40	; 0x28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4ba4      	ldr	r3, [pc, #656]	; (80052a4 <UART_SetConfig+0x2c0>)
 8005014:	4013      	ands	r3, r2
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501c:	430b      	orrs	r3, r1
 800501e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a99      	ldr	r2, [pc, #612]	; (80052a8 <UART_SetConfig+0x2c4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	4313      	orrs	r3, r2
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a90      	ldr	r2, [pc, #576]	; (80052ac <UART_SetConfig+0x2c8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d126      	bne.n	80050bc <UART_SetConfig+0xd8>
 800506e:	4b90      	ldr	r3, [pc, #576]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d81b      	bhi.n	80050b4 <UART_SetConfig+0xd0>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0xa0>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a5 	.word	0x080050a5
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050ad 	.word	0x080050ad
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e116      	b.n	80052ca <UART_SetConfig+0x2e6>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e112      	b.n	80052ca <UART_SetConfig+0x2e6>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e10e      	b.n	80052ca <UART_SetConfig+0x2e6>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e10a      	b.n	80052ca <UART_SetConfig+0x2e6>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e106      	b.n	80052ca <UART_SetConfig+0x2e6>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7c      	ldr	r2, [pc, #496]	; (80052b4 <UART_SetConfig+0x2d0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d138      	bne.n	8005138 <UART_SetConfig+0x154>
 80050c6:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <UART_SetConfig+0x2cc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d82d      	bhi.n	8005130 <UART_SetConfig+0x14c>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0xf8>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005131 	.word	0x08005131
 80050e8:	08005131 	.word	0x08005131
 80050ec:	08005121 	.word	0x08005121
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005131 	.word	0x08005131
 8005104:	08005131 	.word	0x08005131
 8005108:	08005131 	.word	0x08005131
 800510c:	08005129 	.word	0x08005129
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e0d8      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005118:	2302      	movs	r3, #2
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e0d4      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e0d0      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e0cc      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e0c8      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a5e      	ldr	r2, [pc, #376]	; (80052b8 <UART_SetConfig+0x2d4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d125      	bne.n	800518e <UART_SetConfig+0x1aa>
 8005142:	4b5b      	ldr	r3, [pc, #364]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800514c:	2b30      	cmp	r3, #48	; 0x30
 800514e:	d016      	beq.n	800517e <UART_SetConfig+0x19a>
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	d818      	bhi.n	8005186 <UART_SetConfig+0x1a2>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d00a      	beq.n	800516e <UART_SetConfig+0x18a>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d814      	bhi.n	8005186 <UART_SetConfig+0x1a2>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <UART_SetConfig+0x182>
 8005160:	2b10      	cmp	r3, #16
 8005162:	d008      	beq.n	8005176 <UART_SetConfig+0x192>
 8005164:	e00f      	b.n	8005186 <UART_SetConfig+0x1a2>
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516c:	e0ad      	b.n	80052ca <UART_SetConfig+0x2e6>
 800516e:	2302      	movs	r3, #2
 8005170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005174:	e0a9      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005176:	2304      	movs	r3, #4
 8005178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517c:	e0a5      	b.n	80052ca <UART_SetConfig+0x2e6>
 800517e:	2308      	movs	r3, #8
 8005180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005184:	e0a1      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005186:	2310      	movs	r3, #16
 8005188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518c:	e09d      	b.n	80052ca <UART_SetConfig+0x2e6>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <UART_SetConfig+0x2d8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d125      	bne.n	80051e4 <UART_SetConfig+0x200>
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <UART_SetConfig+0x2cc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051a2:	2bc0      	cmp	r3, #192	; 0xc0
 80051a4:	d016      	beq.n	80051d4 <UART_SetConfig+0x1f0>
 80051a6:	2bc0      	cmp	r3, #192	; 0xc0
 80051a8:	d818      	bhi.n	80051dc <UART_SetConfig+0x1f8>
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d00a      	beq.n	80051c4 <UART_SetConfig+0x1e0>
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d814      	bhi.n	80051dc <UART_SetConfig+0x1f8>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <UART_SetConfig+0x1d8>
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d008      	beq.n	80051cc <UART_SetConfig+0x1e8>
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x1f8>
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e082      	b.n	80052ca <UART_SetConfig+0x2e6>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e07e      	b.n	80052ca <UART_SetConfig+0x2e6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e07a      	b.n	80052ca <UART_SetConfig+0x2e6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e076      	b.n	80052ca <UART_SetConfig+0x2e6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e072      	b.n	80052ca <UART_SetConfig+0x2e6>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <UART_SetConfig+0x2dc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d12a      	bne.n	8005244 <UART_SetConfig+0x260>
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <UART_SetConfig+0x2cc>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051fc:	d01a      	beq.n	8005234 <UART_SetConfig+0x250>
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005202:	d81b      	bhi.n	800523c <UART_SetConfig+0x258>
 8005204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005208:	d00c      	beq.n	8005224 <UART_SetConfig+0x240>
 800520a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520e:	d815      	bhi.n	800523c <UART_SetConfig+0x258>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <UART_SetConfig+0x238>
 8005214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005218:	d008      	beq.n	800522c <UART_SetConfig+0x248>
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x258>
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e052      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005224:	2302      	movs	r3, #2
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e04e      	b.n	80052ca <UART_SetConfig+0x2e6>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e04a      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e046      	b.n	80052ca <UART_SetConfig+0x2e6>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e042      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <UART_SetConfig+0x2c4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d13a      	bne.n	80052c4 <UART_SetConfig+0x2e0>
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800525c:	d01a      	beq.n	8005294 <UART_SetConfig+0x2b0>
 800525e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005262:	d81b      	bhi.n	800529c <UART_SetConfig+0x2b8>
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d00c      	beq.n	8005284 <UART_SetConfig+0x2a0>
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526e:	d815      	bhi.n	800529c <UART_SetConfig+0x2b8>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <UART_SetConfig+0x298>
 8005274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005278:	d008      	beq.n	800528c <UART_SetConfig+0x2a8>
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x2b8>
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e022      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e01e      	b.n	80052ca <UART_SetConfig+0x2e6>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e01a      	b.n	80052ca <UART_SetConfig+0x2e6>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e016      	b.n	80052ca <UART_SetConfig+0x2e6>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e012      	b.n	80052ca <UART_SetConfig+0x2e6>
 80052a4:	efff69f3 	.word	0xefff69f3
 80052a8:	40008000 	.word	0x40008000
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40004400 	.word	0x40004400
 80052b8:	40004800 	.word	0x40004800
 80052bc:	40004c00 	.word	0x40004c00
 80052c0:	40005000 	.word	0x40005000
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a9f      	ldr	r2, [pc, #636]	; (800554c <UART_SetConfig+0x568>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d17a      	bne.n	80053ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d824      	bhi.n	8005326 <UART_SetConfig+0x342>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x300>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005327 	.word	0x08005327
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005327 	.word	0x08005327
 80052f4:	08005317 	.word	0x08005317
 80052f8:	08005327 	.word	0x08005327
 80052fc:	08005327 	.word	0x08005327
 8005300:	08005327 	.word	0x08005327
 8005304:	0800531f 	.word	0x0800531f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe fc06 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 800530c:	61f8      	str	r0, [r7, #28]
        break;
 800530e:	e010      	b.n	8005332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4b8f      	ldr	r3, [pc, #572]	; (8005550 <UART_SetConfig+0x56c>)
 8005312:	61fb      	str	r3, [r7, #28]
        break;
 8005314:	e00d      	b.n	8005332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005316:	f7fe fb67 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800531a:	61f8      	str	r0, [r7, #28]
        break;
 800531c:	e009      	b.n	8005332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005322:	61fb      	str	r3, [r7, #28]
        break;
 8005324:	e005      	b.n	8005332 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80fb 	beq.w	8005530 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	429a      	cmp	r2, r3
 8005348:	d305      	bcc.n	8005356 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800535c:	e0e8      	b.n	8005530 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2200      	movs	r2, #0
 8005362:	461c      	mov	r4, r3
 8005364:	4615      	mov	r5, r2
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	022b      	lsls	r3, r5, #8
 8005370:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005374:	0222      	lsls	r2, r4, #8
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	6849      	ldr	r1, [r1, #4]
 800537a:	0849      	lsrs	r1, r1, #1
 800537c:	2000      	movs	r0, #0
 800537e:	4688      	mov	r8, r1
 8005380:	4681      	mov	r9, r0
 8005382:	eb12 0a08 	adds.w	sl, r2, r8
 8005386:	eb43 0b09 	adc.w	fp, r3, r9
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005398:	4650      	mov	r0, sl
 800539a:	4659      	mov	r1, fp
 800539c:	f7fa ff68 	bl	8000270 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ae:	d308      	bcc.n	80053c2 <UART_SetConfig+0x3de>
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b6:	d204      	bcs.n	80053c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	e0b6      	b.n	8005530 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053c8:	e0b2      	b.n	8005530 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d2:	d15e      	bne.n	8005492 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d828      	bhi.n	800542e <UART_SetConfig+0x44a>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x400>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	0800541f 	.word	0x0800541f
 80053f8:	0800542f 	.word	0x0800542f
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	0800542f 	.word	0x0800542f
 8005404:	08005427 	.word	0x08005427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7fe fb86 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 800540c:	61f8      	str	r0, [r7, #28]
        break;
 800540e:	e014      	b.n	800543a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fe fb98 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005414:	61f8      	str	r0, [r7, #28]
        break;
 8005416:	e010      	b.n	800543a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <UART_SetConfig+0x56c>)
 800541a:	61fb      	str	r3, [r7, #28]
        break;
 800541c:	e00d      	b.n	800543a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7fe fae3 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005422:	61f8      	str	r0, [r7, #28]
        break;
 8005424:	e009      	b.n	800543a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	61fb      	str	r3, [r7, #28]
        break;
 800542c:	e005      	b.n	800543a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d077      	beq.n	8005530 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005a      	lsls	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	441a      	add	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d916      	bls.n	800548a <UART_SetConfig+0x4a6>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005462:	d212      	bcs.n	800548a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f023 030f 	bic.w	r3, r3, #15
 800546c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	b29a      	uxth	r2, r3
 800547a:	8afb      	ldrh	r3, [r7, #22]
 800547c:	4313      	orrs	r3, r2
 800547e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	8afa      	ldrh	r2, [r7, #22]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e052      	b.n	8005530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005490:	e04e      	b.n	8005530 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005496:	2b08      	cmp	r3, #8
 8005498:	d827      	bhi.n	80054ea <UART_SetConfig+0x506>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x4bc>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fb28 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 80054c8:	61f8      	str	r0, [r7, #28]
        break;
 80054ca:	e014      	b.n	80054f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fb3a 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61f8      	str	r0, [r7, #28]
        break;
 80054d2:	e010      	b.n	80054f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <UART_SetConfig+0x56c>)
 80054d6:	61fb      	str	r3, [r7, #28]
        break;
 80054d8:	e00d      	b.n	80054f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fa85 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80054de:	61f8      	str	r0, [r7, #28]
        break;
 80054e0:	e009      	b.n	80054f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61fb      	str	r3, [r7, #28]
        break;
 80054e8:	e005      	b.n	80054f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054f4:	bf00      	nop
    }

    if (pclk != 0U)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	085a      	lsrs	r2, r3, #1
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d909      	bls.n	800552a <UART_SetConfig+0x546>
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d205      	bcs.n	800552a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60da      	str	r2, [r3, #12]
 8005528:	e002      	b.n	8005530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800553c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005540:	4618      	mov	r0, r3
 8005542:	3728      	adds	r7, #40	; 0x28
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	40008000 	.word	0x40008000
 8005550:	00f42400 	.word	0x00f42400

08005554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d10a      	bne.n	800566a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a8:	f7fc ffb6 	bl	8002618 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10e      	bne.n	80056da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f82d 	bl	800572a <UART_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e023      	b.n	8005722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d10e      	bne.n	8005706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f817 	bl	800572a <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e00d      	b.n	8005722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b09c      	sub	sp, #112	; 0x70
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573a:	e0a5      	b.n	8005888 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	f000 80a1 	beq.w	8005888 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fc ff67 	bl	8002618 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <UART_WaitOnFlagUntilTimeout+0x32>
 8005756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005758:	2b00      	cmp	r3, #0
 800575a:	d13e      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800576a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005770:	667b      	str	r3, [r7, #100]	; 0x64
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800577c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	663b      	str	r3, [r7, #96]	; 0x60
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e067      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d04f      	beq.n	8005888 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f6:	d147      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005800:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
 8005822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	613b      	str	r3, [r7, #16]
   return(result);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	66bb      	str	r3, [r7, #104]	; 0x68
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005854:	623a      	str	r2, [r7, #32]
 8005856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	61bb      	str	r3, [r7, #24]
   return(result);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e010      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4013      	ands	r3, r2
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	429a      	cmp	r2, r3
 8005896:	bf0c      	ite	eq
 8005898:	2301      	moveq	r3, #1
 800589a:	2300      	movne	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f43f af4a 	beq.w	800573c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3770      	adds	r7, #112	; 0x70
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b088      	sub	sp, #32
 80058b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	2218      	movs	r2, #24
 80058c2:	2100      	movs	r1, #0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f003 f9c5 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 80058ca:	233f      	movs	r3, #63	; 0x3f
 80058cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80058ce:	2381      	movs	r3, #129	; 0x81
 80058d0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058d2:	1dfb      	adds	r3, r7, #7
 80058d4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 fd09 	bl	80082f8 <hci_send_req>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da01      	bge.n	80058f0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80058ec:	23ff      	movs	r3, #255	; 0xff
 80058ee:	e005      	b.n	80058fc <aci_gap_set_non_discoverable+0x4a>
  if (status) {
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <aci_gap_set_non_discoverable+0x48>
    return status;
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	e000      	b.n	80058fc <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8005904:	b5b0      	push	{r4, r5, r7, lr}
 8005906:	b0ce      	sub	sp, #312	; 0x138
 8005908:	af00      	add	r7, sp, #0
 800590a:	4605      	mov	r5, r0
 800590c:	460c      	mov	r4, r1
 800590e:	4610      	mov	r0, r2
 8005910:	4619      	mov	r1, r3
 8005912:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005916:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800591a:	462a      	mov	r2, r5
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005922:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005926:	4622      	mov	r2, r4
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800592e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005932:	4602      	mov	r2, r0
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800593a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800593e:	460a      	mov	r2, r1
 8005940:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800594a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800594e:	3308      	adds	r3, #8
 8005950:	f107 020c 	add.w	r2, r7, #12
 8005954:	4413      	add	r3, r2
 8005956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800595a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800595e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005962:	4413      	add	r3, r2
 8005964:	3309      	adds	r3, #9
 8005966:	f107 020c 	add.w	r2, r7, #12
 800596a:	4413      	add	r3, r2
 800596c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005970:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005974:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8005982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005986:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800598a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005992:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005996:	3301      	adds	r3, #1
 8005998:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800599c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059a4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80059a8:	8812      	ldrh	r2, [r2, #0]
 80059aa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80059ae:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059b2:	3302      	adds	r3, #2
 80059b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80059b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059c0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80059ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059ce:	3302      	adds	r3, #2
 80059d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80059d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059dc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059e8:	3301      	adds	r3, #1
 80059ea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 80059ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80059f6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80059f8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059fc:	3301      	adds	r3, #1
 80059fe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8005a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a06:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a0a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005a0c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a10:	3301      	adds	r3, #1
 8005a12:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a20:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005a24:	4618      	mov	r0, r3
 8005a26:	f003 f98f 	bl	8008d48 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8005a2a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005a2e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005a32:	4413      	add	r3, r2
 8005a34:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005a38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a3c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005a40:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a42:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a46:	3301      	adds	r3, #1
 8005a48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8005a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a50:	3301      	adds	r3, #1
 8005a52:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005a56:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f003 f974 	bl	8008d48 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8005a60:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005a64:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005a68:	4413      	add	r3, r2
 8005a6a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8005a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a72:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005a76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005a78:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8005a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a86:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005a8a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005a8c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a90:	3302      	adds	r3, #2
 8005a92:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a9a:	2218      	movs	r2, #24
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 f8d8 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8005aa4:	233f      	movs	r3, #63	; 0x3f
 8005aa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005aaa:	2383      	movs	r3, #131	; 0x83
 8005aac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005ab8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005abc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ac0:	f107 030b 	add.w	r3, r7, #11
 8005ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f002 fc0f 	bl	80082f8 <hci_send_req>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da01      	bge.n	8005ae4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005ae0:	23ff      	movs	r3, #255	; 0xff
 8005ae2:	e00d      	b.n	8005b00 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8005ae4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ae8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <aci_gap_set_discoverable+0x1fa>
    return status;
 8005af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005af6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	e000      	b.n	8005b00 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bdb0      	pop	{r4, r5, r7, pc}

08005b0a <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005b0a:	b590      	push	{r4, r7, lr}
 8005b0c:	b0cf      	sub	sp, #316	; 0x13c
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	4604      	mov	r4, r0
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b1a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b24:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b28:	4622      	mov	r2, r4
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b30:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005b34:	4602      	mov	r2, r0
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b3c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005b40:	460a      	mov	r2, r1
 8005b42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b4c:	f107 030c 	add.w	r3, r7, #12
 8005b50:	2207      	movs	r2, #7
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f003 f87d 	bl	8008c54 <memset>
  uint8_t index_input = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b68:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b70:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b74:	3301      	adds	r3, #1
 8005b76:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b7e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b82:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b8a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b98:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b9c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005ba4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bb2:	2218      	movs	r2, #24
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f003 f84c 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8005bbc:	233f      	movs	r3, #63	; 0x3f
 8005bbe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005bc2:	238a      	movs	r3, #138	; 0x8a
 8005bc4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005bd0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005be0:	2307      	movs	r3, #7
 8005be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005be6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f002 fb83 	bl	80082f8 <hci_send_req>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da01      	bge.n	8005bfc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005bf8:	23ff      	movs	r3, #255	; 0xff
 8005bfa:	e02e      	b.n	8005c5a <aci_gap_init+0x150>
  if (resp.Status) {
 8005bfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <aci_gap_init+0x10c>
    return resp.Status;
 8005c0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	e021      	b.n	8005c5a <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005c16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c28:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005c30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c42:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005c44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c4c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c56:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}

08005c64 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b0cc      	sub	sp, #304	; 0x130
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c86:	4622      	mov	r2, r4
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005c92:	4602      	mov	r2, r0
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cc4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005cc8:	8812      	ldrh	r2, [r2, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ccc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cde:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ce2:	8812      	ldrh	r2, [r2, #0]
 8005ce4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005ce6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005cea:	3302      	adds	r3, #2
 8005cec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cf8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d00:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d04:	3301      	adds	r3, #1
 8005d06:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d12:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d28:	2218      	movs	r2, #24
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f002 ff91 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8005d32:	233f      	movs	r3, #63	; 0x3f
 8005d34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005d38:	2397      	movs	r3, #151	; 0x97
 8005d3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005d3e:	230f      	movs	r3, #15
 8005d40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005d44:	f107 030c 	add.w	r3, r7, #12
 8005d48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d4c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d54:	f107 030b 	add.w	r3, r7, #11
 8005d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f002 fac5 	bl	80082f8 <hci_send_req>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da01      	bge.n	8005d78 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005d74:	23ff      	movs	r3, #255	; 0xff
 8005d76:	e00d      	b.n	8005d94 <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bdb0      	pop	{r4, r5, r7, pc}

08005d9e <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005d9e:	b590      	push	{r4, r7, lr}
 8005da0:	b0cf      	sub	sp, #316	; 0x13c
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	4604      	mov	r4, r0
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dae:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005db8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005dbc:	4622      	mov	r2, r4
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc8:	4602      	mov	r2, r0
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dd0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005de0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005de4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005df6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dfa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005dfe:	8812      	ldrh	r2, [r2, #0]
 8005e00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e02:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e06:	3302      	adds	r3, #2
 8005e08:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005e0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e10:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e14:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e18:	8812      	ldrh	r2, [r2, #0]
 8005e1a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005e1c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e20:	3302      	adds	r3, #2
 8005e22:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e2e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e36:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e44:	1d58      	adds	r0, r3, #5
 8005e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005e4e:	2206      	movs	r2, #6
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	f002 ff79 	bl	8008d48 <memcpy>
  index_input += 6;
 8005e56:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e5a:	3306      	adds	r3, #6
 8005e5c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e64:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005e68:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005e6a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e78:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005e7c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005e7e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e82:	3302      	adds	r3, #2
 8005e84:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005e88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e8c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005e90:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005e92:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e96:	3302      	adds	r3, #2
 8005e98:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005e9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ea0:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005ea4:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005ea6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005eaa:	3302      	adds	r3, #2
 8005eac:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005eb8:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005eba:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005ec4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ec8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005ecc:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005ece:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005edc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005ee0:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005ee2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005eec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ef0:	2218      	movs	r2, #24
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f002 fead 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8005efa:	233f      	movs	r3, #63	; 0x3f
 8005efc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005f00:	239c      	movs	r3, #156	; 0x9c
 8005f02:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005f06:	230f      	movs	r3, #15
 8005f08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005f14:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005f1c:	f107 0313 	add.w	r3, r7, #19
 8005f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005f2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 f9e1 	bl	80082f8 <hci_send_req>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da01      	bge.n	8005f40 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005f3c:	23ff      	movs	r3, #255	; 0xff
 8005f3e:	e00d      	b.n	8005f5c <aci_gap_create_connection+0x1be>
  if (status) {
 8005f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f44:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <aci_gap_create_connection+0x1bc>
    return status;
 8005f4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f52:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	e000      	b.n	8005f5c <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd90      	pop	{r4, r7, pc}

08005f66 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b0cc      	sub	sp, #304	; 0x130
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005f76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005f78:	f107 030c 	add.w	r3, r7, #12
 8005f7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f9a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005fa2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fb0:	2218      	movs	r2, #24
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f002 fe4d 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8005fba:	233f      	movs	r3, #63	; 0x3f
 8005fbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005fc0:	239d      	movs	r3, #157	; 0x9d
 8005fc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fc6:	f107 030c 	add.w	r3, r7, #12
 8005fca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005fd6:	f107 030b 	add.w	r3, r7, #11
 8005fda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 f984 	bl	80082f8 <hci_send_req>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da01      	bge.n	8005ffa <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005ff6:	23ff      	movs	r3, #255	; 0xff
 8005ff8:	e00d      	b.n	8006016 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <aci_gap_terminate_gap_proc+0xae>
    return status;
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	e000      	b.n	8006016 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	2218      	movs	r2, #24
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f002 fe0e 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8006038:	233f      	movs	r3, #63	; 0x3f
 800603a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800603c:	f240 1301 	movw	r3, #257	; 0x101
 8006040:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006042:	1dfb      	adds	r3, r7, #7
 8006044:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f002 f951 	bl	80082f8 <hci_send_req>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	da01      	bge.n	8006060 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800605c:	23ff      	movs	r3, #255	; 0xff
 800605e:	e005      	b.n	800606c <aci_gatt_init+0x4c>
  if (status) {
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <aci_gatt_init+0x4a>
    return status;
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	e000      	b.n	800606c <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b0cf      	sub	sp, #316	; 0x13c
 8006078:	af00      	add	r7, sp, #0
 800607a:	4604      	mov	r4, r0
 800607c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006080:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006084:	6001      	str	r1, [r0, #0]
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800608e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006092:	4622      	mov	r2, r4
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800609a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800609e:	4602      	mov	r2, r0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80060aa:	460a      	mov	r2, r1
 80060ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80060ae:	f107 030c 	add.w	r3, r7, #12
 80060b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80060b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060ba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d00a      	beq.n	80060da <aci_gatt_add_service+0x66>
 80060c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060c8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d101      	bne.n	80060d6 <aci_gatt_add_service+0x62>
 80060d2:	2311      	movs	r3, #17
 80060d4:	e002      	b.n	80060dc <aci_gatt_add_service+0x68>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <aci_gatt_add_service+0x68>
 80060da:	2303      	movs	r3, #3
 80060dc:	f107 020c 	add.w	r2, r7, #12
 80060e0:	4413      	add	r3, r2
 80060e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	2203      	movs	r2, #3
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 fdb0 	bl	8008c54 <memset>
  uint8_t index_input = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80060fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006102:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800610a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800610e:	3301      	adds	r3, #1
 8006110:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8006114:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006118:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d002      	beq.n	8006128 <aci_gatt_add_service+0xb4>
 8006122:	2b02      	cmp	r3, #2
 8006124:	d004      	beq.n	8006130 <aci_gatt_add_service+0xbc>
 8006126:	e007      	b.n	8006138 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8006128:	2302      	movs	r3, #2
 800612a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800612e:	e005      	b.n	800613c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006136:	e001      	b.n	800613c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006138:	2347      	movs	r3, #71	; 0x47
 800613a:	e06c      	b.n	8006216 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800613c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006140:	1c58      	adds	r0, r3, #1
 8006142:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006146:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800614a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	f002 fdfa 	bl	8008d48 <memcpy>
    index_input += size;
 8006154:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006158:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800615c:	4413      	add	r3, r2
 800615e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8006162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006166:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800616a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006172:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006176:	3301      	adds	r3, #1
 8006178:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800617c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006180:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006184:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800618c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006190:	3301      	adds	r3, #1
 8006192:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800619a:	2218      	movs	r2, #24
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f002 fd58 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 80061a4:	233f      	movs	r3, #63	; 0x3f
 80061a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80061aa:	f44f 7381 	mov.w	r3, #258	; 0x102
 80061ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061ba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80061ca:	2303      	movs	r3, #3
 80061cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80061d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f002 f88e 	bl	80082f8 <hci_send_req>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da01      	bge.n	80061e6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80061e2:	23ff      	movs	r3, #255	; 0xff
 80061e4:	e017      	b.n	8006216 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80061e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80061f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	e00a      	b.n	8006216 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006200:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006212:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800621c:	46bd      	mov	sp, r7
 800621e:	bd90      	pop	{r4, r7, pc}

08006220 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b0d1      	sub	sp, #324	; 0x144
 8006224:	af00      	add	r7, sp, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800622e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006232:	600a      	str	r2, [r1, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800623a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800623e:	4622      	mov	r2, r4
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006246:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800624a:	4602      	mov	r2, r0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006252:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006256:	460a      	mov	r2, r1
 8006258:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006262:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006266:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d00a      	beq.n	8006286 <aci_gatt_add_char+0x66>
 8006270:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006274:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d101      	bne.n	8006282 <aci_gatt_add_char+0x62>
 800627e:	2313      	movs	r3, #19
 8006280:	e002      	b.n	8006288 <aci_gatt_add_char+0x68>
 8006282:	2303      	movs	r3, #3
 8006284:	e000      	b.n	8006288 <aci_gatt_add_char+0x68>
 8006286:	2305      	movs	r3, #5
 8006288:	f107 0214 	add.w	r2, r7, #20
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	2203      	movs	r2, #3
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f002 fcda 	bl	8008c54 <memset>
  uint8_t index_input = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80062a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062aa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062ae:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80062b2:	8812      	ldrh	r2, [r2, #0]
 80062b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062b6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062ba:	3302      	adds	r3, #2
 80062bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80062c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062c8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80062d0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062d4:	3301      	adds	r3, #1
 80062d6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80062da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d002      	beq.n	80062ee <aci_gatt_add_char+0xce>
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d004      	beq.n	80062f6 <aci_gatt_add_char+0xd6>
 80062ec:	e007      	b.n	80062fe <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 80062ee:	2302      	movs	r3, #2
 80062f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80062f4:	e005      	b.n	8006302 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80062f6:	2310      	movs	r3, #16
 80062f8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80062fc:	e001      	b.n	8006302 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80062fe:	2347      	movs	r3, #71	; 0x47
 8006300:	e091      	b.n	8006426 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8006302:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006306:	1cd8      	adds	r0, r3, #3
 8006308:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800630c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006310:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	f002 fd17 	bl	8008d48 <memcpy>
    index_input += size;
 800631a:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800631e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006322:	4413      	add	r3, r2
 8006324:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006328:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800632c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006330:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006334:	8812      	ldrh	r2, [r2, #0]
 8006336:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006338:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800633c:	3302      	adds	r3, #2
 800633e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006346:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800634a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800634c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006350:	3301      	adds	r3, #1
 8006352:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8006356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800635a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800635e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006360:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006364:	3301      	adds	r3, #1
 8006366:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800636a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800636e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006372:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006374:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006378:	3301      	adds	r3, #1
 800637a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800637e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006382:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006386:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006388:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800638c:	3301      	adds	r3, #1
 800638e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8006392:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006396:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800639a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800639c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063a0:	3301      	adds	r3, #1
 80063a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063aa:	2218      	movs	r2, #24
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 fc50 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 80063b4:	233f      	movs	r3, #63	; 0x3f
 80063b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80063ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063be:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80063ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80063d2:	f107 0310 	add.w	r3, r7, #16
 80063d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80063da:	2303      	movs	r3, #3
 80063dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80063e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 ff86 	bl	80082f8 <hci_send_req>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da01      	bge.n	80063f6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80063f2:	23ff      	movs	r3, #255	; 0xff
 80063f4:	e017      	b.n	8006426 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80063f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006404:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	e00a      	b.n	8006426 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006410:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006418:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800641c:	b29a      	uxth	r2, r3
 800641e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006422:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}

08006430 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b0ce      	sub	sp, #312	; 0x138
 8006434:	af00      	add	r7, sp, #0
 8006436:	4605      	mov	r5, r0
 8006438:	460c      	mov	r4, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006442:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006446:	462a      	mov	r2, r5
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800644e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006452:	4622      	mov	r2, r4
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800645a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800645e:	4602      	mov	r2, r0
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006466:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 800646a:	460a      	mov	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 800646e:	f107 0310 	add.w	r3, r7, #16
 8006472:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 8006476:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800647a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006488:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800648c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006490:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006494:	8812      	ldrh	r2, [r2, #0]
 8006496:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006498:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800649c:	3302      	adds	r3, #2
 800649e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 80064a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064aa:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80064ae:	8812      	ldrh	r2, [r2, #0]
 80064b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064b6:	3302      	adds	r3, #2
 80064b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 80064bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064c4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80064cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064d0:	3302      	adds	r3, #2
 80064d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 80064d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064da:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064de:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80064e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064ea:	3301      	adds	r3, #1
 80064ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 80064f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064f4:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d002      	beq.n	8006504 <aci_gatt_disc_char_by_uuid+0xd4>
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d004      	beq.n	800650c <aci_gatt_disc_char_by_uuid+0xdc>
 8006502:	e007      	b.n	8006514 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800650a:	e005      	b.n	8006518 <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006512:	e001      	b.n	8006518 <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 8006514:	2347      	movs	r3, #71	; 0x47
 8006516:	e049      	b.n	80065ac <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 8006518:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800651c:	3307      	adds	r3, #7
 800651e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006522:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006526:	4618      	mov	r0, r3
 8006528:	f002 fc0e 	bl	8008d48 <memcpy>
    index_input += size;
 800652c:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8006530:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006534:	4413      	add	r3, r2
 8006536:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800653a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800653e:	2218      	movs	r2, #24
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f002 fb86 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8006548:	233f      	movs	r3, #63	; 0x3f
 800654a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 800654e:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006552:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 8006556:	230f      	movs	r3, #15
 8006558:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 800655c:	f107 0310 	add.w	r3, r7, #16
 8006560:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 8006564:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006568:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 800656c:	f107 030f 	add.w	r3, r7, #15
 8006570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 8006574:	2301      	movs	r3, #1
 8006576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 800657a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f001 feb9 	bl	80082f8 <hci_send_req>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	da01      	bge.n	8006590 <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 800658c:	23ff      	movs	r3, #255	; 0xff
 800658e:	e00d      	b.n	80065ac <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 8006590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006594:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 800659e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	e000      	b.n	80065ac <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bdb0      	pop	{r4, r5, r7, pc}

080065b6 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 80065b6:	b590      	push	{r4, r7, lr}
 80065b8:	b0cf      	sub	sp, #316	; 0x13c
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	4604      	mov	r4, r0
 80065be:	4608      	mov	r0, r1
 80065c0:	4611      	mov	r1, r2
 80065c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80065c6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80065d4:	4622      	mov	r2, r4
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e0:	4602      	mov	r2, r0
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065e8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80065ec:	460a      	mov	r2, r1
 80065ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80065f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065fc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800660a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800660e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006612:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006616:	8812      	ldrh	r2, [r2, #0]
 8006618:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800661a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800661e:	3302      	adds	r3, #2
 8006620:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8006624:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006628:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800662c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006630:	8812      	ldrh	r2, [r2, #0]
 8006632:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006634:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006638:	3302      	adds	r3, #2
 800663a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800663e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006642:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006646:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800664e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006652:	3301      	adds	r3, #1
 8006654:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 8006658:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800665c:	1d58      	adds	r0, r3, #5
 800665e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006662:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800666c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	f002 fb69 	bl	8008d48 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 8006676:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800667a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800667e:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800668a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800668e:	2218      	movs	r2, #24
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f002 fade 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 8006698:	233f      	movs	r3, #63	; 0x3f
 800669a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800669e:	f240 1321 	movw	r3, #289	; 0x121
 80066a2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80066a6:	230f      	movs	r3, #15
 80066a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80066b4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80066b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80066bc:	f107 0313 	add.w	r3, r7, #19
 80066c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80066ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fe11 	bl	80082f8 <hci_send_req>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da01      	bge.n	80066e0 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 80066dc:	23ff      	movs	r3, #255	; 0xff
 80066de:	e00d      	b.n	80066fc <aci_gatt_write_char_desc+0x146>
  if (status) {
 80066e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066e4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <aci_gatt_write_char_desc+0x144>
    return status;
 80066ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066f2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	e000      	b.n	80066fc <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}

08006706 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b0cc      	sub	sp, #304	; 0x130
 800670a:	af00      	add	r7, sp, #0
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800671e:	4602      	mov	r2, r0
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800672a:	460a      	mov	r2, r1
 800672c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800672e:	f107 030c 	add.w	r3, r7, #12
 8006732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8006748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006750:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006754:	7812      	ldrb	r2, [r2, #0]
 8006756:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006758:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800675c:	3301      	adds	r3, #1
 800675e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8006762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800676a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800676e:	7812      	ldrb	r2, [r2, #0]
 8006770:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006772:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006776:	3301      	adds	r3, #1
 8006778:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	1c98      	adds	r0, r3, #2
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006794:	6819      	ldr	r1, [r3, #0]
 8006796:	f002 fad7 	bl	8008d48 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80067a2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4413      	add	r3, r2
 80067aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80067ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067b2:	2218      	movs	r2, #24
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f002 fa4c 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 80067bc:	233f      	movs	r3, #63	; 0x3f
 80067be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80067c2:	230c      	movs	r3, #12
 80067c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067c8:	f107 030c 	add.w	r3, r7, #12
 80067cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067d0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80067d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067d8:	f107 030b 	add.w	r3, r7, #11
 80067dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80067e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fd83 	bl	80082f8 <hci_send_req>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da01      	bge.n	80067fc <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80067f8:	23ff      	movs	r3, #255	; 0xff
 80067fa:	e00d      	b.n	8006818 <aci_hal_write_config_data+0x112>
  if (status) {
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <aci_hal_write_config_data+0x110>
    return status;
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	e000      	b.n	8006818 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b0cc      	sub	sp, #304	; 0x130
 8006826:	af00      	add	r7, sp, #0
 8006828:	4602      	mov	r2, r0
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800683c:	460a      	mov	r2, r1
 800683e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800685a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006862:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800686a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800686e:	3301      	adds	r3, #1
 8006870:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006878:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800687c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006884:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006888:	3301      	adds	r3, #1
 800688a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800688e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006892:	2218      	movs	r2, #24
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f002 f9dc 	bl	8008c54 <memset>
  rq.ogf = 0x3f;
 800689c:	233f      	movs	r3, #63	; 0x3f
 800689e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80068a2:	230f      	movs	r3, #15
 80068a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068b0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80068b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068b8:	f107 030b 	add.w	r3, r7, #11
 80068bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80068c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fd13 	bl	80082f8 <hci_send_req>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da01      	bge.n	80068dc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80068d8:	23ff      	movs	r3, #255	; 0xff
 80068da:	e00d      	b.n	80068f8 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <aci_hal_set_tx_power_level+0xd4>
    return status;
 80068ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ee:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	e000      	b.n	80068f8 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	7818      	ldrb	r0, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800691c:	b299      	uxth	r1, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	78db      	ldrb	r3, [r3, #3]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fa fc36 	bl	8001194 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7818      	ldrb	r0, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800694c:	b299      	uxth	r1, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	78db      	ldrb	r3, [r3, #3]
 8006952:	461a      	mov	r2, r3
 8006954:	f000 ffca 	bl	80078ec <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006962:	b590      	push	{r4, r7, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	af02      	add	r7, sp, #8
 8006968:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7818      	ldrb	r0, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800697c:	b299      	uxth	r1, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	78da      	ldrb	r2, [r3, #3]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	889b      	ldrh	r3, [r3, #4]
 8006986:	b29c      	uxth	r4, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	b29b      	uxth	r3, r3
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4623      	mov	r3, r4
 8006992:	f000 ffba 	bl	800790a <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 ffbc 	bl	8007932 <hci_hardware_error_event>

  return status;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b0a6      	sub	sp, #152	; 0x98
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069e4:	e02e      	b.n	8006a44 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 80069e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80069ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	3398      	adds	r3, #152	; 0x98
 8006a00:	443b      	add	r3, r7
 8006a02:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006a06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006a10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	3398      	adds	r3, #152	; 0x98
 8006a2a:	443b      	add	r3, r7
 8006a2c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006a30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006a34:	3302      	adds	r3, #2
 8006a36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a50:	4293      	cmp	r3, r2
 8006a52:	dbc8      	blt.n	80069e6 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	f107 0208 	add.w	r2, r7, #8
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ff71 	bl	8007948 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006a66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3798      	adds	r7, #152	; 0x98
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 ff6a 	bl	8007960 <hci_data_buffer_overflow_event>

  return status;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 ff5e 	bl	8007976 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f97b 	bl	8007dd4 <aci_blue_initialized_event>

  return status;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f975 	bl	8007dea <aci_blue_events_lost_event>

  return status;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b0e:	b08d      	sub	sp, #52	; 0x34
 8006b10:	af08      	add	r7, sp, #32
 8006b12:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f893 c000 	ldrb.w	ip, [r3]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006b48:	68b8      	ldr	r0, [r7, #8]
 8006b4a:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006b4e:	68bc      	ldr	r4, [r7, #8]
 8006b50:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006b54:	68bd      	ldr	r5, [r7, #8]
 8006b56:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006b5a:	68be      	ldr	r6, [r7, #8]
 8006b5c:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	9606      	str	r6, [sp, #24]
 8006b68:	9505      	str	r5, [sp, #20]
 8006b6a:	9404      	str	r4, [sp, #16]
 8006b6c:	9003      	str	r0, [sp, #12]
 8006b6e:	9102      	str	r1, [sp, #8]
 8006b70:	9201      	str	r2, [sp, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	464b      	mov	r3, r9
 8006b78:	4642      	mov	r2, r8
 8006b7a:	4671      	mov	r1, lr
 8006b7c:	4660      	mov	r0, ip
 8006b7e:	f001 f93e 	bl	8007dfe <aci_blue_crash_info_event>

  return status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006b8e <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7818      	ldrb	r0, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	7859      	ldrb	r1, [r3, #1]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f001 f934 	bl	8007e1a <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f993 0000 	ldrsb.w	r0, [r3]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f001 f92b 	bl	8007e36 <aci_hal_scan_req_report_event>

  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	7818      	ldrb	r0, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006c06:	461a      	mov	r2, r3
 8006c08:	f001 f923 	bl	8007e52 <aci_hal_fw_error_event>

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006c22:	f000 ff32 	bl	8007a8a <aci_gap_limited_discoverable_event>

  return status;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b298      	uxth	r0, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	7899      	ldrb	r1, [r3, #2]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 ff22 	bl	8007a98 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ff1e 	bl	8007ab6 <aci_gap_pass_key_req_event>

  return status;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ff16 	bl	8007acc <aci_gap_authorization_req_event>

  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006cb6:	f000 ff14 	bl	8007ae2 <aci_gap_slave_security_initiated_event>

  return status;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006cd0:	f000 ff0e 	bl	8007af0 <aci_gap_bond_lost_event>

  return status;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	7818      	ldrb	r0, [r3, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	7859      	ldrb	r1, [r3, #1]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006cfe:	f7fa f9bf 	bl	8001080 <aci_gap_proc_complete_event>

  return status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 feeb 	bl	8007afe <aci_gap_addr_not_resolved_event>

  return status;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f000 fedf 	bl	8007b14 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	789b      	ldrb	r3, [r3, #2]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f000 fed5 	bl	8007b2c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 ffce 	bl	8007d4c <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b298      	uxth	r0, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f000 ffc5 	bl	8007d68 <aci_l2cap_proc_timeout_event>

  return status;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af04      	add	r7, sp, #16
 8006dee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b298      	uxth	r0, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	789c      	ldrb	r4, [r3, #2]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e08:	b29d      	uxth	r5, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006e10:	b29e      	uxth	r6, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006e20:	b292      	uxth	r2, r2
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8006e28:	b289      	uxth	r1, r1
 8006e2a:	9102      	str	r1, [sp, #8]
 8006e2c:	9201      	str	r2, [sp, #4]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4633      	mov	r3, r6
 8006e32:	462a      	mov	r2, r5
 8006e34:	4621      	mov	r1, r4
 8006e36:	f000 ffa5 	bl	8007d84 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e44 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006e44:	b590      	push	{r4, r7, lr}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b298      	uxth	r0, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	7899      	ldrb	r1, [r3, #2]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4623      	mov	r3, r4
 8006e72:	f000 ff9b 	bl	8007dac <aci_l2cap_command_reject_event>

  return status;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd90      	pop	{r4, r7, pc}

08006e80 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b298      	uxth	r0, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	b299      	uxth	r1, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	889b      	ldrh	r3, [r3, #4]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	88db      	ldrh	r3, [r3, #6]
 8006ea6:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4623      	mov	r3, r4
 8006eb0:	f7fa fa18 	bl	80012e4 <aci_gatt_attribute_modified_event>

  return status;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}

08006ebe <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe37 	bl	8007b48 <aci_gatt_proc_timeout_event>

  return status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fa faba 	bl	800147c <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b298      	uxth	r0, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	7899      	ldrb	r1, [r3, #2]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006f34:	f000 fe13 	bl	8007b5e <aci_att_find_info_resp_event>

  return status;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b0a6      	sub	sp, #152	; 0x98
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006f56:	2303      	movs	r3, #3
 8006f58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f62:	e02e      	b.n	8006fc2 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8006f64:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	3398      	adds	r3, #152	; 0x98
 8006f7e:	443b      	add	r3, r7
 8006f80:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006f84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006f88:	3302      	adds	r3, #2
 8006f8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8006f8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	3398      	adds	r3, #152	; 0x98
 8006fa8:	443b      	add	r3, r7
 8006faa:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006fae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	dbc8      	blt.n	8006f64 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8006fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b298      	uxth	r0, r3
 8006fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fde:	789b      	ldrb	r3, [r3, #2]
 8006fe0:	f107 0208 	add.w	r2, r7, #8
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f000 fdca 	bl	8007b7e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8006fea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3798      	adds	r7, #152	; 0x98
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b298      	uxth	r0, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	7899      	ldrb	r1, [r3, #2]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007018:	f000 fdbf 	bl	8007b9a <aci_att_read_by_type_resp_event>

  return status;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b298      	uxth	r0, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007044:	461a      	mov	r2, r3
 8007046:	f000 fdb8 	bl	8007bba <aci_att_read_resp_event>

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b298      	uxth	r0, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007072:	461a      	mov	r2, r3
 8007074:	f000 fdaf 	bl	8007bd6 <aci_att_read_blob_resp_event>

  return status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b298      	uxth	r0, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80070a0:	461a      	mov	r2, r3
 80070a2:	f000 fda6 	bl	8007bf2 <aci_att_read_multiple_resp_event>

  return status;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b298      	uxth	r0, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	7899      	ldrb	r1, [r3, #2]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80070d2:	f000 fd9c 	bl	8007c0e <aci_att_read_by_group_type_resp_event>

  return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b298      	uxth	r0, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	885b      	ldrh	r3, [r3, #2]
 80070fa:	b299      	uxth	r1, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	889b      	ldrh	r3, [r3, #4]
 8007100:	b29a      	uxth	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4623      	mov	r3, r4
 800710e:	f000 fd8e 	bl	8007c2e <aci_att_prepare_write_resp_event>

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	bd90      	pop	{r4, r7, pc}

0800711c <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fd8f 	bl	8007c56 <aci_att_exec_write_resp_event>

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b298      	uxth	r0, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	b299      	uxth	r1, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007166:	f000 fd81 	bl	8007c6c <aci_gatt_indication_event>

  return status;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b298      	uxth	r0, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	b299      	uxth	r1, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007198:	f7fa f8be 	bl	8001318 <aci_gatt_notification_event>

  return status;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	789b      	ldrb	r3, [r3, #2]
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7fa f90e 	bl	80013e4 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b298      	uxth	r0, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	7899      	ldrb	r1, [r3, #2]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	795b      	ldrb	r3, [r3, #5]
 80071f8:	f000 fd48 	bl	8007c8c <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b298      	uxth	r0, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	b299      	uxth	r1, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800722a:	f7fa f891 	bl	8001350 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b298      	uxth	r0, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	885b      	ldrh	r3, [r3, #2]
 8007252:	b299      	uxth	r1, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800725c:	f000 fd2a 	bl	8007cb4 <aci_gatt_write_permit_req_event>

  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b298      	uxth	r0, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	885b      	ldrh	r3, [r3, #2]
 8007284:	b299      	uxth	r1, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	f000 fd21 	bl	8007cd4 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b0a6      	sub	sp, #152	; 0x98
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80072b0:	2303      	movs	r3, #3
 80072b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072bc:	e019      	b.n	80072f2 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80072be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80072c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	4413      	add	r3, r2
 80072ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	3398      	adds	r3, #152	; 0x98
 80072d8:	443b      	add	r3, r7
 80072da:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80072de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072e2:	3302      	adds	r3, #2
 80072e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80072e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072fe:	4293      	cmp	r3, r2
 8007300:	dbdd      	blt.n	80072be <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b298      	uxth	r0, r3
 800730a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730e:	789b      	ldrb	r3, [r3, #2]
 8007310:	f107 0208 	add.w	r2, r7, #8
 8007314:	4619      	mov	r1, r3
 8007316:	f000 fcec 	bl	8007cf2 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800731a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800731e:	4618      	mov	r0, r3
 8007320:	3798      	adds	r7, #152	; 0x98
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29a      	uxth	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	885b      	ldrh	r3, [r3, #2]
 8007340:	b29b      	uxth	r3, r3
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fa f883 	bl	8001450 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fccf 	bl	8007d0e <aci_gatt_server_confirmation_event>

  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800737a:	b590      	push	{r4, r7, lr}
 800737c:	b087      	sub	sp, #28
 800737e:	af02      	add	r7, sp, #8
 8007380:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b298      	uxth	r0, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	885b      	ldrh	r3, [r3, #2]
 8007394:	b299      	uxth	r1, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	889b      	ldrh	r3, [r3, #4]
 800739a:	b29a      	uxth	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4623      	mov	r3, r4
 80073a8:	f000 fcbc 	bl	8007d24 <aci_gatt_prepare_write_permit_req_event>

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}

080073b6 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 80073b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b8:	b08b      	sub	sp, #44	; 0x2c
 80073ba:	af06      	add	r7, sp, #24
 80073bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	781d      	ldrb	r5, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073d0:	b29e      	uxth	r6, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80073e8:	b292      	uxth	r2, r2
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 80073f0:	b289      	uxth	r1, r1
 80073f2:	68b8      	ldr	r0, [r7, #8]
 80073f4:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 80073f8:	b280      	uxth	r0, r0
 80073fa:	68bc      	ldr	r4, [r7, #8]
 80073fc:	7c64      	ldrb	r4, [r4, #17]
 80073fe:	9404      	str	r4, [sp, #16]
 8007400:	9003      	str	r0, [sp, #12]
 8007402:	9102      	str	r1, [sp, #8]
 8007404:	9201      	str	r2, [sp, #4]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4673      	mov	r3, lr
 800740a:	4662      	mov	r2, ip
 800740c:	4631      	mov	r1, r6
 800740e:	4628      	mov	r0, r5
 8007410:	f7f9 fe66 	bl	80010e0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800741e <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b0a4      	sub	sp, #144	; 0x90
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007426:	2300      	movs	r3, #0
 8007428:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800743e:	e0b3      	b.n	80075a8 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007440:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007444:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	440b      	add	r3, r1
 8007454:	3301      	adds	r3, #1
 8007456:	7819      	ldrb	r1, [r3, #0]
 8007458:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	3390      	adds	r3, #144	; 0x90
 8007466:	443b      	add	r3, r7
 8007468:	3b88      	subs	r3, #136	; 0x88
 800746a:	460a      	mov	r2, r1
 800746c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800746e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007472:	3301      	adds	r3, #1
 8007474:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007478:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800747c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4413      	add	r3, r2
 800748a:	440b      	add	r3, r1
 800748c:	3302      	adds	r3, #2
 800748e:	7819      	ldrb	r1, [r3, #0]
 8007490:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	3390      	adds	r3, #144	; 0x90
 800749e:	443b      	add	r3, r7
 80074a0:	3b87      	subs	r3, #135	; 0x87
 80074a2:	460a      	mov	r2, r1
 80074a4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80074a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80074aa:	3301      	adds	r3, #1
 80074ac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	1c98      	adds	r0, r3, #2
 80074c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	4413      	add	r3, r2
 80074d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074d6:	4413      	add	r3, r2
 80074d8:	3303      	adds	r3, #3
 80074da:	2206      	movs	r2, #6
 80074dc:	4619      	mov	r1, r3
 80074de:	f001 fc33 	bl	8008d48 <memcpy>
    size += 6;
 80074e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80074e6:	3306      	adds	r3, #6
 80074e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80074ec:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80074f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	440b      	add	r3, r1
 8007500:	3309      	adds	r3, #9
 8007502:	7819      	ldrb	r1, [r3, #0]
 8007504:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	3390      	adds	r3, #144	; 0x90
 8007512:	443b      	add	r3, r7
 8007514:	3b80      	subs	r3, #128	; 0x80
 8007516:	460a      	mov	r2, r1
 8007518:	701a      	strb	r2, [r3, #0]
    size += 1;
 800751a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800751e:	3301      	adds	r3, #1
 8007520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007524:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	3308      	adds	r3, #8
 8007534:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007538:	4413      	add	r3, r2
 800753a:	1c99      	adds	r1, r3, #2
 800753c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	3390      	adds	r3, #144	; 0x90
 800754a:	443b      	add	r3, r7
 800754c:	3b7c      	subs	r3, #124	; 0x7c
 800754e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007550:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007554:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	440b      	add	r3, r1
 8007564:	3309      	adds	r3, #9
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800756c:	4413      	add	r3, r2
 800756e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007572:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b259      	sxtb	r1, r3
 800757e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	3390      	adds	r3, #144	; 0x90
 800758c:	443b      	add	r3, r7
 800758e:	3b78      	subs	r3, #120	; 0x78
 8007590:	460a      	mov	r2, r1
 8007592:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007594:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007598:	3301      	adds	r3, #1
 800759a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800759e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075b4:	4293      	cmp	r3, r2
 80075b6:	f6ff af43 	blt.w	8007440 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80075ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f107 0208 	add.w	r2, r7, #8
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f9 fe30 	bl	800122c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80075cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3790      	adds	r7, #144	; 0x90
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b087      	sub	sp, #28
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	7818      	ldrb	r0, [r3, #0]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075f2:	b299      	uxth	r1, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007602:	b29c      	uxth	r4, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800760a:	b29b      	uxth	r3, r3
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4623      	mov	r3, r4
 8007610:	f000 f9bf 	bl	8007992 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	bd90      	pop	{r4, r7, pc}

0800761e <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	7818      	ldrb	r0, [r3, #0]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007638:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800763e:	461a      	mov	r2, r3
 8007640:	f000 f9bb 	bl	80079ba <hci_le_read_remote_used_features_complete_event>

  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	895b      	ldrh	r3, [r3, #10]
 800766c:	b29b      	uxth	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	f000 f9b1 	bl	80079d6 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800767e:	b590      	push	{r4, r7, lr}
 8007680:	b087      	sub	sp, #28
 8007682:	af02      	add	r7, sp, #8
 8007684:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b298      	uxth	r0, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	885b      	ldrh	r3, [r3, #2]
 8007698:	b299      	uxth	r1, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	889b      	ldrh	r3, [r3, #4]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	b29c      	uxth	r4, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	891b      	ldrh	r3, [r3, #8]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4623      	mov	r3, r4
 80076b0:	f000 f99f 	bl	80079f2 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}

080076be <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f000 f99e 	bl	8007a1a <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f000 f995 	bl	8007a32 <hci_le_generate_dhkey_complete_event>

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007716:	b08d      	sub	sp, #52	; 0x34
 8007718:	af08      	add	r7, sp, #32
 800771a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f893 c000 	ldrb.w	ip, [r3]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007730:	fa1f fe83 	uxth.w	lr, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f893 8003 	ldrb.w	r8, [r3, #3]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007752:	b280      	uxth	r0, r0
 8007754:	68bc      	ldr	r4, [r7, #8]
 8007756:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800775a:	b2a4      	uxth	r4, r4
 800775c:	68bd      	ldr	r5, [r7, #8]
 800775e:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007762:	b2ad      	uxth	r5, r5
 8007764:	68be      	ldr	r6, [r7, #8]
 8007766:	7f76      	ldrb	r6, [r6, #29]
 8007768:	9606      	str	r6, [sp, #24]
 800776a:	9505      	str	r5, [sp, #20]
 800776c:	9404      	str	r4, [sp, #16]
 800776e:	9003      	str	r0, [sp, #12]
 8007770:	9102      	str	r1, [sp, #8]
 8007772:	9201      	str	r2, [sp, #4]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	464b      	mov	r3, r9
 8007778:	4642      	mov	r2, r8
 800777a:	4671      	mov	r1, lr
 800777c:	4660      	mov	r0, ip
 800777e:	f000 f964 	bl	8007a4a <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800778e <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b0a6      	sub	sp, #152	; 0x98
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007796:	2300      	movs	r3, #0
 8007798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ae:	e085      	b.n	80078bc <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80077b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80077b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	4413      	add	r3, r2
 80077bc:	3301      	adds	r3, #1
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	3398      	adds	r3, #152	; 0x98
 80077c8:	443b      	add	r3, r7
 80077ca:	3b90      	subs	r3, #144	; 0x90
 80077cc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80077ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80077d2:	3301      	adds	r3, #1
 80077d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80077d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80077dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	4413      	add	r3, r2
 80077e4:	3302      	adds	r3, #2
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	3398      	adds	r3, #152	; 0x98
 80077f0:	443b      	add	r3, r7
 80077f2:	3b8f      	subs	r3, #143	; 0x8f
 80077f4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80077f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80077fa:	3301      	adds	r3, #1
 80077fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007800:	f107 0208 	add.w	r2, r7, #8
 8007804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	4413      	add	r3, r2
 800780c:	1c98      	adds	r0, r3, #2
 800780e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007818:	4413      	add	r3, r2
 800781a:	3303      	adds	r3, #3
 800781c:	2206      	movs	r2, #6
 800781e:	4619      	mov	r1, r3
 8007820:	f001 fa92 	bl	8008d48 <memcpy>
    size += 6;
 8007824:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007828:	3306      	adds	r3, #6
 800782a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800782e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	4413      	add	r3, r2
 800783a:	3309      	adds	r3, #9
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	3398      	adds	r3, #152	; 0x98
 8007846:	443b      	add	r3, r7
 8007848:	3b88      	subs	r3, #136	; 0x88
 800784a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800784c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007850:	3301      	adds	r3, #1
 8007852:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007856:	f107 0208 	add.w	r2, r7, #8
 800785a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	3308      	adds	r3, #8
 8007862:	4413      	add	r3, r2
 8007864:	1c58      	adds	r0, r3, #1
 8007866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007872:	4413      	add	r3, r2
 8007874:	3302      	adds	r3, #2
 8007876:	2206      	movs	r2, #6
 8007878:	4619      	mov	r1, r3
 800787a:	f001 fa65 	bl	8008d48 <memcpy>
    size += 6;
 800787e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007882:	3306      	adds	r3, #6
 8007884:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007888:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800788c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4413      	add	r3, r2
 8007894:	3310      	adds	r3, #16
 8007896:	f993 2000 	ldrsb.w	r2, [r3]
 800789a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	3398      	adds	r3, #152	; 0x98
 80078a2:	443b      	add	r3, r7
 80078a4:	3b81      	subs	r3, #129	; 0x81
 80078a6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80078a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078ac:	3301      	adds	r3, #1
 80078ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80078b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c8:	4293      	cmp	r3, r2
 80078ca:	f6ff af71 	blt.w	80077b0 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80078ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f107 0208 	add.w	r2, r7, #8
 80078d8:	4611      	mov	r1, r2
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f8c9 	bl	8007a72 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 80078e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3798      	adds	r7, #152	; 0x98
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
 80078f6:	460b      	mov	r3, r1
 80078f8:	80bb      	strh	r3, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800790a:	b490      	push	{r4, r7}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	4604      	mov	r4, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	461a      	mov	r2, r3
 8007918:	4623      	mov	r3, r4
 800791a:	71fb      	strb	r3, [r7, #7]
 800791c:	4603      	mov	r3, r0
 800791e:	80bb      	strh	r3, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	71bb      	strb	r3, [r7, #6]
 8007924:	4613      	mov	r3, r2
 8007926:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bc90      	pop	{r4, r7}
 8007930:	4770      	bx	lr

08007932 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	4603      	mov	r3, r0
 800793a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	4603      	mov	r3, r0
 800797e:	460a      	mov	r2, r1
 8007980:	71fb      	strb	r3, [r7, #7]
 8007982:	4613      	mov	r3, r2
 8007984:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007992:	b490      	push	{r4, r7}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	4623      	mov	r3, r4
 80079a2:	71fb      	strb	r3, [r7, #7]
 80079a4:	4603      	mov	r3, r0
 80079a6:	80bb      	strh	r3, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	807b      	strh	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc90      	pop	{r4, r7}
 80079b8:	4770      	bx	lr

080079ba <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	4603      	mov	r3, r0
 80079c2:	603a      	str	r2, [r7, #0]
 80079c4:	71fb      	strb	r3, [r7, #7]
 80079c6:	460b      	mov	r3, r1
 80079c8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	4603      	mov	r3, r0
 80079de:	6039      	str	r1, [r7, #0]
 80079e0:	80fb      	strh	r3, [r7, #6]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 80079f2:	b490      	push	{r4, r7}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	461a      	mov	r2, r3
 8007a00:	4623      	mov	r3, r4
 8007a02:	80fb      	strh	r3, [r7, #6]
 8007a04:	4603      	mov	r3, r0
 8007a06:	80bb      	strh	r3, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc90      	pop	{r4, r7}
 8007a18:	4770      	bx	lr

08007a1a <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	4603      	mov	r3, r0
 8007a22:	6039      	str	r1, [r7, #0]
 8007a24:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	4603      	mov	r3, r0
 8007a3a:	6039      	str	r1, [r7, #0]
 8007a3c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007a4a:	b490      	push	{r4, r7}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	4604      	mov	r4, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	4623      	mov	r3, r4
 8007a5a:	71fb      	strb	r3, [r7, #7]
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	80bb      	strh	r3, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	71bb      	strb	r3, [r7, #6]
 8007a64:	4613      	mov	r3, r2
 8007a66:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc90      	pop	{r4, r7}
 8007a70:	4770      	bx	lr

08007a72 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	4603      	mov	r3, r0
 8007a7a:	6039      	str	r1, [r7, #0]
 8007a7c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007a8e:	bf00      	nop
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	80fb      	strh	r3, [r7, #6]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	717b      	strb	r3, [r7, #5]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	4603      	mov	r3, r0
 8007abe:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007ae6:	bf00      	nop
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	4603      	mov	r3, r0
 8007b06:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	460a      	mov	r2, r1
 8007b36:	80fb      	strh	r3, [r7, #6]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4603      	mov	r3, r0
 8007b68:	80fb      	strh	r3, [r7, #6]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	717b      	strb	r3, [r7, #5]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	4603      	mov	r3, r0
 8007b86:	603a      	str	r2, [r7, #0]
 8007b88:	80fb      	strh	r3, [r7, #6]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	80fb      	strh	r3, [r7, #6]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	717b      	strb	r3, [r7, #5]
 8007baa:	4613      	mov	r3, r2
 8007bac:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	603a      	str	r2, [r7, #0]
 8007bc4:	80fb      	strh	r3, [r7, #6]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	603a      	str	r2, [r7, #0]
 8007be0:	80fb      	strh	r3, [r7, #6]
 8007be2:	460b      	mov	r3, r1
 8007be4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	603a      	str	r2, [r7, #0]
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	717b      	strb	r3, [r7, #5]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007c2e:	b490      	push	{r4, r7}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	80fb      	strh	r3, [r7, #6]
 8007c40:	4603      	mov	r3, r0
 8007c42:	80bb      	strh	r3, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc90      	pop	{r4, r7}
 8007c54:	4770      	bx	lr

08007c56 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	4603      	mov	r3, r0
 8007c76:	81fb      	strh	r3, [r7, #14]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	81bb      	strh	r3, [r7, #12]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007c8c:	b490      	push	{r4, r7}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	80fb      	strh	r3, [r7, #6]
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	717b      	strb	r3, [r7, #5]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	807b      	strh	r3, [r7, #2]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc90      	pop	{r4, r7}
 8007cb2:	4770      	bx	lr

08007cb4 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	81fb      	strh	r3, [r7, #14]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	81bb      	strh	r3, [r7, #12]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	80fb      	strh	r3, [r7, #6]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	80bb      	strh	r3, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	603a      	str	r2, [r7, #0]
 8007cfc:	80fb      	strh	r3, [r7, #6]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007d24:	b490      	push	{r4, r7}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	4611      	mov	r1, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	80fb      	strh	r3, [r7, #6]
 8007d36:	4603      	mov	r3, r0
 8007d38:	80bb      	strh	r3, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	807b      	strh	r3, [r7, #2]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc90      	pop	{r4, r7}
 8007d4a:	4770      	bx	lr

08007d4c <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	460a      	mov	r2, r1
 8007d56:	80fb      	strh	r3, [r7, #6]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	603a      	str	r2, [r7, #0]
 8007d72:	80fb      	strh	r3, [r7, #6]
 8007d74:	460b      	mov	r3, r1
 8007d76:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007d84:	b490      	push	{r4, r7}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4623      	mov	r3, r4
 8007d94:	80fb      	strh	r3, [r7, #6]
 8007d96:	4603      	mov	r3, r0
 8007d98:	717b      	strb	r3, [r7, #5]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	807b      	strh	r3, [r7, #2]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc90      	pop	{r4, r7}
 8007daa:	4770      	bx	lr

08007dac <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007dac:	b490      	push	{r4, r7}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4623      	mov	r3, r4
 8007dbc:	80fb      	strh	r3, [r7, #6]
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	717b      	strb	r3, [r7, #5]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	807b      	strh	r3, [r7, #2]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc90      	pop	{r4, r7}
 8007dd2:	4770      	bx	lr

08007dd4 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	4603      	mov	r3, r0
 8007e22:	603a      	str	r2, [r7, #0]
 8007e24:	71fb      	strb	r3, [r7, #7]
 8007e26:	460b      	mov	r3, r1
 8007e28:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	603a      	str	r2, [r7, #0]
 8007e40:	71fb      	strb	r3, [r7, #7]
 8007e42:	460b      	mov	r3, r1
 8007e44:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	4603      	mov	r3, r0
 8007e5a:	603a      	str	r2, [r7, #0]
 8007e5c:	71fb      	strb	r3, [r7, #7]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b088      	sub	sp, #32
 8007e72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007e78:	f107 0308 	add.w	r3, r7, #8
 8007e7c:	2218      	movs	r2, #24
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fee7 	bl	8008c54 <memset>
  rq.ogf = 0x03;
 8007e86:	2303      	movs	r3, #3
 8007e88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e8e:	1dfb      	adds	r3, r7, #7
 8007e90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fa2b 	bl	80082f8 <hci_send_req>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da01      	bge.n	8007eac <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ea8:	23ff      	movs	r3, #255	; 0xff
 8007eaa:	e005      	b.n	8007eb8 <hci_reset+0x4a>
  if (status) {
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <hci_reset+0x48>
    return status;
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	e000      	b.n	8007eb8 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b0cc      	sub	sp, #304	; 0x130
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	6019      	str	r1, [r3, #0]
 8007ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007eda:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 8007edc:	f107 030c 	add.w	r3, r7, #12
 8007ee0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007ee4:	f107 0308 	add.w	r3, r7, #8
 8007ee8:	2204      	movs	r2, #4
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 feb1 	bl	8008c54 <memset>
  uint8_t index_input = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f00:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f08:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f16:	2218      	movs	r2, #24
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fe9a 	bl	8008c54 <memset>
  rq.ogf = 0x05;
 8007f20:	2305      	movs	r3, #5
 8007f22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8007f26:	2305      	movs	r3, #5
 8007f28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f2c:	f107 030c 	add.w	r3, r7, #12
 8007f30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f34:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007f44:	2304      	movs	r3, #4
 8007f46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f9d1 	bl	80082f8 <hci_send_req>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da01      	bge.n	8007f60 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 8007f5c:	23ff      	movs	r3, #255	; 0xff
 8007f5e:	e019      	b.n	8007f94 <hci_read_rssi+0xd4>
  if (resp.Status) {
 8007f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <hci_read_rssi+0xba>
    return resp.Status;
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	e00c      	b.n	8007f94 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f82:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b0cc      	sub	sp, #304	; 0x130
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fae:	6019      	str	r1, [r3, #0]
 8007fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007fb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007fba:	f107 030c 	add.w	r3, r7, #12
 8007fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8007fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fdc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fe4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8007fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8007ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008000:	1c58      	adds	r0, r3, #1
 8008002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800a:	221f      	movs	r2, #31
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	f000 fe9b 	bl	8008d48 <memcpy>
  }
  index_input += 31;
 8008012:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008016:	331f      	adds	r3, #31
 8008018:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800801c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008020:	2218      	movs	r2, #24
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fe15 	bl	8008c54 <memset>
  rq.ogf = 0x08;
 800802a:	2308      	movs	r3, #8
 800802c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8008030:	2309      	movs	r3, #9
 8008032:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008036:	f107 030c 	add.w	r3, r7, #12
 800803a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800803e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008042:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008046:	f107 030b 	add.w	r3, r7, #11
 800804a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f94c 	bl	80082f8 <hci_send_req>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	da01      	bge.n	800806a <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8008066:	23ff      	movs	r3, #255	; 0xff
 8008068:	e00d      	b.n	8008086 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800806a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <hci_le_set_scan_response_data+0xe6>
    return status;
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	e000      	b.n	8008086 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08c      	sub	sp, #48	; 0x30
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008098:	f107 030c 	add.w	r3, r7, #12
 800809c:	2209      	movs	r2, #9
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fdd7 	bl	8008c54 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80080a6:	f107 0318 	add.w	r3, r7, #24
 80080aa:	2218      	movs	r2, #24
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fdd0 	bl	8008c54 <memset>
  rq.ogf = 0x08;
 80080b4:	2308      	movs	r3, #8
 80080b6:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 80080b8:	2318      	movs	r3, #24
 80080ba:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 80080c2:	2309      	movs	r3, #9
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80080c6:	f107 0318 	add.w	r3, r7, #24
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f913 	bl	80082f8 <hci_send_req>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da01      	bge.n	80080dc <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 80080d8:	23ff      	movs	r3, #255	; 0xff
 80080da:	e00d      	b.n	80080f8 <hci_le_rand+0x68>
  if (resp.Status) {
 80080dc:	7b3b      	ldrb	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <hci_le_rand+0x56>
    return resp.Status;
 80080e2:	7b3b      	ldrb	r3, [r7, #12]
 80080e4:	e008      	b.n	80080f8 <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	461a      	mov	r2, r3
 80080ea:	f107 030d 	add.w	r3, r7, #13
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	6011      	str	r1, [r2, #0]
 80080f4:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3730      	adds	r7, #48	; 0x30
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3308      	adds	r3, #8
 800810c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b04      	cmp	r3, #4
 8008114:	d001      	beq.n	800811a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008116:	2301      	movs	r3, #1
 8008118:	e00c      	b.n	8008134 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3302      	adds	r3, #2
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008128:	3b03      	subs	r3, #3
 800812a:	429a      	cmp	r2, r3
 800812c:	d001      	beq.n	8008132 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800812e:	2302      	movs	r3, #2
 8008130:	e000      	b.n	8008134 <verify_packet+0x34>
  
  return 0;      
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0a6      	sub	sp, #152	; 0x98
 8008144:	af00      	add	r7, sp, #0
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	4603      	mov	r3, r0
 800814a:	81fb      	strh	r3, [r7, #14]
 800814c:	460b      	mov	r3, r1
 800814e:	81bb      	strh	r3, [r7, #12]
 8008150:	4613      	mov	r3, r2
 8008152:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008154:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800815c:	b21a      	sxth	r2, r3
 800815e:	89fb      	ldrh	r3, [r7, #14]
 8008160:	029b      	lsls	r3, r3, #10
 8008162:	b21b      	sxth	r3, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	b21b      	sxth	r3, r3
 8008168:	b29b      	uxth	r3, r3
 800816a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008170:	2301      	movs	r3, #1
 8008172:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	3301      	adds	r3, #1
 800817a:	461a      	mov	r2, r3
 800817c:	f107 0314 	add.w	r3, r7, #20
 8008180:	8819      	ldrh	r1, [r3, #0]
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	8011      	strh	r1, [r2, #0]
 8008186:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008188:	f107 0318 	add.w	r3, r7, #24
 800818c:	3304      	adds	r3, #4
 800818e:	7afa      	ldrb	r2, [r7, #11]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fdd8 	bl	8008d48 <memcpy>
  
  if (hciContext.io.Send)
 8008198:	4b08      	ldr	r3, [pc, #32]	; (80081bc <send_cmd+0x7c>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <send_cmd+0x7c>)
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	7afa      	ldrb	r2, [r7, #11]
 80081a6:	b292      	uxth	r2, r2
 80081a8:	3204      	adds	r2, #4
 80081aa:	b291      	uxth	r1, r2
 80081ac:	f107 0218 	add.w	r2, r7, #24
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
  }
}
 80081b4:	bf00      	nop
 80081b6:	3798      	adds	r7, #152	; 0x98
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	200008f8 	.word	0x200008f8

080081c0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80081ca:	e00a      	b.n	80081e2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	4619      	mov	r1, r3
 80081d2:	6838      	ldr	r0, [r7, #0]
 80081d4:	f000 fae8 	bl	80087a8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa4f 	bl	8008680 <list_insert_head>
  while (!list_is_empty(src_list))
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f000 fa2a 	bl	800863c <list_is_empty>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ee      	beq.n	80081cc <move_list+0xc>
  }
}
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80081fe:	e009      	b.n	8008214 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008200:	1d3b      	adds	r3, r7, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4809      	ldr	r0, [pc, #36]	; (800822c <free_event_list+0x34>)
 8008206:	f000 faa8 	bl	800875a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4619      	mov	r1, r3
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <free_event_list+0x38>)
 8008210:	f000 fa5c 	bl	80086cc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008214:	4806      	ldr	r0, [pc, #24]	; (8008230 <free_event_list+0x38>)
 8008216:	f000 faee 	bl	80087f6 <list_get_size>
 800821a:	4603      	mov	r3, r0
 800821c:	2b04      	cmp	r3, #4
 800821e:	ddef      	ble.n	8008200 <free_event_list+0x8>
  }
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000378 	.word	0x20000378
 8008230:	20000370 	.word	0x20000370

08008234 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008244:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <hci_init+0x74>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800824a:	4818      	ldr	r0, [pc, #96]	; (80082ac <hci_init+0x78>)
 800824c:	f000 f9e6 	bl	800861c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008250:	4817      	ldr	r0, [pc, #92]	; (80082b0 <hci_init+0x7c>)
 8008252:	f000 f9e3 	bl	800861c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008256:	f7f9 fbfb 	bl	8001a50 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
 800825e:	e00c      	b.n	800827a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	228c      	movs	r2, #140	; 0x8c
 8008264:	fb02 f303 	mul.w	r3, r2, r3
 8008268:	4a12      	ldr	r2, [pc, #72]	; (80082b4 <hci_init+0x80>)
 800826a:	4413      	add	r3, r2
 800826c:	4619      	mov	r1, r3
 800826e:	480f      	ldr	r0, [pc, #60]	; (80082ac <hci_init+0x78>)
 8008270:	f000 fa2c 	bl	80086cc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	3301      	adds	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2b09      	cmp	r3, #9
 800827e:	d9ef      	bls.n	8008260 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <hci_init+0x74>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <hci_init+0x5c>
 8008288:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <hci_init+0x74>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2000      	movs	r0, #0
 800828e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <hci_init+0x74>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <hci_init+0x6a>
 8008298:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <hci_init+0x74>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	4798      	blx	r3
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200008f8 	.word	0x200008f8
 80082ac:	20000370 	.word	0x20000370
 80082b0:	20000378 	.word	0x20000378
 80082b4:	20000380 	.word	0x20000380

080082b8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0b      	ldr	r2, [pc, #44]	; (80082f4 <hci_register_io_bus+0x3c>)
 80082c6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4a09      	ldr	r2, [pc, #36]	; (80082f4 <hci_register_io_bus+0x3c>)
 80082ce:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <hci_register_io_bus+0x3c>)
 80082d6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	4a05      	ldr	r2, [pc, #20]	; (80082f4 <hci_register_io_bus+0x3c>)
 80082de:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a03      	ldr	r2, [pc, #12]	; (80082f4 <hci_register_io_bus+0x3c>)
 80082e6:	6093      	str	r3, [r2, #8]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	200008f8 	.word	0x200008f8

080082f8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	; 0x38
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	b21b      	sxth	r3, r3
 800830a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800830e:	b21a      	sxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	029b      	lsls	r3, r3, #10
 8008316:	b21b      	sxth	r3, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	b21b      	sxth	r3, r3
 800831c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f978 	bl	800861c <list_init_head>

  free_event_list();
 800832c:	f7ff ff64 	bl	80081f8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8818      	ldrh	r0, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8859      	ldrh	r1, [r3, #2]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f7ff fefd 	bl	8008140 <send_cmd>
  
  if (async)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <hci_send_req+0x58>
  {
    return 0;
 800834c:	2300      	movs	r3, #0
 800834e:	e0e2      	b.n	8008516 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008350:	f7fa f962 	bl	8002618 <HAL_GetTick>
 8008354:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008356:	f7fa f95f 	bl	8002618 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008364:	f200 80b3 	bhi.w	80084ce <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008368:	486d      	ldr	r0, [pc, #436]	; (8008520 <hci_send_req+0x228>)
 800836a:	f000 f967 	bl	800863c <list_is_empty>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d000      	beq.n	8008376 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008374:	e7ef      	b.n	8008356 <hci_send_req+0x5e>
      {
        break;
 8008376:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008378:	f107 0310 	add.w	r3, r7, #16
 800837c:	4619      	mov	r1, r3
 800837e:	4868      	ldr	r0, [pc, #416]	; (8008520 <hci_send_req+0x228>)
 8008380:	f000 f9eb 	bl	800875a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3308      	adds	r3, #8
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d17f      	bne.n	8008492 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	3301      	adds	r3, #1
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	3308      	adds	r3, #8
 800839c:	3303      	adds	r3, #3
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80083a6:	3b03      	subs	r3, #3
 80083a8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b3e      	cmp	r3, #62	; 0x3e
 80083b0:	d04c      	beq.n	800844c <hci_send_req+0x154>
 80083b2:	2b3e      	cmp	r3, #62	; 0x3e
 80083b4:	dc68      	bgt.n	8008488 <hci_send_req+0x190>
 80083b6:	2b10      	cmp	r3, #16
 80083b8:	f000 808b 	beq.w	80084d2 <hci_send_req+0x1da>
 80083bc:	2b10      	cmp	r3, #16
 80083be:	dc63      	bgt.n	8008488 <hci_send_req+0x190>
 80083c0:	2b0e      	cmp	r3, #14
 80083c2:	d023      	beq.n	800840c <hci_send_req+0x114>
 80083c4:	2b0f      	cmp	r3, #15
 80083c6:	d15f      	bne.n	8008488 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	885b      	ldrh	r3, [r3, #2]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d17e      	bne.n	80084d6 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b0f      	cmp	r3, #15
 80083de:	d004      	beq.n	80083ea <hci_send_req+0xf2>
          if (cs->status) {
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d051      	beq.n	800848c <hci_send_req+0x194>
            goto failed;
 80083e8:	e078      	b.n	80084dc <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bf28      	it	cs
 80083f4:	461a      	movcs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6918      	ldr	r0, [r3, #16]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	461a      	mov	r2, r3
 8008404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008406:	f000 fc9f 	bl	8008d48 <memcpy>
        goto done;
 800840a:	e078      	b.n	80084fe <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008416:	b29b      	uxth	r3, r3
 8008418:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800841a:	429a      	cmp	r2, r3
 800841c:	d15d      	bne.n	80084da <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	3303      	adds	r3, #3
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	3b03      	subs	r3, #3
 8008428:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	429a      	cmp	r2, r3
 8008432:	bf28      	it	cs
 8008434:	461a      	movcs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6918      	ldr	r0, [r3, #16]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	461a      	mov	r2, r3
 8008444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008446:	f000 fc7f 	bl	8008d48 <memcpy>
        goto done;
 800844a:	e058      	b.n	80084fe <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	429a      	cmp	r2, r3
 800845c:	d118      	bne.n	8008490 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	3b01      	subs	r3, #1
 8008462:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf28      	it	cs
 800846e:	461a      	movcs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6918      	ldr	r0, [r3, #16]
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	1c59      	adds	r1, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	461a      	mov	r2, r3
 8008482:	f000 fc61 	bl	8008d48 <memcpy>
        goto done;
 8008486:	e03a      	b.n	80084fe <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008488:	bf00      	nop
 800848a:	e002      	b.n	8008492 <hci_send_req+0x19a>
          break;
 800848c:	bf00      	nop
 800848e:	e000      	b.n	8008492 <hci_send_req+0x19a>
          break;
 8008490:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008492:	4824      	ldr	r0, [pc, #144]	; (8008524 <hci_send_req+0x22c>)
 8008494:	f000 f8d2 	bl	800863c <list_is_empty>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <hci_send_req+0x1c2>
 800849e:	4820      	ldr	r0, [pc, #128]	; (8008520 <hci_send_req+0x228>)
 80084a0:	f000 f8cc 	bl	800863c <list_is_empty>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4619      	mov	r1, r3
 80084ae:	481d      	ldr	r0, [pc, #116]	; (8008524 <hci_send_req+0x22c>)
 80084b0:	f000 f90c 	bl	80086cc <list_insert_tail>
      hciReadPacket=NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	e008      	b.n	80084cc <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4611      	mov	r1, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f902 	bl	80086cc <list_insert_tail>
      hciReadPacket=NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	613b      	str	r3, [r7, #16]
  {
 80084cc:	e740      	b.n	8008350 <hci_send_req+0x58>
        goto failed;
 80084ce:	bf00      	nop
 80084d0:	e004      	b.n	80084dc <hci_send_req+0x1e4>
        goto failed;
 80084d2:	bf00      	nop
 80084d4:	e002      	b.n	80084dc <hci_send_req+0x1e4>
          goto failed;
 80084d6:	bf00      	nop
 80084d8:	e000      	b.n	80084dc <hci_send_req+0x1e4>
          goto failed;
 80084da:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d004      	beq.n	80084ec <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4619      	mov	r1, r3
 80084e6:	480f      	ldr	r0, [pc, #60]	; (8008524 <hci_send_req+0x22c>)
 80084e8:	f000 f8ca 	bl	8008680 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	4619      	mov	r1, r3
 80084f2:	480b      	ldr	r0, [pc, #44]	; (8008520 <hci_send_req+0x228>)
 80084f4:	f7ff fe64 	bl	80081c0 <move_list>

  return -1;
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295
 80084fc:	e00b      	b.n	8008516 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4619      	mov	r1, r3
 8008502:	4808      	ldr	r0, [pc, #32]	; (8008524 <hci_send_req+0x22c>)
 8008504:	f000 f8bc 	bl	8008680 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	4619      	mov	r1, r3
 800850e:	4804      	ldr	r0, [pc, #16]	; (8008520 <hci_send_req+0x228>)
 8008510:	f7ff fe56 	bl	80081c0 <move_list>

  return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3738      	adds	r7, #56	; 0x38
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000378 	.word	0x20000378
 8008524:	20000370 	.word	0x20000370

08008528 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008532:	e013      	b.n	800855c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008534:	1d3b      	adds	r3, r7, #4
 8008536:	4619      	mov	r1, r3
 8008538:	480e      	ldr	r0, [pc, #56]	; (8008574 <hci_user_evt_proc+0x4c>)
 800853a:	f000 f90e 	bl	800875a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800853e:	4b0e      	ldr	r3, [pc, #56]	; (8008578 <hci_user_evt_proc+0x50>)
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <hci_user_evt_proc+0x50>)
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	3208      	adds	r2, #8
 800854e:	4610      	mov	r0, r2
 8008550:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4619      	mov	r1, r3
 8008556:	4809      	ldr	r0, [pc, #36]	; (800857c <hci_user_evt_proc+0x54>)
 8008558:	f000 f8b8 	bl	80086cc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800855c:	4805      	ldr	r0, [pc, #20]	; (8008574 <hci_user_evt_proc+0x4c>)
 800855e:	f000 f86d 	bl	800863c <list_is_empty>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0e5      	beq.n	8008534 <hci_user_evt_proc+0xc>
  }
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000378 	.word	0x20000378
 8008578:	200008f8 	.word	0x200008f8
 800857c:	20000370 	.word	0x20000370

08008580 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008590:	481f      	ldr	r0, [pc, #124]	; (8008610 <hci_notify_asynch_evt+0x90>)
 8008592:	f000 f853 	bl	800863c <list_is_empty>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d132      	bne.n	8008602 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800859c:	f107 030c 	add.w	r3, r7, #12
 80085a0:	4619      	mov	r1, r3
 80085a2:	481b      	ldr	r0, [pc, #108]	; (8008610 <hci_notify_asynch_evt+0x90>)
 80085a4:	f000 f8d9 	bl	800875a <list_remove_head>
    
    if (hciContext.io.Receive)
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <hci_notify_asynch_evt+0x94>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d02a      	beq.n	8008606 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80085b0:	4b18      	ldr	r3, [pc, #96]	; (8008614 <hci_notify_asynch_evt+0x94>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	3208      	adds	r2, #8
 80085b8:	2180      	movs	r1, #128	; 0x80
 80085ba:	4610      	mov	r0, r2
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80085c2:	7cfb      	ldrb	r3, [r7, #19]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d016      	beq.n	80085f6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	7cfa      	ldrb	r2, [r7, #19]
 80085cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fd94 	bl	8008100 <verify_packet>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4619      	mov	r1, r3
 80085e2:	480d      	ldr	r0, [pc, #52]	; (8008618 <hci_notify_asynch_evt+0x98>)
 80085e4:	f000 f872 	bl	80086cc <list_insert_tail>
 80085e8:	e00d      	b.n	8008606 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4619      	mov	r1, r3
 80085ee:	4808      	ldr	r0, [pc, #32]	; (8008610 <hci_notify_asynch_evt+0x90>)
 80085f0:	f000 f846 	bl	8008680 <list_insert_head>
 80085f4:	e007      	b.n	8008606 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4619      	mov	r1, r3
 80085fa:	4805      	ldr	r0, [pc, #20]	; (8008610 <hci_notify_asynch_evt+0x90>)
 80085fc:	f000 f840 	bl	8008680 <list_insert_head>
 8008600:	e001      	b.n	8008606 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008602:	2301      	movs	r3, #1
 8008604:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008606:	697b      	ldr	r3, [r7, #20]
  
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20000370 	.word	0x20000370
 8008614:	200008f8 	.word	0x200008f8
 8008618:	20000378 	.word	0x20000378

0800861c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	605a      	str	r2, [r3, #4]
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008644:	f3ef 8310 	mrs	r3, PRIMASK
 8008648:	60fb      	str	r3, [r7, #12]
  return(result);
 800864a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800864c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800864e:	b672      	cpsid	i
}
 8008650:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d102      	bne.n	8008662 <list_is_empty+0x26>
  {
    return_value = 1;
 800865c:	2301      	movs	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
 8008660:	e001      	b.n	8008666 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f383 8810 	msr	PRIMASK, r3
}
 8008670:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800868a:	f3ef 8310 	mrs	r3, PRIMASK
 800868e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008690:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008692:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008694:	b672      	cpsid	i
}
 8008696:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d6:	f3ef 8310 	mrs	r3, PRIMASK
 80086da:	60fb      	str	r3, [r7, #12]
  return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086e0:	b672      	cpsid	i
}
 80086e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f383 8810 	msr	PRIMASK, r3
}
 800870a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800870c:	bf00      	nop
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008720:	f3ef 8310 	mrs	r3, PRIMASK
 8008724:	60fb      	str	r3, [r7, #12]
  return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800872a:	b672      	cpsid	i
}
 800872c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6852      	ldr	r2, [r2, #4]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f383 8810 	msr	PRIMASK, r3
}
 800874c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008764:	f3ef 8310 	mrs	r3, PRIMASK
 8008768:	60fb      	str	r3, [r7, #12]
  return(result);
 800876a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800876c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800876e:	b672      	cpsid	i
}
 8008770:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff ffca 	bl	8008718 <list_remove_node>
  (*node)->next = NULL;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f383 8810 	msr	PRIMASK, r3
}
 800879e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087a0:	bf00      	nop
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b2:	f3ef 8310 	mrs	r3, PRIMASK
 80087b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80087b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087bc:	b672      	cpsid	i
}
 80087be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff ffa3 	bl	8008718 <list_remove_node>
  (*node)->next = NULL;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2200      	movs	r2, #0
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f383 8810 	msr	PRIMASK, r3
}
 80087ec:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087ee:	bf00      	nop
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b089      	sub	sp, #36	; 0x24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  int size = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008802:	f3ef 8310 	mrs	r3, PRIMASK
 8008806:	613b      	str	r3, [r7, #16]
  return(result);
 8008808:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800880a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800880c:	b672      	cpsid	i
}
 800880e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008816:	e005      	b.n	8008824 <list_get_size+0x2e>
  {
    size++;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	3301      	adds	r3, #1
 800881c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d1f5      	bne.n	8008818 <list_get_size+0x22>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f383 8810 	msr	PRIMASK, r3
}
 8008836:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008838:	69fb      	ldr	r3, [r7, #28]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3724      	adds	r7, #36	; 0x24
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <std>:
 8008848:	2300      	movs	r3, #0
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	e9c0 3300 	strd	r3, r3, [r0]
 8008852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	; 0x64
 800885c:	81c2      	strh	r2, [r0, #14]
 800885e:	6183      	str	r3, [r0, #24]
 8008860:	4619      	mov	r1, r3
 8008862:	2208      	movs	r2, #8
 8008864:	305c      	adds	r0, #92	; 0x5c
 8008866:	f000 f9f5 	bl	8008c54 <memset>
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x38>)
 800886c:	6263      	str	r3, [r4, #36]	; 0x24
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x3c>)
 8008870:	62a3      	str	r3, [r4, #40]	; 0x28
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x40>)
 8008874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x44>)
 8008878:	6224      	str	r4, [r4, #32]
 800887a:	6323      	str	r3, [r4, #48]	; 0x30
 800887c:	bd10      	pop	{r4, pc}
 800887e:	bf00      	nop
 8008880:	08008a85 	.word	0x08008a85
 8008884:	08008aa7 	.word	0x08008aa7
 8008888:	08008adf 	.word	0x08008adf
 800888c:	08008b03 	.word	0x08008b03

08008890 <stdio_exit_handler>:
 8008890:	4a02      	ldr	r2, [pc, #8]	; (800889c <stdio_exit_handler+0xc>)
 8008892:	4903      	ldr	r1, [pc, #12]	; (80088a0 <stdio_exit_handler+0x10>)
 8008894:	4803      	ldr	r0, [pc, #12]	; (80088a4 <stdio_exit_handler+0x14>)
 8008896:	f000 b869 	b.w	800896c <_fwalk_sglue>
 800889a:	bf00      	nop
 800889c:	2000003c 	.word	0x2000003c
 80088a0:	08009609 	.word	0x08009609
 80088a4:	20000048 	.word	0x20000048

080088a8 <cleanup_stdio>:
 80088a8:	6841      	ldr	r1, [r0, #4]
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <cleanup_stdio+0x34>)
 80088ac:	4299      	cmp	r1, r3
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	d001      	beq.n	80088b8 <cleanup_stdio+0x10>
 80088b4:	f000 fea8 	bl	8009608 <_fflush_r>
 80088b8:	68a1      	ldr	r1, [r4, #8]
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <cleanup_stdio+0x38>)
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <cleanup_stdio+0x1e>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fea1 	bl	8009608 <_fflush_r>
 80088c6:	68e1      	ldr	r1, [r4, #12]
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <cleanup_stdio+0x3c>)
 80088ca:	4299      	cmp	r1, r3
 80088cc:	d004      	beq.n	80088d8 <cleanup_stdio+0x30>
 80088ce:	4620      	mov	r0, r4
 80088d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d4:	f000 be98 	b.w	8009608 <_fflush_r>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	20000918 	.word	0x20000918
 80088e0:	20000980 	.word	0x20000980
 80088e4:	200009e8 	.word	0x200009e8

080088e8 <global_stdio_init.part.0>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <global_stdio_init.part.0+0x30>)
 80088ec:	4c0b      	ldr	r4, [pc, #44]	; (800891c <global_stdio_init.part.0+0x34>)
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <global_stdio_init.part.0+0x38>)
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	4620      	mov	r0, r4
 80088f4:	2200      	movs	r2, #0
 80088f6:	2104      	movs	r1, #4
 80088f8:	f7ff ffa6 	bl	8008848 <std>
 80088fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008900:	2201      	movs	r2, #1
 8008902:	2109      	movs	r1, #9
 8008904:	f7ff ffa0 	bl	8008848 <std>
 8008908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800890c:	2202      	movs	r2, #2
 800890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008912:	2112      	movs	r1, #18
 8008914:	f7ff bf98 	b.w	8008848 <std>
 8008918:	20000a50 	.word	0x20000a50
 800891c:	20000918 	.word	0x20000918
 8008920:	08008891 	.word	0x08008891

08008924 <__sfp_lock_acquire>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__sfp_lock_acquire+0x8>)
 8008926:	f000 ba0d 	b.w	8008d44 <__retarget_lock_acquire_recursive>
 800892a:	bf00      	nop
 800892c:	20000a59 	.word	0x20000a59

08008930 <__sfp_lock_release>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sfp_lock_release+0x8>)
 8008932:	f000 ba08 	b.w	8008d46 <__retarget_lock_release_recursive>
 8008936:	bf00      	nop
 8008938:	20000a59 	.word	0x20000a59

0800893c <__sinit>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	f7ff fff0 	bl	8008924 <__sfp_lock_acquire>
 8008944:	6a23      	ldr	r3, [r4, #32]
 8008946:	b11b      	cbz	r3, 8008950 <__sinit+0x14>
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f7ff bff0 	b.w	8008930 <__sfp_lock_release>
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <__sinit+0x28>)
 8008952:	6223      	str	r3, [r4, #32]
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <__sinit+0x2c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f5      	bne.n	8008948 <__sinit+0xc>
 800895c:	f7ff ffc4 	bl	80088e8 <global_stdio_init.part.0>
 8008960:	e7f2      	b.n	8008948 <__sinit+0xc>
 8008962:	bf00      	nop
 8008964:	080088a9 	.word	0x080088a9
 8008968:	20000a50 	.word	0x20000a50

0800896c <_fwalk_sglue>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	4607      	mov	r7, r0
 8008972:	4688      	mov	r8, r1
 8008974:	4614      	mov	r4, r2
 8008976:	2600      	movs	r6, #0
 8008978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800897c:	f1b9 0901 	subs.w	r9, r9, #1
 8008980:	d505      	bpl.n	800898e <_fwalk_sglue+0x22>
 8008982:	6824      	ldr	r4, [r4, #0]
 8008984:	2c00      	cmp	r4, #0
 8008986:	d1f7      	bne.n	8008978 <_fwalk_sglue+0xc>
 8008988:	4630      	mov	r0, r6
 800898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d907      	bls.n	80089a4 <_fwalk_sglue+0x38>
 8008994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008998:	3301      	adds	r3, #1
 800899a:	d003      	beq.n	80089a4 <_fwalk_sglue+0x38>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	47c0      	blx	r8
 80089a2:	4306      	orrs	r6, r0
 80089a4:	3568      	adds	r5, #104	; 0x68
 80089a6:	e7e9      	b.n	800897c <_fwalk_sglue+0x10>

080089a8 <iprintf>:
 80089a8:	b40f      	push	{r0, r1, r2, r3}
 80089aa:	b507      	push	{r0, r1, r2, lr}
 80089ac:	4906      	ldr	r1, [pc, #24]	; (80089c8 <iprintf+0x20>)
 80089ae:	ab04      	add	r3, sp, #16
 80089b0:	6808      	ldr	r0, [r1, #0]
 80089b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b6:	6881      	ldr	r1, [r0, #8]
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	f000 faf5 	bl	8008fa8 <_vfiprintf_r>
 80089be:	b003      	add	sp, #12
 80089c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c4:	b004      	add	sp, #16
 80089c6:	4770      	bx	lr
 80089c8:	20000094 	.word	0x20000094

080089cc <_puts_r>:
 80089cc:	6a03      	ldr	r3, [r0, #32]
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	6884      	ldr	r4, [r0, #8]
 80089d2:	4605      	mov	r5, r0
 80089d4:	460e      	mov	r6, r1
 80089d6:	b90b      	cbnz	r3, 80089dc <_puts_r+0x10>
 80089d8:	f7ff ffb0 	bl	800893c <__sinit>
 80089dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d405      	bmi.n	80089ee <_puts_r+0x22>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	0598      	lsls	r0, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_puts_r+0x22>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 f9ab 	bl	8008d44 <__retarget_lock_acquire_recursive>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	d513      	bpl.n	8008a1c <_puts_r+0x50>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	b18b      	cbz	r3, 8008a1c <_puts_r+0x50>
 80089f8:	3e01      	subs	r6, #1
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a00:	3b01      	subs	r3, #1
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	b9e9      	cbnz	r1, 8008a42 <_puts_r+0x76>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da2e      	bge.n	8008a68 <_puts_r+0x9c>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	210a      	movs	r1, #10
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 f87b 	bl	8008b0a <__swbuf_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d007      	beq.n	8008a28 <_puts_r+0x5c>
 8008a18:	250a      	movs	r5, #10
 8008a1a:	e007      	b.n	8008a2c <_puts_r+0x60>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f8b0 	bl	8008b84 <__swsetup_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d0e7      	beq.n	80089f8 <_puts_r+0x2c>
 8008a28:	f04f 35ff 	mov.w	r5, #4294967295
 8008a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a2e:	07da      	lsls	r2, r3, #31
 8008a30:	d405      	bmi.n	8008a3e <_puts_r+0x72>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	059b      	lsls	r3, r3, #22
 8008a36:	d402      	bmi.n	8008a3e <_puts_r+0x72>
 8008a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3a:	f000 f984 	bl	8008d46 <__retarget_lock_release_recursive>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da04      	bge.n	8008a50 <_puts_r+0x84>
 8008a46:	69a2      	ldr	r2, [r4, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dc06      	bgt.n	8008a5a <_puts_r+0x8e>
 8008a4c:	290a      	cmp	r1, #10
 8008a4e:	d004      	beq.n	8008a5a <_puts_r+0x8e>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	7019      	strb	r1, [r3, #0]
 8008a58:	e7cf      	b.n	80089fa <_puts_r+0x2e>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 f854 	bl	8008b0a <__swbuf_r>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d1c9      	bne.n	80089fa <_puts_r+0x2e>
 8008a66:	e7df      	b.n	8008a28 <_puts_r+0x5c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	250a      	movs	r5, #10
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	701d      	strb	r5, [r3, #0]
 8008a72:	e7db      	b.n	8008a2c <_puts_r+0x60>

08008a74 <puts>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <puts+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff bfa7 	b.w	80089cc <_puts_r>
 8008a7e:	bf00      	nop
 8008a80:	20000094 	.word	0x20000094

08008a84 <__sread>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	460c      	mov	r4, r1
 8008a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8c:	f000 f90c 	bl	8008ca8 <_read_r>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	bfab      	itete	ge
 8008a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a96:	89a3      	ldrhlt	r3, [r4, #12]
 8008a98:	181b      	addge	r3, r3, r0
 8008a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a9e:	bfac      	ite	ge
 8008aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008aa2:	81a3      	strhlt	r3, [r4, #12]
 8008aa4:	bd10      	pop	{r4, pc}

08008aa6 <__swrite>:
 8008aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	461f      	mov	r7, r3
 8008aac:	898b      	ldrh	r3, [r1, #12]
 8008aae:	05db      	lsls	r3, r3, #23
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	d505      	bpl.n	8008ac4 <__swrite+0x1e>
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	2302      	movs	r3, #2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f000 f8e0 	bl	8008c84 <_lseek_r>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ada:	f000 b8f7 	b.w	8008ccc <_write_r>

08008ade <__sseek>:
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae6:	f000 f8cd 	bl	8008c84 <_lseek_r>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	bf15      	itete	ne
 8008af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008afa:	81a3      	strheq	r3, [r4, #12]
 8008afc:	bf18      	it	ne
 8008afe:	81a3      	strhne	r3, [r4, #12]
 8008b00:	bd10      	pop	{r4, pc}

08008b02 <__sclose>:
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	f000 b8ad 	b.w	8008c64 <_close_r>

08008b0a <__swbuf_r>:
 8008b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0c:	460e      	mov	r6, r1
 8008b0e:	4614      	mov	r4, r2
 8008b10:	4605      	mov	r5, r0
 8008b12:	b118      	cbz	r0, 8008b1c <__swbuf_r+0x12>
 8008b14:	6a03      	ldr	r3, [r0, #32]
 8008b16:	b90b      	cbnz	r3, 8008b1c <__swbuf_r+0x12>
 8008b18:	f7ff ff10 	bl	800893c <__sinit>
 8008b1c:	69a3      	ldr	r3, [r4, #24]
 8008b1e:	60a3      	str	r3, [r4, #8]
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	071a      	lsls	r2, r3, #28
 8008b24:	d525      	bpl.n	8008b72 <__swbuf_r+0x68>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	b31b      	cbz	r3, 8008b72 <__swbuf_r+0x68>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6922      	ldr	r2, [r4, #16]
 8008b2e:	1a98      	subs	r0, r3, r2
 8008b30:	6963      	ldr	r3, [r4, #20]
 8008b32:	b2f6      	uxtb	r6, r6
 8008b34:	4283      	cmp	r3, r0
 8008b36:	4637      	mov	r7, r6
 8008b38:	dc04      	bgt.n	8008b44 <__swbuf_r+0x3a>
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 fd63 	bl	8009608 <_fflush_r>
 8008b42:	b9e0      	cbnz	r0, 8008b7e <__swbuf_r+0x74>
 8008b44:	68a3      	ldr	r3, [r4, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	60a3      	str	r3, [r4, #8]
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	701e      	strb	r6, [r3, #0]
 8008b52:	6962      	ldr	r2, [r4, #20]
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d004      	beq.n	8008b64 <__swbuf_r+0x5a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	07db      	lsls	r3, r3, #31
 8008b5e:	d506      	bpl.n	8008b6e <__swbuf_r+0x64>
 8008b60:	2e0a      	cmp	r6, #10
 8008b62:	d104      	bne.n	8008b6e <__swbuf_r+0x64>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fd4e 	bl	8009608 <_fflush_r>
 8008b6c:	b938      	cbnz	r0, 8008b7e <__swbuf_r+0x74>
 8008b6e:	4638      	mov	r0, r7
 8008b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f805 	bl	8008b84 <__swsetup_r>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d0d5      	beq.n	8008b2a <__swbuf_r+0x20>
 8008b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b82:	e7f4      	b.n	8008b6e <__swbuf_r+0x64>

08008b84 <__swsetup_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <__swsetup_r+0xac>)
 8008b88:	4605      	mov	r5, r0
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	b118      	cbz	r0, 8008b98 <__swsetup_r+0x14>
 8008b90:	6a03      	ldr	r3, [r0, #32]
 8008b92:	b90b      	cbnz	r3, 8008b98 <__swsetup_r+0x14>
 8008b94:	f7ff fed2 	bl	800893c <__sinit>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9e:	0718      	lsls	r0, r3, #28
 8008ba0:	d422      	bmi.n	8008be8 <__swsetup_r+0x64>
 8008ba2:	06d9      	lsls	r1, r3, #27
 8008ba4:	d407      	bmi.n	8008bb6 <__swsetup_r+0x32>
 8008ba6:	2309      	movs	r3, #9
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb4:	e034      	b.n	8008c20 <__swsetup_r+0x9c>
 8008bb6:	0758      	lsls	r0, r3, #29
 8008bb8:	d512      	bpl.n	8008be0 <__swsetup_r+0x5c>
 8008bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bbc:	b141      	cbz	r1, 8008bd0 <__swsetup_r+0x4c>
 8008bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	d002      	beq.n	8008bcc <__swsetup_r+0x48>
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 f8cc 	bl	8008d64 <_free_r>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6363      	str	r3, [r4, #52]	; 0x34
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	6063      	str	r3, [r4, #4]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f043 0308 	orr.w	r3, r3, #8
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	b94b      	cbnz	r3, 8008c00 <__swsetup_r+0x7c>
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf6:	d003      	beq.n	8008c00 <__swsetup_r+0x7c>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 fd52 	bl	80096a4 <__smakebuf_r>
 8008c00:	89a0      	ldrh	r0, [r4, #12]
 8008c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c06:	f010 0301 	ands.w	r3, r0, #1
 8008c0a:	d00a      	beq.n	8008c22 <__swsetup_r+0x9e>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60a3      	str	r3, [r4, #8]
 8008c10:	6963      	ldr	r3, [r4, #20]
 8008c12:	425b      	negs	r3, r3
 8008c14:	61a3      	str	r3, [r4, #24]
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	b943      	cbnz	r3, 8008c2c <__swsetup_r+0xa8>
 8008c1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c1e:	d1c4      	bne.n	8008baa <__swsetup_r+0x26>
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	0781      	lsls	r1, r0, #30
 8008c24:	bf58      	it	pl
 8008c26:	6963      	ldrpl	r3, [r4, #20]
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	e7f4      	b.n	8008c16 <__swsetup_r+0x92>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	e7f7      	b.n	8008c20 <__swsetup_r+0x9c>
 8008c30:	20000094 	.word	0x20000094

08008c34 <memcmp>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	3901      	subs	r1, #1
 8008c38:	4402      	add	r2, r0
 8008c3a:	4290      	cmp	r0, r2
 8008c3c:	d101      	bne.n	8008c42 <memcmp+0xe>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e005      	b.n	8008c4e <memcmp+0x1a>
 8008c42:	7803      	ldrb	r3, [r0, #0]
 8008c44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d001      	beq.n	8008c50 <memcmp+0x1c>
 8008c4c:	1b18      	subs	r0, r3, r4
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	3001      	adds	r0, #1
 8008c52:	e7f2      	b.n	8008c3a <memcmp+0x6>

08008c54 <memset>:
 8008c54:	4402      	add	r2, r0
 8008c56:	4603      	mov	r3, r0
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <memset+0xa>
 8008c5c:	4770      	bx	lr
 8008c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c62:	e7f9      	b.n	8008c58 <memset+0x4>

08008c64 <_close_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d06      	ldr	r5, [pc, #24]	; (8008c80 <_close_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f9 fbe5 	bl	800243e <_close>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_close_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_close_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20000a54 	.word	0x20000a54

08008c84 <_lseek_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d07      	ldr	r5, [pc, #28]	; (8008ca4 <_lseek_r+0x20>)
 8008c88:	4604      	mov	r4, r0
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	602a      	str	r2, [r5, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f7f9 fbfa 	bl	800248c <_lseek>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_lseek_r+0x1e>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_lseek_r+0x1e>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20000a54 	.word	0x20000a54

08008ca8 <_read_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d07      	ldr	r5, [pc, #28]	; (8008cc8 <_read_r+0x20>)
 8008cac:	4604      	mov	r4, r0
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f7f9 fb88 	bl	80023cc <_read>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_read_r+0x1e>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_read_r+0x1e>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20000a54 	.word	0x20000a54

08008ccc <_write_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_write_r+0x20>)
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	602a      	str	r2, [r5, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f7f9 fb93 	bl	8002406 <_write>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_write_r+0x1e>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_write_r+0x1e>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	20000a54 	.word	0x20000a54

08008cf0 <__errno>:
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <__errno+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000094 	.word	0x20000094

08008cfc <__libc_init_array>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	4d0d      	ldr	r5, [pc, #52]	; (8008d34 <__libc_init_array+0x38>)
 8008d00:	4c0d      	ldr	r4, [pc, #52]	; (8008d38 <__libc_init_array+0x3c>)
 8008d02:	1b64      	subs	r4, r4, r5
 8008d04:	10a4      	asrs	r4, r4, #2
 8008d06:	2600      	movs	r6, #0
 8008d08:	42a6      	cmp	r6, r4
 8008d0a:	d109      	bne.n	8008d20 <__libc_init_array+0x24>
 8008d0c:	4d0b      	ldr	r5, [pc, #44]	; (8008d3c <__libc_init_array+0x40>)
 8008d0e:	4c0c      	ldr	r4, [pc, #48]	; (8008d40 <__libc_init_array+0x44>)
 8008d10:	f000 fd36 	bl	8009780 <_init>
 8008d14:	1b64      	subs	r4, r4, r5
 8008d16:	10a4      	asrs	r4, r4, #2
 8008d18:	2600      	movs	r6, #0
 8008d1a:	42a6      	cmp	r6, r4
 8008d1c:	d105      	bne.n	8008d2a <__libc_init_array+0x2e>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d24:	4798      	blx	r3
 8008d26:	3601      	adds	r6, #1
 8008d28:	e7ee      	b.n	8008d08 <__libc_init_array+0xc>
 8008d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2e:	4798      	blx	r3
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7f2      	b.n	8008d1a <__libc_init_array+0x1e>
 8008d34:	08009f70 	.word	0x08009f70
 8008d38:	08009f70 	.word	0x08009f70
 8008d3c:	08009f70 	.word	0x08009f70
 8008d40:	08009f74 	.word	0x08009f74

08008d44 <__retarget_lock_acquire_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_release_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <memcpy>:
 8008d48:	440a      	add	r2, r1
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xc>
 8008d52:	4770      	bx	lr
 8008d54:	b510      	push	{r4, lr}
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	d1f9      	bne.n	8008d56 <memcpy+0xe>
 8008d62:	bd10      	pop	{r4, pc}

08008d64 <_free_r>:
 8008d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d66:	2900      	cmp	r1, #0
 8008d68:	d044      	beq.n	8008df4 <_free_r+0x90>
 8008d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6e:	9001      	str	r0, [sp, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f1a1 0404 	sub.w	r4, r1, #4
 8008d76:	bfb8      	it	lt
 8008d78:	18e4      	addlt	r4, r4, r3
 8008d7a:	f000 f8df 	bl	8008f3c <__malloc_lock>
 8008d7e:	4a1e      	ldr	r2, [pc, #120]	; (8008df8 <_free_r+0x94>)
 8008d80:	9801      	ldr	r0, [sp, #4]
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	b933      	cbnz	r3, 8008d94 <_free_r+0x30>
 8008d86:	6063      	str	r3, [r4, #4]
 8008d88:	6014      	str	r4, [r2, #0]
 8008d8a:	b003      	add	sp, #12
 8008d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d90:	f000 b8da 	b.w	8008f48 <__malloc_unlock>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d908      	bls.n	8008daa <_free_r+0x46>
 8008d98:	6825      	ldr	r5, [r4, #0]
 8008d9a:	1961      	adds	r1, r4, r5
 8008d9c:	428b      	cmp	r3, r1
 8008d9e:	bf01      	itttt	eq
 8008da0:	6819      	ldreq	r1, [r3, #0]
 8008da2:	685b      	ldreq	r3, [r3, #4]
 8008da4:	1949      	addeq	r1, r1, r5
 8008da6:	6021      	streq	r1, [r4, #0]
 8008da8:	e7ed      	b.n	8008d86 <_free_r+0x22>
 8008daa:	461a      	mov	r2, r3
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	b10b      	cbz	r3, 8008db4 <_free_r+0x50>
 8008db0:	42a3      	cmp	r3, r4
 8008db2:	d9fa      	bls.n	8008daa <_free_r+0x46>
 8008db4:	6811      	ldr	r1, [r2, #0]
 8008db6:	1855      	adds	r5, r2, r1
 8008db8:	42a5      	cmp	r5, r4
 8008dba:	d10b      	bne.n	8008dd4 <_free_r+0x70>
 8008dbc:	6824      	ldr	r4, [r4, #0]
 8008dbe:	4421      	add	r1, r4
 8008dc0:	1854      	adds	r4, r2, r1
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	6011      	str	r1, [r2, #0]
 8008dc6:	d1e0      	bne.n	8008d8a <_free_r+0x26>
 8008dc8:	681c      	ldr	r4, [r3, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	6053      	str	r3, [r2, #4]
 8008dce:	440c      	add	r4, r1
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	e7da      	b.n	8008d8a <_free_r+0x26>
 8008dd4:	d902      	bls.n	8008ddc <_free_r+0x78>
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	e7d6      	b.n	8008d8a <_free_r+0x26>
 8008ddc:	6825      	ldr	r5, [r4, #0]
 8008dde:	1961      	adds	r1, r4, r5
 8008de0:	428b      	cmp	r3, r1
 8008de2:	bf04      	itt	eq
 8008de4:	6819      	ldreq	r1, [r3, #0]
 8008de6:	685b      	ldreq	r3, [r3, #4]
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	bf04      	itt	eq
 8008dec:	1949      	addeq	r1, r1, r5
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	6054      	str	r4, [r2, #4]
 8008df2:	e7ca      	b.n	8008d8a <_free_r+0x26>
 8008df4:	b003      	add	sp, #12
 8008df6:	bd30      	pop	{r4, r5, pc}
 8008df8:	20000a5c 	.word	0x20000a5c

08008dfc <sbrk_aligned>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4e0e      	ldr	r6, [pc, #56]	; (8008e38 <sbrk_aligned+0x3c>)
 8008e00:	460c      	mov	r4, r1
 8008e02:	6831      	ldr	r1, [r6, #0]
 8008e04:	4605      	mov	r5, r0
 8008e06:	b911      	cbnz	r1, 8008e0e <sbrk_aligned+0x12>
 8008e08:	f000 fcaa 	bl	8009760 <_sbrk_r>
 8008e0c:	6030      	str	r0, [r6, #0]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 fca5 	bl	8009760 <_sbrk_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d00a      	beq.n	8008e30 <sbrk_aligned+0x34>
 8008e1a:	1cc4      	adds	r4, r0, #3
 8008e1c:	f024 0403 	bic.w	r4, r4, #3
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d007      	beq.n	8008e34 <sbrk_aligned+0x38>
 8008e24:	1a21      	subs	r1, r4, r0
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 fc9a 	bl	8009760 <_sbrk_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d101      	bne.n	8008e34 <sbrk_aligned+0x38>
 8008e30:	f04f 34ff 	mov.w	r4, #4294967295
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	20000a60 	.word	0x20000a60

08008e3c <_malloc_r>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	1ccd      	adds	r5, r1, #3
 8008e42:	f025 0503 	bic.w	r5, r5, #3
 8008e46:	3508      	adds	r5, #8
 8008e48:	2d0c      	cmp	r5, #12
 8008e4a:	bf38      	it	cc
 8008e4c:	250c      	movcc	r5, #12
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	4607      	mov	r7, r0
 8008e52:	db01      	blt.n	8008e58 <_malloc_r+0x1c>
 8008e54:	42a9      	cmp	r1, r5
 8008e56:	d905      	bls.n	8008e64 <_malloc_r+0x28>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	4630      	mov	r0, r6
 8008e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f38 <_malloc_r+0xfc>
 8008e68:	f000 f868 	bl	8008f3c <__malloc_lock>
 8008e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e70:	461c      	mov	r4, r3
 8008e72:	bb5c      	cbnz	r4, 8008ecc <_malloc_r+0x90>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4638      	mov	r0, r7
 8008e78:	f7ff ffc0 	bl	8008dfc <sbrk_aligned>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	4604      	mov	r4, r0
 8008e80:	d155      	bne.n	8008f2e <_malloc_r+0xf2>
 8008e82:	f8d8 4000 	ldr.w	r4, [r8]
 8008e86:	4626      	mov	r6, r4
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	d145      	bne.n	8008f18 <_malloc_r+0xdc>
 8008e8c:	2c00      	cmp	r4, #0
 8008e8e:	d048      	beq.n	8008f22 <_malloc_r+0xe6>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	4631      	mov	r1, r6
 8008e94:	4638      	mov	r0, r7
 8008e96:	eb04 0903 	add.w	r9, r4, r3
 8008e9a:	f000 fc61 	bl	8009760 <_sbrk_r>
 8008e9e:	4581      	cmp	r9, r0
 8008ea0:	d13f      	bne.n	8008f22 <_malloc_r+0xe6>
 8008ea2:	6821      	ldr	r1, [r4, #0]
 8008ea4:	1a6d      	subs	r5, r5, r1
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff ffa7 	bl	8008dfc <sbrk_aligned>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d037      	beq.n	8008f22 <_malloc_r+0xe6>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	442b      	add	r3, r5
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d038      	beq.n	8008f32 <_malloc_r+0xf6>
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	42a2      	cmp	r2, r4
 8008ec4:	d12b      	bne.n	8008f1e <_malloc_r+0xe2>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	e00f      	b.n	8008eec <_malloc_r+0xb0>
 8008ecc:	6822      	ldr	r2, [r4, #0]
 8008ece:	1b52      	subs	r2, r2, r5
 8008ed0:	d41f      	bmi.n	8008f12 <_malloc_r+0xd6>
 8008ed2:	2a0b      	cmp	r2, #11
 8008ed4:	d917      	bls.n	8008f06 <_malloc_r+0xca>
 8008ed6:	1961      	adds	r1, r4, r5
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	6025      	str	r5, [r4, #0]
 8008edc:	bf18      	it	ne
 8008ede:	6059      	strne	r1, [r3, #4]
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	bf08      	it	eq
 8008ee4:	f8c8 1000 	streq.w	r1, [r8]
 8008ee8:	5162      	str	r2, [r4, r5]
 8008eea:	604b      	str	r3, [r1, #4]
 8008eec:	4638      	mov	r0, r7
 8008eee:	f104 060b 	add.w	r6, r4, #11
 8008ef2:	f000 f829 	bl	8008f48 <__malloc_unlock>
 8008ef6:	f026 0607 	bic.w	r6, r6, #7
 8008efa:	1d23      	adds	r3, r4, #4
 8008efc:	1af2      	subs	r2, r6, r3
 8008efe:	d0ae      	beq.n	8008e5e <_malloc_r+0x22>
 8008f00:	1b9b      	subs	r3, r3, r6
 8008f02:	50a3      	str	r3, [r4, r2]
 8008f04:	e7ab      	b.n	8008e5e <_malloc_r+0x22>
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	6862      	ldr	r2, [r4, #4]
 8008f0a:	d1dd      	bne.n	8008ec8 <_malloc_r+0x8c>
 8008f0c:	f8c8 2000 	str.w	r2, [r8]
 8008f10:	e7ec      	b.n	8008eec <_malloc_r+0xb0>
 8008f12:	4623      	mov	r3, r4
 8008f14:	6864      	ldr	r4, [r4, #4]
 8008f16:	e7ac      	b.n	8008e72 <_malloc_r+0x36>
 8008f18:	4634      	mov	r4, r6
 8008f1a:	6876      	ldr	r6, [r6, #4]
 8008f1c:	e7b4      	b.n	8008e88 <_malloc_r+0x4c>
 8008f1e:	4613      	mov	r3, r2
 8008f20:	e7cc      	b.n	8008ebc <_malloc_r+0x80>
 8008f22:	230c      	movs	r3, #12
 8008f24:	603b      	str	r3, [r7, #0]
 8008f26:	4638      	mov	r0, r7
 8008f28:	f000 f80e 	bl	8008f48 <__malloc_unlock>
 8008f2c:	e797      	b.n	8008e5e <_malloc_r+0x22>
 8008f2e:	6025      	str	r5, [r4, #0]
 8008f30:	e7dc      	b.n	8008eec <_malloc_r+0xb0>
 8008f32:	605b      	str	r3, [r3, #4]
 8008f34:	deff      	udf	#255	; 0xff
 8008f36:	bf00      	nop
 8008f38:	20000a5c 	.word	0x20000a5c

08008f3c <__malloc_lock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_lock+0x8>)
 8008f3e:	f7ff bf01 	b.w	8008d44 <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	20000a58 	.word	0x20000a58

08008f48 <__malloc_unlock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__malloc_unlock+0x8>)
 8008f4a:	f7ff befc 	b.w	8008d46 <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	20000a58 	.word	0x20000a58

08008f54 <__sfputc_r>:
 8008f54:	6893      	ldr	r3, [r2, #8]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	b410      	push	{r4}
 8008f5c:	6093      	str	r3, [r2, #8]
 8008f5e:	da08      	bge.n	8008f72 <__sfputc_r+0x1e>
 8008f60:	6994      	ldr	r4, [r2, #24]
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	db01      	blt.n	8008f6a <__sfputc_r+0x16>
 8008f66:	290a      	cmp	r1, #10
 8008f68:	d103      	bne.n	8008f72 <__sfputc_r+0x1e>
 8008f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f6e:	f7ff bdcc 	b.w	8008b0a <__swbuf_r>
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	1c58      	adds	r0, r3, #1
 8008f76:	6010      	str	r0, [r2, #0]
 8008f78:	7019      	strb	r1, [r3, #0]
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <__sfputs_r>:
 8008f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f84:	4606      	mov	r6, r0
 8008f86:	460f      	mov	r7, r1
 8008f88:	4614      	mov	r4, r2
 8008f8a:	18d5      	adds	r5, r2, r3
 8008f8c:	42ac      	cmp	r4, r5
 8008f8e:	d101      	bne.n	8008f94 <__sfputs_r+0x12>
 8008f90:	2000      	movs	r0, #0
 8008f92:	e007      	b.n	8008fa4 <__sfputs_r+0x22>
 8008f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f98:	463a      	mov	r2, r7
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f7ff ffda 	bl	8008f54 <__sfputc_r>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d1f3      	bne.n	8008f8c <__sfputs_r+0xa>
 8008fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fa8 <_vfiprintf_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	460d      	mov	r5, r1
 8008fae:	b09d      	sub	sp, #116	; 0x74
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	4698      	mov	r8, r3
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	b118      	cbz	r0, 8008fc0 <_vfiprintf_r+0x18>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x18>
 8008fbc:	f7ff fcbe 	bl	800893c <__sinit>
 8008fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_vfiprintf_r+0x2a>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_vfiprintf_r+0x2a>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fce:	f7ff feb9 	bl	8008d44 <__retarget_lock_acquire_recursive>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	071b      	lsls	r3, r3, #28
 8008fd6:	d501      	bpl.n	8008fdc <_vfiprintf_r+0x34>
 8008fd8:	692b      	ldr	r3, [r5, #16]
 8008fda:	b99b      	cbnz	r3, 8009004 <_vfiprintf_r+0x5c>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7ff fdd0 	bl	8008b84 <__swsetup_r>
 8008fe4:	b170      	cbz	r0, 8009004 <_vfiprintf_r+0x5c>
 8008fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe8:	07dc      	lsls	r4, r3, #31
 8008fea:	d504      	bpl.n	8008ff6 <_vfiprintf_r+0x4e>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	b01d      	add	sp, #116	; 0x74
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	0598      	lsls	r0, r3, #22
 8008ffa:	d4f7      	bmi.n	8008fec <_vfiprintf_r+0x44>
 8008ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ffe:	f7ff fea2 	bl	8008d46 <__retarget_lock_release_recursive>
 8009002:	e7f3      	b.n	8008fec <_vfiprintf_r+0x44>
 8009004:	2300      	movs	r3, #0
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	2320      	movs	r3, #32
 800900a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800900e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009012:	2330      	movs	r3, #48	; 0x30
 8009014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091c8 <_vfiprintf_r+0x220>
 8009018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800901c:	f04f 0901 	mov.w	r9, #1
 8009020:	4623      	mov	r3, r4
 8009022:	469a      	mov	sl, r3
 8009024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009028:	b10a      	cbz	r2, 800902e <_vfiprintf_r+0x86>
 800902a:	2a25      	cmp	r2, #37	; 0x25
 800902c:	d1f9      	bne.n	8009022 <_vfiprintf_r+0x7a>
 800902e:	ebba 0b04 	subs.w	fp, sl, r4
 8009032:	d00b      	beq.n	800904c <_vfiprintf_r+0xa4>
 8009034:	465b      	mov	r3, fp
 8009036:	4622      	mov	r2, r4
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ffa1 	bl	8008f82 <__sfputs_r>
 8009040:	3001      	adds	r0, #1
 8009042:	f000 80a9 	beq.w	8009198 <_vfiprintf_r+0x1f0>
 8009046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009048:	445a      	add	r2, fp
 800904a:	9209      	str	r2, [sp, #36]	; 0x24
 800904c:	f89a 3000 	ldrb.w	r3, [sl]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80a1 	beq.w	8009198 <_vfiprintf_r+0x1f0>
 8009056:	2300      	movs	r3, #0
 8009058:	f04f 32ff 	mov.w	r2, #4294967295
 800905c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009060:	f10a 0a01 	add.w	sl, sl, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	9307      	str	r3, [sp, #28]
 8009068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800906c:	931a      	str	r3, [sp, #104]	; 0x68
 800906e:	4654      	mov	r4, sl
 8009070:	2205      	movs	r2, #5
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	4854      	ldr	r0, [pc, #336]	; (80091c8 <_vfiprintf_r+0x220>)
 8009078:	f7f7 f8aa 	bl	80001d0 <memchr>
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	b9d8      	cbnz	r0, 80090b8 <_vfiprintf_r+0x110>
 8009080:	06d1      	lsls	r1, r2, #27
 8009082:	bf44      	itt	mi
 8009084:	2320      	movmi	r3, #32
 8009086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908a:	0713      	lsls	r3, r2, #28
 800908c:	bf44      	itt	mi
 800908e:	232b      	movmi	r3, #43	; 0x2b
 8009090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009094:	f89a 3000 	ldrb.w	r3, [sl]
 8009098:	2b2a      	cmp	r3, #42	; 0x2a
 800909a:	d015      	beq.n	80090c8 <_vfiprintf_r+0x120>
 800909c:	9a07      	ldr	r2, [sp, #28]
 800909e:	4654      	mov	r4, sl
 80090a0:	2000      	movs	r0, #0
 80090a2:	f04f 0c0a 	mov.w	ip, #10
 80090a6:	4621      	mov	r1, r4
 80090a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ac:	3b30      	subs	r3, #48	; 0x30
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d94d      	bls.n	800914e <_vfiprintf_r+0x1a6>
 80090b2:	b1b0      	cbz	r0, 80090e2 <_vfiprintf_r+0x13a>
 80090b4:	9207      	str	r2, [sp, #28]
 80090b6:	e014      	b.n	80090e2 <_vfiprintf_r+0x13a>
 80090b8:	eba0 0308 	sub.w	r3, r0, r8
 80090bc:	fa09 f303 	lsl.w	r3, r9, r3
 80090c0:	4313      	orrs	r3, r2
 80090c2:	9304      	str	r3, [sp, #16]
 80090c4:	46a2      	mov	sl, r4
 80090c6:	e7d2      	b.n	800906e <_vfiprintf_r+0xc6>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	1d19      	adds	r1, r3, #4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	9103      	str	r1, [sp, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfbb      	ittet	lt
 80090d4:	425b      	neglt	r3, r3
 80090d6:	f042 0202 	orrlt.w	r2, r2, #2
 80090da:	9307      	strge	r3, [sp, #28]
 80090dc:	9307      	strlt	r3, [sp, #28]
 80090de:	bfb8      	it	lt
 80090e0:	9204      	strlt	r2, [sp, #16]
 80090e2:	7823      	ldrb	r3, [r4, #0]
 80090e4:	2b2e      	cmp	r3, #46	; 0x2e
 80090e6:	d10c      	bne.n	8009102 <_vfiprintf_r+0x15a>
 80090e8:	7863      	ldrb	r3, [r4, #1]
 80090ea:	2b2a      	cmp	r3, #42	; 0x2a
 80090ec:	d134      	bne.n	8009158 <_vfiprintf_r+0x1b0>
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	9203      	str	r2, [sp, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfb8      	it	lt
 80090fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80090fe:	3402      	adds	r4, #2
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091d8 <_vfiprintf_r+0x230>
 8009106:	7821      	ldrb	r1, [r4, #0]
 8009108:	2203      	movs	r2, #3
 800910a:	4650      	mov	r0, sl
 800910c:	f7f7 f860 	bl	80001d0 <memchr>
 8009110:	b138      	cbz	r0, 8009122 <_vfiprintf_r+0x17a>
 8009112:	9b04      	ldr	r3, [sp, #16]
 8009114:	eba0 000a 	sub.w	r0, r0, sl
 8009118:	2240      	movs	r2, #64	; 0x40
 800911a:	4082      	lsls	r2, r0
 800911c:	4313      	orrs	r3, r2
 800911e:	3401      	adds	r4, #1
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009126:	4829      	ldr	r0, [pc, #164]	; (80091cc <_vfiprintf_r+0x224>)
 8009128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912c:	2206      	movs	r2, #6
 800912e:	f7f7 f84f 	bl	80001d0 <memchr>
 8009132:	2800      	cmp	r0, #0
 8009134:	d03f      	beq.n	80091b6 <_vfiprintf_r+0x20e>
 8009136:	4b26      	ldr	r3, [pc, #152]	; (80091d0 <_vfiprintf_r+0x228>)
 8009138:	bb1b      	cbnz	r3, 8009182 <_vfiprintf_r+0x1da>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	3307      	adds	r3, #7
 800913e:	f023 0307 	bic.w	r3, r3, #7
 8009142:	3308      	adds	r3, #8
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009148:	443b      	add	r3, r7
 800914a:	9309      	str	r3, [sp, #36]	; 0x24
 800914c:	e768      	b.n	8009020 <_vfiprintf_r+0x78>
 800914e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009152:	460c      	mov	r4, r1
 8009154:	2001      	movs	r0, #1
 8009156:	e7a6      	b.n	80090a6 <_vfiprintf_r+0xfe>
 8009158:	2300      	movs	r3, #0
 800915a:	3401      	adds	r4, #1
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	4619      	mov	r1, r3
 8009160:	f04f 0c0a 	mov.w	ip, #10
 8009164:	4620      	mov	r0, r4
 8009166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916a:	3a30      	subs	r2, #48	; 0x30
 800916c:	2a09      	cmp	r2, #9
 800916e:	d903      	bls.n	8009178 <_vfiprintf_r+0x1d0>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0c6      	beq.n	8009102 <_vfiprintf_r+0x15a>
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	e7c4      	b.n	8009102 <_vfiprintf_r+0x15a>
 8009178:	fb0c 2101 	mla	r1, ip, r1, r2
 800917c:	4604      	mov	r4, r0
 800917e:	2301      	movs	r3, #1
 8009180:	e7f0      	b.n	8009164 <_vfiprintf_r+0x1bc>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <_vfiprintf_r+0x22c>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4630      	mov	r0, r6
 800918e:	f3af 8000 	nop.w
 8009192:	4607      	mov	r7, r0
 8009194:	1c78      	adds	r0, r7, #1
 8009196:	d1d6      	bne.n	8009146 <_vfiprintf_r+0x19e>
 8009198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	d405      	bmi.n	80091aa <_vfiprintf_r+0x202>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	059a      	lsls	r2, r3, #22
 80091a2:	d402      	bmi.n	80091aa <_vfiprintf_r+0x202>
 80091a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a6:	f7ff fdce 	bl	8008d46 <__retarget_lock_release_recursive>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	065b      	lsls	r3, r3, #25
 80091ae:	f53f af1d 	bmi.w	8008fec <_vfiprintf_r+0x44>
 80091b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091b4:	e71c      	b.n	8008ff0 <_vfiprintf_r+0x48>
 80091b6:	ab03      	add	r3, sp, #12
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	462a      	mov	r2, r5
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <_vfiprintf_r+0x22c>)
 80091be:	a904      	add	r1, sp, #16
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f879 	bl	80092b8 <_printf_i>
 80091c6:	e7e4      	b.n	8009192 <_vfiprintf_r+0x1ea>
 80091c8:	08009f34 	.word	0x08009f34
 80091cc:	08009f3e 	.word	0x08009f3e
 80091d0:	00000000 	.word	0x00000000
 80091d4:	08008f83 	.word	0x08008f83
 80091d8:	08009f3a 	.word	0x08009f3a

080091dc <_printf_common>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	4616      	mov	r6, r2
 80091e2:	4699      	mov	r9, r3
 80091e4:	688a      	ldr	r2, [r1, #8]
 80091e6:	690b      	ldr	r3, [r1, #16]
 80091e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	bfb8      	it	lt
 80091f0:	4613      	movlt	r3, r2
 80091f2:	6033      	str	r3, [r6, #0]
 80091f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091f8:	4607      	mov	r7, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	b10a      	cbz	r2, 8009202 <_printf_common+0x26>
 80091fe:	3301      	adds	r3, #1
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	0699      	lsls	r1, r3, #26
 8009206:	bf42      	ittt	mi
 8009208:	6833      	ldrmi	r3, [r6, #0]
 800920a:	3302      	addmi	r3, #2
 800920c:	6033      	strmi	r3, [r6, #0]
 800920e:	6825      	ldr	r5, [r4, #0]
 8009210:	f015 0506 	ands.w	r5, r5, #6
 8009214:	d106      	bne.n	8009224 <_printf_common+0x48>
 8009216:	f104 0a19 	add.w	sl, r4, #25
 800921a:	68e3      	ldr	r3, [r4, #12]
 800921c:	6832      	ldr	r2, [r6, #0]
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	42ab      	cmp	r3, r5
 8009222:	dc26      	bgt.n	8009272 <_printf_common+0x96>
 8009224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009228:	1e13      	subs	r3, r2, #0
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	bf18      	it	ne
 800922e:	2301      	movne	r3, #1
 8009230:	0692      	lsls	r2, r2, #26
 8009232:	d42b      	bmi.n	800928c <_printf_common+0xb0>
 8009234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009238:	4649      	mov	r1, r9
 800923a:	4638      	mov	r0, r7
 800923c:	47c0      	blx	r8
 800923e:	3001      	adds	r0, #1
 8009240:	d01e      	beq.n	8009280 <_printf_common+0xa4>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	f003 0306 	and.w	r3, r3, #6
 800924a:	2b04      	cmp	r3, #4
 800924c:	bf02      	ittt	eq
 800924e:	68e5      	ldreq	r5, [r4, #12]
 8009250:	6833      	ldreq	r3, [r6, #0]
 8009252:	1aed      	subeq	r5, r5, r3
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	bf0c      	ite	eq
 8009258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800925c:	2500      	movne	r5, #0
 800925e:	4293      	cmp	r3, r2
 8009260:	bfc4      	itt	gt
 8009262:	1a9b      	subgt	r3, r3, r2
 8009264:	18ed      	addgt	r5, r5, r3
 8009266:	2600      	movs	r6, #0
 8009268:	341a      	adds	r4, #26
 800926a:	42b5      	cmp	r5, r6
 800926c:	d11a      	bne.n	80092a4 <_printf_common+0xc8>
 800926e:	2000      	movs	r0, #0
 8009270:	e008      	b.n	8009284 <_printf_common+0xa8>
 8009272:	2301      	movs	r3, #1
 8009274:	4652      	mov	r2, sl
 8009276:	4649      	mov	r1, r9
 8009278:	4638      	mov	r0, r7
 800927a:	47c0      	blx	r8
 800927c:	3001      	adds	r0, #1
 800927e:	d103      	bne.n	8009288 <_printf_common+0xac>
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	3501      	adds	r5, #1
 800928a:	e7c6      	b.n	800921a <_printf_common+0x3e>
 800928c:	18e1      	adds	r1, r4, r3
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	2030      	movs	r0, #48	; 0x30
 8009292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009296:	4422      	add	r2, r4
 8009298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800929c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092a0:	3302      	adds	r3, #2
 80092a2:	e7c7      	b.n	8009234 <_printf_common+0x58>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4622      	mov	r2, r4
 80092a8:	4649      	mov	r1, r9
 80092aa:	4638      	mov	r0, r7
 80092ac:	47c0      	blx	r8
 80092ae:	3001      	adds	r0, #1
 80092b0:	d0e6      	beq.n	8009280 <_printf_common+0xa4>
 80092b2:	3601      	adds	r6, #1
 80092b4:	e7d9      	b.n	800926a <_printf_common+0x8e>
	...

080092b8 <_printf_i>:
 80092b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	7e0f      	ldrb	r7, [r1, #24]
 80092be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092c0:	2f78      	cmp	r7, #120	; 0x78
 80092c2:	4691      	mov	r9, r2
 80092c4:	4680      	mov	r8, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	469a      	mov	sl, r3
 80092ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092ce:	d807      	bhi.n	80092e0 <_printf_i+0x28>
 80092d0:	2f62      	cmp	r7, #98	; 0x62
 80092d2:	d80a      	bhi.n	80092ea <_printf_i+0x32>
 80092d4:	2f00      	cmp	r7, #0
 80092d6:	f000 80d4 	beq.w	8009482 <_printf_i+0x1ca>
 80092da:	2f58      	cmp	r7, #88	; 0x58
 80092dc:	f000 80c0 	beq.w	8009460 <_printf_i+0x1a8>
 80092e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092e8:	e03a      	b.n	8009360 <_printf_i+0xa8>
 80092ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092ee:	2b15      	cmp	r3, #21
 80092f0:	d8f6      	bhi.n	80092e0 <_printf_i+0x28>
 80092f2:	a101      	add	r1, pc, #4	; (adr r1, 80092f8 <_printf_i+0x40>)
 80092f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f8:	08009351 	.word	0x08009351
 80092fc:	08009365 	.word	0x08009365
 8009300:	080092e1 	.word	0x080092e1
 8009304:	080092e1 	.word	0x080092e1
 8009308:	080092e1 	.word	0x080092e1
 800930c:	080092e1 	.word	0x080092e1
 8009310:	08009365 	.word	0x08009365
 8009314:	080092e1 	.word	0x080092e1
 8009318:	080092e1 	.word	0x080092e1
 800931c:	080092e1 	.word	0x080092e1
 8009320:	080092e1 	.word	0x080092e1
 8009324:	08009469 	.word	0x08009469
 8009328:	08009391 	.word	0x08009391
 800932c:	08009423 	.word	0x08009423
 8009330:	080092e1 	.word	0x080092e1
 8009334:	080092e1 	.word	0x080092e1
 8009338:	0800948b 	.word	0x0800948b
 800933c:	080092e1 	.word	0x080092e1
 8009340:	08009391 	.word	0x08009391
 8009344:	080092e1 	.word	0x080092e1
 8009348:	080092e1 	.word	0x080092e1
 800934c:	0800942b 	.word	0x0800942b
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	1d1a      	adds	r2, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	602a      	str	r2, [r5, #0]
 8009358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800935c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009360:	2301      	movs	r3, #1
 8009362:	e09f      	b.n	80094a4 <_printf_i+0x1ec>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	0607      	lsls	r7, r0, #24
 800936a:	f103 0104 	add.w	r1, r3, #4
 800936e:	6029      	str	r1, [r5, #0]
 8009370:	d501      	bpl.n	8009376 <_printf_i+0xbe>
 8009372:	681e      	ldr	r6, [r3, #0]
 8009374:	e003      	b.n	800937e <_printf_i+0xc6>
 8009376:	0646      	lsls	r6, r0, #25
 8009378:	d5fb      	bpl.n	8009372 <_printf_i+0xba>
 800937a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800937e:	2e00      	cmp	r6, #0
 8009380:	da03      	bge.n	800938a <_printf_i+0xd2>
 8009382:	232d      	movs	r3, #45	; 0x2d
 8009384:	4276      	negs	r6, r6
 8009386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800938a:	485a      	ldr	r0, [pc, #360]	; (80094f4 <_printf_i+0x23c>)
 800938c:	230a      	movs	r3, #10
 800938e:	e012      	b.n	80093b6 <_printf_i+0xfe>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	1d19      	adds	r1, r3, #4
 8009396:	6029      	str	r1, [r5, #0]
 8009398:	0605      	lsls	r5, r0, #24
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0xe8>
 800939c:	681e      	ldr	r6, [r3, #0]
 800939e:	e002      	b.n	80093a6 <_printf_i+0xee>
 80093a0:	0641      	lsls	r1, r0, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0xe4>
 80093a4:	881e      	ldrh	r6, [r3, #0]
 80093a6:	4853      	ldr	r0, [pc, #332]	; (80094f4 <_printf_i+0x23c>)
 80093a8:	2f6f      	cmp	r7, #111	; 0x6f
 80093aa:	bf0c      	ite	eq
 80093ac:	2308      	moveq	r3, #8
 80093ae:	230a      	movne	r3, #10
 80093b0:	2100      	movs	r1, #0
 80093b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093b6:	6865      	ldr	r5, [r4, #4]
 80093b8:	60a5      	str	r5, [r4, #8]
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	bfa2      	ittt	ge
 80093be:	6821      	ldrge	r1, [r4, #0]
 80093c0:	f021 0104 	bicge.w	r1, r1, #4
 80093c4:	6021      	strge	r1, [r4, #0]
 80093c6:	b90e      	cbnz	r6, 80093cc <_printf_i+0x114>
 80093c8:	2d00      	cmp	r5, #0
 80093ca:	d04b      	beq.n	8009464 <_printf_i+0x1ac>
 80093cc:	4615      	mov	r5, r2
 80093ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80093d2:	fb03 6711 	mls	r7, r3, r1, r6
 80093d6:	5dc7      	ldrb	r7, [r0, r7]
 80093d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093dc:	4637      	mov	r7, r6
 80093de:	42bb      	cmp	r3, r7
 80093e0:	460e      	mov	r6, r1
 80093e2:	d9f4      	bls.n	80093ce <_printf_i+0x116>
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d10b      	bne.n	8009400 <_printf_i+0x148>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	07de      	lsls	r6, r3, #31
 80093ec:	d508      	bpl.n	8009400 <_printf_i+0x148>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	6861      	ldr	r1, [r4, #4]
 80093f2:	4299      	cmp	r1, r3
 80093f4:	bfde      	ittt	le
 80093f6:	2330      	movle	r3, #48	; 0x30
 80093f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009400:	1b52      	subs	r2, r2, r5
 8009402:	6122      	str	r2, [r4, #16]
 8009404:	f8cd a000 	str.w	sl, [sp]
 8009408:	464b      	mov	r3, r9
 800940a:	aa03      	add	r2, sp, #12
 800940c:	4621      	mov	r1, r4
 800940e:	4640      	mov	r0, r8
 8009410:	f7ff fee4 	bl	80091dc <_printf_common>
 8009414:	3001      	adds	r0, #1
 8009416:	d14a      	bne.n	80094ae <_printf_i+0x1f6>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	b004      	add	sp, #16
 800941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f043 0320 	orr.w	r3, r3, #32
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	4833      	ldr	r0, [pc, #204]	; (80094f8 <_printf_i+0x240>)
 800942c:	2778      	movs	r7, #120	; 0x78
 800942e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	6829      	ldr	r1, [r5, #0]
 8009436:	061f      	lsls	r7, r3, #24
 8009438:	f851 6b04 	ldr.w	r6, [r1], #4
 800943c:	d402      	bmi.n	8009444 <_printf_i+0x18c>
 800943e:	065f      	lsls	r7, r3, #25
 8009440:	bf48      	it	mi
 8009442:	b2b6      	uxthmi	r6, r6
 8009444:	07df      	lsls	r7, r3, #31
 8009446:	bf48      	it	mi
 8009448:	f043 0320 	orrmi.w	r3, r3, #32
 800944c:	6029      	str	r1, [r5, #0]
 800944e:	bf48      	it	mi
 8009450:	6023      	strmi	r3, [r4, #0]
 8009452:	b91e      	cbnz	r6, 800945c <_printf_i+0x1a4>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	f023 0320 	bic.w	r3, r3, #32
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	2310      	movs	r3, #16
 800945e:	e7a7      	b.n	80093b0 <_printf_i+0xf8>
 8009460:	4824      	ldr	r0, [pc, #144]	; (80094f4 <_printf_i+0x23c>)
 8009462:	e7e4      	b.n	800942e <_printf_i+0x176>
 8009464:	4615      	mov	r5, r2
 8009466:	e7bd      	b.n	80093e4 <_printf_i+0x12c>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	6826      	ldr	r6, [r4, #0]
 800946c:	6961      	ldr	r1, [r4, #20]
 800946e:	1d18      	adds	r0, r3, #4
 8009470:	6028      	str	r0, [r5, #0]
 8009472:	0635      	lsls	r5, r6, #24
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	d501      	bpl.n	800947c <_printf_i+0x1c4>
 8009478:	6019      	str	r1, [r3, #0]
 800947a:	e002      	b.n	8009482 <_printf_i+0x1ca>
 800947c:	0670      	lsls	r0, r6, #25
 800947e:	d5fb      	bpl.n	8009478 <_printf_i+0x1c0>
 8009480:	8019      	strh	r1, [r3, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	4615      	mov	r5, r2
 8009488:	e7bc      	b.n	8009404 <_printf_i+0x14c>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	1d1a      	adds	r2, r3, #4
 800948e:	602a      	str	r2, [r5, #0]
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	6862      	ldr	r2, [r4, #4]
 8009494:	2100      	movs	r1, #0
 8009496:	4628      	mov	r0, r5
 8009498:	f7f6 fe9a 	bl	80001d0 <memchr>
 800949c:	b108      	cbz	r0, 80094a2 <_printf_i+0x1ea>
 800949e:	1b40      	subs	r0, r0, r5
 80094a0:	6060      	str	r0, [r4, #4]
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	6123      	str	r3, [r4, #16]
 80094a6:	2300      	movs	r3, #0
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ac:	e7aa      	b.n	8009404 <_printf_i+0x14c>
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	462a      	mov	r2, r5
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	47d0      	blx	sl
 80094b8:	3001      	adds	r0, #1
 80094ba:	d0ad      	beq.n	8009418 <_printf_i+0x160>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	079b      	lsls	r3, r3, #30
 80094c0:	d413      	bmi.n	80094ea <_printf_i+0x232>
 80094c2:	68e0      	ldr	r0, [r4, #12]
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	4298      	cmp	r0, r3
 80094c8:	bfb8      	it	lt
 80094ca:	4618      	movlt	r0, r3
 80094cc:	e7a6      	b.n	800941c <_printf_i+0x164>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4632      	mov	r2, r6
 80094d2:	4649      	mov	r1, r9
 80094d4:	4640      	mov	r0, r8
 80094d6:	47d0      	blx	sl
 80094d8:	3001      	adds	r0, #1
 80094da:	d09d      	beq.n	8009418 <_printf_i+0x160>
 80094dc:	3501      	adds	r5, #1
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	9903      	ldr	r1, [sp, #12]
 80094e2:	1a5b      	subs	r3, r3, r1
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dcf2      	bgt.n	80094ce <_printf_i+0x216>
 80094e8:	e7eb      	b.n	80094c2 <_printf_i+0x20a>
 80094ea:	2500      	movs	r5, #0
 80094ec:	f104 0619 	add.w	r6, r4, #25
 80094f0:	e7f5      	b.n	80094de <_printf_i+0x226>
 80094f2:	bf00      	nop
 80094f4:	08009f45 	.word	0x08009f45
 80094f8:	08009f56 	.word	0x08009f56

080094fc <__sflush_r>:
 80094fc:	898a      	ldrh	r2, [r1, #12]
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	0710      	lsls	r0, r2, #28
 8009506:	460c      	mov	r4, r1
 8009508:	d458      	bmi.n	80095bc <__sflush_r+0xc0>
 800950a:	684b      	ldr	r3, [r1, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dc05      	bgt.n	800951c <__sflush_r+0x20>
 8009510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	dc02      	bgt.n	800951c <__sflush_r+0x20>
 8009516:	2000      	movs	r0, #0
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951e:	2e00      	cmp	r6, #0
 8009520:	d0f9      	beq.n	8009516 <__sflush_r+0x1a>
 8009522:	2300      	movs	r3, #0
 8009524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009528:	682f      	ldr	r7, [r5, #0]
 800952a:	6a21      	ldr	r1, [r4, #32]
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	d032      	beq.n	8009596 <__sflush_r+0x9a>
 8009530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	075a      	lsls	r2, r3, #29
 8009536:	d505      	bpl.n	8009544 <__sflush_r+0x48>
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	1ac0      	subs	r0, r0, r3
 800953c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800953e:	b10b      	cbz	r3, 8009544 <__sflush_r+0x48>
 8009540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009542:	1ac0      	subs	r0, r0, r3
 8009544:	2300      	movs	r3, #0
 8009546:	4602      	mov	r2, r0
 8009548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954a:	6a21      	ldr	r1, [r4, #32]
 800954c:	4628      	mov	r0, r5
 800954e:	47b0      	blx	r6
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	d106      	bne.n	8009564 <__sflush_r+0x68>
 8009556:	6829      	ldr	r1, [r5, #0]
 8009558:	291d      	cmp	r1, #29
 800955a:	d82b      	bhi.n	80095b4 <__sflush_r+0xb8>
 800955c:	4a29      	ldr	r2, [pc, #164]	; (8009604 <__sflush_r+0x108>)
 800955e:	410a      	asrs	r2, r1
 8009560:	07d6      	lsls	r6, r2, #31
 8009562:	d427      	bmi.n	80095b4 <__sflush_r+0xb8>
 8009564:	2200      	movs	r2, #0
 8009566:	6062      	str	r2, [r4, #4]
 8009568:	04d9      	lsls	r1, r3, #19
 800956a:	6922      	ldr	r2, [r4, #16]
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	d504      	bpl.n	800957a <__sflush_r+0x7e>
 8009570:	1c42      	adds	r2, r0, #1
 8009572:	d101      	bne.n	8009578 <__sflush_r+0x7c>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	b903      	cbnz	r3, 800957a <__sflush_r+0x7e>
 8009578:	6560      	str	r0, [r4, #84]	; 0x54
 800957a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800957c:	602f      	str	r7, [r5, #0]
 800957e:	2900      	cmp	r1, #0
 8009580:	d0c9      	beq.n	8009516 <__sflush_r+0x1a>
 8009582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009586:	4299      	cmp	r1, r3
 8009588:	d002      	beq.n	8009590 <__sflush_r+0x94>
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff fbea 	bl	8008d64 <_free_r>
 8009590:	2000      	movs	r0, #0
 8009592:	6360      	str	r0, [r4, #52]	; 0x34
 8009594:	e7c0      	b.n	8009518 <__sflush_r+0x1c>
 8009596:	2301      	movs	r3, #1
 8009598:	4628      	mov	r0, r5
 800959a:	47b0      	blx	r6
 800959c:	1c41      	adds	r1, r0, #1
 800959e:	d1c8      	bne.n	8009532 <__sflush_r+0x36>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0c5      	beq.n	8009532 <__sflush_r+0x36>
 80095a6:	2b1d      	cmp	r3, #29
 80095a8:	d001      	beq.n	80095ae <__sflush_r+0xb2>
 80095aa:	2b16      	cmp	r3, #22
 80095ac:	d101      	bne.n	80095b2 <__sflush_r+0xb6>
 80095ae:	602f      	str	r7, [r5, #0]
 80095b0:	e7b1      	b.n	8009516 <__sflush_r+0x1a>
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	e7ad      	b.n	8009518 <__sflush_r+0x1c>
 80095bc:	690f      	ldr	r7, [r1, #16]
 80095be:	2f00      	cmp	r7, #0
 80095c0:	d0a9      	beq.n	8009516 <__sflush_r+0x1a>
 80095c2:	0793      	lsls	r3, r2, #30
 80095c4:	680e      	ldr	r6, [r1, #0]
 80095c6:	bf08      	it	eq
 80095c8:	694b      	ldreq	r3, [r1, #20]
 80095ca:	600f      	str	r7, [r1, #0]
 80095cc:	bf18      	it	ne
 80095ce:	2300      	movne	r3, #0
 80095d0:	eba6 0807 	sub.w	r8, r6, r7
 80095d4:	608b      	str	r3, [r1, #8]
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	dd9c      	ble.n	8009516 <__sflush_r+0x1a>
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095e0:	4643      	mov	r3, r8
 80095e2:	463a      	mov	r2, r7
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	2800      	cmp	r0, #0
 80095ea:	dc06      	bgt.n	80095fa <__sflush_r+0xfe>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e78e      	b.n	8009518 <__sflush_r+0x1c>
 80095fa:	4407      	add	r7, r0
 80095fc:	eba8 0800 	sub.w	r8, r8, r0
 8009600:	e7e9      	b.n	80095d6 <__sflush_r+0xda>
 8009602:	bf00      	nop
 8009604:	dfbffffe 	.word	0xdfbffffe

08009608 <_fflush_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	4605      	mov	r5, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b913      	cbnz	r3, 8009618 <_fflush_r+0x10>
 8009612:	2500      	movs	r5, #0
 8009614:	4628      	mov	r0, r5
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	b118      	cbz	r0, 8009622 <_fflush_r+0x1a>
 800961a:	6a03      	ldr	r3, [r0, #32]
 800961c:	b90b      	cbnz	r3, 8009622 <_fflush_r+0x1a>
 800961e:	f7ff f98d 	bl	800893c <__sinit>
 8009622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f3      	beq.n	8009612 <_fflush_r+0xa>
 800962a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800962c:	07d0      	lsls	r0, r2, #31
 800962e:	d404      	bmi.n	800963a <_fflush_r+0x32>
 8009630:	0599      	lsls	r1, r3, #22
 8009632:	d402      	bmi.n	800963a <_fflush_r+0x32>
 8009634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009636:	f7ff fb85 	bl	8008d44 <__retarget_lock_acquire_recursive>
 800963a:	4628      	mov	r0, r5
 800963c:	4621      	mov	r1, r4
 800963e:	f7ff ff5d 	bl	80094fc <__sflush_r>
 8009642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009644:	07da      	lsls	r2, r3, #31
 8009646:	4605      	mov	r5, r0
 8009648:	d4e4      	bmi.n	8009614 <_fflush_r+0xc>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	059b      	lsls	r3, r3, #22
 800964e:	d4e1      	bmi.n	8009614 <_fflush_r+0xc>
 8009650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009652:	f7ff fb78 	bl	8008d46 <__retarget_lock_release_recursive>
 8009656:	e7dd      	b.n	8009614 <_fflush_r+0xc>

08009658 <__swhatbuf_r>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	2900      	cmp	r1, #0
 8009662:	b096      	sub	sp, #88	; 0x58
 8009664:	4615      	mov	r5, r2
 8009666:	461e      	mov	r6, r3
 8009668:	da0d      	bge.n	8009686 <__swhatbuf_r+0x2e>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009670:	f04f 0100 	mov.w	r1, #0
 8009674:	bf0c      	ite	eq
 8009676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800967a:	2340      	movne	r3, #64	; 0x40
 800967c:	2000      	movs	r0, #0
 800967e:	6031      	str	r1, [r6, #0]
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	b016      	add	sp, #88	; 0x58
 8009684:	bd70      	pop	{r4, r5, r6, pc}
 8009686:	466a      	mov	r2, sp
 8009688:	f000 f848 	bl	800971c <_fstat_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	dbec      	blt.n	800966a <__swhatbuf_r+0x12>
 8009690:	9901      	ldr	r1, [sp, #4]
 8009692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800969a:	4259      	negs	r1, r3
 800969c:	4159      	adcs	r1, r3
 800969e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a2:	e7eb      	b.n	800967c <__swhatbuf_r+0x24>

080096a4 <__smakebuf_r>:
 80096a4:	898b      	ldrh	r3, [r1, #12]
 80096a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096a8:	079d      	lsls	r5, r3, #30
 80096aa:	4606      	mov	r6, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	d507      	bpl.n	80096c0 <__smakebuf_r+0x1c>
 80096b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	2301      	movs	r3, #1
 80096ba:	6163      	str	r3, [r4, #20]
 80096bc:	b002      	add	sp, #8
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	ab01      	add	r3, sp, #4
 80096c2:	466a      	mov	r2, sp
 80096c4:	f7ff ffc8 	bl	8009658 <__swhatbuf_r>
 80096c8:	9900      	ldr	r1, [sp, #0]
 80096ca:	4605      	mov	r5, r0
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fbb5 	bl	8008e3c <_malloc_r>
 80096d2:	b948      	cbnz	r0, 80096e8 <__smakebuf_r+0x44>
 80096d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d4ef      	bmi.n	80096bc <__smakebuf_r+0x18>
 80096dc:	f023 0303 	bic.w	r3, r3, #3
 80096e0:	f043 0302 	orr.w	r3, r3, #2
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	e7e3      	b.n	80096b0 <__smakebuf_r+0xc>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	6020      	str	r0, [r4, #0]
 80096ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	9b00      	ldr	r3, [sp, #0]
 80096f4:	6163      	str	r3, [r4, #20]
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	6120      	str	r0, [r4, #16]
 80096fa:	b15b      	cbz	r3, 8009714 <__smakebuf_r+0x70>
 80096fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009700:	4630      	mov	r0, r6
 8009702:	f000 f81d 	bl	8009740 <_isatty_r>
 8009706:	b128      	cbz	r0, 8009714 <__smakebuf_r+0x70>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f023 0303 	bic.w	r3, r3, #3
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	431d      	orrs	r5, r3
 8009718:	81a5      	strh	r5, [r4, #12]
 800971a:	e7cf      	b.n	80096bc <__smakebuf_r+0x18>

0800971c <_fstat_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d07      	ldr	r5, [pc, #28]	; (800973c <_fstat_r+0x20>)
 8009720:	2300      	movs	r3, #0
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	4611      	mov	r1, r2
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	f7f8 fe94 	bl	8002456 <_fstat>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d102      	bne.n	8009738 <_fstat_r+0x1c>
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b103      	cbz	r3, 8009738 <_fstat_r+0x1c>
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	20000a54 	.word	0x20000a54

08009740 <_isatty_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d06      	ldr	r5, [pc, #24]	; (800975c <_isatty_r+0x1c>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7f8 fe93 	bl	8002476 <_isatty>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_isatty_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_isatty_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000a54 	.word	0x20000a54

08009760 <_sbrk_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_sbrk_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 fe9c 	bl	80024a8 <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_sbrk_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_sbrk_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20000a54 	.word	0x20000a54

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
