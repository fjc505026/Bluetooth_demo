
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008290  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086bc  080086bc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c4  080086c4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080086cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  2000003c  08008708  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  08008708  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001ca5e  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009e  00000000  00000000  0003cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001db43  00000000  00000000  0003cbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000379e  00000000  00000000  0005a6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017a8  00000000  00000000  0005de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8d29  00000000  00000000  0005f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001275  00000000  00000000  00158361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00029faa  00000000  00000000  001595d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006550  00000000  00000000  00183580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008400 	.word	0x08008400

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08008400 	.word	0x08008400

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c8:	f001 fde8 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ce:	e003      	b.n	80004d8 <LoopCopyDataInit>

080004d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d6:	3104      	adds	r1, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004e0:	d3f6      	bcc.n	80004d0 <CopyDataInit>
	ldr	r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e4:	e002      	b.n	80004ec <LoopFillZerobss>

080004e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e8:	f842 3b04 	str.w	r3, [r2], #4

080004ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LoopForever+0x16>)
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004f0:	d3f9      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f2:	f007 ff53 	bl	800839c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f6:	f001 f97a 	bl	80017ee <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000500:	080086cc 	.word	0x080086cc
	ldr	r0, =_sdata
 8000504:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000508:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 800050c:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000510:	200008b4 	.word	0x200008b4

08000514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_2_IRQHandler>
	...

08000518 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  uint8_t ret;

  User_Init();
 800051e:	f000 f987 	bl	8000830 <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 8000522:	2100      	movs	r1, #0
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_BlueNRG_2_Init+0x2c>)
 8000526:	f007 fc17 	bl	8007d58 <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");


  ret = CentralAppInit();
 800052a:	f000 f945 	bl	80007b8 <CentralAppInit>
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <MX_BlueNRG_2_Init+0x22>
  {
    PRINT_DBG("CentralAppInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8000538:	e7fe      	b.n	8000538 <MX_BlueNRG_2_Init+0x20>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	0800132d 	.word	0x0800132d

08000548 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  hci_user_evt_proc();
 800054c:	f007 fd7e 	bl	800804c <hci_user_evt_proc>
  User_Process();
 8000550:	f000 fb52 	bl	8000bf8 <User_Process>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]

  // if( (uint8_t)'E' == data_buffer[0] && (uint8_t)'F' == data_buffer[0] )
  // {

  // }
  APP__u32RxDataCnt++;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <receiveData+0x24>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <receiveData+0x24>)
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074

08000580 <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 800058e:	2200      	movs	r2, #0
 8000590:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 8000594:	2200      	movs	r2, #0
 8000596:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 800059a:	2200      	movs	r2, #0
 800059c:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <Reset_DiscoveryContext+0xb0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 80005aa:	2206      	movs	r2, #6
 80005ac:	2100      	movs	r1, #0
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <Reset_DiscoveryContext+0xb4>)
 80005b0:	f007 feeb 	bl	800838a <memset>
  device_role = 0xFF;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <Reset_DiscoveryContext+0xb8>)
 80005b6:	22ff      	movs	r2, #255	; 0xff
 80005b8:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <Reset_DiscoveryContext+0xbc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <Reset_DiscoveryContext+0xc0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
  write_char_len = CHAR_VALUE_LENGTH-3;
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <Reset_DiscoveryContext+0xc4>)
 80005c8:	223c      	movs	r2, #60	; 0x3c
 80005ca:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	e026      	b.n	8000620 <Reset_DiscoveryContext+0xa0>
    data[i] = 0x31 + (i%10);
 80005d2:	88fa      	ldrh	r2, [r7, #6]
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <Reset_DiscoveryContext+0xc8>)
 80005d6:	fba3 1302 	umull	r1, r3, r3, r2
 80005da:	08d9      	lsrs	r1, r3, #3
 80005dc:	460b      	mov	r3, r1
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3231      	adds	r2, #49	; 0x31
 80005ee:	b2d1      	uxtb	r1, r2
 80005f0:	4a16      	ldr	r2, [pc, #88]	; (800064c <Reset_DiscoveryContext+0xcc>)
 80005f2:	54d1      	strb	r1, [r2, r3]
    if ((i+1)%10==0) {
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	1c59      	adds	r1, r3, #1
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <Reset_DiscoveryContext+0xd0>)
 80005fa:	fb83 2301 	smull	r2, r3, r3, r1
 80005fe:	109a      	asrs	r2, r3, #2
 8000600:	17cb      	asrs	r3, r1, #31
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	2a00      	cmp	r2, #0
 8000610:	d103      	bne.n	800061a <Reset_DiscoveryContext+0x9a>
      data[i]='x';
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <Reset_DiscoveryContext+0xcc>)
 8000616:	2178      	movs	r1, #120	; 0x78
 8000618:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	3301      	adds	r3, #1
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	2b3b      	cmp	r3, #59	; 0x3b
 8000624:	d9d5      	bls.n	80005d2 <Reset_DiscoveryContext+0x52>
    }
  }
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000005c 	.word	0x2000005c
 8000634:	20000065 	.word	0x20000065
 8000638:	20000005 	.word	0x20000005
 800063c:	200000a2 	.word	0x200000a2
 8000640:	200000a3 	.word	0x200000a3
 8000644:	20000006 	.word	0x20000006
 8000648:	cccccccd 	.word	0xcccccccd
 800064c:	200000a4 	.word	0x200000a4
 8000650:	66666667 	.word	0x66666667

08000654 <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <Setup_DeviceAddress+0x98>)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000664:	6018      	str	r0, [r3, #0]
 8000666:	3304      	adds	r3, #4
 8000668:	8019      	strh	r1, [r3, #0]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f007 faa0 	bl	8007bb2 <hci_le_rand>
 8000672:	4603      	mov	r3, r0
 8000674:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
  }

  discovery_time = 3000; /* at least 3 seconds */
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <Setup_DeviceAddress+0x9c>)
 8000678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800067c:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 800067e:	2300      	movs	r3, #0
 8000680:	75fb      	strb	r3, [r7, #23]
 8000682:	e010      	b.n	80006a6 <Setup_DeviceAddress+0x52>
  {
    discovery_time += (2*random_number[i]);
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	3318      	adds	r3, #24
 8000688:	443b      	add	r3, r7
 800068a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800068e:	b29b      	uxth	r3, r3
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <Setup_DeviceAddress+0x9c>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4413      	add	r3, r2
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <Setup_DeviceAddress+0x9c>)
 800069e:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	3301      	adds	r3, #1
 80006a4:	75fb      	strb	r3, [r7, #23]
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d9eb      	bls.n	8000684 <Setup_DeviceAddress+0x30>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	733b      	strb	r3, [r7, #12]
  bdaddr[1] = (uint8_t) (random_number[3]);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	737b      	strb	r3, [r7, #13]
  bdaddr[2] = (uint8_t) (random_number[6]);
 80006b4:	7abb      	ldrb	r3, [r7, #10]
 80006b6:	73bb      	strb	r3, [r7, #14]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	461a      	mov	r2, r3
 80006be:	2106      	movs	r1, #6
 80006c0:	2000      	movs	r0, #0
 80006c2:	f005 fdb1 	bl	8006228 <aci_hal_write_config_data>
 80006c6:	4603      	mov	r3, r0
 80006c8:	757b      	strb	r3, [r7, #21]
  if(ret != BLE_STATUS_SUCCESS)
 80006ca:	7d7b      	ldrb	r3, [r7, #21]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d108      	bne.n	80006e2 <Setup_DeviceAddress+0x8e>
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
  }
  else
  {
    PRINT_DBG("Public address: ");
    for (uint8_t i=5; i>0; i--)
 80006d0:	2305      	movs	r3, #5
 80006d2:	75bb      	strb	r3, [r7, #22]
 80006d4:	e002      	b.n	80006dc <Setup_DeviceAddress+0x88>
 80006d6:	7dbb      	ldrb	r3, [r7, #22]
 80006d8:	3b01      	subs	r3, #1
 80006da:	75bb      	strb	r3, [r7, #22]
 80006dc:	7dbb      	ldrb	r3, [r7, #22]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f9      	bne.n	80006d6 <Setup_DeviceAddress+0x82>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08008418 	.word	0x08008418
 80006f0:	200000a0 	.word	0x200000a0

080006f4 <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  uint8_t index = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]

  while (index < data_length)
 8000704:	e01f      	b.n	8000746 <Find_DeviceName+0x52>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE CentralApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	3301      	adds	r3, #1
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b09      	cmp	r3, #9
 8000712:	d10f      	bne.n	8000734 <Find_DeviceName+0x40>
    {
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], BLE_SAMPLE_APP_COMPLETE_LOCAL_NAME_SIZE) == 0)
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	2212      	movs	r2, #18
 800071e:	490e      	ldr	r1, [pc, #56]	; (8000758 <Find_DeviceName+0x64>)
 8000720:	4618      	mov	r0, r3
 8000722:	f007 fe22 	bl	800836a <memcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <Find_DeviceName+0x3c>
      {
        return TRUE;
 800072c:	2301      	movs	r3, #1
 800072e:	e00f      	b.n	8000750 <Find_DeviceName+0x5c>
      }
      else
      {
        return FALSE;
 8000730:	2300      	movs	r3, #0
 8000732:	e00d      	b.n	8000750 <Find_DeviceName+0x5c>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	4413      	add	r3, r2
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4413      	add	r3, r2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
  while (index < data_length)
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3db      	bcc.n	8000706 <Find_DeviceName+0x12>
    }
  }

  return FALSE;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000008 	.word	0x20000008

0800075c <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	603a      	str	r2, [r7, #0]
 8000766:	80fb      	strh	r3, [r7, #6]
 8000768:	460b      	mov	r3, r1
 800076a:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1)
 800076c:	88fa      	ldrh	r2, [r7, #6]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <Attribute_Modified_CB+0x50>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	429a      	cmp	r2, r3
 8000776:	d105      	bne.n	8000784 <Attribute_Modified_CB+0x28>
  {
    receiveData(att_data, data_length);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	4619      	mov	r1, r3
 800077c:	6838      	ldr	r0, [r7, #0]
 800077e:	f7ff feeb 	bl	8000558 <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 8000782:	e00f      	b.n	80007a4 <Attribute_Modified_CB+0x48>
  else if(handle == TXCharHandle + 2)
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <Attribute_Modified_CB+0x54>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3302      	adds	r3, #2
 800078c:	429a      	cmp	r2, r3
 800078e:	d109      	bne.n	80007a4 <Attribute_Modified_CB+0x48>
    if(att_data[0] == 0x01)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d105      	bne.n	80007a4 <Attribute_Modified_CB+0x48>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <Attribute_Modified_CB+0x58>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <Attribute_Modified_CB+0x58>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000f0 	.word	0x200000f0
 80007b0:	200000ee 	.word	0x200000ee
 80007b4:	20000000 	.word	0x20000000

080007b8 <CentralAppInit>:
* Description    : Init CentralApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t CentralAppInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  const uint8_t cu8DeviceNameLen = 7U;
 80007be:	2307      	movs	r3, #7
 80007c0:	71fb      	strb	r3, [r7, #7]

  /* Sw reset of the device */
  hci_reset();
 80007c2:	f007 f8e5 	bl	8007990 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80007c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ca:	f001 fcf5 	bl	80021b8 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 80007ce:	f7ff ff41 	bl	8000654 <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 80007d2:	2104      	movs	r1, #4
 80007d4:	2001      	movs	r0, #1
 80007d6:	f005 fdb5 	bl	8006344 <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 80007da:	f005 f951 	bl	8005a80 <aci_gatt_init>
 80007de:	4603      	mov	r3, r0
 80007e0:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <CentralAppInit+0x34>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
    return ret;
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	e01d      	b.n	8000828 <CentralAppInit+0x70>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE,0x0,cu8DeviceNameLen, &service_handle,
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	463b      	mov	r3, r7
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	1cbb      	adds	r3, r7, #2
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	460b      	mov	r3, r1
 80007fa:	2100      	movs	r1, #0
 80007fc:	2004      	movs	r0, #4
 80007fe:	f004 feb4 	bl	800556a <aci_gap_init>
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <CentralAppInit+0x58>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
    return ret;
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	e00b      	b.n	8000828 <CentralAppInit+0x70>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 8000810:	f000 fd00 	bl	8001214 <Add_Sample_Service>
 8000814:	4603      	mov	r3, r0
 8000816:	71bb      	strb	r3, [r7, #6]
  if(ret != BLE_STATUS_SUCCESS)
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <CentralAppInit+0x6a>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
    return ret;
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	e002      	b.n	8000828 <CentralAppInit+0x70>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 8000822:	f7ff fead 	bl	8000580 <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f9a8 	bl	8001b8c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800083c:	2000      	movs	r0, #0
 800083e:	f001 f913 	bl	8001a68 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000842:	2000      	movs	r0, #0
 8000844:	f001 fa5e 	bl	8001d04 <BSP_COM_Init>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <Connection_StateMachine>:
* Description    : Connection state machine.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Connection_StateMachine(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af08      	add	r7, sp, #32
  uint8_t ret;

  switch (discovery.device_state)
 8000852:	4b9f      	ldr	r3, [pc, #636]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000854:	8a1b      	ldrh	r3, [r3, #16]
 8000856:	2b80      	cmp	r3, #128	; 0x80
 8000858:	f000 8130 	beq.w	8000abc <Connection_StateMachine+0x270>
 800085c:	2b80      	cmp	r3, #128	; 0x80
 800085e:	f300 8130 	bgt.w	8000ac2 <Connection_StateMachine+0x276>
 8000862:	2b20      	cmp	r3, #32
 8000864:	dc4a      	bgt.n	80008fc <Connection_StateMachine+0xb0>
 8000866:	2b00      	cmp	r3, #0
 8000868:	f2c0 812b 	blt.w	8000ac2 <Connection_StateMachine+0x276>
 800086c:	2b20      	cmp	r3, #32
 800086e:	f200 8128 	bhi.w	8000ac2 <Connection_StateMachine+0x276>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <Connection_StateMachine+0x2c>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000903 	.word	0x08000903
 800087c:	0800090f 	.word	0x0800090f
 8000880:	08000a51 	.word	0x08000a51
 8000884:	08000ac3 	.word	0x08000ac3
 8000888:	0800094f 	.word	0x0800094f
 800088c:	08000ac3 	.word	0x08000ac3
 8000890:	08000ac3 	.word	0x08000ac3
 8000894:	08000ac3 	.word	0x08000ac3
 8000898:	080009f3 	.word	0x080009f3
 800089c:	08000ac3 	.word	0x08000ac3
 80008a0:	08000ac3 	.word	0x08000ac3
 80008a4:	08000ac3 	.word	0x08000ac3
 80008a8:	08000ac3 	.word	0x08000ac3
 80008ac:	08000ac3 	.word	0x08000ac3
 80008b0:	08000ac3 	.word	0x08000ac3
 80008b4:	08000ac3 	.word	0x08000ac3
 80008b8:	08000a59 	.word	0x08000a59
 80008bc:	08000ac3 	.word	0x08000ac3
 80008c0:	08000ac3 	.word	0x08000ac3
 80008c4:	08000ac3 	.word	0x08000ac3
 80008c8:	08000ac3 	.word	0x08000ac3
 80008cc:	08000ac3 	.word	0x08000ac3
 80008d0:	08000ac3 	.word	0x08000ac3
 80008d4:	08000ac3 	.word	0x08000ac3
 80008d8:	08000ac3 	.word	0x08000ac3
 80008dc:	08000ac3 	.word	0x08000ac3
 80008e0:	08000ac3 	.word	0x08000ac3
 80008e4:	08000ac3 	.word	0x08000ac3
 80008e8:	08000ac3 	.word	0x08000ac3
 80008ec:	08000ac3 	.word	0x08000ac3
 80008f0:	08000ac3 	.word	0x08000ac3
 80008f4:	08000ac3 	.word	0x08000ac3
 80008f8:	080009d3 	.word	0x080009d3
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d059      	beq.n	80009b4 <Connection_StateMachine+0x168>
    {
      Reset_DiscoveryContext();
    }
    break; /* end case (DISCOVERY_ERROR) */
  default:
    break;
 8000900:	e0df      	b.n	8000ac2 <Connection_StateMachine+0x276>
      Reset_DiscoveryContext();
 8000902:	f7ff fe3d 	bl	8000580 <Reset_DiscoveryContext>
      discovery.device_state = START_DISCOVERY_PROC;
 8000906:	4b72      	ldr	r3, [pc, #456]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000908:	2201      	movs	r2, #1
 800090a:	821a      	strh	r2, [r3, #16]
    break; /* end case (INIT_STATE) */
 800090c:	e0dc      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00);
 800090e:	2300      	movs	r3, #0
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800091a:	f004 fed3 	bl	80056c4 <aci_gap_start_general_discovery_proc>
 800091e:	4603      	mov	r3, r0
 8000920:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <Connection_StateMachine+0xe4>
        discovery.device_state = DISCOVERY_ERROR;
 8000928:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <Connection_StateMachine+0x284>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 800092e:	e0cb      	b.n	8000ac8 <Connection_StateMachine+0x27c>
        discovery.startTime = HAL_GetTick();
 8000930:	f001 fc36 	bl	80021a0 <HAL_GetTick>
 8000934:	4603      	mov	r3, r0
 8000936:	4a66      	ldr	r2, [pc, #408]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000938:	6053      	str	r3, [r2, #4]
        discovery.check_disc_proc_timer = TRUE;
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <Connection_StateMachine+0x284>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 8000940:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000942:	2200      	movs	r2, #0
 8000944:	705a      	strb	r2, [r3, #1]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000948:	2204      	movs	r2, #4
 800094a:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 800094c:	e0bc      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      if (discovery.check_disc_proc_timer == TRUE)
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <Connection_StateMachine+0x134>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8000956:	f001 fc23 	bl	80021a0 <HAL_GetTick>
 800095a:	4602      	mov	r2, r0
 800095c:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <Connection_StateMachine+0x284>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	4a5c      	ldr	r2, [pc, #368]	; (8000ad4 <Connection_StateMachine+0x288>)
 8000964:	8812      	ldrh	r2, [r2, #0]
 8000966:	4293      	cmp	r3, r2
 8000968:	f240 80ad 	bls.w	8000ac6 <Connection_StateMachine+0x27a>
          discovery.check_disc_proc_timer = FALSE;
 800096c:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <Connection_StateMachine+0x284>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
          discovery.startTime = 0;
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_TERMINATE_GAP_PROC;
 8000978:	4b55      	ldr	r3, [pc, #340]	; (8000ad0 <Connection_StateMachine+0x284>)
 800097a:	2220      	movs	r2, #32
 800097c:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 800097e:	e0a2      	b.n	8000ac6 <Connection_StateMachine+0x27a>
      else if (discovery.check_disc_mode_timer == TRUE)
 8000980:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	2b01      	cmp	r3, #1
 8000986:	f040 809e 	bne.w	8000ac6 <Connection_StateMachine+0x27a>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 800098a:	f001 fc09 	bl	80021a0 <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a4f      	ldr	r2, [pc, #316]	; (8000ad4 <Connection_StateMachine+0x288>)
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	4293      	cmp	r3, r2
 800099c:	f240 8093 	bls.w	8000ac6 <Connection_StateMachine+0x27a>
          discovery.check_disc_mode_timer = FALSE;
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	705a      	strb	r2, [r3, #1]
          discovery.startTime = 0;
 80009a6:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 80009ac:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009ae:	2240      	movs	r2, #64	; 0x40
 80009b0:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 80009b2:	e088      	b.n	8000ac6 <Connection_StateMachine+0x27a>
      ret = aci_gap_set_non_discoverable();
 80009b4:	f004 fcad 	bl	8005312 <aci_gap_set_non_discoverable>
 80009b8:	4603      	mov	r3, r0
 80009ba:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <Connection_StateMachine+0x17e>
        discovery.device_state = DISCOVERY_ERROR;
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 80009c8:	e07e      	b.n	8000ac8 <Connection_StateMachine+0x27c>
        discovery.device_state = INIT_STATE;
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 80009d0:	e07a      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      ret = aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC); // GENERAL_DISCOVERY_PROCEDURE
 80009d2:	2002      	movs	r0, #2
 80009d4:	f004 fff7 	bl	80059c6 <aci_gap_terminate_gap_proc>
 80009d8:	4603      	mov	r3, r0
 80009da:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <Connection_StateMachine+0x19e>
        discovery.device_state = DISCOVERY_ERROR;
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	821a      	strh	r2, [r3, #16]
        break;
 80009e8:	e06e      	b.n	8000ac8 <Connection_StateMachine+0x27c>
        discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <Connection_StateMachine+0x284>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_TERMINATE_GAP_PROC) */
 80009f0:	e06a      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      for (uint8_t i=5; i>0; i--)
 80009f2:	2305      	movs	r3, #5
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e002      	b.n	80009fe <Connection_StateMachine+0x1b2>
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f9      	bne.n	80009f8 <Connection_StateMachine+0x1ac>
      ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000a06:	7a1a      	ldrb	r2, [r3, #8]
 8000a08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a0c:	9306      	str	r3, [sp, #24]
 8000a0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a12:	9305      	str	r3, [sp, #20]
 8000a14:	233c      	movs	r3, #60	; 0x3c
 8000a16:	9304      	str	r3, [sp, #16]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9303      	str	r3, [sp, #12]
 8000a1c:	2328      	movs	r3, #40	; 0x28
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2328      	movs	r3, #40	; 0x28
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <Connection_StateMachine+0x28c>)
 8000a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a32:	f004 fee4 	bl	80057fe <aci_gap_create_connection>
 8000a36:	4603      	mov	r3, r0
 8000a38:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <Connection_StateMachine+0x1fc>
        discovery.device_state = DISCOVERY_ERROR;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000a46:	e03f      	b.n	8000ac8 <Connection_StateMachine+0x27c>
        discovery.device_state = WAIT_EVENT;
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000a4e:	e03b      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      discovery.device_state = WAIT_EVENT;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_EVENT) */
 8000a56:	e037      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      hci_le_set_scan_response_data(0,NULL);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f007 f830 	bl	8007ac0 <hci_le_set_scan_response_data>
      ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000a60:	2300      	movs	r3, #0
 8000a62:	9306      	str	r3, [sp, #24]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9305      	str	r3, [sp, #20]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9304      	str	r3, [sp, #16]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9303      	str	r3, [sp, #12]
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <Connection_StateMachine+0x290>)
 8000a72:	9302      	str	r3, [sp, #8]
 8000a74:	2312      	movs	r3, #18
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	2000      	movs	r0, #0
 8000a88:	f004 fc6c 	bl	8005364 <aci_gap_set_discoverable>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71bb      	strb	r3, [r7, #6]
      if (ret != BLE_STATUS_SUCCESS)
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <Connection_StateMachine+0x252>
        discovery.device_state = DISCOVERY_ERROR;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000a9c:	e014      	b.n	8000ac8 <Connection_StateMachine+0x27c>
        discovery.startTime = HAL_GetTick();
 8000a9e:	f001 fb7f 	bl	80021a0 <HAL_GetTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000aa6:	6053      	str	r3, [r2, #4]
        discovery.check_disc_mode_timer = TRUE;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	705a      	strb	r2, [r3, #1]
        discovery.check_disc_proc_timer = FALSE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <Connection_StateMachine+0x284>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8000aba:	e005      	b.n	8000ac8 <Connection_StateMachine+0x27c>
      Reset_DiscoveryContext();
 8000abc:	f7ff fd60 	bl	8000580 <Reset_DiscoveryContext>
    break; /* end case (DISCOVERY_ERROR) */
 8000ac0:	e002      	b.n	8000ac8 <Connection_StateMachine+0x27c>
    break;
 8000ac2:	bf00      	nop
 8000ac4:	e000      	b.n	8000ac8 <Connection_StateMachine+0x27c>
    break; /* end case (WAIT_TIMER_EXPIRED) */
 8000ac6:	bf00      	nop
  }/* end switch */

}/* end Connection_StateMachine() */
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000005c 	.word	0x2000005c
 8000ad4:	200000a0 	.word	0x200000a0
 8000ad8:	20000065 	.word	0x20000065
 8000adc:	20000008 	.word	0x20000008

08000ae0 <APP__vUpdateDetectRange>:


static void APP__vUpdateDetectRange( int8_t i8Rssi )
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ( i8Rssi  < APP_RSSI_THRESHOLD_FAR ) // far range, (-127,-90)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000af2:	da03      	bge.n	8000afc <APP__vUpdateDetectRange+0x1c>
  {
    APP__enDetectRange = APP_RANGE_FAR;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <APP__vUpdateDetectRange+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
  }
  else                               //  close range, [-70, 2)
  {
    APP__enDetectRange = APP_RANGE_NEAR;
  }
}
 8000afa:	e00b      	b.n	8000b14 <APP__vUpdateDetectRange+0x34>
  else if ( i8Rssi  < APP_RSSI_THRESHOLD_MID) //mid range, [-90,-70)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8000b04:	da03      	bge.n	8000b0e <APP__vUpdateDetectRange+0x2e>
    APP__enDetectRange = APP_RANGE_MID;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <APP__vUpdateDetectRange+0x40>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
}
 8000b0c:	e002      	b.n	8000b14 <APP__vUpdateDetectRange+0x34>
    APP__enDetectRange = APP_RANGE_NEAR;
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <APP__vUpdateDetectRange+0x40>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	20000004 	.word	0x20000004

08000b24 <APP__vLEDHanlder>:

static void APP__vLEDHanlder( APP_tenRange enRange )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  static uint32_t  u32LastTick = 0U;
  static uint32_t  u32LastRxDataCnt = 0U; 

  switch (enRange)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d02a      	beq.n	8000b8a <APP__vLEDHanlder+0x66>
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	dc49      	bgt.n	8000bcc <APP__vLEDHanlder+0xa8>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <APP__vLEDHanlder+0x1e>
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d012      	beq.n	8000b66 <APP__vLEDHanlder+0x42>
 8000b40:	e044      	b.n	8000bcc <APP__vLEDHanlder+0xa8>
  {
  case APP_RANGE_FAR:
  {
    if( HAL_GetTick() - u32LastTick > APP_FAR_LED_TOGGLE_TIMEOUT )
 8000b42:	f001 fb2d 	bl	80021a0 <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b52:	d93f      	bls.n	8000bd4 <APP__vLEDHanlder+0xb0>
    {
      BSP_LED_Toggle(LED2);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 ffc5 	bl	8001ae4 <BSP_LED_Toggle>
      u32LastTick = HAL_GetTick();
 8000b5a:	f001 fb21 	bl	80021a0 <HAL_GetTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000b62:	6013      	str	r3, [r2, #0]
    }
  } break;
 8000b64:	e036      	b.n	8000bd4 <APP__vLEDHanlder+0xb0>

  case APP_RANGE_MID:
  {
    if( HAL_GetTick() - u32LastTick > APP_MID_LED_TOGGLE_TIMEOUT )
 8000b66:	f001 fb1b 	bl	80021a0 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b76:	d92f      	bls.n	8000bd8 <APP__vLEDHanlder+0xb4>
    {
      BSP_LED_Toggle(LED2);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 ffb3 	bl	8001ae4 <BSP_LED_Toggle>
      u32LastTick = HAL_GetTick();
 8000b7e:	f001 fb0f 	bl	80021a0 <HAL_GetTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000b86:	6013      	str	r3, [r2, #0]
    }
  } break;
 8000b88:	e026      	b.n	8000bd8 <APP__vLEDHanlder+0xb4>

  case APP_RANGE_NEAR:
  {
    if ( APP__u32RxDataCnt != u32LastRxDataCnt )   // RX Counter has been changed
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <APP__vLEDHanlder+0xc8>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <APP__vLEDHanlder+0xcc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d00e      	beq.n	8000bb4 <APP__vLEDHanlder+0x90>
    {
      u32LastRxDataCnt = APP__u32RxDataCnt;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <APP__vLEDHanlder+0xc8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <APP__vLEDHanlder+0xcc>)
 8000b9c:	6013      	str	r3, [r2, #0]
      APP__u8LEDTurnOn = 1U;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <APP__vLEDHanlder+0xd0>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
      BSP_LED_On(LED2);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 ff71 	bl	8001a8c <BSP_LED_On>
      u32LastTick = HAL_GetTick();
 8000baa:	f001 faf9 	bl	80021a0 <HAL_GetTick>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000bb2:	6013      	str	r3, [r2, #0]
    }

    if( HAL_GetTick() - u32LastTick > APP_NEAR_LED_ON_TIMEOUT )
 8000bb4:	f001 faf4 	bl	80021a0 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <APP__vLEDHanlder+0xc4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2bfa      	cmp	r3, #250	; 0xfa
 8000bc2:	d90b      	bls.n	8000bdc <APP__vLEDHanlder+0xb8>
    {
      BSP_LED_Off(LED2);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 ff77 	bl	8001ab8 <BSP_LED_Off>
    }

  } break;
 8000bca:	e007      	b.n	8000bdc <APP__vLEDHanlder+0xb8>

  case APP_RANGE_NONE:
  default:
  {
    BSP_LED_Off(LED2);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 ff73 	bl	8001ab8 <BSP_LED_Off>
  } break;
 8000bd2:	e004      	b.n	8000bde <APP__vLEDHanlder+0xba>
  } break;
 8000bd4:	bf00      	nop
 8000bd6:	e002      	b.n	8000bde <APP__vLEDHanlder+0xba>
  } break;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <APP__vLEDHanlder+0xba>
  } break;
 8000bdc:	bf00      	nop
  }
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000e0 	.word	0x200000e0
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	200000e4 	.word	0x200000e4
 8000bf4:	20000078 	.word	0x20000078

08000bf8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08f      	sub	sp, #60	; 0x3c
 8000bfc:	af02      	add	r7, sp, #8
  static uint32_t u32LastRssiReadTick = 0U;

  if(APP_FLAG(SET_CONNECTABLE))
 8000bfe:	4b7d      	ldr	r3, [pc, #500]	; (8000df4 <User_Process+0x1fc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d008      	beq.n	8000c1c <User_Process+0x24>
  {
    Connection_StateMachine();
 8000c0a:	f7ff fe1f 	bl	800084c <Connection_StateMachine>
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f001 f810 	bl	8001c34 <BSP_PB_GetState>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b77      	ldr	r3, [pc, #476]	; (8000df8 <User_Process+0x200>)
 8000c1a:	701a      	strb	r2, [r3, #0]
  }

  if (device_role == MASTER_ROLE)
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <User_Process+0x204>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 80bb 	bne.w	8000d9c <User_Process+0x1a4>
  {
    /* Start TX handle Characteristic discovery if not yet done */
    if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8000c26:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <User_Process+0x1fc>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d02a      	beq.n	8000c88 <User_Process+0x90>
 8000c32:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <User_Process+0x1fc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d124      	bne.n	8000c88 <User_Process+0x90>
    {
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <User_Process+0x1fc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14e      	bne.n	8000ce8 <User_Process+0xf0>
      {
        /* Discovery TX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <User_Process+0x208>)
 8000c4c:	f107 0418 	add.w	r4, r7, #24
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Tx.UUID_16, charUuid128_TX, 16);
 8000c56:	4b6b      	ldr	r3, [pc, #428]	; (8000e04 <User_Process+0x20c>)
 8000c58:	461c      	mov	r4, r3
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Tx);
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <User_Process+0x210>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b298      	uxth	r0, r3
 8000c6a:	4b66      	ldr	r3, [pc, #408]	; (8000e04 <User_Process+0x20c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c74:	2101      	movs	r1, #1
 8000c76:	f005 f96c 	bl	8005f52 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_TX_CHAR_HANDLE);
 8000c7a:	4b5e      	ldr	r3, [pc, #376]	; (8000df4 <User_Process+0x1fc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <User_Process+0x1fc>)
 8000c84:	6013      	str	r3, [r2, #0]
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8000c86:	e02f      	b.n	8000ce8 <User_Process+0xf0>
      }
    }
    /* Start RX handle Characteristic discovery if not yet done */
    else if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8000c88:	4b5a      	ldr	r3, [pc, #360]	; (8000df4 <User_Process+0x1fc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d029      	beq.n	8000ce8 <User_Process+0xf0>
 8000c94:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <User_Process+0x1fc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d123      	bne.n	8000ce8 <User_Process+0xf0>
    {
      /* Discovery RX characteristic handle by UUID 128 bits */
      if (!APP_FLAG(START_READ_RX_CHAR_HANDLE))
 8000ca0:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <User_Process+0x1fc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11d      	bne.n	8000ce8 <User_Process+0xf0>
      {
        /* Discovery RX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000cac:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <User_Process+0x214>)
 8000cae:	f107 0408 	add.w	r4, r7, #8
 8000cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        BLUENRG_memcpy(&UUID_Rx.UUID_16, charUuid128_RX, 16);
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <User_Process+0x218>)
 8000cba:	461c      	mov	r4, r3
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Rx);
 8000cc6:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <User_Process+0x210>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b298      	uxth	r0, r3
 8000ccc:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <User_Process+0x218>)
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	f005 f93b 	bl	8005f52 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_RX_CHAR_HANDLE);
 8000cdc:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <User_Process+0x1fc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ce4:	4a43      	ldr	r2, [pc, #268]	; (8000df4 <User_Process+0x1fc>)
 8000ce6:	6013      	str	r3, [r2, #0]
      }
    }

    if(APP_FLAG(CONNECTED) && APP_FLAG(END_READ_TX_CHAR_HANDLE) && APP_FLAG(END_READ_RX_CHAR_HANDLE) && !APP_FLAG(NOTIFICATIONS_ENABLED))
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <User_Process+0x1fc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d053      	beq.n	8000d9c <User_Process+0x1a4>
 8000cf4:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <User_Process+0x1fc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d04d      	beq.n	8000d9c <User_Process+0x1a4>
 8000d00:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <User_Process+0x1fc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d047      	beq.n	8000d9c <User_Process+0x1a4>
 8000d0c:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <User_Process+0x1fc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d141      	bne.n	8000d9c <User_Process+0x1a4>
    {
      /* Before enabling notifications perform an ATT MTU exchange procedure */
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8000d18:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <User_Process+0x21c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d110      	bne.n	8000d42 <User_Process+0x14a>
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <User_Process+0x220>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <User_Process+0x14a>
      {
        PRINT_DBG("ROLE MASTER (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
                  mtu_exchanged, mtu_exchanged_wait);

        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <User_Process+0x210>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f8ae 	bl	8005e90 <aci_gatt_exchange_config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (ret != BLE_STATUS_SUCCESS) {
          PRINT_DBG("aci_gatt_exchange_configuration error 0x%02x\r\n", ret);
        }
        mtu_exchanged_wait = 1;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <User_Process+0x220>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
      {
 8000d40:	e02c      	b.n	8000d9c <User_Process+0x1a4>
      }
      else if ((mtu_exchanged == 1) && (mtu_exchanged_wait == 2))
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <User_Process+0x21c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d128      	bne.n	8000d9c <User_Process+0x1a4>
 8000d4a:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <User_Process+0x220>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d124      	bne.n	8000d9c <User_Process+0x1a4>
      {
        uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000d52:	2301      	movs	r3, #1
 8000d54:	80bb      	strh	r3, [r7, #4]
        uint32_t tickstart = HAL_GetTick();
 8000d56:	f001 fa23 	bl	80021a0 <HAL_GetTick>
 8000d5a:	62b8      	str	r0, [r7, #40]	; 0x28

        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000d5c:	e008      	b.n	8000d70 <User_Process+0x178>
        {
          // Radio is busy.
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d5e:	f001 fa1f 	bl	80021a0 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d80e      	bhi.n	8000d8e <User_Process+0x196>
        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <User_Process+0x210>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b298      	uxth	r0, r3
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <User_Process+0x224>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2202      	movs	r2, #2
 8000d82:	f005 f9a9 	bl	80060d8 <aci_gatt_write_char_desc>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b46      	cmp	r3, #70	; 0x46
 8000d8a:	d0e8      	beq.n	8000d5e <User_Process+0x166>
 8000d8c:	e000      	b.n	8000d90 <User_Process+0x198>
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d8e:	bf00      	nop
        }
        APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <User_Process+0x1fc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d98:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <User_Process+0x1fc>)
 8000d9a:	6013      	str	r3, [r2, #0]
	  }
    }
  } /* if (device_role == MASTER_ROLE) */


  if( APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED) )
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <User_Process+0x1fc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01b      	beq.n	8000de0 <User_Process+0x1e8>
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <User_Process+0x1fc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d015      	beq.n	8000de0 <User_Process+0x1e8>
  {
    if ( HAL_GetTick() -  u32LastRssiReadTick > APP_RSSI_READING_PERIOD )
 8000db4:	f001 f9f4 	bl	80021a0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <User_Process+0x228>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dc4:	d90c      	bls.n	8000de0 <User_Process+0x1e8>
    {
      int8_t i8tempRssi;
      hci_read_rssi(connection_handle, &i8tempRssi);
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <User_Process+0x210>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	1cfa      	adds	r2, r7, #3
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fe06 	bl	80079e2 <hci_read_rssi>
      APP__vUpdateDetectRange(i8tempRssi);
 8000dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe80 	bl	8000ae0 <APP__vUpdateDetectRange>
    }
  
  }

  APP__vLEDHanlder( APP__enDetectRange );
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <User_Process+0x22c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe9d 	bl	8000b24 <APP__vLEDHanlder>
}
 8000dea:	bf00      	nop
 8000dec:	3734      	adds	r7, #52	; 0x34
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000058 	.word	0x20000058
 8000dfc:	20000005 	.word	0x20000005
 8000e00:	08008420 	.word	0x08008420
 8000e04:	2000007c 	.word	0x2000007c
 8000e08:	20000070 	.word	0x20000070
 8000e0c:	08008430 	.word	0x08008430
 8000e10:	2000008c 	.word	0x2000008c
 8000e14:	200000a2 	.word	0x200000a2
 8000e18:	200000a3 	.word	0x200000a3
 8000e1c:	2000009c 	.word	0x2000009c
 8000e20:	200000e8 	.word	0x200000e8
 8000e24:	20000004 	.word	0x20000004

08000e28 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	460b      	mov	r3, r1
 8000e36:	71bb      	strb	r3, [r7, #6]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	717b      	strb	r3, [r7, #5]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d119      	bne.n	8000e76 <aci_gap_proc_complete_event+0x4e>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d10c      	bne.n	8000e64 <aci_gap_proc_complete_event+0x3c>
    {
      discovery.do_connect = FALSE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = INIT_STATE;
    }
  }
}
 8000e62:	e008      	b.n	8000e76 <aci_gap_proc_complete_event+0x4e>
      discovery.check_disc_proc_timer = FALSE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
      discovery.device_state = INIT_STATE;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <aci_gap_proc_complete_event+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	821a      	strh	r2, [r3, #16]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000005c 	.word	0x2000005c

08000e88 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8000e88:	b490      	push	{r4, r7}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	71bb      	strb	r3, [r7, #6]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	70fb      	strb	r3, [r7, #3]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <hci_le_connection_complete_event+0x78>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <hci_le_connection_complete_event+0x78>)
 8000eb0:	6013      	str	r3, [r2, #0]
  discovery.check_disc_proc_timer = FALSE;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <hci_le_connection_complete_event+0x7c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <hci_le_connection_complete_event+0x7c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <hci_le_connection_complete_event+0x7c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 8000ec4:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <hci_le_connection_complete_event+0x80>)
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	8013      	strh	r3, [r2, #0]

  APP_FLAG_SET(CONNECTED);
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <hci_le_connection_complete_event+0x78>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <hci_le_connection_complete_event+0x78>)
 8000ed4:	6013      	str	r3, [r2, #0]
  discovery.device_state = INIT_STATE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <hci_le_connection_complete_event+0x7c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <hci_le_connection_complete_event+0x84>)
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	7013      	strb	r3, [r2, #0]

  PRINT_DBG("Connection Complete with peer address: ");
  for (uint8_t i=5; i>0; i--)
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e002      	b.n	8000eee <hci_le_connection_complete_event+0x66>
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f9      	bne.n	8000ee8 <hci_le_connection_complete_event+0x60>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);

}/* end hci_le_connection_complete_event() */
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc90      	pop	{r4, r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000000 	.word	0x20000000
 8000f04:	2000005c 	.word	0x2000005c
 8000f08:	20000070 	.word	0x20000070
 8000f0c:	20000005 	.word	0x20000005

08000f10 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	71bb      	strb	r3, [r7, #6]
  APP_FLAG_CLEAR(CONNECTED);
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f2c:	6013      	str	r3, [r2, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f38:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f44:	6013      	str	r3, [r2, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f50:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f5c:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f68:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f74:	6013      	str	r3, [r2, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <hci_disconnection_complete_event+0x80>)
 8000f80:	6013      	str	r3, [r2, #0]

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
  Reset_DiscoveryContext();
 8000f82:	f7ff fafd 	bl	8000580 <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000

08000f94 <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	7a1b      	ldrb	r3, [r3, #8]
 8000faa:	75bb      	strb	r3, [r7, #22]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	757b      	strb	r3, [r7, #21]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	1c9a      	adds	r2, r3, #2
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	6018      	str	r0, [r3, #0]
 8000fbe:	8892      	ldrh	r2, [r2, #4]
 8000fc0:	809a      	strh	r2, [r3, #4]

  /* BLE CentralApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d132      	bne.n	8001030 <hci_le_advertising_report_event+0x9c>
  {
    /* BLE CentralApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d12f      	bne.n	8001030 <hci_le_advertising_report_event+0x9c>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	7dbb      	ldrb	r3, [r7, #22]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fb8b 	bl	80006f4 <Find_DeviceName>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d025      	beq.n	8001030 <hci_le_advertising_report_event+0x9c>
    {
      int8_t i8Rssi = Advertising_Report[0].RSSI;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	7c1b      	ldrb	r3, [r3, #16]
 8000fe8:	753b      	strb	r3, [r7, #20]

      APP__vUpdateDetectRange(i8Rssi);
 8000fea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd76 	bl	8000ae0 <APP__vUpdateDetectRange>

      if( APP__enDetectRange == APP_RANGE_NEAR )
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <hci_le_advertising_report_event+0xa8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d119      	bne.n	8001030 <hci_le_advertising_report_event+0x9c>
      {
        discovery.is_device_found = TRUE;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	709a      	strb	r2, [r3, #2]
        discovery.do_connect = TRUE;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 8001004:	2201      	movs	r2, #1
 8001006:	70da      	strb	r2, [r3, #3]
        discovery.check_disc_proc_timer = FALSE;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	705a      	strb	r2, [r3, #1]
        /* store first device found:  address type and address value */
        discovery.device_found_address_type = bdaddr_type;
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 8001016:	7d7b      	ldrb	r3, [r7, #21]
 8001018:	7213      	strb	r3, [r2, #8]
        BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 800101c:	3309      	adds	r3, #9
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	6810      	ldr	r0, [r2, #0]
 8001024:	6018      	str	r0, [r3, #0]
 8001026:	8892      	ldrh	r2, [r2, #4]
 8001028:	809a      	strh	r2, [r3, #4]
        /* device is found: terminate discovery procedure */
        discovery.device_state = DO_TERMINATE_GAP_PROC;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <hci_le_advertising_report_event+0xa4>)
 800102c:	2220      	movs	r2, #32
 800102e:	821a      	strh	r2, [r3, #16]
        PRINT_DBG("Device found\r\n");
      }

    }
  }
} /* hci_le_advertising_report_event() */
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000005c 	.word	0x2000005c
 800103c:	20000004 	.word	0x20000004

08001040 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	4611      	mov	r1, r2
 800104c:	461a      	mov	r2, r3
 800104e:	4623      	mov	r3, r4
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	4603      	mov	r3, r0
 8001054:	80bb      	strh	r3, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	807b      	strh	r3, [r7, #2]
 800105a:	4613      	mov	r3, r2
 800105c:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	b2d9      	uxtb	r1, r3
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fb78 	bl	800075c <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4603      	mov	r3, r0
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	460b      	mov	r3, r1
 8001082:	81bb      	strh	r3, [r7, #12]
 8001084:	4613      	mov	r3, r2
 8001086:	72fb      	strb	r3, [r7, #11]
  if(Attribute_Handle == tx_handle+1)
 8001088:	89ba      	ldrh	r2, [r7, #12]
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <aci_gatt_notification_event+0x34>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	429a      	cmp	r2, r3
 8001092:	d104      	bne.n	800109e <aci_gatt_notification_event+0x2a>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fa5d 	bl	8000558 <receiveData>
  }
} /* end aci_gatt_notification_event() */
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000009c 	.word	0x2000009c

080010ac <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4603      	mov	r3, r0
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	460b      	mov	r3, r1
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	4613      	mov	r3, r2
 80010be:	72fb      	strb	r3, [r7, #11]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <aci_gatt_disc_read_char_by_uuid_resp_event+0x60>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <aci_gatt_disc_read_char_by_uuid_resp_event+0x60>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <aci_gatt_disc_read_char_by_uuid_resp_event+0x34>
  {
    tx_handle = Attribute_Handle;
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <aci_gatt_disc_read_char_by_uuid_resp_event+0x64>)
 80010da:	89bb      	ldrh	r3, [r7, #12]
 80010dc:	8013      	strh	r3, [r2, #0]
      //   BSP_LED_Toggle(LED2);
      //   HAL_Delay(250);
      // }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 80010de:	e00e      	b.n	80010fe <aci_gatt_disc_read_char_by_uuid_resp_event+0x52>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <aci_gatt_disc_read_char_by_uuid_resp_event+0x60>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <aci_gatt_disc_read_char_by_uuid_resp_event+0x52>
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <aci_gatt_disc_read_char_by_uuid_resp_event+0x60>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <aci_gatt_disc_read_char_by_uuid_resp_event+0x52>
      rx_handle = Attribute_Handle;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <aci_gatt_disc_read_char_by_uuid_resp_event+0x68>)
 80010fa:	89bb      	ldrh	r3, [r7, #12]
 80010fc:	8013      	strh	r3, [r2, #0]
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000
 8001110:	2000009c 	.word	0x2000009c
 8001114:	2000009e 	.word	0x2000009e

08001118 <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	80fb      	strh	r3, [r7, #6]
 8001124:	4613      	mov	r3, r2
 8001126:	717b      	strb	r3, [r7, #5]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <aci_gatt_proc_complete_event+0x36>
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <aci_gatt_proc_complete_event+0x36>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 800114a:	6013      	str	r3, [r2, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 800114c:	e011      	b.n	8001172 <aci_gatt_proc_complete_event+0x5a>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <aci_gatt_proc_complete_event+0x5a>
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <aci_gatt_proc_complete_event+0x5a>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <aci_gatt_proc_complete_event+0x68>)
 8001170:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_proc_complete_event() */
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000

08001184 <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	80fb      	strh	r3, [r7, #6]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <aci_gatt_tx_pool_available_event+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <aci_gatt_tx_pool_available_event+0x28>)
 800119e:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_tx_pool_available_event() */
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000000 	.word	0x20000000

080011b0 <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	80bb      	strh	r3, [r7, #4]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	2b9e      	cmp	r3, #158	; 0x9e
 80011c4:	d805      	bhi.n	80011d2 <aci_att_exchange_mtu_resp_event+0x22>
    write_char_len = Server_RX_MTU - 3;
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <aci_att_exchange_mtu_resp_event+0x58>)
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	e002      	b.n	80011d8 <aci_att_exchange_mtu_resp_event+0x28>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <aci_att_exchange_mtu_resp_event+0x58>)
 80011d4:	229b      	movs	r2, #155	; 0x9b
 80011d6:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <aci_att_exchange_mtu_resp_event+0x5c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <aci_att_exchange_mtu_resp_event+0x38>
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <aci_att_exchange_mtu_resp_event+0x5c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d109      	bne.n	80011fc <aci_att_exchange_mtu_resp_event+0x4c>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <aci_att_exchange_mtu_resp_event+0x5c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <aci_att_exchange_mtu_resp_event+0x46>
      mtu_exchanged_wait = 2;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <aci_att_exchange_mtu_resp_event+0x5c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <aci_att_exchange_mtu_resp_event+0x60>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
  }
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000006 	.word	0x20000006
 800120c:	200000a3 	.word	0x200000a3
 8001210:	200000a2 	.word	0x200000a2

08001214 <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b095      	sub	sp, #84	; 0x54
 8001218:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800121a:	2306      	movs	r3, #6
 800121c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <Add_Sample_Service+0xf8>)
 8001222:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800122c:	4b38      	ldr	r3, [pc, #224]	; (8001310 <Add_Sample_Service+0xfc>)
 800122e:	f107 0414 	add.w	r4, r7, #20
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <Add_Sample_Service+0x100>)
 800123a:	1d3c      	adds	r4, r7, #4
 800123c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <Add_Sample_Service+0x104>)
 8001244:	461c      	mov	r4, r3
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 8001250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <Add_Sample_Service+0x108>)
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	492f      	ldr	r1, [pc, #188]	; (8001318 <Add_Sample_Service+0x104>)
 800125c:	2002      	movs	r0, #2
 800125e:	f004 fc39 	bl	8005ad4 <aci_gatt_add_service>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001268:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800126c:	2b00      	cmp	r3, #0
 800126e:	d142      	bne.n	80012f6 <Add_Sample_Service+0xe2>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <Add_Sample_Service+0x10c>)
 8001272:	461c      	mov	r4, r3
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <Add_Sample_Service+0x108>)
 8001280:	8818      	ldrh	r0, [r3, #0]
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <Add_Sample_Service+0x110>)
 8001284:	9305      	str	r3, [sp, #20]
 8001286:	2301      	movs	r3, #1
 8001288:	9304      	str	r3, [sp, #16]
 800128a:	2310      	movs	r3, #16
 800128c:	9303      	str	r3, [sp, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2310      	movs	r3, #16
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	233f      	movs	r3, #63	; 0x3f
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <Add_Sample_Service+0x10c>)
 800129e:	2102      	movs	r1, #2
 80012a0:	f004 fcee 	bl	8005c80 <aci_gatt_add_char>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d123      	bne.n	80012fa <Add_Sample_Service+0xe6>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <Add_Sample_Service+0x10c>)
 80012b4:	461c      	mov	r4, r3
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <Add_Sample_Service+0x108>)
 80012c0:	8818      	ldrh	r0, [r3, #0]
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <Add_Sample_Service+0x114>)
 80012c4:	9305      	str	r3, [sp, #20]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9304      	str	r3, [sp, #16]
 80012ca:	2310      	movs	r3, #16
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	230c      	movs	r3, #12
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	233f      	movs	r3, #63	; 0x3f
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <Add_Sample_Service+0x10c>)
 80012de:	2102      	movs	r1, #2
 80012e0:	f004 fcce 	bl	8005c80 <aci_gatt_add_char>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <Add_Sample_Service+0xea>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e005      	b.n	8001302 <Add_Sample_Service+0xee>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012f6:	bf00      	nop
 80012f8:	e002      	b.n	8001300 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012fa:	bf00      	nop
 80012fc:	e000      	b.n	8001300 <Add_Sample_Service+0xec>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012fe:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
  return BLE_STATUS_ERROR ;
 8001300:	2347      	movs	r3, #71	; 0x47
}
 8001302:	4618      	mov	r0, r3
 8001304:	373c      	adds	r7, #60	; 0x3c
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	08008440 	.word	0x08008440
 8001310:	08008450 	.word	0x08008450
 8001314:	08008460 	.word	0x08008460
 8001318:	200000f4 	.word	0x200000f4
 800131c:	200000ec 	.word	0x200000ec
 8001320:	20000104 	.word	0x20000104
 8001324:	200000ee 	.word	0x200000ee
 8001328:	200000f0 	.word	0x200000f0

0800132c <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d163      	bne.n	8001408 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b3e      	cmp	r3, #62	; 0x3e
 800134c:	d11e      	bne.n	800138c <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3302      	adds	r3, #2
 8001352:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e014      	b.n	8001384 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b29a      	uxth	r2, r3
 8001360:	492b      	ldr	r1, [pc, #172]	; (8001410 <APP_UserEvtRx+0xe4>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001368:	429a      	cmp	r2, r3
 800136a:	d108      	bne.n	800137e <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <APP_UserEvtRx+0xe4>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	3201      	adds	r2, #1
 800137a:	4610      	mov	r0, r2
 800137c:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d9e7      	bls.n	800135a <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800138a:	e03d      	b.n	8001408 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d11e      	bne.n	80013d2 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3302      	adds	r3, #2
 8001398:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e014      	b.n	80013ca <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	491b      	ldr	r1, [pc, #108]	; (8001414 <APP_UserEvtRx+0xe8>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d108      	bne.n	80013c4 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <APP_UserEvtRx+0xe8>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	3202      	adds	r2, #2
 80013c0:	4610      	mov	r0, r2
 80013c2:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b2a      	cmp	r3, #42	; 0x2a
 80013ce:	d9e7      	bls.n	80013a0 <APP_UserEvtRx+0x74>
}
 80013d0:	e01a      	b.n	8001408 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e014      	b.n	8001402 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <APP_UserEvtRx+0xec>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d108      	bne.n	80013fc <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <APP_UserEvtRx+0xec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	3202      	adds	r2, #2
 80013f8:	4610      	mov	r0, r2
 80013fa:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3301      	adds	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d9e7      	bls.n	80013d8 <APP_UserEvtRx+0xac>
}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08008514 	.word	0x08008514
 8001414:	08008564 	.word	0x08008564
 8001418:	080084dc 	.word	0x080084dc

0800141c <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001420:	2006      	movs	r0, #6
 8001422:	f001 f808 	bl	8002436 <HAL_NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}

0800142a <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800142e:	2006      	movs	r0, #6
 8001430:	f001 f80f 	bl	8002452 <HAL_NVIC_DisableIRQ>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HCI_TL_SPI_Init+0x94>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HCI_TL_SPI_Init+0x94>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HCI_TL_SPI_Init+0x94>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f001 f868 	bl	8002544 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f001 f858 	bl	8002544 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001494:	2302      	movs	r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f001 f849 	bl	8002544 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2102      	movs	r1, #2
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 faf9 	bl	8002ab0 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80014be:	f000 fcf1 	bl	8001ea4 <BSP_SPI1_Init>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000

080014d0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80014d4:	2101      	movs	r1, #1
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f001 f9dd 	bl	8002898 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80014de:	2102      	movs	r1, #2
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f001 f9d8 	bl	8002898 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80014e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f001 f9d2 	bl	8002898 <HAL_GPIO_DeInit>
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2102      	movs	r1, #2
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f001 fad3 	bl	8002ab0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f001 facc 	bl	8002ab0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001518:	2005      	movs	r0, #5
 800151a:	f000 fe4d 	bl	80021b8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f001 fac2 	bl	8002ab0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800152c:	2005      	movs	r0, #5
 800152e:	f000 fe43 	bl	80021b8 <HAL_Delay>
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}

08001538 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8001548:	2300      	movs	r3, #0
 800154a:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800154c:	4a32      	ldr	r2, [pc, #200]	; (8001618 <HCI_TL_SPI_Receive+0xe0>)
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001556:	6018      	str	r0, [r3, #0]
 8001558:	3304      	adds	r3, #4
 800155a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 800155c:	f7ff ff65 	bl	800142a <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2102      	movs	r1, #2
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f001 faa2 	bl	8002ab0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800156c:	f107 0108 	add.w	r1, r7, #8
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2205      	movs	r2, #5
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fcc4 	bl	8001f04 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800157c:	7b3b      	ldrb	r3, [r7, #12]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800158c:	8bfb      	ldrh	r3, [r7, #30]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01e      	beq.n	80015d0 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8001592:	8bfa      	ldrh	r2, [r7, #30]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	429a      	cmp	r2, r3
 8001598:	d901      	bls.n	800159e <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800159e:	2300      	movs	r3, #0
 80015a0:	777b      	strb	r3, [r7, #29]
 80015a2:	e010      	b.n	80015c6 <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80015a4:	f107 0116 	add.w	r1, r7, #22
 80015a8:	f107 0317 	add.w	r3, r7, #23
 80015ac:	2201      	movs	r2, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fca8 	bl	8001f04 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80015b4:	7f7b      	ldrb	r3, [r7, #29]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	7dba      	ldrb	r2, [r7, #22]
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80015c0:	7f7b      	ldrb	r3, [r7, #29]
 80015c2:	3301      	adds	r3, #1
 80015c4:	777b      	strb	r3, [r7, #29]
 80015c6:	7f7b      	ldrb	r3, [r7, #29]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	8bfa      	ldrh	r2, [r7, #30]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8e9      	bhi.n	80015a4 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f000 fde6 	bl	80021a0 <HAL_GetTick>
 80015d4:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80015d6:	e007      	b.n	80015e8 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80015d8:	2101      	movs	r1, #1
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f001 fa4f 	bl	8002a80 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80015e8:	f000 fdda 	bl	80021a0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f6:	d3ef      	bcc.n	80015d8 <HCI_TL_SPI_Receive+0xa0>
 80015f8:	e000      	b.n	80015fc <HCI_TL_SPI_Receive+0xc4>
      break;
 80015fa:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80015fc:	f7ff ff0e 	bl	800141c <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2102      	movs	r1, #2
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fa52 	bl	8002ab0 <HAL_GPIO_WritePin>

  return len;
 800160c:	7f7b      	ldrb	r3, [r7, #29]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08008470 	.word	0x08008470

0800161c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HCI_TL_SPI_Send+0x114>)
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001632:	6018      	str	r0, [r3, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001638:	f000 fdb2 	bl	80021a0 <HAL_GetTick>
 800163c:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800163e:	f7ff fef4 	bl	800142a <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001642:	f000 fdad 	bl	80021a0 <HAL_GetTick>
 8001646:	61f8      	str	r0, [r7, #28]

    result = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f001 fa2c 	bl	8002ab0 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8001658:	e00a      	b.n	8001670 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 800165a:	f000 fda1 	bl	80021a0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d903      	bls.n	8001670 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8001668:	f06f 0302 	mvn.w	r3, #2
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800166e:	e004      	b.n	800167a <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8001670:	f000 f862 	bl	8001738 <IsDataAvailable>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ef      	beq.n	800165a <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f113 0f03 	cmn.w	r3, #3
 8001680:	d106      	bne.n	8001690 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2102      	movs	r1, #2
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f001 fa11 	bl	8002ab0 <HAL_GPIO_WritePin>
      break;
 800168e:	e031      	b.n	80016f4 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2205      	movs	r2, #5
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fc32 	bl	8001f04 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80016b0:	8b7a      	ldrh	r2, [r7, #26]
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d306      	bcc.n	80016c6 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	461a      	mov	r2, r3
 80016bc:	491d      	ldr	r1, [pc, #116]	; (8001734 <HCI_TL_SPI_Send+0x118>)
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fc20 	bl	8001f04 <BSP_SPI1_SendRecv>
 80016c4:	e002      	b.n	80016cc <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80016c6:	f06f 0301 	mvn.w	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f001 f9ec 	bl	8002ab0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80016d8:	f000 fd62 	bl	80021a0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d903      	bls.n	80016ee <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 80016e6:	f06f 0302 	mvn.w	r3, #2
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80016ec:	e002      	b.n	80016f4 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	dba6      	blt.n	8001642 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80016f4:	f000 fd54 	bl	80021a0 <HAL_GetTick>
 80016f8:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80016fa:	e007      	b.n	800170c <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80016fc:	2101      	movs	r1, #1
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f001 f9bd 	bl	8002a80 <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800170c:	f000 fd48 	bl	80021a0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171a:	d3ef      	bcc.n	80016fc <HCI_TL_SPI_Send+0xe0>
 800171c:	e000      	b.n	8001720 <HCI_TL_SPI_Send+0x104>
      break;
 800171e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001720:	f7ff fe7c 	bl	800141c <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001726:	4618      	mov	r0, r3
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08008478 	.word	0x08008478
 8001734:	2000011c 	.word	0x2000011c

08001738 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800173c:	2101      	movs	r1, #1
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f001 f99d 	bl	8002a80 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <hci_tl_lowlevel_init+0x54>)
 8001760:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <hci_tl_lowlevel_init+0x58>)
 8001764:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <hci_tl_lowlevel_init+0x5c>)
 8001768:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <hci_tl_lowlevel_init+0x60>)
 800176c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <hci_tl_lowlevel_init+0x64>)
 8001770:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <hci_tl_lowlevel_init+0x68>)
 8001774:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f006 fb2f 	bl	8007ddc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800177e:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <hci_tl_lowlevel_init+0x6c>)
 8001784:	f000 fe99 	bl	80024ba <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <hci_tl_lowlevel_init+0x70>)
 800178a:	2100      	movs	r1, #0
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <hci_tl_lowlevel_init+0x6c>)
 800178e:	f000 fe7a 	bl	8002486 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2006      	movs	r0, #6
 8001798:	f000 fe31 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800179c:	2006      	movs	r0, #6
 800179e:	f000 fe4a 	bl	8002436 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08001439 	.word	0x08001439
 80017b0:	080014d1 	.word	0x080014d1
 80017b4:	0800161d 	.word	0x0800161d
 80017b8:	08001539 	.word	0x08001539
 80017bc:	080014fb 	.word	0x080014fb
 80017c0:	08001f45 	.word	0x08001f45
 80017c4:	20000114 	.word	0x20000114
 80017c8:	080017cd 	.word	0x080017cd

080017cc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80017d0:	e005      	b.n	80017de <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80017d2:	2000      	movs	r0, #0
 80017d4:	f006 fc66 	bl	80080a4 <hci_notify_asynch_evt>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80017de:	f7ff ffab 	bl	8001738 <IsDataAvailable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f4      	bne.n	80017d2 <hci_tl_lowlevel_isr+0x6>
 80017e8:	e000      	b.n	80017ec <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80017ea:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80017ec:	bd80      	pop	{r7, pc}

080017ee <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0

  HAL_Init();
 80017f2:	f000 fc65 	bl	80020c0 <HAL_Init>
  SystemClock_Config();
 80017f6:	f000 f807 	bl	8001808 <SystemClock_Config>

  MX_GPIO_Init();
 80017fa:	f000 f857 	bl	80018ac <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 80017fe:	f7fe fe8b 	bl	8000518 <MX_BlueNRG_2_Init>

  while (1)
  {
    MX_BlueNRG_2_Process();
 8001802:	f7fe fea1 	bl	8000548 <MX_BlueNRG_2_Process>
 8001806:	e7fc      	b.n	8001802 <main+0x14>

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b096      	sub	sp, #88	; 0x58
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2244      	movs	r2, #68	; 0x44
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fdb7 	bl	800838a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800182a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800182e:	f001 f97f 	bl	8002b30 <HAL_PWREx_ControlVoltageScaling>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001838:	f000 f8ae 	bl	8001998 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001844:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001846:	2310      	movs	r3, #16
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800184e:	2302      	movs	r3, #2
 8001850:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001856:	2308      	movs	r3, #8
 8001858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800185a:	2307      	movs	r3, #7
 800185c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800185e:	2302      	movs	r3, #2
 8001860:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f9b6 	bl	8002bdc <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001876:	f000 f88f 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	2303      	movs	r3, #3
 8001880:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	2103      	movs	r1, #3
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fd8a 	bl	80033ac <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800189e:	f000 f87b 	bl	8001998 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3758      	adds	r7, #88	; 0x58
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a33      	ldr	r2, [pc, #204]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a27      	ldr	r2, [pc, #156]	; (8001994 <MX_GPIO_Init+0xe8>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <MX_GPIO_Init+0xe8>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_GPIO_Init+0xe8>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <MX_GPIO_Init+0xe8>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_GPIO_Init+0xe8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 f8c0 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001930:	2301      	movs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001934:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f000 fdfc 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 800194c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f000 fdec 	bl	8002544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2006      	movs	r0, #6
 8001972:	f000 fd44 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001976:	2006      	movs	r0, #6
 8001978:	f000 fd5d 	bl	8002436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2028      	movs	r0, #40	; 0x28
 8001982:	f000 fd3c 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001986:	2028      	movs	r0, #40	; 0x28
 8001988:	f000 fd55 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_MspInit+0x44>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_MspInit+0x44>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6613      	str	r3, [r2, #96]	; 0x60
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_MspInit+0x44>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x44>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x44>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x44>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 fb9e 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <EXTI0_IRQHandler+0x10>)
 8001a46:	f000 fd4d 	bl	80024e4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000114 	.word	0x20000114

08001a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <EXTI15_10_IRQHandler+0x10>)
 8001a5a:	f000 fd43 	bl	80024e4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000024 	.word	0x20000024

08001a68 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <BSP_LED_Init+0x20>)
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	08008480 	.word	0x08008480

08001a8c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <BSP_LED_On+0x28>)
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f804 	bl	8002ab0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000001c 	.word	0x2000001c

08001ab8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <BSP_LED_Off+0x28>)
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	2120      	movs	r1, #32
 8001acc:	2200      	movs	r2, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 ffee 	bl	8002ab0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000001c 	.word	0x2000001c

08001ae4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <BSP_LED_Toggle+0x28>)
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	2220      	movs	r2, #32
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fff0 	bl	8002ae0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000001c 	.word	0x2000001c

08001b10 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <LED_USER_GPIO_Init+0x78>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f000 ffa7 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001b62:	2320      	movs	r3, #32
 8001b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f000 fce2 	bl	8002544 <HAL_GPIO_Init>

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000

08001b8c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <BSP_PB_Init+0x94>)
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d132      	bne.n	8001c16 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <BSP_PB_Init+0x98>)
 8001bb6:	441a      	add	r2, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	491b      	ldr	r1, [pc, #108]	; (8001c28 <BSP_PB_Init+0x9c>)
 8001bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 fc79 	bl	80024ba <HAL_EXTI_GetHandle>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bce:	f06f 0303 	mvn.w	r3, #3
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e01f      	b.n	8001c16 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <BSP_PB_Init+0x98>)
 8001bdc:	1898      	adds	r0, r3, r2
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <BSP_PB_Init+0xa0>)
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	461a      	mov	r2, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	f000 fc4c 	bl	8002486 <HAL_EXTI_RegisterCallback>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bf4:	f06f 0303 	mvn.w	r3, #3
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e00c      	b.n	8001c16 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bfc:	2028      	movs	r0, #40	; 0x28
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <BSP_PB_Init+0xa4>)
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f000 fbf8 	bl	80023fe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c0e:	2328      	movs	r3, #40	; 0x28
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fc10 	bl	8002436 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08008484 	.word	0x08008484
 8001c24:	20000024 	.word	0x20000024
 8001c28:	08008488 	.word	0x08008488
 8001c2c:	0800848c 	.word	0x0800848c
 8001c30:	08008490 	.word	0x08008490

08001c34 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <BSP_PB_GetState+0x34>)
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 ff17 	bl	8002a80 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000020 	.word	0x20000020

08001c6c <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fff0 	bl	8001c6c <BSP_PB_Callback>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <BUTTON_USER_GPIO_Init+0x6c>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cdc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <BUTTON_USER_GPIO_Init+0x70>)
 8001cee:	f000 fc29 	bl	8002544 <HAL_GPIO_Init>

}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000800 	.word	0x48000800

08001d04 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d903      	bls.n	8001d20 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d18:	f06f 0301 	mvn.w	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e025      	b.n	8001d6c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	4914      	ldr	r1, [pc, #80]	; (8001d78 <BSP_COM_Init+0x74>)
 8001d26:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <BSP_COM_Init+0x78>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4403      	add	r3, r0
 8001d36:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <BSP_COM_Init+0x78>)
 8001d44:	4413      	add	r3, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f84e 	bl	8001de8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	015b      	lsls	r3, r3, #5
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <BSP_COM_Init+0x78>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f810 	bl	8001d80 <MX_USART2_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d66:	f06f 0303 	mvn.w	r3, #3
 8001d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000002c 	.word	0x2000002c
 8001d7c:	2000021c 	.word	0x2000021c

08001d80 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <MX_USART2_UART_Init+0x64>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d98:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f002 fde2 	bl	8004994 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40004400 	.word	0x40004400

08001de8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0ac      	sub	sp, #176	; 0xb0
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2288      	movs	r2, #136	; 0x88
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f006 fac6 	bl	800838a <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fcd4 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <USART2_MspInit+0xb8>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001e40:	2304      	movs	r3, #4
 8001e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001e5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 fb6c 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001e84:	2307      	movs	r3, #7
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001e8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e94:	f000 fb56 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	37b0      	adds	r7, #176	; 0xb0
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <BSP_SPI1_Init+0x54>)
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <BSP_SPI1_Init+0x58>)
 8001eb2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <BSP_SPI1_Init+0x5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4911      	ldr	r1, [pc, #68]	; (8001f00 <BSP_SPI1_Init+0x5c>)
 8001ebc:	600a      	str	r2, [r1, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d114      	bne.n	8001eec <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <BSP_SPI1_Init+0x54>)
 8001ec4:	f002 fbf4 	bl	80046b0 <HAL_SPI_GetState>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10e      	bne.n	8001eec <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001ece:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <BSP_SPI1_Init+0x54>)
 8001ed0:	f000 f882 	bl	8001fd8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <BSP_SPI1_Init+0x54>)
 8001edc:	f000 f83a 	bl	8001f54 <MX_SPI1_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001ee6:	f06f 0307 	mvn.w	r3, #7
 8001eea:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002a0 	.word	0x200002a0
 8001efc:	40013000 	.word	0x40013000
 8001f00:	20000304 	.word	0x20000304

08001f04 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <BSP_SPI1_SendRecv+0x3c>)
 8001f24:	f002 f9b1 	bl	800428a <HAL_SPI_TransmitReceive>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001f2e:	f06f 0305 	mvn.w	r3, #5
 8001f32:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001f34:	697b      	ldr	r3, [r7, #20]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002a0 	.word	0x200002a0

08001f44 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f48:	f000 f92a 	bl	80021a0 <HAL_GetTick>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <MX_SPI1_Init+0x80>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f6c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f7a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2228      	movs	r2, #40	; 0x28
 8001f94:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2207      	movs	r2, #7
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f002 f8b8 	bl	8004130 <HAL_SPI_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <SPI1_MspInit+0xbc>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <SPI1_MspInit+0xbc>)
 8001fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fea:	6613      	str	r3, [r2, #96]	; 0x60
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <SPI1_MspInit+0xbc>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <SPI1_MspInit+0xbc>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <SPI1_MspInit+0xbc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <SPI1_MspInit+0xbc>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <SPI1_MspInit+0xbc>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <SPI1_MspInit+0xbc>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <SPI1_MspInit+0xbc>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002038:	2305      	movs	r3, #5
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f000 fa7d 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800205a:	2305      	movs	r3, #5
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f000 fa6c 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800206c:	2308      	movs	r3, #8
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800207c:	2305      	movs	r3, #5
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4804      	ldr	r0, [pc, #16]	; (8002098 <SPI1_MspInit+0xc0>)
 8002088:	f000 fa5c 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	48000400 	.word	0x48000400

0800209c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_Init+0x3c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_Init+0x3c>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d6:	2003      	movs	r0, #3
 80020d8:	f000 f986 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f80f 	bl	8002100 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	e001      	b.n	80020f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ee:	f7ff fc59 	bl	80019a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_InitTick+0x6c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_InitTick+0x70>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_InitTick+0x6c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f99f 	bl	800246e <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d809      	bhi.n	8002150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 f95b 	bl	80023fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_InitTick+0x74>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e007      	b.n	8002160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e004      	b.n	8002160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	e001      	b.n	8002160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000038 	.word	0x20000038
 8002170:	20000030 	.word	0x20000030
 8002174:	20000034 	.word	0x20000034

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000038 	.word	0x20000038
 800219c:	20000308 	.word	0x20000308

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000308 	.word	0x20000308

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000038 	.word	0x20000038

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db12      	blt.n	80022d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	490a      	ldr	r1, [pc, #40]	; (80022e4 <__NVIC_DisableIRQ+0x44>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	3320      	adds	r3, #32
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022cc:	f3bf 8f4f 	dsb	sy
}
 80022d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022d2:	f3bf 8f6f 	isb	sy
}
 80022d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff05 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff1a 	bl	8002248 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff0d 	bl	8002264 <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff1d 	bl	80022a0 <__NVIC_DisableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff94 	bl	80023a4 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002486:	b480      	push	{r7}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	460b      	mov	r3, r1
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	605a      	str	r2, [r3, #4]
      break;
 80024a4:	e002      	b.n	80024ac <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
      break;
 80024aa:	bf00      	nop
  }

  return status;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e003      	b.n	80024d6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2201      	movs	r2, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_EXTI_IRQHandler+0x5c>)
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4798      	blx	r3
    }
  }
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40010414 	.word	0x40010414

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e17f      	b.n	8002854 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8171 	beq.w	800284e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_GPIO_Init+0x40>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d118      	bne.n	8002624 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	6939      	ldr	r1, [r7, #16]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80ac 	beq.w	800284e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b5f      	ldr	r3, [pc, #380]	; (8002874 <HAL_GPIO_Init+0x330>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	4a5e      	ldr	r2, [pc, #376]	; (8002874 <HAL_GPIO_Init+0x330>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6613      	str	r3, [r2, #96]	; 0x60
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <HAL_GPIO_Init+0x330>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800270e:	4a5a      	ldr	r2, [pc, #360]	; (8002878 <HAL_GPIO_Init+0x334>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x242>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4f      	ldr	r2, [pc, #316]	; (800287c <HAL_GPIO_Init+0x338>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x23e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4e      	ldr	r2, [pc, #312]	; (8002880 <HAL_GPIO_Init+0x33c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x23a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_GPIO_Init+0x340>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x236>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <HAL_GPIO_Init+0x344>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x232>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_GPIO_Init+0x348>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x22e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_GPIO_Init+0x34c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x22a>
 800276a:	2306      	movs	r3, #6
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800276e:	2307      	movs	r3, #7
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002786:	2300      	movs	r3, #0
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002798:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_GPIO_Init+0x334>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800281e:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_GPIO_Init+0x350>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	f47f ae78 	bne.w	8002554 <HAL_GPIO_Init+0x10>
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	48000400 	.word	0x48000400
 8002880:	48000800 	.word	0x48000800
 8002884:	48000c00 	.word	0x48000c00
 8002888:	48001000 	.word	0x48001000
 800288c:	48001400 	.word	0x48001400
 8002890:	48001800 	.word	0x48001800
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80028a6:	e0cd      	b.n	8002a44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80028a8:	2201      	movs	r2, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80c0 	beq.w	8002a3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80028be:	4a68      	ldr	r2, [pc, #416]	; (8002a60 <HAL_GPIO_DeInit+0x1c8>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028e6:	d025      	beq.n	8002934 <HAL_GPIO_DeInit+0x9c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a5e      	ldr	r2, [pc, #376]	; (8002a64 <HAL_GPIO_DeInit+0x1cc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01f      	beq.n	8002930 <HAL_GPIO_DeInit+0x98>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_GPIO_DeInit+0x1d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d019      	beq.n	800292c <HAL_GPIO_DeInit+0x94>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_GPIO_DeInit+0x1d4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_GPIO_DeInit+0x90>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <HAL_GPIO_DeInit+0x1d8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00d      	beq.n	8002924 <HAL_GPIO_DeInit+0x8c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <HAL_GPIO_DeInit+0x1dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_GPIO_DeInit+0x88>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a59      	ldr	r2, [pc, #356]	; (8002a78 <HAL_GPIO_DeInit+0x1e0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_GPIO_DeInit+0x84>
 8002918:	2306      	movs	r3, #6
 800291a:	e00c      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 800291c:	2307      	movs	r3, #7
 800291e:	e00a      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 8002920:	2305      	movs	r3, #5
 8002922:	e008      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 8002924:	2304      	movs	r3, #4
 8002926:	e006      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 8002928:	2303      	movs	r3, #3
 800292a:	e004      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 800292c:	2302      	movs	r3, #2
 800292e:	e002      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_GPIO_DeInit+0x9e>
 8002934:	2300      	movs	r3, #0
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4093      	lsls	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	429a      	cmp	r2, r3
 8002944:	d132      	bne.n	80029ac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002946:	4b4d      	ldr	r3, [pc, #308]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	494b      	ldr	r1, [pc, #300]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 8002950:	4013      	ands	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	43db      	mvns	r3, r3
 800295c:	4947      	ldr	r1, [pc, #284]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 800295e:	4013      	ands	r3, r2
 8002960:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002962:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	4944      	ldr	r1, [pc, #272]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 800296c:	4013      	ands	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	4940      	ldr	r1, [pc, #256]	; (8002a7c <HAL_GPIO_DeInit+0x1e4>)
 800297a:	4013      	ands	r3, r2
 800297c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800298e:	4a34      	ldr	r2, [pc, #208]	; (8002a60 <HAL_GPIO_DeInit+0x1c8>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43da      	mvns	r2, r3
 800299e:	4830      	ldr	r0, [pc, #192]	; (8002a60 <HAL_GPIO_DeInit+0x1c8>)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	400a      	ands	r2, r1
 80029a6:	3302      	adds	r3, #2
 80029a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2103      	movs	r1, #3
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	08da      	lsrs	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3208      	adds	r2, #8
 80029c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	08d2      	lsrs	r2, r2, #3
 80029e0:	4019      	ands	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2103      	movs	r1, #3
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	2101      	movs	r1, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	2101      	movs	r1, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af2b 	bne.w	80028a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	48001000 	.word	0x48001000
 8002a74:	48001400 	.word	0x48001400
 8002a78:	48001800 	.word	0x48001800
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e001      	b.n	8002aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43d9      	mvns	r1, r3
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40007000 	.word	0x40007000

08002b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3e:	d130      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d038      	beq.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2232      	movs	r2, #50	; 0x32
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b74:	e002      	b.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b88:	d102      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f2      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d110      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d007      	beq.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bb8:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	20000030 	.word	0x20000030
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e3d8      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b97      	ldr	r3, [pc, #604]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b94      	ldr	r3, [pc, #592]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80e4 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4a>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f040 808b 	bne.w	8002d34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8087 	bne.w	8002d34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x62>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e3b0      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4b82      	ldr	r3, [pc, #520]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_RCC_OscConfig+0x7c>
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c56:	e005      	b.n	8002c64 <HAL_RCC_OscConfig+0x88>
 8002c58:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d223      	bcs.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fd43 	bl	80036f8 <RCC_SetFlashLatencyFromMSIRange>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e391      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	496d      	ldr	r1, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4968      	ldr	r1, [pc, #416]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
 8002cae:	e025      	b.n	8002cfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb0:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4960      	ldr	r1, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	495b      	ldr	r1, [pc, #364]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fd03 	bl	80036f8 <RCC_SetFlashLatencyFromMSIRange>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e351      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfc:	f000 fc38 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b52      	ldr	r3, [pc, #328]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	4950      	ldr	r1, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f9ed 	bl	8002100 <HAL_InitTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d052      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	e335      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d032      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d48:	f7ff fa2a 	bl	80021a0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d50:	f7ff fa26 	bl	80021a0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e31e      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a36      	ldr	r2, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4931      	ldr	r1, [pc, #196]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	492c      	ldr	r1, [pc, #176]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	e01a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dae:	f7ff f9f7 	bl	80021a0 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db6:	f7ff f9f3 	bl	80021a0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e2eb      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x1da>
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d074      	beq.n	8002ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x21a>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d10e      	bne.n	8002e0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d10b      	bne.n	8002e0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d064      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d160      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e2c8      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x24a>
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e026      	b.n	8002e74 <HAL_RCC_OscConfig+0x298>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_OscConfig+0x280>
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x298>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08008494 	.word	0x08008494
 8002e54:	20000030 	.word	0x20000030
 8002e58:	20000034 	.word	0x20000034
 8002e5c:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a9f      	ldr	r2, [pc, #636]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b9d      	ldr	r3, [pc, #628]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9c      	ldr	r2, [pc, #624]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f990 	bl	80021a0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff f98c 	bl	80021a0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e284      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x2a8>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f97c 	bl	80021a0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7ff f978 	bl	80021a0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e270      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x2d0>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d060      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x310>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d116      	bne.n	8002f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x328>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e24d      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4973      	ldr	r1, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	e040      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d023      	beq.n	8002f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f937 	bl	80021a0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7ff f933 	bl	80021a0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e22b      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f48:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	495f      	ldr	r1, [pc, #380]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e018      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7ff f913 	bl	80021a0 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7ff f90f 	bl	80021a0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e207      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03c      	beq.n	8003022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01c      	beq.n	8002fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	4a4a      	ldr	r2, [pc, #296]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7ff f8ee 	bl	80021a0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7ff f8ea 	bl	80021a0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1e2      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3ec>
 8002fe8:	e01b      	b.n	8003022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f8d1 	bl	80021a0 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7ff f8cd 	bl	80021a0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1c5      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ef      	bne.n	8003002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a6 	beq.w	800317c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003074:	f7ff f894 	bl	80021a0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7ff f890 	bl	80021a0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e188      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4d8>
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b2:	e029      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d115      	bne.n	80030e8 <HAL_RCC_OscConfig+0x50c>
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	4b91      	ldr	r3, [pc, #580]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a90      	ldr	r2, [pc, #576]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a8c      	ldr	r2, [pc, #560]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7ff f846 	bl	80021a0 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7ff f842 	bl	80021a0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e138      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b80      	ldr	r3, [pc, #512]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ed      	beq.n	8003118 <HAL_RCC_OscConfig+0x53c>
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7ff f82f 	bl	80021a0 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7ff f82b 	bl	80021a0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e121      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ed      	bne.n	8003146 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 810c 	beq.w	800339e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b02      	cmp	r3, #2
 800318c:	f040 80d4 	bne.w	8003338 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003190:	4b67      	ldr	r3, [pc, #412]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d130      	bne.n	8003206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	3b01      	subs	r3, #1
 80031b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d127      	bne.n	8003206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d11f      	bne.n	8003206 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031d0:	2a07      	cmp	r2, #7
 80031d2:	bf14      	ite	ne
 80031d4:	2201      	movne	r2, #1
 80031d6:	2200      	moveq	r2, #0
 80031d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031da:	4293      	cmp	r3, r2
 80031dc:	d113      	bne.n	8003206 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	3b01      	subs	r3, #1
 8003200:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d06e      	beq.n	80032e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d069      	beq.n	80032e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800320c:	4b48      	ldr	r3, [pc, #288]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003218:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0bb      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003228:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a40      	ldr	r2, [pc, #256]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800322e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003234:	f7fe ffb4 	bl	80021a0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe ffb0 	bl	80021a0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0a8      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325a:	4b35      	ldr	r3, [pc, #212]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_RCC_OscConfig+0x758>)
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800326a:	3a01      	subs	r2, #1
 800326c:	0112      	lsls	r2, r2, #4
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003274:	0212      	lsls	r2, r2, #8
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327c:	0852      	lsrs	r2, r2, #1
 800327e:	3a01      	subs	r2, #1
 8003280:	0552      	lsls	r2, r2, #21
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003288:	0852      	lsrs	r2, r2, #1
 800328a:	3a01      	subs	r2, #1
 800328c:	0652      	lsls	r2, r2, #25
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003294:	0912      	lsrs	r2, r2, #4
 8003296:	0452      	lsls	r2, r2, #17
 8003298:	430a      	orrs	r2, r1
 800329a:	4925      	ldr	r1, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 800329c:	4313      	orrs	r3, r2
 800329e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b8:	f7fe ff72 	bl	80021a0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe ff6e 	bl	80021a0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e066      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032de:	e05e      	b.n	800339e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e05d      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d156      	bne.n	800339e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003308:	f7fe ff4a 	bl	80021a0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe ff46 	bl	80021a0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e03e      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003322:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_OscConfig+0x754>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x734>
 800332e:	e036      	b.n	800339e <HAL_RCC_OscConfig+0x7c2>
 8003330:	40021000 	.word	0x40021000
 8003334:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d02d      	beq.n	800339a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 8003344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003348:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 800335c:	f023 0303 	bic.w	r3, r3, #3
 8003360:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 8003368:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe ff15 	bl	80021a0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe ff11 	bl	80021a0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e009      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x7cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x79e>
 8003398:	e001      	b.n	800339e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0c8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4961      	ldr	r1, [pc, #388]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b0      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d04c      	beq.n	8003496 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d121      	bne.n	8003454 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e09e      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e092      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003434:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e086      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e07e      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003454:	4b42      	ldr	r3, [pc, #264]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 0203 	bic.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003466:	f7fe fe9b 	bl	80021a0 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346c:	e00a      	b.n	8003484 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346e:	f7fe fe97 	bl	80021a0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e066      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 020c 	and.w	r2, r3, #12
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	429a      	cmp	r2, r3
 8003494:	d1eb      	bne.n	800346e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	492c      	ldr	r1, [pc, #176]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d210      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4924      	ldr	r1, [pc, #144]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e036      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4918      	ldr	r1, [pc, #96]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4910      	ldr	r1, [pc, #64]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003522:	f000 f825 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_RCC_ClockConfig+0x1b4>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490c      	ldr	r1, [pc, #48]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fdda 	bl	8002100 <HAL_InitTick>
 800354c:	4603      	mov	r3, r0
 800354e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003550:	7afb      	ldrb	r3, [r7, #11]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40022000 	.word	0x40022000
 8003560:	40021000 	.word	0x40021000
 8003564:	08008494 	.word	0x08008494
 8003568:	20000030 	.word	0x20000030
 800356c:	20000034 	.word	0x20000034

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003588:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d121      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d11e      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035a4:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	e005      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035cc:	4a2b      	ldr	r2, [pc, #172]	; (800367c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e004      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <HAL_RCC_GetSysClockFreq+0x114>)
 80035f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d134      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0xa6>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d003      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0xac>
 8003614:	e005      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <HAL_RCC_GetSysClockFreq+0x110>)
 8003618:	617b      	str	r3, [r7, #20]
      break;
 800361a:	e005      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_GetSysClockFreq+0x114>)
 800361e:	617b      	str	r3, [r7, #20]
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	617b      	str	r3, [r7, #20]
      break;
 8003626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	3301      	adds	r3, #1
 8003634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	fb03 f202 	mul.w	r2, r3, r2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_GetSysClockFreq+0x108>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	0e5b      	lsrs	r3, r3, #25
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	3301      	adds	r3, #1
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003668:	69bb      	ldr	r3, [r7, #24]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	080084ac 	.word	0x080084ac
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200

08003688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <HAL_RCC_GetHCLKFreq+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000030 	.word	0x20000030

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a4:	f7ff fff0 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080084a4 	.word	0x080084a4

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036d0:	f7ff ffda 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	080084a4 	.word	0x080084a4

080036f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003710:	f7ff fa00 	bl	8002b14 <HAL_PWREx_GetVoltageRange>
 8003714:	6178      	str	r0, [r7, #20]
 8003716:	e014      	b.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003730:	f7ff f9f0 	bl	8002b14 <HAL_PWREx_GetVoltageRange>
 8003734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003748:	d10b      	bne.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d919      	bls.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2ba0      	cmp	r3, #160	; 0xa0
 8003754:	d902      	bls.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003756:	2302      	movs	r3, #2
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e013      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800375c:	2301      	movs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e010      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d902      	bls.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003768:	2303      	movs	r3, #3
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e00a      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d102      	bne.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003774:	2302      	movs	r3, #2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e004      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b70      	cmp	r3, #112	; 0x70
 800377e:	d101      	bne.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003780:	2301      	movs	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 0207 	bic.w	r2, r3, #7
 800378c:	4909      	ldr	r1, [pc, #36]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40022000 	.word	0x40022000

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c4:	2300      	movs	r3, #0
 80037c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d041      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037dc:	d02a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e2:	d824      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ee:	d81e      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f8:	d010      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037fa:	e018      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037fc:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a85      	ldr	r2, [pc, #532]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003808:	e015      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fabb 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800381a:	e00c      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3320      	adds	r3, #32
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fba6 	bl	8003f74 <RCCEx_PLLSAI2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800382c:	e003      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	74fb      	strb	r3, [r7, #19]
      break;
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800383c:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384a:	4973      	ldr	r1, [pc, #460]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003852:	e001      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d041      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386c:	d02a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800386e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003872:	d824      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800387a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387e:	d81e      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800388a:	e018      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800388c:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003898:	e015      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fa73 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038aa:	e00c      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3320      	adds	r3, #32
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb5e 	bl	8003f74 <RCCEx_PLLSAI2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	74fb      	strb	r3, [r7, #19]
      break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038cc:	4b52      	ldr	r3, [pc, #328]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038da:	494f      	ldr	r1, [pc, #316]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038e2:	e001      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80a0 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a40      	ldr	r2, [pc, #256]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003938:	f7fe fc32 	bl	80021a0 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800393e:	e009      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fe fc2e 	bl	80021a0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	74fb      	strb	r3, [r7, #19]
        break;
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003954:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ef      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d15c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01f      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	d019      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003990:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d016      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fbed 	bl	80021a0 <HAL_GetTick>
 80039c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c8:	e00b      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7fe fbe9 	bl	80021a0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d902      	bls.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	74fb      	strb	r3, [r7, #19]
            break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ec      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a06:	4904      	ldr	r1, [pc, #16]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a0e:	e009      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a24:	7c7b      	ldrb	r3, [r7, #17]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d105      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	4a9d      	ldr	r2, [pc, #628]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a42:	4b98      	ldr	r3, [pc, #608]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 0203 	bic.w	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	4994      	ldr	r1, [pc, #592]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a64:	4b8f      	ldr	r3, [pc, #572]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f023 020c 	bic.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	498c      	ldr	r1, [pc, #560]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a86:	4b87      	ldr	r3, [pc, #540]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	4983      	ldr	r1, [pc, #524]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aa8:	4b7e      	ldr	r3, [pc, #504]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	497b      	ldr	r1, [pc, #492]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	4972      	ldr	r1, [pc, #456]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aec:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	496a      	ldr	r1, [pc, #424]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0e:	4b65      	ldr	r3, [pc, #404]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	4961      	ldr	r1, [pc, #388]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b30:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	4959      	ldr	r1, [pc, #356]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b52:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	4950      	ldr	r1, [pc, #320]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b74:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	4948      	ldr	r1, [pc, #288]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	493f      	ldr	r1, [pc, #252]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb8:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc6:	4937      	ldr	r1, [pc, #220]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
 8003be4:	e011      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f8c8 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d028      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c40:	60d3      	str	r3, [r2, #12]
 8003c42:	e011      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f899 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d02b      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	4908      	ldr	r1, [pc, #32]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a02      	ldr	r2, [pc, #8]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	60d3      	str	r3, [r2, #12]
 8003ca0:	e014      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f867 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02f      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd8:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce6:	4928      	ldr	r1, [pc, #160]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f844 	bl	8003d8c <RCCEx_PLLSAI1_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	74bb      	strb	r3, [r7, #18]
 8003d12:	e011      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3320      	adds	r3, #32
 8003d22:	2102      	movs	r1, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f925 	bl	8003f74 <RCCEx_PLLSAI2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d52:	490d      	ldr	r1, [pc, #52]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000

08003d8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d9a:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d018      	beq.n	8003dd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003da6:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d10d      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dbe:	4b6c      	ldr	r3, [pc, #432]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d047      	beq.n	8003e62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e044      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d018      	beq.n	8003e12 <RCCEx_PLLSAI1_Config+0x86>
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d825      	bhi.n	8003e30 <RCCEx_PLLSAI1_Config+0xa4>
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d002      	beq.n	8003dee <RCCEx_PLLSAI1_Config+0x62>
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d009      	beq.n	8003e00 <RCCEx_PLLSAI1_Config+0x74>
 8003dec:	e020      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dee:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11d      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfe:	e01a      	b.n	8003e36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e00:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e10:	e013      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e1e:	4b54      	ldr	r3, [pc, #336]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e2e:	e006      	b.n	8003e3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      break;
 8003e34:	e004      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e46:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	4944      	ldr	r1, [pc, #272]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d17d      	bne.n	8003f64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe f994 	bl	80021a0 <HAL_GetTick>
 8003e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e7a:	e009      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e7c:	f7fe f990 	bl	80021a0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d902      	bls.n	8003e90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e8e:	e005      	b.n	8003e9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e90:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ef      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d160      	bne.n	8003f64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6892      	ldr	r2, [r2, #8]
 8003eb8:	0211      	lsls	r1, r2, #8
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	0912      	lsrs	r2, r2, #4
 8003ec0:	0452      	lsls	r2, r2, #17
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	492a      	ldr	r1, [pc, #168]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	610b      	str	r3, [r1, #16]
 8003eca:	e027      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d112      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6892      	ldr	r2, [r2, #8]
 8003ee2:	0211      	lsls	r1, r2, #8
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6912      	ldr	r2, [r2, #16]
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0552      	lsls	r2, r2, #21
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	491f      	ldr	r1, [pc, #124]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	610b      	str	r3, [r1, #16]
 8003ef6:	e011      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6892      	ldr	r2, [r2, #8]
 8003f08:	0211      	lsls	r1, r2, #8
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6952      	ldr	r2, [r2, #20]
 8003f0e:	0852      	lsrs	r2, r2, #1
 8003f10:	3a01      	subs	r2, #1
 8003f12:	0652      	lsls	r2, r2, #25
 8003f14:	430a      	orrs	r2, r1
 8003f16:	4916      	ldr	r1, [pc, #88]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fe f93a 	bl	80021a0 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f2e:	e009      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f30:	f7fe f936 	bl	80021a0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d902      	bls.n	8003f44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	73fb      	strb	r3, [r7, #15]
          break;
 8003f42:	e005      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ef      	beq.n	8003f30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000

08003f74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f8e:	4b67      	ldr	r3, [pc, #412]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0203 	and.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10d      	bne.n	8003fba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d047      	beq.n	800404a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e044      	b.n	800404a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d018      	beq.n	8003ffa <RCCEx_PLLSAI2_Config+0x86>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d825      	bhi.n	8004018 <RCCEx_PLLSAI2_Config+0xa4>
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <RCCEx_PLLSAI2_Config+0x62>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d009      	beq.n	8003fe8 <RCCEx_PLLSAI2_Config+0x74>
 8003fd4:	e020      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd6:	4b55      	ldr	r3, [pc, #340]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe6:	e01a      	b.n	800401e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e013      	b.n	8004022 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ffa:	4b4c      	ldr	r3, [pc, #304]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004016:	e006      	b.n	8004026 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e004      	b.n	8004028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004026:	bf00      	nop
    }

    if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	430b      	orrs	r3, r1
 8004044:	4939      	ldr	r1, [pc, #228]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004046:	4313      	orrs	r3, r2
 8004048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d167      	bne.n	8004120 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a35      	ldr	r2, [pc, #212]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fe f8a0 	bl	80021a0 <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004062:	e009      	b.n	8004078 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004064:	f7fe f89c 	bl	80021a0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
        break;
 8004076:	e005      	b.n	8004084 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004078:	4b2c      	ldr	r3, [pc, #176]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ef      	bne.n	8004064 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d14a      	bne.n	8004120 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004090:	4b26      	ldr	r3, [pc, #152]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	0912      	lsrs	r2, r2, #4
 80040a8:	0452      	lsls	r2, r2, #17
 80040aa:	430a      	orrs	r2, r1
 80040ac:	491f      	ldr	r1, [pc, #124]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	614b      	str	r3, [r1, #20]
 80040b2:	e011      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	0211      	lsls	r1, r2, #8
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6912      	ldr	r2, [r2, #16]
 80040ca:	0852      	lsrs	r2, r2, #1
 80040cc:	3a01      	subs	r2, #1
 80040ce:	0652      	lsls	r2, r2, #25
 80040d0:	430a      	orrs	r2, r1
 80040d2:	4916      	ldr	r1, [pc, #88]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a13      	ldr	r2, [pc, #76]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fe f85c 	bl	80021a0 <HAL_GetTick>
 80040e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ea:	e009      	b.n	8004100 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040ec:	f7fe f858 	bl	80021a0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d902      	bls.n	8004100 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	73fb      	strb	r3, [r7, #15]
          break;
 80040fe:	e005      	b.n	800410c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ef      	beq.n	80040ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4904      	ldr	r1, [pc, #16]	; (800412c <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e095      	b.n	800426e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004152:	d009      	beq.n	8004168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
 800415a:	e005      	b.n	8004168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f877 	bl	8004276 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a8:	d902      	bls.n	80041b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e002      	b.n	80041b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041be:	d007      	beq.n	80041d0 <HAL_SPI_Init+0xa0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	ea42 0103 	orr.w	r1, r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	f003 0204 	and.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08a      	sub	sp, #40	; 0x28
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x26>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e1fb      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x41e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b8:	f7fd ff72 	bl	80021a0 <HAL_GetTick>
 80042bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042d4:	7efb      	ldrb	r3, [r7, #27]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00e      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x6e>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e0:	d106      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x66>
 80042ea:	7efb      	ldrb	r3, [r7, #27]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d003      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042f6:	e1cd      	b.n	8004694 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_SPI_TransmitReceive+0x80>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_TransmitReceive+0x80>
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004310:	e1c0      	b.n	8004694 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2205      	movs	r2, #5
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	887a      	ldrh	r2, [r7, #2]
 8004336:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	887a      	ldrh	r2, [r7, #2]
 8004352:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d802      	bhi.n	8004370 <HAL_SPI_TransmitReceive+0xe6>
 800436a:	8a3b      	ldrh	r3, [r7, #16]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d908      	bls.n	8004382 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e007      	b.n	8004392 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d007      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b8:	d97c      	bls.n	80044b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x13e>
 80043c2:	8a7b      	ldrh	r3, [r7, #18]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d169      	bne.n	800449c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ec:	e056      	b.n	800449c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d11b      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x1aa>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d016      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x1aa>
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2b01      	cmp	r3, #1
 800440a:	d113      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d11c      	bne.n	800447c <HAL_SPI_TransmitReceive+0x1f2>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	b292      	uxth	r2, r2
 800445a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004478:	2301      	movs	r3, #1
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800447c:	f7fd fe90 	bl	80021a0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004488:	429a      	cmp	r2, r3
 800448a:	d807      	bhi.n	800449c <HAL_SPI_TransmitReceive+0x212>
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d003      	beq.n	800449c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800449a:	e0fb      	b.n	8004694 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1a3      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x164>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d19d      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x164>
 80044b2:	e0df      	b.n	8004674 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x23a>
 80044bc:	8a7b      	ldrh	r3, [r7, #18]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	f040 80cb 	bne.w	800465a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d912      	bls.n	80044f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	881a      	ldrh	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	1c9a      	adds	r2, r3, #2
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b02      	subs	r3, #2
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f2:	e0b2      	b.n	800465a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451a:	e09e      	b.n	800465a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d134      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x30a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02f      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x30a>
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	2b01      	cmp	r3, #1
 8004538:	d12c      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d912      	bls.n	800456a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	881a      	ldrh	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	1c9a      	adds	r2, r3, #2
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b02      	subs	r3, #2
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004568:	e012      	b.n	8004590 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d148      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x3aa>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d042      	beq.n	8004634 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d923      	bls.n	8004602 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	b292      	uxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b02      	subs	r3, #2
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d81f      	bhi.n	8004630 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	e016      	b.n	8004630 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f103 020c 	add.w	r2, r3, #12
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004630:	2301      	movs	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004634:	f7fd fdb4 	bl	80021a0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004640:	429a      	cmp	r2, r3
 8004642:	d803      	bhi.n	800464c <HAL_SPI_TransmitReceive+0x3c2>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d102      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x3c8>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004658:	e01c      	b.n	8004694 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f af5b 	bne.w	800451c <HAL_SPI_TransmitReceive+0x292>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f47f af54 	bne.w	800451c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f945 	bl	8004908 <SPI_EndRxTxTransaction>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
 8004690:	e000      	b.n	8004694 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046be:	b2db      	uxtb	r3, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046dc:	f7fd fd60 	bl	80021a0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046ec:	f7fd fd58 	bl	80021a0 <HAL_GetTick>
 80046f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	015b      	lsls	r3, r3, #5
 80046f8:	0d1b      	lsrs	r3, r3, #20
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004702:	e054      	b.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d050      	beq.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800470c:	f7fd fd48 	bl	80021a0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d902      	bls.n	8004722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d13d      	bne.n	800479e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473a:	d111      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	d004      	beq.n	8004750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d107      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004768:	d10f      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e017      	b.n	80047ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d19b      	bne.n	8004704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000030 	.word	0x20000030

080047dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047ee:	f7fd fcd7 	bl	80021a0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80047fe:	f7fd fccf 	bl	80021a0 <HAL_GetTick>
 8004802:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800480c:	4b3d      	ldr	r3, [pc, #244]	; (8004904 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00da      	lsls	r2, r3, #3
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	0d1b      	lsrs	r3, r3, #20
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004824:	e060      	b.n	80048e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800482c:	d107      	bne.n	800483e <SPI_WaitFifoStateUntilTimeout+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800483c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d050      	beq.n	80048e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004846:	f7fd fcab 	bl	80021a0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	429a      	cmp	r2, r3
 8004854:	d902      	bls.n	800485c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d13d      	bne.n	80048d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800486a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004874:	d111      	bne.n	800489a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487e:	d004      	beq.n	800488a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d107      	bne.n	800489a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004898:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a2:	d10f      	bne.n	80048c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e010      	b.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d196      	bne.n	8004826 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000030 	.word	0x20000030

08004908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff ff5b 	bl	80047dc <SPI_WaitFifoStateUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004930:	f043 0220 	orr.w	r2, r3, #32
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e027      	b.n	800498c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff fec0 	bl	80046cc <SPI_WaitFlagStateUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e014      	b.n	800498c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2200      	movs	r2, #0
 800496a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff34 	bl	80047dc <SPI_WaitFifoStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e000      	b.n	800498c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e040      	b.n	8004a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f83a 	bl	8004a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f836 	bl	8004a44 <UART_SetConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e022      	b.n	8004a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fae2 	bl	8004fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb69 	bl	80050f8 <UART_CheckIdleState>
 8004a26:	4603      	mov	r3, r0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b08a      	sub	sp, #40	; 0x28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4ba4      	ldr	r3, [pc, #656]	; (8004d04 <UART_SetConfig+0x2c0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a99      	ldr	r2, [pc, #612]	; (8004d08 <UART_SetConfig+0x2c4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	4313      	orrs	r3, r2
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a90      	ldr	r2, [pc, #576]	; (8004d0c <UART_SetConfig+0x2c8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d126      	bne.n	8004b1c <UART_SetConfig+0xd8>
 8004ace:	4b90      	ldr	r3, [pc, #576]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d81b      	bhi.n	8004b14 <UART_SetConfig+0xd0>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xa0>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e116      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e112      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e10e      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e10a      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e106      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7c      	ldr	r2, [pc, #496]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d138      	bne.n	8004b98 <UART_SetConfig+0x154>
 8004b26:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d82d      	bhi.n	8004b90 <UART_SetConfig+0x14c>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0xf8>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004b91 	.word	0x08004b91
 8004b48:	08004b91 	.word	0x08004b91
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b91 	.word	0x08004b91
 8004b58:	08004b91 	.word	0x08004b91
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b91 	.word	0x08004b91
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e0d8      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e0d4      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e0d0      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e0cc      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e0c8      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <UART_SetConfig+0x2d4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d125      	bne.n	8004bee <UART_SetConfig+0x1aa>
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bac:	2b30      	cmp	r3, #48	; 0x30
 8004bae:	d016      	beq.n	8004bde <UART_SetConfig+0x19a>
 8004bb0:	2b30      	cmp	r3, #48	; 0x30
 8004bb2:	d818      	bhi.n	8004be6 <UART_SetConfig+0x1a2>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d00a      	beq.n	8004bce <UART_SetConfig+0x18a>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d814      	bhi.n	8004be6 <UART_SetConfig+0x1a2>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <UART_SetConfig+0x182>
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d008      	beq.n	8004bd6 <UART_SetConfig+0x192>
 8004bc4:	e00f      	b.n	8004be6 <UART_SetConfig+0x1a2>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bcc:	e0ad      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e0a9      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e0a5      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004bde:	2308      	movs	r3, #8
 8004be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be4:	e0a1      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004be6:	2310      	movs	r3, #16
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bec:	e09d      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <UART_SetConfig+0x2d8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d125      	bne.n	8004c44 <UART_SetConfig+0x200>
 8004bf8:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c02:	2bc0      	cmp	r3, #192	; 0xc0
 8004c04:	d016      	beq.n	8004c34 <UART_SetConfig+0x1f0>
 8004c06:	2bc0      	cmp	r3, #192	; 0xc0
 8004c08:	d818      	bhi.n	8004c3c <UART_SetConfig+0x1f8>
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d00a      	beq.n	8004c24 <UART_SetConfig+0x1e0>
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d814      	bhi.n	8004c3c <UART_SetConfig+0x1f8>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <UART_SetConfig+0x1d8>
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x1e8>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x1f8>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e082      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e07e      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e07a      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e076      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e072      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a35      	ldr	r2, [pc, #212]	; (8004d20 <UART_SetConfig+0x2dc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d12a      	bne.n	8004ca4 <UART_SetConfig+0x260>
 8004c4e:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5c:	d01a      	beq.n	8004c94 <UART_SetConfig+0x250>
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0x258>
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x240>
 8004c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6e:	d815      	bhi.n	8004c9c <UART_SetConfig+0x258>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x238>
 8004c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x248>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x258>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e052      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e04e      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e04a      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e046      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e042      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <UART_SetConfig+0x2c4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d13a      	bne.n	8004d24 <UART_SetConfig+0x2e0>
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cbc:	d01a      	beq.n	8004cf4 <UART_SetConfig+0x2b0>
 8004cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cc2:	d81b      	bhi.n	8004cfc <UART_SetConfig+0x2b8>
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d00c      	beq.n	8004ce4 <UART_SetConfig+0x2a0>
 8004cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cce:	d815      	bhi.n	8004cfc <UART_SetConfig+0x2b8>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <UART_SetConfig+0x298>
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd8:	d008      	beq.n	8004cec <UART_SetConfig+0x2a8>
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x2b8>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e022      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e01e      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e01a      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e016      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e012      	b.n	8004d2a <UART_SetConfig+0x2e6>
 8004d04:	efff69f3 	.word	0xefff69f3
 8004d08:	40008000 	.word	0x40008000
 8004d0c:	40013800 	.word	0x40013800
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40004400 	.word	0x40004400
 8004d18:	40004800 	.word	0x40004800
 8004d1c:	40004c00 	.word	0x40004c00
 8004d20:	40005000 	.word	0x40005000
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a9f      	ldr	r2, [pc, #636]	; (8004fac <UART_SetConfig+0x568>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d17a      	bne.n	8004e2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d824      	bhi.n	8004d86 <UART_SetConfig+0x342>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x300>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d87 	.word	0x08004d87
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004d77 	.word	0x08004d77
 8004d58:	08004d87 	.word	0x08004d87
 8004d5c:	08004d87 	.word	0x08004d87
 8004d60:	08004d87 	.word	0x08004d87
 8004d64:	08004d7f 	.word	0x08004d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7fe fc9a 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61f8      	str	r0, [r7, #28]
        break;
 8004d6e:	e010      	b.n	8004d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d70:	4b8f      	ldr	r3, [pc, #572]	; (8004fb0 <UART_SetConfig+0x56c>)
 8004d72:	61fb      	str	r3, [r7, #28]
        break;
 8004d74:	e00d      	b.n	8004d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d76:	f7fe fbfb 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004d7a:	61f8      	str	r0, [r7, #28]
        break;
 8004d7c:	e009      	b.n	8004d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	61fb      	str	r3, [r7, #28]
        break;
 8004d84:	e005      	b.n	8004d92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80fb 	beq.w	8004f90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d305      	bcc.n	8004db6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d903      	bls.n	8004dbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dbc:	e0e8      	b.n	8004f90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	461c      	mov	r4, r3
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	022b      	lsls	r3, r5, #8
 8004dd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dd4:	0222      	lsls	r2, r4, #8
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	6849      	ldr	r1, [r1, #4]
 8004dda:	0849      	lsrs	r1, r1, #1
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4688      	mov	r8, r1
 8004de0:	4681      	mov	r9, r0
 8004de2:	eb12 0a08 	adds.w	sl, r2, r8
 8004de6:	eb43 0b09 	adc.w	fp, r3, r9
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df8:	4650      	mov	r0, sl
 8004dfa:	4659      	mov	r1, fp
 8004dfc:	f7fb f9e4 	bl	80001c8 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4613      	mov	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0e:	d308      	bcc.n	8004e22 <UART_SetConfig+0x3de>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d204      	bcs.n	8004e22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e0b6      	b.n	8004f90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e28:	e0b2      	b.n	8004f90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e32:	d15e      	bne.n	8004ef2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d828      	bhi.n	8004e8e <UART_SetConfig+0x44a>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x400>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fe fc1a 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61f8      	str	r0, [r7, #28]
        break;
 8004e6e:	e014      	b.n	8004e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fe fc2c 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004e74:	61f8      	str	r0, [r7, #28]
        break;
 8004e76:	e010      	b.n	8004e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b4d      	ldr	r3, [pc, #308]	; (8004fb0 <UART_SetConfig+0x56c>)
 8004e7a:	61fb      	str	r3, [r7, #28]
        break;
 8004e7c:	e00d      	b.n	8004e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fe fb77 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004e82:	61f8      	str	r0, [r7, #28]
        break;
 8004e84:	e009      	b.n	8004e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	61fb      	str	r3, [r7, #28]
        break;
 8004e8c:	e005      	b.n	8004e9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d077      	beq.n	8004f90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005a      	lsls	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b0f      	cmp	r3, #15
 8004eba:	d916      	bls.n	8004eea <UART_SetConfig+0x4a6>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d212      	bcs.n	8004eea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f023 030f 	bic.w	r3, r3, #15
 8004ecc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	8afa      	ldrh	r2, [r7, #22]
 8004ee6:	60da      	str	r2, [r3, #12]
 8004ee8:	e052      	b.n	8004f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef0:	e04e      	b.n	8004f90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d827      	bhi.n	8004f4a <UART_SetConfig+0x506>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x4bc>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe fbbc 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fbce 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004f30:	61f8      	str	r0, [r7, #28]
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <UART_SetConfig+0x56c>)
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe fb19 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004f3e:	61f8      	str	r0, [r7, #28]
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	61fb      	str	r3, [r7, #28]
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f54:	bf00      	nop
    }

    if (pclk != 0U)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	085a      	lsrs	r2, r3, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	441a      	add	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	d909      	bls.n	8004f8a <UART_SetConfig+0x546>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d205      	bcs.n	8004f8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e002      	b.n	8004f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	40008000 	.word	0x40008000
 8004fb0:	00f42400 	.word	0x00f42400

08004fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01a      	beq.n	80050ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b2:	d10a      	bne.n	80050ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005108:	f7fd f84a 	bl	80021a0 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10e      	bne.n	800513a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800511c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f82d 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e023      	b.n	8005182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d10e      	bne.n	8005166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f817 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00d      	b.n	8005182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b09c      	sub	sp, #112	; 0x70
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	e0a5      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	f000 80a1 	beq.w	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fc fffb 	bl	80021a0 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <UART_WaitOnFlagUntilTimeout+0x32>
 80051b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d13e      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d0:	667b      	str	r3, [r7, #100]	; 0x64
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e6      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e067      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d04f      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005256:	d147      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005260:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	613b      	str	r3, [r7, #16]
   return(result);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b4:	623a      	str	r2, [r7, #32]
 80052b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e010      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	f43f af4a 	beq.w	800519c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3770      	adds	r7, #112	; 0x70
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b088      	sub	sp, #32
 8005316:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	2218      	movs	r2, #24
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f003 f830 	bl	800838a <memset>
  rq.ogf = 0x3f;
 800532a:	233f      	movs	r3, #63	; 0x3f
 800532c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800532e:	2381      	movs	r3, #129	; 0x81
 8005330:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005332:	1dfb      	adds	r3, r7, #7
 8005334:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f002 fd6b 	bl	8007e1c <hci_send_req>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	da01      	bge.n	8005350 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800534c:	23ff      	movs	r3, #255	; 0xff
 800534e:	e005      	b.n	800535c <aci_gap_set_non_discoverable+0x4a>
  if (status) {
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <aci_gap_set_non_discoverable+0x48>
    return status;
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	e000      	b.n	800535c <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8005364:	b5b0      	push	{r4, r5, r7, lr}
 8005366:	b0ce      	sub	sp, #312	; 0x138
 8005368:	af00      	add	r7, sp, #0
 800536a:	4605      	mov	r5, r0
 800536c:	460c      	mov	r4, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005376:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800537a:	462a      	mov	r2, r5
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005382:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005386:	4622      	mov	r2, r4
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800538e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005392:	4602      	mov	r2, r0
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800539a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800539e:	460a      	mov	r2, r1
 80053a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80053aa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80053ae:	3308      	adds	r3, #8
 80053b0:	f107 020c 	add.w	r2, r7, #12
 80053b4:	4413      	add	r3, r2
 80053b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80053ba:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80053be:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80053c2:	4413      	add	r3, r2
 80053c4:	3309      	adds	r3, #9
 80053c6:	f107 020c 	add.w	r2, r7, #12
 80053ca:	4413      	add	r3, r2
 80053cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80053d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80053d4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80053e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053e6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80053ea:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80053f2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80053f6:	3301      	adds	r3, #1
 80053f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80053fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005400:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005404:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005408:	8812      	ldrh	r2, [r2, #0]
 800540a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800540e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005412:	3302      	adds	r3, #2
 8005414:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8005418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800541c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005420:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800542a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800542e:	3302      	adds	r3, #2
 8005430:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005434:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005438:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800543c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005440:	7812      	ldrb	r2, [r2, #0]
 8005442:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005444:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005448:	3301      	adds	r3, #1
 800544a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800544e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005452:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005456:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005458:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800545c:	3301      	adds	r3, #1
 800545e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8005462:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005466:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800546a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800546c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005470:	3301      	adds	r3, #1
 8005472:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005476:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800547a:	3308      	adds	r3, #8
 800547c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005480:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005484:	4618      	mov	r0, r3
 8005486:	f002 ffad 	bl	80083e4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800548a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800548e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005492:	4413      	add	r3, r2
 8005494:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005498:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800549c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80054a0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80054a2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80054a6:	3301      	adds	r3, #1
 80054a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80054ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054b0:	3301      	adds	r3, #1
 80054b2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80054b6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 ff92 	bl	80083e4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80054c0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80054c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80054c8:	4413      	add	r3, r2
 80054ca:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80054d6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80054d8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80054dc:	3302      	adds	r3, #2
 80054de:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80054ea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80054ec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80054f0:	3302      	adds	r3, #2
 80054f2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80054f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054fa:	2218      	movs	r2, #24
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 ff43 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005504:	233f      	movs	r3, #63	; 0x3f
 8005506:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800550a:	2383      	movs	r3, #131	; 0x83
 800550c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005510:	f107 030c 	add.w	r3, r7, #12
 8005514:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005518:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800551c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005520:	f107 030b 	add.w	r3, r7, #11
 8005524:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005528:	2301      	movs	r3, #1
 800552a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800552e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f002 fc71 	bl	8007e1c <hci_send_req>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	da01      	bge.n	8005544 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005540:	23ff      	movs	r3, #255	; 0xff
 8005542:	e00d      	b.n	8005560 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8005544:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005548:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <aci_gap_set_discoverable+0x1fa>
    return status;
 8005552:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005556:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	e000      	b.n	8005560 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005566:	46bd      	mov	sp, r7
 8005568:	bdb0      	pop	{r4, r5, r7, pc}

0800556a <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800556a:	b590      	push	{r4, r7, lr}
 800556c:	b0cf      	sub	sp, #316	; 0x13c
 800556e:	af00      	add	r7, sp, #0
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800557a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005584:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005588:	4622      	mov	r2, r4
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005590:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005594:	4602      	mov	r2, r0
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800559c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80055a0:	460a      	mov	r2, r1
 80055a2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	2207      	movs	r2, #7
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f002 fee8 	bl	800838a <memset>
  uint8_t index_input = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80055c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80055c8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80055d0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80055d4:	3301      	adds	r3, #1
 80055d6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80055da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80055e2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80055ea:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80055ee:	3301      	adds	r3, #1
 80055f0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80055f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80055fc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005604:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005608:	3301      	adds	r3, #1
 800560a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800560e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005612:	2218      	movs	r2, #24
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f002 feb7 	bl	800838a <memset>
  rq.ogf = 0x3f;
 800561c:	233f      	movs	r3, #63	; 0x3f
 800561e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005622:	238a      	movs	r3, #138	; 0x8a
 8005624:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005630:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005634:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005640:	2307      	movs	r3, #7
 8005642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005646:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f002 fbe5 	bl	8007e1c <hci_send_req>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	da01      	bge.n	800565c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005658:	23ff      	movs	r3, #255	; 0xff
 800565a:	e02e      	b.n	80056ba <aci_gap_init+0x150>
  if (resp.Status) {
 800565c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <aci_gap_init+0x10c>
    return resp.Status;
 800566a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800566e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	e021      	b.n	80056ba <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005676:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800567a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800567e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005682:	b29a      	uxth	r2, r3
 8005684:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005688:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005698:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800569c:	b29a      	uxth	r2, r3
 800569e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80056a2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80056a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd90      	pop	{r4, r7, pc}

080056c4 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 80056c4:	b5b0      	push	{r4, r5, r7, lr}
 80056c6:	b0cc      	sub	sp, #304	; 0x130
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4605      	mov	r5, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	4610      	mov	r0, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80056da:	462a      	mov	r2, r5
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e6:	4622      	mov	r2, r4
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80056f2:	4602      	mov	r2, r0
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80056fe:	460a      	mov	r2, r1
 8005700:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005724:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005728:	8812      	ldrh	r2, [r2, #0]
 800572a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800572c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005730:	3302      	adds	r3, #2
 8005732:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800573e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005742:	8812      	ldrh	r2, [r2, #0]
 8005744:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005746:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800574a:	3302      	adds	r3, #2
 800574c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005758:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005760:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005764:	3301      	adds	r3, #1
 8005766:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800576a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005772:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800577a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800577e:	3301      	adds	r3, #1
 8005780:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005788:	2218      	movs	r2, #24
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fdfc 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005792:	233f      	movs	r3, #63	; 0x3f
 8005794:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005798:	2397      	movs	r3, #151	; 0x97
 800579a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800579e:	230f      	movs	r3, #15
 80057a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80057ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80057b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80057b4:	f107 030b 	add.w	r3, r7, #11
 80057b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80057bc:	2301      	movs	r3, #1
 80057be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80057c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 fb27 	bl	8007e1c <hci_send_req>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da01      	bge.n	80057d8 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 80057d4:	23ff      	movs	r3, #255	; 0xff
 80057d6:	e00d      	b.n	80057f4 <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	e000      	b.n	80057f4 <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bdb0      	pop	{r4, r5, r7, pc}

080057fe <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 80057fe:	b590      	push	{r4, r7, lr}
 8005800:	b0cf      	sub	sp, #316	; 0x13c
 8005802:	af00      	add	r7, sp, #0
 8005804:	4604      	mov	r4, r0
 8005806:	4608      	mov	r0, r1
 8005808:	4611      	mov	r1, r2
 800580a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800580e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005818:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800581c:	4622      	mov	r2, r4
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005828:	4602      	mov	r2, r0
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005830:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005834:	460a      	mov	r2, r1
 8005836:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005844:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005852:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005856:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800585a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800585e:	8812      	ldrh	r2, [r2, #0]
 8005860:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005862:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005866:	3302      	adds	r3, #2
 8005868:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800586c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005870:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005874:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800587c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005880:	3302      	adds	r3, #2
 8005882:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800588a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800588e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005896:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800589a:	3301      	adds	r3, #1
 800589c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 80058a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058a4:	1d58      	adds	r0, r3, #5
 80058a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058ae:	2206      	movs	r2, #6
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	f002 fd97 	bl	80083e4 <memcpy>
  index_input += 6;
 80058b6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80058ba:	3306      	adds	r3, #6
 80058bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80058c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058c4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80058c8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80058ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80058ce:	3301      	adds	r3, #1
 80058d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 80058d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058d8:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80058dc:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 80058de:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80058e2:	3302      	adds	r3, #2
 80058e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 80058e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058ec:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80058f0:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80058f2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80058f6:	3302      	adds	r3, #2
 80058f8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 80058fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005900:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005904:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005906:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800590a:	3302      	adds	r3, #2
 800590c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005914:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005918:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800591a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800591e:	3302      	adds	r3, #2
 8005920:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005924:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005928:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800592c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800592e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005932:	3302      	adds	r3, #2
 8005934:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800593c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005940:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005942:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005946:	3302      	adds	r3, #2
 8005948:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800594c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005950:	2218      	movs	r2, #24
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f002 fd18 	bl	800838a <memset>
  rq.ogf = 0x3f;
 800595a:	233f      	movs	r3, #63	; 0x3f
 800595c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005960:	239c      	movs	r3, #156	; 0x9c
 8005962:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005966:	230f      	movs	r3, #15
 8005968:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005974:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005978:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800597c:	f107 0313 	add.w	r3, r7, #19
 8005980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800598a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f002 fa43 	bl	8007e1c <hci_send_req>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	da01      	bge.n	80059a0 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800599c:	23ff      	movs	r3, #255	; 0xff
 800599e:	e00d      	b.n	80059bc <aci_gap_create_connection+0x1be>
  if (status) {
 80059a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80059a4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <aci_gap_create_connection+0x1bc>
    return status;
 80059ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80059b2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	e000      	b.n	80059bc <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd90      	pop	{r4, r7, pc}

080059c6 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b0cc      	sub	sp, #304	; 0x130
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	4602      	mov	r2, r0
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80059d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80059e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059fa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a02:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a06:	3301      	adds	r3, #1
 8005a08:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a10:	2218      	movs	r2, #24
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fcb8 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005a1a:	233f      	movs	r3, #63	; 0x3f
 8005a1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005a20:	239d      	movs	r3, #157	; 0x9d
 8005a22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005a2e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005a36:	f107 030b 	add.w	r3, r7, #11
 8005a3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005a44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 f9e6 	bl	8007e1c <hci_send_req>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da01      	bge.n	8005a5a <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005a56:	23ff      	movs	r3, #255	; 0xff
 8005a58:	e00d      	b.n	8005a76 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <aci_gap_terminate_gap_proc+0xae>
    return status;
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	e000      	b.n	8005a76 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	2218      	movs	r2, #24
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 fc79 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005a98:	233f      	movs	r3, #63	; 0x3f
 8005a9a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005a9c:	f240 1301 	movw	r3, #257	; 0x101
 8005aa0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005aa2:	1dfb      	adds	r3, r7, #7
 8005aa4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005aaa:	f107 0308 	add.w	r3, r7, #8
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f002 f9b3 	bl	8007e1c <hci_send_req>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da01      	bge.n	8005ac0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005abc:	23ff      	movs	r3, #255	; 0xff
 8005abe:	e005      	b.n	8005acc <aci_gatt_init+0x4c>
  if (status) {
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <aci_gatt_init+0x4a>
    return status;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	e000      	b.n	8005acc <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b0cf      	sub	sp, #316	; 0x13c
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005ae0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005ae4:	6001      	str	r1, [r0, #0]
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005af2:	4622      	mov	r2, r4
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005afa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005afe:	4602      	mov	r2, r0
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b06:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b1a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d00a      	beq.n	8005b3a <aci_gatt_add_service+0x66>
 8005b24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b28:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d101      	bne.n	8005b36 <aci_gatt_add_service+0x62>
 8005b32:	2311      	movs	r3, #17
 8005b34:	e002      	b.n	8005b3c <aci_gatt_add_service+0x68>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <aci_gatt_add_service+0x68>
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	f107 020c 	add.w	r2, r7, #12
 8005b40:	4413      	add	r3, r2
 8005b42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b46:	f107 0308 	add.w	r3, r7, #8
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 fc1b 	bl	800838a <memset>
  uint8_t index_input = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b5e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b62:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b6a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8005b74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b78:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d002      	beq.n	8005b88 <aci_gatt_add_service+0xb4>
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d004      	beq.n	8005b90 <aci_gatt_add_service+0xbc>
 8005b86:	e007      	b.n	8005b98 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005b8e:	e005      	b.n	8005b9c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005b96:	e001      	b.n	8005b9c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005b98:	2347      	movs	r3, #71	; 0x47
 8005b9a:	e06c      	b.n	8005c76 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8005b9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ba0:	1c58      	adds	r0, r3, #1
 8005ba2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005baa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	f002 fc18 	bl	80083e4 <memcpy>
    index_input += size;
 8005bb4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005bb8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8005bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005bca:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005bd2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005be4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005bec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfa:	2218      	movs	r2, #24
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fbc3 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005c04:	233f      	movs	r3, #63	; 0x3f
 8005c06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005c0a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005c0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f002 f8f0 	bl	8007e1c <hci_send_req>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da01      	bge.n	8005c46 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005c42:	23ff      	movs	r3, #255	; 0xff
 8005c44:	e017      	b.n	8005c76 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8005c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005c54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	e00a      	b.n	8005c76 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005c60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c68:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c72:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd90      	pop	{r4, r7, pc}

08005c80 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b0d1      	sub	sp, #324	; 0x144
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005c8e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005c92:	600a      	str	r2, [r1, #0]
 8005c94:	4619      	mov	r1, r3
 8005c96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c9a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ca6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005caa:	4602      	mov	r2, r0
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cb2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005cba:	f107 0314 	add.w	r3, r7, #20
 8005cbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005cc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cc6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d00a      	beq.n	8005ce6 <aci_gatt_add_char+0x66>
 8005cd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cd4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d101      	bne.n	8005ce2 <aci_gatt_add_char+0x62>
 8005cde:	2313      	movs	r3, #19
 8005ce0:	e002      	b.n	8005ce8 <aci_gatt_add_char+0x68>
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e000      	b.n	8005ce8 <aci_gatt_add_char+0x68>
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	f107 0214 	add.w	r2, r7, #20
 8005cec:	4413      	add	r3, r2
 8005cee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005cf2:	f107 0310 	add.w	r3, r7, #16
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 fb45 	bl	800838a <memset>
  uint8_t index_input = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005d06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d0a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005d0e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005d12:	8812      	ldrh	r2, [r2, #0]
 8005d14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d16:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005d20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d24:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005d28:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005d30:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d34:	3301      	adds	r3, #1
 8005d36:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8005d3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d3e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d002      	beq.n	8005d4e <aci_gatt_add_char+0xce>
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d004      	beq.n	8005d56 <aci_gatt_add_char+0xd6>
 8005d4c:	e007      	b.n	8005d5e <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005d54:	e005      	b.n	8005d62 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005d56:	2310      	movs	r3, #16
 8005d58:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005d5c:	e001      	b.n	8005d62 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005d5e:	2347      	movs	r3, #71	; 0x47
 8005d60:	e091      	b.n	8005e86 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005d62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d66:	1cd8      	adds	r0, r3, #3
 8005d68:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005d6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d70:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d74:	6819      	ldr	r1, [r3, #0]
 8005d76:	f002 fb35 	bl	80083e4 <memcpy>
    index_input += size;
 8005d7a:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8005d7e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005d82:	4413      	add	r3, r2
 8005d84:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005d88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d8c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005d90:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005d94:	8812      	ldrh	r2, [r2, #0]
 8005d96:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005d98:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005da6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005daa:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005dac:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005db0:	3301      	adds	r3, #1
 8005db2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8005db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dba:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005dbe:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005dc0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8005dca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dce:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005dd2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005dd4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8005dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005de2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8005de6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005de8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dec:	3301      	adds	r3, #1
 8005dee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8005df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005df6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8005dfa:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005dfc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e00:	3301      	adds	r3, #1
 8005e02:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e0a:	2218      	movs	r2, #24
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f002 fabb 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005e14:	233f      	movs	r3, #63	; 0x3f
 8005e16:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8005e1a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e1e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005e22:	f107 0314 	add.w	r3, r7, #20
 8005e26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005e2a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005e32:	f107 0310 	add.w	r3, r7, #16
 8005e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005e40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 ffe8 	bl	8007e1c <hci_send_req>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da01      	bge.n	8005e56 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005e52:	23ff      	movs	r3, #255	; 0xff
 8005e54:	e017      	b.n	8005e86 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8005e56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005e64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	e00a      	b.n	8005e86 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005e70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}

08005e90 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b0cc      	sub	sp, #304	; 0x130
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4602      	mov	r2, r0
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005ea0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8005ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ec4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ecc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eda:	2218      	movs	r2, #24
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 fa53 	bl	800838a <memset>
  rq.ogf = 0x3f;
 8005ee4:	233f      	movs	r3, #63	; 0x3f
 8005ee6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8005eea:	f240 130b 	movw	r3, #267	; 0x10b
 8005eee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005ef2:	230f      	movs	r3, #15
 8005ef4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f00:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f08:	f107 030b 	add.w	r3, r7, #11
 8005f0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 ff7d 	bl	8007e1c <hci_send_req>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da01      	bge.n	8005f2c <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 8005f28:	23ff      	movs	r3, #255	; 0xff
 8005f2a:	e00d      	b.n	8005f48 <aci_gatt_exchange_config+0xb8>
  if (status) {
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <aci_gatt_exchange_config+0xb6>
    return status;
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	e000      	b.n	8005f48 <aci_gatt_exchange_config+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 8005f52:	b5b0      	push	{r4, r5, r7, lr}
 8005f54:	b0ce      	sub	sp, #312	; 0x138
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f64:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005f68:	462a      	mov	r2, r5
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f74:	4622      	mov	r2, r4
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f7c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005f80:	4602      	mov	r2, r0
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f88:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8005f8c:	460a      	mov	r2, r1
 8005f8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 8005f98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f9c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8005faa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005fb2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005fb6:	8812      	ldrh	r2, [r2, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005fba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 8005fc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fc8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005fcc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005fd0:	8812      	ldrh	r2, [r2, #0]
 8005fd2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005fd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fd8:	3302      	adds	r3, #2
 8005fda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 8005fde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fe2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005fe6:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8005fea:	8812      	ldrh	r2, [r2, #0]
 8005fec:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8005fee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8005ff8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ffc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006000:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006008:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800600c:	3301      	adds	r3, #1
 800600e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 8006012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006016:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d002      	beq.n	8006026 <aci_gatt_disc_char_by_uuid+0xd4>
 8006020:	2b02      	cmp	r3, #2
 8006022:	d004      	beq.n	800602e <aci_gatt_disc_char_by_uuid+0xdc>
 8006024:	e007      	b.n	8006036 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 8006026:	2302      	movs	r3, #2
 8006028:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800602c:	e005      	b.n	800603a <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 800602e:	2310      	movs	r3, #16
 8006030:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006034:	e001      	b.n	800603a <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 8006036:	2347      	movs	r3, #71	; 0x47
 8006038:	e049      	b.n	80060ce <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 800603a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800603e:	3307      	adds	r3, #7
 8006040:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006044:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006048:	4618      	mov	r0, r3
 800604a:	f002 f9cb 	bl	80083e4 <memcpy>
    index_input += size;
 800604e:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8006052:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006056:	4413      	add	r3, r2
 8006058:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800605c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006060:	2218      	movs	r2, #24
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f002 f990 	bl	800838a <memset>
  rq.ogf = 0x3f;
 800606a:	233f      	movs	r3, #63	; 0x3f
 800606c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 8006070:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006074:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 8006078:	230f      	movs	r3, #15
 800607a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 800607e:	f107 0310 	add.w	r3, r7, #16
 8006082:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 8006086:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800608a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 800608e:	f107 030f 	add.w	r3, r7, #15
 8006092:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 8006096:	2301      	movs	r3, #1
 8006098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 800609c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 feba 	bl	8007e1c <hci_send_req>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da01      	bge.n	80060b2 <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 80060ae:	23ff      	movs	r3, #255	; 0xff
 80060b0:	e00d      	b.n	80060ce <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 80060b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 80060c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	e000      	b.n	80060ce <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bdb0      	pop	{r4, r5, r7, pc}

080060d8 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b0cf      	sub	sp, #316	; 0x13c
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4604      	mov	r4, r0
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060e8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060f6:	4622      	mov	r2, r4
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006102:	4602      	mov	r2, r0
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800610a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800610e:	460a      	mov	r2, r1
 8006110:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800611a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800611e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800612c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006130:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006134:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006138:	8812      	ldrh	r2, [r2, #0]
 800613a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800613c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006140:	3302      	adds	r3, #2
 8006142:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8006146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800614a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800614e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006152:	8812      	ldrh	r2, [r2, #0]
 8006154:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006156:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800615a:	3302      	adds	r3, #2
 800615c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8006160:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006164:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006168:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006170:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006174:	3301      	adds	r3, #1
 8006176:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800617a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800617e:	1d58      	adds	r0, r3, #5
 8006180:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006184:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800618e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	f002 f926 	bl	80083e4 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 8006198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800619c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80061a0:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	4413      	add	r3, r2
 80061a8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061b0:	2218      	movs	r2, #24
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f002 f8e8 	bl	800838a <memset>
  rq.ogf = 0x3f;
 80061ba:	233f      	movs	r3, #63	; 0x3f
 80061bc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80061c0:	f240 1321 	movw	r3, #289	; 0x121
 80061c4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80061c8:	230f      	movs	r3, #15
 80061ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80061d6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80061da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80061de:	f107 0313 	add.w	r3, r7, #19
 80061e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80061ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fe12 	bl	8007e1c <hci_send_req>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da01      	bge.n	8006202 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 80061fe:	23ff      	movs	r3, #255	; 0xff
 8006200:	e00d      	b.n	800621e <aci_gatt_write_char_desc+0x146>
  if (status) {
 8006202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006206:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <aci_gatt_write_char_desc+0x144>
    return status;
 8006210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006214:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	e000      	b.n	800621e <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006224:	46bd      	mov	sp, r7
 8006226:	bd90      	pop	{r4, r7, pc}

08006228 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0cc      	sub	sp, #304	; 0x130
 800622c:	af00      	add	r7, sp, #0
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006240:	4602      	mov	r2, r0
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800624c:	460a      	mov	r2, r1
 800624e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006272:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800627a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800627e:	3301      	adds	r3, #1
 8006280:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800628c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006294:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006298:	3301      	adds	r3, #1
 800629a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800629e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a2:	1c98      	adds	r0, r3, #2
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b6:	6819      	ldr	r1, [r3, #0]
 80062b8:	f002 f894 	bl	80083e4 <memcpy>
    index_input += Length*sizeof(uint8_t);
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80062c4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4413      	add	r3, r2
 80062cc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062d4:	2218      	movs	r2, #24
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f002 f856 	bl	800838a <memset>
  rq.ogf = 0x3f;
 80062de:	233f      	movs	r3, #63	; 0x3f
 80062e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80062e4:	230c      	movs	r3, #12
 80062e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062f2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80062f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062fa:	f107 030b 	add.w	r3, r7, #11
 80062fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fd84 	bl	8007e1c <hci_send_req>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	da01      	bge.n	800631e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800631a:	23ff      	movs	r3, #255	; 0xff
 800631c:	e00d      	b.n	800633a <aci_hal_write_config_data+0x112>
  if (status) {
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <aci_hal_write_config_data+0x110>
    return status;
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	e000      	b.n	800633a <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b0cc      	sub	sp, #304	; 0x130
 8006348:	af00      	add	r7, sp, #0
 800634a:	4602      	mov	r2, r0
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800635e:	460a      	mov	r2, r1
 8006360:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006362:	f107 030c 	add.w	r3, r7, #12
 8006366:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800636a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800637c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006380:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006384:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800638c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006390:	3301      	adds	r3, #1
 8006392:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800639e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80063a6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80063aa:	3301      	adds	r3, #1
 80063ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063b4:	2218      	movs	r2, #24
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 ffe6 	bl	800838a <memset>
  rq.ogf = 0x3f;
 80063be:	233f      	movs	r3, #63	; 0x3f
 80063c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80063c4:	230f      	movs	r3, #15
 80063c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80063ca:	f107 030c 	add.w	r3, r7, #12
 80063ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80063d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80063d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063da:	f107 030b 	add.w	r3, r7, #11
 80063de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80063e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fd14 	bl	8007e1c <hci_send_req>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da01      	bge.n	80063fe <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80063fa:	23ff      	movs	r3, #255	; 0xff
 80063fc:	e00d      	b.n	800641a <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <aci_hal_set_tx_power_level+0xd4>
    return status;
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	e000      	b.n	800641a <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	7818      	ldrb	r0, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800643e:	b299      	uxth	r1, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	461a      	mov	r2, r3
 8006446:	f7fa fd63 	bl	8000f10 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	7818      	ldrb	r0, [r3, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800646e:	b299      	uxth	r1, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	461a      	mov	r2, r3
 8006476:	f000 ffca 	bl	800740e <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b087      	sub	sp, #28
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	7818      	ldrb	r0, [r3, #0]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800649e:	b299      	uxth	r1, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	78da      	ldrb	r2, [r3, #3]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	889b      	ldrh	r3, [r3, #4]
 80064a8:	b29c      	uxth	r4, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	88db      	ldrh	r3, [r3, #6]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4623      	mov	r3, r4
 80064b4:	f000 ffba 	bl	800742c <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd90      	pop	{r4, r7, pc}

080064c2 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ffbc 	bl	8007454 <hci_hardware_error_event>

  return status;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b0a6      	sub	sp, #152	; 0x98
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006506:	e02e      	b.n	8006566 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006508:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800650c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	3398      	adds	r3, #152	; 0x98
 8006522:	443b      	add	r3, r7
 8006524:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006528:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800652c:	3302      	adds	r3, #2
 800652e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006532:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3398      	adds	r3, #152	; 0x98
 800654c:	443b      	add	r3, r7
 800654e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006552:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006556:	3302      	adds	r3, #2
 8006558:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800655c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006560:	3301      	adds	r3, #1
 8006562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006572:	4293      	cmp	r3, r2
 8006574:	dbc8      	blt.n	8006508 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f107 0208 	add.w	r2, r7, #8
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f000 ff71 	bl	800746a <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006588:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800658c:	4618      	mov	r0, r3
 800658e:	3798      	adds	r7, #152	; 0x98
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 ff6a 	bl	8007482 <hci_data_buffer_overflow_event>

  return status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	781a      	ldrb	r2, [r3, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 ff5e 	bl	8007498 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f97b 	bl	80078f6 <aci_blue_initialized_event>

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006612:	2300      	movs	r3, #0
 8006614:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f975 	bl	800790c <aci_blue_events_lost_event>

  return status;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800662c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006630:	b08d      	sub	sp, #52	; 0x34
 8006632:	af08      	add	r7, sp, #32
 8006634:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f893 c000 	ldrb.w	ip, [r3]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800666a:	68b8      	ldr	r0, [r7, #8]
 800666c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006670:	68bc      	ldr	r4, [r7, #8]
 8006672:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006676:	68bd      	ldr	r5, [r7, #8]
 8006678:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800667c:	68be      	ldr	r6, [r7, #8]
 800667e:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	9606      	str	r6, [sp, #24]
 800668a:	9505      	str	r5, [sp, #20]
 800668c:	9404      	str	r4, [sp, #16]
 800668e:	9003      	str	r0, [sp, #12]
 8006690:	9102      	str	r1, [sp, #8]
 8006692:	9201      	str	r2, [sp, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	464b      	mov	r3, r9
 800669a:	4642      	mov	r2, r8
 800669c:	4671      	mov	r1, lr
 800669e:	4660      	mov	r0, ip
 80066a0:	f001 f93e 	bl	8007920 <aci_blue_crash_info_event>

  return status;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080066b0 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	7818      	ldrb	r0, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	7859      	ldrb	r1, [r3, #1]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f001 f934 	bl	800793c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f993 0000 	ldrsb.w	r0, [r3]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 80066fc:	461a      	mov	r2, r3
 80066fe:	f001 f92b 	bl	8007958 <aci_hal_scan_req_report_event>

  return status;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	7818      	ldrb	r0, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006728:	461a      	mov	r2, r3
 800672a:	f001 f923 	bl	8007974 <aci_hal_fw_error_event>

  return status;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006744:	f000 ff32 	bl	80075ac <aci_gap_limited_discoverable_event>

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b298      	uxth	r0, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	7899      	ldrb	r1, [r3, #2]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	78db      	ldrb	r3, [r3, #3]
 8006770:	461a      	mov	r2, r3
 8006772:	f000 ff22 	bl	80075ba <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ff1e 	bl	80075d8 <aci_gap_pass_key_req_event>

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff16 	bl	80075ee <aci_gap_authorization_req_event>

  return status;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80067d8:	f000 ff14 	bl	8007604 <aci_gap_slave_security_initiated_event>

  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 80067f2:	f000 ff0e 	bl	8007612 <aci_gap_bond_lost_event>

  return status;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7818      	ldrb	r0, [r3, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7859      	ldrb	r1, [r3, #1]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006820:	f7fa fb02 	bl	8000e28 <aci_gap_proc_complete_event>

  return status;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	4618      	mov	r0, r3
 8006846:	f000 feeb 	bl	8007620 <aci_gap_addr_not_resolved_event>

  return status;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f000 fedf 	bl	8007636 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29a      	uxth	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	789b      	ldrb	r3, [r3, #2]
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f000 fed5 	bl	800764e <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f000 ffce 	bl	800786e <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b298      	uxth	r0, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 ffc5 	bl	800788a <aci_l2cap_proc_timeout_event>

  return status;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800690a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690c:	b089      	sub	sp, #36	; 0x24
 800690e:	af04      	add	r7, sp, #16
 8006910:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b298      	uxth	r0, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	789c      	ldrb	r4, [r3, #2]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800692a:	b29d      	uxth	r5, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006932:	b29e      	uxth	r6, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800693a:	b29b      	uxth	r3, r3
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006942:	b292      	uxth	r2, r2
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800694a:	b289      	uxth	r1, r1
 800694c:	9102      	str	r1, [sp, #8]
 800694e:	9201      	str	r2, [sp, #4]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4633      	mov	r3, r6
 8006954:	462a      	mov	r2, r5
 8006956:	4621      	mov	r1, r4
 8006958:	f000 ffa5 	bl	80078a6 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006966 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006966:	b590      	push	{r4, r7, lr}
 8006968:	b087      	sub	sp, #28
 800696a:	af02      	add	r7, sp, #8
 800696c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b298      	uxth	r0, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	7899      	ldrb	r1, [r3, #2]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006986:	b29a      	uxth	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4623      	mov	r3, r4
 8006994:	f000 ff9b 	bl	80078ce <aci_l2cap_command_reject_event>

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd90      	pop	{r4, r7, pc}

080069a2 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80069a2:	b590      	push	{r4, r7, lr}
 80069a4:	b087      	sub	sp, #28
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b298      	uxth	r0, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	885b      	ldrh	r3, [r3, #2]
 80069bc:	b299      	uxth	r1, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	889b      	ldrh	r3, [r3, #4]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	88db      	ldrh	r3, [r3, #6]
 80069c8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4623      	mov	r3, r4
 80069d2:	f7fa fb35 	bl	8001040 <aci_gatt_attribute_modified_event>

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd90      	pop	{r4, r7, pc}

080069e0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fe37 	bl	800766a <aci_gatt_proc_timeout_event>

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	885b      	ldrh	r3, [r3, #2]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fa fbc3 	bl	80011b0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b298      	uxth	r0, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	7899      	ldrb	r1, [r3, #2]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8006a56:	f000 fe13 	bl	8007680 <aci_att_find_info_resp_event>

  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b0a6      	sub	sp, #152	; 0x98
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a84:	e02e      	b.n	8006ae4 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8006a86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	3398      	adds	r3, #152	; 0x98
 8006aa0:	443b      	add	r3, r7
 8006aa2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006aa6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006aaa:	3302      	adds	r3, #2
 8006aac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8006ab0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	3398      	adds	r3, #152	; 0x98
 8006aca:	443b      	add	r3, r7
 8006acc:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8006ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ade:	3301      	adds	r3, #1
 8006ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006af0:	4293      	cmp	r3, r2
 8006af2:	dbc8      	blt.n	8006a86 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8006af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b298      	uxth	r0, r3
 8006afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b00:	789b      	ldrb	r3, [r3, #2]
 8006b02:	f107 0208 	add.w	r2, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	f000 fdca 	bl	80076a0 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8006b0c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3798      	adds	r7, #152	; 0x98
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b298      	uxth	r0, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	7899      	ldrb	r1, [r3, #2]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8006b3a:	f000 fdbf 	bl	80076bc <aci_att_read_by_type_resp_event>

  return status;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b298      	uxth	r0, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8006b66:	461a      	mov	r2, r3
 8006b68:	f000 fdb8 	bl	80076dc <aci_att_read_resp_event>

  return status;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b298      	uxth	r0, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8006b94:	461a      	mov	r2, r3
 8006b96:	f000 fdaf 	bl	80076f8 <aci_att_read_blob_resp_event>

  return status;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b298      	uxth	r0, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 fda6 	bl	8007714 <aci_att_read_multiple_resp_event>

  return status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b298      	uxth	r0, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	7899      	ldrb	r1, [r3, #2]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8006bf4:	f000 fd9c 	bl	8007730 <aci_att_read_by_group_type_resp_event>

  return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8006c02:	b590      	push	{r4, r7, lr}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af02      	add	r7, sp, #8
 8006c08:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b298      	uxth	r0, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	885b      	ldrh	r3, [r3, #2]
 8006c1c:	b299      	uxth	r1, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	889b      	ldrh	r3, [r3, #4]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4623      	mov	r3, r4
 8006c30:	f000 fd8e 	bl	8007750 <aci_att_prepare_write_resp_event>

  return status;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd90      	pop	{r4, r7, pc}

08006c3e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fd8f 	bl	8007778 <aci_att_exec_write_resp_event>

  return status;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b298      	uxth	r0, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	b299      	uxth	r1, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8006c88:	f000 fd81 	bl	800778e <aci_gatt_indication_event>

  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	b299      	uxth	r1, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8006cba:	f7fa f9db 	bl	8001074 <aci_gatt_notification_event>

  return status;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	789b      	ldrb	r3, [r3, #2]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fa fa17 	bl	8001118 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b298      	uxth	r0, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	7899      	ldrb	r1, [r3, #2]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	795b      	ldrb	r3, [r3, #5]
 8006d1a:	f000 fd48 	bl	80077ae <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b298      	uxth	r0, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	b299      	uxth	r1, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006d4c:	f7fa f9ae 	bl	80010ac <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b298      	uxth	r0, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	b299      	uxth	r1, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8006d7e:	f000 fd2a 	bl	80077d6 <aci_gatt_write_permit_req_event>

  return status;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b298      	uxth	r0, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	b299      	uxth	r1, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	889b      	ldrh	r3, [r3, #4]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fd21 	bl	80077f6 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b0a6      	sub	sp, #152	; 0x98
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dde:	e019      	b.n	8006e14 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8006de0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	3398      	adds	r3, #152	; 0x98
 8006dfa:	443b      	add	r3, r7
 8006dfc:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006e00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006e04:	3302      	adds	r3, #2
 8006e06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0e:	3301      	adds	r3, #1
 8006e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e18:	789b      	ldrb	r3, [r3, #2]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e20:	4293      	cmp	r3, r2
 8006e22:	dbdd      	blt.n	8006de0 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8006e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b298      	uxth	r0, r3
 8006e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e30:	789b      	ldrb	r3, [r3, #2]
 8006e32:	f107 0208 	add.w	r2, r7, #8
 8006e36:	4619      	mov	r1, r3
 8006e38:	f000 fcec 	bl	8007814 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8006e3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3798      	adds	r7, #152	; 0x98
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	885b      	ldrh	r3, [r3, #2]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fa f98c 	bl	8001184 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fccf 	bl	8007830 <aci_gatt_server_confirmation_event>

  return status;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b298      	uxth	r0, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	b299      	uxth	r1, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	889b      	ldrh	r3, [r3, #4]
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	4623      	mov	r3, r4
 8006eca:	f000 fcbc 	bl	8007846 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd90      	pop	{r4, r7, pc}

08006ed8 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	b08b      	sub	sp, #44	; 0x2c
 8006edc:	af06      	add	r7, sp, #24
 8006ede:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781d      	ldrb	r5, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ef2:	b29e      	uxth	r6, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8006f12:	b289      	uxth	r1, r1
 8006f14:	68b8      	ldr	r0, [r7, #8]
 8006f16:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8006f1a:	b280      	uxth	r0, r0
 8006f1c:	68bc      	ldr	r4, [r7, #8]
 8006f1e:	7c64      	ldrb	r4, [r4, #17]
 8006f20:	9404      	str	r4, [sp, #16]
 8006f22:	9003      	str	r0, [sp, #12]
 8006f24:	9102      	str	r1, [sp, #8]
 8006f26:	9201      	str	r2, [sp, #4]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4673      	mov	r3, lr
 8006f2c:	4662      	mov	r2, ip
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	f7f9 ffa9 	bl	8000e88 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f40 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b0a4      	sub	sp, #144	; 0x90
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f60:	e0b3      	b.n	80070ca <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8006f62:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006f66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	440b      	add	r3, r1
 8006f76:	3301      	adds	r3, #1
 8006f78:	7819      	ldrb	r1, [r3, #0]
 8006f7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	3390      	adds	r3, #144	; 0x90
 8006f88:	443b      	add	r3, r7
 8006f8a:	3b88      	subs	r3, #136	; 0x88
 8006f8c:	460a      	mov	r2, r1
 8006f8e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006f90:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f94:	3301      	adds	r3, #1
 8006f96:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8006f9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006f9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4413      	add	r3, r2
 8006fac:	440b      	add	r3, r1
 8006fae:	3302      	adds	r3, #2
 8006fb0:	7819      	ldrb	r1, [r3, #0]
 8006fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	3390      	adds	r3, #144	; 0x90
 8006fc0:	443b      	add	r3, r7
 8006fc2:	3b87      	subs	r3, #135	; 0x87
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006fc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8006fd2:	f107 0108 	add.w	r1, r7, #8
 8006fd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	1c98      	adds	r0, r3, #2
 8006fe6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ff8:	4413      	add	r3, r2
 8006ffa:	3303      	adds	r3, #3
 8006ffc:	2206      	movs	r2, #6
 8006ffe:	4619      	mov	r1, r3
 8007000:	f001 f9f0 	bl	80083e4 <memcpy>
    size += 6;
 8007004:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007008:	3306      	adds	r3, #6
 800700a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800700e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007012:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	440b      	add	r3, r1
 8007022:	3309      	adds	r3, #9
 8007024:	7819      	ldrb	r1, [r3, #0]
 8007026:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	3390      	adds	r3, #144	; 0x90
 8007034:	443b      	add	r3, r7
 8007036:	3b80      	subs	r3, #128	; 0x80
 8007038:	460a      	mov	r2, r1
 800703a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800703c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007040:	3301      	adds	r3, #1
 8007042:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007046:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	3308      	adds	r3, #8
 8007056:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800705a:	4413      	add	r3, r2
 800705c:	1c99      	adds	r1, r3, #2
 800705e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	3390      	adds	r3, #144	; 0x90
 800706c:	443b      	add	r3, r7
 800706e:	3b7c      	subs	r3, #124	; 0x7c
 8007070:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007072:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	4413      	add	r3, r2
 8007084:	440b      	add	r3, r1
 8007086:	3309      	adds	r3, #9
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800708e:	4413      	add	r3, r2
 8007090:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007094:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b259      	sxtb	r1, r3
 80070a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	3390      	adds	r3, #144	; 0x90
 80070ae:	443b      	add	r3, r7
 80070b0:	3b78      	subs	r3, #120	; 0x78
 80070b2:	460a      	mov	r2, r1
 80070b4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80070b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80070ba:	3301      	adds	r3, #1
 80070bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80070c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070d6:	4293      	cmp	r3, r2
 80070d8:	f6ff af43 	blt.w	8006f62 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80070dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	4611      	mov	r1, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7f9 ff53 	bl	8000f94 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80070ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3790      	adds	r7, #144	; 0x90
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80070fa:	b590      	push	{r4, r7, lr}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af02      	add	r7, sp, #8
 8007100:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	7818      	ldrb	r0, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007114:	b299      	uxth	r1, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800711c:	b29a      	uxth	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007124:	b29c      	uxth	r4, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800712c:	b29b      	uxth	r3, r3
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4623      	mov	r3, r4
 8007132:	f000 f9bf 	bl	80074b4 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}

08007140 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	7818      	ldrb	r0, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800715a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007160:	461a      	mov	r2, r3
 8007162:	f000 f9bb 	bl	80074dc <hci_le_read_remote_used_features_complete_event>

  return status;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	895b      	ldrh	r3, [r3, #10]
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	f000 f9b1 	bl	80074f8 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b298      	uxth	r0, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b299      	uxth	r1, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	889b      	ldrh	r3, [r3, #4]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	b29c      	uxth	r4, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	891b      	ldrh	r3, [r3, #8]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4623      	mov	r3, r4
 80071d2:	f000 f99f 	bl	8007514 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd90      	pop	{r4, r7, pc}

080071e0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f000 f99e 	bl	800753c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f000 f995 	bl	8007554 <hci_le_generate_dhkey_complete_event>

  return status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007238:	b08d      	sub	sp, #52	; 0x34
 800723a:	af08      	add	r7, sp, #32
 800723c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f893 c000 	ldrb.w	ip, [r3]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007252:	fa1f fe83 	uxth.w	lr, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f893 8003 	ldrb.w	r8, [r3, #3]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007274:	b280      	uxth	r0, r0
 8007276:	68bc      	ldr	r4, [r7, #8]
 8007278:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800727c:	b2a4      	uxth	r4, r4
 800727e:	68bd      	ldr	r5, [r7, #8]
 8007280:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007284:	b2ad      	uxth	r5, r5
 8007286:	68be      	ldr	r6, [r7, #8]
 8007288:	7f76      	ldrb	r6, [r6, #29]
 800728a:	9606      	str	r6, [sp, #24]
 800728c:	9505      	str	r5, [sp, #20]
 800728e:	9404      	str	r4, [sp, #16]
 8007290:	9003      	str	r0, [sp, #12]
 8007292:	9102      	str	r1, [sp, #8]
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	464b      	mov	r3, r9
 800729a:	4642      	mov	r2, r8
 800729c:	4671      	mov	r1, lr
 800729e:	4660      	mov	r0, ip
 80072a0:	f000 f964 	bl	800756c <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080072b0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b0a6      	sub	sp, #152	; 0x98
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80072ca:	2300      	movs	r3, #0
 80072cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072d0:	e085      	b.n	80073de <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80072d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80072d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	4413      	add	r3, r2
 80072de:	3301      	adds	r3, #1
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	3398      	adds	r3, #152	; 0x98
 80072ea:	443b      	add	r3, r7
 80072ec:	3b90      	subs	r3, #144	; 0x90
 80072ee:	701a      	strb	r2, [r3, #0]
    size += 1;
 80072f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072f4:	3301      	adds	r3, #1
 80072f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80072fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80072fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	4413      	add	r3, r2
 8007306:	3302      	adds	r3, #2
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	3398      	adds	r3, #152	; 0x98
 8007312:	443b      	add	r3, r7
 8007314:	3b8f      	subs	r3, #143	; 0x8f
 8007316:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007318:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800731c:	3301      	adds	r3, #1
 800731e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007322:	f107 0208 	add.w	r2, r7, #8
 8007326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	4413      	add	r3, r2
 800732e:	1c98      	adds	r0, r3, #2
 8007330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800733a:	4413      	add	r3, r2
 800733c:	3303      	adds	r3, #3
 800733e:	2206      	movs	r2, #6
 8007340:	4619      	mov	r1, r3
 8007342:	f001 f84f 	bl	80083e4 <memcpy>
    size += 6;
 8007346:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800734a:	3306      	adds	r3, #6
 800734c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007350:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	4413      	add	r3, r2
 800735c:	3309      	adds	r3, #9
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	3398      	adds	r3, #152	; 0x98
 8007368:	443b      	add	r3, r7
 800736a:	3b88      	subs	r3, #136	; 0x88
 800736c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800736e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007372:	3301      	adds	r3, #1
 8007374:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007378:	f107 0208 	add.w	r2, r7, #8
 800737c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	3308      	adds	r3, #8
 8007384:	4413      	add	r3, r2
 8007386:	1c58      	adds	r0, r3, #1
 8007388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	3308      	adds	r3, #8
 8007390:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007394:	4413      	add	r3, r2
 8007396:	3302      	adds	r3, #2
 8007398:	2206      	movs	r2, #6
 800739a:	4619      	mov	r1, r3
 800739c:	f001 f822 	bl	80083e4 <memcpy>
    size += 6;
 80073a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073a4:	3306      	adds	r3, #6
 80073a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80073aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80073ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	4413      	add	r3, r2
 80073b6:	3310      	adds	r3, #16
 80073b8:	f993 2000 	ldrsb.w	r2, [r3]
 80073bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3398      	adds	r3, #152	; 0x98
 80073c4:	443b      	add	r3, r7
 80073c6:	3b81      	subs	r3, #129	; 0x81
 80073c8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80073ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073ce:	3301      	adds	r3, #1
 80073d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80073d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073d8:	3301      	adds	r3, #1
 80073da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ea:	4293      	cmp	r3, r2
 80073ec:	f6ff af71 	blt.w	80072d2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80073f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	f107 0208 	add.w	r2, r7, #8
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f8c9 	bl	8007594 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007402:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007406:	4618      	mov	r0, r3
 8007408:	3798      	adds	r7, #152	; 0x98
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	4603      	mov	r3, r0
 8007416:	71fb      	strb	r3, [r7, #7]
 8007418:	460b      	mov	r3, r1
 800741a:	80bb      	strh	r3, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800742c:	b490      	push	{r4, r7}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4623      	mov	r3, r4
 800743c:	71fb      	strb	r3, [r7, #7]
 800743e:	4603      	mov	r3, r0
 8007440:	80bb      	strh	r3, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	71bb      	strb	r3, [r7, #6]
 8007446:	4613      	mov	r3, r2
 8007448:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bc90      	pop	{r4, r7}
 8007452:	4770      	bx	lr

08007454 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	4603      	mov	r3, r0
 8007472:	6039      	str	r1, [r7, #0]
 8007474:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	460a      	mov	r2, r1
 80074a2:	71fb      	strb	r3, [r7, #7]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80074b4:	b490      	push	{r4, r7}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	71fb      	strb	r3, [r7, #7]
 80074c6:	4603      	mov	r3, r0
 80074c8:	80bb      	strh	r3, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	807b      	strh	r3, [r7, #2]
 80074ce:	4613      	mov	r3, r2
 80074d0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc90      	pop	{r4, r7}
 80074da:	4770      	bx	lr

080074dc <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	603a      	str	r2, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
 80074e8:	460b      	mov	r3, r1
 80074ea:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	80fb      	strh	r3, [r7, #6]
 8007504:	4613      	mov	r3, r2
 8007506:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007514:	b490      	push	{r4, r7}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	4623      	mov	r3, r4
 8007524:	80fb      	strh	r3, [r7, #6]
 8007526:	4603      	mov	r3, r0
 8007528:	80bb      	strh	r3, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	807b      	strh	r3, [r7, #2]
 800752e:	4613      	mov	r3, r2
 8007530:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bc90      	pop	{r4, r7}
 800753a:	4770      	bx	lr

0800753c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800756c:	b490      	push	{r4, r7}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	461a      	mov	r2, r3
 800757a:	4623      	mov	r3, r4
 800757c:	71fb      	strb	r3, [r7, #7]
 800757e:	4603      	mov	r3, r0
 8007580:	80bb      	strh	r3, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	71bb      	strb	r3, [r7, #6]
 8007586:	4613      	mov	r3, r2
 8007588:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bc90      	pop	{r4, r7}
 8007592:	4770      	bx	lr

08007594 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80075b0:	bf00      	nop
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	4603      	mov	r3, r0
 80075c2:	80fb      	strh	r3, [r7, #6]
 80075c4:	460b      	mov	r3, r1
 80075c6:	717b      	strb	r3, [r7, #5]
 80075c8:	4613      	mov	r3, r2
 80075ca:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	4603      	mov	r3, r0
 80075f6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007608:	bf00      	nop
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007612:	b480      	push	{r7}
 8007614:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007616:	bf00      	nop
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	4603      	mov	r3, r0
 800763e:	6039      	str	r1, [r7, #0]
 8007640:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	4603      	mov	r3, r0
 8007656:	460a      	mov	r2, r1
 8007658:	80fb      	strh	r3, [r7, #6]
 800765a:	4613      	mov	r3, r2
 800765c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	4603      	mov	r3, r0
 8007672:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4603      	mov	r3, r0
 800768a:	80fb      	strh	r3, [r7, #6]
 800768c:	460b      	mov	r3, r1
 800768e:	717b      	strb	r3, [r7, #5]
 8007690:	4613      	mov	r3, r2
 8007692:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	603a      	str	r2, [r7, #0]
 80076aa:	80fb      	strh	r3, [r7, #6]
 80076ac:	460b      	mov	r3, r1
 80076ae:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4603      	mov	r3, r0
 80076c6:	80fb      	strh	r3, [r7, #6]
 80076c8:	460b      	mov	r3, r1
 80076ca:	717b      	strb	r3, [r7, #5]
 80076cc:	4613      	mov	r3, r2
 80076ce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	603a      	str	r2, [r7, #0]
 80076e6:	80fb      	strh	r3, [r7, #6]
 80076e8:	460b      	mov	r3, r1
 80076ea:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	603a      	str	r2, [r7, #0]
 8007702:	80fb      	strh	r3, [r7, #6]
 8007704:	460b      	mov	r3, r1
 8007706:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	603a      	str	r2, [r7, #0]
 800771e:	80fb      	strh	r3, [r7, #6]
 8007720:	460b      	mov	r3, r1
 8007722:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4603      	mov	r3, r0
 800773a:	80fb      	strh	r3, [r7, #6]
 800773c:	460b      	mov	r3, r1
 800773e:	717b      	strb	r3, [r7, #5]
 8007740:	4613      	mov	r3, r2
 8007742:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007750:	b490      	push	{r4, r7}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4623      	mov	r3, r4
 8007760:	80fb      	strh	r3, [r7, #6]
 8007762:	4603      	mov	r3, r0
 8007764:	80bb      	strh	r3, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	807b      	strh	r3, [r7, #2]
 800776a:	4613      	mov	r3, r2
 800776c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bc90      	pop	{r4, r7}
 8007776:	4770      	bx	lr

08007778 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	4603      	mov	r3, r0
 8007798:	81fb      	strh	r3, [r7, #14]
 800779a:	460b      	mov	r3, r1
 800779c:	81bb      	strh	r3, [r7, #12]
 800779e:	4613      	mov	r3, r2
 80077a0:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 80077ae:	b490      	push	{r4, r7}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	461a      	mov	r2, r3
 80077bc:	4623      	mov	r3, r4
 80077be:	80fb      	strh	r3, [r7, #6]
 80077c0:	4603      	mov	r3, r0
 80077c2:	717b      	strb	r3, [r7, #5]
 80077c4:	460b      	mov	r3, r1
 80077c6:	807b      	strh	r3, [r7, #2]
 80077c8:	4613      	mov	r3, r2
 80077ca:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc90      	pop	{r4, r7}
 80077d4:	4770      	bx	lr

080077d6 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	4603      	mov	r3, r0
 80077e0:	81fb      	strh	r3, [r7, #14]
 80077e2:	460b      	mov	r3, r1
 80077e4:	81bb      	strh	r3, [r7, #12]
 80077e6:	4613      	mov	r3, r2
 80077e8:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4603      	mov	r3, r0
 80077fe:	80fb      	strh	r3, [r7, #6]
 8007800:	460b      	mov	r3, r1
 8007802:	80bb      	strh	r3, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	603a      	str	r2, [r7, #0]
 800781e:	80fb      	strh	r3, [r7, #6]
 8007820:	460b      	mov	r3, r1
 8007822:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007846:	b490      	push	{r4, r7}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	4623      	mov	r3, r4
 8007856:	80fb      	strh	r3, [r7, #6]
 8007858:	4603      	mov	r3, r0
 800785a:	80bb      	strh	r3, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
 8007860:	4613      	mov	r3, r2
 8007862:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bc90      	pop	{r4, r7}
 800786c:	4770      	bx	lr

0800786e <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	4603      	mov	r3, r0
 8007876:	460a      	mov	r2, r1
 8007878:	80fb      	strh	r3, [r7, #6]
 800787a:	4613      	mov	r3, r2
 800787c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	4603      	mov	r3, r0
 8007892:	603a      	str	r2, [r7, #0]
 8007894:	80fb      	strh	r3, [r7, #6]
 8007896:	460b      	mov	r3, r1
 8007898:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80078a6:	b490      	push	{r4, r7}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	461a      	mov	r2, r3
 80078b4:	4623      	mov	r3, r4
 80078b6:	80fb      	strh	r3, [r7, #6]
 80078b8:	4603      	mov	r3, r0
 80078ba:	717b      	strb	r3, [r7, #5]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
 80078c0:	4613      	mov	r3, r2
 80078c2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc90      	pop	{r4, r7}
 80078cc:	4770      	bx	lr

080078ce <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80078ce:	b490      	push	{r4, r7}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	461a      	mov	r2, r3
 80078dc:	4623      	mov	r3, r4
 80078de:	80fb      	strh	r3, [r7, #6]
 80078e0:	4603      	mov	r3, r0
 80078e2:	717b      	strb	r3, [r7, #5]
 80078e4:	460b      	mov	r3, r1
 80078e6:	807b      	strh	r3, [r7, #2]
 80078e8:	4613      	mov	r3, r2
 80078ea:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc90      	pop	{r4, r7}
 80078f4:	4770      	bx	lr

080078f6 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	4603      	mov	r3, r0
 80078fe:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	603a      	str	r2, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
 8007948:	460b      	mov	r3, r1
 800794a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	603a      	str	r2, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
 8007964:	460b      	mov	r3, r1
 8007966:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	603a      	str	r2, [r7, #0]
 800797e:	71fb      	strb	r3, [r7, #7]
 8007980:	460b      	mov	r3, r1
 8007982:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	2218      	movs	r2, #24
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fcf1 	bl	800838a <memset>
  rq.ogf = 0x03;
 80079a8:	2303      	movs	r3, #3
 80079aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80079ac:	2303      	movs	r3, #3
 80079ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80079b0:	1dfb      	adds	r3, r7, #7
 80079b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fa2c 	bl	8007e1c <hci_send_req>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da01      	bge.n	80079ce <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80079ca:	23ff      	movs	r3, #255	; 0xff
 80079cc:	e005      	b.n	80079da <hci_reset+0x4a>
  if (status) {
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <hci_reset+0x48>
    return status;
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	e000      	b.n	80079da <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b0cc      	sub	sp, #304	; 0x130
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	4602      	mov	r2, r0
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	6019      	str	r1, [r3, #0]
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80079fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fcbb 	bl	800838a <memset>
  uint8_t index_input = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a22:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007a26:	8812      	ldrh	r2, [r2, #0]
 8007a28:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a2a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007a2e:	3302      	adds	r3, #2
 8007a30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a38:	2218      	movs	r2, #24
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fca4 	bl	800838a <memset>
  rq.ogf = 0x05;
 8007a42:	2305      	movs	r3, #5
 8007a44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8007a48:	2305      	movs	r3, #5
 8007a4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a56:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007a66:	2304      	movs	r3, #4
 8007a68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 f9d2 	bl	8007e1c <hci_send_req>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da01      	bge.n	8007a82 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 8007a7e:	23ff      	movs	r3, #255	; 0xff
 8007a80:	e019      	b.n	8007ab6 <hci_read_rssi+0xd4>
  if (resp.Status) {
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <hci_read_rssi+0xba>
    return resp.Status;
 8007a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	e00c      	b.n	8007ab6 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007aa4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b0cc      	sub	sp, #304	; 0x130
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad0:	6019      	str	r1, [r3, #0]
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ada:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8007af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007afe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b06:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	1c58      	adds	r0, r3, #1
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2c:	221f      	movs	r2, #31
 8007b2e:	6819      	ldr	r1, [r3, #0]
 8007b30:	f000 fc58 	bl	80083e4 <memcpy>
  }
  index_input += 31;
 8007b34:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007b38:	331f      	adds	r3, #31
 8007b3a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b42:	2218      	movs	r2, #24
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fc1f 	bl	800838a <memset>
  rq.ogf = 0x08;
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007b52:	2309      	movs	r3, #9
 8007b54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b58:	f107 030c 	add.w	r3, r7, #12
 8007b5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b60:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007b64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b68:	f107 030b 	add.w	r3, r7, #11
 8007b6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b70:	2301      	movs	r3, #1
 8007b72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f94d 	bl	8007e1c <hci_send_req>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da01      	bge.n	8007b8c <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8007b88:	23ff      	movs	r3, #255	; 0xff
 8007b8a:	e00d      	b.n	8007ba8 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 8007b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b90:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <hci_le_set_scan_response_data+0xe6>
    return status;
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	e000      	b.n	8007ba8 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b08c      	sub	sp, #48	; 0x30
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007bba:	f107 030c 	add.w	r3, r7, #12
 8007bbe:	2209      	movs	r2, #9
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fbe1 	bl	800838a <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007bc8:	f107 0318 	add.w	r3, r7, #24
 8007bcc:	2218      	movs	r2, #24
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fbda 	bl	800838a <memset>
  rq.ogf = 0x08;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8007bda:	2318      	movs	r3, #24
 8007bdc:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8007be4:	2309      	movs	r3, #9
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8007be8:	f107 0318 	add.w	r3, r7, #24
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f914 	bl	8007e1c <hci_send_req>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da01      	bge.n	8007bfe <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8007bfa:	23ff      	movs	r3, #255	; 0xff
 8007bfc:	e00d      	b.n	8007c1a <hci_le_rand+0x68>
  if (resp.Status) {
 8007bfe:	7b3b      	ldrb	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <hci_le_rand+0x56>
    return resp.Status;
 8007c04:	7b3b      	ldrb	r3, [r7, #12]
 8007c06:	e008      	b.n	8007c1a <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f107 030d 	add.w	r3, r7, #13
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3730      	adds	r7, #48	; 0x30
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d001      	beq.n	8007c3c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e00c      	b.n	8007c56 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007c4a:	3b03      	subs	r3, #3
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8007c50:	2302      	movs	r3, #2
 8007c52:	e000      	b.n	8007c56 <verify_packet+0x34>
  
  return 0;      
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b0a6      	sub	sp, #152	; 0x98
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	81fb      	strh	r3, [r7, #14]
 8007c70:	460b      	mov	r3, r1
 8007c72:	81bb      	strh	r3, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c80:	b21a      	sxth	r2, r3
 8007c82:	89fb      	ldrh	r3, [r7, #14]
 8007c84:	029b      	lsls	r3, r3, #10
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	b21b      	sxth	r3, r3
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8007c94:	2301      	movs	r3, #1
 8007c96:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007c98:	f107 0318 	add.w	r3, r7, #24
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	8819      	ldrh	r1, [r3, #0]
 8007ca6:	789b      	ldrb	r3, [r3, #2]
 8007ca8:	8011      	strh	r1, [r2, #0]
 8007caa:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007cac:	f107 0318 	add.w	r3, r7, #24
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	7afa      	ldrb	r2, [r7, #11]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fb94 	bl	80083e4 <memcpy>
  
  if (hciContext.io.Send)
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <send_cmd+0x7c>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <send_cmd+0x7c>)
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	b292      	uxth	r2, r2
 8007ccc:	3204      	adds	r2, #4
 8007cce:	b291      	uxth	r1, r2
 8007cd0:	f107 0218 	add.w	r2, r7, #24
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3798      	adds	r7, #152	; 0x98
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000894 	.word	0x20000894

08007ce4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8007cee:	e00a      	b.n	8007d06 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8007cf0:	f107 030c 	add.w	r3, r7, #12
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6838      	ldr	r0, [r7, #0]
 8007cf8:	f000 fae8 	bl	80082cc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fa4f 	bl	80081a4 <list_insert_head>
  while (!list_is_empty(src_list))
 8007d06:	6838      	ldr	r0, [r7, #0]
 8007d08:	f000 fa2a 	bl	8008160 <list_is_empty>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0ee      	beq.n	8007cf0 <move_list+0xc>
  }
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007d22:	e009      	b.n	8007d38 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4809      	ldr	r0, [pc, #36]	; (8007d50 <free_event_list+0x34>)
 8007d2a:	f000 faa8 	bl	800827e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	4808      	ldr	r0, [pc, #32]	; (8007d54 <free_event_list+0x38>)
 8007d34:	f000 fa5c 	bl	80081f0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007d38:	4806      	ldr	r0, [pc, #24]	; (8007d54 <free_event_list+0x38>)
 8007d3a:	f000 faee 	bl	800831a <list_get_size>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	ddef      	ble.n	8007d24 <free_event_list+0x8>
  }
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000314 	.word	0x20000314
 8007d54:	2000030c 	.word	0x2000030c

08007d58 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8007d68:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <hci_init+0x74>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8007d6e:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <hci_init+0x78>)
 8007d70:	f000 f9e6 	bl	8008140 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8007d74:	4817      	ldr	r0, [pc, #92]	; (8007dd4 <hci_init+0x7c>)
 8007d76:	f000 f9e3 	bl	8008140 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8007d7a:	f7f9 fced 	bl	8001758 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
 8007d82:	e00c      	b.n	8007d9e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	228c      	movs	r2, #140	; 0x8c
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <hci_init+0x80>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	480f      	ldr	r0, [pc, #60]	; (8007dd0 <hci_init+0x78>)
 8007d94:	f000 fa2c 	bl	80081f0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	2b09      	cmp	r3, #9
 8007da2:	d9ef      	bls.n	8007d84 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <hci_init+0x74>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <hci_init+0x5c>
 8007dac:	4b07      	ldr	r3, [pc, #28]	; (8007dcc <hci_init+0x74>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <hci_init+0x74>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <hci_init+0x6a>
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <hci_init+0x74>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4798      	blx	r3
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000894 	.word	0x20000894
 8007dd0:	2000030c 	.word	0x2000030c
 8007dd4:	20000314 	.word	0x20000314
 8007dd8:	2000031c 	.word	0x2000031c

08007ddc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a0b      	ldr	r2, [pc, #44]	; (8007e18 <hci_register_io_bus+0x3c>)
 8007dea:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <hci_register_io_bus+0x3c>)
 8007df2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <hci_register_io_bus+0x3c>)
 8007dfa:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <hci_register_io_bus+0x3c>)
 8007e02:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <hci_register_io_bus+0x3c>)
 8007e0a:	6093      	str	r3, [r2, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	20000894 	.word	0x20000894

08007e1c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	; 0x38
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	885b      	ldrh	r3, [r3, #2]
 8007e2c:	b21b      	sxth	r3, r3
 8007e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e32:	b21a      	sxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	029b      	lsls	r3, r3, #10
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f978 	bl	8008140 <list_init_head>

  free_event_list();
 8007e50:	f7ff ff64 	bl	8007d1c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8818      	ldrh	r0, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8859      	ldrh	r1, [r3, #2]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f7ff fefd 	bl	8007c64 <send_cmd>
  
  if (async)
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <hci_send_req+0x58>
  {
    return 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e0e2      	b.n	800803a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8007e74:	f7fa f994 	bl	80021a0 <HAL_GetTick>
 8007e78:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007e7a:	f7fa f991 	bl	80021a0 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e88:	f200 80b3 	bhi.w	8007ff2 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007e8c:	486d      	ldr	r0, [pc, #436]	; (8008044 <hci_send_req+0x228>)
 8007e8e:	f000 f967 	bl	8008160 <list_is_empty>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d000      	beq.n	8007e9a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007e98:	e7ef      	b.n	8007e7a <hci_send_req+0x5e>
      {
        break;
 8007e9a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8007e9c:	f107 0310 	add.w	r3, r7, #16
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4868      	ldr	r0, [pc, #416]	; (8008044 <hci_send_req+0x228>)
 8007ea4:	f000 f9eb 	bl	800827e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d17f      	bne.n	8007fb6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	3301      	adds	r3, #1
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007eca:	3b03      	subs	r3, #3
 8007ecc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed4:	d04c      	beq.n	8007f70 <hci_send_req+0x154>
 8007ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed8:	dc68      	bgt.n	8007fac <hci_send_req+0x190>
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	f000 808b 	beq.w	8007ff6 <hci_send_req+0x1da>
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	dc63      	bgt.n	8007fac <hci_send_req+0x190>
 8007ee4:	2b0e      	cmp	r3, #14
 8007ee6:	d023      	beq.n	8007f30 <hci_send_req+0x114>
 8007ee8:	2b0f      	cmp	r3, #15
 8007eea:	d15f      	bne.n	8007fac <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	885b      	ldrh	r3, [r3, #2]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d17e      	bne.n	8007ffa <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b0f      	cmp	r3, #15
 8007f02:	d004      	beq.n	8007f0e <hci_send_req+0xf2>
          if (cs->status) {
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d051      	beq.n	8007fb0 <hci_send_req+0x194>
            goto failed;
 8007f0c:	e078      	b.n	8008000 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	bf28      	it	cs
 8007f18:	461a      	movcs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f2a:	f000 fa5b 	bl	80083e4 <memcpy>
        goto done;
 8007f2e:	e078      	b.n	8008022 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d15d      	bne.n	8007ffe <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	3303      	adds	r3, #3
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	3b03      	subs	r3, #3
 8007f4c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	bf28      	it	cs
 8007f58:	461a      	movcs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6918      	ldr	r0, [r3, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f6a:	f000 fa3b 	bl	80083e4 <memcpy>
        goto done;
 8007f6e:	e058      	b.n	8008022 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d118      	bne.n	8007fb4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	bf28      	it	cs
 8007f92:	461a      	movcs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6918      	ldr	r0, [r3, #16]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	1c59      	adds	r1, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f000 fa1d 	bl	80083e4 <memcpy>
        goto done;
 8007faa:	e03a      	b.n	8008022 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8007fac:	bf00      	nop
 8007fae:	e002      	b.n	8007fb6 <hci_send_req+0x19a>
          break;
 8007fb0:	bf00      	nop
 8007fb2:	e000      	b.n	8007fb6 <hci_send_req+0x19a>
          break;
 8007fb4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8007fb6:	4824      	ldr	r0, [pc, #144]	; (8008048 <hci_send_req+0x22c>)
 8007fb8:	f000 f8d2 	bl	8008160 <list_is_empty>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <hci_send_req+0x1c2>
 8007fc2:	4820      	ldr	r0, [pc, #128]	; (8008044 <hci_send_req+0x228>)
 8007fc4:	f000 f8cc 	bl	8008160 <list_is_empty>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	481d      	ldr	r0, [pc, #116]	; (8008048 <hci_send_req+0x22c>)
 8007fd4:	f000 f90c 	bl	80081f0 <list_insert_tail>
      hciReadPacket=NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e008      	b.n	8007ff0 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f902 	bl	80081f0 <list_insert_tail>
      hciReadPacket=NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
  {
 8007ff0:	e740      	b.n	8007e74 <hci_send_req+0x58>
        goto failed;
 8007ff2:	bf00      	nop
 8007ff4:	e004      	b.n	8008000 <hci_send_req+0x1e4>
        goto failed;
 8007ff6:	bf00      	nop
 8007ff8:	e002      	b.n	8008000 <hci_send_req+0x1e4>
          goto failed;
 8007ffa:	bf00      	nop
 8007ffc:	e000      	b.n	8008000 <hci_send_req+0x1e4>
          goto failed;
 8007ffe:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4619      	mov	r1, r3
 800800a:	480f      	ldr	r0, [pc, #60]	; (8008048 <hci_send_req+0x22c>)
 800800c:	f000 f8ca 	bl	80081a4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4619      	mov	r1, r3
 8008016:	480b      	ldr	r0, [pc, #44]	; (8008044 <hci_send_req+0x228>)
 8008018:	f7ff fe64 	bl	8007ce4 <move_list>

  return -1;
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	e00b      	b.n	800803a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4619      	mov	r1, r3
 8008026:	4808      	ldr	r0, [pc, #32]	; (8008048 <hci_send_req+0x22c>)
 8008028:	f000 f8bc 	bl	80081a4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800802c:	f107 0308 	add.w	r3, r7, #8
 8008030:	4619      	mov	r1, r3
 8008032:	4804      	ldr	r0, [pc, #16]	; (8008044 <hci_send_req+0x228>)
 8008034:	f7ff fe56 	bl	8007ce4 <move_list>

  return 0;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3738      	adds	r7, #56	; 0x38
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000314 	.word	0x20000314
 8008048:	2000030c 	.word	0x2000030c

0800804c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008056:	e013      	b.n	8008080 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	4619      	mov	r1, r3
 800805c:	480e      	ldr	r0, [pc, #56]	; (8008098 <hci_user_evt_proc+0x4c>)
 800805e:	f000 f90e 	bl	800827e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008062:	4b0e      	ldr	r3, [pc, #56]	; (800809c <hci_user_evt_proc+0x50>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <hci_user_evt_proc+0x50>)
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	3208      	adds	r2, #8
 8008072:	4610      	mov	r0, r2
 8008074:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4619      	mov	r1, r3
 800807a:	4809      	ldr	r0, [pc, #36]	; (80080a0 <hci_user_evt_proc+0x54>)
 800807c:	f000 f8b8 	bl	80081f0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <hci_user_evt_proc+0x4c>)
 8008082:	f000 f86d 	bl	8008160 <list_is_empty>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0e5      	beq.n	8008058 <hci_user_evt_proc+0xc>
  }
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000314 	.word	0x20000314
 800809c:	20000894 	.word	0x20000894
 80080a0:	2000030c 	.word	0x2000030c

080080a4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80080b4:	481f      	ldr	r0, [pc, #124]	; (8008134 <hci_notify_asynch_evt+0x90>)
 80080b6:	f000 f853 	bl	8008160 <list_is_empty>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d132      	bne.n	8008126 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	4619      	mov	r1, r3
 80080c6:	481b      	ldr	r0, [pc, #108]	; (8008134 <hci_notify_asynch_evt+0x90>)
 80080c8:	f000 f8d9 	bl	800827e <list_remove_head>
    
    if (hciContext.io.Receive)
 80080cc:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <hci_notify_asynch_evt+0x94>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d02a      	beq.n	800812a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80080d4:	4b18      	ldr	r3, [pc, #96]	; (8008138 <hci_notify_asynch_evt+0x94>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	3208      	adds	r2, #8
 80080dc:	2180      	movs	r1, #128	; 0x80
 80080de:	4610      	mov	r0, r2
 80080e0:	4798      	blx	r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80080e6:	7cfb      	ldrb	r3, [r7, #19]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d016      	beq.n	800811a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	7cfa      	ldrb	r2, [r7, #19]
 80080f0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fd93 	bl	8007c22 <verify_packet>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4619      	mov	r1, r3
 8008106:	480d      	ldr	r0, [pc, #52]	; (800813c <hci_notify_asynch_evt+0x98>)
 8008108:	f000 f872 	bl	80081f0 <list_insert_tail>
 800810c:	e00d      	b.n	800812a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4619      	mov	r1, r3
 8008112:	4808      	ldr	r0, [pc, #32]	; (8008134 <hci_notify_asynch_evt+0x90>)
 8008114:	f000 f846 	bl	80081a4 <list_insert_head>
 8008118:	e007      	b.n	800812a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4619      	mov	r1, r3
 800811e:	4805      	ldr	r0, [pc, #20]	; (8008134 <hci_notify_asynch_evt+0x90>)
 8008120:	f000 f840 	bl	80081a4 <list_insert_head>
 8008124:	e001      	b.n	800812a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008126:	2301      	movs	r3, #1
 8008128:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800812a:	697b      	ldr	r3, [r7, #20]
  
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	2000030c 	.word	0x2000030c
 8008138:	20000894 	.word	0x20000894
 800813c:	20000314 	.word	0x20000314

08008140 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	605a      	str	r2, [r3, #4]
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008168:	f3ef 8310 	mrs	r3, PRIMASK
 800816c:	60fb      	str	r3, [r7, #12]
  return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008172:	b672      	cpsid	i
}
 8008174:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d102      	bne.n	8008186 <list_is_empty+0x26>
  {
    return_value = 1;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
 8008184:	e001      	b.n	800818a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f383 8810 	msr	PRIMASK, r3
}
 8008194:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ae:	f3ef 8310 	mrs	r3, PRIMASK
 80081b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80081b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80081b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80081b8:	b672      	cpsid	i
}
 80081ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f383 8810 	msr	PRIMASK, r3
}
 80081e2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fa:	f3ef 8310 	mrs	r3, PRIMASK
 80081fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008200:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008204:	b672      	cpsid	i
}
 8008206:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f383 8810 	msr	PRIMASK, r3
}
 800822e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008244:	f3ef 8310 	mrs	r3, PRIMASK
 8008248:	60fb      	str	r3, [r7, #12]
  return(result);
 800824a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800824c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800824e:	b672      	cpsid	i
}
 8008250:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6852      	ldr	r2, [r2, #4]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f383 8810 	msr	PRIMASK, r3
}
 8008270:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008288:	f3ef 8310 	mrs	r3, PRIMASK
 800828c:	60fb      	str	r3, [r7, #12]
  return(result);
 800828e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008292:	b672      	cpsid	i
}
 8008294:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff ffca 	bl	800823c <list_remove_node>
  (*node)->next = NULL;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2200      	movs	r2, #0
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f383 8810 	msr	PRIMASK, r3
}
 80082c2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80082c4:	bf00      	nop
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d6:	f3ef 8310 	mrs	r3, PRIMASK
 80082da:	60fb      	str	r3, [r7, #12]
  return(result);
 80082dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80082de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082e0:	b672      	cpsid	i
}
 80082e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff ffa3 	bl	800823c <list_remove_node>
  (*node)->next = NULL;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	605a      	str	r2, [r3, #4]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f383 8810 	msr	PRIMASK, r3
}
 8008310:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800831a:	b480      	push	{r7}
 800831c:	b089      	sub	sp, #36	; 0x24
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008326:	f3ef 8310 	mrs	r3, PRIMASK
 800832a:	613b      	str	r3, [r7, #16]
  return(result);
 800832c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800832e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008330:	b672      	cpsid	i
}
 8008332:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800833a:	e005      	b.n	8008348 <list_get_size+0x2e>
  {
    size++;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	3301      	adds	r3, #1
 8008340:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d1f5      	bne.n	800833c <list_get_size+0x22>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800835c:	69fb      	ldr	r3, [r7, #28]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3724      	adds	r7, #36	; 0x24
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <memcmp>:
 800836a:	b510      	push	{r4, lr}
 800836c:	3901      	subs	r1, #1
 800836e:	4402      	add	r2, r0
 8008370:	4290      	cmp	r0, r2
 8008372:	d101      	bne.n	8008378 <memcmp+0xe>
 8008374:	2000      	movs	r0, #0
 8008376:	e005      	b.n	8008384 <memcmp+0x1a>
 8008378:	7803      	ldrb	r3, [r0, #0]
 800837a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800837e:	42a3      	cmp	r3, r4
 8008380:	d001      	beq.n	8008386 <memcmp+0x1c>
 8008382:	1b18      	subs	r0, r3, r4
 8008384:	bd10      	pop	{r4, pc}
 8008386:	3001      	adds	r0, #1
 8008388:	e7f2      	b.n	8008370 <memcmp+0x6>

0800838a <memset>:
 800838a:	4402      	add	r2, r0
 800838c:	4603      	mov	r3, r0
 800838e:	4293      	cmp	r3, r2
 8008390:	d100      	bne.n	8008394 <memset+0xa>
 8008392:	4770      	bx	lr
 8008394:	f803 1b01 	strb.w	r1, [r3], #1
 8008398:	e7f9      	b.n	800838e <memset+0x4>
	...

0800839c <__libc_init_array>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4d0d      	ldr	r5, [pc, #52]	; (80083d4 <__libc_init_array+0x38>)
 80083a0:	4c0d      	ldr	r4, [pc, #52]	; (80083d8 <__libc_init_array+0x3c>)
 80083a2:	1b64      	subs	r4, r4, r5
 80083a4:	10a4      	asrs	r4, r4, #2
 80083a6:	2600      	movs	r6, #0
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	d109      	bne.n	80083c0 <__libc_init_array+0x24>
 80083ac:	4d0b      	ldr	r5, [pc, #44]	; (80083dc <__libc_init_array+0x40>)
 80083ae:	4c0c      	ldr	r4, [pc, #48]	; (80083e0 <__libc_init_array+0x44>)
 80083b0:	f000 f826 	bl	8008400 <_init>
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	2600      	movs	r6, #0
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	d105      	bne.n	80083ca <__libc_init_array+0x2e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c4:	4798      	blx	r3
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7ee      	b.n	80083a8 <__libc_init_array+0xc>
 80083ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ce:	4798      	blx	r3
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7f2      	b.n	80083ba <__libc_init_array+0x1e>
 80083d4:	080086c4 	.word	0x080086c4
 80083d8:	080086c4 	.word	0x080086c4
 80083dc:	080086c4 	.word	0x080086c4
 80083e0:	080086c8 	.word	0x080086c8

080083e4 <memcpy>:
 80083e4:	440a      	add	r2, r1
 80083e6:	4291      	cmp	r1, r2
 80083e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ec:	d100      	bne.n	80083f0 <memcpy+0xc>
 80083ee:	4770      	bx	lr
 80083f0:	b510      	push	{r4, lr}
 80083f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fa:	4291      	cmp	r1, r2
 80083fc:	d1f9      	bne.n	80083f2 <memcpy+0xe>
 80083fe:	bd10      	pop	{r4, pc}

08008400 <_init>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr

0800840c <_fini>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr
