
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a218  0800a218  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a220  0800a220  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a220  0800a220  0001a220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a224  0800a224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800a228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  2000009c  0800a2c4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0800a2c4  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001da25  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009b  00000000  00000000  0003db34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e4e2  00000000  00000000  0003dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039d5  00000000  00000000  0005c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001870  00000000  00000000  0005fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb1b2  00000000  00000000  000612f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001305  00000000  00000000  0015c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b229  00000000  00000000  0015d7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fe8  00000000  00000000  001889d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 fff6 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fc85 	bl	8008ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 fade 	bl	8001b5e <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	0800a228 	.word	0x0800a228
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 80005b4:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 80005b8:	20000a38 	.word	0x20000a38

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <BLUENRG2_vInit>:
static void    Connection_StateMachine( void );
static uint8_t BLUENRG2__u8FindDeviceName( uint8_t u8DataLen, uint8_t * pu8Data );
static void    BLUENRG2__vAttributeModifiedCB( uint16_t handle, uint8_t data_length, uint8_t *att_data );

void BLUENRG2_vInit( void )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

    BLUENRG2__vUserInit();
 80005c4:	f000 fa58 	bl	8000a78 <BLUENRG2__vUserInit>

    hci_init( APP_UserEvtRx, NULL );
 80005c8:	2100      	movs	r1, #0
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <BLUENRG2_vInit+0x3c>)
 80005cc:	f007 ff08 	bl	80083e0 <hci_init>

    PRINT_DBG( "BlueNRG-2 BLE Sample Application\r\n" );
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <BLUENRG2_vInit+0x40>)
 80005d2:	f008 fb25 	bl	8008c20 <puts>

    if( BLUENRG2__u8CentralAppInit() != BLE_STATUS_SUCCESS )
 80005d6:	f000 f9a7 	bl	8000928 <BLUENRG2__u8CentralAppInit>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <BLUENRG2_vInit+0x28>
    {
        PRINT_DBG( "BLUENRG2__u8CentralAppInit() Failed\r\n" );
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <BLUENRG2_vInit+0x44>)
 80005e2:	f008 fb1d 	bl	8008c20 <puts>
        while( 1 )
 80005e6:	e7fe      	b.n	80005e6 <BLUENRG2_vInit+0x26>
            ;
    }

    BLUENRG_memcpy( &au8DevLocalName[1U], BLUENRG2_DEV_NAME, BLUENRG2_DEV_NAME_LEN);
 80005e8:	2211      	movs	r2, #17
 80005ea:	4907      	ldr	r1, [pc, #28]	; (8000608 <BLUENRG2_vInit+0x48>)
 80005ec:	4807      	ldr	r0, [pc, #28]	; (800060c <BLUENRG2_vInit+0x4c>)
 80005ee:	f008 fc81 	bl	8008ef4 <memcpy>

    

    PRINT_DBG( "BLE Stack Initialized & Device Configured\r\n" );
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <BLUENRG2_vInit+0x50>)
 80005f4:	f008 fb14 	bl	8008c20 <puts>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	0800169d 	.word	0x0800169d
 8000600:	08009944 	.word	0x08009944
 8000604:	08009968 	.word	0x08009968
 8000608:	08009990 	.word	0x08009990
 800060c:	2000000d 	.word	0x2000000d
 8000610:	080099a4 	.word	0x080099a4

08000614 <BLUENRG2_vProcess>:

void BLUENRG2_vProcess( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

    hci_user_evt_proc();
 8000618:	f008 f85c 	bl	80086d4 <hci_user_evt_proc>
    BLUENRG2__vUserProcess();
 800061c:	f000 fc5c 	bl	8000ed8 <BLUENRG2__vUserProcess>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData( uint8_t *data_buffer, uint8_t Nb_bytes )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
    // {
    //   PRINT_DBG("%d", data_buffer[i]);
    // }
    // fflush(stdout);

    if( 1U == data_buffer[0] )
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <receiveData+0x24>
    {
        APP__u32RxDataCnt++;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <receiveData+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <receiveData+0x2c>)
 8000640:	6013      	str	r3, [r2, #0]
        PRINT_DBG( "[RX] Notified\r\n" );
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <receiveData+0x30>)
 8000644:	f008 faec 	bl	8008c20 <puts>
    }
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000d0 	.word	0x200000d0
 8000654:	080099d0 	.word	0x080099d0

08000658 <BLUENRG2__vResetDiscoveryContext>:
 * Description    : Reset the discovery context.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vResetDiscoveryContext( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
    discovery.check_disc_proc_timer = FALSE;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
    discovery.check_disc_mode_timer = FALSE;
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 8000666:	2200      	movs	r2, #0
 8000668:	705a      	strb	r2, [r3, #1]
    discovery.is_device_found       = FALSE;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	709a      	strb	r2, [r3, #2]
    discovery.do_connect            = FALSE;
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
    discovery.startTime             = 0;
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
    discovery.device_state          = INIT_STATE;
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <BLUENRG2__vResetDiscoveryContext+0xb0>)
 800067e:	2200      	movs	r2, #0
 8000680:	821a      	strh	r2, [r3, #16]
    BLUENRG_memset( &discovery.device_found_address[0], 0, 6 );
 8000682:	2206      	movs	r2, #6
 8000684:	2100      	movs	r1, #0
 8000686:	4821      	ldr	r0, [pc, #132]	; (800070c <BLUENRG2__vResetDiscoveryContext+0xb4>)
 8000688:	f008 fbba 	bl	8008e00 <memset>
    BLUENRG2__u8DeviceRole = 0xFF;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <BLUENRG2__vResetDiscoveryContext+0xb8>)
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	701a      	strb	r2, [r3, #0]
    mtu_exchanged          = 0;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <BLUENRG2__vResetDiscoveryContext+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
    mtu_exchanged_wait     = 0;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <BLUENRG2__vResetDiscoveryContext+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
    write_char_len         = CHAR_VALUE_LENGTH - 3;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <BLUENRG2__vResetDiscoveryContext+0xc4>)
 80006a0:	223c      	movs	r2, #60	; 0x3c
 80006a2:	801a      	strh	r2, [r3, #0]

    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 80006a4:	2300      	movs	r3, #0
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	e026      	b.n	80006f8 <BLUENRG2__vResetDiscoveryContext+0xa0>
    {
        data[i] = 0x31 + ( i % 10 );
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <BLUENRG2__vResetDiscoveryContext+0xc8>)
 80006ae:	fba3 1302 	umull	r1, r3, r3, r2
 80006b2:	08d9      	lsrs	r1, r3, #3
 80006b4:	460b      	mov	r3, r1
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	3231      	adds	r2, #49	; 0x31
 80006c6:	b2d1      	uxtb	r1, r2
 80006c8:	4a16      	ldr	r2, [pc, #88]	; (8000724 <BLUENRG2__vResetDiscoveryContext+0xcc>)
 80006ca:	54d1      	strb	r1, [r2, r3]
        if( ( i + 1 ) % 10 == 0 )
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	1c59      	adds	r1, r3, #1
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <BLUENRG2__vResetDiscoveryContext+0xd0>)
 80006d2:	fb83 2301 	smull	r2, r3, r3, r1
 80006d6:	109a      	asrs	r2, r3, #2
 80006d8:	17cb      	asrs	r3, r1, #31
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1aca      	subs	r2, r1, r3
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d103      	bne.n	80006f2 <BLUENRG2__vResetDiscoveryContext+0x9a>
        {
            data[i] = 'x';
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <BLUENRG2__vResetDiscoveryContext+0xcc>)
 80006ee:	2178      	movs	r1, #120	; 0x78
 80006f0:	54d1      	strb	r1, [r2, r3]
    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	3301      	adds	r3, #1
 80006f6:	80fb      	strh	r3, [r7, #6]
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	2b3b      	cmp	r3, #59	; 0x3b
 80006fc:	d9d5      	bls.n	80006aa <BLUENRG2__vResetDiscoveryContext+0x52>
        }
    }
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b8 	.word	0x200000b8
 800070c:	200000c1 	.word	0x200000c1
 8000710:	20000008 	.word	0x20000008
 8000714:	200000f8 	.word	0x200000f8
 8000718:	200000f9 	.word	0x200000f9
 800071c:	2000000a 	.word	0x2000000a
 8000720:	cccccccd 	.word	0xcccccccd
 8000724:	200000fc 	.word	0x200000fc
 8000728:	66666667 	.word	0x66666667

0800072c <BLUENRG2__u8PrintBLEFwInfo>:
 * Description    : Setup the device address.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static uint8_t BLUENRG2__u8PrintBLEFwInfo( void )
{
 800072c:	b5b0      	push	{r4, r5, r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af08      	add	r7, sp, #32
    uint16_t u16DTMBuildNum;

    uint8_t  u8BLEStackVerMajor, u8BLEStackVerMinor, u8BLEStackVerPatch, u8BLEStackDevelopment;
    uint16_t u16BLEStackVariant, u16BLEStackBuildNum;

    uint8_t au8Alphabet[] = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <BLUENRG2__u8PrintBLEFwInfo+0xec>)
 8000734:	1d3c      	adds	r4, r7, #4
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000740:	c403      	stmia	r4!, {r0, r1}
 8000742:	8022      	strh	r2, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c13      	lsrs	r3, r2, #16
 8000748:	7023      	strb	r3, [r4, #0]
                              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };

    uint8_t u8Status = aci_hal_get_firmware_details(
 800074a:	f107 042b 	add.w	r4, r7, #43	; 0x2b
 800074e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000752:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000756:	f107 002e 	add.w	r0, r7, #46	; 0x2e
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	9306      	str	r3, [sp, #24]
 8000760:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000764:	9305      	str	r3, [sp, #20]
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	9304      	str	r3, [sp, #16]
 800076c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000770:	9303      	str	r3, [sp, #12]
 8000772:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4623      	mov	r3, r4
 8000786:	f006 f87c 	bl	8006882 <aci_hal_get_firmware_details>
 800078a:	4603      	mov	r3, r0
 800078c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    &u8DTMVerMajor, &u8DTMVerMinor, &u8DTMVerPatch, &u8DTMVerVariant, &u16DTMBuildNum, &u8BLEStackVerMajor,
    &u8BLEStackVerMinor, &u8BLEStackVerPatch, &u8BLEStackDevelopment, &u16BLEStackVariant, &u16BLEStackBuildNum );

    PRINT_DBG( "\r\n--------------------------------------------------------\r\n\n" );
 8000790:	4822      	ldr	r0, [pc, #136]	; (800081c <BLUENRG2__u8PrintBLEFwInfo+0xf0>)
 8000792:	f008 fa45 	bl	8008c20 <puts>
    PRINT_DBG( " Lumen BLE Central App v%d.%d.%d \r\n", 0, 0, 0 );
 8000796:	2300      	movs	r3, #0
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	4820      	ldr	r0, [pc, #128]	; (8000820 <BLUENRG2__u8PrintBLEFwInfo+0xf4>)
 800079e:	f008 f9d9 	bl	8008b54 <iprintf>

    if( u8Status == BLE_STATUS_SUCCESS )
 80007a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d12c      	bne.n	8000804 <BLUENRG2__u8PrintBLEFwInfo+0xd8>
    {
        PRINT_DBG( "- BlueNRG-2 FW v%d.%d%c \r\n", u8BLEStackVerMajor, u8BLEStackVerMinor,
 80007aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ae:	4619      	mov	r1, r3
 80007b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007b4:	461a      	mov	r2, r3
 80007b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ba:	3330      	adds	r3, #48	; 0x30
 80007bc:	443b      	add	r3, r7
 80007be:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <BLUENRG2__u8PrintBLEFwInfo+0xf8>)
 80007c4:	f008 f9c6 	bl	8008b54 <iprintf>
                   au8Alphabet[u8BLEStackVerPatch] );

        PRINT_DBG( "- DTM %s v%d.%d%c \r\n",
 80007c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d007      	beq.n	80007e0 <BLUENRG2__u8PrintBLEFwInfo+0xb4>
 80007d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d101      	bne.n	80007dc <BLUENRG2__u8PrintBLEFwInfo+0xb0>
 80007d8:	4913      	ldr	r1, [pc, #76]	; (8000828 <BLUENRG2__u8PrintBLEFwInfo+0xfc>)
 80007da:	e002      	b.n	80007e2 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 80007dc:	4913      	ldr	r1, [pc, #76]	; (800082c <BLUENRG2__u8PrintBLEFwInfo+0x100>)
 80007de:	e000      	b.n	80007e2 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 80007e0:	4913      	ldr	r1, [pc, #76]	; (8000830 <BLUENRG2__u8PrintBLEFwInfo+0x104>)
 80007e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007e6:	461a      	mov	r2, r3
 80007e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007ec:	4618      	mov	r0, r3
 80007ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007f2:	3330      	adds	r3, #48	; 0x30
 80007f4:	443b      	add	r3, r7
 80007f6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4603      	mov	r3, r0
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <BLUENRG2__u8PrintBLEFwInfo+0x108>)
 8000800:	f008 f9a8 	bl	8008b54 <iprintf>
                   u8DTMVerVariant == 0x01 ? "UART" : ( u8DTMVerVariant == 0x02 ? "SPI" : "Unknown" ), u8DTMVerMajor,
                   u8DTMVerMinor, au8Alphabet[u8DTMVerPatch] );
    }
    PRINT_DBG( "\r\n" );
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <BLUENRG2__u8PrintBLEFwInfo+0x10c>)
 8000806:	f008 fa0b 	bl	8008c20 <puts>

    return u8Status;
 800080a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800080e:	4618      	mov	r0, r3
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bdb0      	pop	{r4, r5, r7, pc}
 8000816:	bf00      	nop
 8000818:	08009a90 	.word	0x08009a90
 800081c:	080099e0 	.word	0x080099e0
 8000820:	08009a20 	.word	0x08009a20
 8000824:	08009a44 	.word	0x08009a44
 8000828:	08009a60 	.word	0x08009a60
 800082c:	08009a64 	.word	0x08009a64
 8000830:	08009a6c 	.word	0x08009a6c
 8000834:	08009a74 	.word	0x08009a74
 8000838:	08009a8c 	.word	0x08009a8c

0800083c <BLUENRG2__u8FindDeviceName>:
 * Input          : Data length.
 *                  Data value
 * Return         : TRUE if the local name found is the expected one, FALSE otherwise.
 *******************************************************************************/
static uint8_t BLUENRG2__u8FindDeviceName( uint8_t  u8DataLen, uint8_t *pu8Data )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Index = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]

    while( u8Index < u8DataLen )
 800084c:	e031      	b.n	80008b2 <BLUENRG2__u8FindDeviceName+0x76>
    {
        /* Advertising data fields: len, type, values */
        /* Check if field is complete local name and the length is the expected one for BLE
         * CentralApp  */
        if( pu8Data[u8Index + 1U] == AD_TYPE_COMPLETE_LOCAL_NAME )
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	3301      	adds	r3, #1
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b09      	cmp	r3, #9
 800085a:	d127      	bne.n	80008ac <BLUENRG2__u8FindDeviceName+0x70>
        {
            pu8Data[u8Index + BLUENRG2_DEV_NAME_LEN] = '\0';      // Limit device name string 
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	3311      	adds	r3, #17
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
            PRINT_DBG( "[Device name] %s\r\n", &pu8Data[u8Index + 1U] );
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	3301      	adds	r3, #1
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4619      	mov	r1, r3
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <BLUENRG2__u8FindDeviceName+0x88>)
 8000874:	f008 f96e 	bl	8008b54 <iprintf>

            /* check if found device name is start with LUMEN */
            uint8_t au8FindKeyStr[] = "BLE Device";
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <BLUENRG2__u8FindDeviceName+0x8c>)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000880:	c303      	stmia	r3!, {r0, r1}
 8000882:	801a      	strh	r2, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]

            if( 0U == BLUENRG_memcmp( &pu8Data[u8Index + 2], au8FindKeyStr, sizeof(au8FindKeyStr) - 1 ) )
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	3302      	adds	r3, #2
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	f107 010c 	add.w	r1, r7, #12
 8000896:	220a      	movs	r2, #10
 8000898:	4618      	mov	r0, r3
 800089a:	f008 faa1 	bl	8008de0 <memcmp>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <BLUENRG2__u8FindDeviceName+0x6c>
            {
                return TRUE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e009      	b.n	80008bc <BLUENRG2__u8FindDeviceName+0x80>
            }
            else
            {
                return FALSE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e007      	b.n	80008bc <BLUENRG2__u8FindDeviceName+0x80>
        }
        else
        {
            /* move to next advertising field */
            //u8Index += ( pu8Data[u8Index] + 1U );
            u8Index++;
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	3301      	adds	r3, #1
 80008b0:	75fb      	strb	r3, [r7, #23]
    while( u8Index < u8DataLen )
 80008b2:	7dfa      	ldrb	r2, [r7, #23]
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3c9      	bcc.n	800084e <BLUENRG2__u8FindDeviceName+0x12>
        }
    }

    return FALSE;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08009aac 	.word	0x08009aac
 80008c8:	08009ac0 	.word	0x08009ac0

080008cc <BLUENRG2__vAttributeModifiedCB>:
 *                  Length of the data.
 *                  Attribute data.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vAttributeModifiedCB( uint16_t handle, uint8_t data_length, uint8_t *att_data )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	603a      	str	r2, [r7, #0]
 80008d6:	80fb      	strh	r3, [r7, #6]
 80008d8:	460b      	mov	r3, r1
 80008da:	717b      	strb	r3, [r7, #5]
    if( handle == RXCharHandle + 1 )
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <BLUENRG2__vAttributeModifiedCB+0x50>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d105      	bne.n	80008f4 <BLUENRG2__vAttributeModifiedCB+0x28>
    {
        receiveData( att_data, data_length );
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	4619      	mov	r1, r3
 80008ec:	6838      	ldr	r0, [r7, #0]
 80008ee:	f7ff fe99 	bl	8000624 <receiveData>
        if( att_data[0] == 0x01 )
        {
            APP_FLAG_SET( NOTIFICATIONS_ENABLED );
        }
    }
}
 80008f2:	e00f      	b.n	8000914 <BLUENRG2__vAttributeModifiedCB+0x48>
    else if( handle == TXCharHandle + 2 )
 80008f4:	88fa      	ldrh	r2, [r7, #6]
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <BLUENRG2__vAttributeModifiedCB+0x54>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	3302      	adds	r3, #2
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d109      	bne.n	8000914 <BLUENRG2__vAttributeModifiedCB+0x48>
        if( att_data[0] == 0x01 )
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <BLUENRG2__vAttributeModifiedCB+0x48>
            APP_FLAG_SET( NOTIFICATIONS_ENABLED );
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <BLUENRG2__vAttributeModifiedCB+0x58>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <BLUENRG2__vAttributeModifiedCB+0x58>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000140 	.word	0x20000140
 8000920:	2000013e 	.word	0x2000013e
 8000924:	20000000 	.word	0x20000000

08000928 <BLUENRG2__u8CentralAppInit>:
 * Description    : Init CentralApp.
 * Input          : None.
 * Return         : Status.
 *******************************************************************************/
static uint8_t BLUENRG2__u8CentralAppInit( void )
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af02      	add	r7, sp, #8
    uint8_t  u8Ret;
    uint16_t u16ServiceHandle,  u16DevNameCharHandle, u16AppearanceCharHandle;
    uint8_t au8BdAddr[ 6U ];
    uint8_t u8BaAddrLen;
    
    const uint8_t cu8NVMConfigDataAddr = 0x80U; /* Offset of the static random address stored in NVM */
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Sw reset of the device */
    hci_reset();
 8000934:	f007 fba9 	bl	800808a <hci_reset>
    /**
     *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at
     * device boot
     */
    HAL_Delay( 2000 );
 8000938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800093c:	f001 fe9e 	bl	800267c <HAL_Delay>

    u8Ret = BLUENRG2__u8PrintBLEFwInfo();
 8000940:	f7ff fef4 	bl	800072c <BLUENRG2__u8PrintBLEFwInfo>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 800094a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <BLUENRG2__u8CentralAppInit+0x36>
    {
        PRINT_DBG( "Get Bluetooth Chip Info failed !\r\n" );
 8000952:	4842      	ldr	r0, [pc, #264]	; (8000a5c <BLUENRG2__u8CentralAppInit+0x134>)
 8000954:	f008 f964 	bl	8008c20 <puts>
        return u8Ret;
 8000958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095c:	e079      	b.n	8000a52 <BLUENRG2__u8CentralAppInit+0x12a>
    }

    u8Ret = aci_hal_read_config_data( cu8NVMConfigDataAddr, &u8BaAddrLen, au8BdAddr );
 800095e:	f107 0218 	add.w	r2, r7, #24
 8000962:	f107 0117 	add.w	r1, r7, #23
 8000966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800096a:	4618      	mov	r0, r3
 800096c:	f005 ffe3 	bl	8006936 <aci_hal_read_config_data>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <BLUENRG2__u8CentralAppInit+0x62>
    {
        PRINT_DBG( "Read Broadcast Address failed !\r\n" );
 800097e:	4838      	ldr	r0, [pc, #224]	; (8000a60 <BLUENRG2__u8CentralAppInit+0x138>)
 8000980:	f008 f94e 	bl	8008c20 <puts>
        return u8Ret;
 8000984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000988:	e063      	b.n	8000a52 <BLUENRG2__u8CentralAppInit+0x12a>
    }

    if ( 0xC0 != ( au8BdAddr[ 5U ] & 0xC0 ) )
 800098a:	7f7b      	ldrb	r3, [r7, #29]
 800098c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000990:	2bc0      	cmp	r3, #192	; 0xc0
 8000992:	d003      	beq.n	800099c <BLUENRG2__u8CentralAppInit+0x74>
    {
        PRINT_DBG( "Invalid Address\r\n" );
 8000994:	4833      	ldr	r0, [pc, #204]	; (8000a64 <BLUENRG2__u8CentralAppInit+0x13c>)
 8000996:	f008 f943 	bl	8008c20 <puts>
        while ( TRUE )
 800099a:	e7fe      	b.n	800099a <BLUENRG2__u8CentralAppInit+0x72>
        ;
    }

    aci_hal_set_tx_power_level( BLUENRG2_TX_POWER_HIGH, BLUENRG2_TX_POWER_N2_DBM );
 800099c:	2104      	movs	r1, #4
 800099e:	2001      	movs	r0, #1
 80009a0:	f006 f84d 	bl	8006a3e <aci_hal_set_tx_power_level>

    /* GATT Init */
    u8Ret = aci_gatt_init();
 80009a4:	f005 fb48 	bl	8006038 <aci_gatt_init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80009ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <BLUENRG2__u8CentralAppInit+0xa0>
    {
        PRINT_DBG( "GATT_Init failed: 0x%02x\r\n", u8Ret );
 80009b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009ba:	4619      	mov	r1, r3
 80009bc:	482a      	ldr	r0, [pc, #168]	; (8000a68 <BLUENRG2__u8CentralAppInit+0x140>)
 80009be:	f008 f8c9 	bl	8008b54 <iprintf>
        return u8Ret;
 80009c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009c6:	e044      	b.n	8000a52 <BLUENRG2__u8CentralAppInit+0x12a>
    }

    /* GAP Init */
    u8Ret = aci_gap_init( GAP_CENTRAL_ROLE, 0x0, (uint8_t)BLUENRG2_DEV_NAME_LEN, &u16ServiceHandle, &u16DevNameCharHandle,
 80009c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4613      	mov	r3, r2
 80009da:	2211      	movs	r2, #17
 80009dc:	2100      	movs	r1, #0
 80009de:	2004      	movs	r0, #4
 80009e0:	f005 f89f 	bl	8005b22 <aci_gap_init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                        &u16AppearanceCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80009ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d008      	beq.n	8000a04 <BLUENRG2__u8CentralAppInit+0xdc>
    {
        PRINT_DBG( "GAP_Init failed: 0x%02x\r\n", u8Ret );
 80009f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009f6:	4619      	mov	r1, r3
 80009f8:	481c      	ldr	r0, [pc, #112]	; (8000a6c <BLUENRG2__u8CentralAppInit+0x144>)
 80009fa:	f008 f8ab 	bl	8008b54 <iprintf>
        return u8Ret;
 80009fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a02:	e026      	b.n	8000a52 <BLUENRG2__u8CentralAppInit+0x12a>
    }
    
    uint8_t au8TempDeviceName[ BLUENRG2_DEV_NAME_LEN] = BLUENRG2_DEV_NAME;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <BLUENRG2__u8CentralAppInit+0x148>)
 8000a06:	1d3c      	adds	r4, r7, #4
 8000a08:	461d      	mov	r5, r3
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	7023      	strb	r3, [r4, #0]
    /* Update device name */
    u8Ret = aci_gatt_update_char_value(u16ServiceHandle, u16DevNameCharHandle, (uint8_t)0U, (uint8_t)BLUENRG2_DEV_NAME_LEN,
 8000a12:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8000a14:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2311      	movs	r3, #17
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f005 fd13 	bl	8006448 <aci_gatt_update_char_value>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                   au8TempDeviceName);

    /* Add Device Service & Characteristics */
    u8Ret = GATT_DB_u8AddService();
 8000a28:	f000 fda0 	bl	800156c <GATT_DB_u8AddService>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <BLUENRG2__u8CentralAppInit+0x124>
    {
        PRINT_DBG( "Error while adding service: 0x%02x\r\n", u8Ret );
 8000a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <BLUENRG2__u8CentralAppInit+0x14c>)
 8000a42:	f008 f887 	bl	8008b54 <iprintf>
        return u8Ret;
 8000a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a4a:	e002      	b.n	8000a52 <BLUENRG2__u8CentralAppInit+0x12a>
    }

    /* Reset the discovery context */
    BLUENRG2__vResetDiscoveryContext();
 8000a4c:	f7ff fe04 	bl	8000658 <BLUENRG2__vResetDiscoveryContext>

    return BLE_STATUS_SUCCESS;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08009acc 	.word	0x08009acc
 8000a60:	08009af0 	.word	0x08009af0
 8000a64:	08009b14 	.word	0x08009b14
 8000a68:	08009b28 	.word	0x08009b28
 8000a6c:	08009b44 	.word	0x08009b44
 8000a70:	08009990 	.word	0x08009990
 8000a74:	08009b60 	.word	0x08009b60

08000a78 <BLUENRG2__vUserInit>:
 *
 * @param  None
 * @retval None
 */
static void BLUENRG2__vUserInit( void )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    BSP_PB_Init( BUTTON_KEY, BUTTON_MODE_GPIO );
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f001 fa26 	bl	8001ed0 <BSP_PB_Init>
    BSP_LED_Init( LED2 );
 8000a84:	2000      	movs	r0, #0
 8000a86:	f001 f9a7 	bl	8001dd8 <BSP_LED_Init>

    BSP_COM_Init( COM1 );
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f001 fadc 	bl	8002048 <BSP_COM_Init>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <Connection_StateMachine>:
 * Description    : Connection state machine.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void Connection_StateMachine( void )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af08      	add	r7, sp, #32
    uint8_t ret;

    switch( discovery.device_state )
 8000a9a:	4bae      	ldr	r3, [pc, #696]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000a9c:	8a1b      	ldrh	r3, [r3, #16]
 8000a9e:	2b80      	cmp	r3, #128	; 0x80
 8000aa0:	f000 818a 	beq.w	8000db8 <Connection_StateMachine+0x324>
 8000aa4:	2b80      	cmp	r3, #128	; 0x80
 8000aa6:	f300 818a 	bgt.w	8000dbe <Connection_StateMachine+0x32a>
 8000aaa:	2b20      	cmp	r3, #32
 8000aac:	dc4a      	bgt.n	8000b44 <Connection_StateMachine+0xb0>
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f2c0 8185 	blt.w	8000dbe <Connection_StateMachine+0x32a>
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	f200 8182 	bhi.w	8000dbe <Connection_StateMachine+0x32a>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <Connection_StateMachine+0x2c>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000b4b 	.word	0x08000b4b
 8000ac4:	08000b57 	.word	0x08000b57
 8000ac8:	08000cfb 	.word	0x08000cfb
 8000acc:	08000dbf 	.word	0x08000dbf
 8000ad0:	08000ba7 	.word	0x08000ba7
 8000ad4:	08000dbf 	.word	0x08000dbf
 8000ad8:	08000dbf 	.word	0x08000dbf
 8000adc:	08000dbf 	.word	0x08000dbf
 8000ae0:	08000c6b 	.word	0x08000c6b
 8000ae4:	08000dbf 	.word	0x08000dbf
 8000ae8:	08000dbf 	.word	0x08000dbf
 8000aec:	08000dbf 	.word	0x08000dbf
 8000af0:	08000dbf 	.word	0x08000dbf
 8000af4:	08000dbf 	.word	0x08000dbf
 8000af8:	08000dbf 	.word	0x08000dbf
 8000afc:	08000dbf 	.word	0x08000dbf
 8000b00:	08000d03 	.word	0x08000d03
 8000b04:	08000dbf 	.word	0x08000dbf
 8000b08:	08000dbf 	.word	0x08000dbf
 8000b0c:	08000dbf 	.word	0x08000dbf
 8000b10:	08000dbf 	.word	0x08000dbf
 8000b14:	08000dbf 	.word	0x08000dbf
 8000b18:	08000dbf 	.word	0x08000dbf
 8000b1c:	08000dbf 	.word	0x08000dbf
 8000b20:	08000dbf 	.word	0x08000dbf
 8000b24:	08000dbf 	.word	0x08000dbf
 8000b28:	08000dbf 	.word	0x08000dbf
 8000b2c:	08000dbf 	.word	0x08000dbf
 8000b30:	08000dbf 	.word	0x08000dbf
 8000b34:	08000dbf 	.word	0x08000dbf
 8000b38:	08000dbf 	.word	0x08000dbf
 8000b3c:	08000dbf 	.word	0x08000dbf
 8000b40:	08000c3b 	.word	0x08000c3b
 8000b44:	2b40      	cmp	r3, #64	; 0x40
 8000b46:	d061      	beq.n	8000c0c <Connection_StateMachine+0x178>
        {
            BLUENRG2__vResetDiscoveryContext();
        }
        break; /* end case (DISCOVERY_ERROR) */
        default:
            break;
 8000b48:	e139      	b.n	8000dbe <Connection_StateMachine+0x32a>
            BLUENRG2__vResetDiscoveryContext();
 8000b4a:	f7ff fd85 	bl	8000658 <BLUENRG2__vResetDiscoveryContext>
            discovery.device_state = START_DISCOVERY_PROC;
 8000b4e:	4b81      	ldr	r3, [pc, #516]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	821a      	strh	r2, [r3, #16]
        break; /* end case (INIT_STATE) */
 8000b54:	e136      	b.n	8000dc4 <Connection_StateMachine+0x330>
            ret = aci_gap_start_general_discovery_proc( SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00 );
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b62:	f005 f88b 	bl	8005c7c <aci_gap_start_general_discovery_proc>
 8000b66:	4603      	mov	r3, r0
 8000b68:	71bb      	strb	r3, [r7, #6]
            if( ret != BLE_STATUS_SUCCESS )
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <Connection_StateMachine+0xee>
                PRINT_DBG( "aci_gap_start_general_discovery_proc() failed: %02X\r\n", ret );
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	4619      	mov	r1, r3
 8000b74:	4878      	ldr	r0, [pc, #480]	; (8000d58 <Connection_StateMachine+0x2c4>)
 8000b76:	f007 ffed 	bl	8008b54 <iprintf>
                discovery.device_state = DISCOVERY_ERROR;
 8000b7a:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	821a      	strh	r2, [r3, #16]
        break; /* end case (START_DISCOVERY_PROC) */
 8000b80:	e120      	b.n	8000dc4 <Connection_StateMachine+0x330>
                PRINT_DBG( "aci_gap_start_general_discovery_proc OK\r\n" );
 8000b82:	4876      	ldr	r0, [pc, #472]	; (8000d5c <Connection_StateMachine+0x2c8>)
 8000b84:	f008 f84c 	bl	8008c20 <puts>
                discovery.startTime             = HAL_GetTick();
 8000b88:	f001 fd6c 	bl	8002664 <HAL_GetTick>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a71      	ldr	r2, [pc, #452]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000b90:	6053      	str	r3, [r2, #4]
                discovery.check_disc_proc_timer = TRUE;
 8000b92:	4b70      	ldr	r3, [pc, #448]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
                discovery.check_disc_mode_timer = FALSE;
 8000b98:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	705a      	strb	r2, [r3, #1]
                discovery.device_state          = WAIT_TIMER_EXPIRED;
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	821a      	strh	r2, [r3, #16]
        break; /* end case (START_DISCOVERY_PROC) */
 8000ba4:	e10e      	b.n	8000dc4 <Connection_StateMachine+0x330>
            if( discovery.check_disc_proc_timer == TRUE )
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d114      	bne.n	8000bd8 <Connection_StateMachine+0x144>
                if( HAL_GetTick() - discovery.startTime > BLUENRG2__u16DiscoveryTime )
 8000bae:	f001 fd59 	bl	8002664 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b67      	ldr	r3, [pc, #412]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a69      	ldr	r2, [pc, #420]	; (8000d60 <Connection_StateMachine+0x2cc>)
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f240 80ff 	bls.w	8000dc2 <Connection_StateMachine+0x32e>
                    discovery.check_disc_proc_timer = FALSE;
 8000bc4:	4b63      	ldr	r3, [pc, #396]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
                    discovery.startTime             = 0;
 8000bca:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
                    discovery.device_state          = DO_TERMINATE_GAP_PROC;
 8000bd0:	4b60      	ldr	r3, [pc, #384]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	821a      	strh	r2, [r3, #16]
        break; /* end case (WAIT_TIMER_EXPIRED) */
 8000bd6:	e0f4      	b.n	8000dc2 <Connection_StateMachine+0x32e>
            else if( discovery.check_disc_mode_timer == TRUE )
 8000bd8:	4b5e      	ldr	r3, [pc, #376]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	f040 80f0 	bne.w	8000dc2 <Connection_StateMachine+0x32e>
                if( HAL_GetTick() - discovery.startTime > BLUENRG2__u16DiscoveryTime )
 8000be2:	f001 fd3f 	bl	8002664 <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	4a5c      	ldr	r2, [pc, #368]	; (8000d60 <Connection_StateMachine+0x2cc>)
 8000bf0:	8812      	ldrh	r2, [r2, #0]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f240 80e5 	bls.w	8000dc2 <Connection_StateMachine+0x32e>
                    discovery.check_disc_mode_timer = FALSE;
 8000bf8:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	705a      	strb	r2, [r3, #1]
                    discovery.startTime             = 0;
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
                    discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 8000c04:	4b53      	ldr	r3, [pc, #332]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c06:	2240      	movs	r2, #64	; 0x40
 8000c08:	821a      	strh	r2, [r3, #16]
        break; /* end case (WAIT_TIMER_EXPIRED) */
 8000c0a:	e0da      	b.n	8000dc2 <Connection_StateMachine+0x32e>
            ret = aci_gap_set_non_discoverable();
 8000c0c:	f004 fe5d 	bl	80058ca <aci_gap_set_non_discoverable>
 8000c10:	4603      	mov	r3, r0
 8000c12:	71bb      	strb	r3, [r7, #6]
            if( ret != BLE_STATUS_SUCCESS )
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d008      	beq.n	8000c2c <Connection_StateMachine+0x198>
                PRINT_DBG( "aci_gap_set_non_discoverable() failed: 0x%02x\r\n", ret );
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4851      	ldr	r0, [pc, #324]	; (8000d64 <Connection_StateMachine+0x2d0>)
 8000c20:	f007 ff98 	bl	8008b54 <iprintf>
                discovery.device_state = DISCOVERY_ERROR;
 8000c24:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	821a      	strh	r2, [r3, #16]
        break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000c2a:	e0cb      	b.n	8000dc4 <Connection_StateMachine+0x330>
                PRINT_DBG( "aci_gap_set_non_discoverable() OK\r\n" );
 8000c2c:	484e      	ldr	r0, [pc, #312]	; (8000d68 <Connection_StateMachine+0x2d4>)
 8000c2e:	f007 fff7 	bl	8008c20 <puts>
                discovery.device_state = INIT_STATE;
 8000c32:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	821a      	strh	r2, [r3, #16]
        break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 8000c38:	e0c4      	b.n	8000dc4 <Connection_StateMachine+0x330>
            ret = aci_gap_terminate_gap_proc( GAP_GENERAL_DISCOVERY_PROC ); // GENERAL_DISCOVERY_PROCEDURE
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f005 f99f 	bl	8005f7e <aci_gap_terminate_gap_proc>
 8000c40:	4603      	mov	r3, r0
 8000c42:	71bb      	strb	r3, [r7, #6]
            if( ret != BLE_STATUS_SUCCESS )
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d008      	beq.n	8000c5c <Connection_StateMachine+0x1c8>
                PRINT_DBG( "aci_gap_terminate_gap_procedure() failed: 0x%02x\r\n", ret );
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4847      	ldr	r0, [pc, #284]	; (8000d6c <Connection_StateMachine+0x2d8>)
 8000c50:	f007 ff80 	bl	8008b54 <iprintf>
                discovery.device_state = DISCOVERY_ERROR;
 8000c54:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	821a      	strh	r2, [r3, #16]
                break;
 8000c5a:	e0b3      	b.n	8000dc4 <Connection_StateMachine+0x330>
                PRINT_DBG( "aci_gap_terminate_gap_procedure() OK\r\n" );
 8000c5c:	4844      	ldr	r0, [pc, #272]	; (8000d70 <Connection_StateMachine+0x2dc>)
 8000c5e:	f007 ffdf 	bl	8008c20 <puts>
                discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	821a      	strh	r2, [r3, #16]
        break; /* end case (DO_TERMINATE_GAP_PROC) */
 8000c68:	e0ac      	b.n	8000dc4 <Connection_StateMachine+0x330>
            PRINT_DBG( "Device Found with address: " );
 8000c6a:	4842      	ldr	r0, [pc, #264]	; (8000d74 <Connection_StateMachine+0x2e0>)
 8000c6c:	f007 ff72 	bl	8008b54 <iprintf>
            for( uint8_t i = 5; i > 0; i-- )
 8000c70:	2305      	movs	r3, #5
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	e00a      	b.n	8000c8c <Connection_StateMachine+0x1f8>
                PRINT_DBG( "%02X-", discovery.device_found_address[i] );
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c7a:	4413      	add	r3, r2
 8000c7c:	7a5b      	ldrb	r3, [r3, #9]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	483d      	ldr	r0, [pc, #244]	; (8000d78 <Connection_StateMachine+0x2e4>)
 8000c82:	f007 ff67 	bl	8008b54 <iprintf>
            for( uint8_t i = 5; i > 0; i-- )
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f1      	bne.n	8000c76 <Connection_StateMachine+0x1e2>
            PRINT_DBG( "%02X\r\n", discovery.device_found_address[0] );
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000c94:	7a5b      	ldrb	r3, [r3, #9]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4838      	ldr	r0, [pc, #224]	; (8000d7c <Connection_StateMachine+0x2e8>)
 8000c9a:	f007 ff5b 	bl	8008b54 <iprintf>
            ret = aci_gap_create_connection( SCAN_P, SCAN_L, discovery.device_found_address_type,
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000ca0:	7a1a      	ldrb	r2, [r3, #8]
 8000ca2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ca6:	9306      	str	r3, [sp, #24]
 8000ca8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cac:	9305      	str	r3, [sp, #20]
 8000cae:	233c      	movs	r3, #60	; 0x3c
 8000cb0:	9304      	str	r3, [sp, #16]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9303      	str	r3, [sp, #12]
 8000cb6:	2328      	movs	r3, #40	; 0x28
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2328      	movs	r3, #40	; 0x28
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <Connection_StateMachine+0x2ec>)
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ccc:	f005 f873 	bl	8005db6 <aci_gap_create_connection>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71bb      	strb	r3, [r7, #6]
            if( ret != BLE_STATUS_SUCCESS )
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <Connection_StateMachine+0x258>
                PRINT_DBG( "aci_gap_create_connection() failed: 0x%02x\r\n", ret );
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4829      	ldr	r0, [pc, #164]	; (8000d84 <Connection_StateMachine+0x2f0>)
 8000ce0:	f007 ff38 	bl	8008b54 <iprintf>
                discovery.device_state = DISCOVERY_ERROR;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	821a      	strh	r2, [r3, #16]
        break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000cea:	e06b      	b.n	8000dc4 <Connection_StateMachine+0x330>
                PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <Connection_StateMachine+0x2f4>)
 8000cee:	f007 ff97 	bl	8008c20 <puts>
                discovery.device_state = WAIT_EVENT;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	821a      	strh	r2, [r3, #16]
        break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8000cf8:	e064      	b.n	8000dc4 <Connection_StateMachine+0x330>
            discovery.device_state = WAIT_EVENT;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	821a      	strh	r2, [r3, #16]
        break; /* end case (WAIT_EVENT) */
 8000d00:	e060      	b.n	8000dc4 <Connection_StateMachine+0x330>
            hci_le_set_scan_response_data( 0, NULL );
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f007 fa58 	bl	80081ba <hci_le_set_scan_response_data>
            ret = aci_gap_set_discoverable( ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9306      	str	r3, [sp, #24]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	2300      	movs	r3, #0
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <Connection_StateMachine+0x2f8>)
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	2312      	movs	r3, #18
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d30:	2000      	movs	r0, #0
 8000d32:	f004 fdf3 	bl	800591c <aci_gap_set_discoverable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	71bb      	strb	r3, [r7, #6]
            if( ret != BLE_STATUS_SUCCESS )
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d029      	beq.n	8000d94 <Connection_StateMachine+0x300>
                PRINT_DBG( "aci_gap_set_discoverable() failed: 0x%02x\r\n", ret );
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <Connection_StateMachine+0x2fc>)
 8000d46:	f007 ff05 	bl	8008b54 <iprintf>
                discovery.device_state = DISCOVERY_ERROR;
 8000d4a:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <Connection_StateMachine+0x2c0>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	821a      	strh	r2, [r3, #16]
        break; /* end case (ENTER_DISCOVERY_MODE) */
 8000d50:	e038      	b.n	8000dc4 <Connection_StateMachine+0x330>
 8000d52:	bf00      	nop
 8000d54:	200000b8 	.word	0x200000b8
 8000d58:	08009b88 	.word	0x08009b88
 8000d5c:	08009bc0 	.word	0x08009bc0
 8000d60:	20000006 	.word	0x20000006
 8000d64:	08009bec 	.word	0x08009bec
 8000d68:	08009c1c 	.word	0x08009c1c
 8000d6c:	08009c40 	.word	0x08009c40
 8000d70:	08009c74 	.word	0x08009c74
 8000d74:	08009c9c 	.word	0x08009c9c
 8000d78:	08009cb8 	.word	0x08009cb8
 8000d7c:	08009cc0 	.word	0x08009cc0
 8000d80:	200000c1 	.word	0x200000c1
 8000d84:	08009cc8 	.word	0x08009cc8
 8000d88:	08009cf8 	.word	0x08009cf8
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	08009d18 	.word	0x08009d18
                PRINT_DBG( "aci_gap_set_discoverable() OK\r\n" );
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <Connection_StateMachine+0x338>)
 8000d96:	f007 ff43 	bl	8008c20 <puts>
                discovery.startTime             = HAL_GetTick();
 8000d9a:	f001 fc63 	bl	8002664 <HAL_GetTick>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <Connection_StateMachine+0x33c>)
 8000da2:	6053      	str	r3, [r2, #4]
                discovery.check_disc_mode_timer = TRUE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <Connection_StateMachine+0x33c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	705a      	strb	r2, [r3, #1]
                discovery.check_disc_proc_timer = FALSE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Connection_StateMachine+0x33c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
                discovery.device_state          = WAIT_TIMER_EXPIRED;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <Connection_StateMachine+0x33c>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	821a      	strh	r2, [r3, #16]
        break; /* end case (ENTER_DISCOVERY_MODE) */
 8000db6:	e005      	b.n	8000dc4 <Connection_StateMachine+0x330>
            BLUENRG2__vResetDiscoveryContext();
 8000db8:	f7ff fc4e 	bl	8000658 <BLUENRG2__vResetDiscoveryContext>
        break; /* end case (DISCOVERY_ERROR) */
 8000dbc:	e002      	b.n	8000dc4 <Connection_StateMachine+0x330>
            break;
 8000dbe:	bf00      	nop
 8000dc0:	e000      	b.n	8000dc4 <Connection_StateMachine+0x330>
        break; /* end case (WAIT_TIMER_EXPIRED) */
 8000dc2:	bf00      	nop
    } /* end switch */

} /* end Connection_StateMachine() */
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	08009d44 	.word	0x08009d44
 8000dd0:	200000b8 	.word	0x200000b8

08000dd4 <APP__vUpdateDetectRange>:

static void APP__vUpdateDetectRange( int8_t i8Rssi )
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
    static APP_tenRange enLastRange = APP_RANGE_NONE;
    static int8_t       i8LastRssi  = -127;

    if( abs( i8Rssi - i8LastRssi ) < 5 )
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <APP__vUpdateDetectRange+0xe8>)
 8000de4:	f992 2000 	ldrsb.w	r2, [r2]
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	f113 0f04 	cmn.w	r3, #4
 8000dee:	db07      	blt.n	8000e00 <APP__vUpdateDetectRange+0x2c>
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <APP__vUpdateDetectRange+0xe8>)
 8000df6:	f992 2000 	ldrsb.w	r2, [r2]
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	dd58      	ble.n	8000eb2 <APP__vUpdateDetectRange+0xde>
    {
        return;
    }

    i8LastRssi = i8Rssi;
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <APP__vUpdateDetectRange+0xe8>)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	7013      	strb	r3, [r2, #0]

    if( i8Rssi == (int8_t) 127 )
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0c:	d103      	bne.n	8000e16 <APP__vUpdateDetectRange+0x42>
    {
        APP__enDetectRange = APP_RANGE_NONE;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e01d      	b.n	8000e52 <APP__vUpdateDetectRange+0x7e>
    }
    else if( i8Rssi > APP_RSSI_THRESHOLD_NEAR ) // 0-0.5M
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8000e1e:	db03      	blt.n	8000e28 <APP__vUpdateDetectRange+0x54>
    {
        APP__enDetectRange = APP_RANGE_NEAR;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e014      	b.n	8000e52 <APP__vUpdateDetectRange+0x7e>
    }
    else if( i8Rssi > APP_RSSI_THRESHOLD_MID ) // 0.5M-1M
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	f113 0f4a 	cmn.w	r3, #74	; 0x4a
 8000e30:	db03      	blt.n	8000e3a <APP__vUpdateDetectRange+0x66>
    {
        APP__enDetectRange = APP_RANGE_MID;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e00b      	b.n	8000e52 <APP__vUpdateDetectRange+0x7e>
    }
    else if( i8Rssi > APP_RSSI_THRESHOLD_FAR ) // 1M-3M
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000e42:	db03      	blt.n	8000e4c <APP__vUpdateDetectRange+0x78>
    {
        APP__enDetectRange = APP_RANGE_FAR;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e002      	b.n	8000e52 <APP__vUpdateDetectRange+0x7e>
    }
    else // more than 3M
    {
        APP__enDetectRange = APP_RANGE_CONNECT;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	701a      	strb	r2, [r3, #0]
    }

    if( enLastRange != APP__enDetectRange )
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <APP__vUpdateDetectRange+0xf0>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d02a      	beq.n	8000eb4 <APP__vUpdateDetectRange+0xe0>
    {
        const char *apccRangeStr[] = { "NEAR", "MID", "FAR", "CONNECTABLE", "NONE" };
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <APP__vUpdateDetectRange+0xf4>)
 8000e60:	f107 040c 	add.w	r4, r7, #12
 8000e64:	461d      	mov	r5, r3
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	6023      	str	r3, [r4, #0]
        PRINT_DBG( "[RANGE] %s -> %s \r\n", apccRangeStr[(uint8_t) enLastRange],
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <APP__vUpdateDetectRange+0xf0>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3320      	adds	r3, #32
 8000e76:	443b      	add	r3, r7
 8000e78:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	3320      	adds	r3, #32
 8000e84:	443b      	add	r3, r7
 8000e86:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <APP__vUpdateDetectRange+0xf8>)
 8000e8e:	f007 fe61 	bl	8008b54 <iprintf>
                   apccRangeStr[(uint8_t) APP__enDetectRange] );

        if( APP__enDetectRange == APP_RANGE_NEAR )
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <APP__vUpdateDetectRange+0xce>
        {
            PRINT_DBG( "UNLOCK!!!\r\n" );
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <APP__vUpdateDetectRange+0xfc>)
 8000e9c:	f007 fec0 	bl	8008c20 <puts>
 8000ea0:	e002      	b.n	8000ea8 <APP__vUpdateDetectRange+0xd4>
        }
        else
        {
            PRINT_DBG( "LOCKED!!!\r\n" );
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <APP__vUpdateDetectRange+0x100>)
 8000ea4:	f007 febc 	bl	8008c20 <puts>
        }

        enLastRange = APP__enDetectRange;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <APP__vUpdateDetectRange+0xec>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <APP__vUpdateDetectRange+0xf0>)
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e000      	b.n	8000eb4 <APP__vUpdateDetectRange+0xe0>
        return;
 8000eb2:	bf00      	nop
    }
}
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000001e 	.word	0x2000001e
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	2000001f 	.word	0x2000001f
 8000ec8:	08009db4 	.word	0x08009db4
 8000ecc:	08009d64 	.word	0x08009d64
 8000ed0:	08009d78 	.word	0x08009d78
 8000ed4:	08009d84 	.word	0x08009d84

08000ed8 <BLUENRG2__vUserProcess>:
 *
 * @param  None
 * @retval None
 */
static void BLUENRG2__vUserProcess( void )
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08f      	sub	sp, #60	; 0x3c
 8000edc:	af02      	add	r7, sp, #8
    static uint32_t u32LastRssiReadTick = 0U;

    int8_t i8ButtonPressed = BSP_PB_GetState( BUTTON_KEY );
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f001 f84a 	bl	8001f78 <BSP_PB_GetState>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( APP_FLAG( SET_CONNECTABLE ) )
 8000eea:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <BLUENRG2__vUserProcess+0x22>
    {
        Connection_StateMachine();
 8000ef6:	f7ff fdcd 	bl	8000a94 <Connection_StateMachine>
    }

    if( BLUENRG2__u8DeviceRole == MASTER_ROLE )
 8000efa:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <BLUENRG2__vUserProcess+0x200>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 809e 	bne.w	8001040 <BLUENRG2__vUserProcess+0x168>
    {
        /* Start TX handle Characteristic discovery if not yet done */
        if( APP_FLAG( CONNECTED ) && !APP_FLAG( END_READ_TX_CHAR_HANDLE ) )
 8000f04:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d02a      	beq.n	8000f66 <BLUENRG2__vUserProcess+0x8e>
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d124      	bne.n	8000f66 <BLUENRG2__vUserProcess+0x8e>
        {
            if( !APP_FLAG( START_READ_TX_CHAR_HANDLE ) )
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d14e      	bne.n	8000fc6 <BLUENRG2__vUserProcess+0xee>
            {
                /* Discovery TX characteristic handle by UUID 128 bits */
                const uint8_t charUuid128_TX[16] = { 0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e,
 8000f28:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <BLUENRG2__vUserProcess+0x204>)
 8000f2a:	f107 0418 	add.w	r4, r7, #24
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                     0xe2, 0x11, 0x9e, 0xb1, 0xe1, 0xf2, 0x73, 0xd9 };

                BLUENRG_memcpy( &UUID_Tx.UUID_16, charUuid128_TX, 16 );
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <BLUENRG2__vUserProcess+0x208>)
 8000f36:	461c      	mov	r4, r3
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                aci_gatt_disc_char_by_uuid( connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, &UUID_Tx );
 8000f42:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <BLUENRG2__vUserProcess+0x20c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b298      	uxth	r0, r3
 8000f48:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <BLUENRG2__vUserProcess+0x208>)
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	2101      	movs	r1, #1
 8000f54:	f005 fb2a 	bl	80065ac <aci_gatt_disc_char_by_uuid>
                APP_FLAG_SET( START_READ_TX_CHAR_HANDLE );
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f60:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f62:	6013      	str	r3, [r2, #0]
            if( !APP_FLAG( START_READ_TX_CHAR_HANDLE ) )
 8000f64:	e02f      	b.n	8000fc6 <BLUENRG2__vUserProcess+0xee>
            }
        }
        /* Start RX handle Characteristic discovery if not yet done */
        else if( APP_FLAG( CONNECTED ) && !APP_FLAG( END_READ_RX_CHAR_HANDLE ) )
 8000f66:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d029      	beq.n	8000fc6 <BLUENRG2__vUserProcess+0xee>
 8000f72:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d123      	bne.n	8000fc6 <BLUENRG2__vUserProcess+0xee>
        {
            /* Discovery RX characteristic handle by UUID 128 bits */
            if( !APP_FLAG( START_READ_RX_CHAR_HANDLE ) )
 8000f7e:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11d      	bne.n	8000fc6 <BLUENRG2__vUserProcess+0xee>
            {
                /* Discovery RX characteristic handle by UUID 128 bits */
                const uint8_t charUuid128_RX[16] = { 0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e,
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <BLUENRG2__vUserProcess+0x210>)
 8000f8c:	f107 0408 	add.w	r4, r7, #8
 8000f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                     0xe2, 0x11, 0x9e, 0xb1, 0xe2, 0xf2, 0x73, 0xd9 };

                BLUENRG_memcpy( &UUID_Rx.UUID_16, charUuid128_RX, 16 );
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <BLUENRG2__vUserProcess+0x214>)
 8000f98:	461c      	mov	r4, r3
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                aci_gatt_disc_char_by_uuid( connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, &UUID_Rx );
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <BLUENRG2__vUserProcess+0x20c>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b298      	uxth	r0, r3
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <BLUENRG2__vUserProcess+0x214>)
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	f005 faf9 	bl	80065ac <aci_gatt_disc_char_by_uuid>
                APP_FLAG_SET( START_READ_RX_CHAR_HANDLE );
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fc4:	6013      	str	r3, [r2, #0]
            }
        }

        if( APP_FLAG( CONNECTED ) && APP_FLAG( END_READ_TX_CHAR_HANDLE ) && APP_FLAG( END_READ_RX_CHAR_HANDLE ) &&
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d036      	beq.n	8001040 <BLUENRG2__vUserProcess+0x168>
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d030      	beq.n	8001040 <BLUENRG2__vUserProcess+0x168>
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d02a      	beq.n	8001040 <BLUENRG2__vUserProcess+0x168>
            !APP_FLAG( NOTIFICATIONS_ENABLED ) )
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if( APP_FLAG( CONNECTED ) && APP_FLAG( END_READ_TX_CHAR_HANDLE ) && APP_FLAG( END_READ_RX_CHAR_HANDLE ) &&
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d124      	bne.n	8001040 <BLUENRG2__vUserProcess+0x168>
            //       // Radio is busy.
            //       if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
            //     }
            //     APP_FLAG_SET(NOTIFICATIONS_ENABLED);
            // }
            uint8_t  client_char_conf_data[] = { 0x01, 0x00 }; // Enable notifications
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	80bb      	strh	r3, [r7, #4]
            uint32_t tickstart               = HAL_GetTick();
 8000ffa:	f001 fb33 	bl	8002664 <HAL_GetTick>
 8000ffe:	62b8      	str	r0, [r7, #40]	; 0x28

            while( aci_gatt_write_char_desc( connection_handle, BLUENRG2__u16TxHandle + 2, 2, client_char_conf_data ) ==
 8001000:	e008      	b.n	8001014 <BLUENRG2__vUserProcess+0x13c>
                   BLE_STATUS_NOT_ALLOWED )
            {
                // Radio is busy.
                if( ( HAL_GetTick() - tickstart ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
 8001002:	f001 fb2f 	bl	8002664 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001010:	4293      	cmp	r3, r2
 8001012:	d80e      	bhi.n	8001032 <BLUENRG2__vUserProcess+0x15a>
            while( aci_gatt_write_char_desc( connection_handle, BLUENRG2__u16TxHandle + 2, 2, client_char_conf_data ) ==
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <BLUENRG2__vUserProcess+0x20c>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b298      	uxth	r0, r3
 800101a:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <BLUENRG2__vUserProcess+0x218>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	3302      	adds	r3, #2
 8001020:	b299      	uxth	r1, r3
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2202      	movs	r2, #2
 8001026:	f005 fb84 	bl	8006732 <aci_gatt_write_char_desc>
 800102a:	4603      	mov	r3, r0
 800102c:	2b46      	cmp	r3, #70	; 0x46
 800102e:	d0e8      	beq.n	8001002 <BLUENRG2__vUserProcess+0x12a>
 8001030:	e000      	b.n	8001034 <BLUENRG2__vUserProcess+0x15c>
                    break;
 8001032:	bf00      	nop
            }
            APP_FLAG_SET( NOTIFICATIONS_ENABLED );
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103c:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 800103e:	6013      	str	r3, [r2, #0]
        }
    } /* if (BLUENRG2__u8DeviceRole == MASTER_ROLE) */

    if( APP_FLAG( CONNECTED ) && APP_FLAG( NOTIFICATIONS_ENABLED ) )
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03a      	beq.n	80010c2 <BLUENRG2__vUserProcess+0x1ea>
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <BLUENRG2__vUserProcess+0x1fc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d034      	beq.n	80010c2 <BLUENRG2__vUserProcess+0x1ea>
    {
        if( HAL_GetTick() - u32LastRssiReadTick > APP_RSSI_READING_PERIOD )
 8001058:	f001 fb04 	bl	8002664 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <BLUENRG2__vUserProcess+0x21c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001068:	d917      	bls.n	800109a <BLUENRG2__vUserProcess+0x1c2>
        {
            int8_t i8tempRssi;
            hci_read_rssi( connection_handle, &i8tempRssi );
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <BLUENRG2__vUserProcess+0x20c>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	1cfa      	adds	r2, r7, #3
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f007 f831 	bl	80080dc <hci_read_rssi>
            APP__vUpdateDetectRange( i8tempRssi );
 800107a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fea8 	bl	8000dd4 <APP__vUpdateDetectRange>
            PRINT_DBG( "[RSSI] %d dBm\r\n", i8tempRssi );
 8001084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <BLUENRG2__vUserProcess+0x220>)
 800108c:	f007 fd62 	bl	8008b54 <iprintf>
            u32LastRssiReadTick = HAL_GetTick();
 8001090:	f001 fae8 	bl	8002664 <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <BLUENRG2__vUserProcess+0x21c>)
 8001098:	6013      	str	r3, [r2, #0]
        }

        if( APP__enDetectRange == APP_RANGE_NEAR )
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <BLUENRG2__vUserProcess+0x224>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <BLUENRG2__vUserProcess+0x1e2>
        {
            if( i8ButtonPressed == 1U )
 80010a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <BLUENRG2__vUserProcess+0x1da>
            {
                BSP_LED_Off( LED2 );
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 febc 	bl	8001e28 <BSP_LED_Off>
        if( APP__enDetectRange == APP_RANGE_NEAR )
 80010b0:	e00b      	b.n	80010ca <BLUENRG2__vUserProcess+0x1f2>
            }
            else
            {
                BSP_LED_On( LED2 );
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fea2 	bl	8001dfc <BSP_LED_On>
        if( APP__enDetectRange == APP_RANGE_NEAR )
 80010b8:	e007      	b.n	80010ca <BLUENRG2__vUserProcess+0x1f2>
            }
        }
        else
        {
            BSP_LED_On( LED2 );
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fe9e 	bl	8001dfc <BSP_LED_On>
        if( APP__enDetectRange == APP_RANGE_NEAR )
 80010c0:	e003      	b.n	80010ca <BLUENRG2__vUserProcess+0x1f2>
        }
    }
    else
    {
        BSP_LED_On( LED2 );
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 fe9a 	bl	8001dfc <BSP_LED_On>
    }

    //APP__vLEDHanlder( APP__enDetectRange );
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3734      	adds	r7, #52	; 0x34
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	08009dd8 	.word	0x08009dd8
 80010e0:	200000d4 	.word	0x200000d4
 80010e4:	200000cc 	.word	0x200000cc
 80010e8:	08009de8 	.word	0x08009de8
 80010ec:	200000e4 	.word	0x200000e4
 80010f0:	200000f4 	.word	0x200000f4
 80010f4:	20000138 	.word	0x20000138
 80010f8:	08009dc8 	.word	0x08009dc8
 80010fc:	20000004 	.word	0x20000004

08001100 <aci_gap_proc_complete_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gap_proc_complete_event( uint8_t Procedure_Code, uint8_t Status, uint8_t Data_Length, uint8_t Data[] )
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	460b      	mov	r3, r1
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	717b      	strb	r3, [r7, #5]
    if( Procedure_Code == GAP_GENERAL_DISCOVERY_PROC )
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d119      	bne.n	800114e <aci_gap_proc_complete_event+0x4e>
    {
        /* gap procedure complete has been raised as consequence of a GAP
           terminate procedure done after a device found event during the discovery procedure */
        if( discovery.do_connect == TRUE )
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10c      	bne.n	800113c <aci_gap_proc_complete_event+0x3c>
        {
            discovery.do_connect            = FALSE;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 8001124:	2200      	movs	r2, #0
 8001126:	70da      	strb	r2, [r3, #3]
            discovery.check_disc_proc_timer = FALSE;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
            discovery.startTime             = 0;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
            /* discovery procedure has been completed and no device found:
               go to discovery mode */
            discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 8001136:	2208      	movs	r2, #8
 8001138:	821a      	strh	r2, [r3, #16]
            discovery.check_disc_proc_timer = FALSE;
            discovery.startTime             = 0;
            discovery.device_state          = INIT_STATE;
        }
    }
}
 800113a:	e008      	b.n	800114e <aci_gap_proc_complete_event+0x4e>
            discovery.check_disc_proc_timer = FALSE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
            discovery.startTime             = 0;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
            discovery.device_state          = INIT_STATE;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <aci_gap_proc_complete_event+0x5c>)
 800114a:	2200      	movs	r2, #0
 800114c:	821a      	strh	r2, [r3, #16]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200000b8 	.word	0x200000b8

08001160 <hci_le_connection_complete_event>:
                                       uint16_t Conn_Interval,
                                       uint16_t Conn_Latency,
                                       uint16_t Supervision_Timeout,
                                       uint8_t  Master_Clock_Accuracy )

{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	70fb      	strb	r3, [r7, #3]
    /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
    APP_FLAG_CLEAR( SET_CONNECTABLE );
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <hci_le_connection_complete_event+0x98>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <hci_le_connection_complete_event+0x98>)
 8001188:	6013      	str	r3, [r2, #0]
    discovery.check_disc_proc_timer = FALSE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <hci_le_connection_complete_event+0x9c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    discovery.check_disc_mode_timer = FALSE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <hci_le_connection_complete_event+0x9c>)
 8001192:	2200      	movs	r2, #0
 8001194:	705a      	strb	r2, [r3, #1]
    discovery.startTime             = 0;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <hci_le_connection_complete_event+0x9c>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]

    connection_handle = Connection_Handle;
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <hci_le_connection_complete_event+0xa0>)
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	8013      	strh	r3, [r2, #0]

    APP_FLAG_SET( CONNECTED );
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <hci_le_connection_complete_event+0x98>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <hci_le_connection_complete_event+0x98>)
 80011ac:	6013      	str	r3, [r2, #0]
    discovery.device_state = INIT_STATE;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <hci_le_connection_complete_event+0x9c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	821a      	strh	r2, [r3, #16]

    /* store device role */
    BLUENRG2__u8DeviceRole = Role;
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <hci_le_connection_complete_event+0xa4>)
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	7013      	strb	r3, [r2, #0]

    PRINT_DBG( "Connection Complete with peer address: " );
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <hci_le_connection_complete_event+0xa8>)
 80011bc:	f007 fcca 	bl	8008b54 <iprintf>
    for( uint8_t i = 5; i > 0; i-- )
 80011c0:	2305      	movs	r3, #5
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e00a      	b.n	80011dc <hci_le_connection_complete_event+0x7c>
    {
        PRINT_DBG( "%02X-", Peer_Address[i] );
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <hci_le_connection_complete_event+0xac>)
 80011d2:	f007 fcbf 	bl	8008b54 <iprintf>
    for( uint8_t i = 5; i > 0; i-- )
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3b01      	subs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f1      	bne.n	80011c6 <hci_le_connection_complete_event+0x66>
    }
    PRINT_DBG( "%02X\r\n", Peer_Address[0] );
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <hci_le_connection_complete_event+0xb0>)
 80011ea:	f007 fcb3 	bl	8008b54 <iprintf>

} /* end hci_le_connection_complete_event() */
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200000b8 	.word	0x200000b8
 8001200:	200000cc 	.word	0x200000cc
 8001204:	20000008 	.word	0x20000008
 8001208:	08009df8 	.word	0x08009df8
 800120c:	08009cb8 	.word	0x08009cb8
 8001210:	08009cc0 	.word	0x08009cc0

08001214 <hci_disconnection_complete_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event( uint8_t Status, uint16_t Connection_Handle, uint8_t Reason )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	80bb      	strh	r3, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	71bb      	strb	r3, [r7, #6]
    APP_FLAG_CLEAR( CONNECTED );
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001230:	6013      	str	r3, [r2, #0]
    /* Make the device connectable again. */
    APP_FLAG_SET( SET_CONNECTABLE );
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 800123c:	6013      	str	r3, [r2, #0]
    APP_FLAG_CLEAR( NOTIFICATIONS_ENABLED );
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001248:	6013      	str	r3, [r2, #0]

    APP_FLAG_CLEAR( START_READ_TX_CHAR_HANDLE );
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001254:	6013      	str	r3, [r2, #0]
    APP_FLAG_CLEAR( END_READ_TX_CHAR_HANDLE );
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800125e:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001260:	6013      	str	r3, [r2, #0]
    APP_FLAG_CLEAR( START_READ_RX_CHAR_HANDLE );
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 800126c:	6013      	str	r3, [r2, #0]
    APP_FLAG_CLEAR( END_READ_RX_CHAR_HANDLE );
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001278:	6013      	str	r3, [r2, #0]
    APP_FLAG_CLEAR( TX_BUFFER_FULL );
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <hci_disconnection_complete_event+0x90>)
 8001284:	6013      	str	r3, [r2, #0]

    APP__vUpdateDetectRange( 127 );
 8001286:	207f      	movs	r0, #127	; 0x7f
 8001288:	f7ff fda4 	bl	8000dd4 <APP__vUpdateDetectRange>

    PRINT_DBG( "Disconnection with reason: 0x%02X\r\n", Reason );
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <hci_disconnection_complete_event+0x94>)
 8001292:	f007 fc5f 	bl	8008b54 <iprintf>
    BLUENRG2__vResetDiscoveryContext();
 8001296:	f7ff f9df 	bl	8000658 <BLUENRG2__vResetDiscoveryContext>

} /* end hci_disconnection_complete_event() */
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	08009e20 	.word	0x08009e20

080012ac <hci_le_advertising_report_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event( uint8_t Num_Reports, Advertising_Report_t Advertising_Report[] )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
    /* Advertising_Report contains all the expected parameters */
    uint8_t evt_type    = Advertising_Report[0].Event_Type;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	75fb      	strb	r3, [r7, #23]
    uint8_t data_length = Advertising_Report[0].Length_Data;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	7a1b      	ldrb	r3, [r3, #8]
 80012c2:	75bb      	strb	r3, [r7, #22]
    uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	785b      	ldrb	r3, [r3, #1]
 80012c8:	757b      	strb	r3, [r7, #21]
    uint8_t bdaddr[6];

    BLUENRG_memcpy( bdaddr, Advertising_Report[0].Address, 6 );
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	1c9a      	adds	r2, r3, #2
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	6810      	ldr	r0, [r2, #0]
 80012d4:	6018      	str	r0, [r3, #0]
 80012d6:	8892      	ldrh	r2, [r2, #4]
 80012d8:	809a      	strh	r2, [r3, #4]

    /* BLE CentralApp device not yet found: check current device found */
    if( !( discovery.is_device_found ) )
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <hci_le_advertising_report_event+0xac>)
 80012dc:	789b      	ldrb	r3, [r3, #2]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d135      	bne.n	800134e <hci_le_advertising_report_event+0xa2>
    {
        /* BLE CentralApp device not yet found: check current device found */
        if( ( evt_type == ADV_IND ) && BLUENRG2__u8FindDeviceName( data_length, Advertising_Report[0].Data ) )
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d132      	bne.n	800134e <hci_le_advertising_report_event+0xa2>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	7dbb      	ldrb	r3, [r7, #22]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff faa3 	bl	800083c <BLUENRG2__u8FindDeviceName>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d028      	beq.n	800134e <hci_le_advertising_report_event+0xa2>
        {
            int8_t i8Rssi = Advertising_Report[0].RSSI;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7c1b      	ldrb	r3, [r3, #16]
 8001300:	753b      	strb	r3, [r7, #20]

            APP__vUpdateDetectRange( i8Rssi );
 8001302:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fd64 	bl	8000dd4 <APP__vUpdateDetectRange>

            if( APP__enDetectRange == APP_RANGE_NEAR )
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <hci_le_advertising_report_event+0xb0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11c      	bne.n	800134e <hci_le_advertising_report_event+0xa2>
            {
                discovery.is_device_found       = TRUE;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <hci_le_advertising_report_event+0xac>)
 8001316:	2201      	movs	r2, #1
 8001318:	709a      	strb	r2, [r3, #2]
                discovery.do_connect            = TRUE;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <hci_le_advertising_report_event+0xac>)
 800131c:	2201      	movs	r2, #1
 800131e:	70da      	strb	r2, [r3, #3]
                discovery.check_disc_proc_timer = FALSE;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <hci_le_advertising_report_event+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
                discovery.check_disc_mode_timer = FALSE;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <hci_le_advertising_report_event+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]
                /* store first device found:  address type and address value */
                discovery.device_found_address_type = bdaddr_type;
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <hci_le_advertising_report_event+0xac>)
 800132e:	7d7b      	ldrb	r3, [r7, #21]
 8001330:	7213      	strb	r3, [r2, #8]
                BLUENRG_memcpy( discovery.device_found_address, bdaddr, 6 );
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <hci_le_advertising_report_event+0xac>)
 8001334:	3309      	adds	r3, #9
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	6810      	ldr	r0, [r2, #0]
 800133c:	6018      	str	r0, [r3, #0]
 800133e:	8892      	ldrh	r2, [r2, #4]
 8001340:	809a      	strh	r2, [r3, #4]
                /* device is found: terminate discovery procedure */
                discovery.device_state = DO_TERMINATE_GAP_PROC;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <hci_le_advertising_report_event+0xac>)
 8001344:	2220      	movs	r2, #32
 8001346:	821a      	strh	r2, [r3, #16]
                PRINT_DBG( "Device found\r\n" );
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <hci_le_advertising_report_event+0xb4>)
 800134a:	f007 fc69 	bl	8008c20 <puts>
            }
        }
    }
} /* hci_le_advertising_report_event() */
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000b8 	.word	0x200000b8
 800135c:	20000004 	.word	0x20000004
 8001360:	08009e44 	.word	0x08009e44

08001364 <aci_gatt_attribute_modified_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_attribute_modified_event(
uint16_t Connection_Handle, uint16_t Attr_Handle, uint16_t Offset, uint16_t Attr_Data_Length, uint8_t Attr_Data[] )
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4604      	mov	r4, r0
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4603      	mov	r3, r0
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
    BLUENRG2__vAttributeModifiedCB( Attr_Handle, Attr_Data_Length, Attr_Data );
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa9e 	bl	80008cc <BLUENRG2__vAttributeModifiedCB>
} /* end aci_gatt_attribute_modified_event() */
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event( uint16_t Connection_Handle,
                                  uint16_t Attribute_Handle,
                                  uint8_t  Attribute_Value_Length,
                                  uint8_t  Attribute_Value[] )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4603      	mov	r3, r0
 80013a2:	81fb      	strh	r3, [r7, #14]
 80013a4:	460b      	mov	r3, r1
 80013a6:	81bb      	strh	r3, [r7, #12]
 80013a8:	4613      	mov	r3, r2
 80013aa:	72fb      	strb	r3, [r7, #11]
    if( Attribute_Handle == BLUENRG2__u16TxHandle + 1 )
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <aci_gatt_notification_event+0x34>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d104      	bne.n	80013c2 <aci_gatt_notification_event+0x2a>
    {
        receiveData( Attribute_Value, Attribute_Value_Length );
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff f931 	bl	8000624 <receiveData>
    }
} /* end aci_gatt_notification_event() */
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000f4 	.word	0x200000f4

080013d0 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event( uint16_t Connection_Handle,
                                                 uint16_t Attribute_Handle,
                                                 uint8_t  Attribute_Value_Length,
                                                 uint8_t  Attribute_Value[] )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4603      	mov	r3, r0
 80013da:	81fb      	strh	r3, [r7, #14]
 80013dc:	460b      	mov	r3, r1
 80013de:	81bb      	strh	r3, [r7, #12]
 80013e0:	4613      	mov	r3, r2
 80013e2:	72fb      	strb	r3, [r7, #11]
    PRINT_DBG( "aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle );
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4818      	ldr	r0, [pc, #96]	; (800144c <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 80013ea:	f007 fbb3 	bl	8008b54 <iprintf>
    if( APP_FLAG( START_READ_TX_CHAR_HANDLE ) && !APP_FLAG( END_READ_TX_CHAR_HANDLE ) )
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00f      	beq.n	800141a <aci_gatt_disc_read_char_by_uuid_resp_event+0x4a>
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <aci_gatt_disc_read_char_by_uuid_resp_event+0x4a>
    {
        BLUENRG2__u16TxHandle = Attribute_Handle;
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <aci_gatt_disc_read_char_by_uuid_resp_event+0x84>)
 8001408:	89bb      	ldrh	r3, [r7, #12]
 800140a:	8013      	strh	r3, [r2, #0]
        PRINT_DBG( "TX Char Handle 0x%04X\r\n", BLUENRG2__u16TxHandle );
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <aci_gatt_disc_read_char_by_uuid_resp_event+0x84>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <aci_gatt_disc_read_char_by_uuid_resp_event+0x88>)
 8001414:	f007 fb9e 	bl	8008b54 <iprintf>
            //   BSP_LED_Toggle(LED2);
            //   HAL_Delay(250);
            // }
        }
    }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8001418:	e014      	b.n	8001444 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
        if( APP_FLAG( START_READ_RX_CHAR_HANDLE ) && !APP_FLAG( END_READ_RX_CHAR_HANDLE ) )
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00e      	beq.n	8001444 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d108      	bne.n	8001444 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>
            BLUENRG2__u16RxHandle = Attribute_Handle;
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <aci_gatt_disc_read_char_by_uuid_resp_event+0x8c>)
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	8013      	strh	r3, [r2, #0]
            PRINT_DBG( "RX Char Handle 0x%04X\r\n", BLUENRG2__u16RxHandle );
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <aci_gatt_disc_read_char_by_uuid_resp_event+0x8c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <aci_gatt_disc_read_char_by_uuid_resp_event+0x90>)
 8001440:	f007 fb88 	bl	8008b54 <iprintf>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	08009e54 	.word	0x08009e54
 8001450:	20000000 	.word	0x20000000
 8001454:	200000f4 	.word	0x200000f4
 8001458:	08009e9c 	.word	0x08009e9c
 800145c:	200000f6 	.word	0x200000f6
 8001460:	08009eb4 	.word	0x08009eb4

08001464 <aci_gatt_proc_complete_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event( uint16_t Connection_Handle, uint8_t Error_Code )
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	460a      	mov	r2, r1
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	4613      	mov	r3, r2
 8001472:	717b      	strb	r3, [r7, #5]
    if( APP_FLAG( START_READ_TX_CHAR_HANDLE ) && !APP_FLAG( END_READ_TX_CHAR_HANDLE ) )
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00c      	beq.n	800149a <aci_gatt_proc_complete_event+0x36>
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <aci_gatt_proc_complete_event+0x36>
    {
        APP_FLAG_SET( END_READ_TX_CHAR_HANDLE );
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 8001496:	6013      	str	r3, [r2, #0]
        if( APP_FLAG( START_READ_RX_CHAR_HANDLE ) && !APP_FLAG( END_READ_RX_CHAR_HANDLE ) )
        {
            APP_FLAG_SET( END_READ_RX_CHAR_HANDLE );
        }
    }
} /* end aci_gatt_proc_complete_event() */
 8001498:	e011      	b.n	80014be <aci_gatt_proc_complete_event+0x5a>
        if( APP_FLAG( START_READ_RX_CHAR_HANDLE ) && !APP_FLAG( END_READ_RX_CHAR_HANDLE ) )
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <aci_gatt_proc_complete_event+0x5a>
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <aci_gatt_proc_complete_event+0x5a>
            APP_FLAG_SET( END_READ_RX_CHAR_HANDLE );
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <aci_gatt_proc_complete_event+0x68>)
 80014bc:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_proc_complete_event() */
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <aci_gatt_tx_pool_available_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event( uint16_t Connection_Handle, uint16_t Available_Buffers )
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	4613      	mov	r3, r2
 80014de:	80bb      	strh	r3, [r7, #4]
    APP_FLAG_CLEAR( TX_BUFFER_FULL );
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <aci_gatt_tx_pool_available_event+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <aci_gatt_tx_pool_available_event+0x28>)
 80014ea:	6013      	str	r3, [r2, #0]
} /* end aci_gatt_tx_pool_available_event() */
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	20000000 	.word	0x20000000

080014fc <aci_att_exchange_mtu_resp_event>:
 * Input          : See file bluenrg1_events.h
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event( uint16_t Connection_Handle, uint16_t Server_RX_MTU )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	80bb      	strh	r3, [r7, #4]
    PRINT_DBG( "aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU );
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <aci_att_exchange_mtu_resp_event+0x60>)
 8001512:	f007 fb1f 	bl	8008b54 <iprintf>

    if( Server_RX_MTU <= CLIENT_MAX_MTU_SIZE )
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	2b9e      	cmp	r3, #158	; 0x9e
 800151a:	d805      	bhi.n	8001528 <aci_att_exchange_mtu_resp_event+0x2c>
    {
        write_char_len = Server_RX_MTU - 3;
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	3b03      	subs	r3, #3
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <aci_att_exchange_mtu_resp_event+0x64>)
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	e002      	b.n	800152e <aci_att_exchange_mtu_resp_event+0x32>
    }
    else
    {
        write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <aci_att_exchange_mtu_resp_event+0x64>)
 800152a:	229b      	movs	r2, #155	; 0x9b
 800152c:	801a      	strh	r2, [r3, #0]
    }

    if( ( mtu_exchanged_wait == 0 ) || ( ( mtu_exchanged_wait == 1 ) ) )
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <aci_att_exchange_mtu_resp_event+0x68>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <aci_att_exchange_mtu_resp_event+0x42>
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <aci_att_exchange_mtu_resp_event+0x68>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d109      	bne.n	8001552 <aci_att_exchange_mtu_resp_event+0x56>
        /**
         * The aci_att_exchange_mtu_resp_event is received also if the
         * aci_gatt_exchange_config is called by the other peer.
         * Here we manage this case.
         */
        if( mtu_exchanged_wait == 0 )
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <aci_att_exchange_mtu_resp_event+0x68>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <aci_att_exchange_mtu_resp_event+0x50>
        {
            mtu_exchanged_wait = 2;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <aci_att_exchange_mtu_resp_event+0x68>)
 8001548:	2202      	movs	r2, #2
 800154a:	701a      	strb	r2, [r3, #0]
        }
        mtu_exchanged = 1;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <aci_att_exchange_mtu_resp_event+0x6c>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
    }
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08009ecc 	.word	0x08009ecc
 8001560:	2000000a 	.word	0x2000000a
 8001564:	200000f9 	.word	0x200000f9
 8001568:	200000f8 	.word	0x200000f8

0800156c <GATT_DB_u8AddService>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t GATT_DB_u8AddService( void )
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b09d      	sub	sp, #116	; 0x74
 8001570:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 8001572:	2306      	movs	r3, #6
 8001574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t cu8ServiceUUID[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <GATT_DB_u8AddService+0x110>)
 800157a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800157e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDTx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <GATT_DB_u8AddService+0x114>)
 8001586:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800158a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDRx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001590:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <GATT_DB_u8AddService+0x118>)
 8001592:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


  Service_UUID_t  unTempServiceUUID;
  Char_UUID_t unTempCharUUID;

  BLUENRG_memcpy(&unTempServiceUUID.Service_UUID_128, cu8ServiceUUID, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 800159c:	f107 0414 	add.w	r4, r7, #20
 80015a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &unTempServiceUUID, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 80015aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80015ae:	f107 0114 	add.w	r1, r7, #20
 80015b2:	4a35      	ldr	r2, [pc, #212]	; (8001688 <GATT_DB_u8AddService+0x11c>)
 80015b4:	9200      	str	r2, [sp, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f004 fd67 	bl	800608c <aci_gatt_add_service>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015c4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d14a      	bne.n	8001662 <GATT_DB_u8AddService+0xf6>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDTx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80015cc:	1d3c      	adds	r4, r7, #4
 80015ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <GATT_DB_u8AddService+0x11c>)
 80015da:	8818      	ldrh	r0, [r3, #0]
 80015dc:	1d3a      	adds	r2, r7, #4
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <GATT_DB_u8AddService+0x120>)
 80015e0:	9305      	str	r3, [sp, #20]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9304      	str	r3, [sp, #16]
 80015e6:	2310      	movs	r3, #16
 80015e8:	9303      	str	r3, [sp, #12]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2310      	movs	r3, #16
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	233f      	movs	r3, #63	; 0x3f
 80015f8:	2102      	movs	r1, #2
 80015fa:	f004 fe1d 	bl	8006238 <aci_gatt_add_char>
 80015fe:	4603      	mov	r3, r0
 8001600:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001604:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12c      	bne.n	8001666 <GATT_DB_u8AddService+0xfa>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDRx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 800160c:	1d3c      	adds	r4, r7, #4
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <GATT_DB_u8AddService+0x11c>)
 800161a:	8818      	ldrh	r0, [r3, #0]
 800161c:	1d3a      	adds	r2, r7, #4
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <GATT_DB_u8AddService+0x124>)
 8001620:	9305      	str	r3, [sp, #20]
 8001622:	2301      	movs	r3, #1
 8001624:	9304      	str	r3, [sp, #16]
 8001626:	2310      	movs	r3, #16
 8001628:	9303      	str	r3, [sp, #12]
 800162a:	2301      	movs	r3, #1
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2300      	movs	r3, #0
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	230c      	movs	r3, #12
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	233f      	movs	r3, #63	; 0x3f
 8001638:	2102      	movs	r1, #2
 800163a:	f004 fdfd 	bl	8006238 <aci_gatt_add_char>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001644:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10e      	bne.n	800166a <GATT_DB_u8AddService+0xfe>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <GATT_DB_u8AddService+0x120>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <GATT_DB_u8AddService+0x124>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	480e      	ldr	r0, [pc, #56]	; (8001694 <GATT_DB_u8AddService+0x128>)
 800165a:	f007 fa7b 	bl	8008b54 <iprintf>
  return BLE_STATUS_SUCCESS;
 800165e:	2300      	movs	r3, #0
 8001660:	e008      	b.n	8001674 <GATT_DB_u8AddService+0x108>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001662:	bf00      	nop
 8001664:	e002      	b.n	800166c <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800166a:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <GATT_DB_u8AddService+0x12c>)
 800166e:	f007 fad7 	bl	8008c20 <puts>
  return BLE_STATUS_ERROR ;
 8001672:	2347      	movs	r3, #71	; 0x47
}
 8001674:	4618      	mov	r0, r3
 8001676:	375c      	adds	r7, #92	; 0x5c
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	08009f68 	.word	0x08009f68
 8001680:	08009f78 	.word	0x08009f78
 8001684:	08009f88 	.word	0x08009f88
 8001688:	2000013c 	.word	0x2000013c
 800168c:	2000013e 	.word	0x2000013e
 8001690:	20000140 	.word	0x20000140
 8001694:	08009f00 	.word	0x08009f00
 8001698:	08009f44 	.word	0x08009f44

0800169c <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d163      	bne.n	8001778 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b3e      	cmp	r3, #62	; 0x3e
 80016bc:	d11e      	bne.n	80016fc <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3302      	adds	r3, #2
 80016c2:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	e014      	b.n	80016f4 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <APP_UserEvtRx+0xe4>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d108      	bne.n	80016ee <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <APP_UserEvtRx+0xe4>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	3201      	adds	r2, #1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b09      	cmp	r3, #9
 80016f8:	d9e7      	bls.n	80016ca <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80016fa:	e03d      	b.n	8001778 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2bff      	cmp	r3, #255	; 0xff
 8001702:	d11e      	bne.n	8001742 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3302      	adds	r3, #2
 8001708:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e014      	b.n	800173a <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29a      	uxth	r2, r3
 8001716:	491b      	ldr	r1, [pc, #108]	; (8001784 <APP_UserEvtRx+0xe8>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800171e:	429a      	cmp	r2, r3
 8001720:	d108      	bne.n	8001734 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <APP_UserEvtRx+0xe8>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	3202      	adds	r2, #2
 8001730:	4610      	mov	r0, r2
 8001732:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	3301      	adds	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	2b2a      	cmp	r3, #42	; 0x2a
 800173e:	d9e7      	bls.n	8001710 <APP_UserEvtRx+0x74>
}
 8001740:	e01a      	b.n	8001778 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e014      	b.n	8001772 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29a      	uxth	r2, r3
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <APP_UserEvtRx+0xec>)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001756:	429a      	cmp	r2, r3
 8001758:	d108      	bne.n	800176c <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <APP_UserEvtRx+0xec>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	3202      	adds	r2, #2
 8001768:	4610      	mov	r0, r2
 800176a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	3301      	adds	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d9e7      	bls.n	8001748 <APP_UserEvtRx+0xac>
}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800a03c 	.word	0x0800a03c
 8001784:	0800a08c 	.word	0x0800a08c
 8001788:	0800a004 	.word	0x0800a004

0800178c <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001790:	2006      	movs	r0, #6
 8001792:	f001 f8b2 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}

0800179a <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800179e:	2006      	movs	r0, #6
 80017a0:	f001 f8b9 	bl	8002916 <HAL_NVIC_DisableIRQ>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <HCI_TL_SPI_Init+0x94>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <HCI_TL_SPI_Init+0x94>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HCI_TL_SPI_Init+0x94>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80017c8:	2301      	movs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e0:	f001 f912 	bl	8002a08 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80017e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f001 f902 	bl	8002a08 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001804:	2302      	movs	r3, #2
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f001 f8f3 	bl	8002a08 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2102      	movs	r1, #2
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f001 fba3 	bl	8002f74 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800182e:	f000 fcf7 	bl	8002220 <BSP_SPI1_Init>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000

08001840 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001844:	2101      	movs	r1, #1
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f001 fa87 	bl	8002d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800184e:	2102      	movs	r1, #2
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f001 fa82 	bl	8002d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 fa7c 	bl	8002d5c <HAL_GPIO_DeInit>
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}

0800186a <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2102      	movs	r1, #2
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f001 fb7d 	bl	8002f74 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f001 fb76 	bl	8002f74 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001888:	2005      	movs	r0, #5
 800188a:	f000 fef7 	bl	800267c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f001 fb6c 	bl	8002f74 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800189c:	2005      	movs	r0, #5
 800189e:	f000 feed 	bl	800267c <HAL_Delay>
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80018bc:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HCI_TL_SPI_Receive+0xe0>)
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c6:	6018      	str	r0, [r3, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80018cc:	f7ff ff65 	bl	800179a <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f001 fb4c 	bl	8002f74 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2205      	movs	r2, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fcca 	bl	8002280 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80018fc:	8bfb      	ldrh	r3, [r7, #30]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01e      	beq.n	8001940 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8001902:	8bfa      	ldrh	r2, [r7, #30]
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	429a      	cmp	r2, r3
 8001908:	d901      	bls.n	800190e <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800190e:	2300      	movs	r3, #0
 8001910:	777b      	strb	r3, [r7, #29]
 8001912:	e010      	b.n	8001936 <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8001914:	f107 0116 	add.w	r1, r7, #22
 8001918:	f107 0317 	add.w	r3, r7, #23
 800191c:	2201      	movs	r2, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fcae 	bl	8002280 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001924:	7f7b      	ldrb	r3, [r7, #29]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	7dba      	ldrb	r2, [r7, #22]
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001930:	7f7b      	ldrb	r3, [r7, #29]
 8001932:	3301      	adds	r3, #1
 8001934:	777b      	strb	r3, [r7, #29]
 8001936:	7f7b      	ldrb	r3, [r7, #29]
 8001938:	b29b      	uxth	r3, r3
 800193a:	8bfa      	ldrh	r2, [r7, #30]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8e9      	bhi.n	8001914 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001940:	f000 fe90 	bl	8002664 <HAL_GetTick>
 8001944:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001946:	e007      	b.n	8001958 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001948:	2101      	movs	r1, #1
 800194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194e:	f001 faf9 	bl	8002f44 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001958:	f000 fe84 	bl	8002664 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001966:	d3ef      	bcc.n	8001948 <HCI_TL_SPI_Receive+0xa0>
 8001968:	e000      	b.n	800196c <HCI_TL_SPI_Receive+0xc4>
      break;
 800196a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800196c:	f7ff ff0e 	bl	800178c <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2102      	movs	r1, #2
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f001 fafc 	bl	8002f74 <HAL_GPIO_WritePin>

  return len;
 800197c:	7f7b      	ldrb	r3, [r7, #29]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	08009f98 	.word	0x08009f98

0800198c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HCI_TL_SPI_Send+0x114>)
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	6018      	str	r0, [r3, #0]
 80019a4:	3304      	adds	r3, #4
 80019a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f000 fe5c 	bl	8002664 <HAL_GetTick>
 80019ac:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80019ae:	f7ff fef4 	bl	800179a <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80019b2:	f000 fe57 	bl	8002664 <HAL_GetTick>
 80019b6:	61f8      	str	r0, [r7, #28]

    result = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	2102      	movs	r1, #2
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f001 fad6 	bl	8002f74 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80019c8:	e00a      	b.n	80019e0 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80019ca:	f000 fe4b 	bl	8002664 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d903      	bls.n	80019e0 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80019d8:	f06f 0302 	mvn.w	r3, #2
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80019de:	e004      	b.n	80019ea <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80019e0:	f000 f862 	bl	8001aa8 <IsDataAvailable>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ef      	beq.n	80019ca <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f113 0f03 	cmn.w	r3, #3
 80019f0:	d106      	bne.n	8001a00 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2102      	movs	r1, #2
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f001 fabb 	bl	8002f74 <HAL_GPIO_WritePin>
      break;
 80019fe:	e031      	b.n	8001a64 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001a00:	f107 010c 	add.w	r1, r7, #12
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2205      	movs	r2, #5
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc38 	bl	8002280 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	7b7b      	ldrb	r3, [r7, #13]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8001a20:	8b7a      	ldrh	r2, [r7, #26]
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d306      	bcc.n	8001a36 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <HCI_TL_SPI_Send+0x118>)
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fc26 	bl	8002280 <BSP_SPI1_SendRecv>
 8001a34:	e002      	b.n	8001a3c <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8001a36:	f06f 0301 	mvn.w	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2102      	movs	r1, #2
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f001 fa96 	bl	8002f74 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a48:	f000 fe0c 	bl	8002664 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d903      	bls.n	8001a5e <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 8001a56:	f06f 0302 	mvn.w	r3, #2
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001a5c:	e002      	b.n	8001a64 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dba6      	blt.n	80019b2 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001a64:	f000 fdfe 	bl	8002664 <HAL_GetTick>
 8001a68:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a6a:	e007      	b.n	8001a7c <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f001 fa67 	bl	8002f44 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a7c:	f000 fdf2 	bl	8002664 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a8a:	d3ef      	bcc.n	8001a6c <HCI_TL_SPI_Send+0xe0>
 8001a8c:	e000      	b.n	8001a90 <HCI_TL_SPI_Send+0x104>
      break;
 8001a8e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001a90:	f7ff fe7c 	bl	800178c <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	08009fa0 	.word	0x08009fa0
 8001aa4:	2000014c 	.word	0x2000014c

08001aa8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001aac:	2101      	movs	r1, #1
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f001 fa47 	bl	8002f44 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <hci_tl_lowlevel_init+0x54>)
 8001ad0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <hci_tl_lowlevel_init+0x58>)
 8001ad4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <hci_tl_lowlevel_init+0x5c>)
 8001ad8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <hci_tl_lowlevel_init+0x60>)
 8001adc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <hci_tl_lowlevel_init+0x64>)
 8001ae0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <hci_tl_lowlevel_init+0x68>)
 8001ae4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 fcbb 	bl	8008464 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001aee:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001af2:	4810      	ldr	r0, [pc, #64]	; (8001b34 <hci_tl_lowlevel_init+0x6c>)
 8001af4:	f000 ff43 	bl	800297e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <hci_tl_lowlevel_init+0x70>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <hci_tl_lowlevel_init+0x6c>)
 8001afe:	f000 ff24 	bl	800294a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2006      	movs	r0, #6
 8001b08:	f000 fedb 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f000 fef4 	bl	80028fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080017a9 	.word	0x080017a9
 8001b20:	08001841 	.word	0x08001841
 8001b24:	0800198d 	.word	0x0800198d
 8001b28:	080018a9 	.word	0x080018a9
 8001b2c:	0800186b 	.word	0x0800186b
 8001b30:	080022c1 	.word	0x080022c1
 8001b34:	20000144 	.word	0x20000144
 8001b38:	08001b3d 	.word	0x08001b3d

08001b3c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001b40:	e005      	b.n	8001b4e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001b42:	2000      	movs	r0, #0
 8001b44:	f006 fdf2 	bl	800872c <hci_notify_asynch_evt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001b4e:	f7ff ffab 	bl	8001aa8 <IsDataAvailable>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f4      	bne.n	8001b42 <hci_tl_lowlevel_isr+0x6>
 8001b58:	e000      	b.n	8001b5c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001b5a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0

  HAL_Init();
 8001b62:	f000 fd0f 	bl	8002584 <HAL_Init>
  SystemClock_Config();
 8001b66:	f000 f807 	bl	8001b78 <SystemClock_Config>
  MX_GPIO_Init();
 8001b6a:	f000 f857 	bl	8001c1c <MX_GPIO_Init>
  
  BLUENRG2_vInit();
 8001b6e:	f7fe fd27 	bl	80005c0 <BLUENRG2_vInit>

  while (1)
  {
    BLUENRG2_vProcess();
 8001b72:	f7fe fd4f 	bl	8000614 <BLUENRG2_vProcess>
 8001b76:	e7fc      	b.n	8001b72 <main+0x14>

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b096      	sub	sp, #88	; 0x58
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2244      	movs	r2, #68	; 0x44
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f007 f93a 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b9e:	f001 fa0f 	bl	8002fc0 <HAL_PWREx_ControlVoltageScaling>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ba8:	f000 f8ae 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bac:	2302      	movs	r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fa46 	bl	800306c <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001be6:	f000 f88f 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2103      	movs	r1, #3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fe1a 	bl	800383c <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c0e:	f000 f87b 	bl	8001d08 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3758      	adds	r7, #88	; 0x58
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a33      	ldr	r2, [pc, #204]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MX_GPIO_Init+0xe8>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f001 f96a 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f000 fea6 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001cbc:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f000 fe96 	bl	8002a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f000 fdee 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ce6:	2006      	movs	r0, #6
 8001ce8:	f000 fe07 	bl	80028fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2028      	movs	r0, #40	; 0x28
 8001cf2:	f000 fde6 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cf6:	2028      	movs	r0, #40	; 0x28
 8001cf8:	f000 fdff 	bl	80028fa <HAL_NVIC_EnableIRQ>

}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <Error_Handler+0x8>
	...

08001d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_MspInit+0x44>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_MspInit+0x44>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_MspInit+0x44>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_MspInit+0x44>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_MspInit+0x44>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_MspInit+0x44>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 fc48 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <EXTI0_IRQHandler+0x10>)
 8001db6:	f000 fdf7 	bl	80029a8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000144 	.word	0x20000144

08001dc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <EXTI15_10_IRQHandler+0x10>)
 8001dca:	f000 fded 	bl	80029a8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000028 	.word	0x20000028

08001dd8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <BSP_LED_Init+0x20>)
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08009fa8 	.word	0x08009fa8

08001dfc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <BSP_LED_On+0x28>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	2120      	movs	r1, #32
 8001e10:	2201      	movs	r2, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 f8ae 	bl	8002f74 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000020 	.word	0x20000020

08001e28 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <BSP_LED_Off+0x28>)
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f898 	bl	8002f74 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000020 	.word	0x20000020

08001e54 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <LED_USER_GPIO_Init+0x78>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2120      	movs	r1, #32
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f001 f867 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f000 fda2 	bl	8002a08 <HAL_GPIO_Init>

}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <BSP_PB_Init+0x94>)
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d132      	bne.n	8001f5a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <BSP_PB_Init+0x98>)
 8001efa:	441a      	add	r2, r3
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	491b      	ldr	r1, [pc, #108]	; (8001f6c <BSP_PB_Init+0x9c>)
 8001f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 fd39 	bl	800297e <HAL_EXTI_GetHandle>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f12:	f06f 0303 	mvn.w	r3, #3
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e01f      	b.n	8001f5a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <BSP_PB_Init+0x98>)
 8001f20:	1898      	adds	r0, r3, r2
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <BSP_PB_Init+0xa0>)
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f000 fd0c 	bl	800294a <HAL_EXTI_RegisterCallback>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f38:	f06f 0303 	mvn.w	r3, #3
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e00c      	b.n	8001f5a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f40:	2028      	movs	r0, #40	; 0x28
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <BSP_PB_Init+0xa4>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f000 fcb8 	bl	80028c2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f52:	2328      	movs	r3, #40	; 0x28
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fcd0 	bl	80028fa <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08009fac 	.word	0x08009fac
 8001f68:	20000028 	.word	0x20000028
 8001f6c:	08009fb0 	.word	0x08009fb0
 8001f70:	08009fb4 	.word	0x08009fb4
 8001f74:	08009fb8 	.word	0x08009fb8

08001f78 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <BSP_PB_GetState+0x34>)
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ffd7 	bl	8002f44 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000024 	.word	0x20000024

08001fb0 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fff0 	bl	8001fb0 <BSP_PB_Callback>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <BUTTON_USER_GPIO_Init+0x6c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <BUTTON_USER_GPIO_Init+0x70>)
 8002032:	f000 fce9 	bl	8002a08 <HAL_GPIO_Init>

}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	48000800 	.word	0x48000800

08002048 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d903      	bls.n	8002064 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800205c:	f06f 0301 	mvn.w	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e025      	b.n	80020b0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	4914      	ldr	r1, [pc, #80]	; (80020bc <BSP_COM_Init+0x74>)
 800206a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800206e:	4814      	ldr	r0, [pc, #80]	; (80020c0 <BSP_COM_Init+0x78>)
 8002070:	4613      	mov	r3, r2
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4403      	add	r3, r0
 800207a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4613      	mov	r3, r2
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <BSP_COM_Init+0x78>)
 8002088:	4413      	add	r3, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f86a 	bl	8002164 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	4613      	mov	r3, r2
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <BSP_COM_Init+0x78>)
 800209c:	4413      	add	r3, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f810 	bl	80020c4 <MX_USART2_UART_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020aa:	f06f 0303 	mvn.w	r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000030 	.word	0x20000030
 80020c0:	2000024c 	.word	0x2000024c

080020c4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <MX_USART2_UART_Init+0x64>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f002 fe88 	bl	8004e24 <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40004400 	.word	0x40004400

0800212c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <__io_putchar+0x30>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4613      	mov	r3, r2
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <__io_putchar+0x34>)
 8002144:	1898      	adds	r0, r3, r2
 8002146:	1d39      	adds	r1, r7, #4
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	2201      	movs	r2, #1
 800214e:	f002 fec1 	bl	8004ed4 <HAL_UART_Transmit>
  return ch;
 8002152:	687b      	ldr	r3, [r7, #4]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200002d0 	.word	0x200002d0
 8002160:	2000024c 	.word	0x2000024c

08002164 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0ac      	sub	sp, #176	; 0xb0
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2288      	movs	r2, #136	; 0x88
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fe43 	bl	8008e00 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800217a:	2302      	movs	r3, #2
 800217c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800217e:	2300      	movs	r3, #0
 8002180:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fd5e 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <USART2_MspInit+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <USART2_MspInit+0xb8>)
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <USART2_MspInit+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <USART2_MspInit+0xb8>)
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <USART2_MspInit+0xb8>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <USART2_MspInit+0xb8>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80021bc:	2304      	movs	r3, #4
 80021be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80021d4:	2307      	movs	r3, #7
 80021d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80021da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f000 fc10 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80021e8:	2308      	movs	r3, #8
 80021ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002200:	2307      	movs	r3, #7
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8002206:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f000 fbfa 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002214:	bf00      	nop
 8002216:	37b0      	adds	r7, #176	; 0xb0
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000

08002220 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <BSP_SPI1_Init+0x54>)
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <BSP_SPI1_Init+0x58>)
 800222e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <BSP_SPI1_Init+0x5c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	4911      	ldr	r1, [pc, #68]	; (800227c <BSP_SPI1_Init+0x5c>)
 8002238:	600a      	str	r2, [r1, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d114      	bne.n	8002268 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800223e:	480d      	ldr	r0, [pc, #52]	; (8002274 <BSP_SPI1_Init+0x54>)
 8002240:	f002 fc7e 	bl	8004b40 <HAL_SPI_GetState>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10e      	bne.n	8002268 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800224a:	480a      	ldr	r0, [pc, #40]	; (8002274 <BSP_SPI1_Init+0x54>)
 800224c:	f000 f882 	bl	8002354 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <BSP_SPI1_Init+0x54>)
 8002258:	f000 f83a 	bl	80022d0 <MX_SPI1_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002262:	f06f 0307 	mvn.w	r3, #7
 8002266:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200002d4 	.word	0x200002d4
 8002278:	40013000 	.word	0x40013000
 800227c:	20000338 	.word	0x20000338

08002280 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002298:	9200      	str	r2, [sp, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <BSP_SPI1_SendRecv+0x3c>)
 80022a0:	f002 fa3b 	bl	800471a <HAL_SPI_TransmitReceive>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80022aa:	f06f 0305 	mvn.w	r3, #5
 80022ae:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80022b0:	697b      	ldr	r3, [r7, #20]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200002d4 	.word	0x200002d4

080022c0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80022c4:	f000 f9ce 	bl	8002664 <HAL_GetTick>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <MX_SPI1_Init+0x80>)
 80022e0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2228      	movs	r2, #40	; 0x28
 8002310:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2207      	movs	r2, #7
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f002 f942 	bl	80045c0 <HAL_SPI_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013000 	.word	0x40013000

08002354 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <SPI1_MspInit+0xbc>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <SPI1_MspInit+0xbc>)
 8002362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002366:	6613      	str	r3, [r2, #96]	; 0x60
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <SPI1_MspInit+0xbc>)
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <SPI1_MspInit+0xbc>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <SPI1_MspInit+0xbc>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <SPI1_MspInit+0xbc>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <SPI1_MspInit+0xbc>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <SPI1_MspInit+0xbc>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <SPI1_MspInit+0xbc>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80023b4:	2305      	movs	r3, #5
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c2:	f000 fb21 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80023d6:	2305      	movs	r3, #5
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e4:	f000 fb10 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80023e8:	2308      	movs	r3, #8
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80023f8:	2305      	movs	r3, #5
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <SPI1_MspInit+0xc0>)
 8002404:	f000 fb00 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002408:	bf00      	nop
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	48000400 	.word	0x48000400

08002418 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e00a      	b.n	8002440 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800242a:	f3af 8000 	nop.w
 800242e:	4601      	mov	r1, r0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60ba      	str	r2, [r7, #8]
 8002436:	b2ca      	uxtb	r2, r1
 8002438:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbf0      	blt.n	800242a <_read+0x12>
	}

return len;
 8002448:	687b      	ldr	r3, [r7, #4]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e009      	b.n	8002478 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	60ba      	str	r2, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe5d 	bl	800212c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	dbf1      	blt.n	8002464 <_write+0x12>
	}
	return len;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_close>:

int _close(int file)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
	return -1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b2:	605a      	str	r2, [r3, #4]
	return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_isatty>:

int _isatty(int file)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return 1;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
	return 0;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002524:	f006 fcba 	bl	8008e9c <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20018000 	.word	0x20018000
 8002554:	00000400 	.word	0x00000400
 8002558:	2000033c 	.word	0x2000033c
 800255c:	20000a38 	.word	0x20000a38

08002560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_Init+0x3c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_Init+0x3c>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259a:	2003      	movs	r0, #3
 800259c:	f000 f986 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 f80f 	bl	80025c4 <HAL_InitTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	e001      	b.n	80025b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025b2:	f7ff fbaf 	bl	8001d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40022000 	.word	0x40022000

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025d0:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_InitTick+0x6c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_InitTick+0x70>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_InitTick+0x6c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f99f 	bl	8002932 <HAL_SYSTICK_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d809      	bhi.n	8002614 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002600:	2200      	movs	r2, #0
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f000 f95b 	bl	80028c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_InitTick+0x74>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e007      	b.n	8002624 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e004      	b.n	8002624 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e001      	b.n	8002624 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000003c 	.word	0x2000003c
 8002634:	20000034 	.word	0x20000034
 8002638:	20000038 	.word	0x20000038

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000003c 	.word	0x2000003c
 8002660:	20000340 	.word	0x20000340

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000340 	.word	0x20000340

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000003c 	.word	0x2000003c

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db12      	blt.n	800279c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	490a      	ldr	r1, [pc, #40]	; (80027a8 <__NVIC_DisableIRQ+0x44>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	3320      	adds	r3, #32
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002790:	f3bf 8f4f 	dsb	sy
}
 8002794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002796:	f3bf 8f6f 	isb	sy
}
 800279a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff05 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff1a 	bl	800270c <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff0d 	bl	8002728 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff1d 	bl	8002764 <__NVIC_DisableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff94 	bl	8002868 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	460b      	mov	r3, r1
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800295c:	7afb      	ldrb	r3, [r7, #11]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]
      break;
 8002968:	e002      	b.n	8002970 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
      break;
 800296e:	bf00      	nop
  }

  return status;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e003      	b.n	800299a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2201      	movs	r2, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_EXTI_IRQHandler+0x5c>)
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4798      	blx	r3
    }
  }
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40010414 	.word	0x40010414

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a16:	e17f      	b.n	8002d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8171 	beq.w	8002d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <HAL_GPIO_Init+0x40>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d130      	bne.n	8002aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7e:	2201      	movs	r2, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 0201 	and.w	r2, r3, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d118      	bne.n	8002ae8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	6939      	ldr	r1, [r7, #16]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80ac 	beq.w	8002d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bd2:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_GPIO_Init+0x334>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bfc:	d025      	beq.n	8002c4a <HAL_GPIO_Init+0x242>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x338>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_GPIO_Init+0x23e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_GPIO_Init+0x33c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x23a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_GPIO_Init+0x340>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x236>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	; (8002d4c <HAL_GPIO_Init+0x344>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x232>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_GPIO_Init+0x348>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x22e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <HAL_GPIO_Init+0x34c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x22a>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00c      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e00a      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e008      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e004      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x244>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	f002 0203 	and.w	r2, r2, #3
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	4093      	lsls	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c5c:	4937      	ldr	r1, [pc, #220]	; (8002d3c <HAL_GPIO_Init+0x334>)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c8e:	4a32      	ldr	r2, [pc, #200]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f ae78 	bne.w	8002a18 <HAL_GPIO_Init+0x10>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	48000400 	.word	0x48000400
 8002d44:	48000800 	.word	0x48000800
 8002d48:	48000c00 	.word	0x48000c00
 8002d4c:	48001000 	.word	0x48001000
 8002d50:	48001400 	.word	0x48001400
 8002d54:	48001800 	.word	0x48001800
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d6a:	e0cd      	b.n	8002f08 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80c0 	beq.w	8002f02 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d82:	4a68      	ldr	r2, [pc, #416]	; (8002f24 <HAL_GPIO_DeInit+0x1c8>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002daa:	d025      	beq.n	8002df8 <HAL_GPIO_DeInit+0x9c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_GPIO_DeInit+0x1cc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01f      	beq.n	8002df4 <HAL_GPIO_DeInit+0x98>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a5d      	ldr	r2, [pc, #372]	; (8002f2c <HAL_GPIO_DeInit+0x1d0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d019      	beq.n	8002df0 <HAL_GPIO_DeInit+0x94>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <HAL_GPIO_DeInit+0x1d4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_GPIO_DeInit+0x90>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a5b      	ldr	r2, [pc, #364]	; (8002f34 <HAL_GPIO_DeInit+0x1d8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00d      	beq.n	8002de8 <HAL_GPIO_DeInit+0x8c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_GPIO_DeInit+0x1dc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_DeInit+0x88>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_GPIO_DeInit+0x1e0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_GPIO_DeInit+0x84>
 8002ddc:	2306      	movs	r3, #6
 8002dde:	e00c      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002de0:	2307      	movs	r3, #7
 8002de2:	e00a      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002de4:	2305      	movs	r3, #5
 8002de6:	e008      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e006      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002dec:	2303      	movs	r3, #3
 8002dee:	e004      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_GPIO_DeInit+0x9e>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	4093      	lsls	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d132      	bne.n	8002e70 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	494b      	ldr	r1, [pc, #300]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	4947      	ldr	r1, [pc, #284]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4944      	ldr	r1, [pc, #272]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	4940      	ldr	r1, [pc, #256]	; (8002f40 <HAL_GPIO_DeInit+0x1e4>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_GPIO_DeInit+0x1c8>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	4830      	ldr	r0, [pc, #192]	; (8002f24 <HAL_GPIO_DeInit+0x1c8>)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	400a      	ands	r2, r1
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2103      	movs	r1, #3
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	08da      	lsrs	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3208      	adds	r2, #8
 8002e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	08d2      	lsrs	r2, r2, #3
 8002ea4:	4019      	ands	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f af2b 	bne.w	8002d6c <HAL_GPIO_DeInit+0x10>
  }
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40010000 	.word	0x40010000
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	48000c00 	.word	0x48000c00
 8002f34:	48001000 	.word	0x48001000
 8002f38:	48001400 	.word	0x48001400
 8002f3c:	48001800 	.word	0x48001800
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e001      	b.n	8002f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000

08002fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fce:	d130      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d038      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2232      	movs	r2, #50	; 0x32
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9b      	lsrs	r3, r3, #18
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003004:	e002      	b.n	800300c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d102      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f2      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d110      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e00f      	b.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d007      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003048:	4a05      	ldr	r2, [pc, #20]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	20000034 	.word	0x20000034
 8003068:	431bde83 	.word	0x431bde83

0800306c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e3d8      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307e:	4b97      	ldr	r3, [pc, #604]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003088:	4b94      	ldr	r3, [pc, #592]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80e4 	beq.w	8003268 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	f040 808b 	bne.w	80031c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8087 	bne.w	80031c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030b6:	4b89      	ldr	r3, [pc, #548]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e3b0      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_RCC_OscConfig+0x7c>
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e6:	e005      	b.n	80030f4 <HAL_RCC_OscConfig+0x88>
 80030e8:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d223      	bcs.n	8003140 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fd43 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e391      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310c:	4b73      	ldr	r3, [pc, #460]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a72      	ldr	r2, [pc, #456]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b70      	ldr	r3, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	496d      	ldr	r1, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312a:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4968      	ldr	r1, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	e025      	b.n	800318c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4960      	ldr	r1, [pc, #384]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	495b      	ldr	r1, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd03 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e351      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800318c:	f000 fc38 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	4950      	ldr	r1, [pc, #320]	; (80032e0 <HAL_RCC_OscConfig+0x274>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_RCC_OscConfig+0x278>)
 80031aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031ac:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa07 	bl	80025c4 <HAL_InitTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d052      	beq.n	8003266 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	e335      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d032      	beq.n	8003232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031cc:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d8:	f7ff fa44 	bl	8002664 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e0:	f7ff fa40 	bl	8002664 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e31e      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a36      	ldr	r2, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4931      	ldr	r1, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321c:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	492c      	ldr	r1, [pc, #176]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	e01a      	b.n	8003268 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800323e:	f7ff fa11 	bl	8002664 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003246:	f7ff fa0d 	bl	8002664 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e2eb      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x1da>
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d074      	beq.n	800335e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x21a>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d10e      	bne.n	800329e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d10b      	bne.n	800329e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d064      	beq.n	800335c <HAL_RCC_OscConfig+0x2f0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d160      	bne.n	800335c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e2c8      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x24a>
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e026      	b.n	8003304 <HAL_RCC_OscConfig+0x298>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032be:	d115      	bne.n	80032ec <HAL_RCC_OscConfig+0x280>
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a05      	ldr	r2, [pc, #20]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a02      	ldr	r2, [pc, #8]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x298>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08009fbc 	.word	0x08009fbc
 80032e4:	20000034 	.word	0x20000034
 80032e8:	20000038 	.word	0x20000038
 80032ec:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a9f      	ldr	r2, [pc, #636]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b9d      	ldr	r3, [pc, #628]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a9c      	ldr	r2, [pc, #624]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7ff f9aa 	bl	8002664 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff f9a6 	bl	8002664 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e284      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003326:	4b92      	ldr	r3, [pc, #584]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x2a8>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7ff f996 	bl	8002664 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7ff f992 	bl	8002664 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e270      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x2d0>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d060      	beq.n	800342c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x310>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d119      	bne.n	80033aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d116      	bne.n	80033aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_OscConfig+0x328>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e24d      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	4973      	ldr	r1, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a8:	e040      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d023      	beq.n	80033fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b2:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7ff f951 	bl	8002664 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7ff f94d 	bl	8002664 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e22b      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d8:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	495f      	ldr	r1, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e018      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7ff f92d 	bl	8002664 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7ff f929 	bl	8002664 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e207      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01c      	beq.n	800347a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003440:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7ff f908 	bl	8002664 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7ff f904 	bl	8002664 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1e2      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <HAL_RCC_OscConfig+0x3ec>
 8003478:	e01b      	b.n	80034b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003480:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7ff f8eb 	bl	8002664 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7ff f8e7 	bl	8002664 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1c5      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ef      	bne.n	8003492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a6 	beq.w	800360c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCC_OscConfig+0x508>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d118      	bne.n	800352a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_OscConfig+0x508>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_RCC_OscConfig+0x508>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003504:	f7ff f8ae 	bl	8002664 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7ff f8aa 	bl	8002664 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e188      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x508>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d108      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d8>
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003542:	e029      	b.n	8003598 <HAL_RCC_OscConfig+0x52c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d115      	bne.n	8003578 <HAL_RCC_OscConfig+0x50c>
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	4a03      	ldr	r2, [pc, #12]	; (8003570 <HAL_RCC_OscConfig+0x504>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x52c>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	4a90      	ldr	r2, [pc, #576]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003588:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	4a8c      	ldr	r2, [pc, #560]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7ff f860 	bl	8002664 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7ff f85c 	bl	8002664 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e138      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ed      	beq.n	80035a8 <HAL_RCC_OscConfig+0x53c>
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7ff f849 	bl	8002664 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7ff f845 	bl	8002664 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e121      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ec:	4b74      	ldr	r3, [pc, #464]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ed      	bne.n	80035d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 810c 	beq.w	800382e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	2b02      	cmp	r3, #2
 800361c:	f040 80d4 	bne.w	80037c8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0203 	and.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d130      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	3b01      	subs	r3, #1
 8003640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d127      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d11f      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003660:	2a07      	cmp	r2, #7
 8003662:	bf14      	ite	ne
 8003664:	2201      	movne	r2, #1
 8003666:	2200      	moveq	r2, #0
 8003668:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d109      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d06e      	beq.n	8003774 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d069      	beq.n	8003770 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0bb      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a40      	ldr	r2, [pc, #256]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80036be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c4:	f7fe ffce 	bl	8002664 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe ffca 	bl	8002664 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0a8      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ea:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <HAL_RCC_OscConfig+0x758>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003704:	0212      	lsls	r2, r2, #8
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0652      	lsls	r2, r2, #25
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003724:	0912      	lsrs	r2, r2, #4
 8003726:	0452      	lsls	r2, r2, #17
 8003728:	430a      	orrs	r2, r1
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800372c:	4313      	orrs	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003748:	f7fe ff8c 	bl	8002664 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe ff88 	bl	8002664 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e066      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800376e:	e05e      	b.n	800382e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e05d      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d156      	bne.n	800382e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003798:	f7fe ff64 	bl	8002664 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe ff60 	bl	8002664 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e03e      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_OscConfig+0x754>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x734>
 80037be:	e036      	b.n	800382e <HAL_RCC_OscConfig+0x7c2>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d02d      	beq.n	800382a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 80037f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe ff2f 	bl	8002664 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe ff2b 	bl	8002664 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e009      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_OscConfig+0x7cc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <HAL_RCC_OscConfig+0x79e>
 8003828:	e001      	b.n	800382e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0c8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d910      	bls.n	8003880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	4961      	ldr	r1, [pc, #388]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b0      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d04c      	beq.n	8003926 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003894:	4b56      	ldr	r3, [pc, #344]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d121      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e09e      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d115      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e092      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c4:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e086      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d4:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e07e      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 0203 	bic.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	493f      	ldr	r1, [pc, #252]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f6:	f7fe feb5 	bl	8002664 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fe:	f7fe feb1 	bl	8002664 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e066      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 020c 	and.w	r2, r3, #12
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	429a      	cmp	r2, r3
 8003924:	d1eb      	bne.n	80038fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	492c      	ldr	r1, [pc, #176]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d210      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4924      	ldr	r1, [pc, #144]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_ClockConfig+0x1b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e036      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4918      	ldr	r1, [pc, #96]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4910      	ldr	r1, [pc, #64]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039b2:	f000 f825 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCC_ClockConfig+0x1b4>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	490c      	ldr	r1, [pc, #48]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	5ccb      	ldrb	r3, [r1, r3]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fdf4 	bl	80025c4 <HAL_InitTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	72fb      	strb	r3, [r7, #11]

  return status;
 80039e0:	7afb      	ldrb	r3, [r7, #11]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40022000 	.word	0x40022000
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08009fbc 	.word	0x08009fbc
 80039f8:	20000034 	.word	0x20000034
 80039fc:	20000038 	.word	0x20000038

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x34>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d121      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d11e      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e005      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a50:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a5c:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e004      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d134      	bne.n	8003af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d003      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0xac>
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aa8:	617b      	str	r3, [r7, #20]
      break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aae:	617b      	str	r3, [r7, #20]
      break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	617b      	str	r3, [r7, #20]
      break;
 8003ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	fb03 f202 	mul.w	r2, r3, r2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	0e5b      	lsrs	r3, r3, #25
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003af8:	69bb      	ldr	r3, [r7, #24]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	08009fd4 	.word	0x08009fd4
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	007a1200 	.word	0x007a1200

08003b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000034 	.word	0x20000034

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b34:	f7ff fff0 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4904      	ldr	r1, [pc, #16]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08009fcc 	.word	0x08009fcc

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b60:	f7ff ffda 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0adb      	lsrs	r3, r3, #11
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4904      	ldr	r1, [pc, #16]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08009fcc 	.word	0x08009fcc

08003b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba0:	f7ff fa00 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003ba4:	6178      	str	r0, [r7, #20]
 8003ba6:	e014      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc0:	f7ff f9f0 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d10b      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d919      	bls.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2ba0      	cmp	r3, #160	; 0xa0
 8003be4:	d902      	bls.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be6:	2302      	movs	r3, #2
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e013      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bec:	2301      	movs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e010      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d902      	bls.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e00a      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d102      	bne.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c04:	2302      	movs	r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e004      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d101      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0207 	bic.w	r2, r3, #7
 8003c1c:	4909      	ldr	r1, [pc, #36]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40022000 	.word	0x40022000

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c54:	2300      	movs	r3, #0
 8003c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d041      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c72:	d824      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c78:	d008      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c7e:	d81e      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c88:	d010      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c8a:	e018      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c8c:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a85      	ldr	r2, [pc, #532]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c98:	e015      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fabb 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003caa:	e00c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3320      	adds	r3, #32
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fba6 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cda:	4973      	ldr	r1, [pc, #460]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d041      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cfc:	d02a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d02:	d824      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d08:	d008      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d0e:	d81e      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d18:	d010      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d1a:	e018      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d1c:	4b62      	ldr	r3, [pc, #392]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fa73 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3320      	adds	r3, #32
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fb5e 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	74fb      	strb	r3, [r7, #19]
      break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d5c:	4b52      	ldr	r3, [pc, #328]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6a:	494f      	ldr	r1, [pc, #316]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d72:	e001      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a0 	beq.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc8:	f7fe fc4c 	bl	8002664 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe fc48 	bl	8002664 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d902      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	74fb      	strb	r3, [r7, #19]
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ef      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d15c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df6:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01f      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d019      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	4a1c      	ldr	r2, [pc, #112]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fc07 	bl	8002664 <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	e00b      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fc03 	bl	8002664 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d902      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ec      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb4:	7c7b      	ldrb	r3, [r7, #17]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b9e      	ldr	r3, [pc, #632]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4a9d      	ldr	r2, [pc, #628]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed2:	4b98      	ldr	r3, [pc, #608]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 0203 	bic.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	4994      	ldr	r1, [pc, #592]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 020c 	bic.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	498c      	ldr	r1, [pc, #560]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f16:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4983      	ldr	r1, [pc, #524]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f38:	4b7e      	ldr	r3, [pc, #504]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	497b      	ldr	r1, [pc, #492]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	4972      	ldr	r1, [pc, #456]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f7c:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	496a      	ldr	r1, [pc, #424]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	4961      	ldr	r1, [pc, #388]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc0:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	4959      	ldr	r1, [pc, #356]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4950      	ldr	r1, [pc, #320]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004004:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	4948      	ldr	r1, [pc, #288]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	493f      	ldr	r1, [pc, #252]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d028      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004048:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004066:	d106      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
 8004074:	e011      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8c8 	bl	800421c <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d028      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	491f      	ldr	r1, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d0:	60d3      	str	r3, [r2, #12]
 80040d2:	e011      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f899 	bl	800421c <RCCEx_PLLSAI1_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d109      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e014      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f867 	bl	800421c <RCCEx_PLLSAI1_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02f      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004176:	4928      	ldr	r1, [pc, #160]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f844 	bl	800421c <RCCEx_PLLSAI1_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	74bb      	strb	r3, [r7, #18]
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3320      	adds	r3, #32
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f925 	bl	8004404 <RCCEx_PLLSAI2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e2:	490d      	ldr	r1, [pc, #52]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004206:	4904      	ldr	r1, [pc, #16]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800420e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000

0800421c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422a:	4b75      	ldr	r3, [pc, #468]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004236:	4b72      	ldr	r3, [pc, #456]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10d      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
       ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800424e:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
       ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d047      	beq.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e044      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d018      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x86>
 8004270:	2b03      	cmp	r3, #3
 8004272:	d825      	bhi.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d002      	beq.n	800427e <RCCEx_PLLSAI1_Config+0x62>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d009      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x74>
 800427c:	e020      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800427e:	4b60      	ldr	r3, [pc, #384]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11d      	bne.n	80042c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428e:	e01a      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e013      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042a2:	4b57      	ldr	r3, [pc, #348]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042be:	e006      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e004      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	430b      	orrs	r3, r1
 80042ec:	4944      	ldr	r1, [pc, #272]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d17d      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042f8:	4b41      	ldr	r3, [pc, #260]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a40      	ldr	r2, [pc, #256]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004304:	f7fe f9ae 	bl	8002664 <HAL_GetTick>
 8004308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800430a:	e009      	b.n	8004320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800430c:	f7fe f9aa 	bl	8002664 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d902      	bls.n	8004320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	73fb      	strb	r3, [r7, #15]
        break;
 800431e:	e005      	b.n	800432c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004320:	4b37      	ldr	r3, [pc, #220]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ef      	bne.n	800430c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d160      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6892      	ldr	r2, [r2, #8]
 8004348:	0211      	lsls	r1, r2, #8
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	0912      	lsrs	r2, r2, #4
 8004350:	0452      	lsls	r2, r2, #17
 8004352:	430a      	orrs	r2, r1
 8004354:	492a      	ldr	r1, [pc, #168]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
 800435a:	e027      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d112      	bne.n	8004388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800436a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	0211      	lsls	r1, r2, #8
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6912      	ldr	r2, [r2, #16]
 8004378:	0852      	lsrs	r2, r2, #1
 800437a:	3a01      	subs	r2, #1
 800437c:	0552      	lsls	r2, r2, #21
 800437e:	430a      	orrs	r2, r1
 8004380:	491f      	ldr	r1, [pc, #124]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]
 8004386:	e011      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6892      	ldr	r2, [r2, #8]
 8004398:	0211      	lsls	r1, r2, #8
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6952      	ldr	r2, [r2, #20]
 800439e:	0852      	lsrs	r2, r2, #1
 80043a0:	3a01      	subs	r2, #1
 80043a2:	0652      	lsls	r2, r2, #25
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4916      	ldr	r1, [pc, #88]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe f954 	bl	8002664 <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043be:	e009      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c0:	f7fe f950 	bl	8002664 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	73fb      	strb	r3, [r7, #15]
          break;
 80043d2:	e005      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4904      	ldr	r1, [pc, #16]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000

08004404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800441e:	4b67      	ldr	r3, [pc, #412]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d10d      	bne.n	800444a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
       ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
       ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d047      	beq.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e044      	b.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d018      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x86>
 8004458:	2b03      	cmp	r3, #3
 800445a:	d825      	bhi.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <RCCEx_PLLSAI2_Config+0x62>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d009      	beq.n	8004478 <RCCEx_PLLSAI2_Config+0x74>
 8004464:	e020      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004466:	4b55      	ldr	r3, [pc, #340]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11d      	bne.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004476:	e01a      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d116      	bne.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e013      	b.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004496:	4b49      	ldr	r3, [pc, #292]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044a6:	e006      	b.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e004      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044be:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	430b      	orrs	r3, r1
 80044d4:	4939      	ldr	r1, [pc, #228]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d167      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a35      	ldr	r2, [pc, #212]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ec:	f7fe f8ba 	bl	8002664 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f4:	f7fe f8b6 	bl	8002664 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
        break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ef      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14a      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004520:	4b26      	ldr	r3, [pc, #152]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	0912      	lsrs	r2, r2, #4
 8004538:	0452      	lsls	r2, r2, #17
 800453a:	430a      	orrs	r2, r1
 800453c:	491f      	ldr	r1, [pc, #124]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	614b      	str	r3, [r1, #20]
 8004542:	e011      	b.n	8004568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800454c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	0211      	lsls	r1, r2, #8
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6912      	ldr	r2, [r2, #16]
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0652      	lsls	r2, r2, #25
 8004560:	430a      	orrs	r2, r1
 8004562:	4916      	ldr	r1, [pc, #88]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fe f876 	bl	8002664 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800457a:	e009      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800457c:	f7fe f872 	bl	8002664 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d902      	bls.n	8004590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	73fb      	strb	r3, [r7, #15]
          break;
 800458e:	e005      	b.n	800459c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ef      	beq.n	800457c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000

080045c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e095      	b.n	80046fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e2:	d009      	beq.n	80045f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
 80045ea:	e005      	b.n	80045f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f877 	bl	8004706 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004638:	d902      	bls.n	8004640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e002      	b.n	8004646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800464e:	d007      	beq.n	8004660 <HAL_SPI_Init+0xa0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	ea42 0103 	orr.w	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	f003 0204 	and.w	r2, r3, #4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08a      	sub	sp, #40	; 0x28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x26>
 800473c:	2302      	movs	r3, #2
 800473e:	e1fb      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x41e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004748:	f7fd ff8c 	bl	8002664 <HAL_GetTick>
 800474c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004754:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004764:	7efb      	ldrb	r3, [r7, #27]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d00e      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x6e>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004770:	d106      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x66>
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d003      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004780:	2302      	movs	r3, #2
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004786:	e1cd      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_SPI_TransmitReceive+0x80>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_TransmitReceive+0x80>
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047a0:	e1c0      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d003      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2205      	movs	r2, #5
 80047b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	887a      	ldrh	r2, [r7, #2]
 80047e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f8:	d802      	bhi.n	8004800 <HAL_SPI_TransmitReceive+0xe6>
 80047fa:	8a3b      	ldrh	r3, [r7, #16]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d908      	bls.n	8004812 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	e007      	b.n	8004822 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004820:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d007      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004848:	d97c      	bls.n	8004944 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x13e>
 8004852:	8a7b      	ldrh	r3, [r7, #18]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d169      	bne.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	881a      	ldrh	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	1c9a      	adds	r2, r3, #2
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800487c:	e056      	b.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d11b      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1aa>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x1aa>
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2b01      	cmp	r3, #1
 800489a:	d113      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d11c      	bne.n	800490c <HAL_SPI_TransmitReceive+0x1f2>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	b292      	uxth	r2, r2
 80048ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	1c9a      	adds	r2, r3, #2
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004908:	2301      	movs	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800490c:	f7fd feaa 	bl	8002664 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004918:	429a      	cmp	r2, r3
 800491a:	d807      	bhi.n	800492c <HAL_SPI_TransmitReceive+0x212>
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d003      	beq.n	800492c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800492a:	e0fb      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1a3      	bne.n	800487e <HAL_SPI_TransmitReceive+0x164>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d19d      	bne.n	800487e <HAL_SPI_TransmitReceive+0x164>
 8004942:	e0df      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x23a>
 800494c:	8a7b      	ldrh	r3, [r7, #18]
 800494e:	2b01      	cmp	r3, #1
 8004950:	f040 80cb 	bne.w	8004aea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d912      	bls.n	8004984 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b02      	subs	r3, #2
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004982:	e0b2      	b.n	8004aea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049aa:	e09e      	b.n	8004aea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d134      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02f      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d12c      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d912      	bls.n	80049fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049f8:	e012      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d148      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d042      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d923      	bls.n	8004a92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	b292      	uxth	r2, r2
 8004a56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b02      	subs	r3, #2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d81f      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e016      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f103 020c 	add.w	r2, r3, #12
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ac4:	f7fd fdce 	bl	8002664 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d803      	bhi.n	8004adc <HAL_SPI_TransmitReceive+0x3c2>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d102      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x3c8>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ae8:	e01c      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f af5b 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f47f af54 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f945 	bl	8004d98 <SPI_EndRxTxTransaction>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60
 8004b20:	e000      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b4e:	b2db      	uxtb	r3, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b6c:	f7fd fd7a 	bl	8002664 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b7c:	f7fd fd72 	bl	8002664 <HAL_GetTick>
 8004b80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b82:	4b39      	ldr	r3, [pc, #228]	; (8004c68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	015b      	lsls	r3, r3, #5
 8004b88:	0d1b      	lsrs	r3, r3, #20
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	fb02 f303 	mul.w	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b92:	e054      	b.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d050      	beq.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b9c:	f7fd fd62 	bl	8002664 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d902      	bls.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d13d      	bne.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bca:	d111      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd4:	d004      	beq.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d107      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf8:	d10f      	bne.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e017      	b.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d19b      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000034 	.word	0x20000034

08004c6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c7e:	f7fd fcf1 	bl	8002664 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c8e:	f7fd fce9 	bl	8002664 <HAL_GetTick>
 8004c92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c9c:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	0d1b      	lsrs	r3, r3, #20
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cb4:	e060      	b.n	8004d78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cbc:	d107      	bne.n	8004cce <SPI_WaitFifoStateUntilTimeout+0x62>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d050      	beq.n	8004d78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd6:	f7fd fcc5 	bl	8002664 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d902      	bls.n	8004cec <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d13d      	bne.n	8004d68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d04:	d111      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0e:	d004      	beq.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d18:	d107      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d32:	d10f      	bne.n	8004d54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e010      	b.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d196      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3728      	adds	r7, #40	; 0x28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000034 	.word	0x20000034

08004d98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ff5b 	bl	8004c6c <SPI_WaitFifoStateUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e027      	b.n	8004e1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fec0 	bl	8004b5c <SPI_WaitFlagStateUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e014      	b.n	8004e1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff34 	bl	8004c6c <SPI_WaitFifoStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e000      	b.n	8004e1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e040      	b.n	8004eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f83a 	bl	8004ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8ca 	bl	8004ffc <UART_SetConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e022      	b.n	8004eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb76 	bl	800556c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fbfd 	bl	80056b0 <UART_CheckIdleState>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	f040 8082 	bne.w	8004ff2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_UART_Transmit+0x26>
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e07a      	b.n	8004ff4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_UART_Transmit+0x38>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e073      	b.n	8004ff4 <HAL_UART_Transmit+0x120>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f22:	f7fd fb9f 	bl	8002664 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d108      	bne.n	8004f54 <HAL_UART_Transmit+0x80>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e003      	b.n	8004f5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f64:	e02d      	b.n	8004fc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2180      	movs	r1, #128	; 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fbe6 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e039      	b.n	8004ff4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	881a      	ldrh	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f92:	b292      	uxth	r2, r2
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e008      	b.n	8004fb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1cb      	bne.n	8004f66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2140      	movs	r1, #64	; 0x40
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fbb2 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e005      	b.n	8004ff4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b08a      	sub	sp, #40	; 0x28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	431a      	orrs	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	4313      	orrs	r3, r2
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4ba4      	ldr	r3, [pc, #656]	; (80052bc <UART_SetConfig+0x2c0>)
 800502c:	4013      	ands	r3, r2
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005034:	430b      	orrs	r3, r1
 8005036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a99      	ldr	r2, [pc, #612]	; (80052c0 <UART_SetConfig+0x2c4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	4313      	orrs	r3, r2
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a90      	ldr	r2, [pc, #576]	; (80052c4 <UART_SetConfig+0x2c8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d126      	bne.n	80050d4 <UART_SetConfig+0xd8>
 8005086:	4b90      	ldr	r3, [pc, #576]	; (80052c8 <UART_SetConfig+0x2cc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d81b      	bhi.n	80050cc <UART_SetConfig+0xd0>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0xa0>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050ad 	.word	0x080050ad
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050c5 	.word	0x080050c5
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e116      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e112      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e10e      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e10a      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e106      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a7c      	ldr	r2, [pc, #496]	; (80052cc <UART_SetConfig+0x2d0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d138      	bne.n	8005150 <UART_SetConfig+0x154>
 80050de:	4b7a      	ldr	r3, [pc, #488]	; (80052c8 <UART_SetConfig+0x2cc>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d82d      	bhi.n	8005148 <UART_SetConfig+0x14c>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0xf8>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005129 	.word	0x08005129
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005149 	.word	0x08005149
 8005100:	08005149 	.word	0x08005149
 8005104:	08005139 	.word	0x08005139
 8005108:	08005149 	.word	0x08005149
 800510c:	08005149 	.word	0x08005149
 8005110:	08005149 	.word	0x08005149
 8005114:	08005131 	.word	0x08005131
 8005118:	08005149 	.word	0x08005149
 800511c:	08005149 	.word	0x08005149
 8005120:	08005149 	.word	0x08005149
 8005124:	08005141 	.word	0x08005141
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e0d8      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e0d4      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e0d0      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e0cc      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e0c8      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a5e      	ldr	r2, [pc, #376]	; (80052d0 <UART_SetConfig+0x2d4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d125      	bne.n	80051a6 <UART_SetConfig+0x1aa>
 800515a:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <UART_SetConfig+0x2cc>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005164:	2b30      	cmp	r3, #48	; 0x30
 8005166:	d016      	beq.n	8005196 <UART_SetConfig+0x19a>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d818      	bhi.n	800519e <UART_SetConfig+0x1a2>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d00a      	beq.n	8005186 <UART_SetConfig+0x18a>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d814      	bhi.n	800519e <UART_SetConfig+0x1a2>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <UART_SetConfig+0x182>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d008      	beq.n	800518e <UART_SetConfig+0x192>
 800517c:	e00f      	b.n	800519e <UART_SetConfig+0x1a2>
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005184:	e0ad      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005186:	2302      	movs	r3, #2
 8005188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518c:	e0a9      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800518e:	2304      	movs	r3, #4
 8005190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005194:	e0a5      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005196:	2308      	movs	r3, #8
 8005198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519c:	e0a1      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800519e:	2310      	movs	r3, #16
 80051a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a4:	e09d      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4a      	ldr	r2, [pc, #296]	; (80052d4 <UART_SetConfig+0x2d8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d125      	bne.n	80051fc <UART_SetConfig+0x200>
 80051b0:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <UART_SetConfig+0x2cc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051ba:	2bc0      	cmp	r3, #192	; 0xc0
 80051bc:	d016      	beq.n	80051ec <UART_SetConfig+0x1f0>
 80051be:	2bc0      	cmp	r3, #192	; 0xc0
 80051c0:	d818      	bhi.n	80051f4 <UART_SetConfig+0x1f8>
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d00a      	beq.n	80051dc <UART_SetConfig+0x1e0>
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d814      	bhi.n	80051f4 <UART_SetConfig+0x1f8>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <UART_SetConfig+0x1d8>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d008      	beq.n	80051e4 <UART_SetConfig+0x1e8>
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x1f8>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e082      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e07e      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e07a      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e076      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e072      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <UART_SetConfig+0x2dc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d12a      	bne.n	800525c <UART_SetConfig+0x260>
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <UART_SetConfig+0x2cc>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005214:	d01a      	beq.n	800524c <UART_SetConfig+0x250>
 8005216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800521a:	d81b      	bhi.n	8005254 <UART_SetConfig+0x258>
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d00c      	beq.n	800523c <UART_SetConfig+0x240>
 8005222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005226:	d815      	bhi.n	8005254 <UART_SetConfig+0x258>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <UART_SetConfig+0x238>
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	d008      	beq.n	8005244 <UART_SetConfig+0x248>
 8005232:	e00f      	b.n	8005254 <UART_SetConfig+0x258>
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e052      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e04e      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e04a      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e046      	b.n	80052e2 <UART_SetConfig+0x2e6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e042      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <UART_SetConfig+0x2c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d13a      	bne.n	80052dc <UART_SetConfig+0x2e0>
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <UART_SetConfig+0x2cc>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005274:	d01a      	beq.n	80052ac <UART_SetConfig+0x2b0>
 8005276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527a:	d81b      	bhi.n	80052b4 <UART_SetConfig+0x2b8>
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d00c      	beq.n	800529c <UART_SetConfig+0x2a0>
 8005282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005286:	d815      	bhi.n	80052b4 <UART_SetConfig+0x2b8>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <UART_SetConfig+0x298>
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d008      	beq.n	80052a4 <UART_SetConfig+0x2a8>
 8005292:	e00f      	b.n	80052b4 <UART_SetConfig+0x2b8>
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e022      	b.n	80052e2 <UART_SetConfig+0x2e6>
 800529c:	2302      	movs	r3, #2
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e01e      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e01a      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b2:	e016      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e012      	b.n	80052e2 <UART_SetConfig+0x2e6>
 80052bc:	efff69f3 	.word	0xefff69f3
 80052c0:	40008000 	.word	0x40008000
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40004400 	.word	0x40004400
 80052d0:	40004800 	.word	0x40004800
 80052d4:	40004c00 	.word	0x40004c00
 80052d8:	40005000 	.word	0x40005000
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a9f      	ldr	r2, [pc, #636]	; (8005564 <UART_SetConfig+0x568>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d17a      	bne.n	80053e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d824      	bhi.n	800533e <UART_SetConfig+0x342>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0x300>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005321 	.word	0x08005321
 8005300:	0800533f 	.word	0x0800533f
 8005304:	08005329 	.word	0x08005329
 8005308:	0800533f 	.word	0x0800533f
 800530c:	0800532f 	.word	0x0800532f
 8005310:	0800533f 	.word	0x0800533f
 8005314:	0800533f 	.word	0x0800533f
 8005318:	0800533f 	.word	0x0800533f
 800531c:	08005337 	.word	0x08005337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005320:	f7fe fc06 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8005324:	61f8      	str	r0, [r7, #28]
        break;
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4b8f      	ldr	r3, [pc, #572]	; (8005568 <UART_SetConfig+0x56c>)
 800532a:	61fb      	str	r3, [r7, #28]
        break;
 800532c:	e00d      	b.n	800534a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fe fb67 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 8005332:	61f8      	str	r0, [r7, #28]
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533a:	61fb      	str	r3, [r7, #28]
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005348:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80fb 	beq.w	8005548 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4413      	add	r3, r2
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	429a      	cmp	r2, r3
 8005360:	d305      	bcc.n	800536e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	429a      	cmp	r2, r3
 800536c:	d903      	bls.n	8005376 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005374:	e0e8      	b.n	8005548 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2200      	movs	r2, #0
 800537a:	461c      	mov	r4, r3
 800537c:	4615      	mov	r5, r2
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	022b      	lsls	r3, r5, #8
 8005388:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800538c:	0222      	lsls	r2, r4, #8
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	6849      	ldr	r1, [r1, #4]
 8005392:	0849      	lsrs	r1, r1, #1
 8005394:	2000      	movs	r0, #0
 8005396:	4688      	mov	r8, r1
 8005398:	4681      	mov	r9, r0
 800539a:	eb12 0a08 	adds.w	sl, r2, r8
 800539e:	eb43 0b09 	adc.w	fp, r3, r9
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b0:	4650      	mov	r0, sl
 80053b2:	4659      	mov	r1, fp
 80053b4:	f7fa ff5c 	bl	8000270 <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4613      	mov	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c6:	d308      	bcc.n	80053da <UART_SetConfig+0x3de>
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ce:	d204      	bcs.n	80053da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	e0b6      	b.n	8005548 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053e0:	e0b2      	b.n	8005548 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d15e      	bne.n	80054aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d828      	bhi.n	8005446 <UART_SetConfig+0x44a>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x400>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005447 	.word	0x08005447
 800540c:	08005437 	.word	0x08005437
 8005410:	08005447 	.word	0x08005447
 8005414:	08005447 	.word	0x08005447
 8005418:	08005447 	.word	0x08005447
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe fb86 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8005424:	61f8      	str	r0, [r7, #28]
        break;
 8005426:	e014      	b.n	8005452 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fb98 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 800542c:	61f8      	str	r0, [r7, #28]
        break;
 800542e:	e010      	b.n	8005452 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <UART_SetConfig+0x56c>)
 8005432:	61fb      	str	r3, [r7, #28]
        break;
 8005434:	e00d      	b.n	8005452 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fe fae3 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 800543a:	61f8      	str	r0, [r7, #28]
        break;
 800543c:	e009      	b.n	8005452 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	61fb      	str	r3, [r7, #28]
        break;
 8005444:	e005      	b.n	8005452 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d077      	beq.n	8005548 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	005a      	lsls	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	441a      	add	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d916      	bls.n	80054a2 <UART_SetConfig+0x4a6>
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d212      	bcs.n	80054a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f023 030f 	bic.w	r3, r3, #15
 8005484:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	b29a      	uxth	r2, r3
 8005492:	8afb      	ldrh	r3, [r7, #22]
 8005494:	4313      	orrs	r3, r2
 8005496:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	8afa      	ldrh	r2, [r7, #22]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e052      	b.n	8005548 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054a8:	e04e      	b.n	8005548 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d827      	bhi.n	8005502 <UART_SetConfig+0x506>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x4bc>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	08005503 	.word	0x08005503
 80054d0:	08005503 	.word	0x08005503
 80054d4:	08005503 	.word	0x08005503
 80054d8:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fe fb28 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 80054e0:	61f8      	str	r0, [r7, #28]
        break;
 80054e2:	e014      	b.n	800550e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fe fb3a 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 80054e8:	61f8      	str	r0, [r7, #28]
        break;
 80054ea:	e010      	b.n	800550e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <UART_SetConfig+0x56c>)
 80054ee:	61fb      	str	r3, [r7, #28]
        break;
 80054f0:	e00d      	b.n	800550e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe fa85 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80054f6:	61f8      	str	r0, [r7, #28]
        break;
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fe:	61fb      	str	r3, [r7, #28]
        break;
 8005500:	e005      	b.n	800550e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800550c:	bf00      	nop
    }

    if (pclk != 0U)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d019      	beq.n	8005548 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	085a      	lsrs	r2, r3, #1
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	441a      	add	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d909      	bls.n	8005542 <UART_SetConfig+0x546>
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d205      	bcs.n	8005542 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	e002      	b.n	8005548 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005558:	4618      	mov	r0, r3
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	40008000 	.word	0x40008000
 8005568:	00f42400 	.word	0x00f42400

0800556c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01a      	beq.n	8005682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566a:	d10a      	bne.n	8005682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c0:	f7fc ffd0 	bl	8002664 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10e      	bne.n	80056f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f82d 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e023      	b.n	800573a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d10e      	bne.n	800571e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f817 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e00d      	b.n	800573a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	e0a5      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	f000 80a1 	beq.w	80058a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fc ff81 	bl	8002664 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <UART_WaitOnFlagUntilTimeout+0x32>
 800576e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005770:	2b00      	cmp	r3, #0
 8005772:	d13e      	bne.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005788:	667b      	str	r3, [r7, #100]	; 0x64
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005794:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	663b      	str	r3, [r7, #96]	; 0x60
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e067      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d04f      	beq.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580e:	d147      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005818:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800582e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e6      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	613b      	str	r3, [r7, #16]
   return(result);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	66bb      	str	r3, [r7, #104]	; 0x68
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800586c:	623a      	str	r2, [r7, #32]
 800586e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	61bb      	str	r3, [r7, #24]
   return(result);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e010      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f af4a 	beq.w	8005754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3770      	adds	r7, #112	; 0x70
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	2218      	movs	r2, #24
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 fa8f 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80058e2:	233f      	movs	r3, #63	; 0x3f
 80058e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80058e6:	2381      	movs	r3, #129	; 0x81
 80058e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058ea:	1dfb      	adds	r3, r7, #7
 80058ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058ee:	2301      	movs	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fdd3 	bl	80084a4 <hci_send_req>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	da01      	bge.n	8005908 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005904:	23ff      	movs	r3, #255	; 0xff
 8005906:	e005      	b.n	8005914 <aci_gap_set_non_discoverable+0x4a>
  if (status) {
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <aci_gap_set_non_discoverable+0x48>
    return status;
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	e000      	b.n	8005914 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800591c:	b5b0      	push	{r4, r5, r7, lr}
 800591e:	b0ce      	sub	sp, #312	; 0x138
 8005920:	af00      	add	r7, sp, #0
 8005922:	4605      	mov	r5, r0
 8005924:	460c      	mov	r4, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800592e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005932:	462a      	mov	r2, r5
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800593a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800593e:	4622      	mov	r2, r4
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005946:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800594a:	4602      	mov	r2, r0
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005952:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005956:	460a      	mov	r2, r1
 8005958:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005962:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005966:	3308      	adds	r3, #8
 8005968:	f107 020c 	add.w	r2, r7, #12
 800596c:	4413      	add	r3, r2
 800596e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005972:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005976:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800597a:	4413      	add	r3, r2
 800597c:	3309      	adds	r3, #9
 800597e:	f107 020c 	add.w	r2, r7, #12
 8005982:	4413      	add	r3, r2
 8005984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800598c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800599a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800599e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059a2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059aa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059ae:	3301      	adds	r3, #1
 80059b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80059b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80059c6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059ca:	3302      	adds	r3, #2
 80059cc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80059d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059d8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80059dc:	8812      	ldrh	r2, [r2, #0]
 80059de:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80059e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059e6:	3302      	adds	r3, #2
 80059e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80059ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059f4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80059f8:	7812      	ldrb	r2, [r2, #0]
 80059fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a00:	3301      	adds	r3, #1
 8005a02:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8005a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a0a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005a0e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005a10:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a14:	3301      	adds	r3, #1
 8005a16:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8005a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a1e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a22:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005a24:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a32:	3308      	adds	r3, #8
 8005a34:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a38:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 fa59 	bl	8008ef4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8005a42:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005a46:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a54:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005a58:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a5a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8005a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005a6e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005a72:	4618      	mov	r0, r3
 8005a74:	f003 fa3e 	bl	8008ef4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8005a78:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005a7c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005a80:	4413      	add	r3, r2
 8005a82:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005a8e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005a90:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a94:	3302      	adds	r3, #2
 8005a96:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005aa2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005aa4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ab2:	2218      	movs	r2, #24
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f003 f9a2 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8005abc:	233f      	movs	r3, #63	; 0x3f
 8005abe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005ac2:	2383      	movs	r3, #131	; 0x83
 8005ac4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005ad0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ad4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ad8:	f107 030b 	add.w	r3, r7, #11
 8005adc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f002 fcd9 	bl	80084a4 <hci_send_req>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da01      	bge.n	8005afc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005af8:	23ff      	movs	r3, #255	; 0xff
 8005afa:	e00d      	b.n	8005b18 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8005afc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b00:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <aci_gap_set_discoverable+0x1fa>
    return status;
 8005b0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b0e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	e000      	b.n	8005b18 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bdb0      	pop	{r4, r5, r7, pc}

08005b22 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005b22:	b590      	push	{r4, r7, lr}
 8005b24:	b0cf      	sub	sp, #316	; 0x13c
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b32:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b3c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b40:	4622      	mov	r2, r4
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b48:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b54:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005b58:	460a      	mov	r2, r1
 8005b5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	2207      	movs	r2, #7
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f003 f947 	bl	8008e00 <memset>
  uint8_t index_input = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b7c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b80:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b88:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005b92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b96:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b9a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005ba2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005bac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bb0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005bb4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005bbc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bca:	2218      	movs	r2, #24
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f003 f916 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8005bd4:	233f      	movs	r3, #63	; 0x3f
 8005bd6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005bda:	238a      	movs	r3, #138	; 0x8a
 8005bdc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005be0:	f107 0314 	add.w	r3, r7, #20
 8005be4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005be8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005bf0:	f107 030c 	add.w	r3, r7, #12
 8005bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005bf8:	2307      	movs	r3, #7
 8005bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005bfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f002 fc4d 	bl	80084a4 <hci_send_req>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da01      	bge.n	8005c14 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005c10:	23ff      	movs	r3, #255	; 0xff
 8005c12:	e02e      	b.n	8005c72 <aci_gap_init+0x150>
  if (resp.Status) {
 8005c14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <aci_gap_init+0x10c>
    return resp.Status;
 8005c22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	e021      	b.n	8005c72 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005c2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005c48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c50:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c5a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}

08005c7c <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005c7c:	b5b0      	push	{r4, r5, r7, lr}
 8005c7e:	b0cc      	sub	sp, #304	; 0x130
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4605      	mov	r5, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005c92:	462a      	mov	r2, r5
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005caa:	4602      	mov	r2, r0
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005cba:	f107 030c 	add.w	r3, r7, #12
 8005cbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cdc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005ce0:	8812      	ldrh	r2, [r2, #0]
 8005ce2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ce4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ce8:	3302      	adds	r3, #2
 8005cea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cf6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005cfa:	8812      	ldrh	r2, [r2, #0]
 8005cfc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005cfe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d02:	3302      	adds	r3, #2
 8005d04:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d10:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d18:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d2a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005d2e:	7812      	ldrb	r2, [r2, #0]
 8005d30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d32:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d36:	3301      	adds	r3, #1
 8005d38:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d40:	2218      	movs	r2, #24
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f003 f85b 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8005d4a:	233f      	movs	r3, #63	; 0x3f
 8005d4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005d50:	2397      	movs	r3, #151	; 0x97
 8005d52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005d56:	230f      	movs	r3, #15
 8005d58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d64:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d6c:	f107 030b 	add.w	r3, r7, #11
 8005d70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 fb8f 	bl	80084a4 <hci_send_req>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	da01      	bge.n	8005d90 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005d8c:	23ff      	movs	r3, #255	; 0xff
 8005d8e:	e00d      	b.n	8005dac <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d94:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	e000      	b.n	8005dac <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bdb0      	pop	{r4, r5, r7, pc}

08005db6 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005db6:	b590      	push	{r4, r7, lr}
 8005db8:	b0cf      	sub	sp, #316	; 0x13c
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dc6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dd0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de0:	4602      	mov	r2, r0
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005de8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005dec:	460a      	mov	r2, r1
 8005dee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005df8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dfc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005e0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e0e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e1a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e1e:	3302      	adds	r3, #2
 8005e20:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005e24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e28:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e30:	8812      	ldrh	r2, [r2, #0]
 8005e32:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005e34:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e38:	3302      	adds	r3, #2
 8005e3a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e42:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e46:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e4e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e52:	3301      	adds	r3, #1
 8005e54:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e5c:	1d58      	adds	r0, r3, #5
 8005e5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005e66:	2206      	movs	r2, #6
 8005e68:	6819      	ldr	r1, [r3, #0]
 8005e6a:	f003 f843 	bl	8008ef4 <memcpy>
  index_input += 6;
 8005e6e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e72:	3306      	adds	r3, #6
 8005e74:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005e78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e7c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005e80:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005e82:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e86:	3301      	adds	r3, #1
 8005e88:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005e8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e90:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005e94:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005e96:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ea4:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005ea8:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005eaa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005eae:	3302      	adds	r3, #2
 8005eb0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005eb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb8:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005ebc:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005ebe:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005ec8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ecc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005ed0:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005ed2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005edc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ee0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005ee4:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005ee6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005eea:	3302      	adds	r3, #2
 8005eec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ef4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005ef8:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005efa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005efe:	3302      	adds	r3, #2
 8005f00:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f08:	2218      	movs	r2, #24
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f002 ff77 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8005f12:	233f      	movs	r3, #63	; 0x3f
 8005f14:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005f18:	239c      	movs	r3, #156	; 0x9c
 8005f1a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005f1e:	230f      	movs	r3, #15
 8005f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005f2c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005f34:	f107 0313 	add.w	r3, r7, #19
 8005f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005f42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 faab 	bl	80084a4 <hci_send_req>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da01      	bge.n	8005f58 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005f54:	23ff      	movs	r3, #255	; 0xff
 8005f56:	e00d      	b.n	8005f74 <aci_gap_create_connection+0x1be>
  if (status) {
 8005f58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f5c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <aci_gap_create_connection+0x1bc>
    return status;
 8005f66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f6a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	e000      	b.n	8005f74 <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}

08005f7e <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b0cc      	sub	sp, #304	; 0x130
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	4602      	mov	r2, r0
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005f8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fb2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005fba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fc8:	2218      	movs	r2, #24
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f002 ff17 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8005fd2:	233f      	movs	r3, #63	; 0x3f
 8005fd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005fd8:	239d      	movs	r3, #157	; 0x9d
 8005fda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fde:	f107 030c 	add.w	r3, r7, #12
 8005fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fe6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005fee:	f107 030b 	add.w	r3, r7, #11
 8005ff2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f002 fa4e 	bl	80084a4 <hci_send_req>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	da01      	bge.n	8006012 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 800600e:	23ff      	movs	r3, #255	; 0xff
 8006010:	e00d      	b.n	800602e <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <aci_gap_terminate_gap_proc+0xae>
    return status;
 8006020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006024:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	e000      	b.n	800602e <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006042:	f107 0308 	add.w	r3, r7, #8
 8006046:	2218      	movs	r2, #24
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f002 fed8 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8006050:	233f      	movs	r3, #63	; 0x3f
 8006052:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006054:	f240 1301 	movw	r3, #257	; 0x101
 8006058:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800605a:	1dfb      	adds	r3, r7, #7
 800605c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f002 fa1b 	bl	80084a4 <hci_send_req>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	da01      	bge.n	8006078 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006074:	23ff      	movs	r3, #255	; 0xff
 8006076:	e005      	b.n	8006084 <aci_gatt_init+0x4c>
  if (status) {
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <aci_gatt_init+0x4a>
    return status;
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	e000      	b.n	8006084 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b0cf      	sub	sp, #316	; 0x13c
 8006090:	af00      	add	r7, sp, #0
 8006092:	4604      	mov	r4, r0
 8006094:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006098:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800609c:	6001      	str	r1, [r0, #0]
 800609e:	4610      	mov	r0, r2
 80060a0:	4619      	mov	r1, r3
 80060a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060a6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060aa:	4622      	mov	r2, r4
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060b2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80060b6:	4602      	mov	r2, r0
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060be:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80060c2:	460a      	mov	r2, r1
 80060c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80060c6:	f107 030c 	add.w	r3, r7, #12
 80060ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80060ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060d2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d00a      	beq.n	80060f2 <aci_gatt_add_service+0x66>
 80060dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060e0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d101      	bne.n	80060ee <aci_gatt_add_service+0x62>
 80060ea:	2311      	movs	r3, #17
 80060ec:	e002      	b.n	80060f4 <aci_gatt_add_service+0x68>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <aci_gatt_add_service+0x68>
 80060f2:	2303      	movs	r3, #3
 80060f4:	f107 020c 	add.w	r2, r7, #12
 80060f8:	4413      	add	r3, r2
 80060fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	2203      	movs	r2, #3
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f002 fe7a 	bl	8008e00 <memset>
  uint8_t index_input = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006112:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006116:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800611a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800611e:	7812      	ldrb	r2, [r2, #0]
 8006120:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006122:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006126:	3301      	adds	r3, #1
 8006128:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800612c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006130:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d002      	beq.n	8006140 <aci_gatt_add_service+0xb4>
 800613a:	2b02      	cmp	r3, #2
 800613c:	d004      	beq.n	8006148 <aci_gatt_add_service+0xbc>
 800613e:	e007      	b.n	8006150 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8006140:	2302      	movs	r3, #2
 8006142:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006146:	e005      	b.n	8006154 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800614e:	e001      	b.n	8006154 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006150:	2347      	movs	r3, #71	; 0x47
 8006152:	e06c      	b.n	800622e <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8006154:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006158:	1c58      	adds	r0, r3, #1
 800615a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800615e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006162:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006166:	6819      	ldr	r1, [r3, #0]
 8006168:	f002 fec4 	bl	8008ef4 <memcpy>
    index_input += size;
 800616c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006170:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006174:	4413      	add	r3, r2
 8006176:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800617a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006182:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800618a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800618e:	3301      	adds	r3, #1
 8006190:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8006194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006198:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800619c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80061a4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061a8:	3301      	adds	r3, #1
 80061aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061b2:	2218      	movs	r2, #24
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f002 fe22 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80061bc:	233f      	movs	r3, #63	; 0x3f
 80061be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80061c2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80061c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80061e2:	2303      	movs	r3, #3
 80061e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80061e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 f958 	bl	80084a4 <hci_send_req>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da01      	bge.n	80061fe <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80061fa:	23ff      	movs	r3, #255	; 0xff
 80061fc:	e017      	b.n	800622e <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80061fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800620c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	e00a      	b.n	800622e <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006218:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800622a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}

08006238 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b0d1      	sub	sp, #324	; 0x144
 800623c:	af00      	add	r7, sp, #0
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006246:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800624a:	600a      	str	r2, [r1, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006252:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006256:	4622      	mov	r2, r4
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800625e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006262:	4602      	mov	r2, r0
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800626a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800626e:	460a      	mov	r2, r1
 8006270:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800627a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800627e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d00a      	beq.n	800629e <aci_gatt_add_char+0x66>
 8006288:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800628c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d101      	bne.n	800629a <aci_gatt_add_char+0x62>
 8006296:	2313      	movs	r3, #19
 8006298:	e002      	b.n	80062a0 <aci_gatt_add_char+0x68>
 800629a:	2303      	movs	r3, #3
 800629c:	e000      	b.n	80062a0 <aci_gatt_add_char+0x68>
 800629e:	2305      	movs	r3, #5
 80062a0:	f107 0214 	add.w	r2, r7, #20
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	2203      	movs	r2, #3
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f002 fda4 	bl	8008e00 <memset>
  uint8_t index_input = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80062be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062c6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062ce:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062d2:	3302      	adds	r3, #2
 80062d4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80062d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062dc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062e0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80062e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062ec:	3301      	adds	r3, #1
 80062ee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80062f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062f6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d002      	beq.n	8006306 <aci_gatt_add_char+0xce>
 8006300:	2b02      	cmp	r3, #2
 8006302:	d004      	beq.n	800630e <aci_gatt_add_char+0xd6>
 8006304:	e007      	b.n	8006316 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8006306:	2302      	movs	r3, #2
 8006308:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800630c:	e005      	b.n	800631a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800630e:	2310      	movs	r3, #16
 8006310:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006314:	e001      	b.n	800631a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006316:	2347      	movs	r3, #71	; 0x47
 8006318:	e091      	b.n	800643e <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800631a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800631e:	1cd8      	adds	r0, r3, #3
 8006320:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006324:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006328:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	f002 fde1 	bl	8008ef4 <memcpy>
    index_input += size;
 8006332:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006336:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800633a:	4413      	add	r3, r2
 800633c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006344:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006348:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800634c:	8812      	ldrh	r2, [r2, #0]
 800634e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006350:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006354:	3302      	adds	r3, #2
 8006356:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800635a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800635e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006362:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006364:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006368:	3301      	adds	r3, #1
 800636a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800636e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006372:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006376:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006378:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800637c:	3301      	adds	r3, #1
 800637e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8006382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006386:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800638a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800638c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006390:	3301      	adds	r3, #1
 8006392:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8006396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800639a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800639e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80063a0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063a4:	3301      	adds	r3, #1
 80063a6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80063aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ae:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80063b2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80063b4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063b8:	3301      	adds	r3, #1
 80063ba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063c2:	2218      	movs	r2, #24
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f002 fd1a 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80063cc:	233f      	movs	r3, #63	; 0x3f
 80063ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80063d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063d6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80063da:	f107 0314 	add.w	r3, r7, #20
 80063de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80063e2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80063ea:	f107 0310 	add.w	r3, r7, #16
 80063ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80063f2:	2303      	movs	r3, #3
 80063f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80063f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f002 f850 	bl	80084a4 <hci_send_req>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	da01      	bge.n	800640e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800640a:	23ff      	movs	r3, #255	; 0xff
 800640c:	e017      	b.n	800643e <aci_gatt_add_char+0x206>
  if (resp.Status) {
 800640e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800641c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	e00a      	b.n	800643e <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006428:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800642c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006430:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800643a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006444:	46bd      	mov	sp, r7
 8006446:	bd90      	pop	{r4, r7, pc}

08006448 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8006448:	b5b0      	push	{r4, r5, r7, lr}
 800644a:	b0cc      	sub	sp, #304	; 0x130
 800644c:	af00      	add	r7, sp, #0
 800644e:	4605      	mov	r5, r0
 8006450:	460c      	mov	r4, r1
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800645e:	462a      	mov	r2, r5
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800646a:	4622      	mov	r2, r4
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006476:	4602      	mov	r2, r0
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006482:	460a      	mov	r2, r1
 8006484:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006486:	f107 030c 	add.w	r3, r7, #12
 800648a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80064a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064a8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064b0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064b4:	3302      	adds	r3, #2
 80064b6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064ce:	3302      	adds	r3, #2
 80064d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80064d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064dc:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80064e0:	7812      	ldrb	r2, [r2, #0]
 80064e2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80064e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064e8:	3301      	adds	r3, #1
 80064ea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064f6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80064fe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006502:	3301      	adds	r3, #1
 8006504:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8006508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650c:	1d98      	adds	r0, r3, #6
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800651e:	f002 fce9 	bl	8008ef4 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800652a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	4413      	add	r3, r2
 8006532:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800653a:	2218      	movs	r2, #24
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f002 fc5e 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8006544:	233f      	movs	r3, #63	; 0x3f
 8006546:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800654a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800654e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006552:	f107 030c 	add.w	r3, r7, #12
 8006556:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800655a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800655e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006562:	f107 030b 	add.w	r3, r7, #11
 8006566:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800656a:	2301      	movs	r3, #1
 800656c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006570:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f001 ff94 	bl	80084a4 <hci_send_req>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	da01      	bge.n	8006586 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006582:	23ff      	movs	r3, #255	; 0xff
 8006584:	e00d      	b.n	80065a2 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <aci_gatt_update_char_value+0x158>
    return status;
 8006594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006598:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	e000      	b.n	80065a2 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bdb0      	pop	{r4, r5, r7, pc}

080065ac <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80065ac:	b5b0      	push	{r4, r5, r7, lr}
 80065ae:	b0ce      	sub	sp, #312	; 0x138
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4605      	mov	r5, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065be:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065c2:	462a      	mov	r2, r5
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065ce:	4622      	mov	r2, r4
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065d6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80065da:	4602      	mov	r2, r0
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065e2:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 80065e6:	460a      	mov	r2, r1
 80065e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 80065ea:	f107 0310 	add.w	r3, r7, #16
 80065ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 80065f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065f6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006604:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006608:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800660c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006610:	8812      	ldrh	r2, [r2, #0]
 8006612:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006614:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006618:	3302      	adds	r3, #2
 800661a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 800661e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006622:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006626:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800662a:	8812      	ldrh	r2, [r2, #0]
 800662c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800662e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006632:	3302      	adds	r3, #2
 8006634:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 8006638:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800663c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006640:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006644:	8812      	ldrh	r2, [r2, #0]
 8006646:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006648:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800664c:	3302      	adds	r3, #2
 800664e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8006652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006656:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800665a:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006662:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006666:	3301      	adds	r3, #1
 8006668:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 800666c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006670:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d002      	beq.n	8006680 <aci_gatt_disc_char_by_uuid+0xd4>
 800667a:	2b02      	cmp	r3, #2
 800667c:	d004      	beq.n	8006688 <aci_gatt_disc_char_by_uuid+0xdc>
 800667e:	e007      	b.n	8006690 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 8006680:	2302      	movs	r3, #2
 8006682:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006686:	e005      	b.n	8006694 <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800668e:	e001      	b.n	8006694 <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 8006690:	2347      	movs	r3, #71	; 0x47
 8006692:	e049      	b.n	8006728 <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 8006694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006698:	3307      	adds	r3, #7
 800669a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800669e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80066a2:	4618      	mov	r0, r3
 80066a4:	f002 fc26 	bl	8008ef4 <memcpy>
    index_input += size;
 80066a8:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80066ac:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80066b0:	4413      	add	r3, r2
 80066b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066ba:	2218      	movs	r2, #24
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 fb9e 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80066c4:	233f      	movs	r3, #63	; 0x3f
 80066c6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 80066ca:	f44f 738b 	mov.w	r3, #278	; 0x116
 80066ce:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 80066d2:	230f      	movs	r3, #15
 80066d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 80066e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 80066e8:	f107 030f 	add.w	r3, r7, #15
 80066ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 80066f6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fed1 	bl	80084a4 <hci_send_req>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	da01      	bge.n	800670c <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 8006708:	23ff      	movs	r3, #255	; 0xff
 800670a:	e00d      	b.n	8006728 <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 800670c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006710:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 800671a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800671e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	e000      	b.n	8006728 <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800672e:	46bd      	mov	sp, r7
 8006730:	bdb0      	pop	{r4, r5, r7, pc}

08006732 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 8006732:	b590      	push	{r4, r7, lr}
 8006734:	b0cf      	sub	sp, #316	; 0x13c
 8006736:	af00      	add	r7, sp, #0
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006742:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800674c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006750:	4622      	mov	r2, r4
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675c:	4602      	mov	r2, r0
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006764:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006768:	460a      	mov	r2, r1
 800676a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8006774:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006778:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006786:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800678a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800678e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006792:	8812      	ldrh	r2, [r2, #0]
 8006794:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006796:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800679a:	3302      	adds	r3, #2
 800679c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80067a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067ac:	8812      	ldrh	r2, [r2, #0]
 80067ae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80067b0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067b4:	3302      	adds	r3, #2
 80067b6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80067ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067be:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067c2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80067ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067ce:	3301      	adds	r3, #1
 80067d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80067d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067d8:	1d58      	adds	r0, r3, #5
 80067da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067de:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80067ec:	6819      	ldr	r1, [r3, #0]
 80067ee:	f002 fb81 	bl	8008ef4 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 80067f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067f6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80067fa:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4413      	add	r3, r2
 8006802:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006806:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800680a:	2218      	movs	r2, #24
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f002 faf6 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8006814:	233f      	movs	r3, #63	; 0x3f
 8006816:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800681a:	f240 1321 	movw	r3, #289	; 0x121
 800681e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8006822:	230f      	movs	r3, #15
 8006824:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006830:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8006838:	f107 0313 	add.w	r3, r7, #19
 800683c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8006840:	2301      	movs	r3, #1
 8006842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006846:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800684a:	2100      	movs	r1, #0
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fe29 	bl	80084a4 <hci_send_req>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	da01      	bge.n	800685c <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8006858:	23ff      	movs	r3, #255	; 0xff
 800685a:	e00d      	b.n	8006878 <aci_gatt_write_char_desc+0x146>
  if (status) {
 800685c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006860:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <aci_gatt_write_char_desc+0x144>
    return status;
 800686a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800686e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	e000      	b.n	8006878 <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}

08006882 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08e      	sub	sp, #56	; 0x38
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006890:	f107 0310 	add.w	r3, r7, #16
 8006894:	220f      	movs	r2, #15
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f002 fab1 	bl	8008e00 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800689e:	f107 0320 	add.w	r3, r7, #32
 80068a2:	2218      	movs	r2, #24
 80068a4:	2100      	movs	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f002 faaa 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80068ac:	233f      	movs	r3, #63	; 0x3f
 80068ae:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80068b0:	2301      	movs	r3, #1
 80068b2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 80068b4:	f107 0310 	add.w	r3, r7, #16
 80068b8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 80068ba:	230f      	movs	r3, #15
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80068be:	f107 0320 	add.w	r3, r7, #32
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fded 	bl	80084a4 <hci_send_req>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da01      	bge.n	80068d4 <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 80068d0:	23ff      	movs	r3, #255	; 0xff
 80068d2:	e02c      	b.n	800692e <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 80068d4:	7c3b      	ldrb	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 80068da:	7c3b      	ldrb	r3, [r7, #16]
 80068dc:	e027      	b.n	800692e <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 80068de:	7c7a      	ldrb	r2, [r7, #17]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 80068e4:	7cba      	ldrb	r2, [r7, #18]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 80068ea:	7cfa      	ldrb	r2, [r7, #19]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 80068f0:	7d3a      	ldrb	r2, [r7, #20]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 80068f6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fe:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 8006900:	7dfa      	ldrb	r2, [r7, #23]
 8006902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006904:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 8006906:	7e3a      	ldrb	r2, [r7, #24]
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 800690c:	7e7a      	ldrb	r2, [r7, #25]
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 8006912:	7eba      	ldrb	r2, [r7, #26]
 8006914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006916:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 8006918:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800691c:	b29a      	uxth	r2, r3
 800691e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006920:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 8006922:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 8006926:	b29a      	uxth	r2, r3
 8006928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800692a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3738      	adds	r7, #56	; 0x38
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b0ee      	sub	sp, #440	; 0x1b8
 800693a:	af00      	add	r7, sp, #0
 800693c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006940:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006944:	6019      	str	r1, [r3, #0]
 8006946:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800694a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006954:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8006958:	4602      	mov	r2, r0
 800695a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800695c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006960:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006964:	f107 0314 	add.w	r3, r7, #20
 8006968:	2280      	movs	r2, #128	; 0x80
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f002 fa47 	bl	8008e00 <memset>
  uint8_t index_input = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 8006978:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800697c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8006980:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006988:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800698c:	3301      	adds	r3, #1
 800698e:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006992:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006996:	2218      	movs	r2, #24
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f002 fa30 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 80069a0:	233f      	movs	r3, #63	; 0x3f
 80069a2:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 80069a6:	230d      	movs	r3, #13
 80069a8:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 80069ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 80069b4:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80069b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 80069bc:	f107 0314 	add.w	r3, r7, #20
 80069c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 80069ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fd67 	bl	80084a4 <hci_send_req>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da01      	bge.n	80069e0 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80069dc:	23ff      	movs	r3, #255	; 0xff
 80069de:	e029      	b.n	8006a34 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 80069e0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069e4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <aci_hal_read_config_data+0xc4>
    return resp.Status;
 80069ee:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069f2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	e01c      	b.n	8006a34 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 80069fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069fe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006a02:	785a      	ldrb	r2, [r3, #1]
 8006a04:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006a08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8006a10:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006a14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f107 0314 	add.w	r3, r7, #20
 8006a22:	1c99      	adds	r1, r3, #2
 8006a24:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006a28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f002 fa61 	bl	8008ef4 <memcpy>
  return BLE_STATUS_SUCCESS;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b0cc      	sub	sp, #304	; 0x130
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	4602      	mov	r2, r0
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006a58:	460a      	mov	r2, r1
 8006a5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a68:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a7e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a86:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006aa0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aae:	2218      	movs	r2, #24
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 f9a4 	bl	8008e00 <memset>
  rq.ogf = 0x3f;
 8006ab8:	233f      	movs	r3, #63	; 0x3f
 8006aba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006abe:	230f      	movs	r3, #15
 8006ac0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006acc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006ad0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ad4:	f107 030b 	add.w	r3, r7, #11
 8006ad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 fcdb 	bl	80084a4 <hci_send_req>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da01      	bge.n	8006af8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006af4:	23ff      	movs	r3, #255	; 0xff
 8006af6:	e00d      	b.n	8006b14 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	e000      	b.n	8006b14 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	7818      	ldrb	r0, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b38:	b299      	uxth	r1, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	78db      	ldrb	r3, [r3, #3]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f7fa fb68 	bl	8001214 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	7818      	ldrb	r0, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b68:	b299      	uxth	r1, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f000 ffca 	bl	8007b08 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006b7e:	b590      	push	{r4, r7, lr}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af02      	add	r7, sp, #8
 8006b84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7818      	ldrb	r0, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	78da      	ldrb	r2, [r3, #3]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	889b      	ldrh	r3, [r3, #4]
 8006ba2:	b29c      	uxth	r4, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4623      	mov	r3, r4
 8006bae:	f000 ffba 	bl	8007b26 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd90      	pop	{r4, r7, pc}

08006bbc <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 ffbc 	bl	8007b4e <hci_hardware_error_event>

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0a6      	sub	sp, #152	; 0x98
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c00:	e02e      	b.n	8006c60 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006c02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	3398      	adds	r3, #152	; 0x98
 8006c1c:	443b      	add	r3, r7
 8006c1e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006c22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006c26:	3302      	adds	r3, #2
 8006c28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006c2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	3398      	adds	r3, #152	; 0x98
 8006c46:	443b      	add	r3, r7
 8006c48:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006c4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006c50:	3302      	adds	r3, #2
 8006c52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	dbc8      	blt.n	8006c02 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f107 0208 	add.w	r2, r7, #8
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ff71 	bl	8007b64 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006c82:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3798      	adds	r7, #152	; 0x98
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 ff6a 	bl	8007b7c <hci_data_buffer_overflow_event>

  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f000 ff5e 	bl	8007b92 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f97b 	bl	8007ff0 <aci_blue_initialized_event>

  return status;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 f975 	bl	8008006 <aci_blue_events_lost_event>

  return status;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d2a:	b08d      	sub	sp, #52	; 0x34
 8006d2c:	af08      	add	r7, sp, #32
 8006d2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f893 c000 	ldrb.w	ip, [r3]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006d64:	68b8      	ldr	r0, [r7, #8]
 8006d66:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006d6a:	68bc      	ldr	r4, [r7, #8]
 8006d6c:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006d70:	68bd      	ldr	r5, [r7, #8]
 8006d72:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006d76:	68be      	ldr	r6, [r7, #8]
 8006d78:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	9606      	str	r6, [sp, #24]
 8006d84:	9505      	str	r5, [sp, #20]
 8006d86:	9404      	str	r4, [sp, #16]
 8006d88:	9003      	str	r0, [sp, #12]
 8006d8a:	9102      	str	r1, [sp, #8]
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	464b      	mov	r3, r9
 8006d94:	4642      	mov	r2, r8
 8006d96:	4671      	mov	r1, lr
 8006d98:	4660      	mov	r0, ip
 8006d9a:	f001 f93e 	bl	800801a <aci_blue_crash_info_event>

  return status;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006daa <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7818      	ldrb	r0, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	7859      	ldrb	r1, [r3, #1]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f001 f934 	bl	8008036 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f993 0000 	ldrsb.w	r0, [r3]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006df6:	461a      	mov	r2, r3
 8006df8:	f001 f92b 	bl	8008052 <aci_hal_scan_req_report_event>

  return status;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	7818      	ldrb	r0, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006e22:	461a      	mov	r2, r3
 8006e24:	f001 f923 	bl	800806e <aci_hal_fw_error_event>

  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006e3e:	f000 ff32 	bl	8007ca6 <aci_gap_limited_discoverable_event>

  return status;
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b298      	uxth	r0, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7899      	ldrb	r1, [r3, #2]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	78db      	ldrb	r3, [r3, #3]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f000 ff22 	bl	8007cb4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 ff1e 	bl	8007cd2 <aci_gap_pass_key_req_event>

  return status;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ff16 	bl	8007ce8 <aci_gap_authorization_req_event>

  return status;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006ed2:	f000 ff14 	bl	8007cfe <aci_gap_slave_security_initiated_event>

  return status;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006eec:	f000 ff0e 	bl	8007d0c <aci_gap_bond_lost_event>

  return status;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	7818      	ldrb	r0, [r3, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7859      	ldrb	r1, [r3, #1]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006f1a:	f7fa f8f1 	bl	8001100 <aci_gap_proc_complete_event>

  return status;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 feeb 	bl	8007d1a <aci_gap_addr_not_resolved_event>

  return status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f000 fedf 	bl	8007d30 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	789b      	ldrb	r3, [r3, #2]
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f000 fed5 	bl	8007d48 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f000 ffce 	bl	8007f68 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b298      	uxth	r0, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f000 ffc5 	bl	8007f84 <aci_l2cap_proc_timeout_event>

  return status;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b089      	sub	sp, #36	; 0x24
 8007008:	af04      	add	r7, sp, #16
 800700a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b298      	uxth	r0, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	789c      	ldrb	r4, [r3, #2]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007024:	b29d      	uxth	r5, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800702c:	b29e      	uxth	r6, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007034:	b29b      	uxth	r3, r3
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800703c:	b292      	uxth	r2, r2
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8007044:	b289      	uxth	r1, r1
 8007046:	9102      	str	r1, [sp, #8]
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4633      	mov	r3, r6
 800704e:	462a      	mov	r2, r5
 8007050:	4621      	mov	r1, r4
 8007052:	f000 ffa5 	bl	8007fa0 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007060 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b087      	sub	sp, #28
 8007064:	af02      	add	r7, sp, #8
 8007066:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b298      	uxth	r0, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	7899      	ldrb	r1, [r3, #2]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007080:	b29a      	uxth	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4623      	mov	r3, r4
 800708e:	f000 ff9b 	bl	8007fc8 <aci_l2cap_command_reject_event>

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800709c:	b590      	push	{r4, r7, lr}
 800709e:	b087      	sub	sp, #28
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b298      	uxth	r0, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	885b      	ldrh	r3, [r3, #2]
 80070b6:	b299      	uxth	r1, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	889b      	ldrh	r3, [r3, #4]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4623      	mov	r3, r4
 80070cc:	f7fa f94a 	bl	8001364 <aci_gatt_attribute_modified_event>

  return status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd90      	pop	{r4, r7, pc}

080070da <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fe37 	bl	8007d64 <aci_gatt_proc_timeout_event>

  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29a      	uxth	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	b29b      	uxth	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fa f9ec 	bl	80014fc <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b298      	uxth	r0, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	7899      	ldrb	r1, [r3, #2]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007150:	f000 fe13 	bl	8007d7a <aci_att_find_info_resp_event>

  return status;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b0a6      	sub	sp, #152	; 0x98
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007166:	2300      	movs	r3, #0
 8007168:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8007172:	2303      	movs	r3, #3
 8007174:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800717e:	e02e      	b.n	80071de <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8007180:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3398      	adds	r3, #152	; 0x98
 800719a:	443b      	add	r3, r7
 800719c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80071a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80071a4:	3302      	adds	r3, #2
 80071a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80071aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	3398      	adds	r3, #152	; 0x98
 80071c4:	443b      	add	r3, r7
 80071c6:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80071ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80071ce:	3302      	adds	r3, #2
 80071d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80071d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d8:	3301      	adds	r3, #1
 80071da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e2:	789b      	ldrb	r3, [r3, #2]
 80071e4:	461a      	mov	r2, r3
 80071e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ea:	4293      	cmp	r3, r2
 80071ec:	dbc8      	blt.n	8007180 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80071ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b298      	uxth	r0, r3
 80071f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071fa:	789b      	ldrb	r3, [r3, #2]
 80071fc:	f107 0208 	add.w	r2, r7, #8
 8007200:	4619      	mov	r1, r3
 8007202:	f000 fdca 	bl	8007d9a <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8007206:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800720a:	4618      	mov	r0, r3
 800720c:	3798      	adds	r7, #152	; 0x98
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b298      	uxth	r0, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	7899      	ldrb	r1, [r3, #2]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007234:	f000 fdbf 	bl	8007db6 <aci_att_read_by_type_resp_event>

  return status;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b298      	uxth	r0, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007260:	461a      	mov	r2, r3
 8007262:	f000 fdb8 	bl	8007dd6 <aci_att_read_resp_event>

  return status;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b298      	uxth	r0, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800728e:	461a      	mov	r2, r3
 8007290:	f000 fdaf 	bl	8007df2 <aci_att_read_blob_resp_event>

  return status;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b298      	uxth	r0, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80072bc:	461a      	mov	r2, r3
 80072be:	f000 fda6 	bl	8007e0e <aci_att_read_multiple_resp_event>

  return status;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b298      	uxth	r0, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7899      	ldrb	r1, [r3, #2]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80072ee:	f000 fd9c 	bl	8007e2a <aci_att_read_by_group_type_resp_event>

  return status;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80072fc:	b590      	push	{r4, r7, lr}
 80072fe:	b087      	sub	sp, #28
 8007300:	af02      	add	r7, sp, #8
 8007302:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b298      	uxth	r0, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	885b      	ldrh	r3, [r3, #2]
 8007316:	b299      	uxth	r1, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	889b      	ldrh	r3, [r3, #4]
 800731c:	b29a      	uxth	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4623      	mov	r3, r4
 800732a:	f000 fd8e 	bl	8007e4a <aci_att_prepare_write_resp_event>

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bd90      	pop	{r4, r7, pc}

08007338 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd8f 	bl	8007e72 <aci_att_exec_write_resp_event>

  return status;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b298      	uxth	r0, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	885b      	ldrh	r3, [r3, #2]
 8007378:	b299      	uxth	r1, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007382:	f000 fd81 	bl	8007e88 <aci_gatt_indication_event>

  return status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b298      	uxth	r0, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	b299      	uxth	r1, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80073b4:	f7f9 fff0 	bl	8001398 <aci_gatt_notification_event>

  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	789b      	ldrb	r3, [r3, #2]
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fa f840 	bl	8001464 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b298      	uxth	r0, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7899      	ldrb	r1, [r3, #2]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800740e:	b29a      	uxth	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	795b      	ldrb	r3, [r3, #5]
 8007414:	f000 fd48 	bl	8007ea8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b298      	uxth	r0, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	885b      	ldrh	r3, [r3, #2]
 800743c:	b299      	uxth	r1, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007446:	f7f9 ffc3 	bl	80013d0 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800744a:	7bfb      	ldrb	r3, [r7, #15]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b298      	uxth	r0, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	b299      	uxth	r1, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007478:	f000 fd2a 	bl	8007ed0 <aci_gatt_write_permit_req_event>

  return status;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b298      	uxth	r0, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	b299      	uxth	r1, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	f000 fd21 	bl	8007ef0 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0a6      	sub	sp, #152	; 0x98
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80074cc:	2303      	movs	r3, #3
 80074ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074d8:	e019      	b.n	800750e <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80074da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	3398      	adds	r3, #152	; 0x98
 80074f4:	443b      	add	r3, r7
 80074f6:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80074fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074fe:	3302      	adds	r3, #2
 8007500:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007508:	3301      	adds	r3, #1
 800750a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800750e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007512:	789b      	ldrb	r3, [r3, #2]
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751a:	4293      	cmp	r3, r2
 800751c:	dbdd      	blt.n	80074da <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800751e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b298      	uxth	r0, r3
 8007526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	f107 0208 	add.w	r2, r7, #8
 8007530:	4619      	mov	r1, r3
 8007532:	f000 fcec 	bl	8007f0e <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8007536:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800753a:	4618      	mov	r0, r3
 800753c:	3798      	adds	r7, #152	; 0x98
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29a      	uxth	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7f9 ffb5 	bl	80014d0 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fccf 	bl	8007f2a <aci_gatt_server_confirmation_event>

  return status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007596:	b590      	push	{r4, r7, lr}
 8007598:	b087      	sub	sp, #28
 800759a:	af02      	add	r7, sp, #8
 800759c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b298      	uxth	r0, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	885b      	ldrh	r3, [r3, #2]
 80075b0:	b299      	uxth	r1, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	889b      	ldrh	r3, [r3, #4]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4623      	mov	r3, r4
 80075c4:	f000 fcbc 	bl	8007f40 <aci_gatt_prepare_write_permit_req_event>

  return status;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd90      	pop	{r4, r7, pc}

080075d2 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 80075d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d4:	b08b      	sub	sp, #44	; 0x2c
 80075d6:	af06      	add	r7, sp, #24
 80075d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	781d      	ldrb	r5, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075ec:	b29e      	uxth	r6, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8007604:	b292      	uxth	r2, r2
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800760c:	b289      	uxth	r1, r1
 800760e:	68b8      	ldr	r0, [r7, #8]
 8007610:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8007614:	b280      	uxth	r0, r0
 8007616:	68bc      	ldr	r4, [r7, #8]
 8007618:	7c64      	ldrb	r4, [r4, #17]
 800761a:	9404      	str	r4, [sp, #16]
 800761c:	9003      	str	r0, [sp, #12]
 800761e:	9102      	str	r1, [sp, #8]
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4673      	mov	r3, lr
 8007626:	4662      	mov	r2, ip
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	f7f9 fd98 	bl	8001160 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800763a <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b0a4      	sub	sp, #144	; 0x90
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007642:	2300      	movs	r3, #0
 8007644:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007654:	2300      	movs	r3, #0
 8007656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800765a:	e0b3      	b.n	80077c4 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800765c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007660:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	440b      	add	r3, r1
 8007670:	3301      	adds	r3, #1
 8007672:	7819      	ldrb	r1, [r3, #0]
 8007674:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	3390      	adds	r3, #144	; 0x90
 8007682:	443b      	add	r3, r7
 8007684:	3b88      	subs	r3, #136	; 0x88
 8007686:	460a      	mov	r2, r1
 8007688:	701a      	strb	r2, [r3, #0]
    size += 1;
 800768a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800768e:	3301      	adds	r3, #1
 8007690:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007694:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007698:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	440b      	add	r3, r1
 80076a8:	3302      	adds	r3, #2
 80076aa:	7819      	ldrb	r1, [r3, #0]
 80076ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	3390      	adds	r3, #144	; 0x90
 80076ba:	443b      	add	r3, r7
 80076bc:	3b87      	subs	r3, #135	; 0x87
 80076be:	460a      	mov	r2, r1
 80076c0:	701a      	strb	r2, [r3, #0]
    size += 1;
 80076c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076c6:	3301      	adds	r3, #1
 80076c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	1c98      	adds	r0, r3, #2
 80076e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076f2:	4413      	add	r3, r2
 80076f4:	3303      	adds	r3, #3
 80076f6:	2206      	movs	r2, #6
 80076f8:	4619      	mov	r1, r3
 80076fa:	f001 fbfb 	bl	8008ef4 <memcpy>
    size += 6;
 80076fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007702:	3306      	adds	r3, #6
 8007704:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8007708:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800770c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	440b      	add	r3, r1
 800771c:	3309      	adds	r3, #9
 800771e:	7819      	ldrb	r1, [r3, #0]
 8007720:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	3390      	adds	r3, #144	; 0x90
 800772e:	443b      	add	r3, r7
 8007730:	3b80      	subs	r3, #128	; 0x80
 8007732:	460a      	mov	r2, r1
 8007734:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800773a:	3301      	adds	r3, #1
 800773c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007740:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	3308      	adds	r3, #8
 8007750:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007754:	4413      	add	r3, r2
 8007756:	1c99      	adds	r1, r3, #2
 8007758:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3390      	adds	r3, #144	; 0x90
 8007766:	443b      	add	r3, r7
 8007768:	3b7c      	subs	r3, #124	; 0x7c
 800776a:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800776c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007770:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	440b      	add	r3, r1
 8007780:	3309      	adds	r3, #9
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007788:	4413      	add	r3, r2
 800778a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800778e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b259      	sxtb	r1, r3
 800779a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	3390      	adds	r3, #144	; 0x90
 80077a8:	443b      	add	r3, r7
 80077aa:	3b78      	subs	r3, #120	; 0x78
 80077ac:	460a      	mov	r2, r1
 80077ae:	701a      	strb	r2, [r3, #0]
    size += 1;
 80077b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80077b4:	3301      	adds	r3, #1
 80077b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80077ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077be:	3301      	adds	r3, #1
 80077c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077d0:	4293      	cmp	r3, r2
 80077d2:	f6ff af43 	blt.w	800765c <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80077d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f107 0208 	add.w	r2, r7, #8
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7f9 fd62 	bl	80012ac <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80077e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3790      	adds	r7, #144	; 0x90
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80077f4:	b590      	push	{r4, r7, lr}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	7818      	ldrb	r0, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800780e:	b299      	uxth	r1, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007816:	b29a      	uxth	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800781e:	b29c      	uxth	r4, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007826:	b29b      	uxth	r3, r3
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	4623      	mov	r3, r4
 800782c:	f000 f9bf 	bl	8007bae <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bd90      	pop	{r4, r7, pc}

0800783a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	7818      	ldrb	r0, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007854:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800785a:	461a      	mov	r2, r3
 800785c:	f000 f9bb 	bl	8007bd6 <hci_le_read_remote_used_features_complete_event>

  return status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	895b      	ldrh	r3, [r3, #10]
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	f000 f9b1 	bl	8007bf2 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800789a:	b590      	push	{r4, r7, lr}
 800789c:	b087      	sub	sp, #28
 800789e:	af02      	add	r7, sp, #8
 80078a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b298      	uxth	r0, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	b299      	uxth	r1, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	88db      	ldrh	r3, [r3, #6]
 80078c0:	b29c      	uxth	r4, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	891b      	ldrh	r3, [r3, #8]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4623      	mov	r3, r4
 80078cc:	f000 f99f 	bl	8007c0e <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd90      	pop	{r4, r7, pc}

080078da <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f000 f99e 	bl	8007c36 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f000 f995 	bl	8007c4e <hci_le_generate_dhkey_complete_event>

  return status;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800792e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007932:	b08d      	sub	sp, #52	; 0x34
 8007934:	af08      	add	r7, sp, #32
 8007936:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f893 c000 	ldrb.w	ip, [r3]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800794c:	fa1f fe83 	uxth.w	lr, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f893 8003 	ldrb.w	r8, [r3, #3]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007968:	68b8      	ldr	r0, [r7, #8]
 800796a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800796e:	b280      	uxth	r0, r0
 8007970:	68bc      	ldr	r4, [r7, #8]
 8007972:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8007976:	b2a4      	uxth	r4, r4
 8007978:	68bd      	ldr	r5, [r7, #8]
 800797a:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800797e:	b2ad      	uxth	r5, r5
 8007980:	68be      	ldr	r6, [r7, #8]
 8007982:	7f76      	ldrb	r6, [r6, #29]
 8007984:	9606      	str	r6, [sp, #24]
 8007986:	9505      	str	r5, [sp, #20]
 8007988:	9404      	str	r4, [sp, #16]
 800798a:	9003      	str	r0, [sp, #12]
 800798c:	9102      	str	r1, [sp, #8]
 800798e:	9201      	str	r2, [sp, #4]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	464b      	mov	r3, r9
 8007994:	4642      	mov	r2, r8
 8007996:	4671      	mov	r1, lr
 8007998:	4660      	mov	r0, ip
 800799a:	f000 f964 	bl	8007c66 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080079aa <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b0a6      	sub	sp, #152	; 0x98
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ca:	e085      	b.n	8007ad8 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80079cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	4413      	add	r3, r2
 80079d8:	3301      	adds	r3, #1
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	3398      	adds	r3, #152	; 0x98
 80079e4:	443b      	add	r3, r7
 80079e6:	3b90      	subs	r3, #144	; 0x90
 80079e8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80079ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079ee:	3301      	adds	r3, #1
 80079f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80079f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	4413      	add	r3, r2
 8007a00:	3302      	adds	r3, #2
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	3398      	adds	r3, #152	; 0x98
 8007a0c:	443b      	add	r3, r7
 8007a0e:	3b8f      	subs	r3, #143	; 0x8f
 8007a10:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007a12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a16:	3301      	adds	r3, #1
 8007a18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007a1c:	f107 0208 	add.w	r2, r7, #8
 8007a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4413      	add	r3, r2
 8007a28:	1c98      	adds	r0, r3, #2
 8007a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a34:	4413      	add	r3, r2
 8007a36:	3303      	adds	r3, #3
 8007a38:	2206      	movs	r2, #6
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f001 fa5a 	bl	8008ef4 <memcpy>
    size += 6;
 8007a40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a44:	3306      	adds	r3, #6
 8007a46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007a4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	3309      	adds	r3, #9
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	3398      	adds	r3, #152	; 0x98
 8007a62:	443b      	add	r3, r7
 8007a64:	3b88      	subs	r3, #136	; 0x88
 8007a66:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007a68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	4413      	add	r3, r2
 8007a80:	1c58      	adds	r0, r3, #1
 8007a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	3308      	adds	r3, #8
 8007a8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a8e:	4413      	add	r3, r2
 8007a90:	3302      	adds	r3, #2
 8007a92:	2206      	movs	r2, #6
 8007a94:	4619      	mov	r1, r3
 8007a96:	f001 fa2d 	bl	8008ef4 <memcpy>
    size += 6;
 8007a9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a9e:	3306      	adds	r3, #6
 8007aa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007aa4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	4413      	add	r3, r2
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	f993 2000 	ldrsb.w	r2, [r3]
 8007ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	3398      	adds	r3, #152	; 0x98
 8007abe:	443b      	add	r3, r7
 8007ac0:	3b81      	subs	r3, #129	; 0x81
 8007ac2:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007ac4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	f6ff af71 	blt.w	80079cc <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8007aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	f107 0208 	add.w	r2, r7, #8
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f8c9 	bl	8007c8e <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007afc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3798      	adds	r7, #152	; 0x98
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
 8007b12:	460b      	mov	r3, r1
 8007b14:	80bb      	strh	r3, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007b26:	b490      	push	{r4, r7}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	4608      	mov	r0, r1
 8007b30:	4611      	mov	r1, r2
 8007b32:	461a      	mov	r2, r3
 8007b34:	4623      	mov	r3, r4
 8007b36:	71fb      	strb	r3, [r7, #7]
 8007b38:	4603      	mov	r3, r0
 8007b3a:	80bb      	strh	r3, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	71bb      	strb	r3, [r7, #6]
 8007b40:	4613      	mov	r3, r2
 8007b42:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc90      	pop	{r4, r7}
 8007b4c:	4770      	bx	lr

08007b4e <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	4603      	mov	r3, r0
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	4603      	mov	r3, r0
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	71fb      	strb	r3, [r7, #7]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007bae:	b490      	push	{r4, r7}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	4608      	mov	r0, r1
 8007bb8:	4611      	mov	r1, r2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	4623      	mov	r3, r4
 8007bbe:	71fb      	strb	r3, [r7, #7]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	80bb      	strh	r3, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc90      	pop	{r4, r7}
 8007bd4:	4770      	bx	lr

08007bd6 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	603a      	str	r2, [r7, #0]
 8007be0:	71fb      	strb	r3, [r7, #7]
 8007be2:	460b      	mov	r3, r1
 8007be4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	6039      	str	r1, [r7, #0]
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007c0e:	b490      	push	{r4, r7}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	4604      	mov	r4, r0
 8007c16:	4608      	mov	r0, r1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4623      	mov	r3, r4
 8007c1e:	80fb      	strh	r3, [r7, #6]
 8007c20:	4603      	mov	r3, r0
 8007c22:	80bb      	strh	r3, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc90      	pop	{r4, r7}
 8007c34:	4770      	bx	lr

08007c36 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	6039      	str	r1, [r7, #0]
 8007c40:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	4603      	mov	r3, r0
 8007c56:	6039      	str	r1, [r7, #0]
 8007c58:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007c66:	b490      	push	{r4, r7}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4608      	mov	r0, r1
 8007c70:	4611      	mov	r1, r2
 8007c72:	461a      	mov	r2, r3
 8007c74:	4623      	mov	r3, r4
 8007c76:	71fb      	strb	r3, [r7, #7]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	80bb      	strh	r3, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	71bb      	strb	r3, [r7, #6]
 8007c80:	4613      	mov	r3, r2
 8007c82:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc90      	pop	{r4, r7}
 8007c8c:	4770      	bx	lr

08007c8e <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	4603      	mov	r3, r0
 8007c96:	6039      	str	r1, [r7, #0]
 8007c98:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007caa:	bf00      	nop
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	80fb      	strh	r3, [r7, #6]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	717b      	strb	r3, [r7, #5]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	4603      	mov	r3, r0
 8007cda:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007cfe:	b480      	push	{r7}
 8007d00:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007d02:	bf00      	nop
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	4603      	mov	r3, r0
 8007d22:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	460a      	mov	r2, r1
 8007d52:	80fb      	strh	r3, [r7, #6]
 8007d54:	4613      	mov	r3, r2
 8007d56:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4603      	mov	r3, r0
 8007d84:	80fb      	strh	r3, [r7, #6]
 8007d86:	460b      	mov	r3, r1
 8007d88:	717b      	strb	r3, [r7, #5]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	603a      	str	r2, [r7, #0]
 8007da4:	80fb      	strh	r3, [r7, #6]
 8007da6:	460b      	mov	r3, r1
 8007da8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	603b      	str	r3, [r7, #0]
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	80fb      	strh	r3, [r7, #6]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	717b      	strb	r3, [r7, #5]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	4603      	mov	r3, r0
 8007dde:	603a      	str	r2, [r7, #0]
 8007de0:	80fb      	strh	r3, [r7, #6]
 8007de2:	460b      	mov	r3, r1
 8007de4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	4603      	mov	r3, r0
 8007dfa:	603a      	str	r2, [r7, #0]
 8007dfc:	80fb      	strh	r3, [r7, #6]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	4603      	mov	r3, r0
 8007e16:	603a      	str	r2, [r7, #0]
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	4603      	mov	r3, r0
 8007e34:	80fb      	strh	r3, [r7, #6]
 8007e36:	460b      	mov	r3, r1
 8007e38:	717b      	strb	r3, [r7, #5]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007e4a:	b490      	push	{r4, r7}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	4604      	mov	r4, r0
 8007e52:	4608      	mov	r0, r1
 8007e54:	4611      	mov	r1, r2
 8007e56:	461a      	mov	r2, r3
 8007e58:	4623      	mov	r3, r4
 8007e5a:	80fb      	strh	r3, [r7, #6]
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	80bb      	strh	r3, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	807b      	strh	r3, [r7, #2]
 8007e64:	4613      	mov	r3, r2
 8007e66:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc90      	pop	{r4, r7}
 8007e70:	4770      	bx	lr

08007e72 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	4603      	mov	r3, r0
 8007e7a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	607b      	str	r3, [r7, #4]
 8007e90:	4603      	mov	r3, r0
 8007e92:	81fb      	strh	r3, [r7, #14]
 8007e94:	460b      	mov	r3, r1
 8007e96:	81bb      	strh	r3, [r7, #12]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007ea8:	b490      	push	{r4, r7}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4623      	mov	r3, r4
 8007eb8:	80fb      	strh	r3, [r7, #6]
 8007eba:	4603      	mov	r3, r0
 8007ebc:	717b      	strb	r3, [r7, #5]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	807b      	strh	r3, [r7, #2]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc90      	pop	{r4, r7}
 8007ece:	4770      	bx	lr

08007ed0 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	607b      	str	r3, [r7, #4]
 8007ed8:	4603      	mov	r3, r0
 8007eda:	81fb      	strh	r3, [r7, #14]
 8007edc:	460b      	mov	r3, r1
 8007ede:	81bb      	strh	r3, [r7, #12]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	80fb      	strh	r3, [r7, #6]
 8007efa:	460b      	mov	r3, r1
 8007efc:	80bb      	strh	r3, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	4603      	mov	r3, r0
 8007f16:	603a      	str	r2, [r7, #0]
 8007f18:	80fb      	strh	r3, [r7, #6]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	4603      	mov	r3, r0
 8007f32:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007f40:	b490      	push	{r4, r7}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	80fb      	strh	r3, [r7, #6]
 8007f52:	4603      	mov	r3, r0
 8007f54:	80bb      	strh	r3, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	807b      	strh	r3, [r7, #2]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc90      	pop	{r4, r7}
 8007f66:	4770      	bx	lr

08007f68 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	460a      	mov	r2, r1
 8007f72:	80fb      	strh	r3, [r7, #6]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	603a      	str	r2, [r7, #0]
 8007f8e:	80fb      	strh	r3, [r7, #6]
 8007f90:	460b      	mov	r3, r1
 8007f92:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007fa0:	b490      	push	{r4, r7}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4623      	mov	r3, r4
 8007fb0:	80fb      	strh	r3, [r7, #6]
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	717b      	strb	r3, [r7, #5]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	807b      	strh	r3, [r7, #2]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc90      	pop	{r4, r7}
 8007fc6:	4770      	bx	lr

08007fc8 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007fc8:	b490      	push	{r4, r7}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	80fb      	strh	r3, [r7, #6]
 8007fda:	4603      	mov	r3, r0
 8007fdc:	717b      	strb	r3, [r7, #5]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	807b      	strh	r3, [r7, #2]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc90      	pop	{r4, r7}
 8007fee:	4770      	bx	lr

08007ff0 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800802a:	bf00      	nop
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	4603      	mov	r3, r0
 800803e:	603a      	str	r2, [r7, #0]
 8008040:	71fb      	strb	r3, [r7, #7]
 8008042:	460b      	mov	r3, r1
 8008044:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	4603      	mov	r3, r0
 800805a:	603a      	str	r2, [r7, #0]
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	460b      	mov	r3, r1
 8008060:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	4603      	mov	r3, r0
 8008076:	603a      	str	r2, [r7, #0]
 8008078:	71fb      	strb	r3, [r7, #7]
 800807a:	460b      	mov	r3, r1
 800807c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b088      	sub	sp, #32
 800808e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008094:	f107 0308 	add.w	r3, r7, #8
 8008098:	2218      	movs	r2, #24
 800809a:	2100      	movs	r1, #0
 800809c:	4618      	mov	r0, r3
 800809e:	f000 feaf 	bl	8008e00 <memset>
  rq.ogf = 0x03;
 80080a2:	2303      	movs	r3, #3
 80080a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80080a6:	2303      	movs	r3, #3
 80080a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80080aa:	1dfb      	adds	r3, r7, #7
 80080ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080ae:	2301      	movs	r3, #1
 80080b0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80080b2:	f107 0308 	add.w	r3, r7, #8
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f9f3 	bl	80084a4 <hci_send_req>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da01      	bge.n	80080c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80080c4:	23ff      	movs	r3, #255	; 0xff
 80080c6:	e005      	b.n	80080d4 <hci_reset+0x4a>
  if (status) {
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <hci_reset+0x48>
    return status;
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	e000      	b.n	80080d4 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b0cc      	sub	sp, #304	; 0x130
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4602      	mov	r2, r0
 80080e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ec:	6019      	str	r1, [r3, #0]
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80080f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008100:	f107 0308 	add.w	r3, r7, #8
 8008104:	2204      	movs	r2, #4
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fe79 	bl	8008e00 <memset>
  uint8_t index_input = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008118:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800811c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008124:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008128:	3302      	adds	r3, #2
 800812a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800812e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008132:	2218      	movs	r2, #24
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fe62 	bl	8008e00 <memset>
  rq.ogf = 0x05;
 800813c:	2305      	movs	r3, #5
 800813e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8008142:	2305      	movs	r3, #5
 8008144:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008148:	f107 030c 	add.w	r3, r7, #12
 800814c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008150:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008154:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008160:	2304      	movs	r3, #4
 8008162:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008166:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f999 	bl	80084a4 <hci_send_req>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	da01      	bge.n	800817c <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 8008178:	23ff      	movs	r3, #255	; 0xff
 800817a:	e019      	b.n	80081b0 <hci_read_rssi+0xd4>
  if (resp.Status) {
 800817c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008180:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <hci_read_rssi+0xba>
    return resp.Status;
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	e00c      	b.n	80081b0 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800819e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80081a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b0cc      	sub	sp, #304	; 0x130
 80081be:	af00      	add	r7, sp, #0
 80081c0:	4602      	mov	r2, r0
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	6019      	str	r1, [r3, #0]
 80081cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80081d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80081de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80081f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081f8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008200:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008204:	3301      	adds	r3, #1
 8008206:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00a      	beq.n	800822e <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	1c58      	adds	r0, r3, #1
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008226:	221f      	movs	r2, #31
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	f000 fe63 	bl	8008ef4 <memcpy>
  }
  index_input += 31;
 800822e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008232:	331f      	adds	r3, #31
 8008234:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008238:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800823c:	2218      	movs	r2, #24
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fddd 	bl	8008e00 <memset>
  rq.ogf = 0x08;
 8008246:	2308      	movs	r3, #8
 8008248:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800824c:	2309      	movs	r3, #9
 800824e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800825a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800825e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008262:	f107 030b 	add.w	r3, r7, #11
 8008266:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f914 	bl	80084a4 <hci_send_req>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	da01      	bge.n	8008286 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8008282:	23ff      	movs	r3, #255	; 0xff
 8008284:	e00d      	b.n	80082a2 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 8008286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <hci_le_set_scan_response_data+0xe6>
    return status;
 8008294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008298:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	e000      	b.n	80082a2 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3308      	adds	r3, #8
 80082b8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d001      	beq.n	80082c6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80082c2:	2301      	movs	r3, #1
 80082c4:	e00c      	b.n	80082e0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3302      	adds	r3, #2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80082d4:	3b03      	subs	r3, #3
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d001      	beq.n	80082de <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80082da:	2302      	movs	r3, #2
 80082dc:	e000      	b.n	80082e0 <verify_packet+0x34>
  
  return 0;      
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b0a6      	sub	sp, #152	; 0x98
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	4603      	mov	r3, r0
 80082f6:	81fb      	strh	r3, [r7, #14]
 80082f8:	460b      	mov	r3, r1
 80082fa:	81bb      	strh	r3, [r7, #12]
 80082fc:	4613      	mov	r3, r2
 80082fe:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008300:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008308:	b21a      	sxth	r2, r3
 800830a:	89fb      	ldrh	r3, [r7, #14]
 800830c:	029b      	lsls	r3, r3, #10
 800830e:	b21b      	sxth	r3, r3
 8008310:	4313      	orrs	r3, r2
 8008312:	b21b      	sxth	r3, r3
 8008314:	b29b      	uxth	r3, r3
 8008316:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800831c:	2301      	movs	r3, #1
 800831e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008320:	f107 0318 	add.w	r3, r7, #24
 8008324:	3301      	adds	r3, #1
 8008326:	461a      	mov	r2, r3
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	8819      	ldrh	r1, [r3, #0]
 800832e:	789b      	ldrb	r3, [r3, #2]
 8008330:	8011      	strh	r1, [r2, #0]
 8008332:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008334:	f107 0318 	add.w	r3, r7, #24
 8008338:	3304      	adds	r3, #4
 800833a:	7afa      	ldrb	r2, [r7, #11]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fdd8 	bl	8008ef4 <memcpy>
  
  if (hciContext.io.Send)
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <send_cmd+0x7c>)
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <send_cmd+0x7c>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	7afa      	ldrb	r2, [r7, #11]
 8008352:	b292      	uxth	r2, r2
 8008354:	3204      	adds	r2, #4
 8008356:	b291      	uxth	r1, r2
 8008358:	f107 0218 	add.w	r2, r7, #24
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
  }
}
 8008360:	bf00      	nop
 8008362:	3798      	adds	r7, #152	; 0x98
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200008cc 	.word	0x200008cc

0800836c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008376:	e00a      	b.n	800838e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008378:	f107 030c 	add.w	r3, r7, #12
 800837c:	4619      	mov	r1, r3
 800837e:	6838      	ldr	r0, [r7, #0]
 8008380:	f000 fae8 	bl	8008954 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa4f 	bl	800882c <list_insert_head>
  while (!list_is_empty(src_list))
 800838e:	6838      	ldr	r0, [r7, #0]
 8008390:	f000 fa2a 	bl	80087e8 <list_is_empty>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0ee      	beq.n	8008378 <move_list+0xc>
  }
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80083aa:	e009      	b.n	80083c0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80083ac:	1d3b      	adds	r3, r7, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <free_event_list+0x34>)
 80083b2:	f000 faa8 	bl	8008906 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4619      	mov	r1, r3
 80083ba:	4808      	ldr	r0, [pc, #32]	; (80083dc <free_event_list+0x38>)
 80083bc:	f000 fa5c 	bl	8008878 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80083c0:	4806      	ldr	r0, [pc, #24]	; (80083dc <free_event_list+0x38>)
 80083c2:	f000 faee 	bl	80089a2 <list_get_size>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	ddef      	ble.n	80083ac <free_event_list+0x8>
  }
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	2000034c 	.word	0x2000034c
 80083dc:	20000344 	.word	0x20000344

080083e0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <hci_init+0x74>)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80083f6:	4818      	ldr	r0, [pc, #96]	; (8008458 <hci_init+0x78>)
 80083f8:	f000 f9e6 	bl	80087c8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80083fc:	4817      	ldr	r0, [pc, #92]	; (800845c <hci_init+0x7c>)
 80083fe:	f000 f9e3 	bl	80087c8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008402:	f7f9 fb61 	bl	8001ac8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
 800840a:	e00c      	b.n	8008426 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	228c      	movs	r2, #140	; 0x8c
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	4a12      	ldr	r2, [pc, #72]	; (8008460 <hci_init+0x80>)
 8008416:	4413      	add	r3, r2
 8008418:	4619      	mov	r1, r3
 800841a:	480f      	ldr	r0, [pc, #60]	; (8008458 <hci_init+0x78>)
 800841c:	f000 fa2c 	bl	8008878 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	3301      	adds	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	2b09      	cmp	r3, #9
 800842a:	d9ef      	bls.n	800840c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <hci_init+0x74>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <hci_init+0x5c>
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <hci_init+0x74>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2000      	movs	r0, #0
 800843a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <hci_init+0x74>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <hci_init+0x6a>
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <hci_init+0x74>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	4798      	blx	r3
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200008cc 	.word	0x200008cc
 8008458:	20000344 	.word	0x20000344
 800845c:	2000034c 	.word	0x2000034c
 8008460:	20000354 	.word	0x20000354

08008464 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <hci_register_io_bus+0x3c>)
 8008472:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <hci_register_io_bus+0x3c>)
 800847a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	4a07      	ldr	r2, [pc, #28]	; (80084a0 <hci_register_io_bus+0x3c>)
 8008482:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	4a05      	ldr	r2, [pc, #20]	; (80084a0 <hci_register_io_bus+0x3c>)
 800848a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	4a03      	ldr	r2, [pc, #12]	; (80084a0 <hci_register_io_bus+0x3c>)
 8008492:	6093      	str	r3, [r2, #8]
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	200008cc 	.word	0x200008cc

080084a4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	885b      	ldrh	r3, [r3, #2]
 80084b4:	b21b      	sxth	r3, r3
 80084b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ba:	b21a      	sxth	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	029b      	lsls	r3, r3, #10
 80084c2:	b21b      	sxth	r3, r3
 80084c4:	4313      	orrs	r3, r2
 80084c6:	b21b      	sxth	r3, r3
 80084c8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f978 	bl	80087c8 <list_init_head>

  free_event_list();
 80084d8:	f7ff ff64 	bl	80083a4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8818      	ldrh	r0, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8859      	ldrh	r1, [r3, #2]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f7ff fefd 	bl	80082ec <send_cmd>
  
  if (async)
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <hci_send_req+0x58>
  {
    return 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e0e2      	b.n	80086c2 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80084fc:	f7fa f8b2 	bl	8002664 <HAL_GetTick>
 8008500:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008502:	f7fa f8af 	bl	8002664 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008510:	f200 80b3 	bhi.w	800867a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008514:	486d      	ldr	r0, [pc, #436]	; (80086cc <hci_send_req+0x228>)
 8008516:	f000 f967 	bl	80087e8 <list_is_empty>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d000      	beq.n	8008522 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008520:	e7ef      	b.n	8008502 <hci_send_req+0x5e>
      {
        break;
 8008522:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	4619      	mov	r1, r3
 800852a:	4868      	ldr	r0, [pc, #416]	; (80086cc <hci_send_req+0x228>)
 800852c:	f000 f9eb 	bl	8008906 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3308      	adds	r3, #8
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b04      	cmp	r3, #4
 800853c:	d17f      	bne.n	800863e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	3301      	adds	r3, #1
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3308      	adds	r3, #8
 8008548:	3303      	adds	r3, #3
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008552:	3b03      	subs	r3, #3
 8008554:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b3e      	cmp	r3, #62	; 0x3e
 800855c:	d04c      	beq.n	80085f8 <hci_send_req+0x154>
 800855e:	2b3e      	cmp	r3, #62	; 0x3e
 8008560:	dc68      	bgt.n	8008634 <hci_send_req+0x190>
 8008562:	2b10      	cmp	r3, #16
 8008564:	f000 808b 	beq.w	800867e <hci_send_req+0x1da>
 8008568:	2b10      	cmp	r3, #16
 800856a:	dc63      	bgt.n	8008634 <hci_send_req+0x190>
 800856c:	2b0e      	cmp	r3, #14
 800856e:	d023      	beq.n	80085b8 <hci_send_req+0x114>
 8008570:	2b0f      	cmp	r3, #15
 8008572:	d15f      	bne.n	8008634 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	b29b      	uxth	r3, r3
 800857e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008580:	429a      	cmp	r2, r3
 8008582:	d17e      	bne.n	8008682 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d004      	beq.n	8008596 <hci_send_req+0xf2>
          if (cs->status) {
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d051      	beq.n	8008638 <hci_send_req+0x194>
            goto failed;
 8008594:	e078      	b.n	8008688 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	429a      	cmp	r2, r3
 800859e:	bf28      	it	cs
 80085a0:	461a      	movcs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6918      	ldr	r0, [r3, #16]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085b2:	f000 fc9f 	bl	8008ef4 <memcpy>
        goto done;
 80085b6:	e078      	b.n	80086aa <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d15d      	bne.n	8008686 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	3303      	adds	r3, #3
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	3b03      	subs	r3, #3
 80085d4:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	429a      	cmp	r2, r3
 80085de:	bf28      	it	cs
 80085e0:	461a      	movcs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6918      	ldr	r0, [r3, #16]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f2:	f000 fc7f 	bl	8008ef4 <memcpy>
        goto done;
 80085f6:	e058      	b.n	80086aa <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d118      	bne.n	800863c <hci_send_req+0x198>
          break;
      
        len -= 1;
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	3b01      	subs	r3, #1
 800860e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695a      	ldr	r2, [r3, #20]
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	429a      	cmp	r2, r3
 8008618:	bf28      	it	cs
 800861a:	461a      	movcs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6918      	ldr	r0, [r3, #16]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	1c59      	adds	r1, r3, #1
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	461a      	mov	r2, r3
 800862e:	f000 fc61 	bl	8008ef4 <memcpy>
        goto done;
 8008632:	e03a      	b.n	80086aa <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <hci_send_req+0x19a>
          break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <hci_send_req+0x19a>
          break;
 800863c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800863e:	4824      	ldr	r0, [pc, #144]	; (80086d0 <hci_send_req+0x22c>)
 8008640:	f000 f8d2 	bl	80087e8 <list_is_empty>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00d      	beq.n	8008666 <hci_send_req+0x1c2>
 800864a:	4820      	ldr	r0, [pc, #128]	; (80086cc <hci_send_req+0x228>)
 800864c:	f000 f8cc 	bl	80087e8 <list_is_empty>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4619      	mov	r1, r3
 800865a:	481d      	ldr	r0, [pc, #116]	; (80086d0 <hci_send_req+0x22c>)
 800865c:	f000 f90c 	bl	8008878 <list_insert_tail>
      hciReadPacket=NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	e008      	b.n	8008678 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f902 	bl	8008878 <list_insert_tail>
      hciReadPacket=NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
  {
 8008678:	e740      	b.n	80084fc <hci_send_req+0x58>
        goto failed;
 800867a:	bf00      	nop
 800867c:	e004      	b.n	8008688 <hci_send_req+0x1e4>
        goto failed;
 800867e:	bf00      	nop
 8008680:	e002      	b.n	8008688 <hci_send_req+0x1e4>
          goto failed;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <hci_send_req+0x1e4>
          goto failed;
 8008686:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4619      	mov	r1, r3
 8008692:	480f      	ldr	r0, [pc, #60]	; (80086d0 <hci_send_req+0x22c>)
 8008694:	f000 f8ca 	bl	800882c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008698:	f107 0308 	add.w	r3, r7, #8
 800869c:	4619      	mov	r1, r3
 800869e:	480b      	ldr	r0, [pc, #44]	; (80086cc <hci_send_req+0x228>)
 80086a0:	f7ff fe64 	bl	800836c <move_list>

  return -1;
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295
 80086a8:	e00b      	b.n	80086c2 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	4619      	mov	r1, r3
 80086ae:	4808      	ldr	r0, [pc, #32]	; (80086d0 <hci_send_req+0x22c>)
 80086b0:	f000 f8bc 	bl	800882c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4619      	mov	r1, r3
 80086ba:	4804      	ldr	r0, [pc, #16]	; (80086cc <hci_send_req+0x228>)
 80086bc:	f7ff fe56 	bl	800836c <move_list>

  return 0;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3738      	adds	r7, #56	; 0x38
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	2000034c 	.word	0x2000034c
 80086d0:	20000344 	.word	0x20000344

080086d4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80086de:	e013      	b.n	8008708 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80086e0:	1d3b      	adds	r3, r7, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	480e      	ldr	r0, [pc, #56]	; (8008720 <hci_user_evt_proc+0x4c>)
 80086e6:	f000 f90e 	bl	8008906 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80086ea:	4b0e      	ldr	r3, [pc, #56]	; (8008724 <hci_user_evt_proc+0x50>)
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <hci_user_evt_proc+0x50>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	3208      	adds	r2, #8
 80086fa:	4610      	mov	r0, r2
 80086fc:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4619      	mov	r1, r3
 8008702:	4809      	ldr	r0, [pc, #36]	; (8008728 <hci_user_evt_proc+0x54>)
 8008704:	f000 f8b8 	bl	8008878 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008708:	4805      	ldr	r0, [pc, #20]	; (8008720 <hci_user_evt_proc+0x4c>)
 800870a:	f000 f86d 	bl	80087e8 <list_is_empty>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0e5      	beq.n	80086e0 <hci_user_evt_proc+0xc>
  }
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	2000034c 	.word	0x2000034c
 8008724:	200008cc 	.word	0x200008cc
 8008728:	20000344 	.word	0x20000344

0800872c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800873c:	481f      	ldr	r0, [pc, #124]	; (80087bc <hci_notify_asynch_evt+0x90>)
 800873e:	f000 f853 	bl	80087e8 <list_is_empty>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d132      	bne.n	80087ae <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4619      	mov	r1, r3
 800874e:	481b      	ldr	r0, [pc, #108]	; (80087bc <hci_notify_asynch_evt+0x90>)
 8008750:	f000 f8d9 	bl	8008906 <list_remove_head>
    
    if (hciContext.io.Receive)
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <hci_notify_asynch_evt+0x94>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d02a      	beq.n	80087b2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800875c:	4b18      	ldr	r3, [pc, #96]	; (80087c0 <hci_notify_asynch_evt+0x94>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	3208      	adds	r2, #8
 8008764:	2180      	movs	r1, #128	; 0x80
 8008766:	4610      	mov	r0, r2
 8008768:	4798      	blx	r3
 800876a:	4603      	mov	r3, r0
 800876c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800876e:	7cfb      	ldrb	r3, [r7, #19]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d016      	beq.n	80087a2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	7cfa      	ldrb	r2, [r7, #19]
 8008778:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fd94 	bl	80082ac <verify_packet>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4619      	mov	r1, r3
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <hci_notify_asynch_evt+0x98>)
 8008790:	f000 f872 	bl	8008878 <list_insert_tail>
 8008794:	e00d      	b.n	80087b2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4619      	mov	r1, r3
 800879a:	4808      	ldr	r0, [pc, #32]	; (80087bc <hci_notify_asynch_evt+0x90>)
 800879c:	f000 f846 	bl	800882c <list_insert_head>
 80087a0:	e007      	b.n	80087b2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4619      	mov	r1, r3
 80087a6:	4805      	ldr	r0, [pc, #20]	; (80087bc <hci_notify_asynch_evt+0x90>)
 80087a8:	f000 f840 	bl	800882c <list_insert_head>
 80087ac:	e001      	b.n	80087b2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80087ae:	2301      	movs	r3, #1
 80087b0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80087b2:	697b      	ldr	r3, [r7, #20]
  
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20000344 	.word	0x20000344
 80087c0:	200008cc 	.word	0x200008cc
 80087c4:	2000034c 	.word	0x2000034c

080087c8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	605a      	str	r2, [r3, #4]
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f0:	f3ef 8310 	mrs	r3, PRIMASK
 80087f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80087fa:	b672      	cpsid	i
}
 80087fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d102      	bne.n	800880e <list_is_empty+0x26>
  {
    return_value = 1;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
 800880c:	e001      	b.n	8008812 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f383 8810 	msr	PRIMASK, r3
}
 800881c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008820:	4618      	mov	r0, r3
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008836:	f3ef 8310 	mrs	r3, PRIMASK
 800883a:	60fb      	str	r3, [r7, #12]
  return(result);
 800883c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800883e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008840:	b672      	cpsid	i
}
 8008842:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	605a      	str	r2, [r3, #4]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f383 8810 	msr	PRIMASK, r3
}
 800886a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800886c:	bf00      	nop
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008882:	f3ef 8310 	mrs	r3, PRIMASK
 8008886:	60fb      	str	r3, [r7, #12]
  return(result);
 8008888:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800888a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800888c:	b672      	cpsid	i
}
 800888e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f383 8810 	msr	PRIMASK, r3
}
 80088b6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088cc:	f3ef 8310 	mrs	r3, PRIMASK
 80088d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088d6:	b672      	cpsid	i
}
 80088d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6852      	ldr	r2, [r2, #4]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f383 8810 	msr	PRIMASK, r3
}
 80088f8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80088fa:	bf00      	nop
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b086      	sub	sp, #24
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008910:	f3ef 8310 	mrs	r3, PRIMASK
 8008914:	60fb      	str	r3, [r7, #12]
  return(result);
 8008916:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800891a:	b672      	cpsid	i
}
 800891c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff ffca 	bl	80088c4 <list_remove_node>
  (*node)->next = NULL;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2200      	movs	r2, #0
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f383 8810 	msr	PRIMASK, r3
}
 800894a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800894c:	bf00      	nop
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800895e:	f3ef 8310 	mrs	r3, PRIMASK
 8008962:	60fb      	str	r3, [r7, #12]
  return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008968:	b672      	cpsid	i
}
 800896a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff ffa3 	bl	80088c4 <list_remove_node>
  (*node)->next = NULL;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f383 8810 	msr	PRIMASK, r3
}
 8008998:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800899a:	bf00      	nop
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b089      	sub	sp, #36	; 0x24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  int size = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ae:	f3ef 8310 	mrs	r3, PRIMASK
 80089b2:	613b      	str	r3, [r7, #16]
  return(result);
 80089b4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089b8:	b672      	cpsid	i
}
 80089ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80089c2:	e005      	b.n	80089d0 <list_get_size+0x2e>
  {
    size++;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d1f5      	bne.n	80089c4 <list_get_size+0x22>
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80089e4:	69fb      	ldr	r3, [r7, #28]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3724      	adds	r7, #36	; 0x24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
	...

080089f4 <std>:
 80089f4:	2300      	movs	r3, #0
 80089f6:	b510      	push	{r4, lr}
 80089f8:	4604      	mov	r4, r0
 80089fa:	e9c0 3300 	strd	r3, r3, [r0]
 80089fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a02:	6083      	str	r3, [r0, #8]
 8008a04:	8181      	strh	r1, [r0, #12]
 8008a06:	6643      	str	r3, [r0, #100]	; 0x64
 8008a08:	81c2      	strh	r2, [r0, #14]
 8008a0a:	6183      	str	r3, [r0, #24]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	2208      	movs	r2, #8
 8008a10:	305c      	adds	r0, #92	; 0x5c
 8008a12:	f000 f9f5 	bl	8008e00 <memset>
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <std+0x38>)
 8008a18:	6263      	str	r3, [r4, #36]	; 0x24
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <std+0x3c>)
 8008a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <std+0x40>)
 8008a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <std+0x44>)
 8008a24:	6224      	str	r4, [r4, #32]
 8008a26:	6323      	str	r3, [r4, #48]	; 0x30
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08008c31 	.word	0x08008c31
 8008a30:	08008c53 	.word	0x08008c53
 8008a34:	08008c8b 	.word	0x08008c8b
 8008a38:	08008caf 	.word	0x08008caf

08008a3c <stdio_exit_handler>:
 8008a3c:	4a02      	ldr	r2, [pc, #8]	; (8008a48 <stdio_exit_handler+0xc>)
 8008a3e:	4903      	ldr	r1, [pc, #12]	; (8008a4c <stdio_exit_handler+0x10>)
 8008a40:	4803      	ldr	r0, [pc, #12]	; (8008a50 <stdio_exit_handler+0x14>)
 8008a42:	f000 b869 	b.w	8008b18 <_fwalk_sglue>
 8008a46:	bf00      	nop
 8008a48:	20000040 	.word	0x20000040
 8008a4c:	080097b5 	.word	0x080097b5
 8008a50:	2000004c 	.word	0x2000004c

08008a54 <cleanup_stdio>:
 8008a54:	6841      	ldr	r1, [r0, #4]
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <cleanup_stdio+0x34>)
 8008a58:	4299      	cmp	r1, r3
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	d001      	beq.n	8008a64 <cleanup_stdio+0x10>
 8008a60:	f000 fea8 	bl	80097b4 <_fflush_r>
 8008a64:	68a1      	ldr	r1, [r4, #8]
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <cleanup_stdio+0x38>)
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d002      	beq.n	8008a72 <cleanup_stdio+0x1e>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fea1 	bl	80097b4 <_fflush_r>
 8008a72:	68e1      	ldr	r1, [r4, #12]
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <cleanup_stdio+0x3c>)
 8008a76:	4299      	cmp	r1, r3
 8008a78:	d004      	beq.n	8008a84 <cleanup_stdio+0x30>
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a80:	f000 be98 	b.w	80097b4 <_fflush_r>
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	200008ec 	.word	0x200008ec
 8008a8c:	20000954 	.word	0x20000954
 8008a90:	200009bc 	.word	0x200009bc

08008a94 <global_stdio_init.part.0>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <global_stdio_init.part.0+0x30>)
 8008a98:	4c0b      	ldr	r4, [pc, #44]	; (8008ac8 <global_stdio_init.part.0+0x34>)
 8008a9a:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <global_stdio_init.part.0+0x38>)
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	f7ff ffa6 	bl	80089f4 <std>
 8008aa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008aac:	2201      	movs	r2, #1
 8008aae:	2109      	movs	r1, #9
 8008ab0:	f7ff ffa0 	bl	80089f4 <std>
 8008ab4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ab8:	2202      	movs	r2, #2
 8008aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008abe:	2112      	movs	r1, #18
 8008ac0:	f7ff bf98 	b.w	80089f4 <std>
 8008ac4:	20000a24 	.word	0x20000a24
 8008ac8:	200008ec 	.word	0x200008ec
 8008acc:	08008a3d 	.word	0x08008a3d

08008ad0 <__sfp_lock_acquire>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sfp_lock_acquire+0x8>)
 8008ad2:	f000 ba0d 	b.w	8008ef0 <__retarget_lock_acquire_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20000a2d 	.word	0x20000a2d

08008adc <__sfp_lock_release>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__sfp_lock_release+0x8>)
 8008ade:	f000 ba08 	b.w	8008ef2 <__retarget_lock_release_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	20000a2d 	.word	0x20000a2d

08008ae8 <__sinit>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	f7ff fff0 	bl	8008ad0 <__sfp_lock_acquire>
 8008af0:	6a23      	ldr	r3, [r4, #32]
 8008af2:	b11b      	cbz	r3, 8008afc <__sinit+0x14>
 8008af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af8:	f7ff bff0 	b.w	8008adc <__sfp_lock_release>
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <__sinit+0x28>)
 8008afe:	6223      	str	r3, [r4, #32]
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <__sinit+0x2c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f5      	bne.n	8008af4 <__sinit+0xc>
 8008b08:	f7ff ffc4 	bl	8008a94 <global_stdio_init.part.0>
 8008b0c:	e7f2      	b.n	8008af4 <__sinit+0xc>
 8008b0e:	bf00      	nop
 8008b10:	08008a55 	.word	0x08008a55
 8008b14:	20000a24 	.word	0x20000a24

08008b18 <_fwalk_sglue>:
 8008b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	4688      	mov	r8, r1
 8008b20:	4614      	mov	r4, r2
 8008b22:	2600      	movs	r6, #0
 8008b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b28:	f1b9 0901 	subs.w	r9, r9, #1
 8008b2c:	d505      	bpl.n	8008b3a <_fwalk_sglue+0x22>
 8008b2e:	6824      	ldr	r4, [r4, #0]
 8008b30:	2c00      	cmp	r4, #0
 8008b32:	d1f7      	bne.n	8008b24 <_fwalk_sglue+0xc>
 8008b34:	4630      	mov	r0, r6
 8008b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d907      	bls.n	8008b50 <_fwalk_sglue+0x38>
 8008b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b44:	3301      	adds	r3, #1
 8008b46:	d003      	beq.n	8008b50 <_fwalk_sglue+0x38>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c0      	blx	r8
 8008b4e:	4306      	orrs	r6, r0
 8008b50:	3568      	adds	r5, #104	; 0x68
 8008b52:	e7e9      	b.n	8008b28 <_fwalk_sglue+0x10>

08008b54 <iprintf>:
 8008b54:	b40f      	push	{r0, r1, r2, r3}
 8008b56:	b507      	push	{r0, r1, r2, lr}
 8008b58:	4906      	ldr	r1, [pc, #24]	; (8008b74 <iprintf+0x20>)
 8008b5a:	ab04      	add	r3, sp, #16
 8008b5c:	6808      	ldr	r0, [r1, #0]
 8008b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b62:	6881      	ldr	r1, [r0, #8]
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	f000 faf5 	bl	8009154 <_vfiprintf_r>
 8008b6a:	b003      	add	sp, #12
 8008b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b70:	b004      	add	sp, #16
 8008b72:	4770      	bx	lr
 8008b74:	20000098 	.word	0x20000098

08008b78 <_puts_r>:
 8008b78:	6a03      	ldr	r3, [r0, #32]
 8008b7a:	b570      	push	{r4, r5, r6, lr}
 8008b7c:	6884      	ldr	r4, [r0, #8]
 8008b7e:	4605      	mov	r5, r0
 8008b80:	460e      	mov	r6, r1
 8008b82:	b90b      	cbnz	r3, 8008b88 <_puts_r+0x10>
 8008b84:	f7ff ffb0 	bl	8008ae8 <__sinit>
 8008b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b8a:	07db      	lsls	r3, r3, #31
 8008b8c:	d405      	bmi.n	8008b9a <_puts_r+0x22>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	0598      	lsls	r0, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_puts_r+0x22>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f000 f9ab 	bl	8008ef0 <__retarget_lock_acquire_recursive>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	0719      	lsls	r1, r3, #28
 8008b9e:	d513      	bpl.n	8008bc8 <_puts_r+0x50>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	b18b      	cbz	r3, 8008bc8 <_puts_r+0x50>
 8008ba4:	3e01      	subs	r6, #1
 8008ba6:	68a3      	ldr	r3, [r4, #8]
 8008ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bac:	3b01      	subs	r3, #1
 8008bae:	60a3      	str	r3, [r4, #8]
 8008bb0:	b9e9      	cbnz	r1, 8008bee <_puts_r+0x76>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da2e      	bge.n	8008c14 <_puts_r+0x9c>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	210a      	movs	r1, #10
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f87b 	bl	8008cb6 <__swbuf_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d007      	beq.n	8008bd4 <_puts_r+0x5c>
 8008bc4:	250a      	movs	r5, #10
 8008bc6:	e007      	b.n	8008bd8 <_puts_r+0x60>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f000 f8b0 	bl	8008d30 <__swsetup_r>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d0e7      	beq.n	8008ba4 <_puts_r+0x2c>
 8008bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8008bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bda:	07da      	lsls	r2, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_puts_r+0x72>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	059b      	lsls	r3, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_puts_r+0x72>
 8008be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be6:	f000 f984 	bl	8008ef2 <__retarget_lock_release_recursive>
 8008bea:	4628      	mov	r0, r5
 8008bec:	bd70      	pop	{r4, r5, r6, pc}
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da04      	bge.n	8008bfc <_puts_r+0x84>
 8008bf2:	69a2      	ldr	r2, [r4, #24]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	dc06      	bgt.n	8008c06 <_puts_r+0x8e>
 8008bf8:	290a      	cmp	r1, #10
 8008bfa:	d004      	beq.n	8008c06 <_puts_r+0x8e>
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	6022      	str	r2, [r4, #0]
 8008c02:	7019      	strb	r1, [r3, #0]
 8008c04:	e7cf      	b.n	8008ba6 <_puts_r+0x2e>
 8008c06:	4622      	mov	r2, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 f854 	bl	8008cb6 <__swbuf_r>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d1c9      	bne.n	8008ba6 <_puts_r+0x2e>
 8008c12:	e7df      	b.n	8008bd4 <_puts_r+0x5c>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	250a      	movs	r5, #10
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	6022      	str	r2, [r4, #0]
 8008c1c:	701d      	strb	r5, [r3, #0]
 8008c1e:	e7db      	b.n	8008bd8 <_puts_r+0x60>

08008c20 <puts>:
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <puts+0xc>)
 8008c22:	4601      	mov	r1, r0
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	f7ff bfa7 	b.w	8008b78 <_puts_r>
 8008c2a:	bf00      	nop
 8008c2c:	20000098 	.word	0x20000098

08008c30 <__sread>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	460c      	mov	r4, r1
 8008c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c38:	f000 f90c 	bl	8008e54 <_read_r>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	bfab      	itete	ge
 8008c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c42:	89a3      	ldrhlt	r3, [r4, #12]
 8008c44:	181b      	addge	r3, r3, r0
 8008c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c4a:	bfac      	ite	ge
 8008c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c4e:	81a3      	strhlt	r3, [r4, #12]
 8008c50:	bd10      	pop	{r4, pc}

08008c52 <__swrite>:
 8008c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c56:	461f      	mov	r7, r3
 8008c58:	898b      	ldrh	r3, [r1, #12]
 8008c5a:	05db      	lsls	r3, r3, #23
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	4616      	mov	r6, r2
 8008c62:	d505      	bpl.n	8008c70 <__swrite+0x1e>
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f000 f8e0 	bl	8008e30 <_lseek_r>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	f000 b8f7 	b.w	8008e78 <_write_r>

08008c8a <__sseek>:
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c92:	f000 f8cd 	bl	8008e30 <_lseek_r>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	bf15      	itete	ne
 8008c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ca6:	81a3      	strheq	r3, [r4, #12]
 8008ca8:	bf18      	it	ne
 8008caa:	81a3      	strhne	r3, [r4, #12]
 8008cac:	bd10      	pop	{r4, pc}

08008cae <__sclose>:
 8008cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb2:	f000 b8ad 	b.w	8008e10 <_close_r>

08008cb6 <__swbuf_r>:
 8008cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb8:	460e      	mov	r6, r1
 8008cba:	4614      	mov	r4, r2
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	b118      	cbz	r0, 8008cc8 <__swbuf_r+0x12>
 8008cc0:	6a03      	ldr	r3, [r0, #32]
 8008cc2:	b90b      	cbnz	r3, 8008cc8 <__swbuf_r+0x12>
 8008cc4:	f7ff ff10 	bl	8008ae8 <__sinit>
 8008cc8:	69a3      	ldr	r3, [r4, #24]
 8008cca:	60a3      	str	r3, [r4, #8]
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	071a      	lsls	r2, r3, #28
 8008cd0:	d525      	bpl.n	8008d1e <__swbuf_r+0x68>
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	b31b      	cbz	r3, 8008d1e <__swbuf_r+0x68>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	1a98      	subs	r0, r3, r2
 8008cdc:	6963      	ldr	r3, [r4, #20]
 8008cde:	b2f6      	uxtb	r6, r6
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	4637      	mov	r7, r6
 8008ce4:	dc04      	bgt.n	8008cf0 <__swbuf_r+0x3a>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 fd63 	bl	80097b4 <_fflush_r>
 8008cee:	b9e0      	cbnz	r0, 8008d2a <__swbuf_r+0x74>
 8008cf0:	68a3      	ldr	r3, [r4, #8]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	701e      	strb	r6, [r3, #0]
 8008cfe:	6962      	ldr	r2, [r4, #20]
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d004      	beq.n	8008d10 <__swbuf_r+0x5a>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	07db      	lsls	r3, r3, #31
 8008d0a:	d506      	bpl.n	8008d1a <__swbuf_r+0x64>
 8008d0c:	2e0a      	cmp	r6, #10
 8008d0e:	d104      	bne.n	8008d1a <__swbuf_r+0x64>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 fd4e 	bl	80097b4 <_fflush_r>
 8008d18:	b938      	cbnz	r0, 8008d2a <__swbuf_r+0x74>
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 f805 	bl	8008d30 <__swsetup_r>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0d5      	beq.n	8008cd6 <__swbuf_r+0x20>
 8008d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d2e:	e7f4      	b.n	8008d1a <__swbuf_r+0x64>

08008d30 <__swsetup_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4b2a      	ldr	r3, [pc, #168]	; (8008ddc <__swsetup_r+0xac>)
 8008d34:	4605      	mov	r5, r0
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	460c      	mov	r4, r1
 8008d3a:	b118      	cbz	r0, 8008d44 <__swsetup_r+0x14>
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	b90b      	cbnz	r3, 8008d44 <__swsetup_r+0x14>
 8008d40:	f7ff fed2 	bl	8008ae8 <__sinit>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d4a:	0718      	lsls	r0, r3, #28
 8008d4c:	d422      	bmi.n	8008d94 <__swsetup_r+0x64>
 8008d4e:	06d9      	lsls	r1, r3, #27
 8008d50:	d407      	bmi.n	8008d62 <__swsetup_r+0x32>
 8008d52:	2309      	movs	r3, #9
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	e034      	b.n	8008dcc <__swsetup_r+0x9c>
 8008d62:	0758      	lsls	r0, r3, #29
 8008d64:	d512      	bpl.n	8008d8c <__swsetup_r+0x5c>
 8008d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d68:	b141      	cbz	r1, 8008d7c <__swsetup_r+0x4c>
 8008d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	d002      	beq.n	8008d78 <__swsetup_r+0x48>
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 f8cc 	bl	8008f10 <_free_r>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	2300      	movs	r3, #0
 8008d86:	6063      	str	r3, [r4, #4]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f043 0308 	orr.w	r3, r3, #8
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	b94b      	cbnz	r3, 8008dac <__swsetup_r+0x7c>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da2:	d003      	beq.n	8008dac <__swsetup_r+0x7c>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 fd52 	bl	8009850 <__smakebuf_r>
 8008dac:	89a0      	ldrh	r0, [r4, #12]
 8008dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008db2:	f010 0301 	ands.w	r3, r0, #1
 8008db6:	d00a      	beq.n	8008dce <__swsetup_r+0x9e>
 8008db8:	2300      	movs	r3, #0
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6963      	ldr	r3, [r4, #20]
 8008dbe:	425b      	negs	r3, r3
 8008dc0:	61a3      	str	r3, [r4, #24]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b943      	cbnz	r3, 8008dd8 <__swsetup_r+0xa8>
 8008dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008dca:	d1c4      	bne.n	8008d56 <__swsetup_r+0x26>
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
 8008dce:	0781      	lsls	r1, r0, #30
 8008dd0:	bf58      	it	pl
 8008dd2:	6963      	ldrpl	r3, [r4, #20]
 8008dd4:	60a3      	str	r3, [r4, #8]
 8008dd6:	e7f4      	b.n	8008dc2 <__swsetup_r+0x92>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7f7      	b.n	8008dcc <__swsetup_r+0x9c>
 8008ddc:	20000098 	.word	0x20000098

08008de0 <memcmp>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	3901      	subs	r1, #1
 8008de4:	4402      	add	r2, r0
 8008de6:	4290      	cmp	r0, r2
 8008de8:	d101      	bne.n	8008dee <memcmp+0xe>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e005      	b.n	8008dfa <memcmp+0x1a>
 8008dee:	7803      	ldrb	r3, [r0, #0]
 8008df0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d001      	beq.n	8008dfc <memcmp+0x1c>
 8008df8:	1b18      	subs	r0, r3, r4
 8008dfa:	bd10      	pop	{r4, pc}
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	e7f2      	b.n	8008de6 <memcmp+0x6>

08008e00 <memset>:
 8008e00:	4402      	add	r2, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <_close_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d06      	ldr	r5, [pc, #24]	; (8008e2c <_close_r+0x1c>)
 8008e14:	2300      	movs	r3, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7f9 fb35 	bl	800248a <_close>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_close_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_close_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000a28 	.word	0x20000a28

08008e30 <_lseek_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d07      	ldr	r5, [pc, #28]	; (8008e50 <_lseek_r+0x20>)
 8008e34:	4604      	mov	r4, r0
 8008e36:	4608      	mov	r0, r1
 8008e38:	4611      	mov	r1, r2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f7f9 fb4a 	bl	80024d8 <_lseek>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_lseek_r+0x1e>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_lseek_r+0x1e>
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	20000a28 	.word	0x20000a28

08008e54 <_read_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	; (8008e74 <_read_r+0x20>)
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	2200      	movs	r2, #0
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f7f9 fad8 	bl	8002418 <_read>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_read_r+0x1e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_read_r+0x1e>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20000a28 	.word	0x20000a28

08008e78 <_write_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	; (8008e98 <_write_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f9 fae3 	bl	8002452 <_write>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_write_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_write_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20000a28 	.word	0x20000a28

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000098 	.word	0x20000098

08008ea8 <__libc_init_array>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	4d0d      	ldr	r5, [pc, #52]	; (8008ee0 <__libc_init_array+0x38>)
 8008eac:	4c0d      	ldr	r4, [pc, #52]	; (8008ee4 <__libc_init_array+0x3c>)
 8008eae:	1b64      	subs	r4, r4, r5
 8008eb0:	10a4      	asrs	r4, r4, #2
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	42a6      	cmp	r6, r4
 8008eb6:	d109      	bne.n	8008ecc <__libc_init_array+0x24>
 8008eb8:	4d0b      	ldr	r5, [pc, #44]	; (8008ee8 <__libc_init_array+0x40>)
 8008eba:	4c0c      	ldr	r4, [pc, #48]	; (8008eec <__libc_init_array+0x44>)
 8008ebc:	f000 fd36 	bl	800992c <_init>
 8008ec0:	1b64      	subs	r4, r4, r5
 8008ec2:	10a4      	asrs	r4, r4, #2
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	42a6      	cmp	r6, r4
 8008ec8:	d105      	bne.n	8008ed6 <__libc_init_array+0x2e>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed0:	4798      	blx	r3
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	e7ee      	b.n	8008eb4 <__libc_init_array+0xc>
 8008ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eda:	4798      	blx	r3
 8008edc:	3601      	adds	r6, #1
 8008ede:	e7f2      	b.n	8008ec6 <__libc_init_array+0x1e>
 8008ee0:	0800a220 	.word	0x0800a220
 8008ee4:	0800a220 	.word	0x0800a220
 8008ee8:	0800a220 	.word	0x0800a220
 8008eec:	0800a224 	.word	0x0800a224

08008ef0 <__retarget_lock_acquire_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <__retarget_lock_release_recursive>:
 8008ef2:	4770      	bx	lr

08008ef4 <memcpy>:
 8008ef4:	440a      	add	r2, r1
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008efc:	d100      	bne.n	8008f00 <memcpy+0xc>
 8008efe:	4770      	bx	lr
 8008f00:	b510      	push	{r4, lr}
 8008f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	d1f9      	bne.n	8008f02 <memcpy+0xe>
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <_free_r>:
 8008f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f12:	2900      	cmp	r1, #0
 8008f14:	d044      	beq.n	8008fa0 <_free_r+0x90>
 8008f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1a:	9001      	str	r0, [sp, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f22:	bfb8      	it	lt
 8008f24:	18e4      	addlt	r4, r4, r3
 8008f26:	f000 f8df 	bl	80090e8 <__malloc_lock>
 8008f2a:	4a1e      	ldr	r2, [pc, #120]	; (8008fa4 <_free_r+0x94>)
 8008f2c:	9801      	ldr	r0, [sp, #4]
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	b933      	cbnz	r3, 8008f40 <_free_r+0x30>
 8008f32:	6063      	str	r3, [r4, #4]
 8008f34:	6014      	str	r4, [r2, #0]
 8008f36:	b003      	add	sp, #12
 8008f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f3c:	f000 b8da 	b.w	80090f4 <__malloc_unlock>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d908      	bls.n	8008f56 <_free_r+0x46>
 8008f44:	6825      	ldr	r5, [r4, #0]
 8008f46:	1961      	adds	r1, r4, r5
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	bf01      	itttt	eq
 8008f4c:	6819      	ldreq	r1, [r3, #0]
 8008f4e:	685b      	ldreq	r3, [r3, #4]
 8008f50:	1949      	addeq	r1, r1, r5
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	e7ed      	b.n	8008f32 <_free_r+0x22>
 8008f56:	461a      	mov	r2, r3
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	b10b      	cbz	r3, 8008f60 <_free_r+0x50>
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d9fa      	bls.n	8008f56 <_free_r+0x46>
 8008f60:	6811      	ldr	r1, [r2, #0]
 8008f62:	1855      	adds	r5, r2, r1
 8008f64:	42a5      	cmp	r5, r4
 8008f66:	d10b      	bne.n	8008f80 <_free_r+0x70>
 8008f68:	6824      	ldr	r4, [r4, #0]
 8008f6a:	4421      	add	r1, r4
 8008f6c:	1854      	adds	r4, r2, r1
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	6011      	str	r1, [r2, #0]
 8008f72:	d1e0      	bne.n	8008f36 <_free_r+0x26>
 8008f74:	681c      	ldr	r4, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	6053      	str	r3, [r2, #4]
 8008f7a:	440c      	add	r4, r1
 8008f7c:	6014      	str	r4, [r2, #0]
 8008f7e:	e7da      	b.n	8008f36 <_free_r+0x26>
 8008f80:	d902      	bls.n	8008f88 <_free_r+0x78>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	e7d6      	b.n	8008f36 <_free_r+0x26>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	428b      	cmp	r3, r1
 8008f8e:	bf04      	itt	eq
 8008f90:	6819      	ldreq	r1, [r3, #0]
 8008f92:	685b      	ldreq	r3, [r3, #4]
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	bf04      	itt	eq
 8008f98:	1949      	addeq	r1, r1, r5
 8008f9a:	6021      	streq	r1, [r4, #0]
 8008f9c:	6054      	str	r4, [r2, #4]
 8008f9e:	e7ca      	b.n	8008f36 <_free_r+0x26>
 8008fa0:	b003      	add	sp, #12
 8008fa2:	bd30      	pop	{r4, r5, pc}
 8008fa4:	20000a30 	.word	0x20000a30

08008fa8 <sbrk_aligned>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4e0e      	ldr	r6, [pc, #56]	; (8008fe4 <sbrk_aligned+0x3c>)
 8008fac:	460c      	mov	r4, r1
 8008fae:	6831      	ldr	r1, [r6, #0]
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	b911      	cbnz	r1, 8008fba <sbrk_aligned+0x12>
 8008fb4:	f000 fcaa 	bl	800990c <_sbrk_r>
 8008fb8:	6030      	str	r0, [r6, #0]
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f000 fca5 	bl	800990c <_sbrk_r>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	d00a      	beq.n	8008fdc <sbrk_aligned+0x34>
 8008fc6:	1cc4      	adds	r4, r0, #3
 8008fc8:	f024 0403 	bic.w	r4, r4, #3
 8008fcc:	42a0      	cmp	r0, r4
 8008fce:	d007      	beq.n	8008fe0 <sbrk_aligned+0x38>
 8008fd0:	1a21      	subs	r1, r4, r0
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 fc9a 	bl	800990c <_sbrk_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d101      	bne.n	8008fe0 <sbrk_aligned+0x38>
 8008fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	20000a34 	.word	0x20000a34

08008fe8 <_malloc_r>:
 8008fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fec:	1ccd      	adds	r5, r1, #3
 8008fee:	f025 0503 	bic.w	r5, r5, #3
 8008ff2:	3508      	adds	r5, #8
 8008ff4:	2d0c      	cmp	r5, #12
 8008ff6:	bf38      	it	cc
 8008ff8:	250c      	movcc	r5, #12
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	db01      	blt.n	8009004 <_malloc_r+0x1c>
 8009000:	42a9      	cmp	r1, r5
 8009002:	d905      	bls.n	8009010 <_malloc_r+0x28>
 8009004:	230c      	movs	r3, #12
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	2600      	movs	r6, #0
 800900a:	4630      	mov	r0, r6
 800900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090e4 <_malloc_r+0xfc>
 8009014:	f000 f868 	bl	80090e8 <__malloc_lock>
 8009018:	f8d8 3000 	ldr.w	r3, [r8]
 800901c:	461c      	mov	r4, r3
 800901e:	bb5c      	cbnz	r4, 8009078 <_malloc_r+0x90>
 8009020:	4629      	mov	r1, r5
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff ffc0 	bl	8008fa8 <sbrk_aligned>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	4604      	mov	r4, r0
 800902c:	d155      	bne.n	80090da <_malloc_r+0xf2>
 800902e:	f8d8 4000 	ldr.w	r4, [r8]
 8009032:	4626      	mov	r6, r4
 8009034:	2e00      	cmp	r6, #0
 8009036:	d145      	bne.n	80090c4 <_malloc_r+0xdc>
 8009038:	2c00      	cmp	r4, #0
 800903a:	d048      	beq.n	80090ce <_malloc_r+0xe6>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	4631      	mov	r1, r6
 8009040:	4638      	mov	r0, r7
 8009042:	eb04 0903 	add.w	r9, r4, r3
 8009046:	f000 fc61 	bl	800990c <_sbrk_r>
 800904a:	4581      	cmp	r9, r0
 800904c:	d13f      	bne.n	80090ce <_malloc_r+0xe6>
 800904e:	6821      	ldr	r1, [r4, #0]
 8009050:	1a6d      	subs	r5, r5, r1
 8009052:	4629      	mov	r1, r5
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa7 	bl	8008fa8 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d037      	beq.n	80090ce <_malloc_r+0xe6>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	f8d8 3000 	ldr.w	r3, [r8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d038      	beq.n	80090de <_malloc_r+0xf6>
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	42a2      	cmp	r2, r4
 8009070:	d12b      	bne.n	80090ca <_malloc_r+0xe2>
 8009072:	2200      	movs	r2, #0
 8009074:	605a      	str	r2, [r3, #4]
 8009076:	e00f      	b.n	8009098 <_malloc_r+0xb0>
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	1b52      	subs	r2, r2, r5
 800907c:	d41f      	bmi.n	80090be <_malloc_r+0xd6>
 800907e:	2a0b      	cmp	r2, #11
 8009080:	d917      	bls.n	80090b2 <_malloc_r+0xca>
 8009082:	1961      	adds	r1, r4, r5
 8009084:	42a3      	cmp	r3, r4
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	6059      	strne	r1, [r3, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	bf08      	it	eq
 8009090:	f8c8 1000 	streq.w	r1, [r8]
 8009094:	5162      	str	r2, [r4, r5]
 8009096:	604b      	str	r3, [r1, #4]
 8009098:	4638      	mov	r0, r7
 800909a:	f104 060b 	add.w	r6, r4, #11
 800909e:	f000 f829 	bl	80090f4 <__malloc_unlock>
 80090a2:	f026 0607 	bic.w	r6, r6, #7
 80090a6:	1d23      	adds	r3, r4, #4
 80090a8:	1af2      	subs	r2, r6, r3
 80090aa:	d0ae      	beq.n	800900a <_malloc_r+0x22>
 80090ac:	1b9b      	subs	r3, r3, r6
 80090ae:	50a3      	str	r3, [r4, r2]
 80090b0:	e7ab      	b.n	800900a <_malloc_r+0x22>
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	6862      	ldr	r2, [r4, #4]
 80090b6:	d1dd      	bne.n	8009074 <_malloc_r+0x8c>
 80090b8:	f8c8 2000 	str.w	r2, [r8]
 80090bc:	e7ec      	b.n	8009098 <_malloc_r+0xb0>
 80090be:	4623      	mov	r3, r4
 80090c0:	6864      	ldr	r4, [r4, #4]
 80090c2:	e7ac      	b.n	800901e <_malloc_r+0x36>
 80090c4:	4634      	mov	r4, r6
 80090c6:	6876      	ldr	r6, [r6, #4]
 80090c8:	e7b4      	b.n	8009034 <_malloc_r+0x4c>
 80090ca:	4613      	mov	r3, r2
 80090cc:	e7cc      	b.n	8009068 <_malloc_r+0x80>
 80090ce:	230c      	movs	r3, #12
 80090d0:	603b      	str	r3, [r7, #0]
 80090d2:	4638      	mov	r0, r7
 80090d4:	f000 f80e 	bl	80090f4 <__malloc_unlock>
 80090d8:	e797      	b.n	800900a <_malloc_r+0x22>
 80090da:	6025      	str	r5, [r4, #0]
 80090dc:	e7dc      	b.n	8009098 <_malloc_r+0xb0>
 80090de:	605b      	str	r3, [r3, #4]
 80090e0:	deff      	udf	#255	; 0xff
 80090e2:	bf00      	nop
 80090e4:	20000a30 	.word	0x20000a30

080090e8 <__malloc_lock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__malloc_lock+0x8>)
 80090ea:	f7ff bf01 	b.w	8008ef0 <__retarget_lock_acquire_recursive>
 80090ee:	bf00      	nop
 80090f0:	20000a2c 	.word	0x20000a2c

080090f4 <__malloc_unlock>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__malloc_unlock+0x8>)
 80090f6:	f7ff befc 	b.w	8008ef2 <__retarget_lock_release_recursive>
 80090fa:	bf00      	nop
 80090fc:	20000a2c 	.word	0x20000a2c

08009100 <__sfputc_r>:
 8009100:	6893      	ldr	r3, [r2, #8]
 8009102:	3b01      	subs	r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	b410      	push	{r4}
 8009108:	6093      	str	r3, [r2, #8]
 800910a:	da08      	bge.n	800911e <__sfputc_r+0x1e>
 800910c:	6994      	ldr	r4, [r2, #24]
 800910e:	42a3      	cmp	r3, r4
 8009110:	db01      	blt.n	8009116 <__sfputc_r+0x16>
 8009112:	290a      	cmp	r1, #10
 8009114:	d103      	bne.n	800911e <__sfputc_r+0x1e>
 8009116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800911a:	f7ff bdcc 	b.w	8008cb6 <__swbuf_r>
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	1c58      	adds	r0, r3, #1
 8009122:	6010      	str	r0, [r2, #0]
 8009124:	7019      	strb	r1, [r3, #0]
 8009126:	4608      	mov	r0, r1
 8009128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912c:	4770      	bx	lr

0800912e <__sfputs_r>:
 800912e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009130:	4606      	mov	r6, r0
 8009132:	460f      	mov	r7, r1
 8009134:	4614      	mov	r4, r2
 8009136:	18d5      	adds	r5, r2, r3
 8009138:	42ac      	cmp	r4, r5
 800913a:	d101      	bne.n	8009140 <__sfputs_r+0x12>
 800913c:	2000      	movs	r0, #0
 800913e:	e007      	b.n	8009150 <__sfputs_r+0x22>
 8009140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009144:	463a      	mov	r2, r7
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ffda 	bl	8009100 <__sfputc_r>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d1f3      	bne.n	8009138 <__sfputs_r+0xa>
 8009150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009154 <_vfiprintf_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	460d      	mov	r5, r1
 800915a:	b09d      	sub	sp, #116	; 0x74
 800915c:	4614      	mov	r4, r2
 800915e:	4698      	mov	r8, r3
 8009160:	4606      	mov	r6, r0
 8009162:	b118      	cbz	r0, 800916c <_vfiprintf_r+0x18>
 8009164:	6a03      	ldr	r3, [r0, #32]
 8009166:	b90b      	cbnz	r3, 800916c <_vfiprintf_r+0x18>
 8009168:	f7ff fcbe 	bl	8008ae8 <__sinit>
 800916c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d405      	bmi.n	800917e <_vfiprintf_r+0x2a>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d402      	bmi.n	800917e <_vfiprintf_r+0x2a>
 8009178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917a:	f7ff feb9 	bl	8008ef0 <__retarget_lock_acquire_recursive>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	071b      	lsls	r3, r3, #28
 8009182:	d501      	bpl.n	8009188 <_vfiprintf_r+0x34>
 8009184:	692b      	ldr	r3, [r5, #16]
 8009186:	b99b      	cbnz	r3, 80091b0 <_vfiprintf_r+0x5c>
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff fdd0 	bl	8008d30 <__swsetup_r>
 8009190:	b170      	cbz	r0, 80091b0 <_vfiprintf_r+0x5c>
 8009192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009194:	07dc      	lsls	r4, r3, #31
 8009196:	d504      	bpl.n	80091a2 <_vfiprintf_r+0x4e>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b01d      	add	sp, #116	; 0x74
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	0598      	lsls	r0, r3, #22
 80091a6:	d4f7      	bmi.n	8009198 <_vfiprintf_r+0x44>
 80091a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091aa:	f7ff fea2 	bl	8008ef2 <__retarget_lock_release_recursive>
 80091ae:	e7f3      	b.n	8009198 <_vfiprintf_r+0x44>
 80091b0:	2300      	movs	r3, #0
 80091b2:	9309      	str	r3, [sp, #36]	; 0x24
 80091b4:	2320      	movs	r3, #32
 80091b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80091be:	2330      	movs	r3, #48	; 0x30
 80091c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009374 <_vfiprintf_r+0x220>
 80091c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c8:	f04f 0901 	mov.w	r9, #1
 80091cc:	4623      	mov	r3, r4
 80091ce:	469a      	mov	sl, r3
 80091d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d4:	b10a      	cbz	r2, 80091da <_vfiprintf_r+0x86>
 80091d6:	2a25      	cmp	r2, #37	; 0x25
 80091d8:	d1f9      	bne.n	80091ce <_vfiprintf_r+0x7a>
 80091da:	ebba 0b04 	subs.w	fp, sl, r4
 80091de:	d00b      	beq.n	80091f8 <_vfiprintf_r+0xa4>
 80091e0:	465b      	mov	r3, fp
 80091e2:	4622      	mov	r2, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ffa1 	bl	800912e <__sfputs_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	f000 80a9 	beq.w	8009344 <_vfiprintf_r+0x1f0>
 80091f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f4:	445a      	add	r2, fp
 80091f6:	9209      	str	r2, [sp, #36]	; 0x24
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80a1 	beq.w	8009344 <_vfiprintf_r+0x1f0>
 8009202:	2300      	movs	r3, #0
 8009204:	f04f 32ff 	mov.w	r2, #4294967295
 8009208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920c:	f10a 0a01 	add.w	sl, sl, #1
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009218:	931a      	str	r3, [sp, #104]	; 0x68
 800921a:	4654      	mov	r4, sl
 800921c:	2205      	movs	r2, #5
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	4854      	ldr	r0, [pc, #336]	; (8009374 <_vfiprintf_r+0x220>)
 8009224:	f7f6 ffd4 	bl	80001d0 <memchr>
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	b9d8      	cbnz	r0, 8009264 <_vfiprintf_r+0x110>
 800922c:	06d1      	lsls	r1, r2, #27
 800922e:	bf44      	itt	mi
 8009230:	2320      	movmi	r3, #32
 8009232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009236:	0713      	lsls	r3, r2, #28
 8009238:	bf44      	itt	mi
 800923a:	232b      	movmi	r3, #43	; 0x2b
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009240:	f89a 3000 	ldrb.w	r3, [sl]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d015      	beq.n	8009274 <_vfiprintf_r+0x120>
 8009248:	9a07      	ldr	r2, [sp, #28]
 800924a:	4654      	mov	r4, sl
 800924c:	2000      	movs	r0, #0
 800924e:	f04f 0c0a 	mov.w	ip, #10
 8009252:	4621      	mov	r1, r4
 8009254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009258:	3b30      	subs	r3, #48	; 0x30
 800925a:	2b09      	cmp	r3, #9
 800925c:	d94d      	bls.n	80092fa <_vfiprintf_r+0x1a6>
 800925e:	b1b0      	cbz	r0, 800928e <_vfiprintf_r+0x13a>
 8009260:	9207      	str	r2, [sp, #28]
 8009262:	e014      	b.n	800928e <_vfiprintf_r+0x13a>
 8009264:	eba0 0308 	sub.w	r3, r0, r8
 8009268:	fa09 f303 	lsl.w	r3, r9, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	46a2      	mov	sl, r4
 8009272:	e7d2      	b.n	800921a <_vfiprintf_r+0xc6>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1d19      	adds	r1, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	9103      	str	r1, [sp, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfbb      	ittet	lt
 8009280:	425b      	neglt	r3, r3
 8009282:	f042 0202 	orrlt.w	r2, r2, #2
 8009286:	9307      	strge	r3, [sp, #28]
 8009288:	9307      	strlt	r3, [sp, #28]
 800928a:	bfb8      	it	lt
 800928c:	9204      	strlt	r2, [sp, #16]
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b2e      	cmp	r3, #46	; 0x2e
 8009292:	d10c      	bne.n	80092ae <_vfiprintf_r+0x15a>
 8009294:	7863      	ldrb	r3, [r4, #1]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d134      	bne.n	8009304 <_vfiprintf_r+0x1b0>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	1d1a      	adds	r2, r3, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	9203      	str	r2, [sp, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfb8      	it	lt
 80092a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092aa:	3402      	adds	r4, #2
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009384 <_vfiprintf_r+0x230>
 80092b2:	7821      	ldrb	r1, [r4, #0]
 80092b4:	2203      	movs	r2, #3
 80092b6:	4650      	mov	r0, sl
 80092b8:	f7f6 ff8a 	bl	80001d0 <memchr>
 80092bc:	b138      	cbz	r0, 80092ce <_vfiprintf_r+0x17a>
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	eba0 000a 	sub.w	r0, r0, sl
 80092c4:	2240      	movs	r2, #64	; 0x40
 80092c6:	4082      	lsls	r2, r0
 80092c8:	4313      	orrs	r3, r2
 80092ca:	3401      	adds	r4, #1
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d2:	4829      	ldr	r0, [pc, #164]	; (8009378 <_vfiprintf_r+0x224>)
 80092d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d8:	2206      	movs	r2, #6
 80092da:	f7f6 ff79 	bl	80001d0 <memchr>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d03f      	beq.n	8009362 <_vfiprintf_r+0x20e>
 80092e2:	4b26      	ldr	r3, [pc, #152]	; (800937c <_vfiprintf_r+0x228>)
 80092e4:	bb1b      	cbnz	r3, 800932e <_vfiprintf_r+0x1da>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	3307      	adds	r3, #7
 80092ea:	f023 0307 	bic.w	r3, r3, #7
 80092ee:	3308      	adds	r3, #8
 80092f0:	9303      	str	r3, [sp, #12]
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	443b      	add	r3, r7
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	e768      	b.n	80091cc <_vfiprintf_r+0x78>
 80092fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fe:	460c      	mov	r4, r1
 8009300:	2001      	movs	r0, #1
 8009302:	e7a6      	b.n	8009252 <_vfiprintf_r+0xfe>
 8009304:	2300      	movs	r3, #0
 8009306:	3401      	adds	r4, #1
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	4619      	mov	r1, r3
 800930c:	f04f 0c0a 	mov.w	ip, #10
 8009310:	4620      	mov	r0, r4
 8009312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009316:	3a30      	subs	r2, #48	; 0x30
 8009318:	2a09      	cmp	r2, #9
 800931a:	d903      	bls.n	8009324 <_vfiprintf_r+0x1d0>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0c6      	beq.n	80092ae <_vfiprintf_r+0x15a>
 8009320:	9105      	str	r1, [sp, #20]
 8009322:	e7c4      	b.n	80092ae <_vfiprintf_r+0x15a>
 8009324:	fb0c 2101 	mla	r1, ip, r1, r2
 8009328:	4604      	mov	r4, r0
 800932a:	2301      	movs	r3, #1
 800932c:	e7f0      	b.n	8009310 <_vfiprintf_r+0x1bc>
 800932e:	ab03      	add	r3, sp, #12
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	462a      	mov	r2, r5
 8009334:	4b12      	ldr	r3, [pc, #72]	; (8009380 <_vfiprintf_r+0x22c>)
 8009336:	a904      	add	r1, sp, #16
 8009338:	4630      	mov	r0, r6
 800933a:	f3af 8000 	nop.w
 800933e:	4607      	mov	r7, r0
 8009340:	1c78      	adds	r0, r7, #1
 8009342:	d1d6      	bne.n	80092f2 <_vfiprintf_r+0x19e>
 8009344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	d405      	bmi.n	8009356 <_vfiprintf_r+0x202>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d402      	bmi.n	8009356 <_vfiprintf_r+0x202>
 8009350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009352:	f7ff fdce 	bl	8008ef2 <__retarget_lock_release_recursive>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	065b      	lsls	r3, r3, #25
 800935a:	f53f af1d 	bmi.w	8009198 <_vfiprintf_r+0x44>
 800935e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009360:	e71c      	b.n	800919c <_vfiprintf_r+0x48>
 8009362:	ab03      	add	r3, sp, #12
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	462a      	mov	r2, r5
 8009368:	4b05      	ldr	r3, [pc, #20]	; (8009380 <_vfiprintf_r+0x22c>)
 800936a:	a904      	add	r1, sp, #16
 800936c:	4630      	mov	r0, r6
 800936e:	f000 f879 	bl	8009464 <_printf_i>
 8009372:	e7e4      	b.n	800933e <_vfiprintf_r+0x1ea>
 8009374:	0800a1e4 	.word	0x0800a1e4
 8009378:	0800a1ee 	.word	0x0800a1ee
 800937c:	00000000 	.word	0x00000000
 8009380:	0800912f 	.word	0x0800912f
 8009384:	0800a1ea 	.word	0x0800a1ea

08009388 <_printf_common>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	4616      	mov	r6, r2
 800938e:	4699      	mov	r9, r3
 8009390:	688a      	ldr	r2, [r1, #8]
 8009392:	690b      	ldr	r3, [r1, #16]
 8009394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009398:	4293      	cmp	r3, r2
 800939a:	bfb8      	it	lt
 800939c:	4613      	movlt	r3, r2
 800939e:	6033      	str	r3, [r6, #0]
 80093a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a4:	4607      	mov	r7, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b10a      	cbz	r2, 80093ae <_printf_common+0x26>
 80093aa:	3301      	adds	r3, #1
 80093ac:	6033      	str	r3, [r6, #0]
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	0699      	lsls	r1, r3, #26
 80093b2:	bf42      	ittt	mi
 80093b4:	6833      	ldrmi	r3, [r6, #0]
 80093b6:	3302      	addmi	r3, #2
 80093b8:	6033      	strmi	r3, [r6, #0]
 80093ba:	6825      	ldr	r5, [r4, #0]
 80093bc:	f015 0506 	ands.w	r5, r5, #6
 80093c0:	d106      	bne.n	80093d0 <_printf_common+0x48>
 80093c2:	f104 0a19 	add.w	sl, r4, #25
 80093c6:	68e3      	ldr	r3, [r4, #12]
 80093c8:	6832      	ldr	r2, [r6, #0]
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	dc26      	bgt.n	800941e <_printf_common+0x96>
 80093d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d4:	1e13      	subs	r3, r2, #0
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	bf18      	it	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	0692      	lsls	r2, r2, #26
 80093de:	d42b      	bmi.n	8009438 <_printf_common+0xb0>
 80093e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e4:	4649      	mov	r1, r9
 80093e6:	4638      	mov	r0, r7
 80093e8:	47c0      	blx	r8
 80093ea:	3001      	adds	r0, #1
 80093ec:	d01e      	beq.n	800942c <_printf_common+0xa4>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6922      	ldr	r2, [r4, #16]
 80093f2:	f003 0306 	and.w	r3, r3, #6
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	bf02      	ittt	eq
 80093fa:	68e5      	ldreq	r5, [r4, #12]
 80093fc:	6833      	ldreq	r3, [r6, #0]
 80093fe:	1aed      	subeq	r5, r5, r3
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	bf0c      	ite	eq
 8009404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009408:	2500      	movne	r5, #0
 800940a:	4293      	cmp	r3, r2
 800940c:	bfc4      	itt	gt
 800940e:	1a9b      	subgt	r3, r3, r2
 8009410:	18ed      	addgt	r5, r5, r3
 8009412:	2600      	movs	r6, #0
 8009414:	341a      	adds	r4, #26
 8009416:	42b5      	cmp	r5, r6
 8009418:	d11a      	bne.n	8009450 <_printf_common+0xc8>
 800941a:	2000      	movs	r0, #0
 800941c:	e008      	b.n	8009430 <_printf_common+0xa8>
 800941e:	2301      	movs	r3, #1
 8009420:	4652      	mov	r2, sl
 8009422:	4649      	mov	r1, r9
 8009424:	4638      	mov	r0, r7
 8009426:	47c0      	blx	r8
 8009428:	3001      	adds	r0, #1
 800942a:	d103      	bne.n	8009434 <_printf_common+0xac>
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009434:	3501      	adds	r5, #1
 8009436:	e7c6      	b.n	80093c6 <_printf_common+0x3e>
 8009438:	18e1      	adds	r1, r4, r3
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	2030      	movs	r0, #48	; 0x30
 800943e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009442:	4422      	add	r2, r4
 8009444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800944c:	3302      	adds	r3, #2
 800944e:	e7c7      	b.n	80093e0 <_printf_common+0x58>
 8009450:	2301      	movs	r3, #1
 8009452:	4622      	mov	r2, r4
 8009454:	4649      	mov	r1, r9
 8009456:	4638      	mov	r0, r7
 8009458:	47c0      	blx	r8
 800945a:	3001      	adds	r0, #1
 800945c:	d0e6      	beq.n	800942c <_printf_common+0xa4>
 800945e:	3601      	adds	r6, #1
 8009460:	e7d9      	b.n	8009416 <_printf_common+0x8e>
	...

08009464 <_printf_i>:
 8009464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	7e0f      	ldrb	r7, [r1, #24]
 800946a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800946c:	2f78      	cmp	r7, #120	; 0x78
 800946e:	4691      	mov	r9, r2
 8009470:	4680      	mov	r8, r0
 8009472:	460c      	mov	r4, r1
 8009474:	469a      	mov	sl, r3
 8009476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800947a:	d807      	bhi.n	800948c <_printf_i+0x28>
 800947c:	2f62      	cmp	r7, #98	; 0x62
 800947e:	d80a      	bhi.n	8009496 <_printf_i+0x32>
 8009480:	2f00      	cmp	r7, #0
 8009482:	f000 80d4 	beq.w	800962e <_printf_i+0x1ca>
 8009486:	2f58      	cmp	r7, #88	; 0x58
 8009488:	f000 80c0 	beq.w	800960c <_printf_i+0x1a8>
 800948c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009494:	e03a      	b.n	800950c <_printf_i+0xa8>
 8009496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800949a:	2b15      	cmp	r3, #21
 800949c:	d8f6      	bhi.n	800948c <_printf_i+0x28>
 800949e:	a101      	add	r1, pc, #4	; (adr r1, 80094a4 <_printf_i+0x40>)
 80094a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a4:	080094fd 	.word	0x080094fd
 80094a8:	08009511 	.word	0x08009511
 80094ac:	0800948d 	.word	0x0800948d
 80094b0:	0800948d 	.word	0x0800948d
 80094b4:	0800948d 	.word	0x0800948d
 80094b8:	0800948d 	.word	0x0800948d
 80094bc:	08009511 	.word	0x08009511
 80094c0:	0800948d 	.word	0x0800948d
 80094c4:	0800948d 	.word	0x0800948d
 80094c8:	0800948d 	.word	0x0800948d
 80094cc:	0800948d 	.word	0x0800948d
 80094d0:	08009615 	.word	0x08009615
 80094d4:	0800953d 	.word	0x0800953d
 80094d8:	080095cf 	.word	0x080095cf
 80094dc:	0800948d 	.word	0x0800948d
 80094e0:	0800948d 	.word	0x0800948d
 80094e4:	08009637 	.word	0x08009637
 80094e8:	0800948d 	.word	0x0800948d
 80094ec:	0800953d 	.word	0x0800953d
 80094f0:	0800948d 	.word	0x0800948d
 80094f4:	0800948d 	.word	0x0800948d
 80094f8:	080095d7 	.word	0x080095d7
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	1d1a      	adds	r2, r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	602a      	str	r2, [r5, #0]
 8009504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800950c:	2301      	movs	r3, #1
 800950e:	e09f      	b.n	8009650 <_printf_i+0x1ec>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	0607      	lsls	r7, r0, #24
 8009516:	f103 0104 	add.w	r1, r3, #4
 800951a:	6029      	str	r1, [r5, #0]
 800951c:	d501      	bpl.n	8009522 <_printf_i+0xbe>
 800951e:	681e      	ldr	r6, [r3, #0]
 8009520:	e003      	b.n	800952a <_printf_i+0xc6>
 8009522:	0646      	lsls	r6, r0, #25
 8009524:	d5fb      	bpl.n	800951e <_printf_i+0xba>
 8009526:	f9b3 6000 	ldrsh.w	r6, [r3]
 800952a:	2e00      	cmp	r6, #0
 800952c:	da03      	bge.n	8009536 <_printf_i+0xd2>
 800952e:	232d      	movs	r3, #45	; 0x2d
 8009530:	4276      	negs	r6, r6
 8009532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009536:	485a      	ldr	r0, [pc, #360]	; (80096a0 <_printf_i+0x23c>)
 8009538:	230a      	movs	r3, #10
 800953a:	e012      	b.n	8009562 <_printf_i+0xfe>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	1d19      	adds	r1, r3, #4
 8009542:	6029      	str	r1, [r5, #0]
 8009544:	0605      	lsls	r5, r0, #24
 8009546:	d501      	bpl.n	800954c <_printf_i+0xe8>
 8009548:	681e      	ldr	r6, [r3, #0]
 800954a:	e002      	b.n	8009552 <_printf_i+0xee>
 800954c:	0641      	lsls	r1, r0, #25
 800954e:	d5fb      	bpl.n	8009548 <_printf_i+0xe4>
 8009550:	881e      	ldrh	r6, [r3, #0]
 8009552:	4853      	ldr	r0, [pc, #332]	; (80096a0 <_printf_i+0x23c>)
 8009554:	2f6f      	cmp	r7, #111	; 0x6f
 8009556:	bf0c      	ite	eq
 8009558:	2308      	moveq	r3, #8
 800955a:	230a      	movne	r3, #10
 800955c:	2100      	movs	r1, #0
 800955e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009562:	6865      	ldr	r5, [r4, #4]
 8009564:	60a5      	str	r5, [r4, #8]
 8009566:	2d00      	cmp	r5, #0
 8009568:	bfa2      	ittt	ge
 800956a:	6821      	ldrge	r1, [r4, #0]
 800956c:	f021 0104 	bicge.w	r1, r1, #4
 8009570:	6021      	strge	r1, [r4, #0]
 8009572:	b90e      	cbnz	r6, 8009578 <_printf_i+0x114>
 8009574:	2d00      	cmp	r5, #0
 8009576:	d04b      	beq.n	8009610 <_printf_i+0x1ac>
 8009578:	4615      	mov	r5, r2
 800957a:	fbb6 f1f3 	udiv	r1, r6, r3
 800957e:	fb03 6711 	mls	r7, r3, r1, r6
 8009582:	5dc7      	ldrb	r7, [r0, r7]
 8009584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009588:	4637      	mov	r7, r6
 800958a:	42bb      	cmp	r3, r7
 800958c:	460e      	mov	r6, r1
 800958e:	d9f4      	bls.n	800957a <_printf_i+0x116>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10b      	bne.n	80095ac <_printf_i+0x148>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07de      	lsls	r6, r3, #31
 8009598:	d508      	bpl.n	80095ac <_printf_i+0x148>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4299      	cmp	r1, r3
 80095a0:	bfde      	ittt	le
 80095a2:	2330      	movle	r3, #48	; 0x30
 80095a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095ac:	1b52      	subs	r2, r2, r5
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	464b      	mov	r3, r9
 80095b6:	aa03      	add	r2, sp, #12
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff fee4 	bl	8009388 <_printf_common>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d14a      	bne.n	800965a <_printf_i+0x1f6>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b004      	add	sp, #16
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	f043 0320 	orr.w	r3, r3, #32
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	4833      	ldr	r0, [pc, #204]	; (80096a4 <_printf_i+0x240>)
 80095d8:	2778      	movs	r7, #120	; 0x78
 80095da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	061f      	lsls	r7, r3, #24
 80095e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095e8:	d402      	bmi.n	80095f0 <_printf_i+0x18c>
 80095ea:	065f      	lsls	r7, r3, #25
 80095ec:	bf48      	it	mi
 80095ee:	b2b6      	uxthmi	r6, r6
 80095f0:	07df      	lsls	r7, r3, #31
 80095f2:	bf48      	it	mi
 80095f4:	f043 0320 	orrmi.w	r3, r3, #32
 80095f8:	6029      	str	r1, [r5, #0]
 80095fa:	bf48      	it	mi
 80095fc:	6023      	strmi	r3, [r4, #0]
 80095fe:	b91e      	cbnz	r6, 8009608 <_printf_i+0x1a4>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	f023 0320 	bic.w	r3, r3, #32
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	2310      	movs	r3, #16
 800960a:	e7a7      	b.n	800955c <_printf_i+0xf8>
 800960c:	4824      	ldr	r0, [pc, #144]	; (80096a0 <_printf_i+0x23c>)
 800960e:	e7e4      	b.n	80095da <_printf_i+0x176>
 8009610:	4615      	mov	r5, r2
 8009612:	e7bd      	b.n	8009590 <_printf_i+0x12c>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	6826      	ldr	r6, [r4, #0]
 8009618:	6961      	ldr	r1, [r4, #20]
 800961a:	1d18      	adds	r0, r3, #4
 800961c:	6028      	str	r0, [r5, #0]
 800961e:	0635      	lsls	r5, r6, #24
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	d501      	bpl.n	8009628 <_printf_i+0x1c4>
 8009624:	6019      	str	r1, [r3, #0]
 8009626:	e002      	b.n	800962e <_printf_i+0x1ca>
 8009628:	0670      	lsls	r0, r6, #25
 800962a:	d5fb      	bpl.n	8009624 <_printf_i+0x1c0>
 800962c:	8019      	strh	r1, [r3, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	4615      	mov	r5, r2
 8009634:	e7bc      	b.n	80095b0 <_printf_i+0x14c>
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	681d      	ldr	r5, [r3, #0]
 800963e:	6862      	ldr	r2, [r4, #4]
 8009640:	2100      	movs	r1, #0
 8009642:	4628      	mov	r0, r5
 8009644:	f7f6 fdc4 	bl	80001d0 <memchr>
 8009648:	b108      	cbz	r0, 800964e <_printf_i+0x1ea>
 800964a:	1b40      	subs	r0, r0, r5
 800964c:	6060      	str	r0, [r4, #4]
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009658:	e7aa      	b.n	80095b0 <_printf_i+0x14c>
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	462a      	mov	r2, r5
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d0ad      	beq.n	80095c4 <_printf_i+0x160>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	079b      	lsls	r3, r3, #30
 800966c:	d413      	bmi.n	8009696 <_printf_i+0x232>
 800966e:	68e0      	ldr	r0, [r4, #12]
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	4298      	cmp	r0, r3
 8009674:	bfb8      	it	lt
 8009676:	4618      	movlt	r0, r3
 8009678:	e7a6      	b.n	80095c8 <_printf_i+0x164>
 800967a:	2301      	movs	r3, #1
 800967c:	4632      	mov	r2, r6
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	47d0      	blx	sl
 8009684:	3001      	adds	r0, #1
 8009686:	d09d      	beq.n	80095c4 <_printf_i+0x160>
 8009688:	3501      	adds	r5, #1
 800968a:	68e3      	ldr	r3, [r4, #12]
 800968c:	9903      	ldr	r1, [sp, #12]
 800968e:	1a5b      	subs	r3, r3, r1
 8009690:	42ab      	cmp	r3, r5
 8009692:	dcf2      	bgt.n	800967a <_printf_i+0x216>
 8009694:	e7eb      	b.n	800966e <_printf_i+0x20a>
 8009696:	2500      	movs	r5, #0
 8009698:	f104 0619 	add.w	r6, r4, #25
 800969c:	e7f5      	b.n	800968a <_printf_i+0x226>
 800969e:	bf00      	nop
 80096a0:	0800a1f5 	.word	0x0800a1f5
 80096a4:	0800a206 	.word	0x0800a206

080096a8 <__sflush_r>:
 80096a8:	898a      	ldrh	r2, [r1, #12]
 80096aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ae:	4605      	mov	r5, r0
 80096b0:	0710      	lsls	r0, r2, #28
 80096b2:	460c      	mov	r4, r1
 80096b4:	d458      	bmi.n	8009768 <__sflush_r+0xc0>
 80096b6:	684b      	ldr	r3, [r1, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dc05      	bgt.n	80096c8 <__sflush_r+0x20>
 80096bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dc02      	bgt.n	80096c8 <__sflush_r+0x20>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ca:	2e00      	cmp	r6, #0
 80096cc:	d0f9      	beq.n	80096c2 <__sflush_r+0x1a>
 80096ce:	2300      	movs	r3, #0
 80096d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096d4:	682f      	ldr	r7, [r5, #0]
 80096d6:	6a21      	ldr	r1, [r4, #32]
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	d032      	beq.n	8009742 <__sflush_r+0x9a>
 80096dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	075a      	lsls	r2, r3, #29
 80096e2:	d505      	bpl.n	80096f0 <__sflush_r+0x48>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	1ac0      	subs	r0, r0, r3
 80096e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096ea:	b10b      	cbz	r3, 80096f0 <__sflush_r+0x48>
 80096ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ee:	1ac0      	subs	r0, r0, r3
 80096f0:	2300      	movs	r3, #0
 80096f2:	4602      	mov	r2, r0
 80096f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096f6:	6a21      	ldr	r1, [r4, #32]
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	d106      	bne.n	8009710 <__sflush_r+0x68>
 8009702:	6829      	ldr	r1, [r5, #0]
 8009704:	291d      	cmp	r1, #29
 8009706:	d82b      	bhi.n	8009760 <__sflush_r+0xb8>
 8009708:	4a29      	ldr	r2, [pc, #164]	; (80097b0 <__sflush_r+0x108>)
 800970a:	410a      	asrs	r2, r1
 800970c:	07d6      	lsls	r6, r2, #31
 800970e:	d427      	bmi.n	8009760 <__sflush_r+0xb8>
 8009710:	2200      	movs	r2, #0
 8009712:	6062      	str	r2, [r4, #4]
 8009714:	04d9      	lsls	r1, r3, #19
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	d504      	bpl.n	8009726 <__sflush_r+0x7e>
 800971c:	1c42      	adds	r2, r0, #1
 800971e:	d101      	bne.n	8009724 <__sflush_r+0x7c>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b903      	cbnz	r3, 8009726 <__sflush_r+0x7e>
 8009724:	6560      	str	r0, [r4, #84]	; 0x54
 8009726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009728:	602f      	str	r7, [r5, #0]
 800972a:	2900      	cmp	r1, #0
 800972c:	d0c9      	beq.n	80096c2 <__sflush_r+0x1a>
 800972e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009732:	4299      	cmp	r1, r3
 8009734:	d002      	beq.n	800973c <__sflush_r+0x94>
 8009736:	4628      	mov	r0, r5
 8009738:	f7ff fbea 	bl	8008f10 <_free_r>
 800973c:	2000      	movs	r0, #0
 800973e:	6360      	str	r0, [r4, #52]	; 0x34
 8009740:	e7c0      	b.n	80096c4 <__sflush_r+0x1c>
 8009742:	2301      	movs	r3, #1
 8009744:	4628      	mov	r0, r5
 8009746:	47b0      	blx	r6
 8009748:	1c41      	adds	r1, r0, #1
 800974a:	d1c8      	bne.n	80096de <__sflush_r+0x36>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0c5      	beq.n	80096de <__sflush_r+0x36>
 8009752:	2b1d      	cmp	r3, #29
 8009754:	d001      	beq.n	800975a <__sflush_r+0xb2>
 8009756:	2b16      	cmp	r3, #22
 8009758:	d101      	bne.n	800975e <__sflush_r+0xb6>
 800975a:	602f      	str	r7, [r5, #0]
 800975c:	e7b1      	b.n	80096c2 <__sflush_r+0x1a>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7ad      	b.n	80096c4 <__sflush_r+0x1c>
 8009768:	690f      	ldr	r7, [r1, #16]
 800976a:	2f00      	cmp	r7, #0
 800976c:	d0a9      	beq.n	80096c2 <__sflush_r+0x1a>
 800976e:	0793      	lsls	r3, r2, #30
 8009770:	680e      	ldr	r6, [r1, #0]
 8009772:	bf08      	it	eq
 8009774:	694b      	ldreq	r3, [r1, #20]
 8009776:	600f      	str	r7, [r1, #0]
 8009778:	bf18      	it	ne
 800977a:	2300      	movne	r3, #0
 800977c:	eba6 0807 	sub.w	r8, r6, r7
 8009780:	608b      	str	r3, [r1, #8]
 8009782:	f1b8 0f00 	cmp.w	r8, #0
 8009786:	dd9c      	ble.n	80096c2 <__sflush_r+0x1a>
 8009788:	6a21      	ldr	r1, [r4, #32]
 800978a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800978c:	4643      	mov	r3, r8
 800978e:	463a      	mov	r2, r7
 8009790:	4628      	mov	r0, r5
 8009792:	47b0      	blx	r6
 8009794:	2800      	cmp	r0, #0
 8009796:	dc06      	bgt.n	80097a6 <__sflush_r+0xfe>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	e78e      	b.n	80096c4 <__sflush_r+0x1c>
 80097a6:	4407      	add	r7, r0
 80097a8:	eba8 0800 	sub.w	r8, r8, r0
 80097ac:	e7e9      	b.n	8009782 <__sflush_r+0xda>
 80097ae:	bf00      	nop
 80097b0:	dfbffffe 	.word	0xdfbffffe

080097b4 <_fflush_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	690b      	ldr	r3, [r1, #16]
 80097b8:	4605      	mov	r5, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	b913      	cbnz	r3, 80097c4 <_fflush_r+0x10>
 80097be:	2500      	movs	r5, #0
 80097c0:	4628      	mov	r0, r5
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	b118      	cbz	r0, 80097ce <_fflush_r+0x1a>
 80097c6:	6a03      	ldr	r3, [r0, #32]
 80097c8:	b90b      	cbnz	r3, 80097ce <_fflush_r+0x1a>
 80097ca:	f7ff f98d 	bl	8008ae8 <__sinit>
 80097ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0f3      	beq.n	80097be <_fflush_r+0xa>
 80097d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d8:	07d0      	lsls	r0, r2, #31
 80097da:	d404      	bmi.n	80097e6 <_fflush_r+0x32>
 80097dc:	0599      	lsls	r1, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_fflush_r+0x32>
 80097e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e2:	f7ff fb85 	bl	8008ef0 <__retarget_lock_acquire_recursive>
 80097e6:	4628      	mov	r0, r5
 80097e8:	4621      	mov	r1, r4
 80097ea:	f7ff ff5d 	bl	80096a8 <__sflush_r>
 80097ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f0:	07da      	lsls	r2, r3, #31
 80097f2:	4605      	mov	r5, r0
 80097f4:	d4e4      	bmi.n	80097c0 <_fflush_r+0xc>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	059b      	lsls	r3, r3, #22
 80097fa:	d4e1      	bmi.n	80097c0 <_fflush_r+0xc>
 80097fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fe:	f7ff fb78 	bl	8008ef2 <__retarget_lock_release_recursive>
 8009802:	e7dd      	b.n	80097c0 <_fflush_r+0xc>

08009804 <__swhatbuf_r>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	460c      	mov	r4, r1
 8009808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980c:	2900      	cmp	r1, #0
 800980e:	b096      	sub	sp, #88	; 0x58
 8009810:	4615      	mov	r5, r2
 8009812:	461e      	mov	r6, r3
 8009814:	da0d      	bge.n	8009832 <__swhatbuf_r+0x2e>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f013 0f80 	tst.w	r3, #128	; 0x80
 800981c:	f04f 0100 	mov.w	r1, #0
 8009820:	bf0c      	ite	eq
 8009822:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009826:	2340      	movne	r3, #64	; 0x40
 8009828:	2000      	movs	r0, #0
 800982a:	6031      	str	r1, [r6, #0]
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	b016      	add	sp, #88	; 0x58
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	466a      	mov	r2, sp
 8009834:	f000 f848 	bl	80098c8 <_fstat_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	dbec      	blt.n	8009816 <__swhatbuf_r+0x12>
 800983c:	9901      	ldr	r1, [sp, #4]
 800983e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009842:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009846:	4259      	negs	r1, r3
 8009848:	4159      	adcs	r1, r3
 800984a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800984e:	e7eb      	b.n	8009828 <__swhatbuf_r+0x24>

08009850 <__smakebuf_r>:
 8009850:	898b      	ldrh	r3, [r1, #12]
 8009852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009854:	079d      	lsls	r5, r3, #30
 8009856:	4606      	mov	r6, r0
 8009858:	460c      	mov	r4, r1
 800985a:	d507      	bpl.n	800986c <__smakebuf_r+0x1c>
 800985c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	2301      	movs	r3, #1
 8009866:	6163      	str	r3, [r4, #20]
 8009868:	b002      	add	sp, #8
 800986a:	bd70      	pop	{r4, r5, r6, pc}
 800986c:	ab01      	add	r3, sp, #4
 800986e:	466a      	mov	r2, sp
 8009870:	f7ff ffc8 	bl	8009804 <__swhatbuf_r>
 8009874:	9900      	ldr	r1, [sp, #0]
 8009876:	4605      	mov	r5, r0
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff fbb5 	bl	8008fe8 <_malloc_r>
 800987e:	b948      	cbnz	r0, 8009894 <__smakebuf_r+0x44>
 8009880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009884:	059a      	lsls	r2, r3, #22
 8009886:	d4ef      	bmi.n	8009868 <__smakebuf_r+0x18>
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	f043 0302 	orr.w	r3, r3, #2
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	e7e3      	b.n	800985c <__smakebuf_r+0xc>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	9b00      	ldr	r3, [sp, #0]
 80098a0:	6163      	str	r3, [r4, #20]
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	6120      	str	r0, [r4, #16]
 80098a6:	b15b      	cbz	r3, 80098c0 <__smakebuf_r+0x70>
 80098a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ac:	4630      	mov	r0, r6
 80098ae:	f000 f81d 	bl	80098ec <_isatty_r>
 80098b2:	b128      	cbz	r0, 80098c0 <__smakebuf_r+0x70>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	f043 0301 	orr.w	r3, r3, #1
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	431d      	orrs	r5, r3
 80098c4:	81a5      	strh	r5, [r4, #12]
 80098c6:	e7cf      	b.n	8009868 <__smakebuf_r+0x18>

080098c8 <_fstat_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	; (80098e8 <_fstat_r+0x20>)
 80098cc:	2300      	movs	r3, #0
 80098ce:	4604      	mov	r4, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	f7f8 fde4 	bl	80024a2 <_fstat>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	d102      	bne.n	80098e4 <_fstat_r+0x1c>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	b103      	cbz	r3, 80098e4 <_fstat_r+0x1c>
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	bd38      	pop	{r3, r4, r5, pc}
 80098e6:	bf00      	nop
 80098e8:	20000a28 	.word	0x20000a28

080098ec <_isatty_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d06      	ldr	r5, [pc, #24]	; (8009908 <_isatty_r+0x1c>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7f8 fde3 	bl	80024c2 <_isatty>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_isatty_r+0x1a>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_isatty_r+0x1a>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	20000a28 	.word	0x20000a28

0800990c <_sbrk_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d06      	ldr	r5, [pc, #24]	; (8009928 <_sbrk_r+0x1c>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	f7f8 fdec 	bl	80024f4 <_sbrk>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_sbrk_r+0x1a>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_sbrk_r+0x1a>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20000a28 	.word	0x20000a28

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
