
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08009788  08009788  00019788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a08c  0800a08c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a094  0800a094  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  20000080  0800a11c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800a11c  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001d9bc  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009b  00000000  00000000  0003daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e4fe  00000000  00000000  0003db4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039c6  00000000  00000000  0005c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001888  00000000  00000000  0005fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb298  00000000  00000000  00061298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001314  00000000  00000000  0015c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2a4  00000000  00000000  0015d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000704c  00000000  00000000  00188ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009770 	.word	0x08009770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009770 	.word	0x08009770

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 ff6a 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fba7 	bl	8008cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 fa52 	bl	8001a46 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	0800a09c 	.word	0x0800a09c
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80005b4:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80005b8:	20000a2c 	.word	0x20000a2c

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <BLUENRG2_vInit>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vInit( void )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    BLUENRG2__vUserInit();
 80005c4:	f000 f826 	bl	8000614 <BLUENRG2__vUserInit>
    hci_init( APP_UserEvtRx, NULL );
 80005c8:	2100      	movs	r1, #0
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <BLUENRG2_vInit+0x34>)
 80005cc:	f007 fe2a 	bl	8008224 <hci_init>
    PRINT_DBG( "BlueNRG-2 BLE Sample Application\r\n" );
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <BLUENRG2_vInit+0x38>)
 80005d2:	f008 fa47 	bl	8008a64 <puts>

    if( BLE_STATUS_SUCCESS != BLUENRG2__u8CentralAppInit() )
 80005d6:	f000 f82b 	bl	8000630 <BLUENRG2__u8CentralAppInit>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <BLUENRG2_vInit+0x28>
    {
        PRINT_DBG( "BLUENRG2__u8CentralAppInit() Failed\r\n" );
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <BLUENRG2_vInit+0x3c>)
 80005e2:	f008 fa3f 	bl	8008a64 <puts>
        while( true )
 80005e6:	e7fe      	b.n	80005e6 <BLUENRG2_vInit+0x26>
            ;
    }

    PRINT_DBG( "BLE Stack Initialized & Device Configured\r\n" );
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <BLUENRG2_vInit+0x40>)
 80005ea:	f008 fa3b 	bl	8008a64 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08001585 	.word	0x08001585
 80005f8:	08009788 	.word	0x08009788
 80005fc:	080097ac 	.word	0x080097ac
 8000600:	080097d4 	.word	0x080097d4

08000604 <BLUENRG2_vProcess>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vProcess( void )
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

    hci_user_evt_proc();
 8000608:	f007 ff86 	bl	8008518 <hci_user_evt_proc>
    BLUENRG2__vUserProcess();
 800060c:	f000 f8e8 	bl	80007e0 <BLUENRG2__vUserProcess>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <BLUENRG2__vUserInit>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserInit( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    BSP_PB_Init( BUTTON_KEY, BUTTON_MODE_GPIO );
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f001 fbcc 	bl	8001db8 <BSP_PB_Init>
    BSP_LED_Init( LED2 );
 8000620:	2000      	movs	r0, #0
 8000622:	f001 fb4d 	bl	8001cc0 <BSP_LED_Init>

    BSP_COM_Init( COM1 );
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fc82 	bl	8001f30 <BSP_COM_Init>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <BLUENRG2__u8CentralAppInit>:
//!
//! \return
//!   Status
//*****************************************************
static uint8_t BLUENRG2__u8CentralAppInit( void )
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af06      	add	r7, sp, #24
    uint8_t  u8Ret;
    uint16_t u16ServiceHandle, u16DevNameCharHandle, u16AppearanceCharHandle;
    uint8_t  au8BdAddr[BLUENRG2_BDADDR_BYTE_NUM];
    uint8_t  u8BaAddrLen;

    const uint8_t cu8NVMConfigDataAddr = 0x80U; // Offset of the static random address stored in NVM
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    hci_reset(); // Sw reset of the BLE chip
 800063c:	f007 fcc0 	bl	8007fc0 <hci_reset>

    HAL_Delay( 2000 ); // BlueNRG device requires 2000ms delay for booting
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f001 ff8e 	bl	8002564 <HAL_Delay>

    u8Ret = BLUENRG2__u8PrintBLEFwInfo();
 8000648:	f000 fb52 	bl	8000cf0 <BLUENRG2__u8PrintBLEFwInfo>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000652:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <BLUENRG2__u8CentralAppInit+0x36>
    {
        PRINT_DBG( "Get Bluetooth Chip Info failed !\r\n" );
 800065a:	4857      	ldr	r0, [pc, #348]	; (80007b8 <BLUENRG2__u8CentralAppInit+0x188>)
 800065c:	f008 fa02 	bl	8008a64 <puts>
        return u8Ret;
 8000660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000664:	e0a3      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_hal_read_config_data( cu8NVMConfigDataAddr, &u8BaAddrLen, au8BdAddr );
 8000666:	f107 0218 	add.w	r2, r7, #24
 800066a:	f107 0117 	add.w	r1, r7, #23
 800066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f8fa 	bl	800686c <aci_hal_read_config_data>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( ( u8Ret != BLE_STATUS_SUCCESS ) || ( 0xC0 != ( au8BdAddr[5U] & 0xC0 ) ) )
 800067e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000682:	2b00      	cmp	r3, #0
 8000684:	d104      	bne.n	8000690 <BLUENRG2__u8CentralAppInit+0x60>
 8000686:	7f7b      	ldrb	r3, [r7, #29]
 8000688:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800068c:	2bc0      	cmp	r3, #192	; 0xc0
 800068e:	d003      	beq.n	8000698 <BLUENRG2__u8CentralAppInit+0x68>
    {
        PRINT_DBG( "Read Broadcast Address failed !\r\n" );
 8000690:	484a      	ldr	r0, [pc, #296]	; (80007bc <BLUENRG2__u8CentralAppInit+0x18c>)
 8000692:	f008 f9e7 	bl	8008a64 <puts>
        while( true )
 8000696:	e7fe      	b.n	8000696 <BLUENRG2__u8CentralAppInit+0x66>
            ;
        return u8Ret;
    }

    aci_hal_set_tx_power_level( BLUENRG2_TX_POWER_HIGH, BLUENRG2_TX_POWER_N2_DBM );
 8000698:	2104      	movs	r1, #4
 800069a:	2001      	movs	r0, #1
 800069c:	f006 f96a 	bl	8006974 <aci_hal_set_tx_power_level>

    u8Ret = aci_gatt_init();
 80006a0:	f005 fc65 	bl	8005f6e <aci_gatt_init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <BLUENRG2__u8CentralAppInit+0x94>
    {
        PRINT_DBG( "GATT_Init failed: 0x%02x\r\n", u8Ret );
 80006b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b6:	4619      	mov	r1, r3
 80006b8:	4841      	ldr	r0, [pc, #260]	; (80007c0 <BLUENRG2__u8CentralAppInit+0x190>)
 80006ba:	f008 f96d 	bl	8008998 <iprintf>
        return u8Ret;
 80006be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006c2:	e074      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_gap_init( GAP_CENTRAL_ROLE, 0x0, (uint8_t) BLUENRG2_DEV_NAME_LEN, &u16ServiceHandle,
 80006c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	2211      	movs	r2, #17
 80006d8:	2100      	movs	r1, #0
 80006da:	2004      	movs	r0, #4
 80006dc:	f005 f993 	bl	8005a06 <aci_gap_init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                          &u16DevNameCharHandle, &u16AppearanceCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <BLUENRG2__u8CentralAppInit+0xd0>
    {
        PRINT_DBG( "GAP_Init failed: 0x%02x\r\n", u8Ret );
 80006ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006f2:	4619      	mov	r1, r3
 80006f4:	4833      	ldr	r0, [pc, #204]	; (80007c4 <BLUENRG2__u8CentralAppInit+0x194>)
 80006f6:	f008 f94f 	bl	8008998 <iprintf>
        return u8Ret;
 80006fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006fe:	e056      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    // Update device name
    uint8_t au8TempDeviceName[BLUENRG2_DEV_NAME_LEN] = BLUENRG2_DEV_NAME;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <BLUENRG2__u8CentralAppInit+0x198>)
 8000702:	1d3c      	adds	r4, r7, #4
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	682b      	ldr	r3, [r5, #0]
 800070c:	7023      	strb	r3, [r4, #0]
    u8Ret = aci_gatt_update_char_value( u16ServiceHandle, u16DevNameCharHandle, (uint8_t) 0U,
 800070e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8000710:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2311      	movs	r3, #17
 8000718:	2200      	movs	r2, #0
 800071a:	f005 fe30 	bl	800637e <aci_gatt_update_char_value>
 800071e:	4603      	mov	r3, r0
 8000720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        (uint8_t) BLUENRG2_DEV_NAME_LEN, au8TempDeviceName );

    // Clear security database: this implies that each time the application is executed
    // the full bonding process is executed (with PassKey generation and setting).
    u8Ret = aci_gap_clear_security_db();
 8000724:	f005 fa1c 	bl	8005b60 <aci_gap_clear_security_db>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 800072e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <BLUENRG2__u8CentralAppInit+0x10c>
    {
        PRINT_DBG( "aci_gap_clear_security_db() failed:\r\n" );
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <BLUENRG2__u8CentralAppInit+0x19c>)
 8000738:	f008 f994 	bl	8008a64 <puts>
    }

    //  Set the I/O capability otherwise the Central device (e.g. the smartphone) will
    //  propose a PIN that will be accepted without any control.
    if( aci_gap_set_io_capability( IO_CAP_DISPLAY_ONLY ) == BLE_STATUS_SUCCESS )
 800073c:	2000      	movs	r0, #0
 800073e:	f005 f838 	bl	80057b2 <aci_gap_set_io_capability>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <BLUENRG2__u8CentralAppInit+0x11e>
    {
        PRINT_DBG( "I/O Capability Configurated\r\n" );
 8000748:	4821      	ldr	r0, [pc, #132]	; (80007d0 <BLUENRG2__u8CentralAppInit+0x1a0>)
 800074a:	f008 f98b 	bl	8008a64 <puts>
    }

    // BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype)
    // clang-format off
    u8Ret = aci_gap_set_authentication_requirement( BONDING, MITM_PROTECTION_REQUIRED, SC_IS_SUPPORTED,
 800074e:	2300      	movs	r3, #0
 8000750:	9304      	str	r3, [sp, #16]
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <BLUENRG2__u8CentralAppInit+0x1a4>)
 8000754:	9303      	str	r3, [sp, #12]
 8000756:	2300      	movs	r3, #0
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2310      	movs	r3, #16
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2307      	movs	r3, #7
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	2001      	movs	r0, #1
 800076a:	f005 f87f 	bl	800586c <aci_gap_set_authentication_requirement>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                    KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING,
                                                    BLUENRG2_AUTHENTICATION_PASS_KEY, BLUENRG2_AUTHENTICATION_ADDR_PUBLIC_ID );
    // clang-format on

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000778:	2b00      	cmp	r3, #0
 800077a:	d005      	beq.n	8000788 <BLUENRG2__u8CentralAppInit+0x158>
    {
        PRINT_DBG( "aci_gap_set_authentication_requirement()failed\r\n" );
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <BLUENRG2__u8CentralAppInit+0x1a8>)
 800077e:	f008 f971 	bl	8008a64 <puts>
        return u8Ret;
 8000782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000786:	e012      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = GATT_DB_u8AddService(); // Add Device Service & Characteristics
 8000788:	f000 fe64 	bl	8001454 <GATT_DB_u8AddService>
 800078c:	4603      	mov	r3, r0
 800078e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <BLUENRG2__u8CentralAppInit+0x17c>
    {
        PRINT_DBG( "Error while adding service: 0x%02x\r\n", u8Ret );
 800079a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800079e:	4619      	mov	r1, r3
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <BLUENRG2__u8CentralAppInit+0x1ac>)
 80007a2:	f008 f8f9 	bl	8008998 <iprintf>
        return u8Ret;
 80007a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007aa:	e000      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    return BLE_STATUS_SUCCESS;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08009800 	.word	0x08009800
 80007bc:	08009824 	.word	0x08009824
 80007c0:	08009848 	.word	0x08009848
 80007c4:	08009864 	.word	0x08009864
 80007c8:	08009920 	.word	0x08009920
 80007cc:	08009880 	.word	0x08009880
 80007d0:	080098a8 	.word	0x080098a8
 80007d4:	0001e240 	.word	0x0001e240
 80007d8:	080098c8 	.word	0x080098c8
 80007dc:	080098f8 	.word	0x080098f8

080007e0 <BLUENRG2__vUserProcess>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserProcess( void )
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	; 0x2c
 80007e4:	af02      	add	r7, sp, #8
    static uint32_t          u32LastRSSIReadTick;
    static uint32_t          u32CurrentFSMStartTick;
    static BLUENRG2_tenState enLastFSMState;

    if( enLastFSMState != BLUENRG2__enState )
 80007e6:	4ba8      	ldr	r3, [pc, #672]	; (8000a88 <BLUENRG2__vUserProcess+0x2a8>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4ba8      	ldr	r3, [pc, #672]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d00c      	beq.n	800080c <BLUENRG2__vUserProcess+0x2c>
    {
        PRINT_DBG( "FSM : %d -> %d \r\n", enLastFSMState, BLUENRG2__enState );
 80007f2:	4ba5      	ldr	r3, [pc, #660]	; (8000a88 <BLUENRG2__vUserProcess+0x2a8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4ba4      	ldr	r3, [pc, #656]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	48a4      	ldr	r0, [pc, #656]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 8000800:	f008 f8ca 	bl	8008998 <iprintf>
        enLastFSMState = BLUENRG2__enState;
 8000804:	4ba1      	ldr	r3, [pc, #644]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	4b9f      	ldr	r3, [pc, #636]	; (8000a88 <BLUENRG2__vUserProcess+0x2a8>)
 800080a:	701a      	strb	r2, [r3, #0]
    }

    switch( BLUENRG2__enState )
 800080c:	4b9f      	ldr	r3, [pc, #636]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b09      	cmp	r3, #9
 8000812:	f200 812d 	bhi.w	8000a70 <BLUENRG2__vUserProcess+0x290>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <BLUENRG2__vUserProcess+0x3c>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	08000845 	.word	0x08000845
 8000820:	0800085f 	.word	0x0800085f
 8000824:	08000897 	.word	0x08000897
 8000828:	080008a3 	.word	0x080008a3
 800082c:	08000909 	.word	0x08000909
 8000830:	08000933 	.word	0x08000933
 8000834:	0800095d 	.word	0x0800095d
 8000838:	08000987 	.word	0x08000987
 800083c:	080009d9 	.word	0x080009d9
 8000840:	08000a3f 	.word	0x08000a3f
    {
        case BLUENRG2_STAT_INIT:
        {
            BLUENRG2__vResetConnectionContext(); // Reset Connection context
 8000844:	f000 f9ce 	bl	8000be4 <BLUENRG2__vResetConnectionContext>
            BLUENRG2__vStartScan();              // Result in hci_le_advertising_report_event
 8000848:	f000 f956 	bl	8000af8 <BLUENRG2__vStartScan>
            BLUENRG2__enState      = BLUENRG2_STAT_SCANNING;
 800084c:	4b8f      	ldr	r3, [pc, #572]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 8000852:	f001 fe7b 	bl	800254c <HAL_GetTick>
 8000856:	4603      	mov	r3, r0
 8000858:	4a8e      	ldr	r2, [pc, #568]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 800085a:	6013      	str	r3, [r2, #0]
        }
        break;
 800085c:	e10f      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_SCANNING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 800085e:	f001 fe75 	bl	800254c <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	4b8b      	ldr	r3, [pc, #556]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800086e:	4293      	cmp	r3, r2
 8000870:	f240 8100 	bls.w	8000a74 <BLUENRG2__vUserProcess+0x294>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000874:	4b85      	ldr	r3, [pc, #532]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4887      	ldr	r0, [pc, #540]	; (8000a98 <BLUENRG2__vUserProcess+0x2b8>)
 800087c:	f008 f88c 	bl	8008998 <iprintf>
                BLUENRG2__vStopScan();
 8000880:	f000 f95c 	bl	8000b3c <BLUENRG2__vStopScan>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000884:	f001 fe62 	bl	800254c <HAL_GetTick>
 8000888:	4603      	mov	r3, r0
 800088a:	4a82      	ldr	r2, [pc, #520]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 800088c:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_IDLE;
 800088e:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000890:	2209      	movs	r2, #9
 8000892:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000894:	e0ee      	b.n	8000a74 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_SCAN_DONE:
        {
            BLUENRG2__vStopScan();
 8000896:	f000 f951 	bl	8000b3c <BLUENRG2__vStopScan>
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800089a:	4b7c      	ldr	r3, [pc, #496]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800089c:	2209      	movs	r2, #9
 800089e:	701a      	strb	r2, [r3, #0]
        }
        break;
 80008a0:	e0ed      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_START_CONNECT:
        {

            const char *apcDevAddrTypeStr[] = { "Public Device", "Random Device", "Public Identity",
 80008a2:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 80008a4:	f107 040c 	add.w	r4, r7, #12
 80008a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                "Random Identity" };

            printf( "[Connecting] Device Addr Type : %s, Value : ",
                    apcDevAddrTypeStr[BLUENRG2__stConnCTX.stDevice.u8Type] );
 80008ae:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80008b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
            printf( "[Connecting] Device Addr Type : %s, Value : ",
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	3320      	adds	r3, #32
 80008b8:	443b      	add	r3, r7
 80008ba:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80008be:	4619      	mov	r1, r3
 80008c0:	4878      	ldr	r0, [pc, #480]	; (8000aa4 <BLUENRG2__vUserProcess+0x2c4>)
 80008c2:	f008 f869 	bl	8008998 <iprintf>

            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008c6:	2306      	movs	r3, #6
 80008c8:	77fb      	strb	r3, [r7, #31]
 80008ca:	e00c      	b.n	80008e6 <BLUENRG2__vUserProcess+0x106>
            {
                printf( "%02X ", BLUENRG2__stConnCTX.stDevice.au8Addr[u8ByteIdx - 1] );
 80008cc:	7ffb      	ldrb	r3, [r7, #31]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a73      	ldr	r2, [pc, #460]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80008d2:	4413      	add	r3, r2
 80008d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008d8:	4619      	mov	r1, r3
 80008da:	4873      	ldr	r0, [pc, #460]	; (8000aa8 <BLUENRG2__vUserProcess+0x2c8>)
 80008dc:	f008 f85c 	bl	8008998 <iprintf>
            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008e0:	7ffb      	ldrb	r3, [r7, #31]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	77fb      	strb	r3, [r7, #31]
 80008e6:	7ffb      	ldrb	r3, [r7, #31]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ef      	bne.n	80008cc <BLUENRG2__vUserProcess+0xec>
            }
            printf( "\r\n" );
 80008ec:	486f      	ldr	r0, [pc, #444]	; (8000aac <BLUENRG2__vUserProcess+0x2cc>)
 80008ee:	f008 f8b9 	bl	8008a64 <puts>

            BLUENRG2__vStartConnect();
 80008f2:	f000 f93f 	bl	8000b74 <BLUENRG2__vStartConnect>
            BLUENRG2__enState      = BLUENRG2_STAT_CONNECTING;
 80008f6:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80008f8:	2204      	movs	r2, #4
 80008fa:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 80008fc:	f001 fe26 	bl	800254c <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	4a64      	ldr	r2, [pc, #400]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000904:	6013      	str	r3, [r2, #0]
        }
        break;
 8000906:	e0ba      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_CONNECTING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000908:	f001 fe20 	bl	800254c <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	4b61      	ldr	r3, [pc, #388]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000918:	4293      	cmp	r3, r2
 800091a:	f240 80ad 	bls.w	8000a78 <BLUENRG2__vUserProcess+0x298>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	485c      	ldr	r0, [pc, #368]	; (8000a98 <BLUENRG2__vUserProcess+0x2b8>)
 8000926:	f008 f837 	bl	8008998 <iprintf>
                BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800092a:	4b58      	ldr	r3, [pc, #352]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800092c:	2209      	movs	r2, #9
 800092e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000930:	e0a2      	b.n	8000a78 <BLUENRG2__vUserProcess+0x298>

        case BLUENRG2_STAT_GET_REMOTE_TX:
        {
            if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	f083 0301 	eor.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d009      	beq.n	8000954 <BLUENRG2__vUserProcess+0x174>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 8000940:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 8000942:	8858      	ldrh	r0, [r3, #2]
 8000944:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <BLUENRG2__vUserProcess+0x2d0>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2302      	movs	r3, #2
 800094a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094e:	2101      	movs	r1, #1
 8000950:	f005 fdc7 	bl	80064e2 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteTx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000956:	2209      	movs	r2, #9
 8000958:	701a      	strb	r2, [r3, #0]
        }
        break;
 800095a:	e090      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_GET_REMOTE_RX:
        {
            if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 800095e:	7e9b      	ldrb	r3, [r3, #26]
 8000960:	f083 0301 	eor.w	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d009      	beq.n	800097e <BLUENRG2__vUserProcess+0x19e>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 800096c:	8858      	ldrh	r0, [r3, #2]
 800096e:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <BLUENRG2__vUserProcess+0x2d4>)
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2302      	movs	r3, #2
 8000974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000978:	2101      	movs	r1, #1
 800097a:	f005 fdb2 	bl	80064e2 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteRx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800097e:	4b43      	ldr	r3, [pc, #268]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000980:	2209      	movs	r2, #9
 8000982:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000984:	e07b      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY:
        {

            uint8_t au8ClientCharConfigData[] = { 0x01, 0x00 }; // Enable notifications
 8000986:	2301      	movs	r3, #1
 8000988:	813b      	strh	r3, [r7, #8]

            u32CurrentFSMStartTick = HAL_GetTick();
 800098a:	f001 fddf 	bl	800254c <HAL_GetTick>
 800098e:	4603      	mov	r3, r0
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000992:	6013      	str	r3, [r2, #0]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 8000994:	e009      	b.n	80009aa <BLUENRG2__vUserProcess+0x1ca>
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
                                             sizeof( au8ClientCharConfigData ),
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
            {
                // Radio is busy.
                if( ( HAL_GetTick() - u32CurrentFSMStartTick ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
 8000996:	f001 fdd9 	bl	800254c <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d80e      	bhi.n	80009c8 <BLUENRG2__vUserProcess+0x1e8>
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80009ac:	8858      	ldrh	r0, [r3, #2]
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80009b0:	8b1b      	ldrh	r3, [r3, #24]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009b2:	3302      	adds	r3, #2
 80009b4:	b299      	uxth	r1, r3
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2202      	movs	r2, #2
 80009bc:	f005 fe54 	bl	8006668 <aci_gatt_write_char_desc>
 80009c0:	4603      	mov	r3, r0
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
 80009c2:	2b46      	cmp	r3, #70	; 0x46
 80009c4:	d0e7      	beq.n	8000996 <BLUENRG2__vUserProcess+0x1b6>
 80009c6:	e000      	b.n	80009ca <BLUENRG2__vUserProcess+0x1ea>
                    break;
 80009c8:	bf00      	nop
            }
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <BLUENRG2__vUserProcess+0x2d8>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]

            BLUENRG2__enState = BLUENRG2_STAT_MAIN_CONNECTED;
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009d6:	e052      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_MAIN_CONNECTED:
        {

            if( HAL_GetTick() - u32LastRSSIReadTick > BLUENRG2_RSSI_READING_PERIOD )
 80009d8:	f001 fdb8 	bl	800254c <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <BLUENRG2__vUserProcess+0x2dc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009e8:	d913      	bls.n	8000a12 <BLUENRG2__vUserProcess+0x232>
            {
                int8_t u8TmpRssi;
                hci_read_rssi( BLUENRG2__stConnCTX.u16Handle, &u8TmpRssi );
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 fb0d 	bl	8008012 <hci_read_rssi>
                BLUENRG2__vUpdateLockStatus( u8TmpRssi, BLUENRG2_RSSI_THRESHOLD_NEAR, true );
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fa6c 	bl	8000ee0 <BLUENRG2__vUpdateLockStatus>
                u32LastRSSIReadTick = HAL_GetTick();
 8000a08:	f001 fda0 	bl	800254c <HAL_GetTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <BLUENRG2__vUserProcess+0x2dc>)
 8000a10:	6013      	str	r3, [r2, #0]
            }

            if( BLUENRG2__bMasterDevIsUnlocked )
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <BLUENRG2__vUserProcess+0x2e0>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00d      	beq.n	8000a36 <BLUENRG2__vUserProcess+0x256>
            {
                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f001 fa20 	bl	8001e60 <BSP_PB_GetState>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d103      	bne.n	8000a2e <BLUENRG2__vUserProcess+0x24e>
                {
                    BSP_LED_Off( LED2 );
 8000a26:	2000      	movs	r0, #0
 8000a28:	f001 f972 	bl	8001d10 <BSP_LED_Off>
            else
            {
                BSP_LED_On( LED2 );
            }
        }
        break;
 8000a2c:	e027      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>
                    BSP_LED_On( LED2 );
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f001 f958 	bl	8001ce4 <BSP_LED_On>
        break;
 8000a34:	e023      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>
                BSP_LED_On( LED2 );
 8000a36:	2000      	movs	r0, #0
 8000a38:	f001 f954 	bl	8001ce4 <BSP_LED_On>
        break;
 8000a3c:	e01f      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_IDLE:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000a3e:	f001 fd85 	bl	800254c <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d914      	bls.n	8000a7c <BLUENRG2__vUserProcess+0x29c>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	480f      	ldr	r0, [pc, #60]	; (8000a98 <BLUENRG2__vUserProcess+0x2b8>)
 8000a5a:	f007 ff9d 	bl	8008998 <iprintf>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000a5e:	f001 fd75 	bl	800254c <HAL_GetTick>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000a66:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_INIT;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000a6e:	e005      	b.n	8000a7c <BLUENRG2__vUserProcess+0x29c>

        default:
            break;
 8000a70:	bf00      	nop
 8000a72:	e004      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>
        break;
 8000a74:	bf00      	nop
 8000a76:	e002      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>
        break;
 8000a78:	bf00      	nop
 8000a7a:	e000      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>
        break;
 8000a7c:	bf00      	nop
    }
}
 8000a7e:	bf00      	nop
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000126 	.word	0x20000126
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	08009934 	.word	0x08009934
 8000a94:	20000128 	.word	0x20000128
 8000a98:	08009948 	.word	0x08009948
 8000a9c:	080099dc 	.word	0x080099dc
 8000aa0:	200000a0 	.word	0x200000a0
 8000aa4:	08009960 	.word	0x08009960
 8000aa8:	08009990 	.word	0x08009990
 8000aac:	08009998 	.word	0x08009998
 8000ab0:	200000a8 	.word	0x200000a8
 8000ab4:	200000bc 	.word	0x200000bc
 8000ab8:	200000e5 	.word	0x200000e5
 8000abc:	2000012c 	.word	0x2000012c
 8000ac0:	200000e6 	.word	0x200000e6

08000ac4 <BLUENRG2__vReceiveData>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vReceiveData( uint8_t *pu8Data, uint8_t u8DataLen_Byte )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
    // {
    //   PRINT_DBG("%d", pu8Data[i]);
    // }
    // fflush(stdout);

    if( 1U == pu8Data[0] )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d107      	bne.n	8000ae8 <BLUENRG2__vReceiveData+0x24>
    {
        BLUENRG2__u32RxDataCnt++;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <BLUENRG2__vReceiveData+0x2c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <BLUENRG2__vReceiveData+0x2c>)
 8000ae0:	6013      	str	r3, [r2, #0]
        PRINT_DBG( "[RX] Notified\r\n" );
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <BLUENRG2__vReceiveData+0x30>)
 8000ae4:	f007 ffbe 	bl	8008a64 <puts>
    }
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	080099ec 	.word	0x080099ec

08000af8 <BLUENRG2__vStartScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartScan( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_start_general_discovery_proc( SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00 );
 8000afe:	2300      	movs	r3, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b0a:	f005 f852 	bl	8005bb2 <aci_gap_start_general_discovery_proc>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d005      	beq.n	8000b24 <BLUENRG2__vStartScan+0x2c>
    {
        printf( "aci_gap_start_general_discovery_proc() failed, %#X\n", u8Ret );
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <BLUENRG2__vStartScan+0x3c>)
 8000b1e:	f007 ff3b 	bl	8008998 <iprintf>
    }
    else
    {
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
    }
}
 8000b22:	e002      	b.n	8000b2a <BLUENRG2__vStartScan+0x32>
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <BLUENRG2__vStartScan+0x40>)
 8000b26:	f007 ff9d 	bl	8008a64 <puts>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	080099fc 	.word	0x080099fc
 8000b38:	08009a30 	.word	0x08009a30

08000b3c <BLUENRG2__vStopScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStopScan( void )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_terminate_gap_proc( GAP_GENERAL_DISCOVERY_PROC );
 8000b42:	2002      	movs	r0, #2
 8000b44:	f005 f9b6 	bl	8005eb4 <aci_gap_terminate_gap_proc>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <BLUENRG2__vStopScan+0x22>
    {
        printf( "aci_gap_terminate_gap_proc() failed, %#X\n", u8Ret );
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <BLUENRG2__vStopScan+0x30>)
 8000b58:	f007 ff1e 	bl	8008998 <iprintf>
    }
    else
    {
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
    }
}
 8000b5c:	e002      	b.n	8000b64 <BLUENRG2__vStopScan+0x28>
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <BLUENRG2__vStopScan+0x34>)
 8000b60:	f007 ff80 	bl	8008a64 <puts>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	08009a60 	.word	0x08009a60
 8000b70:	08009a8c 	.word	0x08009a8c

08000b74 <BLUENRG2__vStartConnect>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartConnect( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af08      	add	r7, sp, #32

    // Do connection with first discovered device
    uint8_t u8Ret =
    aci_gap_create_connection( SCAN_P, SCAN_L, BLUENRG2__stConnCTX.stDevice.u8Type,
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <BLUENRG2__vStartConnect+0x60>)
 8000b7c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000b80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b84:	9306      	str	r3, [sp, #24]
 8000b86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b8a:	9305      	str	r3, [sp, #20]
 8000b8c:	233c      	movs	r3, #60	; 0x3c
 8000b8e:	9304      	str	r3, [sp, #16]
 8000b90:	2300      	movs	r3, #0
 8000b92:	9303      	str	r3, [sp, #12]
 8000b94:	2328      	movs	r3, #40	; 0x28
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	2328      	movs	r3, #40	; 0x28
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <BLUENRG2__vStartConnect+0x64>)
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000baa:	f005 f89f 	bl	8005cec <aci_gap_create_connection>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
                               BLUENRG2__stConnCTX.stDevice.au8Addr, PUBLIC_ADDR, 40, 40, 0, 60, 2000, 2000 );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <BLUENRG2__vStartConnect+0x50>
    {
        PRINT_DBG( "aci_gap_create_connection() failed: 0x%02x\r\n", u8Ret );
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <BLUENRG2__vStartConnect+0x68>)
 8000bbe:	f007 feeb 	bl	8008998 <iprintf>
    }
    else
    {
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
    }
}
 8000bc2:	e002      	b.n	8000bca <BLUENRG2__vStartConnect+0x56>
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <BLUENRG2__vStartConnect+0x6c>)
 8000bc6:	f007 ff4d 	bl	8008a64 <puts>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000a0 	.word	0x200000a0
 8000bd8:	200000d0 	.word	0x200000d0
 8000bdc:	08009ab0 	.word	0x08009ab0
 8000be0:	08009ae0 	.word	0x08009ae0

08000be4 <BLUENRG2__vResetConnectionContext>:
 * Description    : Reset the discovery context.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vResetConnectionContext( void )
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
    BSP_LED_On( LED2 );
 8000bea:	2000      	movs	r0, #0
 8000bec:	f001 f87a 	bl	8001ce4 <BSP_LED_On>
    BLUENRG_memset( &BLUENRG2__stConnCTX, 0, sizeof( BLUENRG2__stConnCTX ) );
 8000bf0:	2236      	movs	r2, #54	; 0x36
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4831      	ldr	r0, [pc, #196]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xd8>)
 8000bf6:	f008 f825 	bl	8008c44 <memset>

    BLUENRG2__stConnCTX.RemoteTx.bValid = false;
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xd8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	719a      	strb	r2, [r3, #6]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteTx.uUUID.UUID_128, BLUENRG2__cau8RemoteTxCharUUID,
 8000c00:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xd8>)
 8000c02:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000c04:	f103 0408 	add.w	r4, r3, #8
 8000c08:	4613      	mov	r3, r2
 8000c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteTxCharUUID ) );

    BLUENRG2__stConnCTX.RemoteRx.bValid = false;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	769a      	strb	r2, [r3, #26]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteRx.uUUID.UUID_128, BLUENRG2__cau8RemoteRxCharUUID,
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xd8>)
 8000c18:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <BLUENRG2__vResetConnectionContext+0xe0>)
 8000c1a:	f103 041c 	add.w	r4, r3, #28
 8000c1e:	4613      	mov	r3, r2
 8000c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteRxCharUUID ) );

    BLUENRG2__bRemoteTxNotifyEnabled = false;
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <BLUENRG2__vResetConnectionContext+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bTXbufferFull          = false;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <BLUENRG2__vResetConnectionContext+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bMasterDevIsUnlocked   = false;
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <BLUENRG2__vResetConnectionContext+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]

    BLUENRG2__st8Queue.bValid = false;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <BLUENRG2__vResetConnectionContext+0xf0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	719a      	strb	r2, [r3, #6]
    BLUENRG2__st8Queue.u8Idx  = 0U;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <BLUENRG2__vResetConnectionContext+0xf0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	715a      	strb	r2, [r3, #5]

    mtu_exchanged      = 0;
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <BLUENRG2__vResetConnectionContext+0xf4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    mtu_exchanged_wait = 0;
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <BLUENRG2__vResetConnectionContext+0xf8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
    write_char_len     = CHAR_VALUE_LENGTH - 3;
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <BLUENRG2__vResetConnectionContext+0xfc>)
 8000c52:	223c      	movs	r2, #60	; 0x3c
 8000c54:	801a      	strh	r2, [r3, #0]

    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000c56:	2300      	movs	r3, #0
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	e026      	b.n	8000caa <BLUENRG2__vResetConnectionContext+0xc6>
    {
        BLUENRG2__au8DataBuf[i] = 0x31 + ( i % 10 );
 8000c5c:	88fa      	ldrh	r2, [r7, #6]
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <BLUENRG2__vResetConnectionContext+0x100>)
 8000c60:	fba3 1302 	umull	r1, r3, r3, r2
 8000c64:	08d9      	lsrs	r1, r3, #3
 8000c66:	460b      	mov	r3, r1
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	3231      	adds	r2, #49	; 0x31
 8000c78:	b2d1      	uxtb	r1, r2
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <BLUENRG2__vResetConnectionContext+0x104>)
 8000c7c:	54d1      	strb	r1, [r2, r3]
        if( ( i + 1 ) % 10 == 0 )
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	1c59      	adds	r1, r3, #1
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <BLUENRG2__vResetConnectionContext+0x108>)
 8000c84:	fb83 2301 	smull	r2, r3, r3, r1
 8000c88:	109a      	asrs	r2, r3, #2
 8000c8a:	17cb      	asrs	r3, r1, #31
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	1aca      	subs	r2, r1, r3
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d103      	bne.n	8000ca4 <BLUENRG2__vResetConnectionContext+0xc0>
        {
            BLUENRG2__au8DataBuf[i] = 'x';
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <BLUENRG2__vResetConnectionContext+0x104>)
 8000ca0:	2178      	movs	r1, #120	; 0x78
 8000ca2:	54d1      	strb	r1, [r2, r3]
    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2b3b      	cmp	r3, #59	; 0x3b
 8000cae:	d9d5      	bls.n	8000c5c <BLUENRG2__vResetConnectionContext+0x78>
        }
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000a0 	.word	0x200000a0
 8000cc0:	08009dfc 	.word	0x08009dfc
 8000cc4:	08009e0c 	.word	0x08009e0c
 8000cc8:	200000e5 	.word	0x200000e5
 8000ccc:	200000e4 	.word	0x200000e4
 8000cd0:	200000e6 	.word	0x200000e6
 8000cd4:	200000d8 	.word	0x200000d8
 8000cd8:	20000124 	.word	0x20000124
 8000cdc:	20000125 	.word	0x20000125
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	cccccccd 	.word	0xcccccccd
 8000ce8:	200000e8 	.word	0x200000e8
 8000cec:	66666667 	.word	0x66666667

08000cf0 <BLUENRG2__u8PrintBLEFwInfo>:
 * Description    : Setup the device address.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static uint8_t BLUENRG2__u8PrintBLEFwInfo( void )
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b094      	sub	sp, #80	; 0x50
 8000cf4:	af08      	add	r7, sp, #32
    uint16_t u16DTMBuildNum;

    uint8_t  u8BLEStackVerMajor, u8BLEStackVerMinor, u8BLEStackVerPatch, u8BLEStackDevelopment;
    uint16_t u16BLEStackVariant, u16BLEStackBuildNum;

    uint8_t au8Alphabet[] = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
 8000cf6:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <BLUENRG2__u8PrintBLEFwInfo+0xec>)
 8000cf8:	1d3c      	adds	r4, r7, #4
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d04:	c403      	stmia	r4!, {r0, r1}
 8000d06:	8022      	strh	r2, [r4, #0]
 8000d08:	3402      	adds	r4, #2
 8000d0a:	0c13      	lsrs	r3, r2, #16
 8000d0c:	7023      	strb	r3, [r4, #0]
                              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
    // clang-format off
    uint8_t u8Status = aci_hal_get_firmware_details( &u8DTMVerMajor, &u8DTMVerMinor, &u8DTMVerPatch, &u8DTMVerVariant,
 8000d0e:	f107 042b 	add.w	r4, r7, #43	; 0x2b
 8000d12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d16:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000d1a:	f107 002e 	add.w	r0, r7, #46	; 0x2e
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	9306      	str	r3, [sp, #24]
 8000d24:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000d34:	9303      	str	r3, [sp, #12]
 8000d36:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	4623      	mov	r3, r4
 8000d4a:	f005 fd35 	bl	80067b8 <aci_hal_get_firmware_details>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                     &u16DTMBuildNum, &u8BLEStackVerMajor, &u8BLEStackVerMinor,
                                                     &u8BLEStackVerPatch, &u8BLEStackDevelopment, &u16BLEStackVariant, 
                                                     &u16BLEStackBuildNum 
                                                    );
    // clang-format on
    PRINT_DBG( "\r\n--------------------------------------------------------\r\n\n" );
 8000d54:	4822      	ldr	r0, [pc, #136]	; (8000de0 <BLUENRG2__u8PrintBLEFwInfo+0xf0>)
 8000d56:	f007 fe85 	bl	8008a64 <puts>
    PRINT_DBG( " Lumen BLE Central App v%d.%d.%d \r\n", 0, 0, 0 );
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4820      	ldr	r0, [pc, #128]	; (8000de4 <BLUENRG2__u8PrintBLEFwInfo+0xf4>)
 8000d62:	f007 fe19 	bl	8008998 <iprintf>

    if( u8Status == BLE_STATUS_SUCCESS )
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d12c      	bne.n	8000dc8 <BLUENRG2__u8PrintBLEFwInfo+0xd8>
    {
        PRINT_DBG( "- BlueNRG-2 FW v%d.%d%c \r\n", u8BLEStackVerMajor, u8BLEStackVerMinor,
 8000d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d72:	4619      	mov	r1, r3
 8000d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d7e:	3330      	adds	r3, #48	; 0x30
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <BLUENRG2__u8PrintBLEFwInfo+0xf8>)
 8000d88:	f007 fe06 	bl	8008998 <iprintf>
                   au8Alphabet[u8BLEStackVerPatch] );

        PRINT_DBG( "- DTM %s v%d.%d%c \r\n",
 8000d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d007      	beq.n	8000da4 <BLUENRG2__u8PrintBLEFwInfo+0xb4>
 8000d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d101      	bne.n	8000da0 <BLUENRG2__u8PrintBLEFwInfo+0xb0>
 8000d9c:	4913      	ldr	r1, [pc, #76]	; (8000dec <BLUENRG2__u8PrintBLEFwInfo+0xfc>)
 8000d9e:	e002      	b.n	8000da6 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000da0:	4913      	ldr	r1, [pc, #76]	; (8000df0 <BLUENRG2__u8PrintBLEFwInfo+0x100>)
 8000da2:	e000      	b.n	8000da6 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000da4:	4913      	ldr	r1, [pc, #76]	; (8000df4 <BLUENRG2__u8PrintBLEFwInfo+0x104>)
 8000da6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000daa:	461a      	mov	r2, r3
 8000dac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000db0:	4618      	mov	r0, r3
 8000db2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000db6:	3330      	adds	r3, #48	; 0x30
 8000db8:	443b      	add	r3, r7
 8000dba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <BLUENRG2__u8PrintBLEFwInfo+0x108>)
 8000dc4:	f007 fde8 	bl	8008998 <iprintf>
                   u8DTMVerVariant == 0x01 ? "UART" : ( u8DTMVerVariant == 0x02 ? "SPI" : "Unknown" ), u8DTMVerMajor,
                   u8DTMVerMinor, au8Alphabet[u8DTMVerPatch] );
    }
    PRINT_DBG( "\r\n" );
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <BLUENRG2__u8PrintBLEFwInfo+0x10c>)
 8000dca:	f007 fe4b 	bl	8008a64 <puts>

    return u8Status;
 8000dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3730      	adds	r7, #48	; 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08009bac 	.word	0x08009bac
 8000de0:	08009b00 	.word	0x08009b00
 8000de4:	08009b40 	.word	0x08009b40
 8000de8:	08009b64 	.word	0x08009b64
 8000dec:	08009b80 	.word	0x08009b80
 8000df0:	08009b84 	.word	0x08009b84
 8000df4:	08009b8c 	.word	0x08009b8c
 8000df8:	08009b94 	.word	0x08009b94
 8000dfc:	08009998 	.word	0x08009998

08000e00 <BLUENRG2__bFindDeviceName>:
 * Input          : Data length.
 *                  Data value
 * Return         : TRUE if the local name found is the expected one, FALSE otherwise.
 *******************************************************************************/
static bool BLUENRG2__bFindDeviceName( uint8_t u8DataLen, uint8_t *pu8Data )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Index = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	75fb      	strb	r3, [r7, #23]

    while( u8Index < u8DataLen )
 8000e10:	e02f      	b.n	8000e72 <BLUENRG2__bFindDeviceName+0x72>
    {
        /* Advertising data fields: len, type, values */
        /* Check if field is complete local name and the length is the expected one for BLE
         * CentralApp  */
        if( pu8Data[u8Index + 1U] == AD_TYPE_COMPLETE_LOCAL_NAME )
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	3301      	adds	r3, #1
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d11f      	bne.n	8000e60 <BLUENRG2__bFindDeviceName+0x60>
        {
            // check if found device name is start with LUMEN
            uint8_t au8FindKeyStr[] = "BLE Device"; //TODO
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <BLUENRG2__bFindDeviceName+0x84>)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e28:	c303      	stmia	r3!, {r0, r1}
 8000e2a:	801a      	strh	r2, [r3, #0]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	0c12      	lsrs	r2, r2, #16
 8000e30:	701a      	strb	r2, [r3, #0]

            pu8Data[u8Index + 1 + sizeof( au8FindKeyStr )] = '\0'; // Limit device name string
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	330c      	adds	r3, #12
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

            if( 0U == BLUENRG_memcmp( &pu8Data[u8Index + 2], au8FindKeyStr, sizeof( au8FindKeyStr ) - 1 ) )
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	3302      	adds	r3, #2
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	f107 010c 	add.w	r1, r7, #12
 8000e4a:	220a      	movs	r2, #10
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 fee9 	bl	8008c24 <memcmp>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <BLUENRG2__bFindDeviceName+0x5c>
            {
                return TRUE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e00f      	b.n	8000e7c <BLUENRG2__bFindDeviceName+0x7c>
            }
            else
            {
                return FALSE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00d      	b.n	8000e7c <BLUENRG2__bFindDeviceName+0x7c>
            }
        }
        else
        {
            u8Index += ( pu8Data[u8Index] + 1U ); // move to next advertising field, Refer to Core 5.2 Figure 11.1
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
    while( u8Index < u8DataLen )
 8000e72:	7dfa      	ldrb	r2, [r7, #23]
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3cb      	bcc.n	8000e12 <BLUENRG2__bFindDeviceName+0x12>
        }
    }

    return FALSE;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08009bc8 	.word	0x08009bc8

08000e88 <BLUENRG2__vAttributeModifiedCB>:
 *                  Length of the data.
 *                  Attribute data.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vAttributeModifiedCB( uint16_t u16AttributeHandle, uint8_t u8DataLen, uint8_t *pau8AttrData )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	603a      	str	r2, [r7, #0]
 8000e92:	80fb      	strh	r3, [r7, #6]
 8000e94:	460b      	mov	r3, r1
 8000e96:	717b      	strb	r3, [r7, #5]
    if( u16AttributeHandle == u16LocalRxCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <BLUENRG2__vAttributeModifiedCB+0x4c>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d105      	bne.n	8000eb0 <BLUENRG2__vAttributeModifiedCB+0x28>
    {
        BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );
 8000ea4:	797b      	ldrb	r3, [r7, #5]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f7ff fe0b 	bl	8000ac4 <BLUENRG2__vReceiveData>
        if( pau8AttrData[0] == 0x01 )
        {
            BLUENRG2__bRemoteTxNotifyEnabled = true;
        }
    }
}
 8000eae:	e00c      	b.n	8000eca <BLUENRG2__vAttributeModifiedCB+0x42>
    else if( u16AttributeHandle == u16LocalTxCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <BLUENRG2__vAttributeModifiedCB+0x50>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d106      	bne.n	8000eca <BLUENRG2__vAttributeModifiedCB+0x42>
        if( pau8AttrData[0] == 0x01 )
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <BLUENRG2__vAttributeModifiedCB+0x42>
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <BLUENRG2__vAttributeModifiedCB+0x54>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000136 	.word	0x20000136
 8000ed8:	20000134 	.word	0x20000134
 8000edc:	200000e5 	.word	0x200000e5

08000ee0 <BLUENRG2__vUpdateLockStatus>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUpdateLockStatus( int8_t i8Rssi, int8_t i8LockRssiTh, bool bDebounceEnable )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	460b      	mov	r3, r1
 8000eec:	71bb      	strb	r3, [r7, #6]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	717b      	strb	r3, [r7, #5]
    static bool bLastLockState = false;

    if( i8Rssi != 127 )
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d03e      	beq.n	8000f78 <BLUENRG2__vUpdateLockStatus+0x98>
    {
        if( !bDebounceEnable )
 8000efa:	797b      	ldrb	r3, [r7, #5]
 8000efc:	f083 0301 	eor.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d013      	beq.n	8000f2e <BLUENRG2__vUpdateLockStatus+0x4e>
        {
            if( i8Rssi >= i8LockRssiTh )
 8000f06:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	db03      	blt.n	8000f1a <BLUENRG2__vUpdateLockStatus+0x3a>
            {
                BLUENRG2__bMasterDevIsUnlocked = true;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e002      	b.n	8000f20 <BLUENRG2__vUpdateLockStatus+0x40>
            }
            else
            {
                BLUENRG2__bMasterDevIsUnlocked = false;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
            }
            PRINT_DBG( "[RSSI] raw %d dBm\r\n", i8Rssi );
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <BLUENRG2__vUpdateLockStatus+0xd0>)
 8000f28:	f007 fd36 	bl	8008998 <iprintf>
 8000f2c:	e024      	b.n	8000f78 <BLUENRG2__vUpdateLockStatus+0x98>
        }
        else
        {
            int8_t i8ProcessedRssi;

            if( ( i8ProcessedRssi = BLUENRG2__i8GetProcessedRSSI( i8Rssi ) ) && BLUENRG2__bIsProcessedRSSIValid() )
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f848 	bl	8000fc8 <BLUENRG2__i8GetProcessedRSSI>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d019      	beq.n	8000f78 <BLUENRG2__vUpdateLockStatus+0x98>
 8000f44:	f000 f8a6 	bl	8001094 <BLUENRG2__bIsProcessedRSSIValid>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d014      	beq.n	8000f78 <BLUENRG2__vUpdateLockStatus+0x98>
            {
                PRINT_DBG( "[RSSI] raw %d dBm, cali %d dBm\r\n", i8Rssi, i8ProcessedRssi );
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <BLUENRG2__vUpdateLockStatus+0xd4>)
 8000f5a:	f007 fd1d 	bl	8008998 <iprintf>
                if( i8ProcessedRssi >= i8LockRssiTh )
 8000f5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	db03      	blt.n	8000f72 <BLUENRG2__vUpdateLockStatus+0x92>
                {
                    BLUENRG2__bMasterDevIsUnlocked = true;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e002      	b.n	8000f78 <BLUENRG2__vUpdateLockStatus+0x98>
                }
                else
                {
                    BLUENRG2__bMasterDevIsUnlocked = false;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    if( bLastLockState != BLUENRG2__bMasterDevIsUnlocked )
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <BLUENRG2__vUpdateLockStatus+0xd8>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d00e      	beq.n	8000fa2 <BLUENRG2__vUpdateLockStatus+0xc2>
    {
        bLastLockState = BLUENRG2__bMasterDevIsUnlocked;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <BLUENRG2__vUpdateLockStatus+0xd8>)
 8000f8a:	701a      	strb	r2, [r3, #0]
        PRINT_DBG( "%s !!! \r\n", BLUENRG2__bMasterDevIsUnlocked ? "UNLOCKED" : "LOCKED" );
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <BLUENRG2__vUpdateLockStatus+0xb8>
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <BLUENRG2__vUpdateLockStatus+0xdc>)
 8000f96:	e000      	b.n	8000f9a <BLUENRG2__vUpdateLockStatus+0xba>
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <BLUENRG2__vUpdateLockStatus+0xe0>)
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <BLUENRG2__vUpdateLockStatus+0xe4>)
 8000f9e:	f007 fcfb 	bl	8008998 <iprintf>
    }
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000e6 	.word	0x200000e6
 8000fb0:	08009bd4 	.word	0x08009bd4
 8000fb4:	08009be8 	.word	0x08009be8
 8000fb8:	20000130 	.word	0x20000130
 8000fbc:	08009c0c 	.word	0x08009c0c
 8000fc0:	08009c18 	.word	0x08009c18
 8000fc4:	08009c20 	.word	0x08009c20

08000fc8 <BLUENRG2__i8GetProcessedRSSI>:

static int8_t BLUENRG2__i8GetProcessedRSSI( int8_t i8RSSIVal )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    int8_t i8ReturnValue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]

    BLUENRG2__st8Queue.i8Buffer[BLUENRG2__st8Queue.u8Idx] = i8RSSIVal;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	5453      	strb	r3, [r2, r1]
    BLUENRG2__st8Queue.u8Idx++;
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fec:	715a      	strb	r2, [r3, #5]

    if( BLUENRG2__st8Queue.u8Idx >= BLUENRG2_Q_SZ )
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ff0:	795b      	ldrb	r3, [r3, #5]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d905      	bls.n	8001002 <BLUENRG2__i8GetProcessedRSSI+0x3a>
    {
        BLUENRG2__st8Queue.bValid = true;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	719a      	strb	r2, [r3, #6]

        BLUENRG2__st8Queue.u8Idx = 0U;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	715a      	strb	r2, [r3, #5]
    }

    if( BLUENRG2__st8Queue.bValid )
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001004:	799b      	ldrb	r3, [r3, #6]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d038      	beq.n	800107c <BLUENRG2__i8GetProcessedRSSI+0xb4>
    {
        int32_t i32TempRssi = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]

        int8_t i8MinValue = INT8_MAX;
 800100e:	237f      	movs	r3, #127	; 0x7f
 8001010:	73fb      	strb	r3, [r7, #15]
        int8_t i8MaxValue = INT8_MIN;
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	73bb      	strb	r3, [r7, #14]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 8001016:	2300      	movs	r3, #0
 8001018:	737b      	strb	r3, [r7, #13]
 800101a:	e01b      	b.n	8001054 <BLUENRG2__i8GetProcessedRSSI+0x8c>
        {
            int8_t i8Value = BLUENRG2__st8Queue.i8Buffer[u8Idx];
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	733b      	strb	r3, [r7, #12]

            if( i8Value > i8MaxValue )
 8001024:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800102c:	429a      	cmp	r2, r3
 800102e:	dd01      	ble.n	8001034 <BLUENRG2__i8GetProcessedRSSI+0x6c>
            {
                i8MaxValue = i8Value;
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	73bb      	strb	r3, [r7, #14]
            }

            if( i8Value < i8MinValue )
 8001034:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	429a      	cmp	r2, r3
 800103e:	da01      	bge.n	8001044 <BLUENRG2__i8GetProcessedRSSI+0x7c>
            {
                i8MinValue = i8Value;
 8001040:	7b3b      	ldrb	r3, [r7, #12]
 8001042:	73fb      	strb	r3, [r7, #15]
            }
            i32TempRssi += i8Value;
 8001044:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4413      	add	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	3301      	adds	r3, #1
 8001052:	737b      	strb	r3, [r7, #13]
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d9e0      	bls.n	800101c <BLUENRG2__i8GetProcessedRSSI+0x54>
        }

        i32TempRssi -= i8MinValue;
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	613b      	str	r3, [r7, #16]
        i32TempRssi -= i8MaxValue;
 8001064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	613b      	str	r3, [r7, #16]

        i8ReturnValue = (int8_t) ( i32TempRssi / (int32_t) ( BLUENRG2_Q_SZ - 2 ) );
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <BLUENRG2__i8GetProcessedRSSI+0xc8>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	17db      	asrs	r3, r3, #31
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	75fb      	strb	r3, [r7, #23]
    }

    return i8ReturnValue;
 800107c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001080:	4618      	mov	r0, r3
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200000d8 	.word	0x200000d8
 8001090:	55555556 	.word	0x55555556

08001094 <BLUENRG2__bIsProcessedRSSIValid>:

static bool BLUENRG2__bIsProcessedRSSIValid( void )
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    return BLUENRG2__st8Queue.bValid;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <BLUENRG2__bIsProcessedRSSIValid+0x14>)
 800109a:	799b      	ldrb	r3, [r3, #6]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200000d8 	.word	0x200000d8

080010ac <hci_le_connection_complete_event>:
                                       uint16_t Conn_Interval,
                                       uint16_t Conn_Latency,
                                       uint16_t Supervision_Timeout,
                                       uint8_t  Master_Clock_Accuracy )

{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4623      	mov	r3, r4
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	4603      	mov	r3, r0
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	4613      	mov	r3, r2
 80010c8:	70fb      	strb	r3, [r7, #3]
    BLUENRG2__stConnCTX.u16Handle = Connection_Handle;
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <hci_le_connection_complete_event+0x88>)
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	8053      	strh	r3, [r2, #2]
    BLUENRG2__stConnCTX.u8Role    = Role;
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <hci_le_connection_complete_event+0x88>)
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	7113      	strb	r3, [r2, #4]

    PRINT_DBG( "Connection Complete with peer address: " );
 80010d6:	4818      	ldr	r0, [pc, #96]	; (8001138 <hci_le_connection_complete_event+0x8c>)
 80010d8:	f007 fc5e 	bl	8008998 <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80010dc:	2305      	movs	r3, #5
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e00e      	b.n	8001100 <hci_le_connection_complete_event+0x54>
    {
        PRINT_DBG( "%02X-", Peer_Address[i8Idx] );
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	6a3a      	ldr	r2, [r7, #32]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4813      	ldr	r0, [pc, #76]	; (800113c <hci_le_connection_complete_event+0x90>)
 80010f0:	f007 fc52 	bl	8008998 <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dcec      	bgt.n	80010e2 <hci_le_connection_complete_event+0x36>
    }
    PRINT_DBG( "%02X\r\n", Peer_Address[0] );
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <hci_le_connection_complete_event+0x94>)
 8001110:	f007 fc42 	bl	8008998 <iprintf>

    if( BLUENRG2__stConnCTX.u8Role == BLUENRG2_MASTER_ROLE )
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <hci_le_connection_complete_event+0x88>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <hci_le_connection_complete_event+0x78>
    {
        BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_TX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <hci_le_connection_complete_event+0x98>)
 800111e:	2205      	movs	r2, #5
 8001120:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
    }
}
 8001122:	e002      	b.n	800112a <hci_le_connection_complete_event+0x7e>
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <hci_le_connection_complete_event+0x98>)
 8001126:	2209      	movs	r2, #9
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	200000a0 	.word	0x200000a0
 8001138:	08009c2c 	.word	0x08009c2c
 800113c:	08009c54 	.word	0x08009c54
 8001140:	08009c5c 	.word	0x08009c5c
 8001144:	2000009c 	.word	0x2000009c

08001148 <hci_disconnection_complete_event>:
//*****************************************************
//! \brief  This event indicates the discconnection from a peer device.
//!
//*****************************************************
void hci_disconnection_complete_event( uint8_t Status, uint16_t Connection_Handle, uint8_t Reason )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	460b      	mov	r3, r1
 8001154:	80bb      	strh	r3, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	71bb      	strb	r3, [r7, #6]

    PRINT_DBG( "Disconnection with reason: 0x%02X\r\n", Reason );
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <hci_disconnection_complete_event+0x2c>)
 8001160:	f007 fc1a 	bl	8008998 <iprintf>
    BLUENRG2__enState = BLUENRG2_STAT_INIT;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <hci_disconnection_complete_event+0x30>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08009c64 	.word	0x08009c64
 8001178:	2000009c 	.word	0x2000009c

0800117c <hci_le_advertising_report_event>:
//*****************************************************
//! \brief  An advertising report is received.
//!
//*****************************************************
void hci_le_advertising_report_event( uint8_t Num_Reports, Advertising_Report_t Advertising_Report[] )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
    /* Advertising_Report contains all the expected parameters */
    uint8_t u8DataLen = Advertising_Report[0].Length_Data;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	7a1b      	ldrb	r3, [r3, #8]
 800118c:	73fb      	strb	r3, [r7, #15]

    if( !BLUENRG2__stConnCTX.stDevice.bValid )
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <hci_le_advertising_report_event+0x90>)
 8001190:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d031      	beq.n	8001202 <hci_le_advertising_report_event+0x86>
    {
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12d      	bne.n	8001202 <hci_le_advertising_report_event+0x86>
            BLUENRG2__bFindDeviceName( u8DataLen, Advertising_Report[0].Data ) )
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe26 	bl	8000e00 <BLUENRG2__bFindDeviceName>
 80011b4:	4603      	mov	r3, r0
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d023      	beq.n	8001202 <hci_le_advertising_report_event+0x86>
        {
            BLUENRG2__vUpdateLockStatus( Advertising_Report[0].RSSI, BLUENRG2_RSSI_THRESHOLD_NEAR, false );
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe8a 	bl	8000ee0 <BLUENRG2__vUpdateLockStatus>

            if( BLUENRG2__bMasterDevIsUnlocked )
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <hci_le_advertising_report_event+0x94>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d016      	beq.n	8001202 <hci_le_advertising_report_event+0x86>
            {
                BLUENRG2__stConnCTX.stDevice.bValid = true;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <hci_le_advertising_report_event+0x90>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                BLUENRG2__stConnCTX.stDevice.u8Type = Advertising_Report[0].Address_Type;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	785a      	ldrb	r2, [r3, #1]
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <hci_le_advertising_report_event+0x90>)
 80011e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                BLUENRG_memcpy( BLUENRG2__stConnCTX.stDevice.au8Addr, Advertising_Report[0].Address,
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	1c9a      	adds	r2, r3, #2
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <hci_le_advertising_report_event+0x90>)
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	6810      	ldr	r0, [r2, #0]
 80011f0:	6018      	str	r0, [r3, #0]
 80011f2:	8892      	ldrh	r2, [r2, #4]
 80011f4:	809a      	strh	r2, [r3, #4]
                                sizeof( Advertising_Report[0].Address ) );
                PRINT_DBG( "Device found\r\n" );
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <hci_le_advertising_report_event+0x98>)
 80011f8:	f007 fc34 	bl	8008a64 <puts>
                BLUENRG2__enState = BLUENRG2_STAT_SCAN_DONE;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <hci_le_advertising_report_event+0x9c>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000a0 	.word	0x200000a0
 8001210:	200000e6 	.word	0x200000e6
 8001214:	08009c88 	.word	0x08009c88
 8001218:	2000009c 	.word	0x2000009c

0800121c <aci_gap_proc_complete_event>:
//*****************************************************
//! \brief  This event indicates the end of a GAP procedure.
//!
//*****************************************************
void aci_gap_proc_complete_event( uint8_t Procedure_Code, uint8_t Status, uint8_t u8DataLen, uint8_t Data[] )
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	460b      	mov	r3, r1
 800122a:	71bb      	strb	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	717b      	strb	r3, [r7, #5]
    if( Procedure_Code == GAP_GENERAL_DISCOVERY_PROC )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d112      	bne.n	800125c <aci_gap_proc_complete_event+0x40>
    {
        /* gap procedure complete has been raised as consequence of a GAP
           terminate procedure done after a device found event during the discovery procedure */
        if( BLUENRG2__stConnCTX.stDevice.bValid && !BLUENRG2__stConnCTX.bHasConnection )
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <aci_gap_proc_complete_event+0x4c>)
 8001238:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <aci_gap_proc_complete_event+0x3a>
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <aci_gap_proc_complete_event+0x4c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <aci_gap_proc_complete_event+0x3a>
        {
            BLUENRG2__enState = BLUENRG2_STAT_START_CONNECT;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <aci_gap_proc_complete_event+0x50>)
 8001250:	2203      	movs	r2, #3
 8001252:	701a      	strb	r2, [r3, #0]
        {
            // discovery procedure has been completed and no device found:
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
        }
    }
}
 8001254:	e002      	b.n	800125c <aci_gap_proc_complete_event+0x40>
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <aci_gap_proc_complete_event+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	200000a0 	.word	0x200000a0
 800126c:	2000009c 	.word	0x2000009c

08001270 <aci_gatt_attribute_modified_event>:
                                        uint16_t Attr_Handle, 
                                        uint16_t Offset,
                                        uint16_t Attr_Data_Length,
                                        uint8_t Attr_Data[] )
// clang-format on
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4623      	mov	r3, r4
 8001280:	80fb      	strh	r3, [r7, #6]
 8001282:	4603      	mov	r3, r0
 8001284:	80bb      	strh	r3, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	803b      	strh	r3, [r7, #0]
    BLUENRG2__vAttributeModifiedCB( Attr_Handle, Attr_Data_Length, Attr_Data );
 800128e:	883b      	ldrh	r3, [r7, #0]
 8001290:	b2d9      	uxtb	r1, r3
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fdf6 	bl	8000e88 <BLUENRG2__vAttributeModifiedCB>
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}

080012a4 <aci_gatt_notification_event>:
//*****************************************************
void aci_gatt_notification_event( uint16_t Connection_Handle,
                                  uint16_t Attribute_Handle,
                                  uint8_t  Attribute_Value_Length,
                                  uint8_t  Attribute_Value[] )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4603      	mov	r3, r0
 80012ae:	81fb      	strh	r3, [r7, #14]
 80012b0:	460b      	mov	r3, r1
 80012b2:	81bb      	strh	r3, [r7, #12]
 80012b4:	4613      	mov	r3, r2
 80012b6:	72fb      	strb	r3, [r7, #11]
    if( Attribute_Handle == BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET )
 80012b8:	89ba      	ldrh	r2, [r7, #12]
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <aci_gatt_notification_event+0x34>)
 80012bc:	8b1b      	ldrh	r3, [r3, #24]
 80012be:	3301      	adds	r3, #1
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d104      	bne.n	80012ce <aci_gatt_notification_event+0x2a>
    {
        BLUENRG2__vReceiveData( Attribute_Value, Attribute_Value_Length );
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fbfb 	bl	8000ac4 <BLUENRG2__vReceiveData>
    }
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000a0 	.word	0x200000a0

080012dc <aci_gatt_disc_read_char_by_uuid_resp_event>:
//*****************************************************
void aci_gatt_disc_read_char_by_uuid_resp_event( uint16_t Connection_Handle,
                                                 uint16_t Attribute_Handle,
                                                 uint8_t  Attribute_Value_Length,
                                                 uint8_t  Attribute_Value[] )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4603      	mov	r3, r0
 80012e6:	81fb      	strh	r3, [r7, #14]
 80012e8:	460b      	mov	r3, r1
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	72fb      	strb	r3, [r7, #11]
    PRINT_DBG( "aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle );
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4816      	ldr	r0, [pc, #88]	; (8001350 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>)
 80012f6:	f007 fb4f 	bl	8008998 <iprintf>

    if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80012fc:	799b      	ldrb	r3, [r3, #6]
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <aci_gatt_disc_read_char_by_uuid_resp_event+0x46>
    {
        BLUENRG2__stConnCTX.RemoteTx.u16Handle = Attribute_Handle;
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	8313      	strh	r3, [r2, #24]
        PRINT_DBG( "Remote TX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteTx.u16Handle );
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001310:	8b1b      	ldrh	r3, [r3, #24]
 8001312:	4619      	mov	r1, r3
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 8001316:	f007 fb3f 	bl	8008998 <iprintf>
        BLUENRG2__stConnCTX.RemoteTx.bValid = true;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800131c:	2201      	movs	r2, #1
 800131e:	719a      	strb	r2, [r3, #6]
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
        }
    }
}
 8001320:	e012      	b.n	8001348 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001324:	7e9b      	ldrb	r3, [r3, #26]
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	8593      	strh	r3, [r2, #44]	; 0x2c
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800133e:	f007 fb2b 	bl	8008998 <iprintf>
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001344:	2201      	movs	r2, #1
 8001346:	769a      	strb	r2, [r3, #26]
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08009c98 	.word	0x08009c98
 8001354:	200000a0 	.word	0x200000a0
 8001358:	08009ce0 	.word	0x08009ce0
 800135c:	08009d00 	.word	0x08009d00

08001360 <aci_gatt_proc_complete_event>:
//*****************************************************
//! \brief  GATT procedure complete event.
//!
//*****************************************************
void aci_gatt_proc_complete_event( uint16_t Connection_Handle, uint8_t Error_Code )
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4613      	mov	r3, r2
 800136e:	717b      	strb	r3, [r7, #5]
    if( BLUENRG2__stConnCTX.RemoteTx.bValid )
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <aci_gatt_proc_complete_event+0x50>)
 8001372:	799b      	ldrb	r3, [r3, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d014      	beq.n	80013a2 <aci_gatt_proc_complete_event+0x42>
    {
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <aci_gatt_proc_complete_event+0x50>)
 800137a:	7e9b      	ldrb	r3, [r3, #26]
 800137c:	f083 0301 	eor.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <aci_gatt_proc_complete_event+0x2e>
        {
            BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_RX;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <aci_gatt_proc_complete_event+0x54>)
 8001388:	2206      	movs	r2, #6
 800138a:	701a      	strb	r2, [r3, #0]
            {
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
            }
        }
    }
}
 800138c:	e009      	b.n	80013a2 <aci_gatt_proc_complete_event+0x42>
            if( !BLUENRG2__bRemoteTxNotifyEnabled )
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <aci_gatt_proc_complete_event+0x58>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <aci_gatt_proc_complete_event+0x42>
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <aci_gatt_proc_complete_event+0x54>)
 800139e:	2207      	movs	r2, #7
 80013a0:	701a      	strb	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200000a0 	.word	0x200000a0
 80013b4:	2000009c 	.word	0x2000009c
 80013b8:	200000e5 	.word	0x200000e5

080013bc <aci_gatt_tx_pool_available_event>:
//*****************************************************
//! \brief  GATT TX pool available event
//!
//*****************************************************
void aci_gatt_tx_pool_available_event( uint16_t Connection_Handle, uint16_t Available_Buffers )
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
    BLUENRG2__bTXbufferFull = false;
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <aci_gatt_tx_pool_available_event+0x24>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200000e4 	.word	0x200000e4

080013e4 <aci_att_exchange_mtu_resp_event>:
//*****************************************************
//! \brief  GATT ATT exchange MTU response event.
//!
//*****************************************************
void aci_att_exchange_mtu_resp_event( uint16_t Connection_Handle, uint16_t Server_RX_MTU )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	80bb      	strh	r3, [r7, #4]
    PRINT_DBG( "aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU );
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <aci_att_exchange_mtu_resp_event+0x60>)
 80013fa:	f007 facd 	bl	8008998 <iprintf>

    if( Server_RX_MTU <= CLIENT_MAX_MTU_SIZE )
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	2b9e      	cmp	r3, #158	; 0x9e
 8001402:	d805      	bhi.n	8001410 <aci_att_exchange_mtu_resp_event+0x2c>
    {
        write_char_len = Server_RX_MTU - 3;
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	3b03      	subs	r3, #3
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <aci_att_exchange_mtu_resp_event+0x64>)
 800140c:	801a      	strh	r2, [r3, #0]
 800140e:	e002      	b.n	8001416 <aci_att_exchange_mtu_resp_event+0x32>
    }
    else
    {
        write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <aci_att_exchange_mtu_resp_event+0x64>)
 8001412:	229b      	movs	r2, #155	; 0x9b
 8001414:	801a      	strh	r2, [r3, #0]
    }

    if( ( mtu_exchanged_wait == 0 ) || ( ( mtu_exchanged_wait == 1 ) ) )
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <aci_att_exchange_mtu_resp_event+0x68>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <aci_att_exchange_mtu_resp_event+0x42>
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <aci_att_exchange_mtu_resp_event+0x68>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d109      	bne.n	800143a <aci_att_exchange_mtu_resp_event+0x56>
        /**
         * The aci_att_exchange_mtu_resp_event is received also if the
         * aci_gatt_exchange_config is called by the other peer.
         * Here we manage this case.
         */
        if( mtu_exchanged_wait == 0 )
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <aci_att_exchange_mtu_resp_event+0x68>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <aci_att_exchange_mtu_resp_event+0x50>
        {
            mtu_exchanged_wait = 2;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <aci_att_exchange_mtu_resp_event+0x68>)
 8001430:	2202      	movs	r2, #2
 8001432:	701a      	strb	r2, [r3, #0]
        }
        mtu_exchanged = 1;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <aci_att_exchange_mtu_resp_event+0x6c>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
    }
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08009d20 	.word	0x08009d20
 8001448:	20000000 	.word	0x20000000
 800144c:	20000125 	.word	0x20000125
 8001450:	20000124 	.word	0x20000124

08001454 <GATT_DB_u8AddService>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t GATT_DB_u8AddService( void )
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b09d      	sub	sp, #116	; 0x74
 8001458:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800145a:	2306      	movs	r3, #6
 800145c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t cu8ServiceUUID[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <GATT_DB_u8AddService+0x110>)
 8001462:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDTx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800146c:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <GATT_DB_u8AddService+0x114>)
 800146e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDRx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <GATT_DB_u8AddService+0x118>)
 800147a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


  Service_UUID_t  unTempServiceUUID;
  Char_UUID_t unTempCharUUID;

  BLUENRG_memcpy(&unTempServiceUUID.Service_UUID_128, cu8ServiceUUID, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 8001484:	f107 0414 	add.w	r4, r7, #20
 8001488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800148c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &unTempServiceUUID, PRIMARY_SERVICE, max_attribute_records, &u16LocalServHandle);
 8001492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001496:	f107 0114 	add.w	r1, r7, #20
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <GATT_DB_u8AddService+0x11c>)
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	2002      	movs	r0, #2
 80014a2:	f004 fd8e 	bl	8005fc2 <aci_gatt_add_service>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80014ac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d14a      	bne.n	800154a <GATT_DB_u8AddService+0xf6>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDTx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80014b4:	1d3c      	adds	r4, r7, #4
 80014b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <GATT_DB_u8AddService+0x11c>)
 80014c2:	8818      	ldrh	r0, [r3, #0]
 80014c4:	1d3a      	adds	r2, r7, #4
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <GATT_DB_u8AddService+0x120>)
 80014c8:	9305      	str	r3, [sp, #20]
 80014ca:	2301      	movs	r3, #1
 80014cc:	9304      	str	r3, [sp, #16]
 80014ce:	2310      	movs	r3, #16
 80014d0:	9303      	str	r3, [sp, #12]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2310      	movs	r3, #16
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	233f      	movs	r3, #63	; 0x3f
 80014e0:	2102      	movs	r1, #2
 80014e2:	f004 fe44 	bl	800616e <aci_gatt_add_char>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalTxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80014ec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12c      	bne.n	800154e <GATT_DB_u8AddService+0xfa>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDRx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80014f4:	1d3c      	adds	r4, r7, #4
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <GATT_DB_u8AddService+0x11c>)
 8001502:	8818      	ldrh	r0, [r3, #0]
 8001504:	1d3a      	adds	r2, r7, #4
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <GATT_DB_u8AddService+0x124>)
 8001508:	9305      	str	r3, [sp, #20]
 800150a:	2301      	movs	r3, #1
 800150c:	9304      	str	r3, [sp, #16]
 800150e:	2310      	movs	r3, #16
 8001510:	9303      	str	r3, [sp, #12]
 8001512:	2301      	movs	r3, #1
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	230c      	movs	r3, #12
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	233f      	movs	r3, #63	; 0x3f
 8001520:	2102      	movs	r1, #2
 8001522:	f004 fe24 	bl	800616e <aci_gatt_add_char>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalRxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800152c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10e      	bne.n	8001552 <GATT_DB_u8AddService+0xfe>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", u16LocalTxCharHandle, u16LocalRxCharHandle);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <GATT_DB_u8AddService+0x120>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <GATT_DB_u8AddService+0x124>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <GATT_DB_u8AddService+0x128>)
 8001542:	f007 fa29 	bl	8008998 <iprintf>
  return BLE_STATUS_SUCCESS;
 8001546:	2300      	movs	r3, #0
 8001548:	e008      	b.n	800155c <GATT_DB_u8AddService+0x108>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800154a:	bf00      	nop
 800154c:	e002      	b.n	8001554 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001552:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 8001554:	480a      	ldr	r0, [pc, #40]	; (8001580 <GATT_DB_u8AddService+0x12c>)
 8001556:	f007 fa85 	bl	8008a64 <puts>
  return BLE_STATUS_ERROR ;
 800155a:	2347      	movs	r3, #71	; 0x47
}
 800155c:	4618      	mov	r0, r3
 800155e:	375c      	adds	r7, #92	; 0x5c
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	08009dbc 	.word	0x08009dbc
 8001568:	08009dcc 	.word	0x08009dcc
 800156c:	08009ddc 	.word	0x08009ddc
 8001570:	20000132 	.word	0x20000132
 8001574:	20000134 	.word	0x20000134
 8001578:	20000136 	.word	0x20000136
 800157c:	08009d54 	.word	0x08009d54
 8001580:	08009d98 	.word	0x08009d98

08001584 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d163      	bne.n	8001660 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b3e      	cmp	r3, #62	; 0x3e
 80015a4:	d11e      	bne.n	80015e4 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3302      	adds	r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	e014      	b.n	80015dc <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <APP_UserEvtRx+0xe4>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d108      	bne.n	80015d6 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <APP_UserEvtRx+0xe4>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	3201      	adds	r2, #1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b09      	cmp	r3, #9
 80015e0:	d9e7      	bls.n	80015b2 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80015e2:	e03d      	b.n	8001660 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2bff      	cmp	r3, #255	; 0xff
 80015ea:	d11e      	bne.n	800162a <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3302      	adds	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e014      	b.n	8001622 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	491b      	ldr	r1, [pc, #108]	; (800166c <APP_UserEvtRx+0xe8>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001606:	429a      	cmp	r2, r3
 8001608:	d108      	bne.n	800161c <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <APP_UserEvtRx+0xe8>)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	3202      	adds	r2, #2
 8001618:	4610      	mov	r0, r2
 800161a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b2a      	cmp	r3, #42	; 0x2a
 8001626:	d9e7      	bls.n	80015f8 <APP_UserEvtRx+0x74>
}
 8001628:	e01a      	b.n	8001660 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e014      	b.n	800165a <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b29a      	uxth	r2, r3
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <APP_UserEvtRx+0xec>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800163e:	429a      	cmp	r2, r3
 8001640:	d108      	bne.n	8001654 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <APP_UserEvtRx+0xec>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	3202      	adds	r2, #2
 8001650:	4610      	mov	r0, r2
 8001652:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b06      	cmp	r3, #6
 800165e:	d9e7      	bls.n	8001630 <APP_UserEvtRx+0xac>
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08009eb0 	.word	0x08009eb0
 800166c:	08009f00 	.word	0x08009f00
 8001670:	08009e78 	.word	0x08009e78

08001674 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001678:	2006      	movs	r0, #6
 800167a:	f001 f8b2 	bl	80027e2 <HAL_NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001686:	2006      	movs	r0, #6
 8001688:	f001 f8b9 	bl	80027fe <HAL_NVIC_DisableIRQ>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HCI_TL_SPI_Init+0x94>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	4a21      	ldr	r2, [pc, #132]	; (8001724 <HCI_TL_SPI_Init+0x94>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HCI_TL_SPI_Init+0x94>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f001 f912 	bl	80028f0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 f902 	bl	80028f0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80016ec:	2302      	movs	r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f001 f8f3 	bl	80028f0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f001 fba3 	bl	8002e5c <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8001716:	f000 fcf7 	bl	8002108 <BSP_SPI1_Init>
 800171a:	4603      	mov	r3, r0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000

08001728 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800172c:	2101      	movs	r1, #1
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f001 fa87 	bl	8002c44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001736:	2102      	movs	r1, #2
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 fa82 	bl	8002c44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f001 fa7c 	bl	8002c44 <HAL_GPIO_DeInit>
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}

08001752 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2102      	movs	r1, #2
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f001 fb7d 	bl	8002e5c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f001 fb76 	bl	8002e5c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001770:	2005      	movs	r0, #5
 8001772:	f000 fef7 	bl	8002564 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f001 fb6c 	bl	8002e5c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001784:	2005      	movs	r0, #5
 8001786:	f000 feed 	bl	8002564 <HAL_Delay>
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}

08001790 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HCI_TL_SPI_Receive+0xe0>)
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ae:	6018      	str	r0, [r3, #0]
 80017b0:	3304      	adds	r3, #4
 80017b2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80017b4:	f7ff ff65 	bl	8001682 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2102      	movs	r1, #2
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f001 fb4c 	bl	8002e5c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80017c4:	f107 0108 	add.w	r1, r7, #8
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2205      	movs	r2, #5
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fcca 	bl	8002168 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80017e4:	8bfb      	ldrh	r3, [r7, #30]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01e      	beq.n	8001828 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80017ea:	8bfa      	ldrh	r2, [r7, #30]
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d901      	bls.n	80017f6 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	777b      	strb	r3, [r7, #29]
 80017fa:	e010      	b.n	800181e <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80017fc:	f107 0116 	add.w	r1, r7, #22
 8001800:	f107 0317 	add.w	r3, r7, #23
 8001804:	2201      	movs	r2, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fcae 	bl	8002168 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	7dba      	ldrb	r2, [r7, #22]
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001818:	7f7b      	ldrb	r3, [r7, #29]
 800181a:	3301      	adds	r3, #1
 800181c:	777b      	strb	r3, [r7, #29]
 800181e:	7f7b      	ldrb	r3, [r7, #29]
 8001820:	b29b      	uxth	r3, r3
 8001822:	8bfa      	ldrh	r2, [r7, #30]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8e9      	bhi.n	80017fc <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001828:	f000 fe90 	bl	800254c <HAL_GetTick>
 800182c:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800182e:	e007      	b.n	8001840 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001830:	2101      	movs	r1, #1
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 faf9 	bl	8002e2c <HAL_GPIO_ReadPin>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001840:	f000 fe84 	bl	800254c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184e:	d3ef      	bcc.n	8001830 <HCI_TL_SPI_Receive+0xa0>
 8001850:	e000      	b.n	8001854 <HCI_TL_SPI_Receive+0xc4>
      break;
 8001852:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001854:	f7ff ff0e 	bl	8001674 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2102      	movs	r1, #2
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 fafc 	bl	8002e5c <HAL_GPIO_WritePin>

  return len;
 8001864:	7f7b      	ldrb	r3, [r7, #29]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	08009dec 	.word	0x08009dec

08001874 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001880:	4a41      	ldr	r2, [pc, #260]	; (8001988 <HCI_TL_SPI_Send+0x114>)
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188a:	6018      	str	r0, [r3, #0]
 800188c:	3304      	adds	r3, #4
 800188e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001890:	f000 fe5c 	bl	800254c <HAL_GetTick>
 8001894:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001896:	f7ff fef4 	bl	8001682 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800189a:	f000 fe57 	bl	800254c <HAL_GetTick>
 800189e:	61f8      	str	r0, [r7, #28]

    result = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f001 fad6 	bl	8002e5c <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80018b0:	e00a      	b.n	80018c8 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80018b2:	f000 fe4b 	bl	800254c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d903      	bls.n	80018c8 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80018c0:	f06f 0302 	mvn.w	r3, #2
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80018c6:	e004      	b.n	80018d2 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80018c8:	f000 f862 	bl	8001990 <IsDataAvailable>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ef      	beq.n	80018b2 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f113 0f03 	cmn.w	r3, #3
 80018d8:	d106      	bne.n	80018e8 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2102      	movs	r1, #2
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f001 fabb 	bl	8002e5c <HAL_GPIO_WritePin>
      break;
 80018e6:	e031      	b.n	800194c <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2205      	movs	r2, #5
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fc38 	bl	8002168 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8001908:	8b7a      	ldrh	r2, [r7, #26]
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	429a      	cmp	r2, r3
 800190e:	d306      	bcc.n	800191e <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	461a      	mov	r2, r3
 8001914:	491d      	ldr	r1, [pc, #116]	; (800198c <HCI_TL_SPI_Send+0x118>)
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fc26 	bl	8002168 <BSP_SPI1_SendRecv>
 800191c:	e002      	b.n	8001924 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800191e:	f06f 0301 	mvn.w	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2102      	movs	r1, #2
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fa96 	bl	8002e5c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001930:	f000 fe0c 	bl	800254c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d903      	bls.n	8001946 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800193e:	f06f 0302 	mvn.w	r3, #2
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001944:	e002      	b.n	800194c <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	dba6      	blt.n	800189a <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 800194c:	f000 fdfe 	bl	800254c <HAL_GetTick>
 8001950:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001952:	e007      	b.n	8001964 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001954:	2101      	movs	r1, #1
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f001 fa67 	bl	8002e2c <HAL_GPIO_ReadPin>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001964:	f000 fdf2 	bl	800254c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d3ef      	bcc.n	8001954 <HCI_TL_SPI_Send+0xe0>
 8001974:	e000      	b.n	8001978 <HCI_TL_SPI_Send+0x104>
      break;
 8001976:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001978:	f7ff fe7c 	bl	8001674 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800197e:	4618      	mov	r0, r3
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	08009df4 	.word	0x08009df4
 800198c:	20000140 	.word	0x20000140

08001990 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001994:	2101      	movs	r1, #1
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f001 fa47 	bl	8002e2c <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <hci_tl_lowlevel_init+0x54>)
 80019b8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <hci_tl_lowlevel_init+0x58>)
 80019bc:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <hci_tl_lowlevel_init+0x5c>)
 80019c0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <hci_tl_lowlevel_init+0x60>)
 80019c4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <hci_tl_lowlevel_init+0x64>)
 80019c8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <hci_tl_lowlevel_init+0x68>)
 80019cc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 fc69 	bl	80082a8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80019d6:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80019da:	4810      	ldr	r0, [pc, #64]	; (8001a1c <hci_tl_lowlevel_init+0x6c>)
 80019dc:	f000 ff43 	bl	8002866 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <hci_tl_lowlevel_init+0x70>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <hci_tl_lowlevel_init+0x6c>)
 80019e6:	f000 ff24 	bl	8002832 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2006      	movs	r0, #6
 80019f0:	f000 fedb 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019f4:	2006      	movs	r0, #6
 80019f6:	f000 fef4 	bl	80027e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08001691 	.word	0x08001691
 8001a08:	08001729 	.word	0x08001729
 8001a0c:	08001875 	.word	0x08001875
 8001a10:	08001791 	.word	0x08001791
 8001a14:	08001753 	.word	0x08001753
 8001a18:	080021a9 	.word	0x080021a9
 8001a1c:	20000138 	.word	0x20000138
 8001a20:	08001a25 	.word	0x08001a25

08001a24 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a28:	e005      	b.n	8001a36 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f006 fda0 	bl	8008570 <hci_notify_asynch_evt>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001a36:	f7ff ffab 	bl	8001990 <IsDataAvailable>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f4      	bne.n	8001a2a <hci_tl_lowlevel_isr+0x6>
 8001a40:	e000      	b.n	8001a44 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001a42:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0

  HAL_Init();
 8001a4a:	f000 fd0f 	bl	800246c <HAL_Init>
  SystemClock_Config();
 8001a4e:	f000 f807 	bl	8001a60 <SystemClock_Config>
  MX_GPIO_Init();
 8001a52:	f000 f857 	bl	8001b04 <MX_GPIO_Init>
  
  BLUENRG2_vInit();
 8001a56:	f7fe fdb3 	bl	80005c0 <BLUENRG2_vInit>

  while (1)
  {
    BLUENRG2_vProcess();
 8001a5a:	f7fe fdd3 	bl	8000604 <BLUENRG2_vProcess>
 8001a5e:	e7fc      	b.n	8001a5a <main+0x14>

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b096      	sub	sp, #88	; 0x58
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	2244      	movs	r2, #68	; 0x44
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 f8e8 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a86:	f001 fa0f 	bl	8002ea8 <HAL_PWREx_ControlVoltageScaling>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a90:	f000 f8ae 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a94:	2302      	movs	r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001aae:	2308      	movs	r3, #8
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fa46 	bl	8002f54 <HAL_RCC_OscConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ace:	f000 f88f 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2103      	movs	r1, #3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fe1a 	bl	8003724 <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001af6:	f000 f87b 	bl	8001bf0 <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3758      	adds	r7, #88	; 0x58
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_GPIO_Init+0xe8>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f001 f96a 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f000 fea6 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001ba4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f000 fe96 	bl	80028f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2006      	movs	r0, #6
 8001bca:	f000 fdee 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bce:	2006      	movs	r0, #6
 8001bd0:	f000 fe07 	bl	80027e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f000 fde6 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bde:	2028      	movs	r0, #40	; 0x28
 8001be0:	f000 fdff 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_MspInit+0x44>)
 8001c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_MspInit+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_MspInit+0x44>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x44>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x44>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	; 0x58
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x44>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 fc48 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <EXTI0_IRQHandler+0x10>)
 8001c9e:	f000 fdf7 	bl	8002890 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000138 	.word	0x20000138

08001cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <EXTI15_10_IRQHandler+0x10>)
 8001cb2:	f000 fded 	bl	8002890 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <BSP_LED_Init+0x20>)
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	08009e1c 	.word	0x08009e1c

08001ce4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <BSP_LED_On+0x28>)
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 f8ae 	bl	8002e5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000004 	.word	0x20000004

08001d10 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <BSP_LED_Off+0x28>)
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	2120      	movs	r1, #32
 8001d24:	2200      	movs	r2, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f898 	bl	8002e5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000004 	.word	0x20000004

08001d3c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2120      	movs	r1, #32
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f001 f867 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f000 fda2 	bl	80028f0 <HAL_GPIO_Init>

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <BSP_PB_Init+0x94>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d132      	bne.n	8001e42 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <BSP_PB_Init+0x98>)
 8001de2:	441a      	add	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	491b      	ldr	r1, [pc, #108]	; (8001e54 <BSP_PB_Init+0x9c>)
 8001de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f000 fd39 	bl	8002866 <HAL_EXTI_GetHandle>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001dfa:	f06f 0303 	mvn.w	r3, #3
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e01f      	b.n	8001e42 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <BSP_PB_Init+0x98>)
 8001e08:	1898      	adds	r0, r3, r2
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <BSP_PB_Init+0xa0>)
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2100      	movs	r1, #0
 8001e16:	f000 fd0c 	bl	8002832 <HAL_EXTI_RegisterCallback>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e20:	f06f 0303 	mvn.w	r3, #3
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e00c      	b.n	8001e42 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e28:	2028      	movs	r0, #40	; 0x28
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <BSP_PB_Init+0xa4>)
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	2200      	movs	r2, #0
 8001e34:	4619      	mov	r1, r3
 8001e36:	f000 fcb8 	bl	80027aa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e3a:	2328      	movs	r3, #40	; 0x28
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fcd0 	bl	80027e2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	08009e20 	.word	0x08009e20
 8001e50:	2000000c 	.word	0x2000000c
 8001e54:	08009e24 	.word	0x08009e24
 8001e58:	08009e28 	.word	0x08009e28
 8001e5c:	08009e2c 	.word	0x08009e2c

08001e60 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <BSP_PB_GetState+0x34>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ffd7 	bl	8002e2c <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fff0 	bl	8001e98 <BSP_PB_Callback>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4619      	mov	r1, r3
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <BUTTON_USER_GPIO_Init+0x70>)
 8001f1a:	f000 fce9 	bl	80028f0 <HAL_GPIO_Init>

}
 8001f1e:	bf00      	nop
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000800 	.word	0x48000800

08001f30 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d903      	bls.n	8001f4c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f44:	f06f 0301 	mvn.w	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e025      	b.n	8001f98 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	4914      	ldr	r1, [pc, #80]	; (8001fa4 <BSP_COM_Init+0x74>)
 8001f52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <BSP_COM_Init+0x78>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4403      	add	r3, r0
 8001f62:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	4613      	mov	r3, r2
 8001f68:	015b      	lsls	r3, r3, #5
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <BSP_COM_Init+0x78>)
 8001f70:	4413      	add	r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f86a 	bl	800204c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <BSP_COM_Init+0x78>)
 8001f84:	4413      	add	r3, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f810 	bl	8001fac <MX_USART2_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f92:	f06f 0303 	mvn.w	r3, #3
 8001f96:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f98:	68fb      	ldr	r3, [r7, #12]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	20000240 	.word	0x20000240

08001fac <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <MX_USART2_UART_Init+0x64>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f002 fe88 	bl	8004d0c <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40004400 	.word	0x40004400

08002014 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <__io_putchar+0x30>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <__io_putchar+0x34>)
 800202c:	1898      	adds	r0, r3, r2
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002034:	2201      	movs	r2, #1
 8002036:	f002 fec1 	bl	8004dbc <HAL_UART_Transmit>
  return ch;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200002c4 	.word	0x200002c4
 8002048:	20000240 	.word	0x20000240

0800204c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0ac      	sub	sp, #176	; 0xb0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2288      	movs	r2, #136	; 0x88
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f006 fdf1 	bl	8008c44 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002062:	2302      	movs	r3, #2
 8002064:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002066:	2300      	movs	r3, #0
 8002068:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4618      	mov	r0, r3
 8002070:	f001 fd5e 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <USART2_MspInit+0xb8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <USART2_MspInit+0xb8>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b20      	ldr	r3, [pc, #128]	; (8002104 <USART2_MspInit+0xb8>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <USART2_MspInit+0xb8>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <USART2_MspInit+0xb8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <USART2_MspInit+0xb8>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80020a4:	2304      	movs	r3, #4
 80020a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80020bc:	2307      	movs	r3, #7
 80020be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80020c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f000 fc10 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80020d0:	2308      	movs	r3, #8
 80020d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80020e8:	2307      	movs	r3, #7
 80020ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80020ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	f000 fbfa 	bl	80028f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80020fc:	bf00      	nop
 80020fe:	37b0      	adds	r7, #176	; 0xb0
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <BSP_SPI1_Init+0x54>)
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <BSP_SPI1_Init+0x58>)
 8002116:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <BSP_SPI1_Init+0x5c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	4911      	ldr	r1, [pc, #68]	; (8002164 <BSP_SPI1_Init+0x5c>)
 8002120:	600a      	str	r2, [r1, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <BSP_SPI1_Init+0x54>)
 8002128:	f002 fc7e 	bl	8004a28 <HAL_SPI_GetState>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002132:	480a      	ldr	r0, [pc, #40]	; (800215c <BSP_SPI1_Init+0x54>)
 8002134:	f000 f882 	bl	800223c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <BSP_SPI1_Init+0x54>)
 8002140:	f000 f83a 	bl	80021b8 <MX_SPI1_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800214a:	f06f 0307 	mvn.w	r3, #7
 800214e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002c8 	.word	0x200002c8
 8002160:	40013000 	.word	0x40013000
 8002164:	2000032c 	.word	0x2000032c

08002168 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002180:	9200      	str	r2, [sp, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <BSP_SPI1_SendRecv+0x3c>)
 8002188:	f002 fa3b 	bl	8004602 <HAL_SPI_TransmitReceive>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002192:	f06f 0305 	mvn.w	r3, #5
 8002196:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002198:	697b      	ldr	r3, [r7, #20]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002c8 	.word	0x200002c8

080021a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80021ac:	f000 f9ce 	bl	800254c <HAL_GetTick>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <MX_SPI1_Init+0x80>)
 80021c8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021de:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2228      	movs	r2, #40	; 0x28
 80021f8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2207      	movs	r2, #7
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f002 f942 	bl	80044a8 <HAL_SPI_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40013000 	.word	0x40013000

0800223c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <SPI1_MspInit+0xbc>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <SPI1_MspInit+0xbc>)
 800224a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224e:	6613      	str	r3, [r2, #96]	; 0x60
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <SPI1_MspInit+0xbc>)
 8002252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <SPI1_MspInit+0xbc>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <SPI1_MspInit+0xbc>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <SPI1_MspInit+0xbc>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <SPI1_MspInit+0xbc>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <SPI1_MspInit+0xbc>)
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <SPI1_MspInit+0xbc>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800228c:	2340      	movs	r3, #64	; 0x40
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800229c:	2305      	movs	r3, #5
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022aa:	f000 fb21 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80022be:	2305      	movs	r3, #5
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f000 fb10 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80022d0:	2308      	movs	r3, #8
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80022e0:	2305      	movs	r3, #5
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <SPI1_MspInit+0xc0>)
 80022ec:	f000 fb00 	bl	80028f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400

08002300 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
	}

return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe5d 	bl	8002014 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
	}
	return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239a:	605a      	str	r2, [r3, #4]
	return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f006 fc68 	bl	8008ce0 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20018000 	.word	0x20018000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000330 	.word	0x20000330
 8002444:	20000a30 	.word	0x20000a30

08002448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_Init+0x3c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_Init+0x3c>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002482:	2003      	movs	r0, #3
 8002484:	f000 f986 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002488:	2000      	movs	r0, #0
 800248a:	f000 f80f 	bl	80024ac <HAL_InitTick>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	e001      	b.n	800249e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800249a:	f7ff fbaf 	bl	8001bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800249e:	79fb      	ldrb	r3, [r7, #7]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <HAL_InitTick+0x6c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_InitTick+0x70>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_InitTick+0x6c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f99f 	bl	800281a <HAL_SYSTICK_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d809      	bhi.n	80024fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f000 f95b 	bl	80027aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_InitTick+0x74>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e007      	b.n	800250c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e004      	b.n	800250c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e001      	b.n	800250c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000020 	.word	0x20000020
 800251c:	20000018 	.word	0x20000018
 8002520:	2000001c 	.word	0x2000001c

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000020 	.word	0x20000020
 8002548:	20000334 	.word	0x20000334

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000334 	.word	0x20000334

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000020 	.word	0x20000020

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db12      	blt.n	8002684 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	490a      	ldr	r1, [pc, #40]	; (8002690 <__NVIC_DisableIRQ+0x44>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	3320      	adds	r3, #32
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002678:	f3bf 8f4f 	dsb	sy
}
 800267c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800267e:	f3bf 8f6f 	isb	sy
}
 8002682:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff05 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff1a 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff0d 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff1d 	bl	800264c <__NVIC_DisableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff94 	bl	8002750 <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	460b      	mov	r3, r1
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	605a      	str	r2, [r3, #4]
      break;
 8002850:	e002      	b.n	8002858 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
      break;
 8002856:	bf00      	nop
  }

  return status;
 8002858:	7dfb      	ldrb	r3, [r7, #23]
}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e003      	b.n	8002882 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2201      	movs	r2, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_EXTI_IRQHandler+0x5c>)
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4798      	blx	r3
    }
  }
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40010414 	.word	0x40010414

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fe:	e17f      	b.n	8002c00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8171 	beq.w	8002bfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d005      	beq.n	8002930 <HAL_GPIO_Init+0x40>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d130      	bne.n	8002992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002966:	2201      	movs	r2, #1
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0201 	and.w	r2, r3, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b03      	cmp	r3, #3
 800299c:	d118      	bne.n	80029d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029a4:	2201      	movs	r2, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	f003 0201 	and.w	r2, r3, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d017      	beq.n	8002a0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d123      	bne.n	8002a60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	6939      	ldr	r1, [r7, #16]
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80ac 	beq.w	8002bfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <HAL_GPIO_Init+0x330>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	; (8002c20 <HAL_GPIO_Init+0x330>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6613      	str	r3, [r2, #96]	; 0x60
 8002aae:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <HAL_GPIO_Init+0x330>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aba:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <HAL_GPIO_Init+0x334>)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ae4:	d025      	beq.n	8002b32 <HAL_GPIO_Init+0x242>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <HAL_GPIO_Init+0x338>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <HAL_GPIO_Init+0x23e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <HAL_GPIO_Init+0x33c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d019      	beq.n	8002b2a <HAL_GPIO_Init+0x23a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4d      	ldr	r2, [pc, #308]	; (8002c30 <HAL_GPIO_Init+0x340>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0x236>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4c      	ldr	r2, [pc, #304]	; (8002c34 <HAL_GPIO_Init+0x344>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00d      	beq.n	8002b22 <HAL_GPIO_Init+0x232>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4b      	ldr	r2, [pc, #300]	; (8002c38 <HAL_GPIO_Init+0x348>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <HAL_GPIO_Init+0x22e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_GPIO_Init+0x34c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_GPIO_Init+0x22a>
 8002b16:	2306      	movs	r3, #6
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x244>
 8002b32:	2300      	movs	r3, #0
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b44:	4937      	ldr	r1, [pc, #220]	; (8002c24 <HAL_GPIO_Init+0x334>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b76:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bf4:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f47f ae78 	bne.w	8002900 <HAL_GPIO_Init+0x10>
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40010000 	.word	0x40010000
 8002c28:	48000400 	.word	0x48000400
 8002c2c:	48000800 	.word	0x48000800
 8002c30:	48000c00 	.word	0x48000c00
 8002c34:	48001000 	.word	0x48001000
 8002c38:	48001400 	.word	0x48001400
 8002c3c:	48001800 	.word	0x48001800
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c52:	e0cd      	b.n	8002df0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c54:	2201      	movs	r2, #1
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80c0 	beq.w	8002dea <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c6a:	4a68      	ldr	r2, [pc, #416]	; (8002e0c <HAL_GPIO_DeInit+0x1c8>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c92:	d025      	beq.n	8002ce0 <HAL_GPIO_DeInit+0x9c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_GPIO_DeInit+0x1cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d01f      	beq.n	8002cdc <HAL_GPIO_DeInit+0x98>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <HAL_GPIO_DeInit+0x1d0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d019      	beq.n	8002cd8 <HAL_GPIO_DeInit+0x94>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a5c      	ldr	r2, [pc, #368]	; (8002e18 <HAL_GPIO_DeInit+0x1d4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_GPIO_DeInit+0x90>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <HAL_GPIO_DeInit+0x1d8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_GPIO_DeInit+0x8c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a5a      	ldr	r2, [pc, #360]	; (8002e20 <HAL_GPIO_DeInit+0x1dc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <HAL_GPIO_DeInit+0x88>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a59      	ldr	r2, [pc, #356]	; (8002e24 <HAL_GPIO_DeInit+0x1e0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_GPIO_DeInit+0x84>
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	e00c      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002cc8:	2307      	movs	r3, #7
 8002cca:	e00a      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002ccc:	2305      	movs	r3, #5
 8002cce:	e008      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e006      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e004      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_GPIO_DeInit+0x9e>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	f002 0203 	and.w	r2, r2, #3
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4093      	lsls	r3, r2
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d132      	bne.n	8002d58 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	494b      	ldr	r1, [pc, #300]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4947      	ldr	r1, [pc, #284]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4944      	ldr	r1, [pc, #272]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	4940      	ldr	r1, [pc, #256]	; (8002e28 <HAL_GPIO_DeInit+0x1e4>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_GPIO_DeInit+0x1c8>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	4830      	ldr	r0, [pc, #192]	; (8002e0c <HAL_GPIO_DeInit+0x1c8>)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	400a      	ands	r2, r1
 8002d52:	3302      	adds	r3, #2
 8002d54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2103      	movs	r1, #3
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	08d2      	lsrs	r2, r2, #3
 8002d8c:	4019      	ands	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2103      	movs	r1, #3
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	2101      	movs	r1, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2103      	movs	r1, #3
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	401a      	ands	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3301      	adds	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f af2b 	bne.w	8002c54 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	48000400 	.word	0x48000400
 8002e14:	48000800 	.word	0x48000800
 8002e18:	48000c00 	.word	0x48000c00
 8002e1c:	48001000 	.word	0x48001000
 8002e20:	48001400 	.word	0x48001400
 8002e24:	48001800 	.word	0x48001800
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	d130      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d038      	beq.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2232      	movs	r2, #50	; 0x32
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eec:	e002      	b.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d102      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f2      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d110      	bne.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e00f      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d007      	beq.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f30:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	20000018 	.word	0x20000018
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e3d8      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b97      	ldr	r3, [pc, #604]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b94      	ldr	r3, [pc, #592]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80e4 	beq.w	8003150 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCC_OscConfig+0x4a>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	f040 808b 	bne.w	80030ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 8087 	bne.w	80030ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9e:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e3b0      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	4b82      	ldr	r3, [pc, #520]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x7c>
 8002fc6:	4b7f      	ldr	r3, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_OscConfig+0x88>
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d223      	bcs.n	8003028 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd43 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e391      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff4:	4b73      	ldr	r3, [pc, #460]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a72      	ldr	r2, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	496d      	ldr	r1, [pc, #436]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4968      	ldr	r1, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
 8003026:	e025      	b.n	8003074 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b66      	ldr	r3, [pc, #408]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4960      	ldr	r1, [pc, #384]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	495b      	ldr	r1, [pc, #364]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd03 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e351      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003074:	f000 fc38 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	4a4e      	ldr	r2, [pc, #312]	; (80031cc <HAL_RCC_OscConfig+0x278>)
 8003092:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003094:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <HAL_RCC_OscConfig+0x27c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fa07 	bl	80024ac <HAL_InitTick>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d052      	beq.n	800314e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	e335      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d032      	beq.n	800311a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fa44 	bl	800254c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c8:	f7ff fa40 	bl	800254c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e31e      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030da:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030ec:	f043 0308 	orr.w	r3, r3, #8
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4931      	ldr	r1, [pc, #196]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	492c      	ldr	r1, [pc, #176]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e01a      	b.n	8003150 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003126:	f7ff fa11 	bl	800254c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312e:	f7ff fa0d 	bl	800254c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e2eb      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x1da>
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d074      	beq.n	8003246 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x21a>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d10e      	bne.n	8003186 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d10b      	bne.n	8003186 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d064      	beq.n	8003244 <HAL_RCC_OscConfig+0x2f0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d160      	bne.n	8003244 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e2c8      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x24a>
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e026      	b.n	80031ec <HAL_RCC_OscConfig+0x298>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a6:	d115      	bne.n	80031d4 <HAL_RCC_OscConfig+0x280>
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80031ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a02      	ldr	r2, [pc, #8]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e014      	b.n	80031ec <HAL_RCC_OscConfig+0x298>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08009e30 	.word	0x08009e30
 80031cc:	20000018 	.word	0x20000018
 80031d0:	2000001c 	.word	0x2000001c
 80031d4:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a9f      	ldr	r2, [pc, #636]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b9d      	ldr	r3, [pc, #628]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a9c      	ldr	r2, [pc, #624]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7ff f9aa 	bl	800254c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7ff f9a6 	bl	800254c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e284      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x2a8>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7ff f996 	bl	800254c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff f992 	bl	800254c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e270      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x2d0>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d060      	beq.n	8003314 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x310>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d119      	bne.n	8003292 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d116      	bne.n	8003292 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003264:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x328>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e24d      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	4973      	ldr	r1, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003290:	e040      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d023      	beq.n	80032e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329a:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7ff f951 	bl	800254c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7ff f94d 	bl	800254c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e22b      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	495f      	ldr	r1, [pc, #380]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
 80032e0:	e018      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7ff f92d 	bl	800254c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7ff f929 	bl	800254c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e207      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03c      	beq.n	800339a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01c      	beq.n	8003362 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003328:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	4a4a      	ldr	r2, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7ff f908 	bl	800254c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7ff f904 	bl	800254c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1e2      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ef      	beq.n	8003340 <HAL_RCC_OscConfig+0x3ec>
 8003360:	e01b      	b.n	800339a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7ff f8eb 	bl	800254c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7ff f8e7 	bl	800254c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1c5      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ef      	bne.n	800337a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a6 	beq.w	80034f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCC_OscConfig+0x508>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d118      	bne.n	8003412 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_OscConfig+0x508>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_RCC_OscConfig+0x508>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ec:	f7ff f8ae 	bl	800254c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7ff f8aa 	bl	800254c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e188      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x508>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <HAL_RCC_OscConfig+0x4d8>
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342a:	e029      	b.n	8003480 <HAL_RCC_OscConfig+0x52c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d115      	bne.n	8003460 <HAL_RCC_OscConfig+0x50c>
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_OscConfig+0x504>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x52c>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
 8003460:	4b91      	ldr	r3, [pc, #580]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4a90      	ldr	r2, [pc, #576]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003470:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	4a8c      	ldr	r2, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d016      	beq.n	80034b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7ff f860 	bl	800254c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7ff f85c 	bl	800254c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e138      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a6:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ed      	beq.n	8003490 <HAL_RCC_OscConfig+0x53c>
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7ff f849 	bl	800254c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7ff f845 	bl	800254c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e121      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d4:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ed      	bne.n	80034be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 810c 	beq.w	8003716 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 80d4 	bne.w	80036b0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003508:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d130      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d127      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11f      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	2a07      	cmp	r2, #7
 800354a:	bf14      	ite	ne
 800354c:	2201      	movne	r2, #1
 800354e:	2200      	moveq	r2, #0
 8003550:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	4293      	cmp	r3, r2
 8003554:	d113      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d109      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d06e      	beq.n	800365c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d069      	beq.n	8003658 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003584:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003590:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0bb      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ac:	f7fe ffce 	bl	800254c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe ffca 	bl	800254c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0a8      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCC_OscConfig+0x758>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ec:	0212      	lsls	r2, r2, #8
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f4:	0852      	lsrs	r2, r2, #1
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0552      	lsls	r2, r2, #21
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	3a01      	subs	r2, #1
 8003604:	0652      	lsls	r2, r2, #25
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800360c:	0912      	lsrs	r2, r2, #4
 800360e:	0452      	lsls	r2, r2, #17
 8003610:	430a      	orrs	r2, r1
 8003612:	4925      	ldr	r1, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003614:	4313      	orrs	r3, r2
 8003616:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003630:	f7fe ff8c 	bl	800254c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe ff88 	bl	800254c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e066      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003656:	e05e      	b.n	8003716 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e05d      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d156      	bne.n	8003716 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003680:	f7fe ff64 	bl	800254c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe ff60 	bl	800254c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03e      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x754>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x734>
 80036a6:	e036      	b.n	8003716 <HAL_RCC_OscConfig+0x7c2>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d02d      	beq.n	8003712 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036d4:	f023 0303 	bic.w	r3, r3, #3
 80036d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 80036e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe ff2f 	bl	800254c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe ff2b 	bl	800254c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_OscConfig+0x7cc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x79e>
 8003710:	e001      	b.n	8003716 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0c8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4961      	ldr	r1, [pc, #388]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d04c      	beq.n	800380e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	4b56      	ldr	r3, [pc, #344]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d121      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e09e      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e092      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e086      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e07e      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037cc:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	493f      	ldr	r1, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fe feb5 	bl	800254c <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	f7fe feb1 	bl	800254c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e066      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 020c 	and.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	429a      	cmp	r2, r3
 800380c:	d1eb      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381a:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	492c      	ldr	r1, [pc, #176]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d210      	bcs.n	800385c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4924      	ldr	r1, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e036      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4918      	ldr	r1, [pc, #96]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4910      	ldr	r1, [pc, #64]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389a:	f000 f825 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fdf4 	bl	80024ac <HAL_InitTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c8:	7afb      	ldrb	r3, [r7, #11]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08009e30 	.word	0x08009e30
 80038e0:	20000018 	.word	0x20000018
 80038e4:	2000001c 	.word	0x2000001c

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d121      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11e      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d102      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e004      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d101      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d134      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xa6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xac>
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003996:	617b      	str	r3, [r7, #20]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	617b      	str	r3, [r7, #20]
      break;
 800399e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	fb03 f202 	mul.w	r2, r3, r2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0e5b      	lsrs	r3, r3, #25
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e0:	69bb      	ldr	r3, [r7, #24]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08009e48 	.word	0x08009e48
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000018 	.word	0x20000018

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08009e40 	.word	0x08009e40

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a48:	f7ff ffda 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08009e40 	.word	0x08009e40

08003a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a88:	f7ff fa00 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003a8c:	6178      	str	r0, [r7, #20]
 8003a8e:	e014      	b.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff f9f0 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d10b      	bne.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d919      	bls.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2ba0      	cmp	r3, #160	; 0xa0
 8003acc:	d902      	bls.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ace:	2302      	movs	r3, #2
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e013      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e010      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d902      	bls.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e00a      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d102      	bne.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e004      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d101      	bne.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 0207 	bic.w	r2, r3, #7
 8003b04:	4909      	ldr	r1, [pc, #36]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40022000 	.word	0x40022000

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d041      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b54:	d02a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b5a:	d824      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b66:	d81e      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b70:	d010      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b72:	e018      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b74:	4b86      	ldr	r3, [pc, #536]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a85      	ldr	r2, [pc, #532]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b80:	e015      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fabb 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b92:	e00c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3320      	adds	r3, #32
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fba6 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba4:	e003      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4b76      	ldr	r3, [pc, #472]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc2:	4973      	ldr	r1, [pc, #460]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d041      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be4:	d02a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bea:	d824      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf6:	d81e      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c00:	d010      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c02:	e018      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a61      	ldr	r2, [pc, #388]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c10:	e015      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa73 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c22:	e00c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3320      	adds	r3, #32
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb5e 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c44:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c52:	494f      	ldr	r1, [pc, #316]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a0 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb0:	f7fe fc4c 	bl	800254c <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb6:	e009      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fe fc48 	bl	800254c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d15c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d019      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fc07 	bl	800254c <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d40:	e00b      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fc03 	bl	800254c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	74fb      	strb	r3, [r7, #19]
            break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ec      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	4904      	ldr	r1, [pc, #16]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a9d      	ldr	r2, [pc, #628]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dba:	4b98      	ldr	r3, [pc, #608]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	4994      	ldr	r1, [pc, #592]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	498c      	ldr	r1, [pc, #560]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4983      	ldr	r1, [pc, #524]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	497b      	ldr	r1, [pc, #492]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	4972      	ldr	r1, [pc, #456]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	496a      	ldr	r1, [pc, #424]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	4961      	ldr	r1, [pc, #388]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea8:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	4959      	ldr	r1, [pc, #356]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eca:	4b54      	ldr	r3, [pc, #336]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	4950      	ldr	r1, [pc, #320]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	4948      	ldr	r1, [pc, #288]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	493f      	ldr	r1, [pc, #252]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d028      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3e:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a31      	ldr	r2, [pc, #196]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
 8003f5c:	e011      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f8c8 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	491f      	ldr	r1, [pc, #124]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb8:	60d3      	str	r3, [r2, #12]
 8003fba:	e011      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f899 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e014      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f867 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02f      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	4928      	ldr	r1, [pc, #160]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f844 	bl	8004104 <RCCEx_PLLSAI1_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d014      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	74bb      	strb	r3, [r7, #18]
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3320      	adds	r3, #32
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f925 	bl	80042ec <RCCEx_PLLSAI2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000

08004104 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004112:	4b75      	ldr	r3, [pc, #468]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800411e:	4b72      	ldr	r3, [pc, #456]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0203 	and.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d10d      	bne.n	800414a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
       ||
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
       ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d047      	beq.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e044      	b.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d018      	beq.n	800418a <RCCEx_PLLSAI1_Config+0x86>
 8004158:	2b03      	cmp	r3, #3
 800415a:	d825      	bhi.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
 800415c:	2b01      	cmp	r3, #1
 800415e:	d002      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0x62>
 8004160:	2b02      	cmp	r3, #2
 8004162:	d009      	beq.n	8004178 <RCCEx_PLLSAI1_Config+0x74>
 8004164:	e020      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004166:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11d      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004176:	e01a      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004178:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d116      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004188:	e013      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800418a:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a6:	e006      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e004      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	430b      	orrs	r3, r1
 80041d4:	4944      	ldr	r1, [pc, #272]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d17d      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ec:	f7fe f9ae 	bl	800254c <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f2:	e009      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f4:	f7fe f9aa 	bl	800254c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d902      	bls.n	8004208 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	73fb      	strb	r3, [r7, #15]
        break;
 8004206:	e005      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004208:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ef      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d160      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d111      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6892      	ldr	r2, [r2, #8]
 8004230:	0211      	lsls	r1, r2, #8
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68d2      	ldr	r2, [r2, #12]
 8004236:	0912      	lsrs	r2, r2, #4
 8004238:	0452      	lsls	r2, r2, #17
 800423a:	430a      	orrs	r2, r1
 800423c:	492a      	ldr	r1, [pc, #168]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
 8004242:	e027      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d112      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004252:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	0211      	lsls	r1, r2, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6912      	ldr	r2, [r2, #16]
 8004260:	0852      	lsrs	r2, r2, #1
 8004262:	3a01      	subs	r2, #1
 8004264:	0552      	lsls	r2, r2, #21
 8004266:	430a      	orrs	r2, r1
 8004268:	491f      	ldr	r1, [pc, #124]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
 800426e:	e011      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6892      	ldr	r2, [r2, #8]
 8004280:	0211      	lsls	r1, r2, #8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6952      	ldr	r2, [r2, #20]
 8004286:	0852      	lsrs	r2, r2, #1
 8004288:	3a01      	subs	r2, #1
 800428a:	0652      	lsls	r2, r2, #25
 800428c:	430a      	orrs	r2, r1
 800428e:	4916      	ldr	r1, [pc, #88]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fe f954 	bl	800254c <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a8:	f7fe f950 	bl	800254c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
          break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ef      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4904      	ldr	r1, [pc, #16]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000

080042ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004306:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
       ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800431e:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
       ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d047      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e044      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d018      	beq.n	8004372 <RCCEx_PLLSAI2_Config+0x86>
 8004340:	2b03      	cmp	r3, #3
 8004342:	d825      	bhi.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <RCCEx_PLLSAI2_Config+0x62>
 8004348:	2b02      	cmp	r3, #2
 800434a:	d009      	beq.n	8004360 <RCCEx_PLLSAI2_Config+0x74>
 800434c:	e020      	b.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800434e:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11d      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435e:	e01a      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004370:	e013      	b.n	800439a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004372:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800438e:	e006      	b.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e004      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800439e:	bf00      	nop
    }

    if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	430b      	orrs	r3, r1
 80043bc:	4939      	ldr	r1, [pc, #228]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d167      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c8:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a35      	ldr	r2, [pc, #212]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fe f8ba 	bl	800254c <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043da:	e009      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043dc:	f7fe f8b6 	bl	800254c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d902      	bls.n	80043f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	73fb      	strb	r3, [r7, #15]
        break;
 80043ee:	e005      	b.n	80043fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043f0:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ef      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d14a      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004408:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	0211      	lsls	r1, r2, #8
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	0912      	lsrs	r2, r2, #4
 8004420:	0452      	lsls	r2, r2, #17
 8004422:	430a      	orrs	r2, r1
 8004424:	491f      	ldr	r1, [pc, #124]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	614b      	str	r3, [r1, #20]
 800442a:	e011      	b.n	8004450 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004434:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6912      	ldr	r2, [r2, #16]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	430a      	orrs	r2, r1
 800444a:	4916      	ldr	r1, [pc, #88]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe f876 	bl	800254c <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004462:	e009      	b.n	8004478 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004464:	f7fe f872 	bl	800254c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          break;
 8004476:	e005      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4904      	ldr	r1, [pc, #16]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004494:	4313      	orrs	r3, r2
 8004496:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e095      	b.n	80045e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	e005      	b.n	80044e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f877 	bl	80045ee <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004520:	d902      	bls.n	8004528 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e002      	b.n	800452e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004536:	d007      	beq.n	8004548 <HAL_SPI_Init+0xa0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	ea42 0103 	orr.w	r1, r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 0204 	and.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b08a      	sub	sp, #40	; 0x28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004610:	2301      	movs	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x26>
 8004624:	2302      	movs	r3, #2
 8004626:	e1fb      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x41e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004630:	f7fd ff8c 	bl	800254c <HAL_GetTick>
 8004634:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800463c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004648:	887b      	ldrh	r3, [r7, #2]
 800464a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800464c:	7efb      	ldrb	r3, [r7, #27]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d00e      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x6e>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004658:	d106      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x66>
 8004662:	7efb      	ldrb	r3, [r7, #27]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d003      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800466e:	e1cd      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x80>
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004688:	e1c0      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b04      	cmp	r3, #4
 8004694:	d003      	beq.n	800469e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2205      	movs	r2, #5
 800469a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	887a      	ldrh	r2, [r7, #2]
 80046ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	887a      	ldrh	r2, [r7, #2]
 80046b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e0:	d802      	bhi.n	80046e8 <HAL_SPI_TransmitReceive+0xe6>
 80046e2:	8a3b      	ldrh	r3, [r7, #16]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d908      	bls.n	80046fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e007      	b.n	800470a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d007      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004730:	d97c      	bls.n	800482c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x13e>
 800473a:	8a7b      	ldrh	r3, [r7, #18]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d169      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	881a      	ldrh	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	1c9a      	adds	r2, r3, #2
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004764:	e056      	b.n	8004814 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d11b      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x1aa>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x1aa>
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b01      	cmp	r3, #1
 8004782:	d113      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d11c      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x1f2>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	b292      	uxth	r2, r2
 80047d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047f4:	f7fd feaa 	bl	800254c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004800:	429a      	cmp	r2, r3
 8004802:	d807      	bhi.n	8004814 <HAL_SPI_TransmitReceive+0x212>
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d003      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004812:	e0fb      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1a3      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x164>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d19d      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x164>
 800482a:	e0df      	b.n	80049ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_SPI_TransmitReceive+0x23a>
 8004834:	8a7b      	ldrh	r3, [r7, #18]
 8004836:	2b01      	cmp	r3, #1
 8004838:	f040 80cb 	bne.w	80049d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d912      	bls.n	800486c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b02      	subs	r3, #2
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800486a:	e0b2      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004892:	e09e      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d134      	bne.n	800490c <HAL_SPI_TransmitReceive+0x30a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02f      	beq.n	800490c <HAL_SPI_TransmitReceive+0x30a>
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d12c      	bne.n	800490c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d912      	bls.n	80048e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b02      	subs	r3, #2
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048e0:	e012      	b.n	8004908 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d148      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x3aa>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d042      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d923      	bls.n	800497a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	b292      	uxth	r2, r2
 800493e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b02      	subs	r3, #2
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d81f      	bhi.n	80049a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	e016      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f103 020c 	add.w	r2, r3, #12
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049ac:	f7fd fdce 	bl	800254c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d803      	bhi.n	80049c4 <HAL_SPI_TransmitReceive+0x3c2>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x3c8>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049d0:	e01c      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af5b 	bne.w	8004894 <HAL_SPI_TransmitReceive+0x292>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f af54 	bne.w	8004894 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f945 	bl	8004c80 <SPI_EndRxTxTransaction>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
 8004a08:	e000      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3728      	adds	r7, #40	; 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a36:	b2db      	uxtb	r3, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a54:	f7fd fd7a 	bl	800254c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a64:	f7fd fd72 	bl	800254c <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	0d1b      	lsrs	r3, r3, #20
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7a:	e054      	b.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d050      	beq.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a84:	f7fd fd62 	bl	800254c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d902      	bls.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d13d      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d111      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d004      	beq.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac6:	d107      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d10f      	bne.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e017      	b.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d19b      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000018 	.word	0x20000018

08004b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b66:	f7fd fcf1 	bl	800254c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b76:	f7fd fce9 	bl	800254c <HAL_GetTick>
 8004b7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b84:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00da      	lsls	r2, r3, #3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	0d1b      	lsrs	r3, r3, #20
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b9c:	e060      	b.n	8004c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ba4:	d107      	bne.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d050      	beq.n	8004c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bbe:	f7fd fcc5 	bl	800254c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d902      	bls.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d13d      	bne.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bec:	d111      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d004      	beq.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d107      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1a:	d10f      	bne.n	8004c3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e010      	b.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d196      	bne.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000018 	.word	0x20000018

08004c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff ff5b 	bl	8004b54 <SPI_WaitFifoStateUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca8:	f043 0220 	orr.w	r2, r3, #32
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e027      	b.n	8004d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fec0 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e014      	b.n	8004d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff ff34 	bl	8004b54 <SPI_WaitFifoStateUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e000      	b.n	8004d04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e040      	b.n	8004da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f83a 	bl	8004da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8ca 	bl	8004ee4 <UART_SetConfig>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e022      	b.n	8004da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb76 	bl	8005454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fbfd 	bl	8005598 <UART_CheckIdleState>
 8004d9e:	4603      	mov	r3, r0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	f040 8082 	bne.w	8004eda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_UART_Transmit+0x26>
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07a      	b.n	8004edc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Transmit+0x38>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e073      	b.n	8004edc <HAL_UART_Transmit+0x120>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2221      	movs	r2, #33	; 0x21
 8004e08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0a:	f7fd fb9f 	bl	800254c <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d108      	bne.n	8004e3c <HAL_UART_Transmit+0x80>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e003      	b.n	8004e44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e4c:	e02d      	b.n	8004eaa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fbe6 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e039      	b.n	8004edc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7a:	b292      	uxth	r2, r2
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	3302      	adds	r3, #2
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	e008      	b.n	8004e98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	b292      	uxth	r2, r2
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3301      	adds	r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1cb      	bne.n	8004e4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2140      	movs	r1, #64	; 0x40
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fbb2 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e005      	b.n	8004edc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b08a      	sub	sp, #40	; 0x28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4ba4      	ldr	r3, [pc, #656]	; (80051a4 <UART_SetConfig+0x2c0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a99      	ldr	r2, [pc, #612]	; (80051a8 <UART_SetConfig+0x2c4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a90      	ldr	r2, [pc, #576]	; (80051ac <UART_SetConfig+0x2c8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d126      	bne.n	8004fbc <UART_SetConfig+0xd8>
 8004f6e:	4b90      	ldr	r3, [pc, #576]	; (80051b0 <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d81b      	bhi.n	8004fb4 <UART_SetConfig+0xd0>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0xa0>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e116      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e112      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e10e      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e10a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e106      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7c      	ldr	r2, [pc, #496]	; (80051b4 <UART_SetConfig+0x2d0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d138      	bne.n	8005038 <UART_SetConfig+0x154>
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <UART_SetConfig+0x2cc>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f003 030c 	and.w	r3, r3, #12
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d82d      	bhi.n	8005030 <UART_SetConfig+0x14c>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <UART_SetConfig+0xf8>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005031 	.word	0x08005031
 8004fe4:	08005031 	.word	0x08005031
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005031 	.word	0x08005031
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005031 	.word	0x08005031
 8005004:	08005031 	.word	0x08005031
 8005008:	08005031 	.word	0x08005031
 800500c:	08005029 	.word	0x08005029
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005016:	e0d8      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501e:	e0d4      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005026:	e0d0      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502e:	e0cc      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e0c8      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5e      	ldr	r2, [pc, #376]	; (80051b8 <UART_SetConfig+0x2d4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d125      	bne.n	800508e <UART_SetConfig+0x1aa>
 8005042:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <UART_SetConfig+0x2cc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d016      	beq.n	800507e <UART_SetConfig+0x19a>
 8005050:	2b30      	cmp	r3, #48	; 0x30
 8005052:	d818      	bhi.n	8005086 <UART_SetConfig+0x1a2>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d00a      	beq.n	800506e <UART_SetConfig+0x18a>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d814      	bhi.n	8005086 <UART_SetConfig+0x1a2>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <UART_SetConfig+0x182>
 8005060:	2b10      	cmp	r3, #16
 8005062:	d008      	beq.n	8005076 <UART_SetConfig+0x192>
 8005064:	e00f      	b.n	8005086 <UART_SetConfig+0x1a2>
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506c:	e0ad      	b.n	80051ca <UART_SetConfig+0x2e6>
 800506e:	2302      	movs	r3, #2
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005074:	e0a9      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005076:	2304      	movs	r3, #4
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507c:	e0a5      	b.n	80051ca <UART_SetConfig+0x2e6>
 800507e:	2308      	movs	r3, #8
 8005080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005084:	e0a1      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005086:	2310      	movs	r3, #16
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508c:	e09d      	b.n	80051ca <UART_SetConfig+0x2e6>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a4a      	ldr	r2, [pc, #296]	; (80051bc <UART_SetConfig+0x2d8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d125      	bne.n	80050e4 <UART_SetConfig+0x200>
 8005098:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <UART_SetConfig+0x2cc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050a2:	2bc0      	cmp	r3, #192	; 0xc0
 80050a4:	d016      	beq.n	80050d4 <UART_SetConfig+0x1f0>
 80050a6:	2bc0      	cmp	r3, #192	; 0xc0
 80050a8:	d818      	bhi.n	80050dc <UART_SetConfig+0x1f8>
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d00a      	beq.n	80050c4 <UART_SetConfig+0x1e0>
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d814      	bhi.n	80050dc <UART_SetConfig+0x1f8>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <UART_SetConfig+0x1d8>
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d008      	beq.n	80050cc <UART_SetConfig+0x1e8>
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x1f8>
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e082      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050c4:	2302      	movs	r3, #2
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e07e      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e07a      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e076      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e072      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a35      	ldr	r2, [pc, #212]	; (80051c0 <UART_SetConfig+0x2dc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d12a      	bne.n	8005144 <UART_SetConfig+0x260>
 80050ee:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <UART_SetConfig+0x2cc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fc:	d01a      	beq.n	8005134 <UART_SetConfig+0x250>
 80050fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005102:	d81b      	bhi.n	800513c <UART_SetConfig+0x258>
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d00c      	beq.n	8005124 <UART_SetConfig+0x240>
 800510a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510e:	d815      	bhi.n	800513c <UART_SetConfig+0x258>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <UART_SetConfig+0x238>
 8005114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005118:	d008      	beq.n	800512c <UART_SetConfig+0x248>
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x258>
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e052      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e04e      	b.n	80051ca <UART_SetConfig+0x2e6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e04a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e046      	b.n	80051ca <UART_SetConfig+0x2e6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e042      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <UART_SetConfig+0x2c4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d13a      	bne.n	80051c4 <UART_SetConfig+0x2e0>
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800515c:	d01a      	beq.n	8005194 <UART_SetConfig+0x2b0>
 800515e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005162:	d81b      	bhi.n	800519c <UART_SetConfig+0x2b8>
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005168:	d00c      	beq.n	8005184 <UART_SetConfig+0x2a0>
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516e:	d815      	bhi.n	800519c <UART_SetConfig+0x2b8>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x298>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d008      	beq.n	800518c <UART_SetConfig+0x2a8>
 800517a:	e00f      	b.n	800519c <UART_SetConfig+0x2b8>
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e022      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e01e      	b.n	80051ca <UART_SetConfig+0x2e6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e01a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e016      	b.n	80051ca <UART_SetConfig+0x2e6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e012      	b.n	80051ca <UART_SetConfig+0x2e6>
 80051a4:	efff69f3 	.word	0xefff69f3
 80051a8:	40008000 	.word	0x40008000
 80051ac:	40013800 	.word	0x40013800
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40004400 	.word	0x40004400
 80051b8:	40004800 	.word	0x40004800
 80051bc:	40004c00 	.word	0x40004c00
 80051c0:	40005000 	.word	0x40005000
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a9f      	ldr	r2, [pc, #636]	; (800544c <UART_SetConfig+0x568>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d17a      	bne.n	80052ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d824      	bhi.n	8005226 <UART_SetConfig+0x342>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x300>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005217 	.word	0x08005217
 80051f8:	08005227 	.word	0x08005227
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005227 	.word	0x08005227
 8005204:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fc06 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <UART_SetConfig+0x56c>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fe fb67 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80fb 	beq.w	8005430 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800525c:	e0e8      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2200      	movs	r2, #0
 8005262:	461c      	mov	r4, r3
 8005264:	4615      	mov	r5, r2
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	022b      	lsls	r3, r5, #8
 8005270:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005274:	0222      	lsls	r2, r4, #8
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6849      	ldr	r1, [r1, #4]
 800527a:	0849      	lsrs	r1, r1, #1
 800527c:	2000      	movs	r0, #0
 800527e:	4688      	mov	r8, r1
 8005280:	4681      	mov	r9, r0
 8005282:	eb12 0a08 	adds.w	sl, r2, r8
 8005286:	eb43 0b09 	adc.w	fp, r3, r9
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	4650      	mov	r0, sl
 800529a:	4659      	mov	r1, fp
 800529c:	f7fa ffe8 	bl	8000270 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d308      	bcc.n	80052c2 <UART_SetConfig+0x3de>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d204      	bcs.n	80052c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e0b6      	b.n	8005430 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052c8:	e0b2      	b.n	8005430 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d15e      	bne.n	8005392 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d828      	bhi.n	800532e <UART_SetConfig+0x44a>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x400>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005319 	.word	0x08005319
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	0800531f 	.word	0x0800531f
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe fb86 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800530c:	61f8      	str	r0, [r7, #28]
        break;
 800530e:	e014      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7fe fb98 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005314:	61f8      	str	r0, [r7, #28]
        break;
 8005316:	e010      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <UART_SetConfig+0x56c>)
 800531a:	61fb      	str	r3, [r7, #28]
        break;
 800531c:	e00d      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7fe fae3 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8005322:	61f8      	str	r0, [r7, #28]
        break;
 8005324:	e009      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532a:	61fb      	str	r3, [r7, #28]
        break;
 800532c:	e005      	b.n	800533a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d077      	beq.n	8005430 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005a      	lsls	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d916      	bls.n	800538a <UART_SetConfig+0x4a6>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	d212      	bcs.n	800538a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f023 030f 	bic.w	r3, r3, #15
 800536c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	b29a      	uxth	r2, r3
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	4313      	orrs	r3, r2
 800537e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	e052      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005390:	e04e      	b.n	8005430 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005396:	2b08      	cmp	r3, #8
 8005398:	d827      	bhi.n	80053ea <UART_SetConfig+0x506>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x4bc>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053eb 	.word	0x080053eb
 80053b8:	080053eb 	.word	0x080053eb
 80053bc:	080053eb 	.word	0x080053eb
 80053c0:	080053e3 	.word	0x080053e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe fb28 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80053c8:	61f8      	str	r0, [r7, #28]
        break;
 80053ca:	e014      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053cc:	f7fe fb3a 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 80053d0:	61f8      	str	r0, [r7, #28]
        break;
 80053d2:	e010      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <UART_SetConfig+0x56c>)
 80053d6:	61fb      	str	r3, [r7, #28]
        break;
 80053d8:	e00d      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fe fa85 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80053de:	61f8      	str	r0, [r7, #28]
        break;
 80053e0:	e009      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e6:	61fb      	str	r3, [r7, #28]
        break;
 80053e8:	e005      	b.n	80053f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053f4:	bf00      	nop
    }

    if (pclk != 0U)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d019      	beq.n	8005430 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	085a      	lsrs	r2, r3, #1
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d909      	bls.n	800542a <UART_SetConfig+0x546>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d205      	bcs.n	800542a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e002      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800543c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40008000 	.word	0x40008000
 8005450:	00f42400 	.word	0x00f42400

08005454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005552:	d10a      	bne.n	800556a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a8:	f7fc ffd0 	bl	800254c <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d10e      	bne.n	80055da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f82d 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e023      	b.n	8005622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d10e      	bne.n	8005606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f817 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e00d      	b.n	8005622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b09c      	sub	sp, #112	; 0x70
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563a:	e0a5      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	f000 80a1 	beq.w	8005788 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fc ff81 	bl	800254c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <UART_WaitOnFlagUntilTimeout+0x32>
 8005656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005658:	2b00      	cmp	r3, #0
 800565a:	d13e      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005670:	667b      	str	r3, [r7, #100]	; 0x64
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e6      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	663b      	str	r3, [r7, #96]	; 0x60
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e067      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d04f      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d147      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005700:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
 8005722:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e6      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	613b      	str	r3, [r7, #16]
   return(result);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	66bb      	str	r3, [r7, #104]	; 0x68
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005754:	623a      	str	r2, [r7, #32]
 8005756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	69f9      	ldr	r1, [r7, #28]
 800575a:	6a3a      	ldr	r2, [r7, #32]
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	61bb      	str	r3, [r7, #24]
   return(result);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e5      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e010      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f43f af4a 	beq.w	800563c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3770      	adds	r7, #112	; 0x70
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b0cc      	sub	sp, #304	; 0x130
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	4602      	mov	r2, r0
 80057ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80057c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 80057de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80057f2:	3301      	adds	r3, #1
 80057f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80057f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057fc:	2218      	movs	r2, #24
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f003 fa1f 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005806:	233f      	movs	r3, #63	; 0x3f
 8005808:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800580c:	2385      	movs	r3, #133	; 0x85
 800580e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800581a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800581e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005822:	f107 030b 	add.w	r3, r7, #11
 8005826:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800582a:	2301      	movs	r3, #1
 800582c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005830:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f002 fd56 	bl	80082e8 <hci_send_req>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	da01      	bge.n	8005846 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005842:	23ff      	movs	r3, #255	; 0xff
 8005844:	e00d      	b.n	8005862 <aci_gap_set_io_capability+0xb0>
  if (status) {
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <aci_gap_set_io_capability+0xae>
    return status;
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	e000      	b.n	8005862 <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b0cc      	sub	sp, #304	; 0x130
 8005870:	af00      	add	r7, sp, #0
 8005872:	4605      	mov	r5, r0
 8005874:	460c      	mov	r4, r1
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005882:	462a      	mov	r2, r5
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800588e:	4622      	mov	r2, r4
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800589a:	4602      	mov	r2, r0
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a6:	460a      	mov	r2, r1
 80058a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80058aa:	f107 030c 	add.w	r3, r7, #12
 80058ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80058c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80058d0:	7812      	ldrb	r2, [r2, #0]
 80058d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058d4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058d8:	3301      	adds	r3, #1
 80058da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80058de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80058ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058f2:	3301      	adds	r3, #1
 80058f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 80058f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005900:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005908:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800590c:	3301      	adds	r3, #1
 800590e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800591a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005922:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005926:	3301      	adds	r3, #1
 8005928:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005934:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005936:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800593a:	3301      	adds	r3, #1
 800593c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8005940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005944:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005948:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800594a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800594e:	3301      	adds	r3, #1
 8005950:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800595c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800595e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005962:	3301      	adds	r3, #1
 8005964:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005970:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005974:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005978:	3304      	adds	r3, #4
 800597a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800597e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005982:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005986:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005988:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800598c:	3301      	adds	r3, #1
 800598e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005996:	2218      	movs	r2, #24
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f003 f952 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80059a0:	233f      	movs	r3, #63	; 0x3f
 80059a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80059a6:	2386      	movs	r3, #134	; 0x86
 80059a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80059ac:	f107 030c 	add.w	r3, r7, #12
 80059b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80059bc:	f107 030b 	add.w	r3, r7, #11
 80059c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80059ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 fc89 	bl	80082e8 <hci_send_req>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da01      	bge.n	80059e0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80059dc:	23ff      	movs	r3, #255	; 0xff
 80059de:	e00d      	b.n	80059fc <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 80059e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <aci_gap_set_authentication_requirement+0x18e>
    return status;
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	e000      	b.n	80059fc <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bdb0      	pop	{r4, r5, r7, pc}

08005a06 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005a06:	b590      	push	{r4, r7, lr}
 8005a08:	b0cf      	sub	sp, #316	; 0x13c
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4611      	mov	r1, r2
 8005a12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a16:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a20:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005a24:	4622      	mov	r2, r4
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a2c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005a30:	4602      	mov	r2, r0
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a38:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f003 f8f7 	bl	8008c44 <memset>
  uint8_t index_input = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a60:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a64:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a6c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a70:	3301      	adds	r3, #1
 8005a72:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005a76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a7a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a7e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005a86:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a94:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a98:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005aa0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005aaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005aae:	2218      	movs	r2, #24
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 f8c6 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005ab8:	233f      	movs	r3, #63	; 0x3f
 8005aba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005abe:	238a      	movs	r3, #138	; 0x8a
 8005ac0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005acc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005ad4:	f107 030c 	add.w	r3, r7, #12
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005adc:	2307      	movs	r3, #7
 8005ade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005ae2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f002 fbfd 	bl	80082e8 <hci_send_req>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da01      	bge.n	8005af8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005af4:	23ff      	movs	r3, #255	; 0xff
 8005af6:	e02e      	b.n	8005b56 <aci_gap_init+0x150>
  if (resp.Status) {
 8005af8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <aci_gap_init+0x10c>
    return resp.Status;
 8005b06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	e021      	b.n	8005b56 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005b12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b24:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005b2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005b3e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	2218      	movs	r2, #24
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f003 f866 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005b78:	233f      	movs	r3, #63	; 0x3f
 8005b7a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8005b7c:	2394      	movs	r3, #148	; 0x94
 8005b7e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b84:	2301      	movs	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f002 fbaa 	bl	80082e8 <hci_send_req>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da01      	bge.n	8005b9e <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005b9a:	23ff      	movs	r3, #255	; 0xff
 8005b9c:	e005      	b.n	8005baa <aci_gap_clear_security_db+0x4a>
  if (status) {
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <aci_gap_clear_security_db+0x48>
    return status;
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	e000      	b.n	8005baa <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005bb2:	b5b0      	push	{r4, r5, r7, lr}
 8005bb4:	b0cc      	sub	sp, #304	; 0x130
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4605      	mov	r5, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bc8:	462a      	mov	r2, r5
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005be0:	4602      	mov	r2, r0
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005bec:	460a      	mov	r2, r1
 8005bee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005bf0:	f107 030c 	add.w	r3, r7, #12
 8005bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005c1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c1e:	3302      	adds	r3, #2
 8005c20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005c34:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c38:	3302      	adds	r3, #2
 8005c3a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c46:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005c4e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c52:	3301      	adds	r3, #1
 8005c54:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c60:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005c68:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c76:	2218      	movs	r2, #24
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 ffe2 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005c80:	233f      	movs	r3, #63	; 0x3f
 8005c82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005c86:	2397      	movs	r3, #151	; 0x97
 8005c88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005c8c:	230f      	movs	r3, #15
 8005c8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005c92:	f107 030c 	add.w	r3, r7, #12
 8005c96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c9a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ca2:	f107 030b 	add.w	r3, r7, #11
 8005ca6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005cb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 fb16 	bl	80082e8 <hci_send_req>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da01      	bge.n	8005cc6 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005cc2:	23ff      	movs	r3, #255	; 0xff
 8005cc4:	e00d      	b.n	8005ce2 <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	e000      	b.n	8005ce2 <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bdb0      	pop	{r4, r5, r7, pc}

08005cec <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b0cf      	sub	sp, #316	; 0x13c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005cfc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d06:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d16:	4602      	mov	r2, r0
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005d22:	460a      	mov	r2, r1
 8005d24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005d26:	f107 0314 	add.w	r3, r7, #20
 8005d2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005d2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d32:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d44:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d48:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d50:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d54:	3302      	adds	r3, #2
 8005d56:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005d5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d5e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d62:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005d6a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d6e:	3302      	adds	r3, #2
 8005d70:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d78:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d7c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d84:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d92:	1d58      	adds	r0, r3, #5
 8005d94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005d9c:	2206      	movs	r2, #6
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	f002 ffca 	bl	8008d38 <memcpy>
  index_input += 6;
 8005da4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005da8:	3306      	adds	r3, #6
 8005daa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005db2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005db6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005db8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dc6:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005dca:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005dcc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dda:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005dde:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005de0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005de4:	3302      	adds	r3, #2
 8005de6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dee:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005df2:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005df4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005df8:	3302      	adds	r3, #2
 8005dfa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e02:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005e06:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005e08:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e16:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005e1a:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005e1c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e20:	3302      	adds	r3, #2
 8005e22:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e2a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005e2e:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005e30:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e34:	3302      	adds	r3, #2
 8005e36:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e3e:	2218      	movs	r2, #24
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f002 fefe 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005e48:	233f      	movs	r3, #63	; 0x3f
 8005e4a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005e4e:	239c      	movs	r3, #156	; 0x9c
 8005e50:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005e54:	230f      	movs	r3, #15
 8005e56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005e5a:	f107 0314 	add.w	r3, r7, #20
 8005e5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005e62:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005e6a:	f107 0313 	add.w	r3, r7, #19
 8005e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005e78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f002 fa32 	bl	80082e8 <hci_send_req>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da01      	bge.n	8005e8e <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005e8a:	23ff      	movs	r3, #255	; 0xff
 8005e8c:	e00d      	b.n	8005eaa <aci_gap_create_connection+0x1be>
  if (status) {
 8005e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e92:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <aci_gap_create_connection+0x1bc>
    return status;
 8005e9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ea0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	e000      	b.n	8005eaa <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b0cc      	sub	sp, #304	; 0x130
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4602      	mov	r2, r0
 8005ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ec4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005ec6:	f107 030c 	add.w	r3, r7, #12
 8005eca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ee8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ef0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005efe:	2218      	movs	r2, #24
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f002 fe9e 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005f08:	233f      	movs	r3, #63	; 0x3f
 8005f0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005f0e:	239d      	movs	r3, #157	; 0x9d
 8005f10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f1c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f24:	f107 030b 	add.w	r3, r7, #11
 8005f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f002 f9d5 	bl	80082e8 <hci_send_req>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da01      	bge.n	8005f48 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005f44:	23ff      	movs	r3, #255	; 0xff
 8005f46:	e00d      	b.n	8005f64 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <aci_gap_terminate_gap_proc+0xae>
    return status;
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	e000      	b.n	8005f64 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b088      	sub	sp, #32
 8005f72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	2218      	movs	r2, #24
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 fe5f 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8005f86:	233f      	movs	r3, #63	; 0x3f
 8005f88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005f8a:	f240 1301 	movw	r3, #257	; 0x101
 8005f8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005f94:	2301      	movs	r3, #1
 8005f96:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f002 f9a2 	bl	80082e8 <hci_send_req>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da01      	bge.n	8005fae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005faa:	23ff      	movs	r3, #255	; 0xff
 8005fac:	e005      	b.n	8005fba <aci_gatt_init+0x4c>
  if (status) {
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <aci_gatt_init+0x4a>
    return status;
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	e000      	b.n	8005fba <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005fc2:	b590      	push	{r4, r7, lr}
 8005fc4:	b0cf      	sub	sp, #316	; 0x13c
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	4604      	mov	r4, r0
 8005fca:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005fce:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005fd2:	6001      	str	r1, [r0, #0]
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fdc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fe8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005fec:	4602      	mov	r2, r0
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ff4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005ffc:	f107 030c 	add.w	r3, r7, #12
 8006000:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006004:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006008:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d00a      	beq.n	8006028 <aci_gatt_add_service+0x66>
 8006012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006016:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d101      	bne.n	8006024 <aci_gatt_add_service+0x62>
 8006020:	2311      	movs	r3, #17
 8006022:	e002      	b.n	800602a <aci_gatt_add_service+0x68>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <aci_gatt_add_service+0x68>
 8006028:	2303      	movs	r3, #3
 800602a:	f107 020c 	add.w	r2, r7, #12
 800602e:	4413      	add	r3, r2
 8006030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	2203      	movs	r2, #3
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f002 fe01 	bl	8008c44 <memset>
  uint8_t index_input = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800604c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006050:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006058:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800605c:	3301      	adds	r3, #1
 800605e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8006062:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006066:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d002      	beq.n	8006076 <aci_gatt_add_service+0xb4>
 8006070:	2b02      	cmp	r3, #2
 8006072:	d004      	beq.n	800607e <aci_gatt_add_service+0xbc>
 8006074:	e007      	b.n	8006086 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8006076:	2302      	movs	r3, #2
 8006078:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800607c:	e005      	b.n	800608a <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800607e:	2310      	movs	r3, #16
 8006080:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006084:	e001      	b.n	800608a <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006086:	2347      	movs	r3, #71	; 0x47
 8006088:	e06c      	b.n	8006164 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800608a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800608e:	1c58      	adds	r0, r3, #1
 8006090:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006094:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006098:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	f002 fe4b 	bl	8008d38 <memcpy>
    index_input += size;
 80060a2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80060a6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80060aa:	4413      	add	r3, r2
 80060ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80060b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060b8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80060c0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80060c4:	3301      	adds	r3, #1
 80060c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060d2:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80060da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80060de:	3301      	adds	r3, #1
 80060e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80060e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060e8:	2218      	movs	r2, #24
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 fda9 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80060f2:	233f      	movs	r3, #63	; 0x3f
 80060f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80060f8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80060fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006108:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800610c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006118:	2303      	movs	r3, #3
 800611a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800611e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f002 f8df 	bl	80082e8 <hci_send_req>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	da01      	bge.n	8006134 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006130:	23ff      	movs	r3, #255	; 0xff
 8006132:	e017      	b.n	8006164 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8006134:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	e00a      	b.n	8006164 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800614e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006156:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006160:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800616a:	46bd      	mov	sp, r7
 800616c:	bd90      	pop	{r4, r7, pc}

0800616e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800616e:	b590      	push	{r4, r7, lr}
 8006170:	b0d1      	sub	sp, #324	; 0x144
 8006172:	af00      	add	r7, sp, #0
 8006174:	4604      	mov	r4, r0
 8006176:	4608      	mov	r0, r1
 8006178:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800617c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006180:	600a      	str	r2, [r1, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006188:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800618c:	4622      	mov	r2, r4
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006194:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006198:	4602      	mov	r2, r0
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80061a0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80061a4:	460a      	mov	r2, r1
 80061a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80061b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80061b4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d00a      	beq.n	80061d4 <aci_gatt_add_char+0x66>
 80061be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80061c2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d101      	bne.n	80061d0 <aci_gatt_add_char+0x62>
 80061cc:	2313      	movs	r3, #19
 80061ce:	e002      	b.n	80061d6 <aci_gatt_add_char+0x68>
 80061d0:	2303      	movs	r3, #3
 80061d2:	e000      	b.n	80061d6 <aci_gatt_add_char+0x68>
 80061d4:	2305      	movs	r3, #5
 80061d6:	f107 0214 	add.w	r2, r7, #20
 80061da:	4413      	add	r3, r2
 80061dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80061e0:	f107 0310 	add.w	r3, r7, #16
 80061e4:	2203      	movs	r2, #3
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f002 fd2b 	bl	8008c44 <memset>
  uint8_t index_input = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80061f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80061f8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80061fc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006200:	8812      	ldrh	r2, [r2, #0]
 8006202:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006204:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006208:	3302      	adds	r3, #2
 800620a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800620e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006212:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006216:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800621e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006222:	3301      	adds	r3, #1
 8006224:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8006228:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800622c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d002      	beq.n	800623c <aci_gatt_add_char+0xce>
 8006236:	2b02      	cmp	r3, #2
 8006238:	d004      	beq.n	8006244 <aci_gatt_add_char+0xd6>
 800623a:	e007      	b.n	800624c <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 800623c:	2302      	movs	r3, #2
 800623e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006242:	e005      	b.n	8006250 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006244:	2310      	movs	r3, #16
 8006246:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800624a:	e001      	b.n	8006250 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800624c:	2347      	movs	r3, #71	; 0x47
 800624e:	e091      	b.n	8006374 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8006250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006254:	1cd8      	adds	r0, r3, #3
 8006256:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800625a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800625e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	f002 fd68 	bl	8008d38 <memcpy>
    index_input += size;
 8006268:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800626c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006270:	4413      	add	r3, r2
 8006272:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006276:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800627a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800627e:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006286:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800628a:	3302      	adds	r3, #2
 800628c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006290:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006294:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006298:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800629a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800629e:	3301      	adds	r3, #1
 80062a0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80062a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80062ac:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80062ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062b2:	3301      	adds	r3, #1
 80062b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80062b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062bc:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80062c0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80062c2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062c6:	3301      	adds	r3, #1
 80062c8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80062cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062d0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80062d4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80062d6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062da:	3301      	adds	r3, #1
 80062dc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80062e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062e4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80062e8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80062ea:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062ee:	3301      	adds	r3, #1
 80062f0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80062f8:	2218      	movs	r2, #24
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 fca1 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 8006302:	233f      	movs	r3, #63	; 0x3f
 8006304:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006308:	f44f 7382 	mov.w	r3, #260	; 0x104
 800630c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006310:	f107 0314 	add.w	r3, r7, #20
 8006314:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006318:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800631c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006328:	2303      	movs	r3, #3
 800632a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800632e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f001 ffd7 	bl	80082e8 <hci_send_req>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	da01      	bge.n	8006344 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006340:	23ff      	movs	r3, #255	; 0xff
 8006342:	e017      	b.n	8006374 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8006344:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006352:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	e00a      	b.n	8006374 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800635e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006366:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006370:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800637a:	46bd      	mov	sp, r7
 800637c:	bd90      	pop	{r4, r7, pc}

0800637e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800637e:	b5b0      	push	{r4, r5, r7, lr}
 8006380:	b0cc      	sub	sp, #304	; 0x130
 8006382:	af00      	add	r7, sp, #0
 8006384:	4605      	mov	r5, r0
 8006386:	460c      	mov	r4, r1
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006394:	462a      	mov	r2, r5
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a0:	4622      	mov	r2, r4
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80063ac:	4602      	mov	r2, r0
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80063b8:	460a      	mov	r2, r1
 80063ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80063bc:	f107 030c 	add.w	r3, r7, #12
 80063c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80063d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063de:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80063e2:	8812      	ldrh	r2, [r2, #0]
 80063e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063e6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80063ea:	3302      	adds	r3, #2
 80063ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80063f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063fc:	8812      	ldrh	r2, [r2, #0]
 80063fe:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006400:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006404:	3302      	adds	r3, #2
 8006406:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006412:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006416:	7812      	ldrb	r2, [r2, #0]
 8006418:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800641a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800641e:	3301      	adds	r3, #1
 8006420:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800642c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006434:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006438:	3301      	adds	r3, #1
 800643a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	1d98      	adds	r0, r3, #6
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006454:	f002 fc70 	bl	8008d38 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006460:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	4413      	add	r3, r2
 8006468:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800646c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006470:	2218      	movs	r2, #24
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f002 fbe5 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 800647a:	233f      	movs	r3, #63	; 0x3f
 800647c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006480:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006484:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006488:	f107 030c 	add.w	r3, r7, #12
 800648c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006490:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006494:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006498:	f107 030b 	add.w	r3, r7, #11
 800649c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80064a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 ff1b 	bl	80082e8 <hci_send_req>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da01      	bge.n	80064bc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80064b8:	23ff      	movs	r3, #255	; 0xff
 80064ba:	e00d      	b.n	80064d8 <aci_gatt_update_char_value+0x15a>
  if (status) {
 80064bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <aci_gatt_update_char_value+0x158>
    return status;
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	e000      	b.n	80064d8 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80064de:	46bd      	mov	sp, r7
 80064e0:	bdb0      	pop	{r4, r5, r7, pc}

080064e2 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80064e2:	b5b0      	push	{r4, r5, r7, lr}
 80064e4:	b0ce      	sub	sp, #312	; 0x138
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4605      	mov	r5, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064f4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80064f8:	462a      	mov	r2, r5
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006500:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006504:	4622      	mov	r2, r4
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800650c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006510:	4602      	mov	r2, r0
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006518:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 800651c:	460a      	mov	r2, r1
 800651e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 8006520:	f107 0310 	add.w	r3, r7, #16
 8006524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 8006528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800652c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800653a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800653e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006542:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006546:	8812      	ldrh	r2, [r2, #0]
 8006548:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800654a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800654e:	3302      	adds	r3, #2
 8006550:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 8006554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006558:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800655c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006560:	8812      	ldrh	r2, [r2, #0]
 8006562:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006564:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006568:	3302      	adds	r3, #2
 800656a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 800656e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006572:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006576:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800657a:	8812      	ldrh	r2, [r2, #0]
 800657c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800657e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006582:	3302      	adds	r3, #2
 8006584:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8006588:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800658c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006590:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006598:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800659c:	3301      	adds	r3, #1
 800659e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 80065a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065a6:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d002      	beq.n	80065b6 <aci_gatt_disc_char_by_uuid+0xd4>
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d004      	beq.n	80065be <aci_gatt_disc_char_by_uuid+0xdc>
 80065b4:	e007      	b.n	80065c6 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 80065b6:	2302      	movs	r3, #2
 80065b8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80065bc:	e005      	b.n	80065ca <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 80065be:	2310      	movs	r3, #16
 80065c0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80065c4:	e001      	b.n	80065ca <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 80065c6:	2347      	movs	r3, #71	; 0x47
 80065c8:	e049      	b.n	800665e <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 80065ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065ce:	3307      	adds	r3, #7
 80065d0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80065d4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fbad 	bl	8008d38 <memcpy>
    index_input += size;
 80065de:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80065e2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80065e6:	4413      	add	r3, r2
 80065e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80065ec:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80065f0:	2218      	movs	r2, #24
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f002 fb25 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80065fa:	233f      	movs	r3, #63	; 0x3f
 80065fc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 8006600:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006604:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 8006608:	230f      	movs	r3, #15
 800660a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 8006616:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800661a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 800661e:	f107 030f 	add.w	r3, r7, #15
 8006622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 800662c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fe58 	bl	80082e8 <hci_send_req>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	da01      	bge.n	8006642 <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 800663e:	23ff      	movs	r3, #255	; 0xff
 8006640:	e00d      	b.n	800665e <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 8006642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006646:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 8006650:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006654:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	e000      	b.n	800665e <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006664:	46bd      	mov	sp, r7
 8006666:	bdb0      	pop	{r4, r5, r7, pc}

08006668 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b0cf      	sub	sp, #316	; 0x13c
 800666c:	af00      	add	r7, sp, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006678:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006682:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006686:	4622      	mov	r2, r4
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800668e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006692:	4602      	mov	r2, r0
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800669a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800669e:	460a      	mov	r2, r1
 80066a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80066aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066ae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80066bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066c4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80066c8:	8812      	ldrh	r2, [r2, #0]
 80066ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066cc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80066d0:	3302      	adds	r3, #2
 80066d2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80066d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066da:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066e2:	8812      	ldrh	r2, [r2, #0]
 80066e4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80066e6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80066ea:	3302      	adds	r3, #2
 80066ec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80066f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066f8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80066fc:	7812      	ldrb	r2, [r2, #0]
 80066fe:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006700:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006704:	3301      	adds	r3, #1
 8006706:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800670a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800670e:	1d58      	adds	r0, r3, #5
 8006710:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006714:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800671e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	f002 fb08 	bl	8008d38 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 8006728:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800672c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006730:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	4413      	add	r3, r2
 8006738:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800673c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006740:	2218      	movs	r2, #24
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f002 fa7d 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 800674a:	233f      	movs	r3, #63	; 0x3f
 800674c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8006750:	f240 1321 	movw	r3, #289	; 0x121
 8006754:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8006758:	230f      	movs	r3, #15
 800675a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800675e:	f107 0314 	add.w	r3, r7, #20
 8006762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006766:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800676a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800676e:	f107 0313 	add.w	r3, r7, #19
 8006772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8006776:	2301      	movs	r3, #1
 8006778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800677c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fdb0 	bl	80082e8 <hci_send_req>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	da01      	bge.n	8006792 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800678e:	23ff      	movs	r3, #255	; 0xff
 8006790:	e00d      	b.n	80067ae <aci_gatt_write_char_desc+0x146>
  if (status) {
 8006792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006796:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <aci_gatt_write_char_desc+0x144>
    return status;
 80067a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067a4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	e000      	b.n	80067ae <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd90      	pop	{r4, r7, pc}

080067b8 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80067c6:	f107 0310 	add.w	r3, r7, #16
 80067ca:	220f      	movs	r2, #15
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f002 fa38 	bl	8008c44 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80067d4:	f107 0320 	add.w	r3, r7, #32
 80067d8:	2218      	movs	r2, #24
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 fa31 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80067e2:	233f      	movs	r3, #63	; 0x3f
 80067e4:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80067e6:	2301      	movs	r3, #1
 80067e8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 80067ea:	f107 0310 	add.w	r3, r7, #16
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 80067f0:	230f      	movs	r3, #15
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80067f4:	f107 0320 	add.w	r3, r7, #32
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fd74 	bl	80082e8 <hci_send_req>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	da01      	bge.n	800680a <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 8006806:	23ff      	movs	r3, #255	; 0xff
 8006808:	e02c      	b.n	8006864 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 800680a:	7c3b      	ldrb	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 8006810:	7c3b      	ldrb	r3, [r7, #16]
 8006812:	e027      	b.n	8006864 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 8006814:	7c7a      	ldrb	r2, [r7, #17]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 800681a:	7cba      	ldrb	r2, [r7, #18]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 8006820:	7cfa      	ldrb	r2, [r7, #19]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 8006826:	7d3a      	ldrb	r2, [r7, #20]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 800682c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8006830:	b29a      	uxth	r2, r3
 8006832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006834:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 8006836:	7dfa      	ldrb	r2, [r7, #23]
 8006838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683a:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 800683c:	7e3a      	ldrb	r2, [r7, #24]
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 8006842:	7e7a      	ldrb	r2, [r7, #25]
 8006844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006846:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 8006848:	7eba      	ldrb	r2, [r7, #26]
 800684a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800684c:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800684e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006852:	b29a      	uxth	r2, r3
 8006854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006856:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 8006858:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 800685c:	b29a      	uxth	r2, r3
 800685e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006860:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3738      	adds	r7, #56	; 0x38
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b0ee      	sub	sp, #440	; 0x1b8
 8006870:	af00      	add	r7, sp, #0
 8006872:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006876:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800687a:	6019      	str	r1, [r3, #0]
 800687c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006880:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800688a:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 800688e:	4602      	mov	r2, r0
 8006890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8006892:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006896:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800689a:	f107 0314 	add.w	r3, r7, #20
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 f9ce 	bl	8008c44 <memset>
  uint8_t index_input = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 80068ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80068b2:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80068b6:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068be:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80068c2:	3301      	adds	r3, #1
 80068c4:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068c8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80068cc:	2218      	movs	r2, #24
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f002 f9b7 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80068d6:	233f      	movs	r3, #63	; 0x3f
 80068d8:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 80068dc:	230d      	movs	r3, #13
 80068de:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 80068e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 80068ea:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80068ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8006900:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fcee 	bl	80082e8 <hci_send_req>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	da01      	bge.n	8006916 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8006912:	23ff      	movs	r3, #255	; 0xff
 8006914:	e029      	b.n	800696a <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8006916:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800691a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8006924:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006928:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	e01c      	b.n	800696a <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8006930:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006934:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006938:	785a      	ldrb	r2, [r3, #1]
 800693a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800693e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8006946:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800694a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f107 0314 	add.w	r3, r7, #20
 8006958:	1c99      	adds	r1, r3, #2
 800695a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800695e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	f002 f9e8 	bl	8008d38 <memcpy>
  return BLE_STATUS_SUCCESS;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b0cc      	sub	sp, #304	; 0x130
 8006978:	af00      	add	r7, sp, #0
 800697a:	4602      	mov	r2, r0
 800697c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006980:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800698e:	460a      	mov	r2, r1
 8006990:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006992:	f107 030c 	add.w	r3, r7, #12
 8006996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80069bc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80069c0:	3301      	adds	r3, #1
 80069c2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80069c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80069d6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80069da:	3301      	adds	r3, #1
 80069dc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80069e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069e4:	2218      	movs	r2, #24
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f002 f92b 	bl	8008c44 <memset>
  rq.ogf = 0x3f;
 80069ee:	233f      	movs	r3, #63	; 0x3f
 80069f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80069f4:	230f      	movs	r3, #15
 80069f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a02:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a0a:	f107 030b 	add.w	r3, r7, #11
 8006a0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fc62 	bl	80082e8 <hci_send_req>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da01      	bge.n	8006a2e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006a2a:	23ff      	movs	r3, #255	; 0xff
 8006a2c:	e00d      	b.n	8006a4a <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	e000      	b.n	8006a4a <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7818      	ldrb	r0, [r3, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	461a      	mov	r2, r3
 8006a76:	f7fa fb67 	bl	8001148 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	7818      	ldrb	r0, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	78db      	ldrb	r3, [r3, #3]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f000 ffca 	bl	8007a3e <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	7818      	ldrb	r0, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ace:	b299      	uxth	r1, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	78da      	ldrb	r2, [r3, #3]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	889b      	ldrh	r3, [r3, #4]
 8006ad8:	b29c      	uxth	r4, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	f000 ffba 	bl	8007a5c <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 ffbc 	bl	8007a84 <hci_hardware_error_event>

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b0a6      	sub	sp, #152	; 0x98
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b36:	e02e      	b.n	8006b96 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006b38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	3398      	adds	r3, #152	; 0x98
 8006b52:	443b      	add	r3, r7
 8006b54:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006b58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006b62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	3398      	adds	r3, #152	; 0x98
 8006b7c:	443b      	add	r3, r7
 8006b7e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006b82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006b86:	3302      	adds	r3, #2
 8006b88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b90:	3301      	adds	r3, #1
 8006b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	dbc8      	blt.n	8006b38 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f107 0208 	add.w	r2, r7, #8
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 ff71 	bl	8007a9a <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006bb8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3798      	adds	r7, #152	; 0x98
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 ff6a 	bl	8007ab2 <hci_data_buffer_overflow_event>

  return status;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	781a      	ldrb	r2, [r3, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f000 ff5e 	bl	8007ac8 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 f97b 	bl	8007f26 <aci_blue_initialized_event>

  return status;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 f975 	bl	8007f3c <aci_blue_events_lost_event>

  return status;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c60:	b08d      	sub	sp, #52	; 0x34
 8006c62:	af08      	add	r7, sp, #32
 8006c64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f893 c000 	ldrb.w	ip, [r3]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006c9a:	68b8      	ldr	r0, [r7, #8]
 8006c9c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006ca0:	68bc      	ldr	r4, [r7, #8]
 8006ca2:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006ca6:	68bd      	ldr	r5, [r7, #8]
 8006ca8:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006cac:	68be      	ldr	r6, [r7, #8]
 8006cae:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	9606      	str	r6, [sp, #24]
 8006cba:	9505      	str	r5, [sp, #20]
 8006cbc:	9404      	str	r4, [sp, #16]
 8006cbe:	9003      	str	r0, [sp, #12]
 8006cc0:	9102      	str	r1, [sp, #8]
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	464b      	mov	r3, r9
 8006cca:	4642      	mov	r2, r8
 8006ccc:	4671      	mov	r1, lr
 8006cce:	4660      	mov	r0, ip
 8006cd0:	f001 f93e 	bl	8007f50 <aci_blue_crash_info_event>

  return status;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006ce0 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	7818      	ldrb	r0, [r3, #0]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	7859      	ldrb	r1, [r3, #1]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f001 f934 	bl	8007f6c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f993 0000 	ldrsb.w	r0, [r3]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f001 f92b 	bl	8007f88 <aci_hal_scan_req_report_event>

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	7818      	ldrb	r0, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f001 f923 	bl	8007fa4 <aci_hal_fw_error_event>

  return status;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006d74:	f000 ff32 	bl	8007bdc <aci_gap_limited_discoverable_event>

  return status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b298      	uxth	r0, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	7899      	ldrb	r1, [r3, #2]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	78db      	ldrb	r3, [r3, #3]
 8006da0:	461a      	mov	r2, r3
 8006da2:	f000 ff22 	bl	8007bea <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 ff1e 	bl	8007c08 <aci_gap_pass_key_req_event>

  return status;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 ff16 	bl	8007c1e <aci_gap_authorization_req_event>

  return status;
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006e08:	f000 ff14 	bl	8007c34 <aci_gap_slave_security_initiated_event>

  return status;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006e22:	f000 ff0e 	bl	8007c42 <aci_gap_bond_lost_event>

  return status;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	7818      	ldrb	r0, [r3, #0]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	7859      	ldrb	r1, [r3, #1]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006e50:	f7fa f9e4 	bl	800121c <aci_gap_proc_complete_event>

  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 feeb 	bl	8007c50 <aci_gap_addr_not_resolved_event>

  return status;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 fedf 	bl	8007c66 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	789b      	ldrb	r3, [r3, #2]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 fed5 	bl	8007c7e <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	885b      	ldrh	r3, [r3, #2]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f000 ffce 	bl	8007e9e <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b298      	uxth	r0, r3
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 ffc5 	bl	8007eba <aci_l2cap_proc_timeout_event>

  return status;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3c:	b089      	sub	sp, #36	; 0x24
 8006f3e:	af04      	add	r7, sp, #16
 8006f40:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b298      	uxth	r0, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	789c      	ldrb	r4, [r3, #2]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f5a:	b29d      	uxth	r5, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006f62:	b29e      	uxth	r6, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006f72:	b292      	uxth	r2, r2
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8006f7a:	b289      	uxth	r1, r1
 8006f7c:	9102      	str	r1, [sp, #8]
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4633      	mov	r3, r6
 8006f84:	462a      	mov	r2, r5
 8006f86:	4621      	mov	r1, r4
 8006f88:	f000 ffa5 	bl	8007ed6 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f96 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006f96:	b590      	push	{r4, r7, lr}
 8006f98:	b087      	sub	sp, #28
 8006f9a:	af02      	add	r7, sp, #8
 8006f9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b298      	uxth	r0, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	7899      	ldrb	r1, [r3, #2]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	f000 ff9b 	bl	8007efe <aci_l2cap_command_reject_event>

  return status;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}

08006fd2 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006fd2:	b590      	push	{r4, r7, lr}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af02      	add	r7, sp, #8
 8006fd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b298      	uxth	r0, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	885b      	ldrh	r3, [r3, #2]
 8006fec:	b299      	uxth	r1, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	88db      	ldrh	r3, [r3, #6]
 8006ff8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4623      	mov	r3, r4
 8007002:	f7fa f935 	bl	8001270 <aci_gatt_attribute_modified_event>

  return status;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	bd90      	pop	{r4, r7, pc}

08007010 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fe37 	bl	8007c9a <aci_gatt_proc_timeout_event>

  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29a      	uxth	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	885b      	ldrh	r3, [r3, #2]
 8007050:	b29b      	uxth	r3, r3
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fa f9c5 	bl	80013e4 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b298      	uxth	r0, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	7899      	ldrb	r1, [r3, #2]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007086:	f000 fe13 	bl	8007cb0 <aci_att_find_info_resp_event>

  return status;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b0a6      	sub	sp, #152	; 0x98
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800709c:	2300      	movs	r3, #0
 800709e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80070a8:	2303      	movs	r3, #3
 80070aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070b4:	e02e      	b.n	8007114 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80070b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	3398      	adds	r3, #152	; 0x98
 80070d0:	443b      	add	r3, r7
 80070d2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80070d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80070da:	3302      	adds	r3, #2
 80070dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80070e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80070e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	3398      	adds	r3, #152	; 0x98
 80070fa:	443b      	add	r3, r7
 80070fc:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8007100:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007104:	3302      	adds	r3, #2
 8007106:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800710a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800710e:	3301      	adds	r3, #1
 8007110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007118:	789b      	ldrb	r3, [r3, #2]
 800711a:	461a      	mov	r2, r3
 800711c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007120:	4293      	cmp	r3, r2
 8007122:	dbc8      	blt.n	80070b6 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8007124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b298      	uxth	r0, r3
 800712c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007130:	789b      	ldrb	r3, [r3, #2]
 8007132:	f107 0208 	add.w	r2, r7, #8
 8007136:	4619      	mov	r1, r3
 8007138:	f000 fdca 	bl	8007cd0 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800713c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007140:	4618      	mov	r0, r3
 8007142:	3798      	adds	r7, #152	; 0x98
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b298      	uxth	r0, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	7899      	ldrb	r1, [r3, #2]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800716a:	f000 fdbf 	bl	8007cec <aci_att_read_by_type_resp_event>

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b298      	uxth	r0, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007196:	461a      	mov	r2, r3
 8007198:	f000 fdb8 	bl	8007d0c <aci_att_read_resp_event>

  return status;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b298      	uxth	r0, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80071c4:	461a      	mov	r2, r3
 80071c6:	f000 fdaf 	bl	8007d28 <aci_att_read_blob_resp_event>

  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b298      	uxth	r0, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80071f2:	461a      	mov	r2, r3
 80071f4:	f000 fda6 	bl	8007d44 <aci_att_read_multiple_resp_event>

  return status;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b298      	uxth	r0, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	7899      	ldrb	r1, [r3, #2]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007224:	f000 fd9c 	bl	8007d60 <aci_att_read_by_group_type_resp_event>

  return status;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8007232:	b590      	push	{r4, r7, lr}
 8007234:	b087      	sub	sp, #28
 8007236:	af02      	add	r7, sp, #8
 8007238:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b298      	uxth	r0, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	b299      	uxth	r1, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	889b      	ldrh	r3, [r3, #4]
 8007252:	b29a      	uxth	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4623      	mov	r3, r4
 8007260:	f000 fd8e 	bl	8007d80 <aci_att_prepare_write_resp_event>

  return status;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	bd90      	pop	{r4, r7, pc}

0800726e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fd8f 	bl	8007da8 <aci_att_exec_write_resp_event>

  return status;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b298      	uxth	r0, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	b299      	uxth	r1, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 80072b8:	f000 fd81 	bl	8007dbe <aci_gatt_indication_event>

  return status;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b298      	uxth	r0, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	885b      	ldrh	r3, [r3, #2]
 80072e0:	b299      	uxth	r1, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80072ea:	f7f9 ffdb 	bl	80012a4 <aci_gatt_notification_event>

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29a      	uxth	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	789b      	ldrb	r3, [r3, #2]
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f7fa f823 	bl	8001360 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b298      	uxth	r0, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7899      	ldrb	r1, [r3, #2]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007344:	b29a      	uxth	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	795b      	ldrb	r3, [r3, #5]
 800734a:	f000 fd48 	bl	8007dde <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b298      	uxth	r0, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	885b      	ldrh	r3, [r3, #2]
 8007372:	b299      	uxth	r1, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800737c:	f7f9 ffae 	bl	80012dc <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b298      	uxth	r0, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	b299      	uxth	r1, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80073ae:	f000 fd2a 	bl	8007e06 <aci_gatt_write_permit_req_event>

  return status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b298      	uxth	r0, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	b299      	uxth	r1, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	889b      	ldrh	r3, [r3, #4]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	f000 fd21 	bl	8007e26 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b0a6      	sub	sp, #152	; 0x98
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8007402:	2303      	movs	r3, #3
 8007404:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800740e:	e019      	b.n	8007444 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8007410:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	3398      	adds	r3, #152	; 0x98
 800742a:	443b      	add	r3, r7
 800742c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007430:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007434:	3302      	adds	r3, #2
 8007436:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800743a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800743e:	3301      	adds	r3, #1
 8007440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	461a      	mov	r2, r3
 800744c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007450:	4293      	cmp	r3, r2
 8007452:	dbdd      	blt.n	8007410 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b298      	uxth	r0, r3
 800745c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007460:	789b      	ldrb	r3, [r3, #2]
 8007462:	f107 0208 	add.w	r2, r7, #8
 8007466:	4619      	mov	r1, r3
 8007468:	f000 fcec 	bl	8007e44 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800746c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007470:	4618      	mov	r0, r3
 8007472:	3798      	adds	r7, #152	; 0x98
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	b29b      	uxth	r3, r3
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7f9 ff90 	bl	80013bc <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fccf 	bl	8007e60 <aci_gatt_server_confirmation_event>

  return status;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b298      	uxth	r0, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	b299      	uxth	r1, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	889b      	ldrh	r3, [r3, #4]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	4623      	mov	r3, r4
 80074fa:	f000 fcbc 	bl	8007e76 <aci_gatt_prepare_write_permit_req_event>

  return status;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bd90      	pop	{r4, r7, pc}

08007508 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	b08b      	sub	sp, #44	; 0x2c
 800750c:	af06      	add	r7, sp, #24
 800750e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781d      	ldrb	r5, [r3, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007522:	b29e      	uxth	r6, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f893 c003 	ldrb.w	ip, [r3, #3]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800753a:	b292      	uxth	r2, r2
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8007542:	b289      	uxth	r1, r1
 8007544:	68b8      	ldr	r0, [r7, #8]
 8007546:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800754a:	b280      	uxth	r0, r0
 800754c:	68bc      	ldr	r4, [r7, #8]
 800754e:	7c64      	ldrb	r4, [r4, #17]
 8007550:	9404      	str	r4, [sp, #16]
 8007552:	9003      	str	r0, [sp, #12]
 8007554:	9102      	str	r1, [sp, #8]
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4673      	mov	r3, lr
 800755c:	4662      	mov	r2, ip
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	f7f9 fda3 	bl	80010ac <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007570 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b0a4      	sub	sp, #144	; 0x90
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007578:	2300      	movs	r3, #0
 800757a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007590:	e0b3      	b.n	80076fa <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007592:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007596:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	440b      	add	r3, r1
 80075a6:	3301      	adds	r3, #1
 80075a8:	7819      	ldrb	r1, [r3, #0]
 80075aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	3390      	adds	r3, #144	; 0x90
 80075b8:	443b      	add	r3, r7
 80075ba:	3b88      	subs	r3, #136	; 0x88
 80075bc:	460a      	mov	r2, r1
 80075be:	701a      	strb	r2, [r3, #0]
    size += 1;
 80075c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075c4:	3301      	adds	r3, #1
 80075c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80075ca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80075ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	440b      	add	r3, r1
 80075de:	3302      	adds	r3, #2
 80075e0:	7819      	ldrb	r1, [r3, #0]
 80075e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	3390      	adds	r3, #144	; 0x90
 80075f0:	443b      	add	r3, r7
 80075f2:	3b87      	subs	r3, #135	; 0x87
 80075f4:	460a      	mov	r2, r1
 80075f6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80075f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075fc:	3301      	adds	r3, #1
 80075fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8007602:	f107 0108 	add.w	r1, r7, #8
 8007606:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	1c98      	adds	r0, r3, #2
 8007616:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007628:	4413      	add	r3, r2
 800762a:	3303      	adds	r3, #3
 800762c:	2206      	movs	r2, #6
 800762e:	4619      	mov	r1, r3
 8007630:	f001 fb82 	bl	8008d38 <memcpy>
    size += 6;
 8007634:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007638:	3306      	adds	r3, #6
 800763a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800763e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007642:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	440b      	add	r3, r1
 8007652:	3309      	adds	r3, #9
 8007654:	7819      	ldrb	r1, [r3, #0]
 8007656:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	3390      	adds	r3, #144	; 0x90
 8007664:	443b      	add	r3, r7
 8007666:	3b80      	subs	r3, #128	; 0x80
 8007668:	460a      	mov	r2, r1
 800766a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800766c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007670:	3301      	adds	r3, #1
 8007672:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007676:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	3308      	adds	r3, #8
 8007686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800768a:	4413      	add	r3, r2
 800768c:	1c99      	adds	r1, r3, #2
 800768e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	3390      	adds	r3, #144	; 0x90
 800769c:	443b      	add	r3, r7
 800769e:	3b7c      	subs	r3, #124	; 0x7c
 80076a0:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 80076a2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80076a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	440b      	add	r3, r1
 80076b6:	3309      	adds	r3, #9
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076be:	4413      	add	r3, r2
 80076c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80076c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	4413      	add	r3, r2
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	b259      	sxtb	r1, r3
 80076d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	3390      	adds	r3, #144	; 0x90
 80076de:	443b      	add	r3, r7
 80076e0:	3b78      	subs	r3, #120	; 0x78
 80076e2:	460a      	mov	r2, r1
 80076e4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80076e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076ea:	3301      	adds	r3, #1
 80076ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80076f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f4:	3301      	adds	r3, #1
 80076f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007706:	4293      	cmp	r3, r2
 8007708:	f6ff af43 	blt.w	8007592 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800770c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	f107 0208 	add.w	r2, r7, #8
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7f9 fd2f 	bl	800117c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800771e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007722:	4618      	mov	r0, r3
 8007724:	3790      	adds	r7, #144	; 0x90
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800772a:	b590      	push	{r4, r7, lr}
 800772c:	b087      	sub	sp, #28
 800772e:	af02      	add	r7, sp, #8
 8007730:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	7818      	ldrb	r0, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007744:	b299      	uxth	r1, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800774c:	b29a      	uxth	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007754:	b29c      	uxth	r4, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800775c:	b29b      	uxth	r3, r3
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4623      	mov	r3, r4
 8007762:	f000 f9bf 	bl	8007ae4 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	bd90      	pop	{r4, r7, pc}

08007770 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	7818      	ldrb	r0, [r3, #0]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800778a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007790:	461a      	mov	r2, r3
 8007792:	f000 f9bb 	bl	8007b0c <hci_le_read_remote_used_features_complete_event>

  return status;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	895b      	ldrh	r3, [r3, #10]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	f000 f9b1 	bl	8007b28 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b298      	uxth	r0, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	885b      	ldrh	r3, [r3, #2]
 80077ea:	b299      	uxth	r1, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	889b      	ldrh	r3, [r3, #4]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	88db      	ldrh	r3, [r3, #6]
 80077f6:	b29c      	uxth	r4, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	891b      	ldrh	r3, [r3, #8]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4623      	mov	r3, r4
 8007802:	f000 f99f 	bl	8007b44 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	bd90      	pop	{r4, r7, pc}

08007810 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f000 f99e 	bl	8007b6c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f000 f995 	bl	8007b84 <hci_le_generate_dhkey_complete_event>

  return status;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007868:	b08d      	sub	sp, #52	; 0x34
 800786a:	af08      	add	r7, sp, #32
 800786c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f893 c000 	ldrb.w	ip, [r3]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007882:	fa1f fe83 	uxth.w	lr, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f893 8003 	ldrb.w	r8, [r3, #3]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800789e:	68b8      	ldr	r0, [r7, #8]
 80078a0:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 80078a4:	b280      	uxth	r0, r0
 80078a6:	68bc      	ldr	r4, [r7, #8]
 80078a8:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 80078ac:	b2a4      	uxth	r4, r4
 80078ae:	68bd      	ldr	r5, [r7, #8]
 80078b0:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80078b4:	b2ad      	uxth	r5, r5
 80078b6:	68be      	ldr	r6, [r7, #8]
 80078b8:	7f76      	ldrb	r6, [r6, #29]
 80078ba:	9606      	str	r6, [sp, #24]
 80078bc:	9505      	str	r5, [sp, #20]
 80078be:	9404      	str	r4, [sp, #16]
 80078c0:	9003      	str	r0, [sp, #12]
 80078c2:	9102      	str	r1, [sp, #8]
 80078c4:	9201      	str	r2, [sp, #4]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	464b      	mov	r3, r9
 80078ca:	4642      	mov	r2, r8
 80078cc:	4671      	mov	r1, lr
 80078ce:	4660      	mov	r0, ip
 80078d0:	f000 f964 	bl	8007b9c <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080078e0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b0a6      	sub	sp, #152	; 0x98
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007900:	e085      	b.n	8007a0e <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8007902:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	3301      	adds	r3, #1
 8007910:	781a      	ldrb	r2, [r3, #0]
 8007912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	3398      	adds	r3, #152	; 0x98
 800791a:	443b      	add	r3, r7
 800791c:	3b90      	subs	r3, #144	; 0x90
 800791e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007920:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007924:	3301      	adds	r3, #1
 8007926:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800792a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800792e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	4413      	add	r3, r2
 8007936:	3302      	adds	r3, #2
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	3398      	adds	r3, #152	; 0x98
 8007942:	443b      	add	r3, r7
 8007944:	3b8f      	subs	r3, #143	; 0x8f
 8007946:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007948:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800794c:	3301      	adds	r3, #1
 800794e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007952:	f107 0208 	add.w	r2, r7, #8
 8007956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	4413      	add	r3, r2
 800795e:	1c98      	adds	r0, r3, #2
 8007960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800796a:	4413      	add	r3, r2
 800796c:	3303      	adds	r3, #3
 800796e:	2206      	movs	r2, #6
 8007970:	4619      	mov	r1, r3
 8007972:	f001 f9e1 	bl	8008d38 <memcpy>
    size += 6;
 8007976:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800797a:	3306      	adds	r3, #6
 800797c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007980:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	4413      	add	r3, r2
 800798c:	3309      	adds	r3, #9
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	3398      	adds	r3, #152	; 0x98
 8007998:	443b      	add	r3, r7
 800799a:	3b88      	subs	r3, #136	; 0x88
 800799c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800799e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079a2:	3301      	adds	r3, #1
 80079a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80079a8:	f107 0208 	add.w	r2, r7, #8
 80079ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	3308      	adds	r3, #8
 80079b4:	4413      	add	r3, r2
 80079b6:	1c58      	adds	r0, r3, #1
 80079b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3308      	adds	r3, #8
 80079c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079c4:	4413      	add	r3, r2
 80079c6:	3302      	adds	r3, #2
 80079c8:	2206      	movs	r2, #6
 80079ca:	4619      	mov	r1, r3
 80079cc:	f001 f9b4 	bl	8008d38 <memcpy>
    size += 6;
 80079d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079d4:	3306      	adds	r3, #6
 80079d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80079da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	4413      	add	r3, r2
 80079e6:	3310      	adds	r3, #16
 80079e8:	f993 2000 	ldrsb.w	r2, [r3]
 80079ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	3398      	adds	r3, #152	; 0x98
 80079f4:	443b      	add	r3, r7
 80079f6:	3b81      	subs	r3, #129	; 0x81
 80079f8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80079fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079fe:	3301      	adds	r3, #1
 8007a00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a08:	3301      	adds	r3, #1
 8007a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	f6ff af71 	blt.w	8007902 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8007a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f107 0208 	add.w	r2, r7, #8
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f8c9 	bl	8007bc4 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007a32:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3798      	adds	r7, #152	; 0x98
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	4603      	mov	r3, r0
 8007a46:	71fb      	strb	r3, [r7, #7]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	80bb      	strh	r3, [r7, #4]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007a5c:	b490      	push	{r4, r7}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	71fb      	strb	r3, [r7, #7]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	80bb      	strh	r3, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	71bb      	strb	r3, [r7, #6]
 8007a76:	4613      	mov	r3, r2
 8007a78:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc90      	pop	{r4, r7}
 8007a82:	4770      	bx	lr

08007a84 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	6039      	str	r1, [r7, #0]
 8007aa4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	4603      	mov	r3, r0
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	71fb      	strb	r3, [r7, #7]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007ae4:	b490      	push	{r4, r7}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	4623      	mov	r3, r4
 8007af4:	71fb      	strb	r3, [r7, #7]
 8007af6:	4603      	mov	r3, r0
 8007af8:	80bb      	strh	r3, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	807b      	strh	r3, [r7, #2]
 8007afe:	4613      	mov	r3, r2
 8007b00:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc90      	pop	{r4, r7}
 8007b0a:	4770      	bx	lr

08007b0c <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	603a      	str	r2, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	80fb      	strh	r3, [r7, #6]
 8007b34:	4613      	mov	r3, r2
 8007b36:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007b44:	b490      	push	{r4, r7}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4623      	mov	r3, r4
 8007b54:	80fb      	strh	r3, [r7, #6]
 8007b56:	4603      	mov	r3, r0
 8007b58:	80bb      	strh	r3, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	807b      	strh	r3, [r7, #2]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc90      	pop	{r4, r7}
 8007b6a:	4770      	bx	lr

08007b6c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007b9c:	b490      	push	{r4, r7}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4623      	mov	r3, r4
 8007bac:	71fb      	strb	r3, [r7, #7]
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80bb      	strh	r3, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	71bb      	strb	r3, [r7, #6]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc90      	pop	{r4, r7}
 8007bc2:	4770      	bx	lr

08007bc4 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	80fb      	strh	r3, [r7, #6]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	717b      	strb	r3, [r7, #5]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	4603      	mov	r3, r0
 8007c26:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007c38:	bf00      	nop
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007c46:	bf00      	nop
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	6039      	str	r1, [r7, #0]
 8007c70:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4603      	mov	r3, r0
 8007c86:	460a      	mov	r2, r1
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	4603      	mov	r3, r0
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	717b      	strb	r3, [r7, #5]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	603a      	str	r2, [r7, #0]
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	80fb      	strh	r3, [r7, #6]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	717b      	strb	r3, [r7, #5]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	603a      	str	r2, [r7, #0]
 8007d16:	80fb      	strh	r3, [r7, #6]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	603a      	str	r2, [r7, #0]
 8007d32:	80fb      	strh	r3, [r7, #6]
 8007d34:	460b      	mov	r3, r1
 8007d36:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	603a      	str	r2, [r7, #0]
 8007d4e:	80fb      	strh	r3, [r7, #6]
 8007d50:	460b      	mov	r3, r1
 8007d52:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4603      	mov	r3, r0
 8007d6a:	80fb      	strh	r3, [r7, #6]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	717b      	strb	r3, [r7, #5]
 8007d70:	4613      	mov	r3, r2
 8007d72:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007d80:	b490      	push	{r4, r7}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4623      	mov	r3, r4
 8007d90:	80fb      	strh	r3, [r7, #6]
 8007d92:	4603      	mov	r3, r0
 8007d94:	80bb      	strh	r3, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	807b      	strh	r3, [r7, #2]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc90      	pop	{r4, r7}
 8007da6:	4770      	bx	lr

08007da8 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	607b      	str	r3, [r7, #4]
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	81fb      	strh	r3, [r7, #14]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	81bb      	strh	r3, [r7, #12]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007dde:	b490      	push	{r4, r7}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4604      	mov	r4, r0
 8007de6:	4608      	mov	r0, r1
 8007de8:	4611      	mov	r1, r2
 8007dea:	461a      	mov	r2, r3
 8007dec:	4623      	mov	r3, r4
 8007dee:	80fb      	strh	r3, [r7, #6]
 8007df0:	4603      	mov	r3, r0
 8007df2:	717b      	strb	r3, [r7, #5]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc90      	pop	{r4, r7}
 8007e04:	4770      	bx	lr

08007e06 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	4603      	mov	r3, r0
 8007e10:	81fb      	strh	r3, [r7, #14]
 8007e12:	460b      	mov	r3, r1
 8007e14:	81bb      	strh	r3, [r7, #12]
 8007e16:	4613      	mov	r3, r2
 8007e18:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	80fb      	strh	r3, [r7, #6]
 8007e30:	460b      	mov	r3, r1
 8007e32:	80bb      	strh	r3, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	603a      	str	r2, [r7, #0]
 8007e4e:	80fb      	strh	r3, [r7, #6]
 8007e50:	460b      	mov	r3, r1
 8007e52:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007e76:	b490      	push	{r4, r7}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	461a      	mov	r2, r3
 8007e84:	4623      	mov	r3, r4
 8007e86:	80fb      	strh	r3, [r7, #6]
 8007e88:	4603      	mov	r3, r0
 8007e8a:	80bb      	strh	r3, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
 8007e90:	4613      	mov	r3, r2
 8007e92:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc90      	pop	{r4, r7}
 8007e9c:	4770      	bx	lr

08007e9e <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	460a      	mov	r2, r1
 8007ea8:	80fb      	strh	r3, [r7, #6]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	603a      	str	r2, [r7, #0]
 8007ec4:	80fb      	strh	r3, [r7, #6]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007ed6:	b490      	push	{r4, r7}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	4604      	mov	r4, r0
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4623      	mov	r3, r4
 8007ee6:	80fb      	strh	r3, [r7, #6]
 8007ee8:	4603      	mov	r3, r0
 8007eea:	717b      	strb	r3, [r7, #5]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc90      	pop	{r4, r7}
 8007efc:	4770      	bx	lr

08007efe <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007efe:	b490      	push	{r4, r7}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	80fb      	strh	r3, [r7, #6]
 8007f10:	4603      	mov	r3, r0
 8007f12:	717b      	strb	r3, [r7, #5]
 8007f14:	460b      	mov	r3, r1
 8007f16:	807b      	strh	r3, [r7, #2]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc90      	pop	{r4, r7}
 8007f24:	4770      	bx	lr

08007f26 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	603a      	str	r2, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	603a      	str	r2, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
 8007f94:	460b      	mov	r3, r1
 8007f96:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	603a      	str	r2, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fca:	f107 0308 	add.w	r3, r7, #8
 8007fce:	2218      	movs	r2, #24
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fe36 	bl	8008c44 <memset>
  rq.ogf = 0x03;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007fe8:	f107 0308 	add.w	r3, r7, #8
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f97a 	bl	80082e8 <hci_send_req>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da01      	bge.n	8007ffe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ffa:	23ff      	movs	r3, #255	; 0xff
 8007ffc:	e005      	b.n	800800a <hci_reset+0x4a>
  if (status) {
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <hci_reset+0x48>
    return status;
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	e000      	b.n	800800a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b0cc      	sub	sp, #304	; 0x130
 8008016:	af00      	add	r7, sp, #0
 8008018:	4602      	mov	r2, r0
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	6019      	str	r1, [r3, #0]
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800802c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 800802e:	f107 030c 	add.w	r3, r7, #12
 8008032:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	2204      	movs	r2, #4
 800803c:	2100      	movs	r1, #0
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fe00 	bl	8008c44 <memset>
  uint8_t index_input = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008052:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008056:	8812      	ldrh	r2, [r2, #0]
 8008058:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800805a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800805e:	3302      	adds	r3, #2
 8008060:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008064:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008068:	2218      	movs	r2, #24
 800806a:	2100      	movs	r1, #0
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fde9 	bl	8008c44 <memset>
  rq.ogf = 0x05;
 8008072:	2305      	movs	r3, #5
 8008074:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8008078:	2305      	movs	r3, #5
 800807a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800807e:	f107 030c 	add.w	r3, r7, #12
 8008082:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008086:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800808a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008096:	2304      	movs	r3, #4
 8008098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800809c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f920 	bl	80082e8 <hci_send_req>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da01      	bge.n	80080b2 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 80080ae:	23ff      	movs	r3, #255	; 0xff
 80080b0:	e019      	b.n	80080e6 <hci_read_rssi+0xd4>
  if (resp.Status) {
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <hci_read_rssi+0xba>
    return resp.Status;
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	e00c      	b.n	80080e6 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 80080cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080d4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3308      	adds	r3, #8
 80080fc:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b04      	cmp	r3, #4
 8008104:	d001      	beq.n	800810a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008106:	2301      	movs	r3, #1
 8008108:	e00c      	b.n	8008124 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3302      	adds	r3, #2
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008118:	3b03      	subs	r3, #3
 800811a:	429a      	cmp	r2, r3
 800811c:	d001      	beq.n	8008122 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800811e:	2302      	movs	r3, #2
 8008120:	e000      	b.n	8008124 <verify_packet+0x34>
  
  return 0;      
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b0a6      	sub	sp, #152	; 0x98
 8008134:	af00      	add	r7, sp, #0
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	4603      	mov	r3, r0
 800813a:	81fb      	strh	r3, [r7, #14]
 800813c:	460b      	mov	r3, r1
 800813e:	81bb      	strh	r3, [r7, #12]
 8008140:	4613      	mov	r3, r2
 8008142:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008144:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800814c:	b21a      	sxth	r2, r3
 800814e:	89fb      	ldrh	r3, [r7, #14]
 8008150:	029b      	lsls	r3, r3, #10
 8008152:	b21b      	sxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b21b      	sxth	r3, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008160:	2301      	movs	r3, #1
 8008162:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008164:	f107 0318 	add.w	r3, r7, #24
 8008168:	3301      	adds	r3, #1
 800816a:	461a      	mov	r2, r3
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	8819      	ldrh	r1, [r3, #0]
 8008172:	789b      	ldrb	r3, [r3, #2]
 8008174:	8011      	strh	r1, [r2, #0]
 8008176:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008178:	f107 0318 	add.w	r3, r7, #24
 800817c:	3304      	adds	r3, #4
 800817e:	7afa      	ldrb	r2, [r7, #11]
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fdd8 	bl	8008d38 <memcpy>
  
  if (hciContext.io.Send)
 8008188:	4b08      	ldr	r3, [pc, #32]	; (80081ac <send_cmd+0x7c>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <send_cmd+0x7c>)
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	7afa      	ldrb	r2, [r7, #11]
 8008196:	b292      	uxth	r2, r2
 8008198:	3204      	adds	r2, #4
 800819a:	b291      	uxth	r1, r2
 800819c:	f107 0218 	add.w	r2, r7, #24
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
  }
}
 80081a4:	bf00      	nop
 80081a6:	3798      	adds	r7, #152	; 0x98
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200008c0 	.word	0x200008c0

080081b0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80081ba:	e00a      	b.n	80081d2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	4619      	mov	r1, r3
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f000 fae8 	bl	8008798 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa4f 	bl	8008670 <list_insert_head>
  while (!list_is_empty(src_list))
 80081d2:	6838      	ldr	r0, [r7, #0]
 80081d4:	f000 fa2a 	bl	800862c <list_is_empty>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0ee      	beq.n	80081bc <move_list+0xc>
  }
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80081ee:	e009      	b.n	8008204 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4809      	ldr	r0, [pc, #36]	; (800821c <free_event_list+0x34>)
 80081f6:	f000 faa8 	bl	800874a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4619      	mov	r1, r3
 80081fe:	4808      	ldr	r0, [pc, #32]	; (8008220 <free_event_list+0x38>)
 8008200:	f000 fa5c 	bl	80086bc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008204:	4806      	ldr	r0, [pc, #24]	; (8008220 <free_event_list+0x38>)
 8008206:	f000 faee 	bl	80087e6 <list_get_size>
 800820a:	4603      	mov	r3, r0
 800820c:	2b04      	cmp	r3, #4
 800820e:	ddef      	ble.n	80081f0 <free_event_list+0x8>
  }
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000340 	.word	0x20000340
 8008220:	20000338 	.word	0x20000338

08008224 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008234:	4a18      	ldr	r2, [pc, #96]	; (8008298 <hci_init+0x74>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800823a:	4818      	ldr	r0, [pc, #96]	; (800829c <hci_init+0x78>)
 800823c:	f000 f9e6 	bl	800860c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008240:	4817      	ldr	r0, [pc, #92]	; (80082a0 <hci_init+0x7c>)
 8008242:	f000 f9e3 	bl	800860c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008246:	f7f9 fbb3 	bl	80019b0 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	e00c      	b.n	800826a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	228c      	movs	r2, #140	; 0x8c
 8008254:	fb02 f303 	mul.w	r3, r2, r3
 8008258:	4a12      	ldr	r2, [pc, #72]	; (80082a4 <hci_init+0x80>)
 800825a:	4413      	add	r3, r2
 800825c:	4619      	mov	r1, r3
 800825e:	480f      	ldr	r0, [pc, #60]	; (800829c <hci_init+0x78>)
 8008260:	f000 fa2c 	bl	80086bc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	3301      	adds	r3, #1
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b09      	cmp	r3, #9
 800826e:	d9ef      	bls.n	8008250 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008270:	4b09      	ldr	r3, [pc, #36]	; (8008298 <hci_init+0x74>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <hci_init+0x5c>
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <hci_init+0x74>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2000      	movs	r0, #0
 800827e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <hci_init+0x74>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <hci_init+0x6a>
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <hci_init+0x74>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4798      	blx	r3
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200008c0 	.word	0x200008c0
 800829c:	20000338 	.word	0x20000338
 80082a0:	20000340 	.word	0x20000340
 80082a4:	20000348 	.word	0x20000348

080082a8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0b      	ldr	r2, [pc, #44]	; (80082e4 <hci_register_io_bus+0x3c>)
 80082b6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <hci_register_io_bus+0x3c>)
 80082be:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	4a07      	ldr	r2, [pc, #28]	; (80082e4 <hci_register_io_bus+0x3c>)
 80082c6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <hci_register_io_bus+0x3c>)
 80082ce:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4a03      	ldr	r2, [pc, #12]	; (80082e4 <hci_register_io_bus+0x3c>)
 80082d6:	6093      	str	r3, [r2, #8]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	200008c0 	.word	0x200008c0

080082e8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08e      	sub	sp, #56	; 0x38
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	b21b      	sxth	r3, r3
 80082fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fe:	b21a      	sxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b21b      	sxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b21b      	sxth	r3, r3
 800830c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008312:	f107 0308 	add.w	r3, r7, #8
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f978 	bl	800860c <list_init_head>

  free_event_list();
 800831c:	f7ff ff64 	bl	80081e8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8818      	ldrh	r0, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8859      	ldrh	r1, [r3, #2]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f7ff fefd 	bl	8008130 <send_cmd>
  
  if (async)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <hci_send_req+0x58>
  {
    return 0;
 800833c:	2300      	movs	r3, #0
 800833e:	e0e2      	b.n	8008506 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008340:	f7fa f904 	bl	800254c <HAL_GetTick>
 8008344:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008346:	f7fa f901 	bl	800254c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008354:	f200 80b3 	bhi.w	80084be <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008358:	486d      	ldr	r0, [pc, #436]	; (8008510 <hci_send_req+0x228>)
 800835a:	f000 f967 	bl	800862c <list_is_empty>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d000      	beq.n	8008366 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008364:	e7ef      	b.n	8008346 <hci_send_req+0x5e>
      {
        break;
 8008366:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	4619      	mov	r1, r3
 800836e:	4868      	ldr	r0, [pc, #416]	; (8008510 <hci_send_req+0x228>)
 8008370:	f000 f9eb 	bl	800874a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3308      	adds	r3, #8
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d17f      	bne.n	8008482 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	3301      	adds	r3, #1
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3308      	adds	r3, #8
 800838c:	3303      	adds	r3, #3
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008396:	3b03      	subs	r3, #3
 8008398:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b3e      	cmp	r3, #62	; 0x3e
 80083a0:	d04c      	beq.n	800843c <hci_send_req+0x154>
 80083a2:	2b3e      	cmp	r3, #62	; 0x3e
 80083a4:	dc68      	bgt.n	8008478 <hci_send_req+0x190>
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	f000 808b 	beq.w	80084c2 <hci_send_req+0x1da>
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	dc63      	bgt.n	8008478 <hci_send_req+0x190>
 80083b0:	2b0e      	cmp	r3, #14
 80083b2:	d023      	beq.n	80083fc <hci_send_req+0x114>
 80083b4:	2b0f      	cmp	r3, #15
 80083b6:	d15f      	bne.n	8008478 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d17e      	bne.n	80084c6 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b0f      	cmp	r3, #15
 80083ce:	d004      	beq.n	80083da <hci_send_req+0xf2>
          if (cs->status) {
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d051      	beq.n	800847c <hci_send_req+0x194>
            goto failed;
 80083d8:	e078      	b.n	80084cc <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	bf28      	it	cs
 80083e4:	461a      	movcs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6918      	ldr	r0, [r3, #16]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083f6:	f000 fc9f 	bl	8008d38 <memcpy>
        goto done;
 80083fa:	e078      	b.n	80084ee <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008406:	b29b      	uxth	r3, r3
 8008408:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800840a:	429a      	cmp	r2, r3
 800840c:	d15d      	bne.n	80084ca <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	3303      	adds	r3, #3
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	3b03      	subs	r3, #3
 8008418:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695a      	ldr	r2, [r3, #20]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	429a      	cmp	r2, r3
 8008422:	bf28      	it	cs
 8008424:	461a      	movcs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6918      	ldr	r0, [r3, #16]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	461a      	mov	r2, r3
 8008434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008436:	f000 fc7f 	bl	8008d38 <memcpy>
        goto done;
 800843a:	e058      	b.n	80084ee <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	429a      	cmp	r2, r3
 800844c:	d118      	bne.n	8008480 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	3b01      	subs	r3, #1
 8008452:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	429a      	cmp	r2, r3
 800845c:	bf28      	it	cs
 800845e:	461a      	movcs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6918      	ldr	r0, [r3, #16]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	1c59      	adds	r1, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	461a      	mov	r2, r3
 8008472:	f000 fc61 	bl	8008d38 <memcpy>
        goto done;
 8008476:	e03a      	b.n	80084ee <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008478:	bf00      	nop
 800847a:	e002      	b.n	8008482 <hci_send_req+0x19a>
          break;
 800847c:	bf00      	nop
 800847e:	e000      	b.n	8008482 <hci_send_req+0x19a>
          break;
 8008480:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008482:	4824      	ldr	r0, [pc, #144]	; (8008514 <hci_send_req+0x22c>)
 8008484:	f000 f8d2 	bl	800862c <list_is_empty>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <hci_send_req+0x1c2>
 800848e:	4820      	ldr	r0, [pc, #128]	; (8008510 <hci_send_req+0x228>)
 8008490:	f000 f8cc 	bl	800862c <list_is_empty>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4619      	mov	r1, r3
 800849e:	481d      	ldr	r0, [pc, #116]	; (8008514 <hci_send_req+0x22c>)
 80084a0:	f000 f90c 	bl	80086bc <list_insert_tail>
      hciReadPacket=NULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	e008      	b.n	80084bc <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	f107 0308 	add.w	r3, r7, #8
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f902 	bl	80086bc <list_insert_tail>
      hciReadPacket=NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
  {
 80084bc:	e740      	b.n	8008340 <hci_send_req+0x58>
        goto failed;
 80084be:	bf00      	nop
 80084c0:	e004      	b.n	80084cc <hci_send_req+0x1e4>
        goto failed;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <hci_send_req+0x1e4>
          goto failed;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <hci_send_req+0x1e4>
          goto failed;
 80084ca:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4619      	mov	r1, r3
 80084d6:	480f      	ldr	r0, [pc, #60]	; (8008514 <hci_send_req+0x22c>)
 80084d8:	f000 f8ca 	bl	8008670 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4619      	mov	r1, r3
 80084e2:	480b      	ldr	r0, [pc, #44]	; (8008510 <hci_send_req+0x228>)
 80084e4:	f7ff fe64 	bl	80081b0 <move_list>

  return -1;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	e00b      	b.n	8008506 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4619      	mov	r1, r3
 80084f2:	4808      	ldr	r0, [pc, #32]	; (8008514 <hci_send_req+0x22c>)
 80084f4:	f000 f8bc 	bl	8008670 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	4619      	mov	r1, r3
 80084fe:	4804      	ldr	r0, [pc, #16]	; (8008510 <hci_send_req+0x228>)
 8008500:	f7ff fe56 	bl	80081b0 <move_list>

  return 0;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3738      	adds	r7, #56	; 0x38
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000340 	.word	0x20000340
 8008514:	20000338 	.word	0x20000338

08008518 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008522:	e013      	b.n	800854c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008524:	1d3b      	adds	r3, r7, #4
 8008526:	4619      	mov	r1, r3
 8008528:	480e      	ldr	r0, [pc, #56]	; (8008564 <hci_user_evt_proc+0x4c>)
 800852a:	f000 f90e 	bl	800874a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800852e:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <hci_user_evt_proc+0x50>)
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <hci_user_evt_proc+0x50>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	3208      	adds	r2, #8
 800853e:	4610      	mov	r0, r2
 8008540:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4619      	mov	r1, r3
 8008546:	4809      	ldr	r0, [pc, #36]	; (800856c <hci_user_evt_proc+0x54>)
 8008548:	f000 f8b8 	bl	80086bc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <hci_user_evt_proc+0x4c>)
 800854e:	f000 f86d 	bl	800862c <list_is_empty>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0e5      	beq.n	8008524 <hci_user_evt_proc+0xc>
  }
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000340 	.word	0x20000340
 8008568:	200008c0 	.word	0x200008c0
 800856c:	20000338 	.word	0x20000338

08008570 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008580:	481f      	ldr	r0, [pc, #124]	; (8008600 <hci_notify_asynch_evt+0x90>)
 8008582:	f000 f853 	bl	800862c <list_is_empty>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d132      	bne.n	80085f2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800858c:	f107 030c 	add.w	r3, r7, #12
 8008590:	4619      	mov	r1, r3
 8008592:	481b      	ldr	r0, [pc, #108]	; (8008600 <hci_notify_asynch_evt+0x90>)
 8008594:	f000 f8d9 	bl	800874a <list_remove_head>
    
    if (hciContext.io.Receive)
 8008598:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <hci_notify_asynch_evt+0x94>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d02a      	beq.n	80085f6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80085a0:	4b18      	ldr	r3, [pc, #96]	; (8008604 <hci_notify_asynch_evt+0x94>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	3208      	adds	r2, #8
 80085a8:	2180      	movs	r1, #128	; 0x80
 80085aa:	4610      	mov	r0, r2
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80085b2:	7cfb      	ldrb	r3, [r7, #19]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d016      	beq.n	80085e6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	7cfa      	ldrb	r2, [r7, #19]
 80085bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd94 	bl	80080f0 <verify_packet>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d105      	bne.n	80085da <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4619      	mov	r1, r3
 80085d2:	480d      	ldr	r0, [pc, #52]	; (8008608 <hci_notify_asynch_evt+0x98>)
 80085d4:	f000 f872 	bl	80086bc <list_insert_tail>
 80085d8:	e00d      	b.n	80085f6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4619      	mov	r1, r3
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <hci_notify_asynch_evt+0x90>)
 80085e0:	f000 f846 	bl	8008670 <list_insert_head>
 80085e4:	e007      	b.n	80085f6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4619      	mov	r1, r3
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <hci_notify_asynch_evt+0x90>)
 80085ec:	f000 f840 	bl	8008670 <list_insert_head>
 80085f0:	e001      	b.n	80085f6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80085f6:	697b      	ldr	r3, [r7, #20]
  
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20000338 	.word	0x20000338
 8008604:	200008c0 	.word	0x200008c0
 8008608:	20000340 	.word	0x20000340

0800860c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008634:	f3ef 8310 	mrs	r3, PRIMASK
 8008638:	60fb      	str	r3, [r7, #12]
  return(result);
 800863a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800863c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800863e:	b672      	cpsid	i
}
 8008640:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d102      	bne.n	8008652 <list_is_empty+0x26>
  {
    return_value = 1;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
 8008650:	e001      	b.n	8008656 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f383 8810 	msr	PRIMASK, r3
}
 8008660:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
}
 8008664:	4618      	mov	r0, r3
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867a:	f3ef 8310 	mrs	r3, PRIMASK
 800867e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008680:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008684:	b672      	cpsid	i
}
 8008686:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	605a      	str	r2, [r3, #4]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f383 8810 	msr	PRIMASK, r3
}
 80086ae:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80086cc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086d0:	b672      	cpsid	i
}
 80086d2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f383 8810 	msr	PRIMASK, r3
}
 80086fa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086fc:	bf00      	nop
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008710:	f3ef 8310 	mrs	r3, PRIMASK
 8008714:	60fb      	str	r3, [r7, #12]
  return(result);
 8008716:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800871a:	b672      	cpsid	i
}
 800871c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6852      	ldr	r2, [r2, #4]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008754:	f3ef 8310 	mrs	r3, PRIMASK
 8008758:	60fb      	str	r3, [r7, #12]
  return(result);
 800875a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800875c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800875e:	b672      	cpsid	i
}
 8008760:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff ffca 	bl	8008708 <list_remove_node>
  (*node)->next = NULL;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	605a      	str	r2, [r3, #4]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f383 8810 	msr	PRIMASK, r3
}
 800878e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008790:	bf00      	nop
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a2:	f3ef 8310 	mrs	r3, PRIMASK
 80087a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80087a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087ac:	b672      	cpsid	i
}
 80087ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff ffa3 	bl	8008708 <list_remove_node>
  (*node)->next = NULL;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f383 8810 	msr	PRIMASK, r3
}
 80087dc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b089      	sub	sp, #36	; 0x24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  int size = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f2:	f3ef 8310 	mrs	r3, PRIMASK
 80087f6:	613b      	str	r3, [r7, #16]
  return(result);
 80087f8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087fc:	b672      	cpsid	i
}
 80087fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008806:	e005      	b.n	8008814 <list_get_size+0x2e>
  {
    size++;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3301      	adds	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d1f5      	bne.n	8008808 <list_get_size+0x22>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f383 8810 	msr	PRIMASK, r3
}
 8008826:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008828:	69fb      	ldr	r3, [r7, #28]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3724      	adds	r7, #36	; 0x24
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <std>:
 8008838:	2300      	movs	r3, #0
 800883a:	b510      	push	{r4, lr}
 800883c:	4604      	mov	r4, r0
 800883e:	e9c0 3300 	strd	r3, r3, [r0]
 8008842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008846:	6083      	str	r3, [r0, #8]
 8008848:	8181      	strh	r1, [r0, #12]
 800884a:	6643      	str	r3, [r0, #100]	; 0x64
 800884c:	81c2      	strh	r2, [r0, #14]
 800884e:	6183      	str	r3, [r0, #24]
 8008850:	4619      	mov	r1, r3
 8008852:	2208      	movs	r2, #8
 8008854:	305c      	adds	r0, #92	; 0x5c
 8008856:	f000 f9f5 	bl	8008c44 <memset>
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <std+0x38>)
 800885c:	6263      	str	r3, [r4, #36]	; 0x24
 800885e:	4b05      	ldr	r3, [pc, #20]	; (8008874 <std+0x3c>)
 8008860:	62a3      	str	r3, [r4, #40]	; 0x28
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <std+0x40>)
 8008864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <std+0x44>)
 8008868:	6224      	str	r4, [r4, #32]
 800886a:	6323      	str	r3, [r4, #48]	; 0x30
 800886c:	bd10      	pop	{r4, pc}
 800886e:	bf00      	nop
 8008870:	08008a75 	.word	0x08008a75
 8008874:	08008a97 	.word	0x08008a97
 8008878:	08008acf 	.word	0x08008acf
 800887c:	08008af3 	.word	0x08008af3

08008880 <stdio_exit_handler>:
 8008880:	4a02      	ldr	r2, [pc, #8]	; (800888c <stdio_exit_handler+0xc>)
 8008882:	4903      	ldr	r1, [pc, #12]	; (8008890 <stdio_exit_handler+0x10>)
 8008884:	4803      	ldr	r0, [pc, #12]	; (8008894 <stdio_exit_handler+0x14>)
 8008886:	f000 b869 	b.w	800895c <_fwalk_sglue>
 800888a:	bf00      	nop
 800888c:	20000024 	.word	0x20000024
 8008890:	080095f9 	.word	0x080095f9
 8008894:	20000030 	.word	0x20000030

08008898 <cleanup_stdio>:
 8008898:	6841      	ldr	r1, [r0, #4]
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <cleanup_stdio+0x34>)
 800889c:	4299      	cmp	r1, r3
 800889e:	b510      	push	{r4, lr}
 80088a0:	4604      	mov	r4, r0
 80088a2:	d001      	beq.n	80088a8 <cleanup_stdio+0x10>
 80088a4:	f000 fea8 	bl	80095f8 <_fflush_r>
 80088a8:	68a1      	ldr	r1, [r4, #8]
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <cleanup_stdio+0x38>)
 80088ac:	4299      	cmp	r1, r3
 80088ae:	d002      	beq.n	80088b6 <cleanup_stdio+0x1e>
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fea1 	bl	80095f8 <_fflush_r>
 80088b6:	68e1      	ldr	r1, [r4, #12]
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <cleanup_stdio+0x3c>)
 80088ba:	4299      	cmp	r1, r3
 80088bc:	d004      	beq.n	80088c8 <cleanup_stdio+0x30>
 80088be:	4620      	mov	r0, r4
 80088c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c4:	f000 be98 	b.w	80095f8 <_fflush_r>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	bf00      	nop
 80088cc:	200008e0 	.word	0x200008e0
 80088d0:	20000948 	.word	0x20000948
 80088d4:	200009b0 	.word	0x200009b0

080088d8 <global_stdio_init.part.0>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <global_stdio_init.part.0+0x30>)
 80088dc:	4c0b      	ldr	r4, [pc, #44]	; (800890c <global_stdio_init.part.0+0x34>)
 80088de:	4a0c      	ldr	r2, [pc, #48]	; (8008910 <global_stdio_init.part.0+0x38>)
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	4620      	mov	r0, r4
 80088e4:	2200      	movs	r2, #0
 80088e6:	2104      	movs	r1, #4
 80088e8:	f7ff ffa6 	bl	8008838 <std>
 80088ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088f0:	2201      	movs	r2, #1
 80088f2:	2109      	movs	r1, #9
 80088f4:	f7ff ffa0 	bl	8008838 <std>
 80088f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088fc:	2202      	movs	r2, #2
 80088fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008902:	2112      	movs	r1, #18
 8008904:	f7ff bf98 	b.w	8008838 <std>
 8008908:	20000a18 	.word	0x20000a18
 800890c:	200008e0 	.word	0x200008e0
 8008910:	08008881 	.word	0x08008881

08008914 <__sfp_lock_acquire>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__sfp_lock_acquire+0x8>)
 8008916:	f000 ba0d 	b.w	8008d34 <__retarget_lock_acquire_recursive>
 800891a:	bf00      	nop
 800891c:	20000a21 	.word	0x20000a21

08008920 <__sfp_lock_release>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__sfp_lock_release+0x8>)
 8008922:	f000 ba08 	b.w	8008d36 <__retarget_lock_release_recursive>
 8008926:	bf00      	nop
 8008928:	20000a21 	.word	0x20000a21

0800892c <__sinit>:
 800892c:	b510      	push	{r4, lr}
 800892e:	4604      	mov	r4, r0
 8008930:	f7ff fff0 	bl	8008914 <__sfp_lock_acquire>
 8008934:	6a23      	ldr	r3, [r4, #32]
 8008936:	b11b      	cbz	r3, 8008940 <__sinit+0x14>
 8008938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893c:	f7ff bff0 	b.w	8008920 <__sfp_lock_release>
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <__sinit+0x28>)
 8008942:	6223      	str	r3, [r4, #32]
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <__sinit+0x2c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f5      	bne.n	8008938 <__sinit+0xc>
 800894c:	f7ff ffc4 	bl	80088d8 <global_stdio_init.part.0>
 8008950:	e7f2      	b.n	8008938 <__sinit+0xc>
 8008952:	bf00      	nop
 8008954:	08008899 	.word	0x08008899
 8008958:	20000a18 	.word	0x20000a18

0800895c <_fwalk_sglue>:
 800895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008960:	4607      	mov	r7, r0
 8008962:	4688      	mov	r8, r1
 8008964:	4614      	mov	r4, r2
 8008966:	2600      	movs	r6, #0
 8008968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800896c:	f1b9 0901 	subs.w	r9, r9, #1
 8008970:	d505      	bpl.n	800897e <_fwalk_sglue+0x22>
 8008972:	6824      	ldr	r4, [r4, #0]
 8008974:	2c00      	cmp	r4, #0
 8008976:	d1f7      	bne.n	8008968 <_fwalk_sglue+0xc>
 8008978:	4630      	mov	r0, r6
 800897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d907      	bls.n	8008994 <_fwalk_sglue+0x38>
 8008984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008988:	3301      	adds	r3, #1
 800898a:	d003      	beq.n	8008994 <_fwalk_sglue+0x38>
 800898c:	4629      	mov	r1, r5
 800898e:	4638      	mov	r0, r7
 8008990:	47c0      	blx	r8
 8008992:	4306      	orrs	r6, r0
 8008994:	3568      	adds	r5, #104	; 0x68
 8008996:	e7e9      	b.n	800896c <_fwalk_sglue+0x10>

08008998 <iprintf>:
 8008998:	b40f      	push	{r0, r1, r2, r3}
 800899a:	b507      	push	{r0, r1, r2, lr}
 800899c:	4906      	ldr	r1, [pc, #24]	; (80089b8 <iprintf+0x20>)
 800899e:	ab04      	add	r3, sp, #16
 80089a0:	6808      	ldr	r0, [r1, #0]
 80089a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a6:	6881      	ldr	r1, [r0, #8]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f000 faf5 	bl	8008f98 <_vfiprintf_r>
 80089ae:	b003      	add	sp, #12
 80089b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b4:	b004      	add	sp, #16
 80089b6:	4770      	bx	lr
 80089b8:	2000007c 	.word	0x2000007c

080089bc <_puts_r>:
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	b570      	push	{r4, r5, r6, lr}
 80089c0:	6884      	ldr	r4, [r0, #8]
 80089c2:	4605      	mov	r5, r0
 80089c4:	460e      	mov	r6, r1
 80089c6:	b90b      	cbnz	r3, 80089cc <_puts_r+0x10>
 80089c8:	f7ff ffb0 	bl	800892c <__sinit>
 80089cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ce:	07db      	lsls	r3, r3, #31
 80089d0:	d405      	bmi.n	80089de <_puts_r+0x22>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	0598      	lsls	r0, r3, #22
 80089d6:	d402      	bmi.n	80089de <_puts_r+0x22>
 80089d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089da:	f000 f9ab 	bl	8008d34 <__retarget_lock_acquire_recursive>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	d513      	bpl.n	8008a0c <_puts_r+0x50>
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	b18b      	cbz	r3, 8008a0c <_puts_r+0x50>
 80089e8:	3e01      	subs	r6, #1
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089f0:	3b01      	subs	r3, #1
 80089f2:	60a3      	str	r3, [r4, #8]
 80089f4:	b9e9      	cbnz	r1, 8008a32 <_puts_r+0x76>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	da2e      	bge.n	8008a58 <_puts_r+0x9c>
 80089fa:	4622      	mov	r2, r4
 80089fc:	210a      	movs	r1, #10
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 f87b 	bl	8008afa <__swbuf_r>
 8008a04:	3001      	adds	r0, #1
 8008a06:	d007      	beq.n	8008a18 <_puts_r+0x5c>
 8008a08:	250a      	movs	r5, #10
 8008a0a:	e007      	b.n	8008a1c <_puts_r+0x60>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 f8b0 	bl	8008b74 <__swsetup_r>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d0e7      	beq.n	80089e8 <_puts_r+0x2c>
 8008a18:	f04f 35ff 	mov.w	r5, #4294967295
 8008a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a1e:	07da      	lsls	r2, r3, #31
 8008a20:	d405      	bmi.n	8008a2e <_puts_r+0x72>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	059b      	lsls	r3, r3, #22
 8008a26:	d402      	bmi.n	8008a2e <_puts_r+0x72>
 8008a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2a:	f000 f984 	bl	8008d36 <__retarget_lock_release_recursive>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da04      	bge.n	8008a40 <_puts_r+0x84>
 8008a36:	69a2      	ldr	r2, [r4, #24]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	dc06      	bgt.n	8008a4a <_puts_r+0x8e>
 8008a3c:	290a      	cmp	r1, #10
 8008a3e:	d004      	beq.n	8008a4a <_puts_r+0x8e>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	6022      	str	r2, [r4, #0]
 8008a46:	7019      	strb	r1, [r3, #0]
 8008a48:	e7cf      	b.n	80089ea <_puts_r+0x2e>
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 f854 	bl	8008afa <__swbuf_r>
 8008a52:	3001      	adds	r0, #1
 8008a54:	d1c9      	bne.n	80089ea <_puts_r+0x2e>
 8008a56:	e7df      	b.n	8008a18 <_puts_r+0x5c>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	250a      	movs	r5, #10
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	6022      	str	r2, [r4, #0]
 8008a60:	701d      	strb	r5, [r3, #0]
 8008a62:	e7db      	b.n	8008a1c <_puts_r+0x60>

08008a64 <puts>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <puts+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f7ff bfa7 	b.w	80089bc <_puts_r>
 8008a6e:	bf00      	nop
 8008a70:	2000007c 	.word	0x2000007c

08008a74 <__sread>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	460c      	mov	r4, r1
 8008a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7c:	f000 f90c 	bl	8008c98 <_read_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	bfab      	itete	ge
 8008a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a86:	89a3      	ldrhlt	r3, [r4, #12]
 8008a88:	181b      	addge	r3, r3, r0
 8008a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a8e:	bfac      	ite	ge
 8008a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a92:	81a3      	strhlt	r3, [r4, #12]
 8008a94:	bd10      	pop	{r4, pc}

08008a96 <__swrite>:
 8008a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	461f      	mov	r7, r3
 8008a9c:	898b      	ldrh	r3, [r1, #12]
 8008a9e:	05db      	lsls	r3, r3, #23
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	d505      	bpl.n	8008ab4 <__swrite+0x1e>
 8008aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aac:	2302      	movs	r3, #2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f000 f8e0 	bl	8008c74 <_lseek_r>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	463b      	mov	r3, r7
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	f000 b8f7 	b.w	8008cbc <_write_r>

08008ace <__sseek>:
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad6:	f000 f8cd 	bl	8008c74 <_lseek_r>
 8008ada:	1c43      	adds	r3, r0, #1
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	bf15      	itete	ne
 8008ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aea:	81a3      	strheq	r3, [r4, #12]
 8008aec:	bf18      	it	ne
 8008aee:	81a3      	strhne	r3, [r4, #12]
 8008af0:	bd10      	pop	{r4, pc}

08008af2 <__sclose>:
 8008af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af6:	f000 b8ad 	b.w	8008c54 <_close_r>

08008afa <__swbuf_r>:
 8008afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afc:	460e      	mov	r6, r1
 8008afe:	4614      	mov	r4, r2
 8008b00:	4605      	mov	r5, r0
 8008b02:	b118      	cbz	r0, 8008b0c <__swbuf_r+0x12>
 8008b04:	6a03      	ldr	r3, [r0, #32]
 8008b06:	b90b      	cbnz	r3, 8008b0c <__swbuf_r+0x12>
 8008b08:	f7ff ff10 	bl	800892c <__sinit>
 8008b0c:	69a3      	ldr	r3, [r4, #24]
 8008b0e:	60a3      	str	r3, [r4, #8]
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	071a      	lsls	r2, r3, #28
 8008b14:	d525      	bpl.n	8008b62 <__swbuf_r+0x68>
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	b31b      	cbz	r3, 8008b62 <__swbuf_r+0x68>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	6922      	ldr	r2, [r4, #16]
 8008b1e:	1a98      	subs	r0, r3, r2
 8008b20:	6963      	ldr	r3, [r4, #20]
 8008b22:	b2f6      	uxtb	r6, r6
 8008b24:	4283      	cmp	r3, r0
 8008b26:	4637      	mov	r7, r6
 8008b28:	dc04      	bgt.n	8008b34 <__swbuf_r+0x3a>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fd63 	bl	80095f8 <_fflush_r>
 8008b32:	b9e0      	cbnz	r0, 8008b6e <__swbuf_r+0x74>
 8008b34:	68a3      	ldr	r3, [r4, #8]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	701e      	strb	r6, [r3, #0]
 8008b42:	6962      	ldr	r2, [r4, #20]
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d004      	beq.n	8008b54 <__swbuf_r+0x5a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d506      	bpl.n	8008b5e <__swbuf_r+0x64>
 8008b50:	2e0a      	cmp	r6, #10
 8008b52:	d104      	bne.n	8008b5e <__swbuf_r+0x64>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 fd4e 	bl	80095f8 <_fflush_r>
 8008b5c:	b938      	cbnz	r0, 8008b6e <__swbuf_r+0x74>
 8008b5e:	4638      	mov	r0, r7
 8008b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f805 	bl	8008b74 <__swsetup_r>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0d5      	beq.n	8008b1a <__swbuf_r+0x20>
 8008b6e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b72:	e7f4      	b.n	8008b5e <__swbuf_r+0x64>

08008b74 <__swsetup_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4b2a      	ldr	r3, [pc, #168]	; (8008c20 <__swsetup_r+0xac>)
 8008b78:	4605      	mov	r5, r0
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	b118      	cbz	r0, 8008b88 <__swsetup_r+0x14>
 8008b80:	6a03      	ldr	r3, [r0, #32]
 8008b82:	b90b      	cbnz	r3, 8008b88 <__swsetup_r+0x14>
 8008b84:	f7ff fed2 	bl	800892c <__sinit>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b8e:	0718      	lsls	r0, r3, #28
 8008b90:	d422      	bmi.n	8008bd8 <__swsetup_r+0x64>
 8008b92:	06d9      	lsls	r1, r3, #27
 8008b94:	d407      	bmi.n	8008ba6 <__swsetup_r+0x32>
 8008b96:	2309      	movs	r3, #9
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e034      	b.n	8008c10 <__swsetup_r+0x9c>
 8008ba6:	0758      	lsls	r0, r3, #29
 8008ba8:	d512      	bpl.n	8008bd0 <__swsetup_r+0x5c>
 8008baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bac:	b141      	cbz	r1, 8008bc0 <__swsetup_r+0x4c>
 8008bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	d002      	beq.n	8008bbc <__swsetup_r+0x48>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 f8cc 	bl	8008d54 <_free_r>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6363      	str	r3, [r4, #52]	; 0x34
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6063      	str	r3, [r4, #4]
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f043 0308 	orr.w	r3, r3, #8
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	b94b      	cbnz	r3, 8008bf0 <__swsetup_r+0x7c>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be6:	d003      	beq.n	8008bf0 <__swsetup_r+0x7c>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 fd52 	bl	8009694 <__smakebuf_r>
 8008bf0:	89a0      	ldrh	r0, [r4, #12]
 8008bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bf6:	f010 0301 	ands.w	r3, r0, #1
 8008bfa:	d00a      	beq.n	8008c12 <__swsetup_r+0x9e>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60a3      	str	r3, [r4, #8]
 8008c00:	6963      	ldr	r3, [r4, #20]
 8008c02:	425b      	negs	r3, r3
 8008c04:	61a3      	str	r3, [r4, #24]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	b943      	cbnz	r3, 8008c1c <__swsetup_r+0xa8>
 8008c0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c0e:	d1c4      	bne.n	8008b9a <__swsetup_r+0x26>
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	0781      	lsls	r1, r0, #30
 8008c14:	bf58      	it	pl
 8008c16:	6963      	ldrpl	r3, [r4, #20]
 8008c18:	60a3      	str	r3, [r4, #8]
 8008c1a:	e7f4      	b.n	8008c06 <__swsetup_r+0x92>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e7f7      	b.n	8008c10 <__swsetup_r+0x9c>
 8008c20:	2000007c 	.word	0x2000007c

08008c24 <memcmp>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	3901      	subs	r1, #1
 8008c28:	4402      	add	r2, r0
 8008c2a:	4290      	cmp	r0, r2
 8008c2c:	d101      	bne.n	8008c32 <memcmp+0xe>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e005      	b.n	8008c3e <memcmp+0x1a>
 8008c32:	7803      	ldrb	r3, [r0, #0]
 8008c34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d001      	beq.n	8008c40 <memcmp+0x1c>
 8008c3c:	1b18      	subs	r0, r3, r4
 8008c3e:	bd10      	pop	{r4, pc}
 8008c40:	3001      	adds	r0, #1
 8008c42:	e7f2      	b.n	8008c2a <memcmp+0x6>

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <_close_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d06      	ldr	r5, [pc, #24]	; (8008c70 <_close_r+0x1c>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f9 fb87 	bl	8002372 <_close>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_close_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_close_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20000a1c 	.word	0x20000a1c

08008c74 <_lseek_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	; (8008c94 <_lseek_r+0x20>)
 8008c78:	4604      	mov	r4, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f7f9 fb9c 	bl	80023c0 <_lseek>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_lseek_r+0x1e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_lseek_r+0x1e>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20000a1c 	.word	0x20000a1c

08008c98 <_read_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	; (8008cb8 <_read_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f9 fb2a 	bl	8002300 <_read>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_read_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_read_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20000a1c 	.word	0x20000a1c

08008cbc <_write_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d07      	ldr	r5, [pc, #28]	; (8008cdc <_write_r+0x20>)
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	602a      	str	r2, [r5, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f7f9 fb35 	bl	800233a <_write>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_write_r+0x1e>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_write_r+0x1e>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20000a1c 	.word	0x20000a1c

08008ce0 <__errno>:
 8008ce0:	4b01      	ldr	r3, [pc, #4]	; (8008ce8 <__errno+0x8>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	2000007c 	.word	0x2000007c

08008cec <__libc_init_array>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4d0d      	ldr	r5, [pc, #52]	; (8008d24 <__libc_init_array+0x38>)
 8008cf0:	4c0d      	ldr	r4, [pc, #52]	; (8008d28 <__libc_init_array+0x3c>)
 8008cf2:	1b64      	subs	r4, r4, r5
 8008cf4:	10a4      	asrs	r4, r4, #2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	42a6      	cmp	r6, r4
 8008cfa:	d109      	bne.n	8008d10 <__libc_init_array+0x24>
 8008cfc:	4d0b      	ldr	r5, [pc, #44]	; (8008d2c <__libc_init_array+0x40>)
 8008cfe:	4c0c      	ldr	r4, [pc, #48]	; (8008d30 <__libc_init_array+0x44>)
 8008d00:	f000 fd36 	bl	8009770 <_init>
 8008d04:	1b64      	subs	r4, r4, r5
 8008d06:	10a4      	asrs	r4, r4, #2
 8008d08:	2600      	movs	r6, #0
 8008d0a:	42a6      	cmp	r6, r4
 8008d0c:	d105      	bne.n	8008d1a <__libc_init_array+0x2e>
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d14:	4798      	blx	r3
 8008d16:	3601      	adds	r6, #1
 8008d18:	e7ee      	b.n	8008cf8 <__libc_init_array+0xc>
 8008d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1e:	4798      	blx	r3
 8008d20:	3601      	adds	r6, #1
 8008d22:	e7f2      	b.n	8008d0a <__libc_init_array+0x1e>
 8008d24:	0800a094 	.word	0x0800a094
 8008d28:	0800a094 	.word	0x0800a094
 8008d2c:	0800a094 	.word	0x0800a094
 8008d30:	0800a098 	.word	0x0800a098

08008d34 <__retarget_lock_acquire_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <__retarget_lock_release_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <memcpy>:
 8008d38:	440a      	add	r2, r1
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d40:	d100      	bne.n	8008d44 <memcpy+0xc>
 8008d42:	4770      	bx	lr
 8008d44:	b510      	push	{r4, lr}
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	d1f9      	bne.n	8008d46 <memcpy+0xe>
 8008d52:	bd10      	pop	{r4, pc}

08008d54 <_free_r>:
 8008d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d044      	beq.n	8008de4 <_free_r+0x90>
 8008d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d5e:	9001      	str	r0, [sp, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f1a1 0404 	sub.w	r4, r1, #4
 8008d66:	bfb8      	it	lt
 8008d68:	18e4      	addlt	r4, r4, r3
 8008d6a:	f000 f8df 	bl	8008f2c <__malloc_lock>
 8008d6e:	4a1e      	ldr	r2, [pc, #120]	; (8008de8 <_free_r+0x94>)
 8008d70:	9801      	ldr	r0, [sp, #4]
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	b933      	cbnz	r3, 8008d84 <_free_r+0x30>
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	6014      	str	r4, [r2, #0]
 8008d7a:	b003      	add	sp, #12
 8008d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d80:	f000 b8da 	b.w	8008f38 <__malloc_unlock>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d908      	bls.n	8008d9a <_free_r+0x46>
 8008d88:	6825      	ldr	r5, [r4, #0]
 8008d8a:	1961      	adds	r1, r4, r5
 8008d8c:	428b      	cmp	r3, r1
 8008d8e:	bf01      	itttt	eq
 8008d90:	6819      	ldreq	r1, [r3, #0]
 8008d92:	685b      	ldreq	r3, [r3, #4]
 8008d94:	1949      	addeq	r1, r1, r5
 8008d96:	6021      	streq	r1, [r4, #0]
 8008d98:	e7ed      	b.n	8008d76 <_free_r+0x22>
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	b10b      	cbz	r3, 8008da4 <_free_r+0x50>
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d9fa      	bls.n	8008d9a <_free_r+0x46>
 8008da4:	6811      	ldr	r1, [r2, #0]
 8008da6:	1855      	adds	r5, r2, r1
 8008da8:	42a5      	cmp	r5, r4
 8008daa:	d10b      	bne.n	8008dc4 <_free_r+0x70>
 8008dac:	6824      	ldr	r4, [r4, #0]
 8008dae:	4421      	add	r1, r4
 8008db0:	1854      	adds	r4, r2, r1
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	d1e0      	bne.n	8008d7a <_free_r+0x26>
 8008db8:	681c      	ldr	r4, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	6053      	str	r3, [r2, #4]
 8008dbe:	440c      	add	r4, r1
 8008dc0:	6014      	str	r4, [r2, #0]
 8008dc2:	e7da      	b.n	8008d7a <_free_r+0x26>
 8008dc4:	d902      	bls.n	8008dcc <_free_r+0x78>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	6003      	str	r3, [r0, #0]
 8008dca:	e7d6      	b.n	8008d7a <_free_r+0x26>
 8008dcc:	6825      	ldr	r5, [r4, #0]
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf04      	itt	eq
 8008dd4:	6819      	ldreq	r1, [r3, #0]
 8008dd6:	685b      	ldreq	r3, [r3, #4]
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	bf04      	itt	eq
 8008ddc:	1949      	addeq	r1, r1, r5
 8008dde:	6021      	streq	r1, [r4, #0]
 8008de0:	6054      	str	r4, [r2, #4]
 8008de2:	e7ca      	b.n	8008d7a <_free_r+0x26>
 8008de4:	b003      	add	sp, #12
 8008de6:	bd30      	pop	{r4, r5, pc}
 8008de8:	20000a24 	.word	0x20000a24

08008dec <sbrk_aligned>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4e0e      	ldr	r6, [pc, #56]	; (8008e28 <sbrk_aligned+0x3c>)
 8008df0:	460c      	mov	r4, r1
 8008df2:	6831      	ldr	r1, [r6, #0]
 8008df4:	4605      	mov	r5, r0
 8008df6:	b911      	cbnz	r1, 8008dfe <sbrk_aligned+0x12>
 8008df8:	f000 fcaa 	bl	8009750 <_sbrk_r>
 8008dfc:	6030      	str	r0, [r6, #0]
 8008dfe:	4621      	mov	r1, r4
 8008e00:	4628      	mov	r0, r5
 8008e02:	f000 fca5 	bl	8009750 <_sbrk_r>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d00a      	beq.n	8008e20 <sbrk_aligned+0x34>
 8008e0a:	1cc4      	adds	r4, r0, #3
 8008e0c:	f024 0403 	bic.w	r4, r4, #3
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d007      	beq.n	8008e24 <sbrk_aligned+0x38>
 8008e14:	1a21      	subs	r1, r4, r0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 fc9a 	bl	8009750 <_sbrk_r>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d101      	bne.n	8008e24 <sbrk_aligned+0x38>
 8008e20:	f04f 34ff 	mov.w	r4, #4294967295
 8008e24:	4620      	mov	r0, r4
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	20000a28 	.word	0x20000a28

08008e2c <_malloc_r>:
 8008e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e30:	1ccd      	adds	r5, r1, #3
 8008e32:	f025 0503 	bic.w	r5, r5, #3
 8008e36:	3508      	adds	r5, #8
 8008e38:	2d0c      	cmp	r5, #12
 8008e3a:	bf38      	it	cc
 8008e3c:	250c      	movcc	r5, #12
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	4607      	mov	r7, r0
 8008e42:	db01      	blt.n	8008e48 <_malloc_r+0x1c>
 8008e44:	42a9      	cmp	r1, r5
 8008e46:	d905      	bls.n	8008e54 <_malloc_r+0x28>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	2600      	movs	r6, #0
 8008e4e:	4630      	mov	r0, r6
 8008e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f28 <_malloc_r+0xfc>
 8008e58:	f000 f868 	bl	8008f2c <__malloc_lock>
 8008e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e60:	461c      	mov	r4, r3
 8008e62:	bb5c      	cbnz	r4, 8008ebc <_malloc_r+0x90>
 8008e64:	4629      	mov	r1, r5
 8008e66:	4638      	mov	r0, r7
 8008e68:	f7ff ffc0 	bl	8008dec <sbrk_aligned>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	4604      	mov	r4, r0
 8008e70:	d155      	bne.n	8008f1e <_malloc_r+0xf2>
 8008e72:	f8d8 4000 	ldr.w	r4, [r8]
 8008e76:	4626      	mov	r6, r4
 8008e78:	2e00      	cmp	r6, #0
 8008e7a:	d145      	bne.n	8008f08 <_malloc_r+0xdc>
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	d048      	beq.n	8008f12 <_malloc_r+0xe6>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	4631      	mov	r1, r6
 8008e84:	4638      	mov	r0, r7
 8008e86:	eb04 0903 	add.w	r9, r4, r3
 8008e8a:	f000 fc61 	bl	8009750 <_sbrk_r>
 8008e8e:	4581      	cmp	r9, r0
 8008e90:	d13f      	bne.n	8008f12 <_malloc_r+0xe6>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	1a6d      	subs	r5, r5, r1
 8008e96:	4629      	mov	r1, r5
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ffa7 	bl	8008dec <sbrk_aligned>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d037      	beq.n	8008f12 <_malloc_r+0xe6>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	442b      	add	r3, r5
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d038      	beq.n	8008f22 <_malloc_r+0xf6>
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	42a2      	cmp	r2, r4
 8008eb4:	d12b      	bne.n	8008f0e <_malloc_r+0xe2>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	e00f      	b.n	8008edc <_malloc_r+0xb0>
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	1b52      	subs	r2, r2, r5
 8008ec0:	d41f      	bmi.n	8008f02 <_malloc_r+0xd6>
 8008ec2:	2a0b      	cmp	r2, #11
 8008ec4:	d917      	bls.n	8008ef6 <_malloc_r+0xca>
 8008ec6:	1961      	adds	r1, r4, r5
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	6025      	str	r5, [r4, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	6059      	strne	r1, [r3, #4]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	bf08      	it	eq
 8008ed4:	f8c8 1000 	streq.w	r1, [r8]
 8008ed8:	5162      	str	r2, [r4, r5]
 8008eda:	604b      	str	r3, [r1, #4]
 8008edc:	4638      	mov	r0, r7
 8008ede:	f104 060b 	add.w	r6, r4, #11
 8008ee2:	f000 f829 	bl	8008f38 <__malloc_unlock>
 8008ee6:	f026 0607 	bic.w	r6, r6, #7
 8008eea:	1d23      	adds	r3, r4, #4
 8008eec:	1af2      	subs	r2, r6, r3
 8008eee:	d0ae      	beq.n	8008e4e <_malloc_r+0x22>
 8008ef0:	1b9b      	subs	r3, r3, r6
 8008ef2:	50a3      	str	r3, [r4, r2]
 8008ef4:	e7ab      	b.n	8008e4e <_malloc_r+0x22>
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	d1dd      	bne.n	8008eb8 <_malloc_r+0x8c>
 8008efc:	f8c8 2000 	str.w	r2, [r8]
 8008f00:	e7ec      	b.n	8008edc <_malloc_r+0xb0>
 8008f02:	4623      	mov	r3, r4
 8008f04:	6864      	ldr	r4, [r4, #4]
 8008f06:	e7ac      	b.n	8008e62 <_malloc_r+0x36>
 8008f08:	4634      	mov	r4, r6
 8008f0a:	6876      	ldr	r6, [r6, #4]
 8008f0c:	e7b4      	b.n	8008e78 <_malloc_r+0x4c>
 8008f0e:	4613      	mov	r3, r2
 8008f10:	e7cc      	b.n	8008eac <_malloc_r+0x80>
 8008f12:	230c      	movs	r3, #12
 8008f14:	603b      	str	r3, [r7, #0]
 8008f16:	4638      	mov	r0, r7
 8008f18:	f000 f80e 	bl	8008f38 <__malloc_unlock>
 8008f1c:	e797      	b.n	8008e4e <_malloc_r+0x22>
 8008f1e:	6025      	str	r5, [r4, #0]
 8008f20:	e7dc      	b.n	8008edc <_malloc_r+0xb0>
 8008f22:	605b      	str	r3, [r3, #4]
 8008f24:	deff      	udf	#255	; 0xff
 8008f26:	bf00      	nop
 8008f28:	20000a24 	.word	0x20000a24

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f7ff bf01 	b.w	8008d34 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000a20 	.word	0x20000a20

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f7ff befc 	b.w	8008d36 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000a20 	.word	0x20000a20

08008f44 <__sfputc_r>:
 8008f44:	6893      	ldr	r3, [r2, #8]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	b410      	push	{r4}
 8008f4c:	6093      	str	r3, [r2, #8]
 8008f4e:	da08      	bge.n	8008f62 <__sfputc_r+0x1e>
 8008f50:	6994      	ldr	r4, [r2, #24]
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	db01      	blt.n	8008f5a <__sfputc_r+0x16>
 8008f56:	290a      	cmp	r1, #10
 8008f58:	d103      	bne.n	8008f62 <__sfputc_r+0x1e>
 8008f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f5e:	f7ff bdcc 	b.w	8008afa <__swbuf_r>
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	1c58      	adds	r0, r3, #1
 8008f66:	6010      	str	r0, [r2, #0]
 8008f68:	7019      	strb	r1, [r3, #0]
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <__sfputs_r>:
 8008f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f74:	4606      	mov	r6, r0
 8008f76:	460f      	mov	r7, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	18d5      	adds	r5, r2, r3
 8008f7c:	42ac      	cmp	r4, r5
 8008f7e:	d101      	bne.n	8008f84 <__sfputs_r+0x12>
 8008f80:	2000      	movs	r0, #0
 8008f82:	e007      	b.n	8008f94 <__sfputs_r+0x22>
 8008f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f88:	463a      	mov	r2, r7
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ffda 	bl	8008f44 <__sfputc_r>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d1f3      	bne.n	8008f7c <__sfputs_r+0xa>
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f98 <_vfiprintf_r>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	b09d      	sub	sp, #116	; 0x74
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	4698      	mov	r8, r3
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	b118      	cbz	r0, 8008fb0 <_vfiprintf_r+0x18>
 8008fa8:	6a03      	ldr	r3, [r0, #32]
 8008faa:	b90b      	cbnz	r3, 8008fb0 <_vfiprintf_r+0x18>
 8008fac:	f7ff fcbe 	bl	800892c <__sinit>
 8008fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fb2:	07d9      	lsls	r1, r3, #31
 8008fb4:	d405      	bmi.n	8008fc2 <_vfiprintf_r+0x2a>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	059a      	lsls	r2, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_vfiprintf_r+0x2a>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fbe:	f7ff feb9 	bl	8008d34 <__retarget_lock_acquire_recursive>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	071b      	lsls	r3, r3, #28
 8008fc6:	d501      	bpl.n	8008fcc <_vfiprintf_r+0x34>
 8008fc8:	692b      	ldr	r3, [r5, #16]
 8008fca:	b99b      	cbnz	r3, 8008ff4 <_vfiprintf_r+0x5c>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff fdd0 	bl	8008b74 <__swsetup_r>
 8008fd4:	b170      	cbz	r0, 8008ff4 <_vfiprintf_r+0x5c>
 8008fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd8:	07dc      	lsls	r4, r3, #31
 8008fda:	d504      	bpl.n	8008fe6 <_vfiprintf_r+0x4e>
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	b01d      	add	sp, #116	; 0x74
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	0598      	lsls	r0, r3, #22
 8008fea:	d4f7      	bmi.n	8008fdc <_vfiprintf_r+0x44>
 8008fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fee:	f7ff fea2 	bl	8008d36 <__retarget_lock_release_recursive>
 8008ff2:	e7f3      	b.n	8008fdc <_vfiprintf_r+0x44>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009002:	2330      	movs	r3, #48	; 0x30
 8009004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091b8 <_vfiprintf_r+0x220>
 8009008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800900c:	f04f 0901 	mov.w	r9, #1
 8009010:	4623      	mov	r3, r4
 8009012:	469a      	mov	sl, r3
 8009014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009018:	b10a      	cbz	r2, 800901e <_vfiprintf_r+0x86>
 800901a:	2a25      	cmp	r2, #37	; 0x25
 800901c:	d1f9      	bne.n	8009012 <_vfiprintf_r+0x7a>
 800901e:	ebba 0b04 	subs.w	fp, sl, r4
 8009022:	d00b      	beq.n	800903c <_vfiprintf_r+0xa4>
 8009024:	465b      	mov	r3, fp
 8009026:	4622      	mov	r2, r4
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ffa1 	bl	8008f72 <__sfputs_r>
 8009030:	3001      	adds	r0, #1
 8009032:	f000 80a9 	beq.w	8009188 <_vfiprintf_r+0x1f0>
 8009036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009038:	445a      	add	r2, fp
 800903a:	9209      	str	r2, [sp, #36]	; 0x24
 800903c:	f89a 3000 	ldrb.w	r3, [sl]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80a1 	beq.w	8009188 <_vfiprintf_r+0x1f0>
 8009046:	2300      	movs	r3, #0
 8009048:	f04f 32ff 	mov.w	r2, #4294967295
 800904c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009050:	f10a 0a01 	add.w	sl, sl, #1
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800905c:	931a      	str	r3, [sp, #104]	; 0x68
 800905e:	4654      	mov	r4, sl
 8009060:	2205      	movs	r2, #5
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4854      	ldr	r0, [pc, #336]	; (80091b8 <_vfiprintf_r+0x220>)
 8009068:	f7f7 f8b2 	bl	80001d0 <memchr>
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	b9d8      	cbnz	r0, 80090a8 <_vfiprintf_r+0x110>
 8009070:	06d1      	lsls	r1, r2, #27
 8009072:	bf44      	itt	mi
 8009074:	2320      	movmi	r3, #32
 8009076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800907a:	0713      	lsls	r3, r2, #28
 800907c:	bf44      	itt	mi
 800907e:	232b      	movmi	r3, #43	; 0x2b
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009084:	f89a 3000 	ldrb.w	r3, [sl]
 8009088:	2b2a      	cmp	r3, #42	; 0x2a
 800908a:	d015      	beq.n	80090b8 <_vfiprintf_r+0x120>
 800908c:	9a07      	ldr	r2, [sp, #28]
 800908e:	4654      	mov	r4, sl
 8009090:	2000      	movs	r0, #0
 8009092:	f04f 0c0a 	mov.w	ip, #10
 8009096:	4621      	mov	r1, r4
 8009098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909c:	3b30      	subs	r3, #48	; 0x30
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d94d      	bls.n	800913e <_vfiprintf_r+0x1a6>
 80090a2:	b1b0      	cbz	r0, 80090d2 <_vfiprintf_r+0x13a>
 80090a4:	9207      	str	r2, [sp, #28]
 80090a6:	e014      	b.n	80090d2 <_vfiprintf_r+0x13a>
 80090a8:	eba0 0308 	sub.w	r3, r0, r8
 80090ac:	fa09 f303 	lsl.w	r3, r9, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	46a2      	mov	sl, r4
 80090b6:	e7d2      	b.n	800905e <_vfiprintf_r+0xc6>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	1d19      	adds	r1, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	9103      	str	r1, [sp, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfbb      	ittet	lt
 80090c4:	425b      	neglt	r3, r3
 80090c6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ca:	9307      	strge	r3, [sp, #28]
 80090cc:	9307      	strlt	r3, [sp, #28]
 80090ce:	bfb8      	it	lt
 80090d0:	9204      	strlt	r2, [sp, #16]
 80090d2:	7823      	ldrb	r3, [r4, #0]
 80090d4:	2b2e      	cmp	r3, #46	; 0x2e
 80090d6:	d10c      	bne.n	80090f2 <_vfiprintf_r+0x15a>
 80090d8:	7863      	ldrb	r3, [r4, #1]
 80090da:	2b2a      	cmp	r3, #42	; 0x2a
 80090dc:	d134      	bne.n	8009148 <_vfiprintf_r+0x1b0>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	9203      	str	r2, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bfb8      	it	lt
 80090ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80090ee:	3402      	adds	r4, #2
 80090f0:	9305      	str	r3, [sp, #20]
 80090f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091c8 <_vfiprintf_r+0x230>
 80090f6:	7821      	ldrb	r1, [r4, #0]
 80090f8:	2203      	movs	r2, #3
 80090fa:	4650      	mov	r0, sl
 80090fc:	f7f7 f868 	bl	80001d0 <memchr>
 8009100:	b138      	cbz	r0, 8009112 <_vfiprintf_r+0x17a>
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	eba0 000a 	sub.w	r0, r0, sl
 8009108:	2240      	movs	r2, #64	; 0x40
 800910a:	4082      	lsls	r2, r0
 800910c:	4313      	orrs	r3, r2
 800910e:	3401      	adds	r4, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009116:	4829      	ldr	r0, [pc, #164]	; (80091bc <_vfiprintf_r+0x224>)
 8009118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800911c:	2206      	movs	r2, #6
 800911e:	f7f7 f857 	bl	80001d0 <memchr>
 8009122:	2800      	cmp	r0, #0
 8009124:	d03f      	beq.n	80091a6 <_vfiprintf_r+0x20e>
 8009126:	4b26      	ldr	r3, [pc, #152]	; (80091c0 <_vfiprintf_r+0x228>)
 8009128:	bb1b      	cbnz	r3, 8009172 <_vfiprintf_r+0x1da>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	3307      	adds	r3, #7
 800912e:	f023 0307 	bic.w	r3, r3, #7
 8009132:	3308      	adds	r3, #8
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	443b      	add	r3, r7
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	e768      	b.n	8009010 <_vfiprintf_r+0x78>
 800913e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009142:	460c      	mov	r4, r1
 8009144:	2001      	movs	r0, #1
 8009146:	e7a6      	b.n	8009096 <_vfiprintf_r+0xfe>
 8009148:	2300      	movs	r3, #0
 800914a:	3401      	adds	r4, #1
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	4619      	mov	r1, r3
 8009150:	f04f 0c0a 	mov.w	ip, #10
 8009154:	4620      	mov	r0, r4
 8009156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915a:	3a30      	subs	r2, #48	; 0x30
 800915c:	2a09      	cmp	r2, #9
 800915e:	d903      	bls.n	8009168 <_vfiprintf_r+0x1d0>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0c6      	beq.n	80090f2 <_vfiprintf_r+0x15a>
 8009164:	9105      	str	r1, [sp, #20]
 8009166:	e7c4      	b.n	80090f2 <_vfiprintf_r+0x15a>
 8009168:	fb0c 2101 	mla	r1, ip, r1, r2
 800916c:	4604      	mov	r4, r0
 800916e:	2301      	movs	r3, #1
 8009170:	e7f0      	b.n	8009154 <_vfiprintf_r+0x1bc>
 8009172:	ab03      	add	r3, sp, #12
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	462a      	mov	r2, r5
 8009178:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <_vfiprintf_r+0x22c>)
 800917a:	a904      	add	r1, sp, #16
 800917c:	4630      	mov	r0, r6
 800917e:	f3af 8000 	nop.w
 8009182:	4607      	mov	r7, r0
 8009184:	1c78      	adds	r0, r7, #1
 8009186:	d1d6      	bne.n	8009136 <_vfiprintf_r+0x19e>
 8009188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800918a:	07d9      	lsls	r1, r3, #31
 800918c:	d405      	bmi.n	800919a <_vfiprintf_r+0x202>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d402      	bmi.n	800919a <_vfiprintf_r+0x202>
 8009194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009196:	f7ff fdce 	bl	8008d36 <__retarget_lock_release_recursive>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	065b      	lsls	r3, r3, #25
 800919e:	f53f af1d 	bmi.w	8008fdc <_vfiprintf_r+0x44>
 80091a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a4:	e71c      	b.n	8008fe0 <_vfiprintf_r+0x48>
 80091a6:	ab03      	add	r3, sp, #12
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	462a      	mov	r2, r5
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <_vfiprintf_r+0x22c>)
 80091ae:	a904      	add	r1, sp, #16
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f879 	bl	80092a8 <_printf_i>
 80091b6:	e7e4      	b.n	8009182 <_vfiprintf_r+0x1ea>
 80091b8:	0800a058 	.word	0x0800a058
 80091bc:	0800a062 	.word	0x0800a062
 80091c0:	00000000 	.word	0x00000000
 80091c4:	08008f73 	.word	0x08008f73
 80091c8:	0800a05e 	.word	0x0800a05e

080091cc <_printf_common>:
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	4616      	mov	r6, r2
 80091d2:	4699      	mov	r9, r3
 80091d4:	688a      	ldr	r2, [r1, #8]
 80091d6:	690b      	ldr	r3, [r1, #16]
 80091d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091dc:	4293      	cmp	r3, r2
 80091de:	bfb8      	it	lt
 80091e0:	4613      	movlt	r3, r2
 80091e2:	6033      	str	r3, [r6, #0]
 80091e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091e8:	4607      	mov	r7, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b10a      	cbz	r2, 80091f2 <_printf_common+0x26>
 80091ee:	3301      	adds	r3, #1
 80091f0:	6033      	str	r3, [r6, #0]
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	0699      	lsls	r1, r3, #26
 80091f6:	bf42      	ittt	mi
 80091f8:	6833      	ldrmi	r3, [r6, #0]
 80091fa:	3302      	addmi	r3, #2
 80091fc:	6033      	strmi	r3, [r6, #0]
 80091fe:	6825      	ldr	r5, [r4, #0]
 8009200:	f015 0506 	ands.w	r5, r5, #6
 8009204:	d106      	bne.n	8009214 <_printf_common+0x48>
 8009206:	f104 0a19 	add.w	sl, r4, #25
 800920a:	68e3      	ldr	r3, [r4, #12]
 800920c:	6832      	ldr	r2, [r6, #0]
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	42ab      	cmp	r3, r5
 8009212:	dc26      	bgt.n	8009262 <_printf_common+0x96>
 8009214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009218:	1e13      	subs	r3, r2, #0
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	bf18      	it	ne
 800921e:	2301      	movne	r3, #1
 8009220:	0692      	lsls	r2, r2, #26
 8009222:	d42b      	bmi.n	800927c <_printf_common+0xb0>
 8009224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009228:	4649      	mov	r1, r9
 800922a:	4638      	mov	r0, r7
 800922c:	47c0      	blx	r8
 800922e:	3001      	adds	r0, #1
 8009230:	d01e      	beq.n	8009270 <_printf_common+0xa4>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	f003 0306 	and.w	r3, r3, #6
 800923a:	2b04      	cmp	r3, #4
 800923c:	bf02      	ittt	eq
 800923e:	68e5      	ldreq	r5, [r4, #12]
 8009240:	6833      	ldreq	r3, [r6, #0]
 8009242:	1aed      	subeq	r5, r5, r3
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	bf0c      	ite	eq
 8009248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800924c:	2500      	movne	r5, #0
 800924e:	4293      	cmp	r3, r2
 8009250:	bfc4      	itt	gt
 8009252:	1a9b      	subgt	r3, r3, r2
 8009254:	18ed      	addgt	r5, r5, r3
 8009256:	2600      	movs	r6, #0
 8009258:	341a      	adds	r4, #26
 800925a:	42b5      	cmp	r5, r6
 800925c:	d11a      	bne.n	8009294 <_printf_common+0xc8>
 800925e:	2000      	movs	r0, #0
 8009260:	e008      	b.n	8009274 <_printf_common+0xa8>
 8009262:	2301      	movs	r3, #1
 8009264:	4652      	mov	r2, sl
 8009266:	4649      	mov	r1, r9
 8009268:	4638      	mov	r0, r7
 800926a:	47c0      	blx	r8
 800926c:	3001      	adds	r0, #1
 800926e:	d103      	bne.n	8009278 <_printf_common+0xac>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	3501      	adds	r5, #1
 800927a:	e7c6      	b.n	800920a <_printf_common+0x3e>
 800927c:	18e1      	adds	r1, r4, r3
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	2030      	movs	r0, #48	; 0x30
 8009282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009286:	4422      	add	r2, r4
 8009288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800928c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009290:	3302      	adds	r3, #2
 8009292:	e7c7      	b.n	8009224 <_printf_common+0x58>
 8009294:	2301      	movs	r3, #1
 8009296:	4622      	mov	r2, r4
 8009298:	4649      	mov	r1, r9
 800929a:	4638      	mov	r0, r7
 800929c:	47c0      	blx	r8
 800929e:	3001      	adds	r0, #1
 80092a0:	d0e6      	beq.n	8009270 <_printf_common+0xa4>
 80092a2:	3601      	adds	r6, #1
 80092a4:	e7d9      	b.n	800925a <_printf_common+0x8e>
	...

080092a8 <_printf_i>:
 80092a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	7e0f      	ldrb	r7, [r1, #24]
 80092ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092b0:	2f78      	cmp	r7, #120	; 0x78
 80092b2:	4691      	mov	r9, r2
 80092b4:	4680      	mov	r8, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	469a      	mov	sl, r3
 80092ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092be:	d807      	bhi.n	80092d0 <_printf_i+0x28>
 80092c0:	2f62      	cmp	r7, #98	; 0x62
 80092c2:	d80a      	bhi.n	80092da <_printf_i+0x32>
 80092c4:	2f00      	cmp	r7, #0
 80092c6:	f000 80d4 	beq.w	8009472 <_printf_i+0x1ca>
 80092ca:	2f58      	cmp	r7, #88	; 0x58
 80092cc:	f000 80c0 	beq.w	8009450 <_printf_i+0x1a8>
 80092d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092d8:	e03a      	b.n	8009350 <_printf_i+0xa8>
 80092da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092de:	2b15      	cmp	r3, #21
 80092e0:	d8f6      	bhi.n	80092d0 <_printf_i+0x28>
 80092e2:	a101      	add	r1, pc, #4	; (adr r1, 80092e8 <_printf_i+0x40>)
 80092e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092e8:	08009341 	.word	0x08009341
 80092ec:	08009355 	.word	0x08009355
 80092f0:	080092d1 	.word	0x080092d1
 80092f4:	080092d1 	.word	0x080092d1
 80092f8:	080092d1 	.word	0x080092d1
 80092fc:	080092d1 	.word	0x080092d1
 8009300:	08009355 	.word	0x08009355
 8009304:	080092d1 	.word	0x080092d1
 8009308:	080092d1 	.word	0x080092d1
 800930c:	080092d1 	.word	0x080092d1
 8009310:	080092d1 	.word	0x080092d1
 8009314:	08009459 	.word	0x08009459
 8009318:	08009381 	.word	0x08009381
 800931c:	08009413 	.word	0x08009413
 8009320:	080092d1 	.word	0x080092d1
 8009324:	080092d1 	.word	0x080092d1
 8009328:	0800947b 	.word	0x0800947b
 800932c:	080092d1 	.word	0x080092d1
 8009330:	08009381 	.word	0x08009381
 8009334:	080092d1 	.word	0x080092d1
 8009338:	080092d1 	.word	0x080092d1
 800933c:	0800941b 	.word	0x0800941b
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	1d1a      	adds	r2, r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	602a      	str	r2, [r5, #0]
 8009348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800934c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009350:	2301      	movs	r3, #1
 8009352:	e09f      	b.n	8009494 <_printf_i+0x1ec>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	0607      	lsls	r7, r0, #24
 800935a:	f103 0104 	add.w	r1, r3, #4
 800935e:	6029      	str	r1, [r5, #0]
 8009360:	d501      	bpl.n	8009366 <_printf_i+0xbe>
 8009362:	681e      	ldr	r6, [r3, #0]
 8009364:	e003      	b.n	800936e <_printf_i+0xc6>
 8009366:	0646      	lsls	r6, r0, #25
 8009368:	d5fb      	bpl.n	8009362 <_printf_i+0xba>
 800936a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800936e:	2e00      	cmp	r6, #0
 8009370:	da03      	bge.n	800937a <_printf_i+0xd2>
 8009372:	232d      	movs	r3, #45	; 0x2d
 8009374:	4276      	negs	r6, r6
 8009376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800937a:	485a      	ldr	r0, [pc, #360]	; (80094e4 <_printf_i+0x23c>)
 800937c:	230a      	movs	r3, #10
 800937e:	e012      	b.n	80093a6 <_printf_i+0xfe>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	6820      	ldr	r0, [r4, #0]
 8009384:	1d19      	adds	r1, r3, #4
 8009386:	6029      	str	r1, [r5, #0]
 8009388:	0605      	lsls	r5, r0, #24
 800938a:	d501      	bpl.n	8009390 <_printf_i+0xe8>
 800938c:	681e      	ldr	r6, [r3, #0]
 800938e:	e002      	b.n	8009396 <_printf_i+0xee>
 8009390:	0641      	lsls	r1, r0, #25
 8009392:	d5fb      	bpl.n	800938c <_printf_i+0xe4>
 8009394:	881e      	ldrh	r6, [r3, #0]
 8009396:	4853      	ldr	r0, [pc, #332]	; (80094e4 <_printf_i+0x23c>)
 8009398:	2f6f      	cmp	r7, #111	; 0x6f
 800939a:	bf0c      	ite	eq
 800939c:	2308      	moveq	r3, #8
 800939e:	230a      	movne	r3, #10
 80093a0:	2100      	movs	r1, #0
 80093a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093a6:	6865      	ldr	r5, [r4, #4]
 80093a8:	60a5      	str	r5, [r4, #8]
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	bfa2      	ittt	ge
 80093ae:	6821      	ldrge	r1, [r4, #0]
 80093b0:	f021 0104 	bicge.w	r1, r1, #4
 80093b4:	6021      	strge	r1, [r4, #0]
 80093b6:	b90e      	cbnz	r6, 80093bc <_printf_i+0x114>
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	d04b      	beq.n	8009454 <_printf_i+0x1ac>
 80093bc:	4615      	mov	r5, r2
 80093be:	fbb6 f1f3 	udiv	r1, r6, r3
 80093c2:	fb03 6711 	mls	r7, r3, r1, r6
 80093c6:	5dc7      	ldrb	r7, [r0, r7]
 80093c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093cc:	4637      	mov	r7, r6
 80093ce:	42bb      	cmp	r3, r7
 80093d0:	460e      	mov	r6, r1
 80093d2:	d9f4      	bls.n	80093be <_printf_i+0x116>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d10b      	bne.n	80093f0 <_printf_i+0x148>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	07de      	lsls	r6, r3, #31
 80093dc:	d508      	bpl.n	80093f0 <_printf_i+0x148>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	4299      	cmp	r1, r3
 80093e4:	bfde      	ittt	le
 80093e6:	2330      	movle	r3, #48	; 0x30
 80093e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093f0:	1b52      	subs	r2, r2, r5
 80093f2:	6122      	str	r2, [r4, #16]
 80093f4:	f8cd a000 	str.w	sl, [sp]
 80093f8:	464b      	mov	r3, r9
 80093fa:	aa03      	add	r2, sp, #12
 80093fc:	4621      	mov	r1, r4
 80093fe:	4640      	mov	r0, r8
 8009400:	f7ff fee4 	bl	80091cc <_printf_common>
 8009404:	3001      	adds	r0, #1
 8009406:	d14a      	bne.n	800949e <_printf_i+0x1f6>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	b004      	add	sp, #16
 800940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f043 0320 	orr.w	r3, r3, #32
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	4833      	ldr	r0, [pc, #204]	; (80094e8 <_printf_i+0x240>)
 800941c:	2778      	movs	r7, #120	; 0x78
 800941e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	6829      	ldr	r1, [r5, #0]
 8009426:	061f      	lsls	r7, r3, #24
 8009428:	f851 6b04 	ldr.w	r6, [r1], #4
 800942c:	d402      	bmi.n	8009434 <_printf_i+0x18c>
 800942e:	065f      	lsls	r7, r3, #25
 8009430:	bf48      	it	mi
 8009432:	b2b6      	uxthmi	r6, r6
 8009434:	07df      	lsls	r7, r3, #31
 8009436:	bf48      	it	mi
 8009438:	f043 0320 	orrmi.w	r3, r3, #32
 800943c:	6029      	str	r1, [r5, #0]
 800943e:	bf48      	it	mi
 8009440:	6023      	strmi	r3, [r4, #0]
 8009442:	b91e      	cbnz	r6, 800944c <_printf_i+0x1a4>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	f023 0320 	bic.w	r3, r3, #32
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	2310      	movs	r3, #16
 800944e:	e7a7      	b.n	80093a0 <_printf_i+0xf8>
 8009450:	4824      	ldr	r0, [pc, #144]	; (80094e4 <_printf_i+0x23c>)
 8009452:	e7e4      	b.n	800941e <_printf_i+0x176>
 8009454:	4615      	mov	r5, r2
 8009456:	e7bd      	b.n	80093d4 <_printf_i+0x12c>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	6826      	ldr	r6, [r4, #0]
 800945c:	6961      	ldr	r1, [r4, #20]
 800945e:	1d18      	adds	r0, r3, #4
 8009460:	6028      	str	r0, [r5, #0]
 8009462:	0635      	lsls	r5, r6, #24
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	d501      	bpl.n	800946c <_printf_i+0x1c4>
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0x1ca>
 800946c:	0670      	lsls	r0, r6, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0x1c0>
 8009470:	8019      	strh	r1, [r3, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	4615      	mov	r5, r2
 8009478:	e7bc      	b.n	80093f4 <_printf_i+0x14c>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	602a      	str	r2, [r5, #0]
 8009480:	681d      	ldr	r5, [r3, #0]
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	2100      	movs	r1, #0
 8009486:	4628      	mov	r0, r5
 8009488:	f7f6 fea2 	bl	80001d0 <memchr>
 800948c:	b108      	cbz	r0, 8009492 <_printf_i+0x1ea>
 800948e:	1b40      	subs	r0, r0, r5
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949c:	e7aa      	b.n	80093f4 <_printf_i+0x14c>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	462a      	mov	r2, r5
 80094a2:	4649      	mov	r1, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	47d0      	blx	sl
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0ad      	beq.n	8009408 <_printf_i+0x160>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	d413      	bmi.n	80094da <_printf_i+0x232>
 80094b2:	68e0      	ldr	r0, [r4, #12]
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfb8      	it	lt
 80094ba:	4618      	movlt	r0, r3
 80094bc:	e7a6      	b.n	800940c <_printf_i+0x164>
 80094be:	2301      	movs	r3, #1
 80094c0:	4632      	mov	r2, r6
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d09d      	beq.n	8009408 <_printf_i+0x160>
 80094cc:	3501      	adds	r5, #1
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	1a5b      	subs	r3, r3, r1
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dcf2      	bgt.n	80094be <_printf_i+0x216>
 80094d8:	e7eb      	b.n	80094b2 <_printf_i+0x20a>
 80094da:	2500      	movs	r5, #0
 80094dc:	f104 0619 	add.w	r6, r4, #25
 80094e0:	e7f5      	b.n	80094ce <_printf_i+0x226>
 80094e2:	bf00      	nop
 80094e4:	0800a069 	.word	0x0800a069
 80094e8:	0800a07a 	.word	0x0800a07a

080094ec <__sflush_r>:
 80094ec:	898a      	ldrh	r2, [r1, #12]
 80094ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	4605      	mov	r5, r0
 80094f4:	0710      	lsls	r0, r2, #28
 80094f6:	460c      	mov	r4, r1
 80094f8:	d458      	bmi.n	80095ac <__sflush_r+0xc0>
 80094fa:	684b      	ldr	r3, [r1, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dc05      	bgt.n	800950c <__sflush_r+0x20>
 8009500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	dc02      	bgt.n	800950c <__sflush_r+0x20>
 8009506:	2000      	movs	r0, #0
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800950e:	2e00      	cmp	r6, #0
 8009510:	d0f9      	beq.n	8009506 <__sflush_r+0x1a>
 8009512:	2300      	movs	r3, #0
 8009514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009518:	682f      	ldr	r7, [r5, #0]
 800951a:	6a21      	ldr	r1, [r4, #32]
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	d032      	beq.n	8009586 <__sflush_r+0x9a>
 8009520:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	075a      	lsls	r2, r3, #29
 8009526:	d505      	bpl.n	8009534 <__sflush_r+0x48>
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	1ac0      	subs	r0, r0, r3
 800952c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800952e:	b10b      	cbz	r3, 8009534 <__sflush_r+0x48>
 8009530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009532:	1ac0      	subs	r0, r0, r3
 8009534:	2300      	movs	r3, #0
 8009536:	4602      	mov	r2, r0
 8009538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800953a:	6a21      	ldr	r1, [r4, #32]
 800953c:	4628      	mov	r0, r5
 800953e:	47b0      	blx	r6
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	d106      	bne.n	8009554 <__sflush_r+0x68>
 8009546:	6829      	ldr	r1, [r5, #0]
 8009548:	291d      	cmp	r1, #29
 800954a:	d82b      	bhi.n	80095a4 <__sflush_r+0xb8>
 800954c:	4a29      	ldr	r2, [pc, #164]	; (80095f4 <__sflush_r+0x108>)
 800954e:	410a      	asrs	r2, r1
 8009550:	07d6      	lsls	r6, r2, #31
 8009552:	d427      	bmi.n	80095a4 <__sflush_r+0xb8>
 8009554:	2200      	movs	r2, #0
 8009556:	6062      	str	r2, [r4, #4]
 8009558:	04d9      	lsls	r1, r3, #19
 800955a:	6922      	ldr	r2, [r4, #16]
 800955c:	6022      	str	r2, [r4, #0]
 800955e:	d504      	bpl.n	800956a <__sflush_r+0x7e>
 8009560:	1c42      	adds	r2, r0, #1
 8009562:	d101      	bne.n	8009568 <__sflush_r+0x7c>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b903      	cbnz	r3, 800956a <__sflush_r+0x7e>
 8009568:	6560      	str	r0, [r4, #84]	; 0x54
 800956a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800956c:	602f      	str	r7, [r5, #0]
 800956e:	2900      	cmp	r1, #0
 8009570:	d0c9      	beq.n	8009506 <__sflush_r+0x1a>
 8009572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009576:	4299      	cmp	r1, r3
 8009578:	d002      	beq.n	8009580 <__sflush_r+0x94>
 800957a:	4628      	mov	r0, r5
 800957c:	f7ff fbea 	bl	8008d54 <_free_r>
 8009580:	2000      	movs	r0, #0
 8009582:	6360      	str	r0, [r4, #52]	; 0x34
 8009584:	e7c0      	b.n	8009508 <__sflush_r+0x1c>
 8009586:	2301      	movs	r3, #1
 8009588:	4628      	mov	r0, r5
 800958a:	47b0      	blx	r6
 800958c:	1c41      	adds	r1, r0, #1
 800958e:	d1c8      	bne.n	8009522 <__sflush_r+0x36>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0c5      	beq.n	8009522 <__sflush_r+0x36>
 8009596:	2b1d      	cmp	r3, #29
 8009598:	d001      	beq.n	800959e <__sflush_r+0xb2>
 800959a:	2b16      	cmp	r3, #22
 800959c:	d101      	bne.n	80095a2 <__sflush_r+0xb6>
 800959e:	602f      	str	r7, [r5, #0]
 80095a0:	e7b1      	b.n	8009506 <__sflush_r+0x1a>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	e7ad      	b.n	8009508 <__sflush_r+0x1c>
 80095ac:	690f      	ldr	r7, [r1, #16]
 80095ae:	2f00      	cmp	r7, #0
 80095b0:	d0a9      	beq.n	8009506 <__sflush_r+0x1a>
 80095b2:	0793      	lsls	r3, r2, #30
 80095b4:	680e      	ldr	r6, [r1, #0]
 80095b6:	bf08      	it	eq
 80095b8:	694b      	ldreq	r3, [r1, #20]
 80095ba:	600f      	str	r7, [r1, #0]
 80095bc:	bf18      	it	ne
 80095be:	2300      	movne	r3, #0
 80095c0:	eba6 0807 	sub.w	r8, r6, r7
 80095c4:	608b      	str	r3, [r1, #8]
 80095c6:	f1b8 0f00 	cmp.w	r8, #0
 80095ca:	dd9c      	ble.n	8009506 <__sflush_r+0x1a>
 80095cc:	6a21      	ldr	r1, [r4, #32]
 80095ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095d0:	4643      	mov	r3, r8
 80095d2:	463a      	mov	r2, r7
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b0      	blx	r6
 80095d8:	2800      	cmp	r0, #0
 80095da:	dc06      	bgt.n	80095ea <__sflush_r+0xfe>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	e78e      	b.n	8009508 <__sflush_r+0x1c>
 80095ea:	4407      	add	r7, r0
 80095ec:	eba8 0800 	sub.w	r8, r8, r0
 80095f0:	e7e9      	b.n	80095c6 <__sflush_r+0xda>
 80095f2:	bf00      	nop
 80095f4:	dfbffffe 	.word	0xdfbffffe

080095f8 <_fflush_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	690b      	ldr	r3, [r1, #16]
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	b913      	cbnz	r3, 8009608 <_fflush_r+0x10>
 8009602:	2500      	movs	r5, #0
 8009604:	4628      	mov	r0, r5
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	b118      	cbz	r0, 8009612 <_fflush_r+0x1a>
 800960a:	6a03      	ldr	r3, [r0, #32]
 800960c:	b90b      	cbnz	r3, 8009612 <_fflush_r+0x1a>
 800960e:	f7ff f98d 	bl	800892c <__sinit>
 8009612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f3      	beq.n	8009602 <_fflush_r+0xa>
 800961a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800961c:	07d0      	lsls	r0, r2, #31
 800961e:	d404      	bmi.n	800962a <_fflush_r+0x32>
 8009620:	0599      	lsls	r1, r3, #22
 8009622:	d402      	bmi.n	800962a <_fflush_r+0x32>
 8009624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009626:	f7ff fb85 	bl	8008d34 <__retarget_lock_acquire_recursive>
 800962a:	4628      	mov	r0, r5
 800962c:	4621      	mov	r1, r4
 800962e:	f7ff ff5d 	bl	80094ec <__sflush_r>
 8009632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009634:	07da      	lsls	r2, r3, #31
 8009636:	4605      	mov	r5, r0
 8009638:	d4e4      	bmi.n	8009604 <_fflush_r+0xc>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	059b      	lsls	r3, r3, #22
 800963e:	d4e1      	bmi.n	8009604 <_fflush_r+0xc>
 8009640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009642:	f7ff fb78 	bl	8008d36 <__retarget_lock_release_recursive>
 8009646:	e7dd      	b.n	8009604 <_fflush_r+0xc>

08009648 <__swhatbuf_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	460c      	mov	r4, r1
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	2900      	cmp	r1, #0
 8009652:	b096      	sub	sp, #88	; 0x58
 8009654:	4615      	mov	r5, r2
 8009656:	461e      	mov	r6, r3
 8009658:	da0d      	bge.n	8009676 <__swhatbuf_r+0x2e>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	bf0c      	ite	eq
 8009666:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800966a:	2340      	movne	r3, #64	; 0x40
 800966c:	2000      	movs	r0, #0
 800966e:	6031      	str	r1, [r6, #0]
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	b016      	add	sp, #88	; 0x58
 8009674:	bd70      	pop	{r4, r5, r6, pc}
 8009676:	466a      	mov	r2, sp
 8009678:	f000 f848 	bl	800970c <_fstat_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	dbec      	blt.n	800965a <__swhatbuf_r+0x12>
 8009680:	9901      	ldr	r1, [sp, #4]
 8009682:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009686:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800968a:	4259      	negs	r1, r3
 800968c:	4159      	adcs	r1, r3
 800968e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009692:	e7eb      	b.n	800966c <__swhatbuf_r+0x24>

08009694 <__smakebuf_r>:
 8009694:	898b      	ldrh	r3, [r1, #12]
 8009696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009698:	079d      	lsls	r5, r3, #30
 800969a:	4606      	mov	r6, r0
 800969c:	460c      	mov	r4, r1
 800969e:	d507      	bpl.n	80096b0 <__smakebuf_r+0x1c>
 80096a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	2301      	movs	r3, #1
 80096aa:	6163      	str	r3, [r4, #20]
 80096ac:	b002      	add	sp, #8
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	ab01      	add	r3, sp, #4
 80096b2:	466a      	mov	r2, sp
 80096b4:	f7ff ffc8 	bl	8009648 <__swhatbuf_r>
 80096b8:	9900      	ldr	r1, [sp, #0]
 80096ba:	4605      	mov	r5, r0
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff fbb5 	bl	8008e2c <_malloc_r>
 80096c2:	b948      	cbnz	r0, 80096d8 <__smakebuf_r+0x44>
 80096c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c8:	059a      	lsls	r2, r3, #22
 80096ca:	d4ef      	bmi.n	80096ac <__smakebuf_r+0x18>
 80096cc:	f023 0303 	bic.w	r3, r3, #3
 80096d0:	f043 0302 	orr.w	r3, r3, #2
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	e7e3      	b.n	80096a0 <__smakebuf_r+0xc>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	6020      	str	r0, [r4, #0]
 80096dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	6163      	str	r3, [r4, #20]
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	6120      	str	r0, [r4, #16]
 80096ea:	b15b      	cbz	r3, 8009704 <__smakebuf_r+0x70>
 80096ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f0:	4630      	mov	r0, r6
 80096f2:	f000 f81d 	bl	8009730 <_isatty_r>
 80096f6:	b128      	cbz	r0, 8009704 <__smakebuf_r+0x70>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	431d      	orrs	r5, r3
 8009708:	81a5      	strh	r5, [r4, #12]
 800970a:	e7cf      	b.n	80096ac <__smakebuf_r+0x18>

0800970c <_fstat_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d07      	ldr	r5, [pc, #28]	; (800972c <_fstat_r+0x20>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f7f8 fe36 	bl	800238a <_fstat>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d102      	bne.n	8009728 <_fstat_r+0x1c>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	b103      	cbz	r3, 8009728 <_fstat_r+0x1c>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	bf00      	nop
 800972c:	20000a1c 	.word	0x20000a1c

08009730 <_isatty_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	; (800974c <_isatty_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f8 fe35 	bl	80023aa <_isatty>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_isatty_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_isatty_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	20000a1c 	.word	0x20000a1c

08009750 <_sbrk_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d06      	ldr	r5, [pc, #24]	; (800976c <_sbrk_r+0x1c>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	f7f8 fe3e 	bl	80023dc <_sbrk>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_sbrk_r+0x1a>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_sbrk_r+0x1a>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20000a1c 	.word	0x20000a1c

08009770 <_init>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	bf00      	nop
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr

0800977c <_fini>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr
