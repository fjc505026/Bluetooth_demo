
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a174  0800a174  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a174  0800a174  0001a174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a17c  0800a17c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  2000007c  0800a200  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800a200  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001d9c0  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009b  00000000  00000000  0003daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001ebe2  00000000  00000000  0003db4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003a1a  00000000  00000000  0005c72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001888  00000000  00000000  00060148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb557  00000000  00000000  000619d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001314  00000000  00000000  0015cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2aa  00000000  00000000  0015e23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000704c  00000000  00000000  001894e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009858 	.word	0x08009858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009858 	.word	0x08009858

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 ff68 	bl	8002444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fcc9 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 fa50 	bl	8001a42 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	0800a184 	.word	0x0800a184
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80005b4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80005b8:	20000a20 	.word	0x20000a20

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <BLUENRG2_vInit>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vInit( void )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    BLUENRG2__vUserInit();
 80005c4:	f000 f826 	bl	8000614 <BLUENRG2__vUserInit>
    hci_init( APP_UserEvtRx, NULL );
 80005c8:	2100      	movs	r1, #0
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <BLUENRG2_vInit+0x34>)
 80005cc:	f007 fe8a 	bl	80082e4 <hci_init>
    PRINT_DBG( "BlueNRG-2 BLE Sample Application\r\n" );
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <BLUENRG2_vInit+0x38>)
 80005d2:	f008 fb69 	bl	8008ca8 <puts>

    if( BLE_STATUS_SUCCESS != BLUENRG2__u8CentralAppInit() )
 80005d6:	f000 f82b 	bl	8000630 <BLUENRG2__u8CentralAppInit>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <BLUENRG2_vInit+0x28>
    {
        PRINT_DBG( "BLUENRG2__u8CentralAppInit() Failed\r\n" );
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <BLUENRG2_vInit+0x3c>)
 80005e2:	f008 fb61 	bl	8008ca8 <puts>
        while( true )
 80005e6:	e7fe      	b.n	80005e6 <BLUENRG2_vInit+0x26>
            ;
    }

    PRINT_DBG( "BLE Stack Initialized & Device Configured\r\n" );
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <BLUENRG2_vInit+0x40>)
 80005ea:	f008 fb5d 	bl	8008ca8 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08001581 	.word	0x08001581
 80005f8:	08009870 	.word	0x08009870
 80005fc:	08009894 	.word	0x08009894
 8000600:	080098bc 	.word	0x080098bc

08000604 <BLUENRG2_vProcess>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vProcess( void )
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

    hci_user_evt_proc();
 8000608:	f007 ffe6 	bl	80085d8 <hci_user_evt_proc>
    BLUENRG2__vUserProcess();
 800060c:	f000 f8e8 	bl	80007e0 <BLUENRG2__vUserProcess>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <BLUENRG2__vUserInit>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserInit( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    BSP_PB_Init( BUTTON_KEY, BUTTON_MODE_GPIO );
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f001 fbca 	bl	8001db4 <BSP_PB_Init>
    BSP_LED_Init( LED2 );
 8000620:	2000      	movs	r0, #0
 8000622:	f001 fb4b 	bl	8001cbc <BSP_LED_Init>

    BSP_COM_Init( COM1 );
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fc80 	bl	8001f2c <BSP_COM_Init>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <BLUENRG2__u8CentralAppInit>:
//!
//! \return
//!   Status
//*****************************************************
static uint8_t BLUENRG2__u8CentralAppInit( void )
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af06      	add	r7, sp, #24
    uint8_t  u8Ret;
    uint16_t u16ServiceHandle, u16DevNameCharHandle, u16AppearanceCharHandle;
    uint8_t  au8BdAddr[BLUENRG2_BDADDR_BYTE_NUM];
    uint8_t  u8BaAddrLen;

    const uint8_t cu8NVMConfigDataAddr = 0x80U; // Offset of the static random address stored in NVM
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    hci_reset(); // Sw reset of the BLE chip
 800063c:	f007 fd1f 	bl	800807e <hci_reset>

    HAL_Delay( 2000 ); // BlueNRG device requires 2000ms delay for booting
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f001 ff8c 	bl	8002560 <HAL_Delay>

    u8Ret = BLUENRG2__u8PrintBLEFwInfo();
 8000648:	f000 fb6c 	bl	8000d24 <BLUENRG2__u8PrintBLEFwInfo>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000652:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <BLUENRG2__u8CentralAppInit+0x36>
    {
        PRINT_DBG( "Get Bluetooth Chip Info failed !\r\n" );
 800065a:	4857      	ldr	r0, [pc, #348]	; (80007b8 <BLUENRG2__u8CentralAppInit+0x188>)
 800065c:	f008 fb24 	bl	8008ca8 <puts>
        return u8Ret;
 8000660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000664:	e0a3      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_hal_read_config_data( cu8NVMConfigDataAddr, &u8BaAddrLen, au8BdAddr );
 8000666:	f107 0218 	add.w	r2, r7, #24
 800066a:	f107 0117 	add.w	r1, r7, #23
 800066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f959 	bl	800692a <aci_hal_read_config_data>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( ( u8Ret != BLE_STATUS_SUCCESS ) || ( 0xC0 != ( au8BdAddr[5U] & 0xC0 ) ) )
 800067e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000682:	2b00      	cmp	r3, #0
 8000684:	d104      	bne.n	8000690 <BLUENRG2__u8CentralAppInit+0x60>
 8000686:	7f7b      	ldrb	r3, [r7, #29]
 8000688:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800068c:	2bc0      	cmp	r3, #192	; 0xc0
 800068e:	d003      	beq.n	8000698 <BLUENRG2__u8CentralAppInit+0x68>
    {
        PRINT_DBG( "Read Broadcast Address failed !\r\n" );
 8000690:	484a      	ldr	r0, [pc, #296]	; (80007bc <BLUENRG2__u8CentralAppInit+0x18c>)
 8000692:	f008 fb09 	bl	8008ca8 <puts>
        while( true )
 8000696:	e7fe      	b.n	8000696 <BLUENRG2__u8CentralAppInit+0x66>
            ;
        return u8Ret;
    }

    aci_hal_set_tx_power_level( BLUENRG2_TX_POWER_HIGH, BLUENRG2_TX_POWER_N2_DBM );
 8000698:	2104      	movs	r1, #4
 800069a:	2001      	movs	r0, #1
 800069c:	f006 f9c9 	bl	8006a32 <aci_hal_set_tx_power_level>

    u8Ret = aci_gatt_init();
 80006a0:	f005 fc63 	bl	8005f6a <aci_gatt_init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <BLUENRG2__u8CentralAppInit+0x94>
    {
        PRINT_DBG( "GATT_Init failed: 0x%02x\r\n", u8Ret );
 80006b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b6:	4619      	mov	r1, r3
 80006b8:	4841      	ldr	r0, [pc, #260]	; (80007c0 <BLUENRG2__u8CentralAppInit+0x190>)
 80006ba:	f008 fa8f 	bl	8008bdc <iprintf>
        return u8Ret;
 80006be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006c2:	e074      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = aci_gap_init( GAP_CENTRAL_ROLE, 0x0, (uint8_t) BLUENRG2_DEV_NAME_LEN, &u16ServiceHandle,
 80006c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	2211      	movs	r2, #17
 80006d8:	2100      	movs	r1, #0
 80006da:	2004      	movs	r0, #4
 80006dc:	f005 f991 	bl	8005a02 <aci_gap_init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                          &u16DevNameCharHandle, &u16AppearanceCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <BLUENRG2__u8CentralAppInit+0xd0>
    {
        PRINT_DBG( "GAP_Init failed: 0x%02x\r\n", u8Ret );
 80006ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006f2:	4619      	mov	r1, r3
 80006f4:	4833      	ldr	r0, [pc, #204]	; (80007c4 <BLUENRG2__u8CentralAppInit+0x194>)
 80006f6:	f008 fa71 	bl	8008bdc <iprintf>
        return u8Ret;
 80006fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006fe:	e056      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    // Update device name
    uint8_t au8TempDeviceName[BLUENRG2_DEV_NAME_LEN] = BLUENRG2_DEV_NAME;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <BLUENRG2__u8CentralAppInit+0x198>)
 8000702:	1d3c      	adds	r4, r7, #4
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	682b      	ldr	r3, [r5, #0]
 800070c:	7023      	strb	r3, [r4, #0]
    u8Ret = aci_gatt_update_char_value( u16ServiceHandle, u16DevNameCharHandle, (uint8_t) 0U,
 800070e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8000710:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2311      	movs	r3, #17
 8000718:	2200      	movs	r2, #0
 800071a:	f005 fe2e 	bl	800637a <aci_gatt_update_char_value>
 800071e:	4603      	mov	r3, r0
 8000720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        (uint8_t) BLUENRG2_DEV_NAME_LEN, au8TempDeviceName );

    // Clear security database: this implies that each time the application is executed
    // the full bonding process is executed (with PassKey generation and setting).
    u8Ret = aci_gap_clear_security_db();
 8000724:	f005 fa1a 	bl	8005b5c <aci_gap_clear_security_db>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 800072e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <BLUENRG2__u8CentralAppInit+0x10c>
    {
        PRINT_DBG( "aci_gap_clear_security_db() failed:\r\n" );
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <BLUENRG2__u8CentralAppInit+0x19c>)
 8000738:	f008 fab6 	bl	8008ca8 <puts>
    }

    //  Set the I/O capability otherwise the Central device (e.g. the smartphone) will
    //  propose a PIN that will be accepted without any control.
    if( aci_gap_set_io_capability( IO_CAP_DISPLAY_ONLY ) == BLE_STATUS_SUCCESS )
 800073c:	2000      	movs	r0, #0
 800073e:	f005 f836 	bl	80057ae <aci_gap_set_io_capability>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <BLUENRG2__u8CentralAppInit+0x11e>
    {
        PRINT_DBG( "I/O Capability Configurated\r\n" );
 8000748:	4821      	ldr	r0, [pc, #132]	; (80007d0 <BLUENRG2__u8CentralAppInit+0x1a0>)
 800074a:	f008 faad 	bl	8008ca8 <puts>
    }

    // BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype)
    // clang-format off
    u8Ret = aci_gap_set_authentication_requirement( BONDING, MITM_PROTECTION_REQUIRED, SC_IS_SUPPORTED,
 800074e:	2300      	movs	r3, #0
 8000750:	9304      	str	r3, [sp, #16]
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <BLUENRG2__u8CentralAppInit+0x1a4>)
 8000754:	9303      	str	r3, [sp, #12]
 8000756:	2300      	movs	r3, #0
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2310      	movs	r3, #16
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2307      	movs	r3, #7
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	2001      	movs	r0, #1
 800076a:	f005 f87d 	bl	8005868 <aci_gap_set_authentication_requirement>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                    KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING,
                                                    BLUENRG2_AUTHENTICATION_PASS_KEY, BLUENRG2_AUTHENTICATION_ADDR_PUBLIC_ID );
    // clang-format on

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000778:	2b00      	cmp	r3, #0
 800077a:	d005      	beq.n	8000788 <BLUENRG2__u8CentralAppInit+0x158>
    {
        PRINT_DBG( "aci_gap_set_authentication_requirement()failed\r\n" );
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <BLUENRG2__u8CentralAppInit+0x1a8>)
 800077e:	f008 fa93 	bl	8008ca8 <puts>
        return u8Ret;
 8000782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000786:	e012      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    u8Ret = GATT_DB_u8AddService(); // Add Device Service & Characteristics
 8000788:	f000 fe62 	bl	8001450 <GATT_DB_u8AddService>
 800078c:	4603      	mov	r3, r0
 800078e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <BLUENRG2__u8CentralAppInit+0x17c>
    {
        PRINT_DBG( "Error while adding service: 0x%02x\r\n", u8Ret );
 800079a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800079e:	4619      	mov	r1, r3
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <BLUENRG2__u8CentralAppInit+0x1ac>)
 80007a2:	f008 fa1b 	bl	8008bdc <iprintf>
        return u8Ret;
 80007a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007aa:	e000      	b.n	80007ae <BLUENRG2__u8CentralAppInit+0x17e>
    }

    return BLE_STATUS_SUCCESS;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	080098e8 	.word	0x080098e8
 80007bc:	0800990c 	.word	0x0800990c
 80007c0:	08009930 	.word	0x08009930
 80007c4:	0800994c 	.word	0x0800994c
 80007c8:	08009a08 	.word	0x08009a08
 80007cc:	08009968 	.word	0x08009968
 80007d0:	08009990 	.word	0x08009990
 80007d4:	0001e240 	.word	0x0001e240
 80007d8:	080099b0 	.word	0x080099b0
 80007dc:	080099e0 	.word	0x080099e0

080007e0 <BLUENRG2__vUserProcess>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserProcess( void )
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	; 0x2c
 80007e4:	af02      	add	r7, sp, #8
        PRINT_DBG( "FSM : %d -> %d \r\n", enLastFSMState, BLUENRG2__enState );
        enLastFSMState = BLUENRG2__enState;
    }
#endif // BLUENRG2_PRINT_ON

    switch( BLUENRG2__enState )
 80007e6:	4ba9      	ldr	r3, [pc, #676]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b0a      	cmp	r3, #10
 80007ec:	f200 8143 	bhi.w	8000a76 <BLUENRG2__vUserProcess+0x296>
 80007f0:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <BLUENRG2__vUserProcess+0x18>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	08000825 	.word	0x08000825
 80007fc:	0800083f 	.word	0x0800083f
 8000800:	08000877 	.word	0x08000877
 8000804:	08000883 	.word	0x08000883
 8000808:	080008e9 	.word	0x080008e9
 800080c:	08000913 	.word	0x08000913
 8000810:	0800093d 	.word	0x0800093d
 8000814:	0800098d 	.word	0x0800098d
 8000818:	080009df 	.word	0x080009df
 800081c:	08000967 	.word	0x08000967
 8000820:	08000a45 	.word	0x08000a45
    {
        case BLUENRG2_STAT_INIT:
        {
            BLUENRG2__vResetConnectionContext(); // Reset Connection context
 8000824:	f000 fa00 	bl	8000c28 <BLUENRG2__vResetConnectionContext>
            BLUENRG2__vStartScan();              // Result in hci_le_advertising_report_event
 8000828:	f000 f988 	bl	8000b3c <BLUENRG2__vStartScan>
            BLUENRG2__enState      = BLUENRG2_STAT_SCANNING;
 800082c:	4b97      	ldr	r3, [pc, #604]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 8000832:	f001 fe89 	bl	8002548 <HAL_GetTick>
 8000836:	4603      	mov	r3, r0
 8000838:	4a95      	ldr	r2, [pc, #596]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 800083a:	6013      	str	r3, [r2, #0]
        }
        break;
 800083c:	e122      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_SCANNING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 800083e:	f001 fe83 	bl	8002548 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	4b92      	ldr	r3, [pc, #584]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800084e:	4293      	cmp	r3, r2
 8000850:	f240 8113 	bls.w	8000a7a <BLUENRG2__vUserProcess+0x29a>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000854:	4b8d      	ldr	r3, [pc, #564]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	488e      	ldr	r0, [pc, #568]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 800085c:	f008 f9be 	bl	8008bdc <iprintf>
                BLUENRG2__vStopScan();
 8000860:	f000 f98e 	bl	8000b80 <BLUENRG2__vStopScan>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000864:	f001 fe70 	bl	8002548 <HAL_GetTick>
 8000868:	4603      	mov	r3, r0
 800086a:	4a89      	ldr	r2, [pc, #548]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 800086c:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_IDLE;
 800086e:	4b87      	ldr	r3, [pc, #540]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000870:	220a      	movs	r2, #10
 8000872:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000874:	e101      	b.n	8000a7a <BLUENRG2__vUserProcess+0x29a>

        case BLUENRG2_STAT_SCAN_DONE:
        {
            BLUENRG2__vStopScan();
 8000876:	f000 f983 	bl	8000b80 <BLUENRG2__vStopScan>
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800087a:	4b84      	ldr	r3, [pc, #528]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800087c:	220a      	movs	r2, #10
 800087e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000880:	e100      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_START_CONNECT:
        {

            const char *apcDevAddrTypeStr[] = { "Public Device", "Random Device", "Public Identity",
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <BLUENRG2__vUserProcess+0x2b8>)
 8000884:	f107 040c 	add.w	r4, r7, #12
 8000888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                "Random Identity" };

            printf( "[Connecting] Device Addr Type : %s, Value : ",
                    apcDevAddrTypeStr[BLUENRG2__stConnCTX.stDevice.u8Type] );
 800088e:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 8000890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
            printf( "[Connecting] Device Addr Type : %s, Value : ",
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	3320      	adds	r3, #32
 8000898:	443b      	add	r3, r7
 800089a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800089e:	4619      	mov	r1, r3
 80008a0:	487f      	ldr	r0, [pc, #508]	; (8000aa0 <BLUENRG2__vUserProcess+0x2c0>)
 80008a2:	f008 f99b 	bl	8008bdc <iprintf>

            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008a6:	2306      	movs	r3, #6
 80008a8:	77fb      	strb	r3, [r7, #31]
 80008aa:	e00c      	b.n	80008c6 <BLUENRG2__vUserProcess+0xe6>
            {
                printf( "%02X ", BLUENRG2__stConnCTX.stDevice.au8Addr[u8ByteIdx - 1] );
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a7a      	ldr	r2, [pc, #488]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 80008b2:	4413      	add	r3, r2
 80008b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80008b8:	4619      	mov	r1, r3
 80008ba:	487a      	ldr	r0, [pc, #488]	; (8000aa4 <BLUENRG2__vUserProcess+0x2c4>)
 80008bc:	f008 f98e 	bl	8008bdc <iprintf>
            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008c0:	7ffb      	ldrb	r3, [r7, #31]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	77fb      	strb	r3, [r7, #31]
 80008c6:	7ffb      	ldrb	r3, [r7, #31]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1ef      	bne.n	80008ac <BLUENRG2__vUserProcess+0xcc>
            }
            printf( "\r\n" );
 80008cc:	4876      	ldr	r0, [pc, #472]	; (8000aa8 <BLUENRG2__vUserProcess+0x2c8>)
 80008ce:	f008 f9eb 	bl	8008ca8 <puts>

            BLUENRG2__vStartConnect();
 80008d2:	f000 f971 	bl	8000bb8 <BLUENRG2__vStartConnect>
            BLUENRG2__enState      = BLUENRG2_STAT_CONNECTING;
 80008d6:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80008d8:	2204      	movs	r2, #4
 80008da:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 80008dc:	f001 fe34 	bl	8002548 <HAL_GetTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 80008e4:	6013      	str	r3, [r2, #0]
        }
        break;
 80008e6:	e0cd      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_CONNECTING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 80008e8:	f001 fe2e 	bl	8002548 <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b68      	ldr	r3, [pc, #416]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f240 80c0 	bls.w	8000a7e <BLUENRG2__vUserProcess+0x29e>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	4863      	ldr	r0, [pc, #396]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000906:	f008 f969 	bl	8008bdc <iprintf>
                BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 800090c:	220a      	movs	r2, #10
 800090e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000910:	e0b5      	b.n	8000a7e <BLUENRG2__vUserProcess+0x29e>

        case BLUENRG2_STAT_GET_REMOTE_TX:
        {
            if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 8000912:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	f083 0301 	eor.w	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <BLUENRG2__vUserProcess+0x154>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 8000922:	8858      	ldrh	r0, [r3, #2]
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <BLUENRG2__vUserProcess+0x2cc>)
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2302      	movs	r3, #2
 800092a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092e:	2101      	movs	r1, #1
 8000930:	f005 fe36 	bl	80065a0 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteTx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8000934:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000936:	220a      	movs	r2, #10
 8000938:	701a      	strb	r2, [r3, #0]
        }
        break;
 800093a:	e0a3      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_GET_REMOTE_RX:
        {
            if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 800093e:	7f1b      	ldrb	r3, [r3, #28]
 8000940:	f083 0301 	eor.w	r3, r3, #1
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d009      	beq.n	800095e <BLUENRG2__vUserProcess+0x17e>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 800094a:	4b54      	ldr	r3, [pc, #336]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 800094c:	8858      	ldrh	r0, [r3, #2]
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <BLUENRG2__vUserProcess+0x2d0>)
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2302      	movs	r3, #2
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	2101      	movs	r1, #1
 800095a:	f005 fe21 	bl	80065a0 <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteRx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000960:	220a      	movs	r2, #10
 8000962:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000964:	e08e      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_GET_MTU_SZ:
        {
            uint8_t u8Ret = aci_gatt_exchange_config( BLUENRG2__stConnCTX.u16Handle );
 8000966:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	4618      	mov	r0, r3
 800096c:	f005 fdb7 	bl	80064de <aci_gatt_exchange_config>
 8000970:	4603      	mov	r3, r0
 8000972:	77bb      	strb	r3, [r7, #30]

            if( u8Ret != BLE_STATUS_SUCCESS )
 8000974:	7fbb      	ldrb	r3, [r7, #30]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <BLUENRG2__vUserProcess+0x1a4>
            {
                PRINT_DBG( "aci_gatt_exchange_config()failed, %02X\r\n", u8Ret );
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	4619      	mov	r1, r3
 800097e:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <BLUENRG2__vUserProcess+0x2d4>)
 8000980:	f008 f92c 	bl	8008bdc <iprintf>
            }

            BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000986:	2207      	movs	r2, #7
 8000988:	701a      	strb	r2, [r3, #0]
        }
        break;
 800098a:	e07b      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY:
        {

            uint8_t au8ClientCharConfigData[] = { 0x01, 0x00 }; // Enable notifications
 800098c:	2301      	movs	r3, #1
 800098e:	813b      	strh	r3, [r7, #8]

            u32CurrentFSMStartTick = HAL_GetTick();
 8000990:	f001 fdda 	bl	8002548 <HAL_GetTick>
 8000994:	4603      	mov	r3, r0
 8000996:	4a3e      	ldr	r2, [pc, #248]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 8000998:	6013      	str	r3, [r2, #0]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 800099a:	e009      	b.n	80009b0 <BLUENRG2__vUserProcess+0x1d0>
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
                                             sizeof( au8ClientCharConfigData ),
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
            {
                // Radio is busy.
                if( ( HAL_GetTick() - u32CurrentFSMStartTick ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
 800099c:	f001 fdd4 	bl	8002548 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d80e      	bhi.n	80009ce <BLUENRG2__vUserProcess+0x1ee>
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 80009b2:	8858      	ldrh	r0, [r3, #2]
                                             BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET,
 80009b4:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 80009b6:	8b5b      	ldrh	r3, [r3, #26]
            while( aci_gatt_write_char_desc( BLUENRG2__stConnCTX.u16Handle,
 80009b8:	3302      	adds	r3, #2
 80009ba:	b299      	uxth	r1, r3
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2202      	movs	r2, #2
 80009c2:	f005 feb0 	bl	8006726 <aci_gatt_write_char_desc>
 80009c6:	4603      	mov	r3, r0
                                             au8ClientCharConfigData ) == BLE_STATUS_NOT_ALLOWED )
 80009c8:	2b46      	cmp	r3, #70	; 0x46
 80009ca:	d0e7      	beq.n	800099c <BLUENRG2__vUserProcess+0x1bc>
 80009cc:	e000      	b.n	80009d0 <BLUENRG2__vUserProcess+0x1f0>
                    break;
 80009ce:	bf00      	nop
            }
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <BLUENRG2__vUserProcess+0x2d8>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]

            BLUENRG2__enState = BLUENRG2_STAT_MAIN_CONNECTED;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 80009d8:	2208      	movs	r2, #8
 80009da:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009dc:	e052      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_MAIN_CONNECTED:
        {

            if( HAL_GetTick() - u32LastRSSIReadTick > BLUENRG2_RSSI_READING_PERIOD )
 80009de:	f001 fdb3 	bl	8002548 <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <BLUENRG2__vUserProcess+0x2dc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009ee:	d913      	bls.n	8000a18 <BLUENRG2__vUserProcess+0x238>
            {
                int8_t u8TmpRssi;
                hci_read_rssi( BLUENRG2__stConnCTX.u16Handle, &u8TmpRssi );
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <BLUENRG2__vUserProcess+0x2bc>)
 80009f2:	885b      	ldrh	r3, [r3, #2]
 80009f4:	1dfa      	adds	r2, r7, #7
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f007 fb69 	bl	80080d0 <hci_read_rssi>
                BLUENRG2__vUpdateLockStatus( u8TmpRssi, BLUENRG2_RSSI_THRESHOLD_NEAR, true );
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fa83 	bl	8000f14 <BLUENRG2__vUpdateLockStatus>
                u32LastRSSIReadTick = HAL_GetTick();
 8000a0e:	f001 fd9b 	bl	8002548 <HAL_GetTick>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a29      	ldr	r2, [pc, #164]	; (8000abc <BLUENRG2__vUserProcess+0x2dc>)
 8000a16:	6013      	str	r3, [r2, #0]
            }

            if( BLUENRG2__bMasterDevIsUnlocked )
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <BLUENRG2__vUserProcess+0x2e0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00d      	beq.n	8000a3c <BLUENRG2__vUserProcess+0x25c>
            {
                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 8000a20:	2000      	movs	r0, #0
 8000a22:	f001 fa1b 	bl	8001e5c <BSP_PB_GetState>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d103      	bne.n	8000a34 <BLUENRG2__vUserProcess+0x254>
                {
                    BSP_LED_Off( LED2 );
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f001 f96d 	bl	8001d0c <BSP_LED_Off>
            else
            {
                BSP_LED_On( LED2 );
            }
        }
        break;
 8000a32:	e027      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>
                    BSP_LED_On( LED2 );
 8000a34:	2000      	movs	r0, #0
 8000a36:	f001 f953 	bl	8001ce0 <BSP_LED_On>
        break;
 8000a3a:	e023      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>
                BSP_LED_On( LED2 );
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 f94f 	bl	8001ce0 <BSP_LED_On>
        break;
 8000a42:	e01f      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>

        case BLUENRG2_STAT_IDLE:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000a44:	f001 fd80 	bl	8002548 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d914      	bls.n	8000a82 <BLUENRG2__vUserProcess+0x2a2>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <BLUENRG2__vUserProcess+0x2b4>)
 8000a60:	f008 f8bc 	bl	8008bdc <iprintf>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000a64:	f001 fd70 	bl	8002548 <HAL_GetTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <BLUENRG2__vUserProcess+0x2b0>)
 8000a6c:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_INIT;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <BLUENRG2__vUserProcess+0x2ac>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000a74:	e005      	b.n	8000a82 <BLUENRG2__vUserProcess+0x2a2>

        default:
            break;
 8000a76:	bf00      	nop
 8000a78:	e004      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>
        break;
 8000a7a:	bf00      	nop
 8000a7c:	e002      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>
        break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <BLUENRG2__vUserProcess+0x2a4>
        break;
 8000a82:	bf00      	nop
    }
}
 8000a84:	bf00      	nop
 8000a86:	3724      	adds	r7, #36	; 0x24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	2000009f 	.word	0x2000009f
 8000a90:	2000011c 	.word	0x2000011c
 8000a94:	08009a1c 	.word	0x08009a1c
 8000a98:	08009adc 	.word	0x08009adc
 8000a9c:	200000a0 	.word	0x200000a0
 8000aa0:	08009a34 	.word	0x08009a34
 8000aa4:	08009a64 	.word	0x08009a64
 8000aa8:	08009a6c 	.word	0x08009a6c
 8000aac:	200000aa 	.word	0x200000aa
 8000ab0:	200000be 	.word	0x200000be
 8000ab4:	08009a70 	.word	0x08009a70
 8000ab8:	200000dd 	.word	0x200000dd
 8000abc:	20000120 	.word	0x20000120
 8000ac0:	200000de 	.word	0x200000de

08000ac4 <BLUENRG2__vReceiveData>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vReceiveData( uint8_t *pu8Data, uint8_t u8DataLen_Byte )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]

    // #ifdef BLUENRG2_PRINT_ON

    // #endif
    PRINT_DBG( "[RX]:" );
 8000ad0:	4815      	ldr	r0, [pc, #84]	; (8000b28 <BLUENRG2__vReceiveData+0x64>)
 8000ad2:	f008 f883 	bl	8008bdc <iprintf>
    for( int i = 0; i < u8DataLen_Byte; i++ )
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e00a      	b.n	8000af2 <BLUENRG2__vReceiveData+0x2e>
    {
        PRINT_DBG( "%d", pu8Data[i] );
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <BLUENRG2__vReceiveData+0x68>)
 8000ae8:	f008 f878 	bl	8008bdc <iprintf>
    for( int i = 0; i < u8DataLen_Byte; i++ )
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbf0      	blt.n	8000adc <BLUENRG2__vReceiveData+0x18>
    }
    fflush( stdout );
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <BLUENRG2__vReceiveData+0x6c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 ffa7 	bl	8008a54 <fflush>

    if( 1U == pu8Data[0] )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d107      	bne.n	8000b1e <BLUENRG2__vReceiveData+0x5a>
    {
        BLUENRG2__u32RxDataCnt++;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <BLUENRG2__vReceiveData+0x70>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <BLUENRG2__vReceiveData+0x70>)
 8000b16:	6013      	str	r3, [r2, #0]
        PRINT_DBG( "[RX] Notified\r\n" );
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <BLUENRG2__vReceiveData+0x74>)
 8000b1a:	f008 f8c5 	bl	8008ca8 <puts>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08009aec 	.word	0x08009aec
 8000b2c:	08009af4 	.word	0x08009af4
 8000b30:	20000078 	.word	0x20000078
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	08009af8 	.word	0x08009af8

08000b3c <BLUENRG2__vStartScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartScan( void )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_start_general_discovery_proc( SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00 );
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b4e:	f005 f82e 	bl	8005bae <aci_gap_start_general_discovery_proc>
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <BLUENRG2__vStartScan+0x2c>
    {
        printf( "aci_gap_start_general_discovery_proc() failed, %#X\n", u8Ret );
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <BLUENRG2__vStartScan+0x3c>)
 8000b62:	f008 f83b 	bl	8008bdc <iprintf>
    }
    else
    {
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
    }
}
 8000b66:	e002      	b.n	8000b6e <BLUENRG2__vStartScan+0x32>
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <BLUENRG2__vStartScan+0x40>)
 8000b6a:	f008 f89d 	bl	8008ca8 <puts>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08009b08 	.word	0x08009b08
 8000b7c:	08009b3c 	.word	0x08009b3c

08000b80 <BLUENRG2__vStopScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStopScan( void )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_terminate_gap_proc( GAP_GENERAL_DISCOVERY_PROC );
 8000b86:	2002      	movs	r0, #2
 8000b88:	f005 f992 	bl	8005eb0 <aci_gap_terminate_gap_proc>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d005      	beq.n	8000ba2 <BLUENRG2__vStopScan+0x22>
    {
        printf( "aci_gap_terminate_gap_proc() failed, %#X\n", u8Ret );
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <BLUENRG2__vStopScan+0x30>)
 8000b9c:	f008 f81e 	bl	8008bdc <iprintf>
    }
    else
    {
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
    }
}
 8000ba0:	e002      	b.n	8000ba8 <BLUENRG2__vStopScan+0x28>
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <BLUENRG2__vStopScan+0x34>)
 8000ba4:	f008 f880 	bl	8008ca8 <puts>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	08009b6c 	.word	0x08009b6c
 8000bb4:	08009b98 	.word	0x08009b98

08000bb8 <BLUENRG2__vStartConnect>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartConnect( void )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af08      	add	r7, sp, #32

    // Do connection with first discovered device
    uint8_t u8Ret =
    aci_gap_create_connection( SCAN_P, SCAN_L, BLUENRG2__stConnCTX.stDevice.u8Type,
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <BLUENRG2__vStartConnect+0x60>)
 8000bc0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000bc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bc8:	9306      	str	r3, [sp, #24]
 8000bca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bce:	9305      	str	r3, [sp, #20]
 8000bd0:	233c      	movs	r3, #60	; 0x3c
 8000bd2:	9304      	str	r3, [sp, #16]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9303      	str	r3, [sp, #12]
 8000bd8:	2328      	movs	r3, #40	; 0x28
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2328      	movs	r3, #40	; 0x28
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <BLUENRG2__vStartConnect+0x64>)
 8000be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bee:	f005 f87b 	bl	8005ce8 <aci_gap_create_connection>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
                               BLUENRG2__stConnCTX.stDevice.au8Addr, PUBLIC_ADDR, 40, 40, 0, 60, 2000, 2000 );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <BLUENRG2__vStartConnect+0x50>
    {
        PRINT_DBG( "aci_gap_create_connection() failed: 0x%02x\r\n", u8Ret );
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <BLUENRG2__vStartConnect+0x68>)
 8000c02:	f007 ffeb 	bl	8008bdc <iprintf>
    }
    else
    {
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
    }
}
 8000c06:	e002      	b.n	8000c0e <BLUENRG2__vStartConnect+0x56>
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <BLUENRG2__vStartConnect+0x6c>)
 8000c0a:	f008 f84d 	bl	8008ca8 <puts>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000a0 	.word	0x200000a0
 8000c1c:	200000d2 	.word	0x200000d2
 8000c20:	08009bbc 	.word	0x08009bbc
 8000c24:	08009bec 	.word	0x08009bec

08000c28 <BLUENRG2__vResetConnectionContext>:
 * Description    : Reset the discovery context.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vResetConnectionContext( void )
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
    BSP_LED_On( LED2 );
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f001 f856 	bl	8001ce0 <BSP_LED_On>
    BLUENRG_memset( &BLUENRG2__stConnCTX, 0, sizeof( BLUENRG2__stConnCTX ) );
 8000c34:	2238      	movs	r2, #56	; 0x38
 8000c36:	2100      	movs	r1, #0
 8000c38:	4830      	ldr	r0, [pc, #192]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c3a:	f008 f925 	bl	8008e88 <memset>

    BLUENRG2__stConnCTX.u16MaxWriteLen = CHAR_VALUE_LENGTH - 3U;
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c40:	223c      	movs	r2, #60	; 0x3c
 8000c42:	80da      	strh	r2, [r3, #6]

    BLUENRG2__stConnCTX.RemoteTx.bValid = false;
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	721a      	strb	r2, [r3, #8]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteTx.uUUID.UUID_128, BLUENRG2__cau8RemoteTxCharUUID,
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <BLUENRG2__vResetConnectionContext+0xd8>)
 8000c4e:	f103 040a 	add.w	r4, r3, #10
 8000c52:	4615      	mov	r5, r2
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	6020      	str	r0, [r4, #0]
 8000c58:	6061      	str	r1, [r4, #4]
 8000c5a:	60a2      	str	r2, [r4, #8]
 8000c5c:	60e3      	str	r3, [r4, #12]
                    sizeof( BLUENRG2__cau8RemoteTxCharUUID ) );

    BLUENRG2__stConnCTX.RemoteRx.bValid = false;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	771a      	strb	r2, [r3, #28]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteRx.uUUID.UUID_128, BLUENRG2__cau8RemoteRxCharUUID,
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <BLUENRG2__vResetConnectionContext+0xd4>)
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000c68:	f103 041e 	add.w	r4, r3, #30
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c70:	6020      	str	r0, [r4, #0]
 8000c72:	6061      	str	r1, [r4, #4]
 8000c74:	60a2      	str	r2, [r4, #8]
 8000c76:	60e3      	str	r3, [r4, #12]
                    sizeof( BLUENRG2__cau8RemoteRxCharUUID ) );

    BLUENRG2__bRemoteTxNotifyEnabled = false;
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <BLUENRG2__vResetConnectionContext+0xe0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bTXbufferFull          = false;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <BLUENRG2__vResetConnectionContext+0xe4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bMasterDevIsUnlocked   = false;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <BLUENRG2__vResetConnectionContext+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

    BLUENRG2__st8Queue.bValid = false;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <BLUENRG2__vResetConnectionContext+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	719a      	strb	r2, [r3, #6]
    BLUENRG2__st8Queue.u8Idx  = 0U;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <BLUENRG2__vResetConnectionContext+0xec>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	715a      	strb	r2, [r3, #5]

    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000c96:	2300      	movs	r3, #0
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	e026      	b.n	8000cea <BLUENRG2__vResetConnectionContext+0xc2>
    {
        BLUENRG2__au8DataBuf[i] = 0x31 + ( i % 10 );
 8000c9c:	88fa      	ldrh	r2, [r7, #6]
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <BLUENRG2__vResetConnectionContext+0xf0>)
 8000ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca4:	08d9      	lsrs	r1, r3, #3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	3231      	adds	r2, #49	; 0x31
 8000cb8:	b2d1      	uxtb	r1, r2
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <BLUENRG2__vResetConnectionContext+0xf4>)
 8000cbc:	54d1      	strb	r1, [r2, r3]
        if( ( i + 1 ) % 10 == 0 )
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	1c59      	adds	r1, r3, #1
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <BLUENRG2__vResetConnectionContext+0xf8>)
 8000cc4:	fb83 2301 	smull	r2, r3, r3, r1
 8000cc8:	109a      	asrs	r2, r3, #2
 8000cca:	17cb      	asrs	r3, r1, #31
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	1aca      	subs	r2, r1, r3
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d103      	bne.n	8000ce4 <BLUENRG2__vResetConnectionContext+0xbc>
        {
            BLUENRG2__au8DataBuf[i] = 'x';
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <BLUENRG2__vResetConnectionContext+0xf4>)
 8000ce0:	2178      	movs	r1, #120	; 0x78
 8000ce2:	54d1      	strb	r1, [r2, r3]
    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	2b3b      	cmp	r3, #59	; 0x3b
 8000cee:	d9d5      	bls.n	8000c9c <BLUENRG2__vResetConnectionContext+0x74>
        }
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000a0 	.word	0x200000a0
 8000d00:	08009ee4 	.word	0x08009ee4
 8000d04:	08009ef4 	.word	0x08009ef4
 8000d08:	200000dd 	.word	0x200000dd
 8000d0c:	200000dc 	.word	0x200000dc
 8000d10:	200000de 	.word	0x200000de
 8000d14:	20000098 	.word	0x20000098
 8000d18:	cccccccd 	.word	0xcccccccd
 8000d1c:	200000e0 	.word	0x200000e0
 8000d20:	66666667 	.word	0x66666667

08000d24 <BLUENRG2__u8PrintBLEFwInfo>:
 * Description    : Setup the device address.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static uint8_t BLUENRG2__u8PrintBLEFwInfo( void )
{
 8000d24:	b5b0      	push	{r4, r5, r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af08      	add	r7, sp, #32
    uint16_t u16DTMBuildNum;

    uint8_t  u8BLEStackVerMajor, u8BLEStackVerMinor, u8BLEStackVerPatch, u8BLEStackDevelopment;
    uint16_t u16BLEStackVariant, u16BLEStackBuildNum;

    uint8_t au8Alphabet[] = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <BLUENRG2__u8PrintBLEFwInfo+0xec>)
 8000d2c:	1d3c      	adds	r4, r7, #4
 8000d2e:	461d      	mov	r5, r3
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d38:	c403      	stmia	r4!, {r0, r1}
 8000d3a:	8022      	strh	r2, [r4, #0]
 8000d3c:	3402      	adds	r4, #2
 8000d3e:	0c13      	lsrs	r3, r2, #16
 8000d40:	7023      	strb	r3, [r4, #0]
                              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
    // clang-format off
    uint8_t u8Status = aci_hal_get_firmware_details( &u8DTMVerMajor, &u8DTMVerMinor, &u8DTMVerPatch, &u8DTMVerVariant,
 8000d42:	f107 042b 	add.w	r4, r7, #43	; 0x2b
 8000d46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d4a:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000d4e:	f107 002e 	add.w	r0, r7, #46	; 0x2e
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	9306      	str	r3, [sp, #24]
 8000d58:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000d5c:	9305      	str	r3, [sp, #20]
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	9304      	str	r3, [sp, #16]
 8000d64:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000d68:	9303      	str	r3, [sp, #12]
 8000d6a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	f005 fd7a 	bl	8006876 <aci_hal_get_firmware_details>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                     &u16DTMBuildNum, &u8BLEStackVerMajor, &u8BLEStackVerMinor,
                                                     &u8BLEStackVerPatch, &u8BLEStackDevelopment, &u16BLEStackVariant, 
                                                     &u16BLEStackBuildNum 
                                                    );
    // clang-format on
    PRINT_DBG( "\r\n--------------------------------------------------------\r\n\n" );
 8000d88:	4822      	ldr	r0, [pc, #136]	; (8000e14 <BLUENRG2__u8PrintBLEFwInfo+0xf0>)
 8000d8a:	f007 ff8d 	bl	8008ca8 <puts>
    PRINT_DBG( " Lumen BLE Central App v%d.%d.%d \r\n", 0, 0, 0 );
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4820      	ldr	r0, [pc, #128]	; (8000e18 <BLUENRG2__u8PrintBLEFwInfo+0xf4>)
 8000d96:	f007 ff21 	bl	8008bdc <iprintf>

    if( u8Status == BLE_STATUS_SUCCESS )
 8000d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d12c      	bne.n	8000dfc <BLUENRG2__u8PrintBLEFwInfo+0xd8>
    {
        PRINT_DBG( "- BlueNRG-2 FW v%d.%d%c \r\n", u8BLEStackVerMajor, u8BLEStackVerMinor,
 8000da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da6:	4619      	mov	r1, r3
 8000da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dac:	461a      	mov	r2, r3
 8000dae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	443b      	add	r3, r7
 8000db6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000dba:	4818      	ldr	r0, [pc, #96]	; (8000e1c <BLUENRG2__u8PrintBLEFwInfo+0xf8>)
 8000dbc:	f007 ff0e 	bl	8008bdc <iprintf>
                   au8Alphabet[u8BLEStackVerPatch] );

        PRINT_DBG( "- DTM %s v%d.%d%c \r\n",
 8000dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d007      	beq.n	8000dd8 <BLUENRG2__u8PrintBLEFwInfo+0xb4>
 8000dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d101      	bne.n	8000dd4 <BLUENRG2__u8PrintBLEFwInfo+0xb0>
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <BLUENRG2__u8PrintBLEFwInfo+0xfc>)
 8000dd2:	e002      	b.n	8000dda <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000dd4:	4913      	ldr	r1, [pc, #76]	; (8000e24 <BLUENRG2__u8PrintBLEFwInfo+0x100>)
 8000dd6:	e000      	b.n	8000dda <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <BLUENRG2__u8PrintBLEFwInfo+0x104>)
 8000dda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dde:	461a      	mov	r2, r3
 8000de0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000de4:	4618      	mov	r0, r3
 8000de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dea:	3330      	adds	r3, #48	; 0x30
 8000dec:	443b      	add	r3, r7
 8000dee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4603      	mov	r3, r0
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <BLUENRG2__u8PrintBLEFwInfo+0x108>)
 8000df8:	f007 fef0 	bl	8008bdc <iprintf>
                   u8DTMVerVariant == 0x01 ? "UART" : ( u8DTMVerVariant == 0x02 ? "SPI" : "Unknown" ), u8DTMVerMajor,
                   u8DTMVerMinor, au8Alphabet[u8DTMVerPatch] );
    }
    PRINT_DBG( "\r\n" );
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <BLUENRG2__u8PrintBLEFwInfo+0x10c>)
 8000dfe:	f007 ff53 	bl	8008ca8 <puts>

    return u8Status;
 8000e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08009cb8 	.word	0x08009cb8
 8000e14:	08009c0c 	.word	0x08009c0c
 8000e18:	08009c4c 	.word	0x08009c4c
 8000e1c:	08009c70 	.word	0x08009c70
 8000e20:	08009c8c 	.word	0x08009c8c
 8000e24:	08009c90 	.word	0x08009c90
 8000e28:	08009c98 	.word	0x08009c98
 8000e2c:	08009ca0 	.word	0x08009ca0
 8000e30:	08009a6c 	.word	0x08009a6c

08000e34 <BLUENRG2__bFindDeviceName>:
 * Input          : Data length.
 *                  Data value
 * Return         : TRUE if the local name found is the expected one, FALSE otherwise.
 *******************************************************************************/
static bool BLUENRG2__bFindDeviceName( uint8_t u8DataLen, uint8_t *pu8Data )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Index = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]

    while( u8Index < u8DataLen )
 8000e44:	e02f      	b.n	8000ea6 <BLUENRG2__bFindDeviceName+0x72>
    {
        /* Advertising data fields: len, type, values */
        /* Check if field is complete local name and the length is the expected one for BLE
         * CentralApp  */
        if( pu8Data[u8Index + 1U] == AD_TYPE_COMPLETE_LOCAL_NAME )
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d11f      	bne.n	8000e94 <BLUENRG2__bFindDeviceName+0x60>
        {
            // check if found device name is start with LUMEN
            uint8_t au8FindKeyStr[] = "BLE Device"; //TODO
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <BLUENRG2__bFindDeviceName+0x84>)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e5c:	c303      	stmia	r3!, {r0, r1}
 8000e5e:	801a      	strh	r2, [r3, #0]
 8000e60:	3302      	adds	r3, #2
 8000e62:	0c12      	lsrs	r2, r2, #16
 8000e64:	701a      	strb	r2, [r3, #0]

            pu8Data[u8Index + 1 + sizeof( au8FindKeyStr )] = '\0'; // Limit device name string
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]

            if( 0U == BLUENRG_memcmp( &pu8Data[u8Index + 2], au8FindKeyStr, sizeof( au8FindKeyStr ) - 1 ) )
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	3302      	adds	r3, #2
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	f107 010c 	add.w	r1, r7, #12
 8000e7e:	220a      	movs	r2, #10
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 fff1 	bl	8008e68 <memcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <BLUENRG2__bFindDeviceName+0x5c>
            {
                return TRUE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e00f      	b.n	8000eb0 <BLUENRG2__bFindDeviceName+0x7c>
            }
            else
            {
                return FALSE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e00d      	b.n	8000eb0 <BLUENRG2__bFindDeviceName+0x7c>
            }
        }
        else
        {
            u8Index += ( pu8Data[u8Index] + 1U ); // move to next advertising field, Refer to Core 5.2 Figure 11.1
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
    while( u8Index < u8DataLen )
 8000ea6:	7dfa      	ldrb	r2, [r7, #23]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3cb      	bcc.n	8000e46 <BLUENRG2__bFindDeviceName+0x12>
        }
    }

    return FALSE;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	08009cd4 	.word	0x08009cd4

08000ebc <BLUENRG2__vAttributeModifiedCB>:
 *                  Length of the data.
 *                  Attribute data.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vAttributeModifiedCB( uint16_t u16AttributeHandle, uint8_t u8DataLen, uint8_t *pau8AttrData )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	603a      	str	r2, [r7, #0]
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	717b      	strb	r3, [r7, #5]
    if( u16AttributeHandle == u16LocalRxCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <BLUENRG2__vAttributeModifiedCB+0x4c>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d105      	bne.n	8000ee4 <BLUENRG2__vAttributeModifiedCB+0x28>
    {
        BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f7ff fdf1 	bl	8000ac4 <BLUENRG2__vReceiveData>
        if( pau8AttrData[0] == 0x01 )
        {
            BLUENRG2__bRemoteTxNotifyEnabled = true;
        }
    }
}
 8000ee2:	e00c      	b.n	8000efe <BLUENRG2__vAttributeModifiedCB+0x42>
    else if( u16AttributeHandle == u16LocalTxCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <BLUENRG2__vAttributeModifiedCB+0x50>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	3302      	adds	r3, #2
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d106      	bne.n	8000efe <BLUENRG2__vAttributeModifiedCB+0x42>
        if( pau8AttrData[0] == 0x01 )
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d102      	bne.n	8000efe <BLUENRG2__vAttributeModifiedCB+0x42>
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <BLUENRG2__vAttributeModifiedCB+0x54>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000012a 	.word	0x2000012a
 8000f0c:	20000128 	.word	0x20000128
 8000f10:	200000dd 	.word	0x200000dd

08000f14 <BLUENRG2__vUpdateLockStatus>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUpdateLockStatus( int8_t i8Rssi, int8_t i8LockRssiTh, bool bDebounceEnable )
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    static bool bLastLockState = false;

    if( i8Rssi != BLUENRG2_RSSI_INVALID_VALUE )
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2c:	d036      	beq.n	8000f9c <BLUENRG2__vUpdateLockStatus+0x88>
    {
        if( !bDebounceEnable )
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d013      	beq.n	8000f62 <BLUENRG2__vUpdateLockStatus+0x4e>
        {
            if( i8Rssi >= i8LockRssiTh )
 8000f3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	db03      	blt.n	8000f4e <BLUENRG2__vUpdateLockStatus+0x3a>
            {
                BLUENRG2__bMasterDevIsUnlocked = true;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e002      	b.n	8000f54 <BLUENRG2__vUpdateLockStatus+0x40>
            }
            else
            {
                BLUENRG2__bMasterDevIsUnlocked = false;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
            }

            PRINT_DBG( "[RSSI] raw %d dBm\r\n", i8Rssi );
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <BLUENRG2__vUpdateLockStatus+0xc0>)
 8000f5c:	f007 fe3e 	bl	8008bdc <iprintf>
 8000f60:	e01c      	b.n	8000f9c <BLUENRG2__vUpdateLockStatus+0x88>
        }
        else
        {
            int8_t i8ProcessedRssi;

            if( ( i8ProcessedRssi = BLUENRG2__i8GetProcessedRSSI( i8Rssi ) ) && BLUENRG2__bIsProcessedRSSIValid() )
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f83e 	bl	8000fe8 <BLUENRG2__i8GetProcessedRSSI>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d011      	beq.n	8000f9c <BLUENRG2__vUpdateLockStatus+0x88>
 8000f78:	f000 f89c 	bl	80010b4 <BLUENRG2__bIsProcessedRSSIValid>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <BLUENRG2__vUpdateLockStatus+0x88>
            {
#ifdef BLUENRG2_PRINT_ON
                PRINT_DBG( "[RSSI] raw %d dBm, cali %d dBm\r\n", i8Rssi, i8ProcessedRssi );
#endif // BLUENRG2_PRINT_ON
                if( i8ProcessedRssi >= i8LockRssiTh )
 8000f82:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	db03      	blt.n	8000f96 <BLUENRG2__vUpdateLockStatus+0x82>
                {
                    BLUENRG2__bMasterDevIsUnlocked = true;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e002      	b.n	8000f9c <BLUENRG2__vUpdateLockStatus+0x88>
                }
                else
                {
                    BLUENRG2__bMasterDevIsUnlocked = false;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    if( bLastLockState != BLUENRG2__bMasterDevIsUnlocked )
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <BLUENRG2__vUpdateLockStatus+0xc4>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d00e      	beq.n	8000fc6 <BLUENRG2__vUpdateLockStatus+0xb2>
    {
        bLastLockState = BLUENRG2__bMasterDevIsUnlocked;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <BLUENRG2__vUpdateLockStatus+0xc4>)
 8000fae:	701a      	strb	r2, [r3, #0]
        PRINT_DBG( "%s !!! \r\n", BLUENRG2__bMasterDevIsUnlocked ? "UNLOCKED" : "LOCKED" );
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <BLUENRG2__vUpdateLockStatus+0xbc>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <BLUENRG2__vUpdateLockStatus+0xa8>
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <BLUENRG2__vUpdateLockStatus+0xc8>)
 8000fba:	e000      	b.n	8000fbe <BLUENRG2__vUpdateLockStatus+0xaa>
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <BLUENRG2__vUpdateLockStatus+0xcc>)
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <BLUENRG2__vUpdateLockStatus+0xd0>)
 8000fc2:	f007 fe0b 	bl	8008bdc <iprintf>
    }
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000de 	.word	0x200000de
 8000fd4:	08009ce0 	.word	0x08009ce0
 8000fd8:	20000124 	.word	0x20000124
 8000fdc:	08009cf4 	.word	0x08009cf4
 8000fe0:	08009d00 	.word	0x08009d00
 8000fe4:	08009d08 	.word	0x08009d08

08000fe8 <BLUENRG2__i8GetProcessedRSSI>:

static int8_t BLUENRG2__i8GetProcessedRSSI( int8_t i8RSSIVal )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    int8_t i8ReturnValue = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]

    BLUENRG2__st8Queue.i8Buffer[BLUENRG2__st8Queue.u8Idx] = i8RSSIVal;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ff8:	795b      	ldrb	r3, [r3, #5]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	5453      	strb	r3, [r2, r1]
    BLUENRG2__st8Queue.u8Idx++;
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 800100c:	715a      	strb	r2, [r3, #5]

    if( BLUENRG2__st8Queue.u8Idx >= BLUENRG2_Q_SZ )
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001010:	795b      	ldrb	r3, [r3, #5]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d905      	bls.n	8001022 <BLUENRG2__i8GetProcessedRSSI+0x3a>
    {
        BLUENRG2__st8Queue.bValid = true;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001018:	2201      	movs	r2, #1
 800101a:	719a      	strb	r2, [r3, #6]

        BLUENRG2__st8Queue.u8Idx = 0U;
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	715a      	strb	r2, [r3, #5]
    }

    if( BLUENRG2__st8Queue.bValid )
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001024:	799b      	ldrb	r3, [r3, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d038      	beq.n	800109c <BLUENRG2__i8GetProcessedRSSI+0xb4>
    {
        int32_t i32TempRssi = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]

        int8_t i8MinValue = INT8_MAX;
 800102e:	237f      	movs	r3, #127	; 0x7f
 8001030:	73fb      	strb	r3, [r7, #15]
        int8_t i8MaxValue = INT8_MIN;
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	73bb      	strb	r3, [r7, #14]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 8001036:	2300      	movs	r3, #0
 8001038:	737b      	strb	r3, [r7, #13]
 800103a:	e01b      	b.n	8001074 <BLUENRG2__i8GetProcessedRSSI+0x8c>
        {
            int8_t i8Value = BLUENRG2__st8Queue.i8Buffer[u8Idx];
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	733b      	strb	r3, [r7, #12]

            if( i8Value > i8MaxValue )
 8001044:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800104c:	429a      	cmp	r2, r3
 800104e:	dd01      	ble.n	8001054 <BLUENRG2__i8GetProcessedRSSI+0x6c>
            {
                i8MaxValue = i8Value;
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	73bb      	strb	r3, [r7, #14]
            }

            if( i8Value < i8MinValue )
 8001054:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	429a      	cmp	r2, r3
 800105e:	da01      	bge.n	8001064 <BLUENRG2__i8GetProcessedRSSI+0x7c>
            {
                i8MinValue = i8Value;
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	73fb      	strb	r3, [r7, #15]
            }
            i32TempRssi += i8Value;
 8001064:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4413      	add	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	3301      	adds	r3, #1
 8001072:	737b      	strb	r3, [r7, #13]
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d9e0      	bls.n	800103c <BLUENRG2__i8GetProcessedRSSI+0x54>
        }

        i32TempRssi -= i8MinValue;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	613b      	str	r3, [r7, #16]
        i32TempRssi -= i8MaxValue;
 8001084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	613b      	str	r3, [r7, #16]

        i8ReturnValue = (int8_t) ( i32TempRssi / (int32_t) ( BLUENRG2_Q_SZ - 2 ) );
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <BLUENRG2__i8GetProcessedRSSI+0xc8>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	17db      	asrs	r3, r3, #31
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	75fb      	strb	r3, [r7, #23]
    }

    return i8ReturnValue;
 800109c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000098 	.word	0x20000098
 80010b0:	55555556 	.word	0x55555556

080010b4 <BLUENRG2__bIsProcessedRSSIValid>:

static bool BLUENRG2__bIsProcessedRSSIValid( void )
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    return BLUENRG2__st8Queue.bValid;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <BLUENRG2__bIsProcessedRSSIValid+0x14>)
 80010ba:	799b      	ldrb	r3, [r3, #6]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000098 	.word	0x20000098

080010cc <hci_le_connection_complete_event>:
                                       uint16_t Conn_Interval,
                                       uint16_t Conn_Latency,
                                       uint16_t Supervision_Timeout,
                                       uint8_t  Master_Clock_Accuracy )

{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
    BLUENRG2__stConnCTX.u16Handle = Connection_Handle;
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <hci_le_connection_complete_event+0x88>)
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	8053      	strh	r3, [r2, #2]
    BLUENRG2__stConnCTX.u8Role    = Role;
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <hci_le_connection_complete_event+0x88>)
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	7113      	strb	r3, [r2, #4]

    PRINT_DBG( "Connection Complete with peer address: " );
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <hci_le_connection_complete_event+0x8c>)
 80010f8:	f007 fd70 	bl	8008bdc <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80010fc:	2305      	movs	r3, #5
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e00e      	b.n	8001120 <hci_le_connection_complete_event+0x54>
    {
        PRINT_DBG( "%02X-", Peer_Address[i8Idx] );
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <hci_le_connection_complete_event+0x90>)
 8001110:	f007 fd64 	bl	8008bdc <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dcec      	bgt.n	8001102 <hci_le_connection_complete_event+0x36>
    }
    PRINT_DBG( "%02X\r\n", Peer_Address[0] );
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <hci_le_connection_complete_event+0x94>)
 8001130:	f007 fd54 	bl	8008bdc <iprintf>

    if( BLUENRG2__stConnCTX.u8Role == BLUENRG2_MASTER_ROLE )
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <hci_le_connection_complete_event+0x88>)
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <hci_le_connection_complete_event+0x78>
    {
        BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_TX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <hci_le_connection_complete_event+0x98>)
 800113e:	2205      	movs	r2, #5
 8001140:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
    }
}
 8001142:	e002      	b.n	800114a <hci_le_connection_complete_event+0x7e>
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <hci_le_connection_complete_event+0x98>)
 8001146:	220a      	movs	r2, #10
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	200000a0 	.word	0x200000a0
 8001158:	08009d14 	.word	0x08009d14
 800115c:	08009d3c 	.word	0x08009d3c
 8001160:	08009d44 	.word	0x08009d44
 8001164:	2000009f 	.word	0x2000009f

08001168 <hci_disconnection_complete_event>:
//*****************************************************
//! \brief  This event indicates the discconnection from a peer device.
//!
//*****************************************************
void hci_disconnection_complete_event( uint8_t Status, uint16_t Connection_Handle, uint8_t Reason )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	460b      	mov	r3, r1
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	71bb      	strb	r3, [r7, #6]

    PRINT_DBG( "Disconnection with reason: 0x%02X\r\n", Reason );
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <hci_disconnection_complete_event+0x2c>)
 8001180:	f007 fd2c 	bl	8008bdc <iprintf>
    BLUENRG2__enState = BLUENRG2_STAT_INIT;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <hci_disconnection_complete_event+0x30>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	08009d4c 	.word	0x08009d4c
 8001198:	2000009f 	.word	0x2000009f

0800119c <hci_le_advertising_report_event>:
//*****************************************************
//! \brief  An advertising report is received.
//!
//*****************************************************
void hci_le_advertising_report_event( uint8_t Num_Reports, Advertising_Report_t Advertising_Report[] )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
    /* Advertising_Report contains all the expected parameters */
    uint8_t u8DataLen = Advertising_Report[0].Length_Data;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	7a1b      	ldrb	r3, [r3, #8]
 80011ac:	73fb      	strb	r3, [r7, #15]

    if( !BLUENRG2__stConnCTX.stDevice.bValid )
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <hci_le_advertising_report_event+0x90>)
 80011b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d031      	beq.n	8001222 <hci_le_advertising_report_event+0x86>
    {
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d12d      	bne.n	8001222 <hci_le_advertising_report_event+0x86>
            BLUENRG2__bFindDeviceName( u8DataLen, Advertising_Report[0].Data ) )
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe30 	bl	8000e34 <BLUENRG2__bFindDeviceName>
 80011d4:	4603      	mov	r3, r0
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d023      	beq.n	8001222 <hci_le_advertising_report_event+0x86>
        {
            BLUENRG2__vUpdateLockStatus( Advertising_Report[0].RSSI, BLUENRG2_RSSI_THRESHOLD_NEAR, false );
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe94 	bl	8000f14 <BLUENRG2__vUpdateLockStatus>

            if( BLUENRG2__bMasterDevIsUnlocked )
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <hci_le_advertising_report_event+0x94>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d016      	beq.n	8001222 <hci_le_advertising_report_event+0x86>
            {
                BLUENRG2__stConnCTX.stDevice.bValid = true;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <hci_le_advertising_report_event+0x90>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                BLUENRG2__stConnCTX.stDevice.u8Type = Advertising_Report[0].Address_Type;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	785a      	ldrb	r2, [r3, #1]
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <hci_le_advertising_report_event+0x90>)
 8001202:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                BLUENRG_memcpy( BLUENRG2__stConnCTX.stDevice.au8Addr, Advertising_Report[0].Address,
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	1c9a      	adds	r2, r3, #2
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <hci_le_advertising_report_event+0x90>)
 800120c:	3332      	adds	r3, #50	; 0x32
 800120e:	6811      	ldr	r1, [r2, #0]
 8001210:	6019      	str	r1, [r3, #0]
 8001212:	8892      	ldrh	r2, [r2, #4]
 8001214:	809a      	strh	r2, [r3, #4]
                                sizeof( Advertising_Report[0].Address ) );
                PRINT_DBG( "Device found\r\n" );
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <hci_le_advertising_report_event+0x98>)
 8001218:	f007 fd46 	bl	8008ca8 <puts>
                BLUENRG2__enState = BLUENRG2_STAT_SCAN_DONE;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <hci_le_advertising_report_event+0x9c>)
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000a0 	.word	0x200000a0
 8001230:	200000de 	.word	0x200000de
 8001234:	08009d70 	.word	0x08009d70
 8001238:	2000009f 	.word	0x2000009f

0800123c <aci_gap_proc_complete_event>:
//*****************************************************
//! \brief  This event indicates the end of a GAP procedure.
//!
//*****************************************************
void aci_gap_proc_complete_event( uint8_t Procedure_Code, uint8_t Status, uint8_t u8DataLen, uint8_t Data[] )
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	460b      	mov	r3, r1
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	717b      	strb	r3, [r7, #5]
    if( Procedure_Code == GAP_GENERAL_DISCOVERY_PROC )
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d112      	bne.n	800127c <aci_gap_proc_complete_event+0x40>
    {
        /* gap procedure complete has been raised as consequence of a GAP
           terminate procedure done after a device found event during the discovery procedure */
        if( BLUENRG2__stConnCTX.stDevice.bValid && !BLUENRG2__stConnCTX.bHasConnection )
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <aci_gap_proc_complete_event+0x4c>)
 8001258:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <aci_gap_proc_complete_event+0x3a>
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <aci_gap_proc_complete_event+0x4c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f083 0301 	eor.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <aci_gap_proc_complete_event+0x3a>
        {
            BLUENRG2__enState = BLUENRG2_STAT_START_CONNECT;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <aci_gap_proc_complete_event+0x50>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
        {
            // discovery procedure has been completed and no device found:
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
        }
    }
}
 8001274:	e002      	b.n	800127c <aci_gap_proc_complete_event+0x40>
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <aci_gap_proc_complete_event+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200000a0 	.word	0x200000a0
 800128c:	2000009f 	.word	0x2000009f

08001290 <aci_gatt_attribute_modified_event>:
                                        uint16_t Attr_Handle, 
                                        uint16_t Offset,
                                        uint16_t Attr_Data_Length,
                                        uint8_t Attr_Data[] )
// clang-format on
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	4603      	mov	r3, r0
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
 80012aa:	4613      	mov	r3, r2
 80012ac:	803b      	strh	r3, [r7, #0]
    BLUENRG2__vAttributeModifiedCB( Attr_Handle, Attr_Data_Length, Attr_Data );
 80012ae:	883b      	ldrh	r3, [r7, #0]
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe00 	bl	8000ebc <BLUENRG2__vAttributeModifiedCB>
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <aci_gatt_notification_event>:
//*****************************************************
void aci_gatt_notification_event( uint16_t Connection_Handle,
                                  uint16_t Attribute_Handle,
                                  uint8_t  Attribute_Value_Length,
                                  uint8_t  Attribute_Value[] )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4603      	mov	r3, r0
 80012ce:	81fb      	strh	r3, [r7, #14]
 80012d0:	460b      	mov	r3, r1
 80012d2:	81bb      	strh	r3, [r7, #12]
 80012d4:	4613      	mov	r3, r2
 80012d6:	72fb      	strb	r3, [r7, #11]
    if( Attribute_Handle == BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET )
 80012d8:	89ba      	ldrh	r2, [r7, #12]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <aci_gatt_notification_event+0x34>)
 80012dc:	8b5b      	ldrh	r3, [r3, #26]
 80012de:	3301      	adds	r3, #1
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d104      	bne.n	80012ee <aci_gatt_notification_event+0x2a>
    {
        BLUENRG2__vReceiveData( Attribute_Value, Attribute_Value_Length );
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fbeb 	bl	8000ac4 <BLUENRG2__vReceiveData>
    }
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000a0 	.word	0x200000a0

080012fc <aci_gatt_disc_read_char_by_uuid_resp_event>:
//*****************************************************
void aci_gatt_disc_read_char_by_uuid_resp_event( uint16_t Connection_Handle,
                                                 uint16_t Attribute_Handle,
                                                 uint8_t  Attribute_Value_Length,
                                                 uint8_t  Attribute_Value[] )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4603      	mov	r3, r0
 8001306:	81fb      	strh	r3, [r7, #14]
 8001308:	460b      	mov	r3, r1
 800130a:	81bb      	strh	r3, [r7, #12]
 800130c:	4613      	mov	r3, r2
 800130e:	72fb      	strb	r3, [r7, #11]
    PRINT_DBG( "aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle );
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	4619      	mov	r1, r3
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>)
 8001316:	f007 fc61 	bl	8008bdc <iprintf>

    if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800131c:	7a1b      	ldrb	r3, [r3, #8]
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <aci_gatt_disc_read_char_by_uuid_resp_event+0x46>
    {
        BLUENRG2__stConnCTX.RemoteTx.u16Handle = Attribute_Handle;
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	8353      	strh	r3, [r2, #26]
        PRINT_DBG( "Remote TX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteTx.u16Handle );
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001330:	8b5b      	ldrh	r3, [r3, #26]
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 8001336:	f007 fc51 	bl	8008bdc <iprintf>
        BLUENRG2__stConnCTX.RemoteTx.bValid = true;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800133c:	2201      	movs	r2, #1
 800133e:	721a      	strb	r2, [r3, #8]
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
        }
    }
}
 8001340:	e012      	b.n	8001368 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001344:	7f1b      	ldrb	r3, [r3, #28]
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	85d3      	strh	r3, [r2, #46]	; 0x2e
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800135e:	f007 fc3d 	bl	8008bdc <iprintf>
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001364:	2201      	movs	r2, #1
 8001366:	771a      	strb	r2, [r3, #28]
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	08009d80 	.word	0x08009d80
 8001374:	200000a0 	.word	0x200000a0
 8001378:	08009dc8 	.word	0x08009dc8
 800137c:	08009de8 	.word	0x08009de8

08001380 <aci_gatt_proc_complete_event>:
//*****************************************************
//! \brief  GATT procedure complete event.
//!
//*****************************************************
void aci_gatt_proc_complete_event( uint16_t Connection_Handle, uint8_t Error_Code )
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	4613      	mov	r3, r2
 800138e:	717b      	strb	r3, [r7, #5]
    if( BLUENRG2__stConnCTX.RemoteTx.bValid )
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <aci_gatt_proc_complete_event+0x50>)
 8001392:	7a1b      	ldrb	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d014      	beq.n	80013c2 <aci_gatt_proc_complete_event+0x42>
    {
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <aci_gatt_proc_complete_event+0x50>)
 800139a:	7f1b      	ldrb	r3, [r3, #28]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <aci_gatt_proc_complete_event+0x2e>
        {
            BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_RX;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <aci_gatt_proc_complete_event+0x54>)
 80013a8:	2206      	movs	r2, #6
 80013aa:	701a      	strb	r2, [r3, #0]
            {
                BLUENRG2__enState = BLUENRG2_STAT_GET_MTU_SZ; //BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
            }
        }
    }
}
 80013ac:	e009      	b.n	80013c2 <aci_gatt_proc_complete_event+0x42>
            if( !BLUENRG2__bRemoteTxNotifyEnabled )
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <aci_gatt_proc_complete_event+0x58>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <aci_gatt_proc_complete_event+0x42>
                BLUENRG2__enState = BLUENRG2_STAT_GET_MTU_SZ; //BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <aci_gatt_proc_complete_event+0x54>)
 80013be:	2209      	movs	r2, #9
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200000a0 	.word	0x200000a0
 80013d4:	2000009f 	.word	0x2000009f
 80013d8:	200000dd 	.word	0x200000dd

080013dc <aci_gatt_tx_pool_available_event>:
//*****************************************************
//! \brief  GATT TX pool available event
//!
//*****************************************************
void aci_gatt_tx_pool_available_event( uint16_t Connection_Handle, uint16_t Available_Buffers )
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
    BLUENRG2__bTXbufferFull = false;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <aci_gatt_tx_pool_available_event+0x24>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000dc 	.word	0x200000dc

08001404 <aci_att_exchange_mtu_resp_event>:
//*****************************************************
//! \brief  GATT ATT exchange MTU response event.
//!
//*****************************************************
void aci_att_exchange_mtu_resp_event( uint16_t Connection_Handle, uint16_t Server_RX_MTU )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	460a      	mov	r2, r1
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	4613      	mov	r3, r2
 8001412:	80bb      	strh	r3, [r7, #4]
    PRINT_DBG( "aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU );
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <aci_att_exchange_mtu_resp_event+0x40>)
 800141a:	f007 fbdf 	bl	8008bdc <iprintf>

    if( Server_RX_MTU <= CLIENT_MAX_MTU_SIZE )
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	2b9e      	cmp	r3, #158	; 0x9e
 8001422:	d805      	bhi.n	8001430 <aci_att_exchange_mtu_resp_event+0x2c>
    {
        BLUENRG2__stConnCTX.u16MaxWriteLen = Server_RX_MTU - 3U;
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	3b03      	subs	r3, #3
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <aci_att_exchange_mtu_resp_event+0x44>)
 800142c:	80da      	strh	r2, [r3, #6]
 800142e:	e002      	b.n	8001436 <aci_att_exchange_mtu_resp_event+0x32>
    }
    else
    {
        BLUENRG2__stConnCTX.u16MaxWriteLen = CLIENT_MAX_MTU_SIZE - 3U;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <aci_att_exchange_mtu_resp_event+0x44>)
 8001432:	229b      	movs	r2, #155	; 0x9b
 8001434:	80da      	strh	r2, [r3, #6]
    }
    BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY; // BLUENRG2_STAT_MAIN_CONNECTED;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <aci_att_exchange_mtu_resp_event+0x48>)
 8001438:	2207      	movs	r2, #7
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	08009e08 	.word	0x08009e08
 8001448:	200000a0 	.word	0x200000a0
 800144c:	2000009f 	.word	0x2000009f

08001450 <GATT_DB_u8AddService>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t GATT_DB_u8AddService( void )
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b09d      	sub	sp, #116	; 0x74
 8001454:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 8001456:	2306      	movs	r3, #6
 8001458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t cu8ServiceUUID[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <GATT_DB_u8AddService+0x110>)
 800145e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDTx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <GATT_DB_u8AddService+0x114>)
 800146a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800146e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t cu8CharUUIDRx[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <GATT_DB_u8AddService+0x118>)
 8001476:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800147a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


  Service_UUID_t  unTempServiceUUID;
  Char_UUID_t unTempCharUUID;

  BLUENRG_memcpy(&unTempServiceUUID.Service_UUID_128, cu8ServiceUUID, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 8001480:	f107 0414 	add.w	r4, r7, #20
 8001484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_service(UUID_TYPE_128, &unTempServiceUUID, PRIMARY_SERVICE, max_attribute_records, &u16LocalServHandle);
 800148e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001492:	f107 0114 	add.w	r1, r7, #20
 8001496:	4a35      	ldr	r2, [pc, #212]	; (800156c <GATT_DB_u8AddService+0x11c>)
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f004 fd8e 	bl	8005fbe <aci_gatt_add_service>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80014a8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d14a      	bne.n	8001546 <GATT_DB_u8AddService+0xf6>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDTx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80014b0:	1d3c      	adds	r4, r7, #4
 80014b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <GATT_DB_u8AddService+0x11c>)
 80014be:	8818      	ldrh	r0, [r3, #0]
 80014c0:	1d3a      	adds	r2, r7, #4
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <GATT_DB_u8AddService+0x120>)
 80014c4:	9305      	str	r3, [sp, #20]
 80014c6:	2301      	movs	r3, #1
 80014c8:	9304      	str	r3, [sp, #16]
 80014ca:	2310      	movs	r3, #16
 80014cc:	9303      	str	r3, [sp, #12]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2310      	movs	r3, #16
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	233f      	movs	r3, #63	; 0x3f
 80014dc:	2102      	movs	r1, #2
 80014de:	f004 fe44 	bl	800616a <aci_gatt_add_char>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalTxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80014e8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12c      	bne.n	800154a <GATT_DB_u8AddService+0xfa>

  BLUENRG_memcpy(&unTempCharUUID.Char_UUID_128, cu8CharUUIDRx, GATT_DB_CUSTOM_UUID_BYTE_NUM);
 80014f0:	1d3c      	adds	r4, r7, #4
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <GATT_DB_u8AddService+0x11c>)
 80014fe:	8818      	ldrh	r0, [r3, #0]
 8001500:	1d3a      	adds	r2, r7, #4
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <GATT_DB_u8AddService+0x124>)
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	2301      	movs	r3, #1
 8001508:	9304      	str	r3, [sp, #16]
 800150a:	2310      	movs	r3, #16
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	2301      	movs	r3, #1
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	230c      	movs	r3, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	233f      	movs	r3, #63	; 0x3f
 800151c:	2102      	movs	r1, #2
 800151e:	f004 fe24 	bl	800616a <aci_gatt_add_char>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                16, 1, &u16LocalRxCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001528:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10e      	bne.n	800154e <GATT_DB_u8AddService+0xfe>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", u16LocalTxCharHandle, u16LocalRxCharHandle);
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <GATT_DB_u8AddService+0x120>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <GATT_DB_u8AddService+0x124>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <GATT_DB_u8AddService+0x128>)
 800153e:	f007 fb4d 	bl	8008bdc <iprintf>
  return BLE_STATUS_SUCCESS;
 8001542:	2300      	movs	r3, #0
 8001544:	e008      	b.n	8001558 <GATT_DB_u8AddService+0x108>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001546:	bf00      	nop
 8001548:	e002      	b.n	8001550 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800154a:	bf00      	nop
 800154c:	e000      	b.n	8001550 <GATT_DB_u8AddService+0x100>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800154e:	bf00      	nop

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <GATT_DB_u8AddService+0x12c>)
 8001552:	f007 fba9 	bl	8008ca8 <puts>
  return BLE_STATUS_ERROR ;
 8001556:	2347      	movs	r3, #71	; 0x47
}
 8001558:	4618      	mov	r0, r3
 800155a:	375c      	adds	r7, #92	; 0x5c
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	08009ea4 	.word	0x08009ea4
 8001564:	08009eb4 	.word	0x08009eb4
 8001568:	08009ec4 	.word	0x08009ec4
 800156c:	20000126 	.word	0x20000126
 8001570:	20000128 	.word	0x20000128
 8001574:	2000012a 	.word	0x2000012a
 8001578:	08009e3c 	.word	0x08009e3c
 800157c:	08009e80 	.word	0x08009e80

08001580 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d163      	bne.n	800165c <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b3e      	cmp	r3, #62	; 0x3e
 80015a0:	d11e      	bne.n	80015e0 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3302      	adds	r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	e014      	b.n	80015d8 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	492b      	ldr	r1, [pc, #172]	; (8001664 <APP_UserEvtRx+0xe4>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d108      	bne.n	80015d2 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80015c0:	4a28      	ldr	r2, [pc, #160]	; (8001664 <APP_UserEvtRx+0xe4>)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	3201      	adds	r2, #1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b09      	cmp	r3, #9
 80015dc:	d9e7      	bls.n	80015ae <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80015de:	e03d      	b.n	800165c <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2bff      	cmp	r3, #255	; 0xff
 80015e6:	d11e      	bne.n	8001626 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3302      	adds	r3, #2
 80015ec:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e014      	b.n	800161e <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	491b      	ldr	r1, [pc, #108]	; (8001668 <APP_UserEvtRx+0xe8>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001602:	429a      	cmp	r2, r3
 8001604:	d108      	bne.n	8001618 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <APP_UserEvtRx+0xe8>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	3202      	adds	r2, #2
 8001614:	4610      	mov	r0, r2
 8001616:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b2a      	cmp	r3, #42	; 0x2a
 8001622:	d9e7      	bls.n	80015f4 <APP_UserEvtRx+0x74>
}
 8001624:	e01a      	b.n	800165c <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e014      	b.n	8001656 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <APP_UserEvtRx+0xec>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800163a:	429a      	cmp	r2, r3
 800163c:	d108      	bne.n	8001650 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <APP_UserEvtRx+0xec>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	3202      	adds	r2, #2
 800164c:	4610      	mov	r0, r2
 800164e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	3301      	adds	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d9e7      	bls.n	800162c <APP_UserEvtRx+0xac>
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08009f98 	.word	0x08009f98
 8001668:	08009fe8 	.word	0x08009fe8
 800166c:	08009f60 	.word	0x08009f60

08001670 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001674:	2006      	movs	r0, #6
 8001676:	f001 f8b2 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}

0800167e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001682:	2006      	movs	r0, #6
 8001684:	f001 f8b9 	bl	80027fa <HAL_NVIC_DisableIRQ>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HCI_TL_SPI_Init+0x94>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <HCI_TL_SPI_Init+0x94>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HCI_TL_SPI_Init+0x94>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80016ac:	2301      	movs	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f001 f912 	bl	80028ec <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80016c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f001 f902 	bl	80028ec <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f001 f8f3 	bl	80028ec <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	2102      	movs	r1, #2
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f001 fba3 	bl	8002e58 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8001712:	f000 fcf7 	bl	8002104 <BSP_SPI1_Init>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000

08001724 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001728:	2101      	movs	r1, #1
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f001 fa87 	bl	8002c40 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001732:	2102      	movs	r1, #2
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f001 fa82 	bl	8002c40 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f001 fa7c 	bl	8002c40 <HAL_GPIO_DeInit>
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}

0800174e <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2102      	movs	r1, #2
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f001 fb7d 	bl	8002e58 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 fb76 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800176c:	2005      	movs	r0, #5
 800176e:	f000 fef7 	bl	8002560 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f001 fb6c 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001780:	2005      	movs	r0, #5
 8001782:	f000 feed 	bl	8002560 <HAL_Delay>
  return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}

0800178c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800179c:	2300      	movs	r3, #0
 800179e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HCI_TL_SPI_Receive+0xe0>)
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017aa:	6018      	str	r0, [r3, #0]
 80017ac:	3304      	adds	r3, #4
 80017ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80017b0:	f7ff ff65 	bl	800167e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2102      	movs	r1, #2
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f001 fb4c 	bl	8002e58 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80017c0:	f107 0108 	add.w	r1, r7, #8
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2205      	movs	r2, #5
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcca 	bl	8002164 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80017e0:	8bfb      	ldrh	r3, [r7, #30]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01e      	beq.n	8001824 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80017e6:	8bfa      	ldrh	r2, [r7, #30]
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d901      	bls.n	80017f2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	777b      	strb	r3, [r7, #29]
 80017f6:	e010      	b.n	800181a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80017f8:	f107 0116 	add.w	r1, r7, #22
 80017fc:	f107 0317 	add.w	r3, r7, #23
 8001800:	2201      	movs	r2, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fcae 	bl	8002164 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001808:	7f7b      	ldrb	r3, [r7, #29]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	7dba      	ldrb	r2, [r7, #22]
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001814:	7f7b      	ldrb	r3, [r7, #29]
 8001816:	3301      	adds	r3, #1
 8001818:	777b      	strb	r3, [r7, #29]
 800181a:	7f7b      	ldrb	r3, [r7, #29]
 800181c:	b29b      	uxth	r3, r3
 800181e:	8bfa      	ldrh	r2, [r7, #30]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8e9      	bhi.n	80017f8 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001824:	f000 fe90 	bl	8002548 <HAL_GetTick>
 8001828:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800182a:	e007      	b.n	800183c <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800182c:	2101      	movs	r1, #1
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f001 faf9 	bl	8002e28 <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800183c:	f000 fe84 	bl	8002548 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184a:	d3ef      	bcc.n	800182c <HCI_TL_SPI_Receive+0xa0>
 800184c:	e000      	b.n	8001850 <HCI_TL_SPI_Receive+0xc4>
      break;
 800184e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001850:	f7ff ff0e 	bl	8001670 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2102      	movs	r1, #2
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f001 fafc 	bl	8002e58 <HAL_GPIO_WritePin>

  return len;
 8001860:	7f7b      	ldrb	r3, [r7, #29]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	08009ed4 	.word	0x08009ed4

08001870 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800187c:	4a41      	ldr	r2, [pc, #260]	; (8001984 <HCI_TL_SPI_Send+0x114>)
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001886:	6018      	str	r0, [r3, #0]
 8001888:	3304      	adds	r3, #4
 800188a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800188c:	f000 fe5c 	bl	8002548 <HAL_GetTick>
 8001890:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001892:	f7ff fef4 	bl	800167e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001896:	f000 fe57 	bl	8002548 <HAL_GetTick>
 800189a:	61f8      	str	r0, [r7, #28]

    result = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2102      	movs	r1, #2
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f001 fad6 	bl	8002e58 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80018ac:	e00a      	b.n	80018c4 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80018ae:	f000 fe4b 	bl	8002548 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d903      	bls.n	80018c4 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80018bc:	f06f 0302 	mvn.w	r3, #2
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80018c2:	e004      	b.n	80018ce <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80018c4:	f000 f862 	bl	800198c <IsDataAvailable>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ef      	beq.n	80018ae <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f113 0f03 	cmn.w	r3, #3
 80018d4:	d106      	bne.n	80018e4 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2102      	movs	r1, #2
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f001 fabb 	bl	8002e58 <HAL_GPIO_WritePin>
      break;
 80018e2:	e031      	b.n	8001948 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2205      	movs	r2, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fc38 	bl	8002164 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8001904:	8b7a      	ldrh	r2, [r7, #26]
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	429a      	cmp	r2, r3
 800190a:	d306      	bcc.n	800191a <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	461a      	mov	r2, r3
 8001910:	491d      	ldr	r1, [pc, #116]	; (8001988 <HCI_TL_SPI_Send+0x118>)
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fc26 	bl	8002164 <BSP_SPI1_SendRecv>
 8001918:	e002      	b.n	8001920 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800191a:	f06f 0301 	mvn.w	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2102      	movs	r1, #2
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f001 fa96 	bl	8002e58 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800192c:	f000 fe0c 	bl	8002548 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d903      	bls.n	8001942 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800193a:	f06f 0302 	mvn.w	r3, #2
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001940:	e002      	b.n	8001948 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	dba6      	blt.n	8001896 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001948:	f000 fdfe 	bl	8002548 <HAL_GetTick>
 800194c:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800194e:	e007      	b.n	8001960 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001950:	2101      	movs	r1, #1
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f001 fa67 	bl	8002e28 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001960:	f000 fdf2 	bl	8002548 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800196e:	d3ef      	bcc.n	8001950 <HCI_TL_SPI_Send+0xe0>
 8001970:	e000      	b.n	8001974 <HCI_TL_SPI_Send+0x104>
      break;
 8001972:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001974:	f7ff fe7c 	bl	8001670 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800197a:	4618      	mov	r0, r3
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	08009edc 	.word	0x08009edc
 8001988:	20000134 	.word	0x20000134

0800198c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001990:	2101      	movs	r1, #1
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f001 fa47 	bl	8002e28 <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <hci_tl_lowlevel_init+0x54>)
 80019b4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <hci_tl_lowlevel_init+0x58>)
 80019b8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <hci_tl_lowlevel_init+0x5c>)
 80019bc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <hci_tl_lowlevel_init+0x60>)
 80019c0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <hci_tl_lowlevel_init+0x64>)
 80019c4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <hci_tl_lowlevel_init+0x68>)
 80019c8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 fccb 	bl	8008368 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80019d2:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <hci_tl_lowlevel_init+0x6c>)
 80019d8:	f000 ff43 	bl	8002862 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80019dc:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <hci_tl_lowlevel_init+0x70>)
 80019de:	2100      	movs	r1, #0
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <hci_tl_lowlevel_init+0x6c>)
 80019e2:	f000 ff24 	bl	800282e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2006      	movs	r0, #6
 80019ec:	f000 fedb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019f0:	2006      	movs	r0, #6
 80019f2:	f000 fef4 	bl	80027de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800168d 	.word	0x0800168d
 8001a04:	08001725 	.word	0x08001725
 8001a08:	08001871 	.word	0x08001871
 8001a0c:	0800178d 	.word	0x0800178d
 8001a10:	0800174f 	.word	0x0800174f
 8001a14:	080021a5 	.word	0x080021a5
 8001a18:	2000012c 	.word	0x2000012c
 8001a1c:	08001a21 	.word	0x08001a21

08001a20 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a24:	e005      	b.n	8001a32 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a26:	2000      	movs	r0, #0
 8001a28:	f006 fe02 	bl	8008630 <hci_notify_asynch_evt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001a32:	f7ff ffab 	bl	800198c <IsDataAvailable>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f4      	bne.n	8001a26 <hci_tl_lowlevel_isr+0x6>
 8001a3c:	e000      	b.n	8001a40 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001a3e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0

  HAL_Init();
 8001a46:	f000 fd0f 	bl	8002468 <HAL_Init>
  SystemClock_Config();
 8001a4a:	f000 f807 	bl	8001a5c <SystemClock_Config>
  MX_GPIO_Init();
 8001a4e:	f000 f857 	bl	8001b00 <MX_GPIO_Init>
  
  BLUENRG2_vInit();
 8001a52:	f7fe fdb5 	bl	80005c0 <BLUENRG2_vInit>

  while (1)
  {
    BLUENRG2_vProcess();
 8001a56:	f7fe fdd5 	bl	8000604 <BLUENRG2_vProcess>
 8001a5a:	e7fc      	b.n	8001a56 <main+0x14>

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b096      	sub	sp, #88	; 0x58
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2244      	movs	r2, #68	; 0x44
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fa0c 	bl	8008e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a82:	f001 fa0f 	bl	8002ea4 <HAL_PWREx_ControlVoltageScaling>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a8c:	f000 f8ae 	bl	8001bec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fa46 	bl	8002f50 <HAL_RCC_OscConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001aca:	f000 f88f 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ace:	230f      	movs	r3, #15
 8001ad0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fe1a 	bl	8003720 <HAL_RCC_ClockConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001af2:	f000 f87b 	bl	8001bec <Error_Handler>
  }
}
 8001af6:	bf00      	nop
 8001af8:	3758      	adds	r7, #88	; 0x58
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b80:	f001 f96a 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b84:	2301      	movs	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f000 fea6 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001ba0:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbc:	f000 fe96 	bl	80028ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2006      	movs	r0, #6
 8001bc6:	f000 fdee 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f000 fe07 	bl	80027de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f000 fde6 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bda:	2028      	movs	r0, #40	; 0x28
 8001bdc:	f000 fdff 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <Error_Handler+0x8>
	...

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x44>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x44>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_MspInit+0x44>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_MspInit+0x44>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 fc48 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <EXTI0_IRQHandler+0x10>)
 8001c9a:	f000 fdf7 	bl	800288c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000012c 	.word	0x2000012c

08001ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <EXTI15_10_IRQHandler+0x10>)
 8001cae:	f000 fded 	bl	800288c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <BSP_LED_Init+0x20>)
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08009f04 	.word	0x08009f04

08001ce0 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <BSP_LED_On+0x28>)
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f8ae 	bl	8002e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000

08001d0c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <BSP_LED_Off+0x28>)
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	2120      	movs	r1, #32
 8001d20:	2200      	movs	r2, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 f898 	bl	8002e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000

08001d38 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <LED_USER_GPIO_Init+0x78>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f001 f867 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f000 fda2 	bl	80028ec <HAL_GPIO_Init>

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <BSP_PB_Init+0x94>)
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d132      	bne.n	8001e3e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <BSP_PB_Init+0x98>)
 8001dde:	441a      	add	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	491b      	ldr	r1, [pc, #108]	; (8001e50 <BSP_PB_Init+0x9c>)
 8001de4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 fd39 	bl	8002862 <HAL_EXTI_GetHandle>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001df6:	f06f 0303 	mvn.w	r3, #3
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e01f      	b.n	8001e3e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <BSP_PB_Init+0x98>)
 8001e04:	1898      	adds	r0, r3, r2
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <BSP_PB_Init+0xa0>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2100      	movs	r1, #0
 8001e12:	f000 fd0c 	bl	800282e <HAL_EXTI_RegisterCallback>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e1c:	f06f 0303 	mvn.w	r3, #3
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e00c      	b.n	8001e3e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e24:	2028      	movs	r0, #40	; 0x28
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <BSP_PB_Init+0xa4>)
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	f000 fcb8 	bl	80027a6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e36:	2328      	movs	r3, #40	; 0x28
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fcd0 	bl	80027de <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	08009f08 	.word	0x08009f08
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	08009f0c 	.word	0x08009f0c
 8001e54:	08009f10 	.word	0x08009f10
 8001e58:	08009f14 	.word	0x08009f14

08001e5c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <BSP_PB_GetState+0x34>)
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 ffd7 	bl	8002e28 <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000004 	.word	0x20000004

08001e94 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fff0 	bl	8001e94 <BSP_PB_Callback>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <BUTTON_USER_GPIO_Init+0x70>)
 8001f16:	f000 fce9 	bl	80028ec <HAL_GPIO_Init>

}
 8001f1a:	bf00      	nop
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000800 	.word	0x48000800

08001f2c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d903      	bls.n	8001f48 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f40:	f06f 0301 	mvn.w	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e025      	b.n	8001f94 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	4914      	ldr	r1, [pc, #80]	; (8001fa0 <BSP_COM_Init+0x74>)
 8001f4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <BSP_COM_Init+0x78>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4403      	add	r3, r0
 8001f5e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	4613      	mov	r3, r2
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <BSP_COM_Init+0x78>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f86a 	bl	8002048 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	4613      	mov	r3, r2
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <BSP_COM_Init+0x78>)
 8001f80:	4413      	add	r3, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f810 	bl	8001fa8 <MX_USART2_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f8e:	f06f 0303 	mvn.w	r3, #3
 8001f92:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000234 	.word	0x20000234

08001fa8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a15      	ldr	r2, [pc, #84]	; (800200c <MX_USART2_UART_Init+0x64>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f002 fe88 	bl	8004d08 <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004400 	.word	0x40004400

08002010 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <__io_putchar+0x30>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <__io_putchar+0x34>)
 8002028:	1898      	adds	r0, r3, r2
 800202a:	1d39      	adds	r1, r7, #4
 800202c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002030:	2201      	movs	r2, #1
 8002032:	f002 fec1 	bl	8004db8 <HAL_UART_Transmit>
  return ch;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200002b8 	.word	0x200002b8
 8002044:	20000234 	.word	0x20000234

08002048 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0ac      	sub	sp, #176	; 0xb0
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2288      	movs	r2, #136	; 0x88
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f006 ff15 	bl	8008e88 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002062:	2300      	movs	r3, #0
 8002064:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fd5e 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <USART2_MspInit+0xb8>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <USART2_MspInit+0xb8>)
 8002076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <USART2_MspInit+0xb8>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <USART2_MspInit+0xb8>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <USART2_MspInit+0xb8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <USART2_MspInit+0xb8>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80020a0:	2304      	movs	r3, #4
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80020b8:	2307      	movs	r3, #7
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80020be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f000 fc10 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80020cc:	2308      	movs	r3, #8
 80020ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80020e4:	2307      	movs	r3, #7
 80020e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80020ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f000 fbfa 	bl	80028ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80020f8:	bf00      	nop
 80020fa:	37b0      	adds	r7, #176	; 0xb0
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <BSP_SPI1_Init+0x54>)
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <BSP_SPI1_Init+0x58>)
 8002112:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <BSP_SPI1_Init+0x5c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4911      	ldr	r1, [pc, #68]	; (8002160 <BSP_SPI1_Init+0x5c>)
 800211c:	600a      	str	r2, [r1, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <BSP_SPI1_Init+0x54>)
 8002124:	f002 fc7e 	bl	8004a24 <HAL_SPI_GetState>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800212e:	480a      	ldr	r0, [pc, #40]	; (8002158 <BSP_SPI1_Init+0x54>)
 8002130:	f000 f882 	bl	8002238 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <BSP_SPI1_Init+0x54>)
 800213c:	f000 f83a 	bl	80021b4 <MX_SPI1_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002146:	f06f 0307 	mvn.w	r3, #7
 800214a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002bc 	.word	0x200002bc
 800215c:	40013000 	.word	0x40013000
 8002160:	20000320 	.word	0x20000320

08002164 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800217c:	9200      	str	r2, [sp, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4807      	ldr	r0, [pc, #28]	; (80021a0 <BSP_SPI1_SendRecv+0x3c>)
 8002184:	f002 fa3b 	bl	80045fe <HAL_SPI_TransmitReceive>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800218e:	f06f 0305 	mvn.w	r3, #5
 8002192:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002194:	697b      	ldr	r3, [r7, #20]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002bc 	.word	0x200002bc

080021a4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80021a8:	f000 f9ce 	bl	8002548 <HAL_GetTick>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <MX_SPI1_Init+0x80>)
 80021c4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021cc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021da:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ee:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2228      	movs	r2, #40	; 0x28
 80021f4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2207      	movs	r2, #7
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f002 f942 	bl	80044a4 <HAL_SPI_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013000 	.word	0x40013000

08002238 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002240:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <SPI1_MspInit+0xbc>)
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <SPI1_MspInit+0xbc>)
 8002246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224a:	6613      	str	r3, [r2, #96]	; 0x60
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <SPI1_MspInit+0xbc>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <SPI1_MspInit+0xbc>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <SPI1_MspInit+0xbc>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <SPI1_MspInit+0xbc>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <SPI1_MspInit+0xbc>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <SPI1_MspInit+0xbc>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <SPI1_MspInit+0xbc>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002298:	2305      	movs	r3, #5
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f000 fb21 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80022ba:	2305      	movs	r3, #5
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f000 fb10 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80022cc:	2308      	movs	r3, #8
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80022dc:	2305      	movs	r3, #5
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <SPI1_MspInit+0xc0>)
 80022e8:	f000 fb00 	bl	80028ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	48000400 	.word	0x48000400

080022fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e00a      	b.n	8002324 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800230e:	f3af 8000 	nop.w
 8002312:	4601      	mov	r1, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	b2ca      	uxtb	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf0      	blt.n	800230e <_read+0x12>
	}

return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e009      	b.n	800235c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60ba      	str	r2, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe5d 	bl	8002010 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf1      	blt.n	8002348 <_write+0x12>
	}
	return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_close>:

int _close(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002396:	605a      	str	r2, [r3, #4]
	return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_isatty>:

int _isatty(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	return 1;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <_sbrk+0x5c>)
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <_sbrk+0x60>)
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_sbrk+0x64>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <_sbrk+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	429a      	cmp	r2, r3
 8002406:	d207      	bcs.n	8002418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002408:	f006 fd8c 	bl	8008f24 <__errno>
 800240c:	4603      	mov	r3, r0
 800240e:	220c      	movs	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e009      	b.n	800242c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <_sbrk+0x64>)
 8002428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20018000 	.word	0x20018000
 8002438:	00000400 	.word	0x00000400
 800243c:	20000324 	.word	0x20000324
 8002440:	20000a20 	.word	0x20000a20

08002444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SystemInit+0x20>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <SystemInit+0x20>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_Init+0x3c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_Init+0x3c>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247e:	2003      	movs	r0, #3
 8002480:	f000 f986 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002484:	2000      	movs	r0, #0
 8002486:	f000 f80f 	bl	80024a8 <HAL_InitTick>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	e001      	b.n	800249a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002496:	f7ff fbaf 	bl	8001bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800249a:	79fb      	ldrb	r3, [r7, #7]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40022000 	.word	0x40022000

080024a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_InitTick+0x6c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_InitTick+0x70>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_InitTick+0x6c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f99f 	bl	8002816 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10f      	bne.n	80024fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d809      	bhi.n	80024f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f000 f95b 	bl	80027a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_InitTick+0x74>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e007      	b.n	8002508 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e004      	b.n	8002508 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e001      	b.n	8002508 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000001c 	.word	0x2000001c
 8002518:	20000014 	.word	0x20000014
 800251c:	20000018 	.word	0x20000018

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000001c 	.word	0x2000001c
 8002544:	20000328 	.word	0x20000328

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000328 	.word	0x20000328

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000001c 	.word	0x2000001c

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db12      	blt.n	8002680 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	490a      	ldr	r1, [pc, #40]	; (800268c <__NVIC_DisableIRQ+0x44>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	3320      	adds	r3, #32
 8002670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800267a:	f3bf 8f6f 	isb	sy
}
 800267e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff05 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff1a 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff0d 	bl	800260c <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff1d 	bl	8002648 <__NVIC_DisableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff94 	bl	800274c <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	460b      	mov	r3, r1
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d103      	bne.n	800284e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	605a      	str	r2, [r3, #4]
      break;
 800284c:	e002      	b.n	8002854 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
      break;
 8002852:	bf00      	nop
  }

  return status;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e003      	b.n	800287e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_EXTI_IRQHandler+0x5c>)
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4798      	blx	r3
    }
  }
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40010414 	.word	0x40010414

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fa:	e17f      	b.n	8002bfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	4013      	ands	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8171 	beq.w	8002bf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d005      	beq.n	800292c <HAL_GPIO_Init+0x40>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d130      	bne.n	800298e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002962:	2201      	movs	r2, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0201 	and.w	r2, r3, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b03      	cmp	r3, #3
 8002998:	d118      	bne.n	80029cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d017      	beq.n	8002a08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d123      	bne.n	8002a5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	6939      	ldr	r1, [r7, #16]
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ac 	beq.w	8002bf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_GPIO_Init+0x330>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa2:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <HAL_GPIO_Init+0x330>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <HAL_GPIO_Init+0x330>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab6:	4a5a      	ldr	r2, [pc, #360]	; (8002c20 <HAL_GPIO_Init+0x334>)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	3302      	adds	r3, #2
 8002abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x242>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4f      	ldr	r2, [pc, #316]	; (8002c24 <HAL_GPIO_Init+0x338>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x23e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <HAL_GPIO_Init+0x33c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x23a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_GPIO_Init+0x340>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x236>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4c      	ldr	r2, [pc, #304]	; (8002c30 <HAL_GPIO_Init+0x344>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x232>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <HAL_GPIO_Init+0x348>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x22e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_GPIO_Init+0x34c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x22a>
 8002b12:	2306      	movs	r3, #6
 8002b14:	e00c      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b16:	2307      	movs	r3, #7
 8002b18:	e00a      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	e008      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b22:	2303      	movs	r3, #3
 8002b24:	e004      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_GPIO_Init+0x244>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	f002 0203 	and.w	r2, r2, #3
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	4093      	lsls	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b40:	4937      	ldr	r1, [pc, #220]	; (8002c20 <HAL_GPIO_Init+0x334>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b72:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b9c:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_GPIO_Init+0x350>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae78 	bne.w	80028fc <HAL_GPIO_Init+0x10>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48001000 	.word	0x48001000
 8002c34:	48001400 	.word	0x48001400
 8002c38:	48001800 	.word	0x48001800
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c4e:	e0cd      	b.n	8002dec <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c50:	2201      	movs	r2, #1
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80c0 	beq.w	8002de6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c66:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_GPIO_DeInit+0x1c8>)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c8e:	d025      	beq.n	8002cdc <HAL_GPIO_DeInit+0x9c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <HAL_GPIO_DeInit+0x1cc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01f      	beq.n	8002cd8 <HAL_GPIO_DeInit+0x98>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_GPIO_DeInit+0x1d0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d019      	beq.n	8002cd4 <HAL_GPIO_DeInit+0x94>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a5c      	ldr	r2, [pc, #368]	; (8002e14 <HAL_GPIO_DeInit+0x1d4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_DeInit+0x90>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <HAL_GPIO_DeInit+0x1d8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_DeInit+0x8c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_GPIO_DeInit+0x1dc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_DeInit+0x88>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_GPIO_DeInit+0x1e0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_DeInit+0x84>
 8002cc0:	2306      	movs	r3, #6
 8002cc2:	e00c      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	e00a      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cc8:	2305      	movs	r3, #5
 8002cca:	e008      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e004      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_DeInit+0x9e>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d132      	bne.n	8002d54 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	494b      	ldr	r1, [pc, #300]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4947      	ldr	r1, [pc, #284]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4944      	ldr	r1, [pc, #272]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d18:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4940      	ldr	r1, [pc, #256]	; (8002e24 <HAL_GPIO_DeInit+0x1e4>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_GPIO_DeInit+0x1c8>)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	4830      	ldr	r0, [pc, #192]	; (8002e08 <HAL_GPIO_DeInit+0x1c8>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	3302      	adds	r3, #2
 8002d50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	08d2      	lsrs	r2, r2, #3
 8002d88:	4019      	ands	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	2101      	movs	r1, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3301      	adds	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af2b 	bne.w	8002c50 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	48000400 	.word	0x48000400
 8002e10:	48000800 	.word	0x48000800
 8002e14:	48000c00 	.word	0x48000c00
 8002e18:	48001000 	.word	0x48001000
 8002e1c:	48001400 	.word	0x48001400
 8002e20:	48001800 	.word	0x48001800
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e001      	b.n	8002e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb2:	d130      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d038      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2232      	movs	r2, #50	; 0x32
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee8:	e002      	b.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d102      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f2      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f10:	d110      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00f      	b.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d007      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f2c:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000
 8002f48:	20000014 	.word	0x20000014
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e3d8      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4b97      	ldr	r3, [pc, #604]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4b94      	ldr	r3, [pc, #592]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80e4 	beq.w	800314c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4a>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	f040 808b 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8087 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x62>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e3b0      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4b82      	ldr	r3, [pc, #520]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_OscConfig+0x7c>
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_OscConfig+0x88>
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d223      	bcs.n	8003024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd43 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e391      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4b73      	ldr	r3, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a72      	ldr	r2, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	496d      	ldr	r1, [pc, #436]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4968      	ldr	r1, [pc, #416]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e025      	b.n	8003070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a65      	ldr	r2, [pc, #404]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4960      	ldr	r1, [pc, #384]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	495b      	ldr	r1, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fd03 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e351      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003070:	f000 fc38 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	4950      	ldr	r1, [pc, #320]	; (80031c4 <HAL_RCC_OscConfig+0x274>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <HAL_RCC_OscConfig+0x278>)
 800308e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003090:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <HAL_RCC_OscConfig+0x27c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fa07 	bl	80024a8 <HAL_InitTick>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d052      	beq.n	800314a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	e335      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a42      	ldr	r2, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030bc:	f7ff fa44 	bl	8002548 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7ff fa40 	bl	8002548 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e31e      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a36      	ldr	r2, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4931      	ldr	r1, [pc, #196]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	492c      	ldr	r1, [pc, #176]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003122:	f7ff fa11 	bl	8002548 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312a:	f7ff fa0d 	bl	8002548 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e2eb      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x1da>
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d074      	beq.n	8003242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x21a>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d10e      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d10b      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d064      	beq.n	8003240 <HAL_RCC_OscConfig+0x2f0>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d160      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e2c8      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x24a>
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e026      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a2:	d115      	bne.n	80031d0 <HAL_RCC_OscConfig+0x280>
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a02      	ldr	r2, [pc, #8]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08009f18 	.word	0x08009f18
 80031c8:	20000014 	.word	0x20000014
 80031cc:	20000018 	.word	0x20000018
 80031d0:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9f      	ldr	r2, [pc, #636]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b9d      	ldr	r3, [pc, #628]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9c      	ldr	r2, [pc, #624]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7ff f9aa 	bl	8002548 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f9a6 	bl	8002548 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e284      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2a8>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff f996 	bl	8002548 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff f992 	bl	8002548 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e270      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d0>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x310>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d119      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	4b7c      	ldr	r3, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x328>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e24d      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4973      	ldr	r1, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	e040      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d023      	beq.n	80032de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7ff f951 	bl	8002548 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7ff f94d 	bl	8002548 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e22b      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	495f      	ldr	r1, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5c      	ldr	r2, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7ff f92d 	bl	8002548 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7ff f929 	bl	8002548 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e207      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03c      	beq.n	8003396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003324:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	4a4a      	ldr	r2, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff f908 	bl	8002548 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff f904 	bl	8002548 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1e2      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x3ec>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7ff f8eb 	bl	8002548 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7ff f8e7 	bl	8002548 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1c5      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a6 	beq.w	80034f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	6593      	str	r3, [r2, #88]	; 0x58
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7ff f8ae 	bl	8002548 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff f8aa 	bl	8002548 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e188      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d8>
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003426:	e029      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b05      	cmp	r3, #5
 800342e:	d115      	bne.n	800345c <HAL_RCC_OscConfig+0x50c>
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a07      	ldr	r2, [pc, #28]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
 800345c:	4b91      	ldr	r3, [pc, #580]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a90      	ldr	r2, [pc, #576]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	4b8d      	ldr	r3, [pc, #564]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a8c      	ldr	r2, [pc, #560]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff f860 	bl	8002548 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7ff f85c 	bl	8002548 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e138      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b80      	ldr	r3, [pc, #512]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ed      	beq.n	800348c <HAL_RCC_OscConfig+0x53c>
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7ff f849 	bl	8002548 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7ff f845 	bl	8002548 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e121      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	4b74      	ldr	r3, [pc, #464]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ed      	bne.n	80034ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a6e      	ldr	r2, [pc, #440]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 810c 	beq.w	8003712 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f040 80d4 	bne.w	80036ac <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003504:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d130      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	3b01      	subs	r3, #1
 8003524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d127      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11f      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003544:	2a07      	cmp	r2, #7
 8003546:	bf14      	ite	ne
 8003548:	2201      	movne	r2, #1
 800354a:	2200      	moveq	r2, #0
 800354c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d109      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d06e      	beq.n	8003658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d069      	beq.n	8003654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003580:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0bb      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a8:	f7fe ffce 	bl	8002548 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe ffca 	bl	8002548 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0a8      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_OscConfig+0x758>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035de:	3a01      	subs	r2, #1
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035e8:	0212      	lsls	r2, r2, #8
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	0652      	lsls	r2, r2, #25
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003608:	0912      	lsrs	r2, r2, #4
 800360a:	0452      	lsls	r2, r2, #17
 800360c:	430a      	orrs	r2, r1
 800360e:	4925      	ldr	r1, [pc, #148]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003614:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800362c:	f7fe ff8c 	bl	8002548 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe ff88 	bl	8002548 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e066      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003652:	e05e      	b.n	8003712 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e05d      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d156      	bne.n	8003712 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367c:	f7fe ff64 	bl	8002548 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe ff60 	bl	8002548 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e03e      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_OscConfig+0x754>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x734>
 80036a2:	e036      	b.n	8003712 <HAL_RCC_OscConfig+0x7c2>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d02d      	beq.n	800370e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036d0:	f023 0303 	bic.w	r3, r3, #3
 80036d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 80036dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe ff2f 	bl	8002548 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe ff2b 	bl	8002548 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e009      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x7cc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x79e>
 800370c:	e001      	b.n	8003712 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0c8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4961      	ldr	r1, [pc, #388]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b5f      	ldr	r3, [pc, #380]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d04c      	beq.n	800380a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003778:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d121      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e09e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e092      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a8:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e086      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e07e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 0203 	bic.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	493f      	ldr	r1, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037da:	f7fe feb5 	bl	8002548 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fe feb1 	bl	8002548 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e066      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 020c 	and.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	429a      	cmp	r2, r3
 8003808:	d1eb      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	492c      	ldr	r1, [pc, #176]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d210      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4924      	ldr	r1, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e036      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4918      	ldr	r1, [pc, #96]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003882:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4910      	ldr	r1, [pc, #64]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003896:	f000 f825 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490c      	ldr	r1, [pc, #48]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fdf4 	bl	80024a8 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c4:	7afb      	ldrb	r3, [r7, #11]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08009f18 	.word	0x08009f18
 80038dc:	20000014 	.word	0x20000014
 80038e0:	20000018 	.word	0x20000018

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d121      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d11e      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003940:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003954:	e00a      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d102      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d101      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800396a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d134      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0xa6>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d003      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0xac>
 8003988:	e005      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800398c:	617b      	str	r3, [r7, #20]
      break;
 800398e:	e005      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003992:	617b      	str	r3, [r7, #20]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	617b      	str	r3, [r7, #20]
      break;
 800399a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	0e5b      	lsrs	r3, r3, #25
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	3301      	adds	r3, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039dc:	69bb      	ldr	r3, [r7, #24]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08009f30 	.word	0x08009f30
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000014 	.word	0x20000014

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08009f28 	.word	0x08009f28

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a44:	f7ff ffda 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4904      	ldr	r1, [pc, #16]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08009f28 	.word	0x08009f28

08003a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a84:	f7ff fa00 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003a88:	6178      	str	r0, [r7, #20]
 8003a8a:	e014      	b.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	; 0x58
 8003a98:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa4:	f7ff f9f0 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d10b      	bne.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d919      	bls.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ac8:	d902      	bls.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aca:	2302      	movs	r3, #2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	e013      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e010      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d902      	bls.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003adc:	2303      	movs	r3, #3
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e00a      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d102      	bne.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae8:	2302      	movs	r3, #2
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e004      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b70      	cmp	r3, #112	; 0x70
 8003af2:	d101      	bne.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af4:	2301      	movs	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 0207 	bic.w	r2, r3, #7
 8003b00:	4909      	ldr	r1, [pc, #36]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d001      	beq.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40022000 	.word	0x40022000

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b34:	2300      	movs	r3, #0
 8003b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d041      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b56:	d824      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b62:	d81e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b70:	4b86      	ldr	r3, [pc, #536]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a85      	ldr	r2, [pc, #532]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fabb 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8e:	e00c      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3320      	adds	r3, #32
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fba6 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbe:	4973      	ldr	r1, [pc, #460]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d041      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be0:	d02a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003be2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be6:	d824      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bec:	d008      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf2:	d81e      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfc:	d010      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bfe:	e018      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c00:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a61      	ldr	r2, [pc, #388]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c0c:	e015      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fa73 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1e:	e00c      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3320      	adds	r3, #32
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb5e 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	74fb      	strb	r3, [r7, #19]
      break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c40:	4b52      	ldr	r3, [pc, #328]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c4e:	494f      	ldr	r1, [pc, #316]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c56:	e001      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a0 	beq.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	4a40      	ldr	r2, [pc, #256]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cac:	f7fe fc4c 	bl	8002548 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fe fc48 	bl	8002548 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d902      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ef      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d15c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cda:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d019      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe fc07 	bl	8002548 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3c:	e00b      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe fc03 	bl	8002548 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d902      	bls.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	74fb      	strb	r3, [r7, #19]
            break;
 8003d54:	e006      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ec      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7a:	4904      	ldr	r1, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d82:	e009      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d98:	7c7b      	ldrb	r3, [r7, #17]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9e:	4b9e      	ldr	r3, [pc, #632]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	4a9d      	ldr	r2, [pc, #628]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db6:	4b98      	ldr	r3, [pc, #608]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f023 0203 	bic.w	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	4994      	ldr	r1, [pc, #592]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd8:	4b8f      	ldr	r3, [pc, #572]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f023 020c 	bic.w	r2, r3, #12
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	498c      	ldr	r1, [pc, #560]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfa:	4b87      	ldr	r3, [pc, #540]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	4983      	ldr	r1, [pc, #524]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	497b      	ldr	r1, [pc, #492]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	4972      	ldr	r1, [pc, #456]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e60:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	496a      	ldr	r1, [pc, #424]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	4961      	ldr	r1, [pc, #388]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea4:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	4959      	ldr	r1, [pc, #356]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec6:	4b54      	ldr	r3, [pc, #336]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed4:	4950      	ldr	r1, [pc, #320]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	4948      	ldr	r1, [pc, #288]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0a:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	493f      	ldr	r1, [pc, #252]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d028      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	4937      	ldr	r1, [pc, #220]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a31      	ldr	r2, [pc, #196]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f56:	60d3      	str	r3, [r2, #12]
 8003f58:	e011      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f8c8 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d028      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	491f      	ldr	r1, [pc, #124]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb4:	60d3      	str	r3, [r2, #12]
 8003fb6:	e011      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f899 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d02b      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004006:	d109      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a02      	ldr	r2, [pc, #8]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	e014      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004024:	d10c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f867 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02f      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405a:	4928      	ldr	r1, [pc, #160]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406a:	d10d      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f844 	bl	8004100 <RCCEx_PLLSAI1_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	74bb      	strb	r3, [r7, #18]
 8004086:	e011      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004090:	d10c      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3320      	adds	r3, #32
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f925 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c6:	490d      	ldr	r1, [pc, #52]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ea:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000

08004100 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800410e:	4b75      	ldr	r3, [pc, #468]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d018      	beq.n	800414c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800411a:	4b72      	ldr	r3, [pc, #456]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0203 	and.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d10d      	bne.n	8004146 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
       ||
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004132:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
       ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d047      	beq.n	80041d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	e044      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d018      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x86>
 8004154:	2b03      	cmp	r3, #3
 8004156:	d825      	bhi.n	80041a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004158:	2b01      	cmp	r3, #1
 800415a:	d002      	beq.n	8004162 <RCCEx_PLLSAI1_Config+0x62>
 800415c:	2b02      	cmp	r3, #2
 800415e:	d009      	beq.n	8004174 <RCCEx_PLLSAI1_Config+0x74>
 8004160:	e020      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004162:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11d      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004172:	e01a      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004174:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d116      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004184:	e013      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004192:	4b54      	ldr	r3, [pc, #336]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a2:	e006      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      break;
 80041a8:	e004      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ba:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	430b      	orrs	r3, r1
 80041d0:	4944      	ldr	r1, [pc, #272]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d17d      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041dc:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e8:	f7fe f9ae 	bl	8002548 <HAL_GetTick>
 80041ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ee:	e009      	b.n	8004204 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f0:	f7fe f9aa 	bl	8002548 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d902      	bls.n	8004204 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	73fb      	strb	r3, [r7, #15]
        break;
 8004202:	e005      	b.n	8004210 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ef      	bne.n	80041f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d160      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d111      	bne.n	8004240 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421c:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	0211      	lsls	r1, r2, #8
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	0912      	lsrs	r2, r2, #4
 8004234:	0452      	lsls	r2, r2, #17
 8004236:	430a      	orrs	r2, r1
 8004238:	492a      	ldr	r1, [pc, #168]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	610b      	str	r3, [r1, #16]
 800423e:	e027      	b.n	8004290 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d112      	bne.n	800426c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800424e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6892      	ldr	r2, [r2, #8]
 8004256:	0211      	lsls	r1, r2, #8
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6912      	ldr	r2, [r2, #16]
 800425c:	0852      	lsrs	r2, r2, #1
 800425e:	3a01      	subs	r2, #1
 8004260:	0552      	lsls	r2, r2, #21
 8004262:	430a      	orrs	r2, r1
 8004264:	491f      	ldr	r1, [pc, #124]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	610b      	str	r3, [r1, #16]
 800426a:	e011      	b.n	8004290 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6952      	ldr	r2, [r2, #20]
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	430a      	orrs	r2, r1
 800428a:	4916      	ldr	r1, [pc, #88]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f954 	bl	8002548 <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a2:	e009      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a4:	f7fe f950 	bl	8002548 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d902      	bls.n	80042b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	73fb      	strb	r3, [r7, #15]
          break;
 80042b6:	e005      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	4904      	ldr	r1, [pc, #16]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f6:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d10d      	bne.n	800432e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
       ||
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800431a:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
       ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d047      	beq.n	80043be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	e044      	b.n	80043be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d018      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x86>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d825      	bhi.n	800438c <RCCEx_PLLSAI2_Config+0xa4>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d002      	beq.n	800434a <RCCEx_PLLSAI2_Config+0x62>
 8004344:	2b02      	cmp	r3, #2
 8004346:	d009      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x74>
 8004348:	e020      	b.n	800438c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800434a:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11d      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435a:	e01a      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800435c:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e013      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436e:	4b4c      	ldr	r3, [pc, #304]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800437a:	4b49      	ldr	r3, [pc, #292]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800438a:	e006      	b.n	800439a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e004      	b.n	800439c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800439a:	bf00      	nop
    }

    if(status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10d      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a2:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	430b      	orrs	r3, r1
 80043b8:	4939      	ldr	r1, [pc, #228]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d167      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fe f8ba 	bl	8002548 <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d6:	e009      	b.n	80043ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d8:	f7fe f8b6 	bl	8002548 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ea:	e005      	b.n	80043f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ec:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ef      	bne.n	80043d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d14a      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	0211      	lsls	r1, r2, #8
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68d2      	ldr	r2, [r2, #12]
 800441a:	0912      	lsrs	r2, r2, #4
 800441c:	0452      	lsls	r2, r2, #17
 800441e:	430a      	orrs	r2, r1
 8004420:	491f      	ldr	r1, [pc, #124]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	614b      	str	r3, [r1, #20]
 8004426:	e011      	b.n	800444c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004430:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	0211      	lsls	r1, r2, #8
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6912      	ldr	r2, [r2, #16]
 800443e:	0852      	lsrs	r2, r2, #1
 8004440:	3a01      	subs	r2, #1
 8004442:	0652      	lsls	r2, r2, #25
 8004444:	430a      	orrs	r2, r1
 8004446:	4916      	ldr	r1, [pc, #88]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004456:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fe f876 	bl	8002548 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445e:	e009      	b.n	8004474 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004460:	f7fe f872 	bl	8002548 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d902      	bls.n	8004474 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	73fb      	strb	r3, [r7, #15]
          break;
 8004472:	e005      	b.n	8004480 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ef      	beq.n	8004460 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4904      	ldr	r1, [pc, #16]	; (80044a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000

080044a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e095      	b.n	80045e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	e005      	b.n	80044dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f877 	bl	80045ea <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800451c:	d902      	bls.n	8004524 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e002      	b.n	800452a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004528:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004532:	d007      	beq.n	8004544 <HAL_SPI_Init+0xa0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	ea42 0103 	orr.w	r1, r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 0204 	and.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800460c:	2301      	movs	r3, #1
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x26>
 8004620:	2302      	movs	r3, #2
 8004622:	e1fb      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x41e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800462c:	f7fd ff8c 	bl	8002548 <HAL_GetTick>
 8004630:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004638:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004640:	887b      	ldrh	r3, [r7, #2]
 8004642:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004648:	7efb      	ldrb	r3, [r7, #27]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d00e      	beq.n	800466c <HAL_SPI_TransmitReceive+0x6e>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004654:	d106      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x66>
 800465e:	7efb      	ldrb	r3, [r7, #27]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d003      	beq.n	800466c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800466a:	e1cd      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_SPI_TransmitReceive+0x80>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_SPI_TransmitReceive+0x80>
 8004678:	887b      	ldrh	r3, [r7, #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004684:	e1c0      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b04      	cmp	r3, #4
 8004690:	d003      	beq.n	800469a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2205      	movs	r2, #5
 8004696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	887a      	ldrh	r2, [r7, #2]
 80046aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	887a      	ldrh	r2, [r7, #2]
 80046b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	887a      	ldrh	r2, [r7, #2]
 80046c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046dc:	d802      	bhi.n	80046e4 <HAL_SPI_TransmitReceive+0xe6>
 80046de:	8a3b      	ldrh	r3, [r7, #16]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d908      	bls.n	80046f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	e007      	b.n	8004706 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004704:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d007      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800472c:	d97c      	bls.n	8004828 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_TransmitReceive+0x13e>
 8004736:	8a7b      	ldrh	r3, [r7, #18]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d169      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004760:	e056      	b.n	8004810 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b02      	cmp	r3, #2
 800476e:	d11b      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x1aa>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x1aa>
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	2b01      	cmp	r3, #1
 800477e:	d113      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	1c9a      	adds	r2, r3, #2
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11c      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x1f2>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	b292      	uxth	r2, r2
 80047ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	1c9a      	adds	r2, r3, #2
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ec:	2301      	movs	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047f0:	f7fd feaa 	bl	8002548 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d807      	bhi.n	8004810 <HAL_SPI_TransmitReceive+0x212>
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d003      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800480e:	e0fb      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1a3      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x164>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d19d      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x164>
 8004826:	e0df      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x23a>
 8004830:	8a7b      	ldrh	r3, [r7, #18]
 8004832:	2b01      	cmp	r3, #1
 8004834:	f040 80cb 	bne.w	80049ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d912      	bls.n	8004868 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b02      	subs	r3, #2
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004866:	e0b2      	b.n	80049ce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488e:	e09e      	b.n	80049ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d134      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x30a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02f      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x30a>
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d12c      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d912      	bls.n	80048de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b02      	subs	r3, #2
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048dc:	e012      	b.n	8004904 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d148      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x3aa>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d042      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d923      	bls.n	8004976 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	b292      	uxth	r2, r2
 800493a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d81f      	bhi.n	80049a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	e016      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f103 020c 	add.w	r2, r3, #12
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a4:	2301      	movs	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a8:	f7fd fdce 	bl	8002548 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d803      	bhi.n	80049c0 <HAL_SPI_TransmitReceive+0x3c2>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x3c8>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049cc:	e01c      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f47f af5b 	bne.w	8004890 <HAL_SPI_TransmitReceive+0x292>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f47f af54 	bne.w	8004890 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f945 	bl	8004c7c <SPI_EndRxTxTransaction>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
 8004a04:	e000      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004a06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3728      	adds	r7, #40	; 0x28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a32:	b2db      	uxtb	r3, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a50:	f7fd fd7a 	bl	8002548 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a60:	f7fd fd72 	bl	8002548 <HAL_GetTick>
 8004a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a66:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	015b      	lsls	r3, r3, #5
 8004a6c:	0d1b      	lsrs	r3, r3, #20
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a76:	e054      	b.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d050      	beq.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a80:	f7fd fd62 	bl	8002548 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d902      	bls.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d13d      	bne.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aae:	d111      	bne.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab8:	d004      	beq.n	8004ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac2:	d107      	bne.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004adc:	d10f      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e017      	b.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	bf0c      	ite	eq
 8004b32:	2301      	moveq	r3, #1
 8004b34:	2300      	movne	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d19b      	bne.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000014 	.word	0x20000014

08004b50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b62:	f7fd fcf1 	bl	8002548 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b72:	f7fd fce9 	bl	8002548 <HAL_GetTick>
 8004b76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b80:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00da      	lsls	r2, r3, #3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	0d1b      	lsrs	r3, r3, #20
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b98:	e060      	b.n	8004c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ba0:	d107      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d050      	beq.n	8004c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bba:	f7fd fcc5 	bl	8002548 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d902      	bls.n	8004bd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d13d      	bne.n	8004c4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be8:	d111      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf2:	d004      	beq.n	8004bfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d107      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c16:	d10f      	bne.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e010      	b.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d196      	bne.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000014 	.word	0x20000014

08004c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff5b 	bl	8004b50 <SPI_WaitFifoStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e027      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff fec0 	bl	8004a40 <SPI_WaitFlagStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e014      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ff34 	bl	8004b50 <SPI_WaitFifoStateUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e000      	b.n	8004d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e040      	b.n	8004d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f83a 	bl	8004da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8ca 	bl	8004ee0 <UART_SetConfig>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb76 	bl	8005450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fbfd 	bl	8005594 <UART_CheckIdleState>
 8004d9a:	4603      	mov	r3, r0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	f040 8082 	bne.w	8004ed6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Transmit+0x26>
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07a      	b.n	8004ed8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Transmit+0x38>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e073      	b.n	8004ed8 <HAL_UART_Transmit+0x120>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2221      	movs	r2, #33	; 0x21
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e06:	f7fd fb9f 	bl	8002548 <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d108      	bne.n	8004e38 <HAL_UART_Transmit+0x80>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e003      	b.n	8004e40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e48:	e02d      	b.n	8004ea6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fbe6 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e039      	b.n	8004ed8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e76:	b292      	uxth	r2, r2
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e008      	b.n	8004e94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3301      	adds	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1cb      	bne.n	8004e4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2140      	movs	r1, #64	; 0x40
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fbb2 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e005      	b.n	8004ed8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4ba4      	ldr	r3, [pc, #656]	; (80051a0 <UART_SetConfig+0x2c0>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a99      	ldr	r2, [pc, #612]	; (80051a4 <UART_SetConfig+0x2c4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a90      	ldr	r2, [pc, #576]	; (80051a8 <UART_SetConfig+0x2c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d126      	bne.n	8004fb8 <UART_SetConfig+0xd8>
 8004f6a:	4b90      	ldr	r3, [pc, #576]	; (80051ac <UART_SetConfig+0x2cc>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d81b      	bhi.n	8004fb0 <UART_SetConfig+0xd0>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0xa0>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e116      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9e:	e112      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa6:	e10e      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fae:	e10a      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e106      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <UART_SetConfig+0x2d0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d138      	bne.n	8005034 <UART_SetConfig+0x154>
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	; (80051ac <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d82d      	bhi.n	800502c <UART_SetConfig+0x14c>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0xf8>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	0800502d 	.word	0x0800502d
 8005004:	0800502d 	.word	0x0800502d
 8005008:	08005025 	.word	0x08005025
 800500c:	2300      	movs	r3, #0
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e0d8      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005014:	2302      	movs	r3, #2
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501a:	e0d4      	b.n	80051c6 <UART_SetConfig+0x2e6>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005022:	e0d0      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e0cc      	b.n	80051c6 <UART_SetConfig+0x2e6>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e0c8      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5e      	ldr	r2, [pc, #376]	; (80051b4 <UART_SetConfig+0x2d4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d125      	bne.n	800508a <UART_SetConfig+0x1aa>
 800503e:	4b5b      	ldr	r3, [pc, #364]	; (80051ac <UART_SetConfig+0x2cc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d016      	beq.n	800507a <UART_SetConfig+0x19a>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d818      	bhi.n	8005082 <UART_SetConfig+0x1a2>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d00a      	beq.n	800506a <UART_SetConfig+0x18a>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d814      	bhi.n	8005082 <UART_SetConfig+0x1a2>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <UART_SetConfig+0x182>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d008      	beq.n	8005072 <UART_SetConfig+0x192>
 8005060:	e00f      	b.n	8005082 <UART_SetConfig+0x1a2>
 8005062:	2300      	movs	r3, #0
 8005064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005068:	e0ad      	b.n	80051c6 <UART_SetConfig+0x2e6>
 800506a:	2302      	movs	r3, #2
 800506c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005070:	e0a9      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005072:	2304      	movs	r3, #4
 8005074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005078:	e0a5      	b.n	80051c6 <UART_SetConfig+0x2e6>
 800507a:	2308      	movs	r3, #8
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005080:	e0a1      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005082:	2310      	movs	r3, #16
 8005084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005088:	e09d      	b.n	80051c6 <UART_SetConfig+0x2e6>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a4a      	ldr	r2, [pc, #296]	; (80051b8 <UART_SetConfig+0x2d8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d125      	bne.n	80050e0 <UART_SetConfig+0x200>
 8005094:	4b45      	ldr	r3, [pc, #276]	; (80051ac <UART_SetConfig+0x2cc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800509e:	2bc0      	cmp	r3, #192	; 0xc0
 80050a0:	d016      	beq.n	80050d0 <UART_SetConfig+0x1f0>
 80050a2:	2bc0      	cmp	r3, #192	; 0xc0
 80050a4:	d818      	bhi.n	80050d8 <UART_SetConfig+0x1f8>
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d00a      	beq.n	80050c0 <UART_SetConfig+0x1e0>
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d814      	bhi.n	80050d8 <UART_SetConfig+0x1f8>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <UART_SetConfig+0x1d8>
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d008      	beq.n	80050c8 <UART_SetConfig+0x1e8>
 80050b6:	e00f      	b.n	80050d8 <UART_SetConfig+0x1f8>
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e082      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e07e      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e07a      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e076      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e072      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a35      	ldr	r2, [pc, #212]	; (80051bc <UART_SetConfig+0x2dc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d12a      	bne.n	8005140 <UART_SetConfig+0x260>
 80050ea:	4b30      	ldr	r3, [pc, #192]	; (80051ac <UART_SetConfig+0x2cc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f8:	d01a      	beq.n	8005130 <UART_SetConfig+0x250>
 80050fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fe:	d81b      	bhi.n	8005138 <UART_SetConfig+0x258>
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d00c      	beq.n	8005120 <UART_SetConfig+0x240>
 8005106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510a:	d815      	bhi.n	8005138 <UART_SetConfig+0x258>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <UART_SetConfig+0x238>
 8005110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005114:	d008      	beq.n	8005128 <UART_SetConfig+0x248>
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x258>
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e052      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e04e      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e04a      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e046      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e042      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <UART_SetConfig+0x2c4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d13a      	bne.n	80051c0 <UART_SetConfig+0x2e0>
 800514a:	4b18      	ldr	r3, [pc, #96]	; (80051ac <UART_SetConfig+0x2cc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005158:	d01a      	beq.n	8005190 <UART_SetConfig+0x2b0>
 800515a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800515e:	d81b      	bhi.n	8005198 <UART_SetConfig+0x2b8>
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005164:	d00c      	beq.n	8005180 <UART_SetConfig+0x2a0>
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d815      	bhi.n	8005198 <UART_SetConfig+0x2b8>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <UART_SetConfig+0x298>
 8005170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005174:	d008      	beq.n	8005188 <UART_SetConfig+0x2a8>
 8005176:	e00f      	b.n	8005198 <UART_SetConfig+0x2b8>
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e022      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e01e      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e01a      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e016      	b.n	80051c6 <UART_SetConfig+0x2e6>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e012      	b.n	80051c6 <UART_SetConfig+0x2e6>
 80051a0:	efff69f3 	.word	0xefff69f3
 80051a4:	40008000 	.word	0x40008000
 80051a8:	40013800 	.word	0x40013800
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40004400 	.word	0x40004400
 80051b4:	40004800 	.word	0x40004800
 80051b8:	40004c00 	.word	0x40004c00
 80051bc:	40005000 	.word	0x40005000
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a9f      	ldr	r2, [pc, #636]	; (8005448 <UART_SetConfig+0x568>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d17a      	bne.n	80052c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d824      	bhi.n	8005222 <UART_SetConfig+0x342>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x300>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005205 	.word	0x08005205
 80051e4:	08005223 	.word	0x08005223
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005213 	.word	0x08005213
 80051f4:	08005223 	.word	0x08005223
 80051f8:	08005223 	.word	0x08005223
 80051fc:	08005223 	.word	0x08005223
 8005200:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe fc06 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8005208:	61f8      	str	r0, [r7, #28]
        break;
 800520a:	e010      	b.n	800522e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b8f      	ldr	r3, [pc, #572]	; (800544c <UART_SetConfig+0x56c>)
 800520e:	61fb      	str	r3, [r7, #28]
        break;
 8005210:	e00d      	b.n	800522e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fb67 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8005216:	61f8      	str	r0, [r7, #28]
        break;
 8005218:	e009      	b.n	800522e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	61fb      	str	r3, [r7, #28]
        break;
 8005220:	e005      	b.n	800522e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800522c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80fb 	beq.w	800542c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	429a      	cmp	r2, r3
 8005244:	d305      	bcc.n	8005252 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d903      	bls.n	800525a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005258:	e0e8      	b.n	800542c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2200      	movs	r2, #0
 800525e:	461c      	mov	r4, r3
 8005260:	4615      	mov	r5, r2
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	022b      	lsls	r3, r5, #8
 800526c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005270:	0222      	lsls	r2, r4, #8
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	6849      	ldr	r1, [r1, #4]
 8005276:	0849      	lsrs	r1, r1, #1
 8005278:	2000      	movs	r0, #0
 800527a:	4688      	mov	r8, r1
 800527c:	4681      	mov	r9, r0
 800527e:	eb12 0a08 	adds.w	sl, r2, r8
 8005282:	eb43 0b09 	adc.w	fp, r3, r9
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005294:	4650      	mov	r0, sl
 8005296:	4659      	mov	r1, fp
 8005298:	f7fa ffea 	bl	8000270 <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052aa:	d308      	bcc.n	80052be <UART_SetConfig+0x3de>
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b2:	d204      	bcs.n	80052be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	e0b6      	b.n	800542c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052c4:	e0b2      	b.n	800542c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ce:	d15e      	bne.n	800538e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d828      	bhi.n	800532a <UART_SetConfig+0x44a>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x400>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532b 	.word	0x0800532b
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800532b 	.word	0x0800532b
 80052f8:	0800532b 	.word	0x0800532b
 80052fc:	0800532b 	.word	0x0800532b
 8005300:	08005323 	.word	0x08005323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fe fb86 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8005308:	61f8      	str	r0, [r7, #28]
        break;
 800530a:	e014      	b.n	8005336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fe fb98 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8005310:	61f8      	str	r0, [r7, #28]
        break;
 8005312:	e010      	b.n	8005336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005314:	4b4d      	ldr	r3, [pc, #308]	; (800544c <UART_SetConfig+0x56c>)
 8005316:	61fb      	str	r3, [r7, #28]
        break;
 8005318:	e00d      	b.n	8005336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7fe fae3 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800531e:	61f8      	str	r0, [r7, #28]
        break;
 8005320:	e009      	b.n	8005336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	61fb      	str	r3, [r7, #28]
        break;
 8005328:	e005      	b.n	8005336 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d077      	beq.n	800542c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	005a      	lsls	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	441a      	add	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b0f      	cmp	r3, #15
 8005356:	d916      	bls.n	8005386 <UART_SetConfig+0x4a6>
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535e:	d212      	bcs.n	8005386 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f023 030f 	bic.w	r3, r3, #15
 8005368:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	b29b      	uxth	r3, r3
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	b29a      	uxth	r2, r3
 8005376:	8afb      	ldrh	r3, [r7, #22]
 8005378:	4313      	orrs	r3, r2
 800537a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	8afa      	ldrh	r2, [r7, #22]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e052      	b.n	800542c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800538c:	e04e      	b.n	800542c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800538e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005392:	2b08      	cmp	r3, #8
 8005394:	d827      	bhi.n	80053e6 <UART_SetConfig+0x506>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x4bc>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fe fb28 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80053c4:	61f8      	str	r0, [r7, #28]
        break;
 80053c6:	e014      	b.n	80053f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fb3a 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80053cc:	61f8      	str	r0, [r7, #28]
        break;
 80053ce:	e010      	b.n	80053f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b1e      	ldr	r3, [pc, #120]	; (800544c <UART_SetConfig+0x56c>)
 80053d2:	61fb      	str	r3, [r7, #28]
        break;
 80053d4:	e00d      	b.n	80053f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7fe fa85 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80053da:	61f8      	str	r0, [r7, #28]
        break;
 80053dc:	e009      	b.n	80053f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e2:	61fb      	str	r3, [r7, #28]
        break;
 80053e4:	e005      	b.n	80053f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053f0:	bf00      	nop
    }

    if (pclk != 0U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	085a      	lsrs	r2, r3, #1
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d909      	bls.n	8005426 <UART_SetConfig+0x546>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d205      	bcs.n	8005426 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
 8005424:	e002      	b.n	800542c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005438:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	40008000 	.word	0x40008000
 800544c:	00f42400 	.word	0x00f42400

08005450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01a      	beq.n	8005566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554e:	d10a      	bne.n	8005566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a4:	f7fc ffd0 	bl	8002548 <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10e      	bne.n	80055d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f82d 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e023      	b.n	800561e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d10e      	bne.n	8005602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f817 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e00d      	b.n	800561e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b09c      	sub	sp, #112	; 0x70
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005636:	e0a5      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	f000 80a1 	beq.w	8005784 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc ff81 	bl	8002548 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <UART_WaitOnFlagUntilTimeout+0x32>
 8005652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13e      	bne.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566c:	667b      	str	r3, [r7, #100]	; 0x64
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005678:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800567c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	663b      	str	r3, [r7, #96]	; 0x60
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e067      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d04f      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f2:	d147      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
 800571e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	613b      	str	r3, [r7, #16]
   return(result);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	66bb      	str	r3, [r7, #104]	; 0x68
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005750:	623a      	str	r2, [r7, #32]
 8005752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	69f9      	ldr	r1, [r7, #28]
 8005756:	6a3a      	ldr	r2, [r7, #32]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	61bb      	str	r3, [r7, #24]
   return(result);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e010      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	f43f af4a 	beq.w	8005638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3770      	adds	r7, #112	; 0x70
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b0cc      	sub	sp, #304	; 0x130
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	4602      	mov	r2, r0
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80057be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80057c0:	f107 030c 	add.w	r3, r7, #12
 80057c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057e2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057ea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80057ee:	3301      	adds	r3, #1
 80057f0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80057f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057f8:	2218      	movs	r2, #24
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f003 fb43 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005802:	233f      	movs	r3, #63	; 0x3f
 8005804:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005808:	2385      	movs	r3, #133	; 0x85
 800580a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005816:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800581a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800581e:	f107 030b 	add.w	r3, r7, #11
 8005822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800582c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f002 fdb8 	bl	80083a8 <hci_send_req>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	da01      	bge.n	8005842 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800583e:	23ff      	movs	r3, #255	; 0xff
 8005840:	e00d      	b.n	800585e <aci_gap_set_io_capability+0xb0>
  if (status) {
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <aci_gap_set_io_capability+0xae>
    return status;
 8005850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005854:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	e000      	b.n	800585e <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b0cc      	sub	sp, #304	; 0x130
 800586c:	af00      	add	r7, sp, #0
 800586e:	4605      	mov	r5, r0
 8005870:	460c      	mov	r4, r1
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800587e:	462a      	mov	r2, r5
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800588a:	4622      	mov	r2, r4
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005896:	4602      	mov	r2, r0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a2:	460a      	mov	r2, r1
 80058a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80058c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058c8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058d0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058d4:	3301      	adds	r3, #1
 80058d6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80058da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80058ea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058ee:	3301      	adds	r3, #1
 80058f0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 80058f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058fc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005904:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005908:	3301      	adds	r3, #1
 800590a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005916:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800591e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005922:	3301      	adds	r3, #1
 8005924:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005930:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005932:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005936:	3301      	adds	r3, #1
 8005938:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800593c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005940:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005944:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005946:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800594a:	3301      	adds	r3, #1
 800594c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005958:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800595a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800595e:	3301      	adds	r3, #1
 8005960:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800596c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005970:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005974:	3304      	adds	r3, #4
 8005976:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800597a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005982:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005984:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005988:	3301      	adds	r3, #1
 800598a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800598e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005992:	2218      	movs	r2, #24
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f003 fa76 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 800599c:	233f      	movs	r3, #63	; 0x3f
 800599e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80059a2:	2386      	movs	r3, #134	; 0x86
 80059a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059b0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80059b8:	f107 030b 	add.w	r3, r7, #11
 80059bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80059c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f002 fceb 	bl	80083a8 <hci_send_req>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da01      	bge.n	80059dc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80059d8:	23ff      	movs	r3, #255	; 0xff
 80059da:	e00d      	b.n	80059f8 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 80059ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ee:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	e000      	b.n	80059f8 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bdb0      	pop	{r4, r5, r7, pc}

08005a02 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005a02:	b590      	push	{r4, r7, lr}
 8005a04:	b0cf      	sub	sp, #316	; 0x13c
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4608      	mov	r0, r1
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a12:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a1c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005a20:	4622      	mov	r2, r4
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a28:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a34:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005a38:	460a      	mov	r2, r1
 8005a3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005a44:	f107 030c 	add.w	r3, r7, #12
 8005a48:	2207      	movs	r2, #7
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f003 fa1b 	bl	8008e88 <memset>
  uint8_t index_input = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a5c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a60:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a68:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a76:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a7a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005a82:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a86:	3301      	adds	r3, #1
 8005a88:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a94:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005a9c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005aa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005aaa:	2218      	movs	r2, #24
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f003 f9ea 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005ab4:	233f      	movs	r3, #63	; 0x3f
 8005ab6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005aba:	238a      	movs	r3, #138	; 0x8a
 8005abc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005ac8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005ad8:	2307      	movs	r3, #7
 8005ada:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005ade:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f002 fc5f 	bl	80083a8 <hci_send_req>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da01      	bge.n	8005af4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005af0:	23ff      	movs	r3, #255	; 0xff
 8005af2:	e02e      	b.n	8005b52 <aci_gap_init+0x150>
  if (resp.Status) {
 8005af4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <aci_gap_init+0x10c>
    return resp.Status;
 8005b02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	e021      	b.n	8005b52 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b30:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005b3a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b44:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	2218      	movs	r2, #24
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f003 f98a 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005b74:	233f      	movs	r3, #63	; 0x3f
 8005b76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8005b78:	2394      	movs	r3, #148	; 0x94
 8005b7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b7c:	1dfb      	adds	r3, r7, #7
 8005b7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005b84:	f107 0308 	add.w	r3, r7, #8
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 fc0c 	bl	80083a8 <hci_send_req>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da01      	bge.n	8005b9a <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005b96:	23ff      	movs	r3, #255	; 0xff
 8005b98:	e005      	b.n	8005ba6 <aci_gap_clear_security_db+0x4a>
  if (status) {
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <aci_gap_clear_security_db+0x48>
    return status;
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	e000      	b.n	8005ba6 <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005bae:	b5b0      	push	{r4, r5, r7, lr}
 8005bb0:	b0cc      	sub	sp, #304	; 0x130
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005bdc:	4602      	mov	r2, r0
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005be8:	460a      	mov	r2, r1
 8005bea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005bec:	f107 030c 	add.w	r3, r7, #12
 8005bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c12:	8812      	ldrh	r2, [r2, #0]
 8005c14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005c16:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c28:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005c30:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c34:	3302      	adds	r3, #2
 8005c36:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c42:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005c4a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c5c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005c64:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c72:	2218      	movs	r2, #24
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f003 f906 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005c7c:	233f      	movs	r3, #63	; 0x3f
 8005c7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005c82:	2397      	movs	r3, #151	; 0x97
 8005c84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005c88:	230f      	movs	r3, #15
 8005c8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c96:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005c9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c9e:	f107 030b 	add.w	r3, r7, #11
 8005ca2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 fb78 	bl	80083a8 <hci_send_req>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da01      	bge.n	8005cc2 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005cbe:	23ff      	movs	r3, #255	; 0xff
 8005cc0:	e00d      	b.n	8005cde <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	e000      	b.n	8005cde <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bdb0      	pop	{r4, r5, r7, pc}

08005ce8 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b0cf      	sub	sp, #316	; 0x13c
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005cf8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d02:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005d06:	4622      	mov	r2, r4
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d12:	4602      	mov	r2, r0
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005d1e:	460a      	mov	r2, r1
 8005d20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005d22:	f107 0314 	add.w	r3, r7, #20
 8005d26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005d2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d2e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d4c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d50:	3302      	adds	r3, #2
 8005d52:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d5a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d5e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d62:	8812      	ldrh	r2, [r2, #0]
 8005d64:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005d66:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d78:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d80:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005d84:	3301      	adds	r3, #1
 8005d86:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d8e:	1d58      	adds	r0, r3, #5
 8005d90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005d98:	2206      	movs	r2, #6
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	f003 f8ee 	bl	8008f7c <memcpy>
  index_input += 6;
 8005da0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005da4:	3306      	adds	r3, #6
 8005da6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dae:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005db2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005db4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005db8:	3301      	adds	r3, #1
 8005dba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005dbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dc2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005dc6:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005dc8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005dcc:	3302      	adds	r3, #2
 8005dce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dd6:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005dda:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005ddc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005de0:	3302      	adds	r3, #2
 8005de2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dea:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005dee:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005df0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005df4:	3302      	adds	r3, #2
 8005df6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dfe:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005e02:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005e04:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e08:	3302      	adds	r3, #2
 8005e0a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e12:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005e16:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005e18:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005e22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e26:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005e2a:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005e2c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e30:	3302      	adds	r3, #2
 8005e32:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f003 f822 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005e44:	233f      	movs	r3, #63	; 0x3f
 8005e46:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005e4a:	239c      	movs	r3, #156	; 0x9c
 8005e4c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005e50:	230f      	movs	r3, #15
 8005e52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005e56:	f107 0314 	add.w	r3, r7, #20
 8005e5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005e5e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005e66:	f107 0313 	add.w	r3, r7, #19
 8005e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005e74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f002 fa94 	bl	80083a8 <hci_send_req>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da01      	bge.n	8005e8a <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005e86:	23ff      	movs	r3, #255	; 0xff
 8005e88:	e00d      	b.n	8005ea6 <aci_gap_create_connection+0x1be>
  if (status) {
 8005e8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e8e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <aci_gap_create_connection+0x1bc>
    return status;
 8005e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e9c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	e000      	b.n	8005ea6 <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd90      	pop	{r4, r7, pc}

08005eb0 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b0cc      	sub	sp, #304	; 0x130
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ec0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005ec2:	f107 030c 	add.w	r3, r7, #12
 8005ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ee4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005eec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005efa:	2218      	movs	r2, #24
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f002 ffc2 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005f04:	233f      	movs	r3, #63	; 0x3f
 8005f06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005f0a:	239d      	movs	r3, #157	; 0x9d
 8005f0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f18:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f20:	f107 030b 	add.w	r3, r7, #11
 8005f24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f002 fa37 	bl	80083a8 <hci_send_req>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da01      	bge.n	8005f44 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8005f40:	23ff      	movs	r3, #255	; 0xff
 8005f42:	e00d      	b.n	8005f60 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <aci_gap_terminate_gap_proc+0xae>
    return status;
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	e000      	b.n	8005f60 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b088      	sub	sp, #32
 8005f6e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f74:	f107 0308 	add.w	r3, r7, #8
 8005f78:	2218      	movs	r2, #24
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f002 ff83 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8005f82:	233f      	movs	r3, #63	; 0x3f
 8005f84:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005f86:	f240 1301 	movw	r3, #257	; 0x101
 8005f8a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005f8c:	1dfb      	adds	r3, r7, #7
 8005f8e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 fa04 	bl	80083a8 <hci_send_req>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da01      	bge.n	8005faa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005fa6:	23ff      	movs	r3, #255	; 0xff
 8005fa8:	e005      	b.n	8005fb6 <aci_gatt_init+0x4c>
  if (status) {
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <aci_gatt_init+0x4a>
    return status;
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	e000      	b.n	8005fb6 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005fbe:	b590      	push	{r4, r7, lr}
 8005fc0:	b0cf      	sub	sp, #316	; 0x13c
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005fca:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005fce:	6001      	str	r1, [r0, #0]
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fd8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005fdc:	4622      	mov	r2, r4
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fe4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005fe8:	4602      	mov	r2, r0
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ff0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006000:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006004:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d00a      	beq.n	8006024 <aci_gatt_add_service+0x66>
 800600e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006012:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d101      	bne.n	8006020 <aci_gatt_add_service+0x62>
 800601c:	2311      	movs	r3, #17
 800601e:	e002      	b.n	8006026 <aci_gatt_add_service+0x68>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <aci_gatt_add_service+0x68>
 8006024:	2303      	movs	r3, #3
 8006026:	f107 020c 	add.w	r2, r7, #12
 800602a:	4413      	add	r3, r2
 800602c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006030:	f107 0308 	add.w	r3, r7, #8
 8006034:	2203      	movs	r2, #3
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f002 ff25 	bl	8008e88 <memset>
  uint8_t index_input = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006044:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006048:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800604c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006054:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006058:	3301      	adds	r3, #1
 800605a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800605e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006062:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d002      	beq.n	8006072 <aci_gatt_add_service+0xb4>
 800606c:	2b02      	cmp	r3, #2
 800606e:	d004      	beq.n	800607a <aci_gatt_add_service+0xbc>
 8006070:	e007      	b.n	8006082 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8006072:	2302      	movs	r3, #2
 8006074:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006078:	e005      	b.n	8006086 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800607a:	2310      	movs	r3, #16
 800607c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006080:	e001      	b.n	8006086 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006082:	2347      	movs	r3, #71	; 0x47
 8006084:	e06c      	b.n	8006160 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8006086:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800608a:	1c58      	adds	r0, r3, #1
 800608c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006090:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006094:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006098:	6819      	ldr	r1, [r3, #0]
 800609a:	f002 ff6f 	bl	8008f7c <memcpy>
    index_input += size;
 800609e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80060a2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80060a6:	4413      	add	r3, r2
 80060a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060b4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80060bc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80060c0:	3301      	adds	r3, #1
 80060c2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80060c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80060ce:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80060d6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80060da:	3301      	adds	r3, #1
 80060dc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80060e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060e4:	2218      	movs	r2, #24
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fecd 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 80060ee:	233f      	movs	r3, #63	; 0x3f
 80060f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80060f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80060f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80060fc:	f107 030c 	add.w	r3, r7, #12
 8006100:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006104:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006108:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006114:	2303      	movs	r3, #3
 8006116:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800611a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f002 f941 	bl	80083a8 <hci_send_req>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	da01      	bge.n	8006130 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800612c:	23ff      	movs	r3, #255	; 0xff
 800612e:	e017      	b.n	8006160 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8006130:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <aci_gatt_add_service+0x18c>
    return resp.Status;
 800613e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	e00a      	b.n	8006160 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800614a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800615c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}

0800616a <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800616a:	b590      	push	{r4, r7, lr}
 800616c:	b0d1      	sub	sp, #324	; 0x144
 800616e:	af00      	add	r7, sp, #0
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006178:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800617c:	600a      	str	r2, [r1, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006184:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006188:	4622      	mov	r2, r4
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006190:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006194:	4602      	mov	r2, r0
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800619c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80061a0:	460a      	mov	r2, r1
 80061a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80061ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80061b0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d00a      	beq.n	80061d0 <aci_gatt_add_char+0x66>
 80061ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80061be:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d101      	bne.n	80061cc <aci_gatt_add_char+0x62>
 80061c8:	2313      	movs	r3, #19
 80061ca:	e002      	b.n	80061d2 <aci_gatt_add_char+0x68>
 80061cc:	2303      	movs	r3, #3
 80061ce:	e000      	b.n	80061d2 <aci_gatt_add_char+0x68>
 80061d0:	2305      	movs	r3, #5
 80061d2:	f107 0214 	add.w	r2, r7, #20
 80061d6:	4413      	add	r3, r2
 80061d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80061dc:	f107 0310 	add.w	r3, r7, #16
 80061e0:	2203      	movs	r2, #3
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 fe4f 	bl	8008e88 <memset>
  uint8_t index_input = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80061f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80061f4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80061f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80061fc:	8812      	ldrh	r2, [r2, #0]
 80061fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006200:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006204:	3302      	adds	r3, #2
 8006206:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800620a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800620e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006212:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800621a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800621e:	3301      	adds	r3, #1
 8006220:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8006224:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006228:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d002      	beq.n	8006238 <aci_gatt_add_char+0xce>
 8006232:	2b02      	cmp	r3, #2
 8006234:	d004      	beq.n	8006240 <aci_gatt_add_char+0xd6>
 8006236:	e007      	b.n	8006248 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8006238:	2302      	movs	r3, #2
 800623a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800623e:	e005      	b.n	800624c <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006240:	2310      	movs	r3, #16
 8006242:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006246:	e001      	b.n	800624c <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006248:	2347      	movs	r3, #71	; 0x47
 800624a:	e091      	b.n	8006370 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800624c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006250:	1cd8      	adds	r0, r3, #3
 8006252:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006256:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800625a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	f002 fe8c 	bl	8008f7c <memcpy>
    index_input += size;
 8006264:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006268:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800626c:	4413      	add	r3, r2
 800626e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006276:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800627a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800627e:	8812      	ldrh	r2, [r2, #0]
 8006280:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006282:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006286:	3302      	adds	r3, #2
 8006288:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800628c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006290:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006294:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006296:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800629a:	3301      	adds	r3, #1
 800629c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80062a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80062a8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80062aa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062ae:	3301      	adds	r3, #1
 80062b0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80062b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062b8:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80062bc:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80062be:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062c2:	3301      	adds	r3, #1
 80062c4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80062c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062cc:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80062d0:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80062d2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062d6:	3301      	adds	r3, #1
 80062d8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80062dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062e0:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80062e4:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80062e6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062ea:	3301      	adds	r3, #1
 80062ec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80062f4:	2218      	movs	r2, #24
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fdc5 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 80062fe:	233f      	movs	r3, #63	; 0x3f
 8006300:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006304:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006308:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006314:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006318:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800631c:	f107 0310 	add.w	r3, r7, #16
 8006320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006324:	2303      	movs	r3, #3
 8006326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800632a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f002 f839 	bl	80083a8 <hci_send_req>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	da01      	bge.n	8006340 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800633c:	23ff      	movs	r3, #255	; 0xff
 800633e:	e017      	b.n	8006370 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8006340:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800634e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	e00a      	b.n	8006370 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800635a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800635e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006362:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800636c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}

0800637a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800637a:	b5b0      	push	{r4, r5, r7, lr}
 800637c:	b0cc      	sub	sp, #304	; 0x130
 800637e:	af00      	add	r7, sp, #0
 8006380:	4605      	mov	r5, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006390:	462a      	mov	r2, r5
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639c:	4622      	mov	r2, r4
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80063a8:	4602      	mov	r2, r0
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80063b4:	460a      	mov	r2, r1
 80063b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80063b8:	f107 030c 	add.w	r3, r7, #12
 80063bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80063d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80063de:	8812      	ldrh	r2, [r2, #0]
 80063e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80063e6:	3302      	adds	r3, #2
 80063e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80063ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80063fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006400:	3302      	adds	r3, #2
 8006402:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800640e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006416:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800641a:	3301      	adds	r3, #1
 800641c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8006420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006424:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006428:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006430:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006434:	3301      	adds	r3, #1
 8006436:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800643a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643e:	1d98      	adds	r0, r3, #6
 8006440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006444:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006450:	f002 fd94 	bl	8008f7c <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800645c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	4413      	add	r3, r2
 8006464:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800646c:	2218      	movs	r2, #24
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f002 fd09 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8006476:	233f      	movs	r3, #63	; 0x3f
 8006478:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800647c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006480:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800648c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006494:	f107 030b 	add.w	r3, r7, #11
 8006498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800649c:	2301      	movs	r3, #1
 800649e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80064a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a6:	2100      	movs	r1, #0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 ff7d 	bl	80083a8 <hci_send_req>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da01      	bge.n	80064b8 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80064b4:	23ff      	movs	r3, #255	; 0xff
 80064b6:	e00d      	b.n	80064d4 <aci_gatt_update_char_value+0x15a>
  if (status) {
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <aci_gatt_update_char_value+0x158>
    return status;
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	e000      	b.n	80064d4 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}

080064de <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b0cc      	sub	sp, #304	; 0x130
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4602      	mov	r2, r0
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064ee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800650a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006512:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006516:	8812      	ldrh	r2, [r2, #0]
 8006518:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800651a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800651e:	3302      	adds	r3, #2
 8006520:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006528:	2218      	movs	r2, #24
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fcab 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8006532:	233f      	movs	r3, #63	; 0x3f
 8006534:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8006538:	f240 130b 	movw	r3, #267	; 0x10b
 800653c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8006540:	230f      	movs	r3, #15
 8006542:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800654e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006552:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006556:	f107 030b 	add.w	r3, r7, #11
 800655a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800655e:	2301      	movs	r3, #1
 8006560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f001 ff1c 	bl	80083a8 <hci_send_req>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	da01      	bge.n	800657a <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 8006576:	23ff      	movs	r3, #255	; 0xff
 8006578:	e00d      	b.n	8006596 <aci_gatt_exchange_config+0xb8>
  if (status) {
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <aci_gatt_exchange_config+0xb6>
    return status;
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	e000      	b.n	8006596 <aci_gatt_exchange_config+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80065a0:	b5b0      	push	{r4, r5, r7, lr}
 80065a2:	b0ce      	sub	sp, #312	; 0x138
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4605      	mov	r5, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065b2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065b6:	462a      	mov	r2, r5
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065c2:	4622      	mov	r2, r4
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ca:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80065ce:	4602      	mov	r2, r0
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065d6:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 80065da:	460a      	mov	r2, r1
 80065dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 80065e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80065f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006600:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006608:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800660c:	3302      	adds	r3, #2
 800660e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 8006612:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006616:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800661a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006622:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006626:	3302      	adds	r3, #2
 8006628:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 800662c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006630:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006634:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006638:	8812      	ldrh	r2, [r2, #0]
 800663a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800663c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006640:	3302      	adds	r3, #2
 8006642:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8006646:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800664a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800664e:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006656:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800665a:	3301      	adds	r3, #1
 800665c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 8006660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006664:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d002      	beq.n	8006674 <aci_gatt_disc_char_by_uuid+0xd4>
 800666e:	2b02      	cmp	r3, #2
 8006670:	d004      	beq.n	800667c <aci_gatt_disc_char_by_uuid+0xdc>
 8006672:	e007      	b.n	8006684 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 8006674:	2302      	movs	r3, #2
 8006676:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800667a:	e005      	b.n	8006688 <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 800667c:	2310      	movs	r3, #16
 800667e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006682:	e001      	b.n	8006688 <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 8006684:	2347      	movs	r3, #71	; 0x47
 8006686:	e049      	b.n	800671c <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 8006688:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800668c:	3307      	adds	r3, #7
 800668e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006692:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006696:	4618      	mov	r0, r3
 8006698:	f002 fc70 	bl	8008f7c <memcpy>
    index_input += size;
 800669c:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80066a0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80066a4:	4413      	add	r3, r2
 80066a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066ae:	2218      	movs	r2, #24
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 fbe8 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 80066b8:	233f      	movs	r3, #63	; 0x3f
 80066ba:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 80066be:	f44f 738b 	mov.w	r3, #278	; 0x116
 80066c2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 80066c6:	230f      	movs	r3, #15
 80066c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 80066d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 80066dc:	f107 030f 	add.w	r3, r7, #15
 80066e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 80066ea:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fe59 	bl	80083a8 <hci_send_req>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da01      	bge.n	8006700 <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 80066fc:	23ff      	movs	r3, #255	; 0xff
 80066fe:	e00d      	b.n	800671c <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 8006700:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006704:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 800670e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006712:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	e000      	b.n	800671c <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006722:	46bd      	mov	sp, r7
 8006724:	bdb0      	pop	{r4, r5, r7, pc}

08006726 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 8006726:	b590      	push	{r4, r7, lr}
 8006728:	b0cf      	sub	sp, #316	; 0x13c
 800672a:	af00      	add	r7, sp, #0
 800672c:	4604      	mov	r4, r0
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006736:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006740:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006744:	4622      	mov	r2, r4
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800674c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006750:	4602      	mov	r2, r0
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006758:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800675c:	460a      	mov	r2, r1
 800675e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8006768:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800676c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800677a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800677e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006782:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006786:	8812      	ldrh	r2, [r2, #0]
 8006788:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800678a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800678e:	3302      	adds	r3, #2
 8006790:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8006794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006798:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800679c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067a0:	8812      	ldrh	r2, [r2, #0]
 80067a2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80067a4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067a8:	3302      	adds	r3, #2
 80067aa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 80067ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067b2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80067b6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80067be:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067c2:	3301      	adds	r3, #1
 80067c4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 80067c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067cc:	1d58      	adds	r0, r3, #5
 80067ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067d2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	f002 fbcb 	bl	8008f7c <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 80067e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067ea:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80067ee:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80067fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067fe:	2218      	movs	r2, #24
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f002 fb40 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8006808:	233f      	movs	r3, #63	; 0x3f
 800680a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800680e:	f240 1321 	movw	r3, #289	; 0x121
 8006812:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8006816:	230f      	movs	r3, #15
 8006818:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006824:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800682c:	f107 0313 	add.w	r3, r7, #19
 8006830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8006834:	2301      	movs	r3, #1
 8006836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800683a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800683e:	2100      	movs	r1, #0
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fdb1 	bl	80083a8 <hci_send_req>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	da01      	bge.n	8006850 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800684c:	23ff      	movs	r3, #255	; 0xff
 800684e:	e00d      	b.n	800686c <aci_gatt_write_char_desc+0x146>
  if (status) {
 8006850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006854:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <aci_gatt_write_char_desc+0x144>
    return status;
 800685e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006862:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	e000      	b.n	800686c <aci_gatt_write_char_desc+0x146>
  }
  return BLE_STATUS_SUCCESS;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}

08006876 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08e      	sub	sp, #56	; 0x38
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	220f      	movs	r2, #15
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f002 fafb 	bl	8008e88 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006892:	f107 0320 	add.w	r3, r7, #32
 8006896:	2218      	movs	r2, #24
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f002 faf4 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 80068a0:	233f      	movs	r3, #63	; 0x3f
 80068a2:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80068a4:	2301      	movs	r3, #1
 80068a6:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 80068ae:	230f      	movs	r3, #15
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80068b2:	f107 0320 	add.w	r3, r7, #32
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fd75 	bl	80083a8 <hci_send_req>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da01      	bge.n	80068c8 <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 80068c4:	23ff      	movs	r3, #255	; 0xff
 80068c6:	e02c      	b.n	8006922 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 80068c8:	7c3b      	ldrb	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 80068ce:	7c3b      	ldrb	r3, [r7, #16]
 80068d0:	e027      	b.n	8006922 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 80068d2:	7c7a      	ldrb	r2, [r7, #17]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 80068d8:	7cba      	ldrb	r2, [r7, #18]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 80068de:	7cfa      	ldrb	r2, [r7, #19]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 80068e4:	7d3a      	ldrb	r2, [r7, #20]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 80068ea:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f2:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 80068f4:	7dfa      	ldrb	r2, [r7, #23]
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 80068fa:	7e3a      	ldrb	r2, [r7, #24]
 80068fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fe:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 8006900:	7e7a      	ldrb	r2, [r7, #25]
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 8006906:	7eba      	ldrb	r2, [r7, #26]
 8006908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690a:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800690c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006910:	b29a      	uxth	r2, r3
 8006912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006914:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 8006916:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 800691a:	b29a      	uxth	r2, r3
 800691c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800691e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3738      	adds	r7, #56	; 0x38
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b0ee      	sub	sp, #440	; 0x1b8
 800692e:	af00      	add	r7, sp, #0
 8006930:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006934:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006938:	6019      	str	r1, [r3, #0]
 800693a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800693e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006948:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 800694c:	4602      	mov	r2, r0
 800694e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8006950:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006954:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	2280      	movs	r2, #128	; 0x80
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f002 fa91 	bl	8008e88 <memset>
  uint8_t index_input = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 800696c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8006970:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8006974:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800697c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8006980:	3301      	adds	r3, #1
 8006982:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006986:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800698a:	2218      	movs	r2, #24
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f002 fa7a 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8006994:	233f      	movs	r3, #63	; 0x3f
 8006996:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 800699a:	230d      	movs	r3, #13
 800699c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 80069a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 80069a8:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80069ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 80069be:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fcef 	bl	80083a8 <hci_send_req>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da01      	bge.n	80069d4 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80069d0:	23ff      	movs	r3, #255	; 0xff
 80069d2:	e029      	b.n	8006a28 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 80069d4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069d8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <aci_hal_read_config_data+0xc4>
    return resp.Status;
 80069e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069e6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	e01c      	b.n	8006a28 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 80069ee:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069f2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80069f6:	785a      	ldrb	r2, [r3, #1]
 80069f8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80069fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8006a04:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006a08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	f107 0314 	add.w	r3, r7, #20
 8006a16:	1c99      	adds	r1, r3, #2
 8006a18:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006a1c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	f002 faab 	bl	8008f7c <memcpy>
  return BLE_STATUS_SUCCESS;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b0cc      	sub	sp, #304	; 0x130
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	4602      	mov	r2, r0
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a48:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006a4c:	460a      	mov	r2, r1
 8006a4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a7a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006a7e:	3301      	adds	r3, #1
 8006a80:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a8c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a94:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006a98:	3301      	adds	r3, #1
 8006a9a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aa2:	2218      	movs	r2, #24
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f9ee 	bl	8008e88 <memset>
  rq.ogf = 0x3f;
 8006aac:	233f      	movs	r3, #63	; 0x3f
 8006aae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ac0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ac8:	f107 030b 	add.w	r3, r7, #11
 8006acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fc63 	bl	80083a8 <hci_send_req>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da01      	bge.n	8006aec <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006ae8:	23ff      	movs	r3, #255	; 0xff
 8006aea:	e00d      	b.n	8006b08 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	e000      	b.n	8006b08 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	7818      	ldrb	r0, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b2c:	b299      	uxth	r1, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	78db      	ldrb	r3, [r3, #3]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fa fb18 	bl	8001168 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	7818      	ldrb	r0, [r3, #0]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b5c:	b299      	uxth	r1, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	78db      	ldrb	r3, [r3, #3]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f000 ffca 	bl	8007afc <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006b72:	b590      	push	{r4, r7, lr}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af02      	add	r7, sp, #8
 8006b78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	7818      	ldrb	r0, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b8c:	b299      	uxth	r1, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	78da      	ldrb	r2, [r3, #3]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	889b      	ldrh	r3, [r3, #4]
 8006b96:	b29c      	uxth	r4, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	f000 ffba 	bl	8007b1a <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}

08006bb0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 ffbc 	bl	8007b42 <hci_hardware_error_event>

  return status;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b0a6      	sub	sp, #152	; 0x98
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bf4:	e02e      	b.n	8006c54 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006bf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	3398      	adds	r3, #152	; 0x98
 8006c10:	443b      	add	r3, r7
 8006c12:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006c16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006c1a:	3302      	adds	r3, #2
 8006c1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006c20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	3398      	adds	r3, #152	; 0x98
 8006c3a:	443b      	add	r3, r7
 8006c3c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006c40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006c44:	3302      	adds	r3, #2
 8006c46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c4e:	3301      	adds	r3, #1
 8006c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c60:	4293      	cmp	r3, r2
 8006c62:	dbc8      	blt.n	8006bf6 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f107 0208 	add.w	r2, r7, #8
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ff71 	bl	8007b58 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006c76:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3798      	adds	r7, #152	; 0x98
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 ff6a 	bl	8007b70 <hci_data_buffer_overflow_event>

  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f000 ff5e 	bl	8007b86 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 f97b 	bl	8007fe4 <aci_blue_initialized_event>

  return status;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 f975 	bl	8007ffa <aci_blue_events_lost_event>

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d1e:	b08d      	sub	sp, #52	; 0x34
 8006d20:	af08      	add	r7, sp, #32
 8006d22:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f893 c000 	ldrb.w	ip, [r3]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006d58:	68b8      	ldr	r0, [r7, #8]
 8006d5a:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006d5e:	68bc      	ldr	r4, [r7, #8]
 8006d60:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006d64:	68bd      	ldr	r5, [r7, #8]
 8006d66:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006d6a:	68be      	ldr	r6, [r7, #8]
 8006d6c:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006d74:	9307      	str	r3, [sp, #28]
 8006d76:	9606      	str	r6, [sp, #24]
 8006d78:	9505      	str	r5, [sp, #20]
 8006d7a:	9404      	str	r4, [sp, #16]
 8006d7c:	9003      	str	r0, [sp, #12]
 8006d7e:	9102      	str	r1, [sp, #8]
 8006d80:	9201      	str	r2, [sp, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	464b      	mov	r3, r9
 8006d88:	4642      	mov	r2, r8
 8006d8a:	4671      	mov	r1, lr
 8006d8c:	4660      	mov	r0, ip
 8006d8e:	f001 f93e 	bl	800800e <aci_blue_crash_info_event>

  return status;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006d9e <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7818      	ldrb	r0, [r3, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	7859      	ldrb	r1, [r3, #1]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f001 f934 	bl	800802a <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f993 0000 	ldrsb.w	r0, [r3]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006dea:	461a      	mov	r2, r3
 8006dec:	f001 f92b 	bl	8008046 <aci_hal_scan_req_report_event>

  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7818      	ldrb	r0, [r3, #0]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006e16:	461a      	mov	r2, r3
 8006e18:	f001 f923 	bl	8008062 <aci_hal_fw_error_event>

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006e32:	f000 ff32 	bl	8007c9a <aci_gap_limited_discoverable_event>

  return status;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b298      	uxth	r0, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	7899      	ldrb	r1, [r3, #2]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	78db      	ldrb	r3, [r3, #3]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f000 ff22 	bl	8007ca8 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ff1e 	bl	8007cc6 <aci_gap_pass_key_req_event>

  return status;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 ff16 	bl	8007cdc <aci_gap_authorization_req_event>

  return status;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006ec6:	f000 ff14 	bl	8007cf2 <aci_gap_slave_security_initiated_event>

  return status;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006ee0:	f000 ff0e 	bl	8007d00 <aci_gap_bond_lost_event>

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	7818      	ldrb	r0, [r3, #0]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7859      	ldrb	r1, [r3, #1]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006f0e:	f7fa f995 	bl	800123c <aci_gap_proc_complete_event>

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 feeb 	bl	8007d0e <aci_gap_addr_not_resolved_event>

  return status;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 fedf 	bl	8007d24 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	789b      	ldrb	r3, [r3, #2]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f000 fed5 	bl	8007d3c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f000 ffce 	bl	8007f5c <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b298      	uxth	r0, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f000 ffc5 	bl	8007f78 <aci_l2cap_proc_timeout_event>

  return status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b298      	uxth	r0, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	789c      	ldrb	r4, [r3, #2]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007018:	b29d      	uxth	r5, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007020:	b29e      	uxth	r6, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007028:	b29b      	uxth	r3, r3
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007030:	b292      	uxth	r2, r2
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8007038:	b289      	uxth	r1, r1
 800703a:	9102      	str	r1, [sp, #8]
 800703c:	9201      	str	r2, [sp, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4633      	mov	r3, r6
 8007042:	462a      	mov	r2, r5
 8007044:	4621      	mov	r1, r4
 8007046:	f000 ffa5 	bl	8007f94 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007054 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b087      	sub	sp, #28
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b298      	uxth	r0, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	7899      	ldrb	r1, [r3, #2]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007074:	b29a      	uxth	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4623      	mov	r3, r4
 8007082:	f000 ff9b 	bl	8007fbc <aci_l2cap_command_reject_event>

  return status;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bd90      	pop	{r4, r7, pc}

08007090 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b087      	sub	sp, #28
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b298      	uxth	r0, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b299      	uxth	r1, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	889b      	ldrh	r3, [r3, #4]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4623      	mov	r3, r4
 80070c0:	f7fa f8e6 	bl	8001290 <aci_gatt_attribute_modified_event>

  return status;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}

080070ce <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fe37 	bl	8007d58 <aci_gatt_proc_timeout_event>

  return status;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	b29b      	uxth	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f7fa f976 	bl	8001404 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b298      	uxth	r0, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	7899      	ldrb	r1, [r3, #2]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007144:	f000 fe13 	bl	8007d6e <aci_att_find_info_resp_event>

  return status;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b0a6      	sub	sp, #152	; 0x98
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8007166:	2303      	movs	r3, #3
 8007168:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800716c:	2300      	movs	r3, #0
 800716e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007172:	e02e      	b.n	80071d2 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8007174:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	3398      	adds	r3, #152	; 0x98
 800718e:	443b      	add	r3, r7
 8007190:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007198:	3302      	adds	r3, #2
 800719a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800719e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3398      	adds	r3, #152	; 0x98
 80071b8:	443b      	add	r3, r7
 80071ba:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80071be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80071c2:	3302      	adds	r3, #2
 80071c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80071c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071cc:	3301      	adds	r3, #1
 80071ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071d6:	789b      	ldrb	r3, [r3, #2]
 80071d8:	461a      	mov	r2, r3
 80071da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071de:	4293      	cmp	r3, r2
 80071e0:	dbc8      	blt.n	8007174 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80071e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b298      	uxth	r0, r3
 80071ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ee:	789b      	ldrb	r3, [r3, #2]
 80071f0:	f107 0208 	add.w	r2, r7, #8
 80071f4:	4619      	mov	r1, r3
 80071f6:	f000 fdca 	bl	8007d8e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 80071fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3798      	adds	r7, #152	; 0x98
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b298      	uxth	r0, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	7899      	ldrb	r1, [r3, #2]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007228:	f000 fdbf 	bl	8007daa <aci_att_read_by_type_resp_event>

  return status;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b298      	uxth	r0, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007254:	461a      	mov	r2, r3
 8007256:	f000 fdb8 	bl	8007dca <aci_att_read_resp_event>

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b298      	uxth	r0, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007282:	461a      	mov	r2, r3
 8007284:	f000 fdaf 	bl	8007de6 <aci_att_read_blob_resp_event>

  return status;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b298      	uxth	r0, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80072b0:	461a      	mov	r2, r3
 80072b2:	f000 fda6 	bl	8007e02 <aci_att_read_multiple_resp_event>

  return status;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b298      	uxth	r0, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	7899      	ldrb	r1, [r3, #2]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80072e2:	f000 fd9c 	bl	8007e1e <aci_att_read_by_group_type_resp_event>

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b298      	uxth	r0, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	b299      	uxth	r1, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	889b      	ldrh	r3, [r3, #4]
 8007310:	b29a      	uxth	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4623      	mov	r3, r4
 800731e:	f000 fd8e 	bl	8007e3e <aci_att_prepare_write_resp_event>

  return status;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	bd90      	pop	{r4, r7, pc}

0800732c <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fd8f 	bl	8007e66 <aci_att_exec_write_resp_event>

  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b298      	uxth	r0, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	885b      	ldrh	r3, [r3, #2]
 800736c:	b299      	uxth	r1, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007376:	f000 fd81 	bl	8007e7c <aci_gatt_indication_event>

  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b298      	uxth	r0, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	885b      	ldrh	r3, [r3, #2]
 800739e:	b299      	uxth	r1, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80073a8:	f7f9 ff8c 	bl	80012c4 <aci_gatt_notification_event>

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7f9 ffd4 	bl	8001380 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b298      	uxth	r0, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	7899      	ldrb	r1, [r3, #2]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007402:	b29a      	uxth	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	795b      	ldrb	r3, [r3, #5]
 8007408:	f000 fd48 	bl	8007e9c <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b298      	uxth	r0, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	b299      	uxth	r1, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800743a:	f7f9 ff5f 	bl	80012fc <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b298      	uxth	r0, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	b299      	uxth	r1, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800746c:	f000 fd2a 	bl	8007ec4 <aci_gatt_write_permit_req_event>

  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b298      	uxth	r0, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	885b      	ldrh	r3, [r3, #2]
 8007494:	b299      	uxth	r1, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f000 fd21 	bl	8007ee4 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b0a6      	sub	sp, #152	; 0x98
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80074c0:	2303      	movs	r3, #3
 80074c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80074c6:	2300      	movs	r3, #0
 80074c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074cc:	e019      	b.n	8007502 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80074ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	3398      	adds	r3, #152	; 0x98
 80074e8:	443b      	add	r3, r7
 80074ea:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80074ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074f2:	3302      	adds	r3, #2
 80074f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80074f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074fc:	3301      	adds	r3, #1
 80074fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007506:	789b      	ldrb	r3, [r3, #2]
 8007508:	461a      	mov	r2, r3
 800750a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800750e:	4293      	cmp	r3, r2
 8007510:	dbdd      	blt.n	80074ce <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b298      	uxth	r0, r3
 800751a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800751e:	789b      	ldrb	r3, [r3, #2]
 8007520:	f107 0208 	add.w	r2, r7, #8
 8007524:	4619      	mov	r1, r3
 8007526:	f000 fcec 	bl	8007f02 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800752a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800752e:	4618      	mov	r0, r3
 8007530:	3798      	adds	r7, #152	; 0x98
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	885b      	ldrh	r3, [r3, #2]
 8007550:	b29b      	uxth	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f7f9 ff41 	bl	80013dc <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fccf 	bl	8007f1e <aci_gatt_server_confirmation_event>

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800758a:	b590      	push	{r4, r7, lr}
 800758c:	b087      	sub	sp, #28
 800758e:	af02      	add	r7, sp, #8
 8007590:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b298      	uxth	r0, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	885b      	ldrh	r3, [r3, #2]
 80075a4:	b299      	uxth	r1, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	889b      	ldrh	r3, [r3, #4]
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	4623      	mov	r3, r4
 80075b8:	f000 fcbc 	bl	8007f34 <aci_gatt_prepare_write_permit_req_event>

  return status;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}

080075c6 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 80075c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c8:	b08b      	sub	sp, #44	; 0x2c
 80075ca:	af06      	add	r7, sp, #24
 80075cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781d      	ldrb	r5, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075e0:	b29e      	uxth	r6, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80075f8:	b292      	uxth	r2, r2
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8007600:	b289      	uxth	r1, r1
 8007602:	68b8      	ldr	r0, [r7, #8]
 8007604:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8007608:	b280      	uxth	r0, r0
 800760a:	68bc      	ldr	r4, [r7, #8]
 800760c:	7c64      	ldrb	r4, [r4, #17]
 800760e:	9404      	str	r4, [sp, #16]
 8007610:	9003      	str	r0, [sp, #12]
 8007612:	9102      	str	r1, [sp, #8]
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4673      	mov	r3, lr
 800761a:	4662      	mov	r2, ip
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	f7f9 fd54 	bl	80010cc <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800762e <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b0a4      	sub	sp, #144	; 0x90
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007636:	2300      	movs	r3, #0
 8007638:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800764e:	e0b3      	b.n	80077b8 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007650:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007654:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	440b      	add	r3, r1
 8007664:	3301      	adds	r3, #1
 8007666:	7819      	ldrb	r1, [r3, #0]
 8007668:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	3390      	adds	r3, #144	; 0x90
 8007676:	443b      	add	r3, r7
 8007678:	3b88      	subs	r3, #136	; 0x88
 800767a:	460a      	mov	r2, r1
 800767c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800767e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007682:	3301      	adds	r3, #1
 8007684:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007688:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800768c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	440b      	add	r3, r1
 800769c:	3302      	adds	r3, #2
 800769e:	7819      	ldrb	r1, [r3, #0]
 80076a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	3390      	adds	r3, #144	; 0x90
 80076ae:	443b      	add	r3, r7
 80076b0:	3b87      	subs	r3, #135	; 0x87
 80076b2:	460a      	mov	r2, r1
 80076b4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80076b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076ba:	3301      	adds	r3, #1
 80076bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	1c98      	adds	r0, r3, #2
 80076d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	4413      	add	r3, r2
 80076e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076e6:	4413      	add	r3, r2
 80076e8:	3303      	adds	r3, #3
 80076ea:	2206      	movs	r2, #6
 80076ec:	4619      	mov	r1, r3
 80076ee:	f001 fc45 	bl	8008f7c <memcpy>
    size += 6;
 80076f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80076f6:	3306      	adds	r3, #6
 80076f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80076fc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007700:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	440b      	add	r3, r1
 8007710:	3309      	adds	r3, #9
 8007712:	7819      	ldrb	r1, [r3, #0]
 8007714:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	3390      	adds	r3, #144	; 0x90
 8007722:	443b      	add	r3, r7
 8007724:	3b80      	subs	r3, #128	; 0x80
 8007726:	460a      	mov	r2, r1
 8007728:	701a      	strb	r2, [r3, #0]
    size += 1;
 800772a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800772e:	3301      	adds	r3, #1
 8007730:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007734:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	4413      	add	r3, r2
 8007742:	3308      	adds	r3, #8
 8007744:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007748:	4413      	add	r3, r2
 800774a:	1c99      	adds	r1, r3, #2
 800774c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	3390      	adds	r3, #144	; 0x90
 800775a:	443b      	add	r3, r7
 800775c:	3b7c      	subs	r3, #124	; 0x7c
 800775e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007760:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007764:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	4413      	add	r3, r2
 8007772:	440b      	add	r3, r1
 8007774:	3309      	adds	r3, #9
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800777c:	4413      	add	r3, r2
 800777e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007782:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b259      	sxtb	r1, r3
 800778e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	3390      	adds	r3, #144	; 0x90
 800779c:	443b      	add	r3, r7
 800779e:	3b78      	subs	r3, #120	; 0x78
 80077a0:	460a      	mov	r2, r1
 80077a2:	701a      	strb	r2, [r3, #0]
    size += 1;
 80077a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80077a8:	3301      	adds	r3, #1
 80077aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80077ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077b2:	3301      	adds	r3, #1
 80077b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077c4:	4293      	cmp	r3, r2
 80077c6:	f6ff af43 	blt.w	8007650 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80077ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f107 0208 	add.w	r2, r7, #8
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7f9 fce0 	bl	800119c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80077dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3790      	adds	r7, #144	; 0x90
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80077e8:	b590      	push	{r4, r7, lr}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	7818      	ldrb	r0, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007802:	b299      	uxth	r1, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800780a:	b29a      	uxth	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007812:	b29c      	uxth	r4, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800781a:	b29b      	uxth	r3, r3
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4623      	mov	r3, r4
 8007820:	f000 f9bf 	bl	8007ba2 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bd90      	pop	{r4, r7, pc}

0800782e <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	7818      	ldrb	r0, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007848:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800784e:	461a      	mov	r2, r3
 8007850:	f000 f9bb 	bl	8007bca <hci_le_read_remote_used_features_complete_event>

  return status;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	895b      	ldrh	r3, [r3, #10]
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	f000 f9b1 	bl	8007be6 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800788e:	b590      	push	{r4, r7, lr}
 8007890:	b087      	sub	sp, #28
 8007892:	af02      	add	r7, sp, #8
 8007894:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b298      	uxth	r0, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	b299      	uxth	r1, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	889b      	ldrh	r3, [r3, #4]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	88db      	ldrh	r3, [r3, #6]
 80078b4:	b29c      	uxth	r4, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	891b      	ldrh	r3, [r3, #8]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4623      	mov	r3, r4
 80078c0:	f000 f99f 	bl	8007c02 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}

080078ce <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f000 f99e 	bl	8007c2a <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 f995 	bl	8007c42 <hci_le_generate_dhkey_complete_event>

  return status;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007926:	b08d      	sub	sp, #52	; 0x34
 8007928:	af08      	add	r7, sp, #32
 800792a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f893 c000 	ldrb.w	ip, [r3]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007940:	fa1f fe83 	uxth.w	lr, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f893 8003 	ldrb.w	r8, [r3, #3]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800795c:	68b8      	ldr	r0, [r7, #8]
 800795e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007962:	b280      	uxth	r0, r0
 8007964:	68bc      	ldr	r4, [r7, #8]
 8007966:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800796a:	b2a4      	uxth	r4, r4
 800796c:	68bd      	ldr	r5, [r7, #8]
 800796e:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007972:	b2ad      	uxth	r5, r5
 8007974:	68be      	ldr	r6, [r7, #8]
 8007976:	7f76      	ldrb	r6, [r6, #29]
 8007978:	9606      	str	r6, [sp, #24]
 800797a:	9505      	str	r5, [sp, #20]
 800797c:	9404      	str	r4, [sp, #16]
 800797e:	9003      	str	r0, [sp, #12]
 8007980:	9102      	str	r1, [sp, #8]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	464b      	mov	r3, r9
 8007988:	4642      	mov	r2, r8
 800798a:	4671      	mov	r1, lr
 800798c:	4660      	mov	r0, ip
 800798e:	f000 f964 	bl	8007c5a <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800799e <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b0a6      	sub	sp, #152	; 0x98
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079be:	e085      	b.n	8007acc <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80079c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	4413      	add	r3, r2
 80079cc:	3301      	adds	r3, #1
 80079ce:	781a      	ldrb	r2, [r3, #0]
 80079d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	3398      	adds	r3, #152	; 0x98
 80079d8:	443b      	add	r3, r7
 80079da:	3b90      	subs	r3, #144	; 0x90
 80079dc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80079de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079e2:	3301      	adds	r3, #1
 80079e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80079e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	4413      	add	r3, r2
 80079f4:	3302      	adds	r3, #2
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	3398      	adds	r3, #152	; 0x98
 8007a00:	443b      	add	r3, r7
 8007a02:	3b8f      	subs	r3, #143	; 0x8f
 8007a04:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007a06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007a10:	f107 0208 	add.w	r2, r7, #8
 8007a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	4413      	add	r3, r2
 8007a1c:	1c98      	adds	r0, r3, #2
 8007a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a28:	4413      	add	r3, r2
 8007a2a:	3303      	adds	r3, #3
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	4619      	mov	r1, r3
 8007a30:	f001 faa4 	bl	8008f7c <memcpy>
    size += 6;
 8007a34:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a38:	3306      	adds	r3, #6
 8007a3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007a3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	4413      	add	r3, r2
 8007a4a:	3309      	adds	r3, #9
 8007a4c:	781a      	ldrb	r2, [r3, #0]
 8007a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	3398      	adds	r3, #152	; 0x98
 8007a56:	443b      	add	r3, r7
 8007a58:	3b88      	subs	r3, #136	; 0x88
 8007a5a:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007a5c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a60:	3301      	adds	r3, #1
 8007a62:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007a66:	f107 0208 	add.w	r2, r7, #8
 8007a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	3308      	adds	r3, #8
 8007a72:	4413      	add	r3, r2
 8007a74:	1c58      	adds	r0, r3, #1
 8007a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a82:	4413      	add	r3, r2
 8007a84:	3302      	adds	r3, #2
 8007a86:	2206      	movs	r2, #6
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f001 fa77 	bl	8008f7c <memcpy>
    size += 6;
 8007a8e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a92:	3306      	adds	r3, #6
 8007a94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007a98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3310      	adds	r3, #16
 8007aa6:	f993 2000 	ldrsb.w	r2, [r3]
 8007aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	3398      	adds	r3, #152	; 0x98
 8007ab2:	443b      	add	r3, r7
 8007ab4:	3b81      	subs	r3, #129	; 0x81
 8007ab6:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007ab8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007abc:	3301      	adds	r3, #1
 8007abe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	f6ff af71 	blt.w	80079c0 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8007ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f107 0208 	add.w	r2, r7, #8
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f8c9 	bl	8007c82 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8007af0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3798      	adds	r7, #152	; 0x98
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
 8007b06:	460b      	mov	r3, r1
 8007b08:	80bb      	strh	r3, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8007b1a:	b490      	push	{r4, r7}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	4604      	mov	r4, r0
 8007b22:	4608      	mov	r0, r1
 8007b24:	4611      	mov	r1, r2
 8007b26:	461a      	mov	r2, r3
 8007b28:	4623      	mov	r3, r4
 8007b2a:	71fb      	strb	r3, [r7, #7]
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	80bb      	strh	r3, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	71bb      	strb	r3, [r7, #6]
 8007b34:	4613      	mov	r3, r2
 8007b36:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc90      	pop	{r4, r7}
 8007b40:	4770      	bx	lr

08007b42 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460a      	mov	r2, r1
 8007b90:	71fb      	strb	r3, [r7, #7]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007ba2:	b490      	push	{r4, r7}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	71fb      	strb	r3, [r7, #7]
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	80bb      	strh	r3, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	807b      	strh	r3, [r7, #2]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc90      	pop	{r4, r7}
 8007bc8:	4770      	bx	lr

08007bca <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	603a      	str	r2, [r7, #0]
 8007bd4:	71fb      	strb	r3, [r7, #7]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	4603      	mov	r3, r0
 8007bee:	6039      	str	r1, [r7, #0]
 8007bf0:	80fb      	strh	r3, [r7, #6]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007c02:	b490      	push	{r4, r7}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	4604      	mov	r4, r0
 8007c0a:	4608      	mov	r0, r1
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4623      	mov	r3, r4
 8007c12:	80fb      	strh	r3, [r7, #6]
 8007c14:	4603      	mov	r3, r0
 8007c16:	80bb      	strh	r3, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc90      	pop	{r4, r7}
 8007c28:	4770      	bx	lr

08007c2a <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	6039      	str	r1, [r7, #0]
 8007c34:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	4603      	mov	r3, r0
 8007c4a:	6039      	str	r1, [r7, #0]
 8007c4c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007c5a:	b490      	push	{r4, r7}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	461a      	mov	r2, r3
 8007c68:	4623      	mov	r3, r4
 8007c6a:	71fb      	strb	r3, [r7, #7]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	80bb      	strh	r3, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	71bb      	strb	r3, [r7, #6]
 8007c74:	4613      	mov	r3, r2
 8007c76:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc90      	pop	{r4, r7}
 8007c80:	4770      	bx	lr

08007c82 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	4603      	mov	r3, r0
 8007c8a:	6039      	str	r1, [r7, #0]
 8007c8c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007c9e:	bf00      	nop
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	80fb      	strh	r3, [r7, #6]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	717b      	strb	r3, [r7, #5]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	4603      	mov	r3, r0
 8007cce:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007cf6:	bf00      	nop
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	460a      	mov	r2, r1
 8007d46:	80fb      	strh	r3, [r7, #6]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	603b      	str	r3, [r7, #0]
 8007d76:	4603      	mov	r3, r0
 8007d78:	80fb      	strh	r3, [r7, #6]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	717b      	strb	r3, [r7, #5]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	4603      	mov	r3, r0
 8007d96:	603a      	str	r2, [r7, #0]
 8007d98:	80fb      	strh	r3, [r7, #6]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4603      	mov	r3, r0
 8007db4:	80fb      	strh	r3, [r7, #6]
 8007db6:	460b      	mov	r3, r1
 8007db8:	717b      	strb	r3, [r7, #5]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	603a      	str	r2, [r7, #0]
 8007dd4:	80fb      	strh	r3, [r7, #6]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	4603      	mov	r3, r0
 8007dee:	603a      	str	r2, [r7, #0]
 8007df0:	80fb      	strh	r3, [r7, #6]
 8007df2:	460b      	mov	r3, r1
 8007df4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	603a      	str	r2, [r7, #0]
 8007e0c:	80fb      	strh	r3, [r7, #6]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	4603      	mov	r3, r0
 8007e28:	80fb      	strh	r3, [r7, #6]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	717b      	strb	r3, [r7, #5]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007e3e:	b490      	push	{r4, r7}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	4604      	mov	r4, r0
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	80fb      	strh	r3, [r7, #6]
 8007e50:	4603      	mov	r3, r0
 8007e52:	80bb      	strh	r3, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc90      	pop	{r4, r7}
 8007e64:	4770      	bx	lr

08007e66 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	4603      	mov	r3, r0
 8007e86:	81fb      	strh	r3, [r7, #14]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	81bb      	strh	r3, [r7, #12]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007e9c:	b490      	push	{r4, r7}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4623      	mov	r3, r4
 8007eac:	80fb      	strh	r3, [r7, #6]
 8007eae:	4603      	mov	r3, r0
 8007eb0:	717b      	strb	r3, [r7, #5]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	807b      	strh	r3, [r7, #2]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc90      	pop	{r4, r7}
 8007ec2:	4770      	bx	lr

08007ec4 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	607b      	str	r3, [r7, #4]
 8007ecc:	4603      	mov	r3, r0
 8007ece:	81fb      	strh	r3, [r7, #14]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	81bb      	strh	r3, [r7, #12]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007ed8:	bf00      	nop
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	80fb      	strh	r3, [r7, #6]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	80bb      	strh	r3, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	4603      	mov	r3, r0
 8007f0a:	603a      	str	r2, [r7, #0]
 8007f0c:	80fb      	strh	r3, [r7, #6]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	4603      	mov	r3, r0
 8007f26:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007f34:	b490      	push	{r4, r7}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	4611      	mov	r1, r2
 8007f40:	461a      	mov	r2, r3
 8007f42:	4623      	mov	r3, r4
 8007f44:	80fb      	strh	r3, [r7, #6]
 8007f46:	4603      	mov	r3, r0
 8007f48:	80bb      	strh	r3, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	807b      	strh	r3, [r7, #2]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc90      	pop	{r4, r7}
 8007f5a:	4770      	bx	lr

08007f5c <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	460a      	mov	r2, r1
 8007f66:	80fb      	strh	r3, [r7, #6]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	603a      	str	r2, [r7, #0]
 8007f82:	80fb      	strh	r3, [r7, #6]
 8007f84:	460b      	mov	r3, r1
 8007f86:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007f94:	b490      	push	{r4, r7}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	80fb      	strh	r3, [r7, #6]
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	717b      	strb	r3, [r7, #5]
 8007faa:	460b      	mov	r3, r1
 8007fac:	807b      	strh	r3, [r7, #2]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc90      	pop	{r4, r7}
 8007fba:	4770      	bx	lr

08007fbc <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007fbc:	b490      	push	{r4, r7}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4623      	mov	r3, r4
 8007fcc:	80fb      	strh	r3, [r7, #6]
 8007fce:	4603      	mov	r3, r0
 8007fd0:	717b      	strb	r3, [r7, #5]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	807b      	strh	r3, [r7, #2]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc90      	pop	{r4, r7}
 8007fe2:	4770      	bx	lr

08007fe4 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	4603      	mov	r3, r0
 8008032:	603a      	str	r2, [r7, #0]
 8008034:	71fb      	strb	r3, [r7, #7]
 8008036:	460b      	mov	r3, r1
 8008038:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	4603      	mov	r3, r0
 800804e:	603a      	str	r2, [r7, #0]
 8008050:	71fb      	strb	r3, [r7, #7]
 8008052:	460b      	mov	r3, r1
 8008054:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	4603      	mov	r3, r0
 800806a:	603a      	str	r2, [r7, #0]
 800806c:	71fb      	strb	r3, [r7, #7]
 800806e:	460b      	mov	r3, r1
 8008070:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008088:	f107 0308 	add.w	r3, r7, #8
 800808c:	2218      	movs	r2, #24
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fef9 	bl	8008e88 <memset>
  rq.ogf = 0x03;
 8008096:	2303      	movs	r3, #3
 8008098:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800809a:	2303      	movs	r3, #3
 800809c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800809e:	1dfb      	adds	r3, r7, #7
 80080a0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80080a6:	f107 0308 	add.w	r3, r7, #8
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f97b 	bl	80083a8 <hci_send_req>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	da01      	bge.n	80080bc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80080b8:	23ff      	movs	r3, #255	; 0xff
 80080ba:	e005      	b.n	80080c8 <hci_reset+0x4a>
  if (status) {
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <hci_reset+0x48>
    return status;
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	e000      	b.n	80080c8 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b0cc      	sub	sp, #304	; 0x130
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4602      	mov	r2, r0
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e0:	6019      	str	r1, [r3, #0]
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80080ea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80080f4:	f107 0308 	add.w	r3, r7, #8
 80080f8:	2204      	movs	r2, #4
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fec3 	bl	8008e88 <memset>
  uint8_t index_input = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008110:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008114:	8812      	ldrh	r2, [r2, #0]
 8008116:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008118:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800811c:	3302      	adds	r3, #2
 800811e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008126:	2218      	movs	r2, #24
 8008128:	2100      	movs	r1, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f000 feac 	bl	8008e88 <memset>
  rq.ogf = 0x05;
 8008130:	2305      	movs	r3, #5
 8008132:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8008136:	2305      	movs	r3, #5
 8008138:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800813c:	f107 030c 	add.w	r3, r7, #12
 8008140:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008144:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008148:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008154:	2304      	movs	r3, #4
 8008156:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800815a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f921 	bl	80083a8 <hci_send_req>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	da01      	bge.n	8008170 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 800816c:	23ff      	movs	r3, #255	; 0xff
 800816e:	e019      	b.n	80081a4 <hci_read_rssi+0xd4>
  if (resp.Status) {
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <hci_read_rssi+0xba>
    return resp.Status;
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	e00c      	b.n	80081a4 <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008192:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3308      	adds	r3, #8
 80081ba:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d001      	beq.n	80081c8 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80081c4:	2301      	movs	r3, #1
 80081c6:	e00c      	b.n	80081e2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3302      	adds	r3, #2
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80081d6:	3b03      	subs	r3, #3
 80081d8:	429a      	cmp	r2, r3
 80081da:	d001      	beq.n	80081e0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80081dc:	2302      	movs	r3, #2
 80081de:	e000      	b.n	80081e2 <verify_packet+0x34>
  
  return 0;      
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b0a6      	sub	sp, #152	; 0x98
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	4603      	mov	r3, r0
 80081fa:	81fb      	strh	r3, [r7, #14]
 80081fc:	460b      	mov	r3, r1
 80081fe:	81bb      	strh	r3, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008204:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800820c:	b21a      	sxth	r2, r3
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	029b      	lsls	r3, r3, #10
 8008212:	b21b      	sxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b21b      	sxth	r3, r3
 8008218:	b29b      	uxth	r3, r3
 800821a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008220:	2301      	movs	r3, #1
 8008222:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008224:	f107 0318 	add.w	r3, r7, #24
 8008228:	3301      	adds	r3, #1
 800822a:	461a      	mov	r2, r3
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	8819      	ldrh	r1, [r3, #0]
 8008232:	789b      	ldrb	r3, [r3, #2]
 8008234:	8011      	strh	r1, [r2, #0]
 8008236:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008238:	f107 0318 	add.w	r3, r7, #24
 800823c:	3304      	adds	r3, #4
 800823e:	7afa      	ldrb	r2, [r7, #11]
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fe9a 	bl	8008f7c <memcpy>
  
  if (hciContext.io.Send)
 8008248:	4b08      	ldr	r3, [pc, #32]	; (800826c <send_cmd+0x7c>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d009      	beq.n	8008264 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <send_cmd+0x7c>)
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	7afa      	ldrb	r2, [r7, #11]
 8008256:	b292      	uxth	r2, r2
 8008258:	3204      	adds	r2, #4
 800825a:	b291      	uxth	r1, r2
 800825c:	f107 0218 	add.w	r2, r7, #24
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
  }
}
 8008264:	bf00      	nop
 8008266:	3798      	adds	r7, #152	; 0x98
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	200008b4 	.word	0x200008b4

08008270 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800827a:	e00a      	b.n	8008292 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4619      	mov	r1, r3
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f000 fae8 	bl	8008858 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fa4f 	bl	8008730 <list_insert_head>
  while (!list_is_empty(src_list))
 8008292:	6838      	ldr	r0, [r7, #0]
 8008294:	f000 fa2a 	bl	80086ec <list_is_empty>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0ee      	beq.n	800827c <move_list+0xc>
  }
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80082ae:	e009      	b.n	80082c4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4809      	ldr	r0, [pc, #36]	; (80082dc <free_event_list+0x34>)
 80082b6:	f000 faa8 	bl	800880a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	4808      	ldr	r0, [pc, #32]	; (80082e0 <free_event_list+0x38>)
 80082c0:	f000 fa5c 	bl	800877c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80082c4:	4806      	ldr	r0, [pc, #24]	; (80082e0 <free_event_list+0x38>)
 80082c6:	f000 faee 	bl	80088a6 <list_get_size>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	ddef      	ble.n	80082b0 <free_event_list+0x8>
  }
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000334 	.word	0x20000334
 80082e0:	2000032c 	.word	0x2000032c

080082e4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80082f4:	4a18      	ldr	r2, [pc, #96]	; (8008358 <hci_init+0x74>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80082fa:	4818      	ldr	r0, [pc, #96]	; (800835c <hci_init+0x78>)
 80082fc:	f000 f9e6 	bl	80086cc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008300:	4817      	ldr	r0, [pc, #92]	; (8008360 <hci_init+0x7c>)
 8008302:	f000 f9e3 	bl	80086cc <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008306:	f7f9 fb51 	bl	80019ac <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
 800830e:	e00c      	b.n	800832a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	228c      	movs	r2, #140	; 0x8c
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	4a12      	ldr	r2, [pc, #72]	; (8008364 <hci_init+0x80>)
 800831a:	4413      	add	r3, r2
 800831c:	4619      	mov	r1, r3
 800831e:	480f      	ldr	r0, [pc, #60]	; (800835c <hci_init+0x78>)
 8008320:	f000 fa2c 	bl	800877c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	3301      	adds	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b09      	cmp	r3, #9
 800832e:	d9ef      	bls.n	8008310 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008330:	4b09      	ldr	r3, [pc, #36]	; (8008358 <hci_init+0x74>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <hci_init+0x5c>
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <hci_init+0x74>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2000      	movs	r0, #0
 800833e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <hci_init+0x74>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <hci_init+0x6a>
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <hci_init+0x74>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4798      	blx	r3
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200008b4 	.word	0x200008b4
 800835c:	2000032c 	.word	0x2000032c
 8008360:	20000334 	.word	0x20000334
 8008364:	2000033c 	.word	0x2000033c

08008368 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <hci_register_io_bus+0x3c>)
 8008376:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4a09      	ldr	r2, [pc, #36]	; (80083a4 <hci_register_io_bus+0x3c>)
 800837e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <hci_register_io_bus+0x3c>)
 8008386:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	4a05      	ldr	r2, [pc, #20]	; (80083a4 <hci_register_io_bus+0x3c>)
 800838e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4a03      	ldr	r2, [pc, #12]	; (80083a4 <hci_register_io_bus+0x3c>)
 8008396:	6093      	str	r3, [r2, #8]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	200008b4 	.word	0x200008b4

080083a8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08e      	sub	sp, #56	; 0x38
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	885b      	ldrh	r3, [r3, #2]
 80083b8:	b21b      	sxth	r3, r3
 80083ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083be:	b21a      	sxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b21b      	sxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80083d2:	f107 0308 	add.w	r3, r7, #8
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 f978 	bl	80086cc <list_init_head>

  free_event_list();
 80083dc:	f7ff ff64 	bl	80082a8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8818      	ldrh	r0, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	8859      	ldrh	r1, [r3, #2]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f7ff fefd 	bl	80081f0 <send_cmd>
  
  if (async)
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <hci_send_req+0x58>
  {
    return 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e0e2      	b.n	80085c6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008400:	f7fa f8a2 	bl	8002548 <HAL_GetTick>
 8008404:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008406:	f7fa f89f 	bl	8002548 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008414:	f200 80b3 	bhi.w	800857e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008418:	486d      	ldr	r0, [pc, #436]	; (80085d0 <hci_send_req+0x228>)
 800841a:	f000 f967 	bl	80086ec <list_is_empty>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d000      	beq.n	8008426 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008424:	e7ef      	b.n	8008406 <hci_send_req+0x5e>
      {
        break;
 8008426:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008428:	f107 0310 	add.w	r3, r7, #16
 800842c:	4619      	mov	r1, r3
 800842e:	4868      	ldr	r0, [pc, #416]	; (80085d0 <hci_send_req+0x228>)
 8008430:	f000 f9eb 	bl	800880a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	3308      	adds	r3, #8
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d17f      	bne.n	8008542 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	3301      	adds	r3, #1
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3308      	adds	r3, #8
 800844c:	3303      	adds	r3, #3
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008456:	3b03      	subs	r3, #3
 8008458:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b3e      	cmp	r3, #62	; 0x3e
 8008460:	d04c      	beq.n	80084fc <hci_send_req+0x154>
 8008462:	2b3e      	cmp	r3, #62	; 0x3e
 8008464:	dc68      	bgt.n	8008538 <hci_send_req+0x190>
 8008466:	2b10      	cmp	r3, #16
 8008468:	f000 808b 	beq.w	8008582 <hci_send_req+0x1da>
 800846c:	2b10      	cmp	r3, #16
 800846e:	dc63      	bgt.n	8008538 <hci_send_req+0x190>
 8008470:	2b0e      	cmp	r3, #14
 8008472:	d023      	beq.n	80084bc <hci_send_req+0x114>
 8008474:	2b0f      	cmp	r3, #15
 8008476:	d15f      	bne.n	8008538 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	885b      	ldrh	r3, [r3, #2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008484:	429a      	cmp	r2, r3
 8008486:	d17e      	bne.n	8008586 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b0f      	cmp	r3, #15
 800848e:	d004      	beq.n	800849a <hci_send_req+0xf2>
          if (cs->status) {
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d051      	beq.n	800853c <hci_send_req+0x194>
            goto failed;
 8008498:	e078      	b.n	800858c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	bf28      	it	cs
 80084a4:	461a      	movcs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6918      	ldr	r0, [r3, #16]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084b6:	f000 fd61 	bl	8008f7c <memcpy>
        goto done;
 80084ba:	e078      	b.n	80085ae <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d15d      	bne.n	800858a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	3303      	adds	r3, #3
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	3b03      	subs	r3, #3
 80084d8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bf28      	it	cs
 80084e4:	461a      	movcs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6918      	ldr	r0, [r3, #16]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	f000 fd41 	bl	8008f7c <memcpy>
        goto done;
 80084fa:	e058      	b.n	80085ae <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d118      	bne.n	8008540 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	3b01      	subs	r3, #1
 8008512:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	429a      	cmp	r2, r3
 800851c:	bf28      	it	cs
 800851e:	461a      	movcs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6918      	ldr	r0, [r3, #16]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	461a      	mov	r2, r3
 8008532:	f000 fd23 	bl	8008f7c <memcpy>
        goto done;
 8008536:	e03a      	b.n	80085ae <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <hci_send_req+0x19a>
          break;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <hci_send_req+0x19a>
          break;
 8008540:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008542:	4824      	ldr	r0, [pc, #144]	; (80085d4 <hci_send_req+0x22c>)
 8008544:	f000 f8d2 	bl	80086ec <list_is_empty>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00d      	beq.n	800856a <hci_send_req+0x1c2>
 800854e:	4820      	ldr	r0, [pc, #128]	; (80085d0 <hci_send_req+0x228>)
 8008550:	f000 f8cc 	bl	80086ec <list_is_empty>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4619      	mov	r1, r3
 800855e:	481d      	ldr	r0, [pc, #116]	; (80085d4 <hci_send_req+0x22c>)
 8008560:	f000 f90c 	bl	800877c <list_insert_tail>
      hciReadPacket=NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	e008      	b.n	800857c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f902 	bl	800877c <list_insert_tail>
      hciReadPacket=NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	613b      	str	r3, [r7, #16]
  {
 800857c:	e740      	b.n	8008400 <hci_send_req+0x58>
        goto failed;
 800857e:	bf00      	nop
 8008580:	e004      	b.n	800858c <hci_send_req+0x1e4>
        goto failed;
 8008582:	bf00      	nop
 8008584:	e002      	b.n	800858c <hci_send_req+0x1e4>
          goto failed;
 8008586:	bf00      	nop
 8008588:	e000      	b.n	800858c <hci_send_req+0x1e4>
          goto failed;
 800858a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	4619      	mov	r1, r3
 8008596:	480f      	ldr	r0, [pc, #60]	; (80085d4 <hci_send_req+0x22c>)
 8008598:	f000 f8ca 	bl	8008730 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4619      	mov	r1, r3
 80085a2:	480b      	ldr	r0, [pc, #44]	; (80085d0 <hci_send_req+0x228>)
 80085a4:	f7ff fe64 	bl	8008270 <move_list>

  return -1;
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	e00b      	b.n	80085c6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4619      	mov	r1, r3
 80085b2:	4808      	ldr	r0, [pc, #32]	; (80085d4 <hci_send_req+0x22c>)
 80085b4:	f000 f8bc 	bl	8008730 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80085b8:	f107 0308 	add.w	r3, r7, #8
 80085bc:	4619      	mov	r1, r3
 80085be:	4804      	ldr	r0, [pc, #16]	; (80085d0 <hci_send_req+0x228>)
 80085c0:	f7ff fe56 	bl	8008270 <move_list>

  return 0;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3738      	adds	r7, #56	; 0x38
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000334 	.word	0x20000334
 80085d4:	2000032c 	.word	0x2000032c

080085d8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80085e2:	e013      	b.n	800860c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80085e4:	1d3b      	adds	r3, r7, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	480e      	ldr	r0, [pc, #56]	; (8008624 <hci_user_evt_proc+0x4c>)
 80085ea:	f000 f90e 	bl	800880a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085ee:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <hci_user_evt_proc+0x50>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <hci_user_evt_proc+0x50>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	3208      	adds	r2, #8
 80085fe:	4610      	mov	r0, r2
 8008600:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4619      	mov	r1, r3
 8008606:	4809      	ldr	r0, [pc, #36]	; (800862c <hci_user_evt_proc+0x54>)
 8008608:	f000 f8b8 	bl	800877c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800860c:	4805      	ldr	r0, [pc, #20]	; (8008624 <hci_user_evt_proc+0x4c>)
 800860e:	f000 f86d 	bl	80086ec <list_is_empty>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0e5      	beq.n	80085e4 <hci_user_evt_proc+0xc>
  }
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000334 	.word	0x20000334
 8008628:	200008b4 	.word	0x200008b4
 800862c:	2000032c 	.word	0x2000032c

08008630 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008640:	481f      	ldr	r0, [pc, #124]	; (80086c0 <hci_notify_asynch_evt+0x90>)
 8008642:	f000 f853 	bl	80086ec <list_is_empty>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d132      	bne.n	80086b2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4619      	mov	r1, r3
 8008652:	481b      	ldr	r0, [pc, #108]	; (80086c0 <hci_notify_asynch_evt+0x90>)
 8008654:	f000 f8d9 	bl	800880a <list_remove_head>
    
    if (hciContext.io.Receive)
 8008658:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <hci_notify_asynch_evt+0x94>)
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02a      	beq.n	80086b6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008660:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <hci_notify_asynch_evt+0x94>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	3208      	adds	r2, #8
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
 800866e:	4603      	mov	r3, r0
 8008670:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008672:	7cfb      	ldrb	r3, [r7, #19]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d016      	beq.n	80086a6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	7cfa      	ldrb	r2, [r7, #19]
 800867c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fd93 	bl	80081ae <verify_packet>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d105      	bne.n	800869a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4619      	mov	r1, r3
 8008692:	480d      	ldr	r0, [pc, #52]	; (80086c8 <hci_notify_asynch_evt+0x98>)
 8008694:	f000 f872 	bl	800877c <list_insert_tail>
 8008698:	e00d      	b.n	80086b6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4619      	mov	r1, r3
 800869e:	4808      	ldr	r0, [pc, #32]	; (80086c0 <hci_notify_asynch_evt+0x90>)
 80086a0:	f000 f846 	bl	8008730 <list_insert_head>
 80086a4:	e007      	b.n	80086b6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4619      	mov	r1, r3
 80086aa:	4805      	ldr	r0, [pc, #20]	; (80086c0 <hci_notify_asynch_evt+0x90>)
 80086ac:	f000 f840 	bl	8008730 <list_insert_head>
 80086b0:	e001      	b.n	80086b6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80086b6:	697b      	ldr	r3, [r7, #20]
  
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	2000032c 	.word	0x2000032c
 80086c4:	200008b4 	.word	0x200008b4
 80086c8:	20000334 	.word	0x20000334

080086cc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f4:	f3ef 8310 	mrs	r3, PRIMASK
 80086f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086fa:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80086fe:	b672      	cpsid	i
}
 8008700:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d102      	bne.n	8008712 <list_is_empty+0x26>
  {
    return_value = 1;
 800870c:	2301      	movs	r3, #1
 800870e:	75fb      	strb	r3, [r7, #23]
 8008710:	e001      	b.n	8008716 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f383 8810 	msr	PRIMASK, r3
}
 8008720:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
}
 8008724:	4618      	mov	r0, r3
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873a:	f3ef 8310 	mrs	r3, PRIMASK
 800873e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008740:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008744:	b672      	cpsid	i
}
 8008746:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f383 8810 	msr	PRIMASK, r3
}
 800876e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008786:	f3ef 8310 	mrs	r3, PRIMASK
 800878a:	60fb      	str	r3, [r7, #12]
  return(result);
 800878c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800878e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008790:	b672      	cpsid	i
}
 8008792:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f383 8810 	msr	PRIMASK, r3
}
 80087ba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087bc:	bf00      	nop
 80087be:	371c      	adds	r7, #28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d0:	f3ef 8310 	mrs	r3, PRIMASK
 80087d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087da:	b672      	cpsid	i
}
 80087dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6852      	ldr	r2, [r2, #4]
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f383 8810 	msr	PRIMASK, r3
}
 80087fc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008814:	f3ef 8310 	mrs	r3, PRIMASK
 8008818:	60fb      	str	r3, [r7, #12]
  return(result);
 800881a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800881c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800881e:	b672      	cpsid	i
}
 8008820:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff ffca 	bl	80087c8 <list_remove_node>
  (*node)->next = NULL;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008850:	bf00      	nop
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008862:	f3ef 8310 	mrs	r3, PRIMASK
 8008866:	60fb      	str	r3, [r7, #12]
  return(result);
 8008868:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800886a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800886c:	b672      	cpsid	i
}
 800886e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff ffa3 	bl	80087c8 <list_remove_node>
  (*node)->next = NULL;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f383 8810 	msr	PRIMASK, r3
}
 800889c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800889e:	bf00      	nop
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b089      	sub	sp, #36	; 0x24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  int size = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	613b      	str	r3, [r7, #16]
  return(result);
 80088b8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088bc:	b672      	cpsid	i
}
 80088be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80088c6:	e005      	b.n	80088d4 <list_get_size+0x2e>
  {
    size++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d1f5      	bne.n	80088c8 <list_get_size+0x22>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f383 8810 	msr	PRIMASK, r3
}
 80088e6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80088e8:	69fb      	ldr	r3, [r7, #28]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3724      	adds	r7, #36	; 0x24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <__sflush_r>:
 80088f8:	898a      	ldrh	r2, [r1, #12]
 80088fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	4605      	mov	r5, r0
 8008900:	0710      	lsls	r0, r2, #28
 8008902:	460c      	mov	r4, r1
 8008904:	d458      	bmi.n	80089b8 <__sflush_r+0xc0>
 8008906:	684b      	ldr	r3, [r1, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dc05      	bgt.n	8008918 <__sflush_r+0x20>
 800890c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	dc02      	bgt.n	8008918 <__sflush_r+0x20>
 8008912:	2000      	movs	r0, #0
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891a:	2e00      	cmp	r6, #0
 800891c:	d0f9      	beq.n	8008912 <__sflush_r+0x1a>
 800891e:	2300      	movs	r3, #0
 8008920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008924:	682f      	ldr	r7, [r5, #0]
 8008926:	6a21      	ldr	r1, [r4, #32]
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	d032      	beq.n	8008992 <__sflush_r+0x9a>
 800892c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	075a      	lsls	r2, r3, #29
 8008932:	d505      	bpl.n	8008940 <__sflush_r+0x48>
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	1ac0      	subs	r0, r0, r3
 8008938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800893a:	b10b      	cbz	r3, 8008940 <__sflush_r+0x48>
 800893c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893e:	1ac0      	subs	r0, r0, r3
 8008940:	2300      	movs	r3, #0
 8008942:	4602      	mov	r2, r0
 8008944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008946:	6a21      	ldr	r1, [r4, #32]
 8008948:	4628      	mov	r0, r5
 800894a:	47b0      	blx	r6
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	d106      	bne.n	8008960 <__sflush_r+0x68>
 8008952:	6829      	ldr	r1, [r5, #0]
 8008954:	291d      	cmp	r1, #29
 8008956:	d82b      	bhi.n	80089b0 <__sflush_r+0xb8>
 8008958:	4a29      	ldr	r2, [pc, #164]	; (8008a00 <__sflush_r+0x108>)
 800895a:	410a      	asrs	r2, r1
 800895c:	07d6      	lsls	r6, r2, #31
 800895e:	d427      	bmi.n	80089b0 <__sflush_r+0xb8>
 8008960:	2200      	movs	r2, #0
 8008962:	6062      	str	r2, [r4, #4]
 8008964:	04d9      	lsls	r1, r3, #19
 8008966:	6922      	ldr	r2, [r4, #16]
 8008968:	6022      	str	r2, [r4, #0]
 800896a:	d504      	bpl.n	8008976 <__sflush_r+0x7e>
 800896c:	1c42      	adds	r2, r0, #1
 800896e:	d101      	bne.n	8008974 <__sflush_r+0x7c>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b903      	cbnz	r3, 8008976 <__sflush_r+0x7e>
 8008974:	6560      	str	r0, [r4, #84]	; 0x54
 8008976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008978:	602f      	str	r7, [r5, #0]
 800897a:	2900      	cmp	r1, #0
 800897c:	d0c9      	beq.n	8008912 <__sflush_r+0x1a>
 800897e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008982:	4299      	cmp	r1, r3
 8008984:	d002      	beq.n	800898c <__sflush_r+0x94>
 8008986:	4628      	mov	r0, r5
 8008988:	f000 fb06 	bl	8008f98 <_free_r>
 800898c:	2000      	movs	r0, #0
 800898e:	6360      	str	r0, [r4, #52]	; 0x34
 8008990:	e7c0      	b.n	8008914 <__sflush_r+0x1c>
 8008992:	2301      	movs	r3, #1
 8008994:	4628      	mov	r0, r5
 8008996:	47b0      	blx	r6
 8008998:	1c41      	adds	r1, r0, #1
 800899a:	d1c8      	bne.n	800892e <__sflush_r+0x36>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c5      	beq.n	800892e <__sflush_r+0x36>
 80089a2:	2b1d      	cmp	r3, #29
 80089a4:	d001      	beq.n	80089aa <__sflush_r+0xb2>
 80089a6:	2b16      	cmp	r3, #22
 80089a8:	d101      	bne.n	80089ae <__sflush_r+0xb6>
 80089aa:	602f      	str	r7, [r5, #0]
 80089ac:	e7b1      	b.n	8008912 <__sflush_r+0x1a>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7ad      	b.n	8008914 <__sflush_r+0x1c>
 80089b8:	690f      	ldr	r7, [r1, #16]
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	d0a9      	beq.n	8008912 <__sflush_r+0x1a>
 80089be:	0793      	lsls	r3, r2, #30
 80089c0:	680e      	ldr	r6, [r1, #0]
 80089c2:	bf08      	it	eq
 80089c4:	694b      	ldreq	r3, [r1, #20]
 80089c6:	600f      	str	r7, [r1, #0]
 80089c8:	bf18      	it	ne
 80089ca:	2300      	movne	r3, #0
 80089cc:	eba6 0807 	sub.w	r8, r6, r7
 80089d0:	608b      	str	r3, [r1, #8]
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	dd9c      	ble.n	8008912 <__sflush_r+0x1a>
 80089d8:	6a21      	ldr	r1, [r4, #32]
 80089da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089dc:	4643      	mov	r3, r8
 80089de:	463a      	mov	r2, r7
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b0      	blx	r6
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dc06      	bgt.n	80089f6 <__sflush_r+0xfe>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e78e      	b.n	8008914 <__sflush_r+0x1c>
 80089f6:	4407      	add	r7, r0
 80089f8:	eba8 0800 	sub.w	r8, r8, r0
 80089fc:	e7e9      	b.n	80089d2 <__sflush_r+0xda>
 80089fe:	bf00      	nop
 8008a00:	dfbffffe 	.word	0xdfbffffe

08008a04 <_fflush_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b913      	cbnz	r3, 8008a14 <_fflush_r+0x10>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	4628      	mov	r0, r5
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	b118      	cbz	r0, 8008a1e <_fflush_r+0x1a>
 8008a16:	6a03      	ldr	r3, [r0, #32]
 8008a18:	b90b      	cbnz	r3, 8008a1e <_fflush_r+0x1a>
 8008a1a:	f000 f8a9 	bl	8008b70 <__sinit>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0f3      	beq.n	8008a0e <_fflush_r+0xa>
 8008a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a28:	07d0      	lsls	r0, r2, #31
 8008a2a:	d404      	bmi.n	8008a36 <_fflush_r+0x32>
 8008a2c:	0599      	lsls	r1, r3, #22
 8008a2e:	d402      	bmi.n	8008a36 <_fflush_r+0x32>
 8008a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a32:	f000 faa1 	bl	8008f78 <__retarget_lock_acquire_recursive>
 8008a36:	4628      	mov	r0, r5
 8008a38:	4621      	mov	r1, r4
 8008a3a:	f7ff ff5d 	bl	80088f8 <__sflush_r>
 8008a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a40:	07da      	lsls	r2, r3, #31
 8008a42:	4605      	mov	r5, r0
 8008a44:	d4e4      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	059b      	lsls	r3, r3, #22
 8008a4a:	d4e1      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4e:	f000 fa94 	bl	8008f7a <__retarget_lock_release_recursive>
 8008a52:	e7dd      	b.n	8008a10 <_fflush_r+0xc>

08008a54 <fflush>:
 8008a54:	4601      	mov	r1, r0
 8008a56:	b920      	cbnz	r0, 8008a62 <fflush+0xe>
 8008a58:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <fflush+0x18>)
 8008a5a:	4905      	ldr	r1, [pc, #20]	; (8008a70 <fflush+0x1c>)
 8008a5c:	4805      	ldr	r0, [pc, #20]	; (8008a74 <fflush+0x20>)
 8008a5e:	f000 b89f 	b.w	8008ba0 <_fwalk_sglue>
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <fflush+0x24>)
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	f7ff bfcd 	b.w	8008a04 <_fflush_r>
 8008a6a:	bf00      	nop
 8008a6c:	20000020 	.word	0x20000020
 8008a70:	08008a05 	.word	0x08008a05
 8008a74:	2000002c 	.word	0x2000002c
 8008a78:	20000078 	.word	0x20000078

08008a7c <std>:
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	4604      	mov	r4, r0
 8008a82:	e9c0 3300 	strd	r3, r3, [r0]
 8008a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	8181      	strh	r1, [r0, #12]
 8008a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a90:	81c2      	strh	r2, [r0, #14]
 8008a92:	6183      	str	r3, [r0, #24]
 8008a94:	4619      	mov	r1, r3
 8008a96:	2208      	movs	r2, #8
 8008a98:	305c      	adds	r0, #92	; 0x5c
 8008a9a:	f000 f9f5 	bl	8008e88 <memset>
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x38>)
 8008aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x3c>)
 8008aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x40>)
 8008aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x44>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08008cb9 	.word	0x08008cb9
 8008ab8:	08008cdb 	.word	0x08008cdb
 8008abc:	08008d13 	.word	0x08008d13
 8008ac0:	08008d37 	.word	0x08008d37

08008ac4 <stdio_exit_handler>:
 8008ac4:	4a02      	ldr	r2, [pc, #8]	; (8008ad0 <stdio_exit_handler+0xc>)
 8008ac6:	4903      	ldr	r1, [pc, #12]	; (8008ad4 <stdio_exit_handler+0x10>)
 8008ac8:	4803      	ldr	r0, [pc, #12]	; (8008ad8 <stdio_exit_handler+0x14>)
 8008aca:	f000 b869 	b.w	8008ba0 <_fwalk_sglue>
 8008ace:	bf00      	nop
 8008ad0:	20000020 	.word	0x20000020
 8008ad4:	08008a05 	.word	0x08008a05
 8008ad8:	2000002c 	.word	0x2000002c

08008adc <cleanup_stdio>:
 8008adc:	6841      	ldr	r1, [r0, #4]
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <cleanup_stdio+0x34>)
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	d001      	beq.n	8008aec <cleanup_stdio+0x10>
 8008ae8:	f7ff ff8c 	bl	8008a04 <_fflush_r>
 8008aec:	68a1      	ldr	r1, [r4, #8]
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <cleanup_stdio+0x38>)
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d002      	beq.n	8008afa <cleanup_stdio+0x1e>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f7ff ff85 	bl	8008a04 <_fflush_r>
 8008afa:	68e1      	ldr	r1, [r4, #12]
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <cleanup_stdio+0x3c>)
 8008afe:	4299      	cmp	r1, r3
 8008b00:	d004      	beq.n	8008b0c <cleanup_stdio+0x30>
 8008b02:	4620      	mov	r0, r4
 8008b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b08:	f7ff bf7c 	b.w	8008a04 <_fflush_r>
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	bf00      	nop
 8008b10:	200008d4 	.word	0x200008d4
 8008b14:	2000093c 	.word	0x2000093c
 8008b18:	200009a4 	.word	0x200009a4

08008b1c <global_stdio_init.part.0>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <global_stdio_init.part.0+0x30>)
 8008b20:	4c0b      	ldr	r4, [pc, #44]	; (8008b50 <global_stdio_init.part.0+0x34>)
 8008b22:	4a0c      	ldr	r2, [pc, #48]	; (8008b54 <global_stdio_init.part.0+0x38>)
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	4620      	mov	r0, r4
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	f7ff ffa6 	bl	8008a7c <std>
 8008b30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b34:	2201      	movs	r2, #1
 8008b36:	2109      	movs	r1, #9
 8008b38:	f7ff ffa0 	bl	8008a7c <std>
 8008b3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b40:	2202      	movs	r2, #2
 8008b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b46:	2112      	movs	r1, #18
 8008b48:	f7ff bf98 	b.w	8008a7c <std>
 8008b4c:	20000a0c 	.word	0x20000a0c
 8008b50:	200008d4 	.word	0x200008d4
 8008b54:	08008ac5 	.word	0x08008ac5

08008b58 <__sfp_lock_acquire>:
 8008b58:	4801      	ldr	r0, [pc, #4]	; (8008b60 <__sfp_lock_acquire+0x8>)
 8008b5a:	f000 ba0d 	b.w	8008f78 <__retarget_lock_acquire_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20000a15 	.word	0x20000a15

08008b64 <__sfp_lock_release>:
 8008b64:	4801      	ldr	r0, [pc, #4]	; (8008b6c <__sfp_lock_release+0x8>)
 8008b66:	f000 ba08 	b.w	8008f7a <__retarget_lock_release_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	20000a15 	.word	0x20000a15

08008b70 <__sinit>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4604      	mov	r4, r0
 8008b74:	f7ff fff0 	bl	8008b58 <__sfp_lock_acquire>
 8008b78:	6a23      	ldr	r3, [r4, #32]
 8008b7a:	b11b      	cbz	r3, 8008b84 <__sinit+0x14>
 8008b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b80:	f7ff bff0 	b.w	8008b64 <__sfp_lock_release>
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <__sinit+0x28>)
 8008b86:	6223      	str	r3, [r4, #32]
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <__sinit+0x2c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f5      	bne.n	8008b7c <__sinit+0xc>
 8008b90:	f7ff ffc4 	bl	8008b1c <global_stdio_init.part.0>
 8008b94:	e7f2      	b.n	8008b7c <__sinit+0xc>
 8008b96:	bf00      	nop
 8008b98:	08008add 	.word	0x08008add
 8008b9c:	20000a0c 	.word	0x20000a0c

08008ba0 <_fwalk_sglue>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	4688      	mov	r8, r1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	2600      	movs	r6, #0
 8008bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8008bb4:	d505      	bpl.n	8008bc2 <_fwalk_sglue+0x22>
 8008bb6:	6824      	ldr	r4, [r4, #0]
 8008bb8:	2c00      	cmp	r4, #0
 8008bba:	d1f7      	bne.n	8008bac <_fwalk_sglue+0xc>
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	89ab      	ldrh	r3, [r5, #12]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d907      	bls.n	8008bd8 <_fwalk_sglue+0x38>
 8008bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	d003      	beq.n	8008bd8 <_fwalk_sglue+0x38>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c0      	blx	r8
 8008bd6:	4306      	orrs	r6, r0
 8008bd8:	3568      	adds	r5, #104	; 0x68
 8008bda:	e7e9      	b.n	8008bb0 <_fwalk_sglue+0x10>

08008bdc <iprintf>:
 8008bdc:	b40f      	push	{r0, r1, r2, r3}
 8008bde:	b507      	push	{r0, r1, r2, lr}
 8008be0:	4906      	ldr	r1, [pc, #24]	; (8008bfc <iprintf+0x20>)
 8008be2:	ab04      	add	r3, sp, #16
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	6881      	ldr	r1, [r0, #8]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f000 faf5 	bl	80091dc <_vfiprintf_r>
 8008bf2:	b003      	add	sp, #12
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b004      	add	sp, #16
 8008bfa:	4770      	bx	lr
 8008bfc:	20000078 	.word	0x20000078

08008c00 <_puts_r>:
 8008c00:	6a03      	ldr	r3, [r0, #32]
 8008c02:	b570      	push	{r4, r5, r6, lr}
 8008c04:	6884      	ldr	r4, [r0, #8]
 8008c06:	4605      	mov	r5, r0
 8008c08:	460e      	mov	r6, r1
 8008c0a:	b90b      	cbnz	r3, 8008c10 <_puts_r+0x10>
 8008c0c:	f7ff ffb0 	bl	8008b70 <__sinit>
 8008c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d405      	bmi.n	8008c22 <_puts_r+0x22>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	0598      	lsls	r0, r3, #22
 8008c1a:	d402      	bmi.n	8008c22 <_puts_r+0x22>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1e:	f000 f9ab 	bl	8008f78 <__retarget_lock_acquire_recursive>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	0719      	lsls	r1, r3, #28
 8008c26:	d513      	bpl.n	8008c50 <_puts_r+0x50>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b18b      	cbz	r3, 8008c50 <_puts_r+0x50>
 8008c2c:	3e01      	subs	r6, #1
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c34:	3b01      	subs	r3, #1
 8008c36:	60a3      	str	r3, [r4, #8]
 8008c38:	b9e9      	cbnz	r1, 8008c76 <_puts_r+0x76>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	da2e      	bge.n	8008c9c <_puts_r+0x9c>
 8008c3e:	4622      	mov	r2, r4
 8008c40:	210a      	movs	r1, #10
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 f87b 	bl	8008d3e <__swbuf_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d007      	beq.n	8008c5c <_puts_r+0x5c>
 8008c4c:	250a      	movs	r5, #10
 8008c4e:	e007      	b.n	8008c60 <_puts_r+0x60>
 8008c50:	4621      	mov	r1, r4
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f8b0 	bl	8008db8 <__swsetup_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d0e7      	beq.n	8008c2c <_puts_r+0x2c>
 8008c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c62:	07da      	lsls	r2, r3, #31
 8008c64:	d405      	bmi.n	8008c72 <_puts_r+0x72>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	059b      	lsls	r3, r3, #22
 8008c6a:	d402      	bmi.n	8008c72 <_puts_r+0x72>
 8008c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6e:	f000 f984 	bl	8008f7a <__retarget_lock_release_recursive>
 8008c72:	4628      	mov	r0, r5
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da04      	bge.n	8008c84 <_puts_r+0x84>
 8008c7a:	69a2      	ldr	r2, [r4, #24]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	dc06      	bgt.n	8008c8e <_puts_r+0x8e>
 8008c80:	290a      	cmp	r1, #10
 8008c82:	d004      	beq.n	8008c8e <_puts_r+0x8e>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	6022      	str	r2, [r4, #0]
 8008c8a:	7019      	strb	r1, [r3, #0]
 8008c8c:	e7cf      	b.n	8008c2e <_puts_r+0x2e>
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	f000 f854 	bl	8008d3e <__swbuf_r>
 8008c96:	3001      	adds	r0, #1
 8008c98:	d1c9      	bne.n	8008c2e <_puts_r+0x2e>
 8008c9a:	e7df      	b.n	8008c5c <_puts_r+0x5c>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	250a      	movs	r5, #10
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	701d      	strb	r5, [r3, #0]
 8008ca6:	e7db      	b.n	8008c60 <_puts_r+0x60>

08008ca8 <puts>:
 8008ca8:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <puts+0xc>)
 8008caa:	4601      	mov	r1, r0
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f7ff bfa7 	b.w	8008c00 <_puts_r>
 8008cb2:	bf00      	nop
 8008cb4:	20000078 	.word	0x20000078

08008cb8 <__sread>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	460c      	mov	r4, r1
 8008cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc0:	f000 f90c 	bl	8008edc <_read_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	bfab      	itete	ge
 8008cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cca:	89a3      	ldrhlt	r3, [r4, #12]
 8008ccc:	181b      	addge	r3, r3, r0
 8008cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cd2:	bfac      	ite	ge
 8008cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cd6:	81a3      	strhlt	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}

08008cda <__swrite>:
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	461f      	mov	r7, r3
 8008ce0:	898b      	ldrh	r3, [r1, #12]
 8008ce2:	05db      	lsls	r3, r3, #23
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	4616      	mov	r6, r2
 8008cea:	d505      	bpl.n	8008cf8 <__swrite+0x1e>
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f000 f8e0 	bl	8008eb8 <_lseek_r>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	4628      	mov	r0, r5
 8008d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	f000 b8f7 	b.w	8008f00 <_write_r>

08008d12 <__sseek>:
 8008d12:	b510      	push	{r4, lr}
 8008d14:	460c      	mov	r4, r1
 8008d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1a:	f000 f8cd 	bl	8008eb8 <_lseek_r>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	bf15      	itete	ne
 8008d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d2e:	81a3      	strheq	r3, [r4, #12]
 8008d30:	bf18      	it	ne
 8008d32:	81a3      	strhne	r3, [r4, #12]
 8008d34:	bd10      	pop	{r4, pc}

08008d36 <__sclose>:
 8008d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3a:	f000 b8ad 	b.w	8008e98 <_close_r>

08008d3e <__swbuf_r>:
 8008d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d40:	460e      	mov	r6, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	4605      	mov	r5, r0
 8008d46:	b118      	cbz	r0, 8008d50 <__swbuf_r+0x12>
 8008d48:	6a03      	ldr	r3, [r0, #32]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <__swbuf_r+0x12>
 8008d4c:	f7ff ff10 	bl	8008b70 <__sinit>
 8008d50:	69a3      	ldr	r3, [r4, #24]
 8008d52:	60a3      	str	r3, [r4, #8]
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	071a      	lsls	r2, r3, #28
 8008d58:	d525      	bpl.n	8008da6 <__swbuf_r+0x68>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	b31b      	cbz	r3, 8008da6 <__swbuf_r+0x68>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	6922      	ldr	r2, [r4, #16]
 8008d62:	1a98      	subs	r0, r3, r2
 8008d64:	6963      	ldr	r3, [r4, #20]
 8008d66:	b2f6      	uxtb	r6, r6
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	4637      	mov	r7, r6
 8008d6c:	dc04      	bgt.n	8008d78 <__swbuf_r+0x3a>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7ff fe47 	bl	8008a04 <_fflush_r>
 8008d76:	b9e0      	cbnz	r0, 8008db2 <__swbuf_r+0x74>
 8008d78:	68a3      	ldr	r3, [r4, #8]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	6022      	str	r2, [r4, #0]
 8008d84:	701e      	strb	r6, [r3, #0]
 8008d86:	6962      	ldr	r2, [r4, #20]
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d004      	beq.n	8008d98 <__swbuf_r+0x5a>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d506      	bpl.n	8008da2 <__swbuf_r+0x64>
 8008d94:	2e0a      	cmp	r6, #10
 8008d96:	d104      	bne.n	8008da2 <__swbuf_r+0x64>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7ff fe32 	bl	8008a04 <_fflush_r>
 8008da0:	b938      	cbnz	r0, 8008db2 <__swbuf_r+0x74>
 8008da2:	4638      	mov	r0, r7
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da6:	4621      	mov	r1, r4
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 f805 	bl	8008db8 <__swsetup_r>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d0d5      	beq.n	8008d5e <__swbuf_r+0x20>
 8008db2:	f04f 37ff 	mov.w	r7, #4294967295
 8008db6:	e7f4      	b.n	8008da2 <__swbuf_r+0x64>

08008db8 <__swsetup_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4b2a      	ldr	r3, [pc, #168]	; (8008e64 <__swsetup_r+0xac>)
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	b118      	cbz	r0, 8008dcc <__swsetup_r+0x14>
 8008dc4:	6a03      	ldr	r3, [r0, #32]
 8008dc6:	b90b      	cbnz	r3, 8008dcc <__swsetup_r+0x14>
 8008dc8:	f7ff fed2 	bl	8008b70 <__sinit>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dd2:	0718      	lsls	r0, r3, #28
 8008dd4:	d422      	bmi.n	8008e1c <__swsetup_r+0x64>
 8008dd6:	06d9      	lsls	r1, r3, #27
 8008dd8:	d407      	bmi.n	8008dea <__swsetup_r+0x32>
 8008dda:	2309      	movs	r3, #9
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	e034      	b.n	8008e54 <__swsetup_r+0x9c>
 8008dea:	0758      	lsls	r0, r3, #29
 8008dec:	d512      	bpl.n	8008e14 <__swsetup_r+0x5c>
 8008dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df0:	b141      	cbz	r1, 8008e04 <__swsetup_r+0x4c>
 8008df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df6:	4299      	cmp	r1, r3
 8008df8:	d002      	beq.n	8008e00 <__swsetup_r+0x48>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f8cc 	bl	8008f98 <_free_r>
 8008e00:	2300      	movs	r3, #0
 8008e02:	6363      	str	r3, [r4, #52]	; 0x34
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f043 0308 	orr.w	r3, r3, #8
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	b94b      	cbnz	r3, 8008e34 <__swsetup_r+0x7c>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2a:	d003      	beq.n	8008e34 <__swsetup_r+0x7c>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 fca4 	bl	800977c <__smakebuf_r>
 8008e34:	89a0      	ldrh	r0, [r4, #12]
 8008e36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e3a:	f010 0301 	ands.w	r3, r0, #1
 8008e3e:	d00a      	beq.n	8008e56 <__swsetup_r+0x9e>
 8008e40:	2300      	movs	r3, #0
 8008e42:	60a3      	str	r3, [r4, #8]
 8008e44:	6963      	ldr	r3, [r4, #20]
 8008e46:	425b      	negs	r3, r3
 8008e48:	61a3      	str	r3, [r4, #24]
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	b943      	cbnz	r3, 8008e60 <__swsetup_r+0xa8>
 8008e4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e52:	d1c4      	bne.n	8008dde <__swsetup_r+0x26>
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	0781      	lsls	r1, r0, #30
 8008e58:	bf58      	it	pl
 8008e5a:	6963      	ldrpl	r3, [r4, #20]
 8008e5c:	60a3      	str	r3, [r4, #8]
 8008e5e:	e7f4      	b.n	8008e4a <__swsetup_r+0x92>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e7f7      	b.n	8008e54 <__swsetup_r+0x9c>
 8008e64:	20000078 	.word	0x20000078

08008e68 <memcmp>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	3901      	subs	r1, #1
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4290      	cmp	r0, r2
 8008e70:	d101      	bne.n	8008e76 <memcmp+0xe>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e005      	b.n	8008e82 <memcmp+0x1a>
 8008e76:	7803      	ldrb	r3, [r0, #0]
 8008e78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d001      	beq.n	8008e84 <memcmp+0x1c>
 8008e80:	1b18      	subs	r0, r3, r4
 8008e82:	bd10      	pop	{r4, pc}
 8008e84:	3001      	adds	r0, #1
 8008e86:	e7f2      	b.n	8008e6e <memcmp+0x6>

08008e88 <memset>:
 8008e88:	4402      	add	r2, r0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d100      	bne.n	8008e92 <memset+0xa>
 8008e90:	4770      	bx	lr
 8008e92:	f803 1b01 	strb.w	r1, [r3], #1
 8008e96:	e7f9      	b.n	8008e8c <memset+0x4>

08008e98 <_close_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d06      	ldr	r5, [pc, #24]	; (8008eb4 <_close_r+0x1c>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	602b      	str	r3, [r5, #0]
 8008ea4:	f7f9 fa63 	bl	800236e <_close>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_close_r+0x1a>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_close_r+0x1a>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	20000a10 	.word	0x20000a10

08008eb8 <_lseek_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d07      	ldr	r5, [pc, #28]	; (8008ed8 <_lseek_r+0x20>)
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f9 fa78 	bl	80023bc <_lseek>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_lseek_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_lseek_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20000a10 	.word	0x20000a10

08008edc <_read_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_read_r+0x20>)
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f9 fa06 	bl	80022fc <_read>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_read_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_read_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000a10 	.word	0x20000a10

08008f00 <_write_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_write_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f9 fa11 	bl	8002336 <_write>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_write_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_write_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000a10 	.word	0x20000a10

08008f24 <__errno>:
 8008f24:	4b01      	ldr	r3, [pc, #4]	; (8008f2c <__errno+0x8>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000078 	.word	0x20000078

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	; (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	; (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	; (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	; (8008f74 <__libc_init_array+0x44>)
 8008f44:	f000 fc88 	bl	8009858 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	0800a17c 	.word	0x0800a17c
 8008f6c:	0800a17c 	.word	0x0800a17c
 8008f70:	0800a17c 	.word	0x0800a17c
 8008f74:	0800a180 	.word	0x0800a180

08008f78 <__retarget_lock_acquire_recursive>:
 8008f78:	4770      	bx	lr

08008f7a <__retarget_lock_release_recursive>:
 8008f7a:	4770      	bx	lr

08008f7c <memcpy>:
 8008f7c:	440a      	add	r2, r1
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f84:	d100      	bne.n	8008f88 <memcpy+0xc>
 8008f86:	4770      	bx	lr
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f92:	4291      	cmp	r1, r2
 8008f94:	d1f9      	bne.n	8008f8a <memcpy+0xe>
 8008f96:	bd10      	pop	{r4, pc}

08008f98 <_free_r>:
 8008f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	d044      	beq.n	8009028 <_free_r+0x90>
 8008f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa2:	9001      	str	r0, [sp, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8008faa:	bfb8      	it	lt
 8008fac:	18e4      	addlt	r4, r4, r3
 8008fae:	f000 f8df 	bl	8009170 <__malloc_lock>
 8008fb2:	4a1e      	ldr	r2, [pc, #120]	; (800902c <_free_r+0x94>)
 8008fb4:	9801      	ldr	r0, [sp, #4]
 8008fb6:	6813      	ldr	r3, [r2, #0]
 8008fb8:	b933      	cbnz	r3, 8008fc8 <_free_r+0x30>
 8008fba:	6063      	str	r3, [r4, #4]
 8008fbc:	6014      	str	r4, [r2, #0]
 8008fbe:	b003      	add	sp, #12
 8008fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fc4:	f000 b8da 	b.w	800917c <__malloc_unlock>
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	d908      	bls.n	8008fde <_free_r+0x46>
 8008fcc:	6825      	ldr	r5, [r4, #0]
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf01      	itttt	eq
 8008fd4:	6819      	ldreq	r1, [r3, #0]
 8008fd6:	685b      	ldreq	r3, [r3, #4]
 8008fd8:	1949      	addeq	r1, r1, r5
 8008fda:	6021      	streq	r1, [r4, #0]
 8008fdc:	e7ed      	b.n	8008fba <_free_r+0x22>
 8008fde:	461a      	mov	r2, r3
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	b10b      	cbz	r3, 8008fe8 <_free_r+0x50>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d9fa      	bls.n	8008fde <_free_r+0x46>
 8008fe8:	6811      	ldr	r1, [r2, #0]
 8008fea:	1855      	adds	r5, r2, r1
 8008fec:	42a5      	cmp	r5, r4
 8008fee:	d10b      	bne.n	8009008 <_free_r+0x70>
 8008ff0:	6824      	ldr	r4, [r4, #0]
 8008ff2:	4421      	add	r1, r4
 8008ff4:	1854      	adds	r4, r2, r1
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	6011      	str	r1, [r2, #0]
 8008ffa:	d1e0      	bne.n	8008fbe <_free_r+0x26>
 8008ffc:	681c      	ldr	r4, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	6053      	str	r3, [r2, #4]
 8009002:	440c      	add	r4, r1
 8009004:	6014      	str	r4, [r2, #0]
 8009006:	e7da      	b.n	8008fbe <_free_r+0x26>
 8009008:	d902      	bls.n	8009010 <_free_r+0x78>
 800900a:	230c      	movs	r3, #12
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	e7d6      	b.n	8008fbe <_free_r+0x26>
 8009010:	6825      	ldr	r5, [r4, #0]
 8009012:	1961      	adds	r1, r4, r5
 8009014:	428b      	cmp	r3, r1
 8009016:	bf04      	itt	eq
 8009018:	6819      	ldreq	r1, [r3, #0]
 800901a:	685b      	ldreq	r3, [r3, #4]
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	bf04      	itt	eq
 8009020:	1949      	addeq	r1, r1, r5
 8009022:	6021      	streq	r1, [r4, #0]
 8009024:	6054      	str	r4, [r2, #4]
 8009026:	e7ca      	b.n	8008fbe <_free_r+0x26>
 8009028:	b003      	add	sp, #12
 800902a:	bd30      	pop	{r4, r5, pc}
 800902c:	20000a18 	.word	0x20000a18

08009030 <sbrk_aligned>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4e0e      	ldr	r6, [pc, #56]	; (800906c <sbrk_aligned+0x3c>)
 8009034:	460c      	mov	r4, r1
 8009036:	6831      	ldr	r1, [r6, #0]
 8009038:	4605      	mov	r5, r0
 800903a:	b911      	cbnz	r1, 8009042 <sbrk_aligned+0x12>
 800903c:	f000 fbfc 	bl	8009838 <_sbrk_r>
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 fbf7 	bl	8009838 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d00a      	beq.n	8009064 <sbrk_aligned+0x34>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d007      	beq.n	8009068 <sbrk_aligned+0x38>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fbec 	bl	8009838 <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d101      	bne.n	8009068 <sbrk_aligned+0x38>
 8009064:	f04f 34ff 	mov.w	r4, #4294967295
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	20000a1c 	.word	0x20000a1c

08009070 <_malloc_r>:
 8009070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009074:	1ccd      	adds	r5, r1, #3
 8009076:	f025 0503 	bic.w	r5, r5, #3
 800907a:	3508      	adds	r5, #8
 800907c:	2d0c      	cmp	r5, #12
 800907e:	bf38      	it	cc
 8009080:	250c      	movcc	r5, #12
 8009082:	2d00      	cmp	r5, #0
 8009084:	4607      	mov	r7, r0
 8009086:	db01      	blt.n	800908c <_malloc_r+0x1c>
 8009088:	42a9      	cmp	r1, r5
 800908a:	d905      	bls.n	8009098 <_malloc_r+0x28>
 800908c:	230c      	movs	r3, #12
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	2600      	movs	r6, #0
 8009092:	4630      	mov	r0, r6
 8009094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009098:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800916c <_malloc_r+0xfc>
 800909c:	f000 f868 	bl	8009170 <__malloc_lock>
 80090a0:	f8d8 3000 	ldr.w	r3, [r8]
 80090a4:	461c      	mov	r4, r3
 80090a6:	bb5c      	cbnz	r4, 8009100 <_malloc_r+0x90>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4638      	mov	r0, r7
 80090ac:	f7ff ffc0 	bl	8009030 <sbrk_aligned>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	4604      	mov	r4, r0
 80090b4:	d155      	bne.n	8009162 <_malloc_r+0xf2>
 80090b6:	f8d8 4000 	ldr.w	r4, [r8]
 80090ba:	4626      	mov	r6, r4
 80090bc:	2e00      	cmp	r6, #0
 80090be:	d145      	bne.n	800914c <_malloc_r+0xdc>
 80090c0:	2c00      	cmp	r4, #0
 80090c2:	d048      	beq.n	8009156 <_malloc_r+0xe6>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	4631      	mov	r1, r6
 80090c8:	4638      	mov	r0, r7
 80090ca:	eb04 0903 	add.w	r9, r4, r3
 80090ce:	f000 fbb3 	bl	8009838 <_sbrk_r>
 80090d2:	4581      	cmp	r9, r0
 80090d4:	d13f      	bne.n	8009156 <_malloc_r+0xe6>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	1a6d      	subs	r5, r5, r1
 80090da:	4629      	mov	r1, r5
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff ffa7 	bl	8009030 <sbrk_aligned>
 80090e2:	3001      	adds	r0, #1
 80090e4:	d037      	beq.n	8009156 <_malloc_r+0xe6>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	442b      	add	r3, r5
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	f8d8 3000 	ldr.w	r3, [r8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d038      	beq.n	8009166 <_malloc_r+0xf6>
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	42a2      	cmp	r2, r4
 80090f8:	d12b      	bne.n	8009152 <_malloc_r+0xe2>
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
 80090fe:	e00f      	b.n	8009120 <_malloc_r+0xb0>
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	1b52      	subs	r2, r2, r5
 8009104:	d41f      	bmi.n	8009146 <_malloc_r+0xd6>
 8009106:	2a0b      	cmp	r2, #11
 8009108:	d917      	bls.n	800913a <_malloc_r+0xca>
 800910a:	1961      	adds	r1, r4, r5
 800910c:	42a3      	cmp	r3, r4
 800910e:	6025      	str	r5, [r4, #0]
 8009110:	bf18      	it	ne
 8009112:	6059      	strne	r1, [r3, #4]
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	bf08      	it	eq
 8009118:	f8c8 1000 	streq.w	r1, [r8]
 800911c:	5162      	str	r2, [r4, r5]
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	4638      	mov	r0, r7
 8009122:	f104 060b 	add.w	r6, r4, #11
 8009126:	f000 f829 	bl	800917c <__malloc_unlock>
 800912a:	f026 0607 	bic.w	r6, r6, #7
 800912e:	1d23      	adds	r3, r4, #4
 8009130:	1af2      	subs	r2, r6, r3
 8009132:	d0ae      	beq.n	8009092 <_malloc_r+0x22>
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	50a3      	str	r3, [r4, r2]
 8009138:	e7ab      	b.n	8009092 <_malloc_r+0x22>
 800913a:	42a3      	cmp	r3, r4
 800913c:	6862      	ldr	r2, [r4, #4]
 800913e:	d1dd      	bne.n	80090fc <_malloc_r+0x8c>
 8009140:	f8c8 2000 	str.w	r2, [r8]
 8009144:	e7ec      	b.n	8009120 <_malloc_r+0xb0>
 8009146:	4623      	mov	r3, r4
 8009148:	6864      	ldr	r4, [r4, #4]
 800914a:	e7ac      	b.n	80090a6 <_malloc_r+0x36>
 800914c:	4634      	mov	r4, r6
 800914e:	6876      	ldr	r6, [r6, #4]
 8009150:	e7b4      	b.n	80090bc <_malloc_r+0x4c>
 8009152:	4613      	mov	r3, r2
 8009154:	e7cc      	b.n	80090f0 <_malloc_r+0x80>
 8009156:	230c      	movs	r3, #12
 8009158:	603b      	str	r3, [r7, #0]
 800915a:	4638      	mov	r0, r7
 800915c:	f000 f80e 	bl	800917c <__malloc_unlock>
 8009160:	e797      	b.n	8009092 <_malloc_r+0x22>
 8009162:	6025      	str	r5, [r4, #0]
 8009164:	e7dc      	b.n	8009120 <_malloc_r+0xb0>
 8009166:	605b      	str	r3, [r3, #4]
 8009168:	deff      	udf	#255	; 0xff
 800916a:	bf00      	nop
 800916c:	20000a18 	.word	0x20000a18

08009170 <__malloc_lock>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__malloc_lock+0x8>)
 8009172:	f7ff bf01 	b.w	8008f78 <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	20000a14 	.word	0x20000a14

0800917c <__malloc_unlock>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__malloc_unlock+0x8>)
 800917e:	f7ff befc 	b.w	8008f7a <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	20000a14 	.word	0x20000a14

08009188 <__sfputc_r>:
 8009188:	6893      	ldr	r3, [r2, #8]
 800918a:	3b01      	subs	r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	b410      	push	{r4}
 8009190:	6093      	str	r3, [r2, #8]
 8009192:	da08      	bge.n	80091a6 <__sfputc_r+0x1e>
 8009194:	6994      	ldr	r4, [r2, #24]
 8009196:	42a3      	cmp	r3, r4
 8009198:	db01      	blt.n	800919e <__sfputc_r+0x16>
 800919a:	290a      	cmp	r1, #10
 800919c:	d103      	bne.n	80091a6 <__sfputc_r+0x1e>
 800919e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a2:	f7ff bdcc 	b.w	8008d3e <__swbuf_r>
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	1c58      	adds	r0, r3, #1
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	7019      	strb	r1, [r3, #0]
 80091ae:	4608      	mov	r0, r1
 80091b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <__sfputs_r>:
 80091b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	460f      	mov	r7, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	18d5      	adds	r5, r2, r3
 80091c0:	42ac      	cmp	r4, r5
 80091c2:	d101      	bne.n	80091c8 <__sfputs_r+0x12>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e007      	b.n	80091d8 <__sfputs_r+0x22>
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	463a      	mov	r2, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffda 	bl	8009188 <__sfputc_r>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d1f3      	bne.n	80091c0 <__sfputs_r+0xa>
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091dc <_vfiprintf_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	460d      	mov	r5, r1
 80091e2:	b09d      	sub	sp, #116	; 0x74
 80091e4:	4614      	mov	r4, r2
 80091e6:	4698      	mov	r8, r3
 80091e8:	4606      	mov	r6, r0
 80091ea:	b118      	cbz	r0, 80091f4 <_vfiprintf_r+0x18>
 80091ec:	6a03      	ldr	r3, [r0, #32]
 80091ee:	b90b      	cbnz	r3, 80091f4 <_vfiprintf_r+0x18>
 80091f0:	f7ff fcbe 	bl	8008b70 <__sinit>
 80091f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f6:	07d9      	lsls	r1, r3, #31
 80091f8:	d405      	bmi.n	8009206 <_vfiprintf_r+0x2a>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	059a      	lsls	r2, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_vfiprintf_r+0x2a>
 8009200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009202:	f7ff feb9 	bl	8008f78 <__retarget_lock_acquire_recursive>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	071b      	lsls	r3, r3, #28
 800920a:	d501      	bpl.n	8009210 <_vfiprintf_r+0x34>
 800920c:	692b      	ldr	r3, [r5, #16]
 800920e:	b99b      	cbnz	r3, 8009238 <_vfiprintf_r+0x5c>
 8009210:	4629      	mov	r1, r5
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff fdd0 	bl	8008db8 <__swsetup_r>
 8009218:	b170      	cbz	r0, 8009238 <_vfiprintf_r+0x5c>
 800921a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800921c:	07dc      	lsls	r4, r3, #31
 800921e:	d504      	bpl.n	800922a <_vfiprintf_r+0x4e>
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	b01d      	add	sp, #116	; 0x74
 8009226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	0598      	lsls	r0, r3, #22
 800922e:	d4f7      	bmi.n	8009220 <_vfiprintf_r+0x44>
 8009230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009232:	f7ff fea2 	bl	8008f7a <__retarget_lock_release_recursive>
 8009236:	e7f3      	b.n	8009220 <_vfiprintf_r+0x44>
 8009238:	2300      	movs	r3, #0
 800923a:	9309      	str	r3, [sp, #36]	; 0x24
 800923c:	2320      	movs	r3, #32
 800923e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009242:	f8cd 800c 	str.w	r8, [sp, #12]
 8009246:	2330      	movs	r3, #48	; 0x30
 8009248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093fc <_vfiprintf_r+0x220>
 800924c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009250:	f04f 0901 	mov.w	r9, #1
 8009254:	4623      	mov	r3, r4
 8009256:	469a      	mov	sl, r3
 8009258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800925c:	b10a      	cbz	r2, 8009262 <_vfiprintf_r+0x86>
 800925e:	2a25      	cmp	r2, #37	; 0x25
 8009260:	d1f9      	bne.n	8009256 <_vfiprintf_r+0x7a>
 8009262:	ebba 0b04 	subs.w	fp, sl, r4
 8009266:	d00b      	beq.n	8009280 <_vfiprintf_r+0xa4>
 8009268:	465b      	mov	r3, fp
 800926a:	4622      	mov	r2, r4
 800926c:	4629      	mov	r1, r5
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ffa1 	bl	80091b6 <__sfputs_r>
 8009274:	3001      	adds	r0, #1
 8009276:	f000 80a9 	beq.w	80093cc <_vfiprintf_r+0x1f0>
 800927a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927c:	445a      	add	r2, fp
 800927e:	9209      	str	r2, [sp, #36]	; 0x24
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80a1 	beq.w	80093cc <_vfiprintf_r+0x1f0>
 800928a:	2300      	movs	r3, #0
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009294:	f10a 0a01 	add.w	sl, sl, #1
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	9307      	str	r3, [sp, #28]
 800929c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a0:	931a      	str	r3, [sp, #104]	; 0x68
 80092a2:	4654      	mov	r4, sl
 80092a4:	2205      	movs	r2, #5
 80092a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092aa:	4854      	ldr	r0, [pc, #336]	; (80093fc <_vfiprintf_r+0x220>)
 80092ac:	f7f6 ff90 	bl	80001d0 <memchr>
 80092b0:	9a04      	ldr	r2, [sp, #16]
 80092b2:	b9d8      	cbnz	r0, 80092ec <_vfiprintf_r+0x110>
 80092b4:	06d1      	lsls	r1, r2, #27
 80092b6:	bf44      	itt	mi
 80092b8:	2320      	movmi	r3, #32
 80092ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092be:	0713      	lsls	r3, r2, #28
 80092c0:	bf44      	itt	mi
 80092c2:	232b      	movmi	r3, #43	; 0x2b
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c8:	f89a 3000 	ldrb.w	r3, [sl]
 80092cc:	2b2a      	cmp	r3, #42	; 0x2a
 80092ce:	d015      	beq.n	80092fc <_vfiprintf_r+0x120>
 80092d0:	9a07      	ldr	r2, [sp, #28]
 80092d2:	4654      	mov	r4, sl
 80092d4:	2000      	movs	r0, #0
 80092d6:	f04f 0c0a 	mov.w	ip, #10
 80092da:	4621      	mov	r1, r4
 80092dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e0:	3b30      	subs	r3, #48	; 0x30
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d94d      	bls.n	8009382 <_vfiprintf_r+0x1a6>
 80092e6:	b1b0      	cbz	r0, 8009316 <_vfiprintf_r+0x13a>
 80092e8:	9207      	str	r2, [sp, #28]
 80092ea:	e014      	b.n	8009316 <_vfiprintf_r+0x13a>
 80092ec:	eba0 0308 	sub.w	r3, r0, r8
 80092f0:	fa09 f303 	lsl.w	r3, r9, r3
 80092f4:	4313      	orrs	r3, r2
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	46a2      	mov	sl, r4
 80092fa:	e7d2      	b.n	80092a2 <_vfiprintf_r+0xc6>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	1d19      	adds	r1, r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	9103      	str	r1, [sp, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfbb      	ittet	lt
 8009308:	425b      	neglt	r3, r3
 800930a:	f042 0202 	orrlt.w	r2, r2, #2
 800930e:	9307      	strge	r3, [sp, #28]
 8009310:	9307      	strlt	r3, [sp, #28]
 8009312:	bfb8      	it	lt
 8009314:	9204      	strlt	r2, [sp, #16]
 8009316:	7823      	ldrb	r3, [r4, #0]
 8009318:	2b2e      	cmp	r3, #46	; 0x2e
 800931a:	d10c      	bne.n	8009336 <_vfiprintf_r+0x15a>
 800931c:	7863      	ldrb	r3, [r4, #1]
 800931e:	2b2a      	cmp	r3, #42	; 0x2a
 8009320:	d134      	bne.n	800938c <_vfiprintf_r+0x1b0>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	1d1a      	adds	r2, r3, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	9203      	str	r2, [sp, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfb8      	it	lt
 800932e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009332:	3402      	adds	r4, #2
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800940c <_vfiprintf_r+0x230>
 800933a:	7821      	ldrb	r1, [r4, #0]
 800933c:	2203      	movs	r2, #3
 800933e:	4650      	mov	r0, sl
 8009340:	f7f6 ff46 	bl	80001d0 <memchr>
 8009344:	b138      	cbz	r0, 8009356 <_vfiprintf_r+0x17a>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	eba0 000a 	sub.w	r0, r0, sl
 800934c:	2240      	movs	r2, #64	; 0x40
 800934e:	4082      	lsls	r2, r0
 8009350:	4313      	orrs	r3, r2
 8009352:	3401      	adds	r4, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	4829      	ldr	r0, [pc, #164]	; (8009400 <_vfiprintf_r+0x224>)
 800935c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009360:	2206      	movs	r2, #6
 8009362:	f7f6 ff35 	bl	80001d0 <memchr>
 8009366:	2800      	cmp	r0, #0
 8009368:	d03f      	beq.n	80093ea <_vfiprintf_r+0x20e>
 800936a:	4b26      	ldr	r3, [pc, #152]	; (8009404 <_vfiprintf_r+0x228>)
 800936c:	bb1b      	cbnz	r3, 80093b6 <_vfiprintf_r+0x1da>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	3307      	adds	r3, #7
 8009372:	f023 0307 	bic.w	r3, r3, #7
 8009376:	3308      	adds	r3, #8
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937c:	443b      	add	r3, r7
 800937e:	9309      	str	r3, [sp, #36]	; 0x24
 8009380:	e768      	b.n	8009254 <_vfiprintf_r+0x78>
 8009382:	fb0c 3202 	mla	r2, ip, r2, r3
 8009386:	460c      	mov	r4, r1
 8009388:	2001      	movs	r0, #1
 800938a:	e7a6      	b.n	80092da <_vfiprintf_r+0xfe>
 800938c:	2300      	movs	r3, #0
 800938e:	3401      	adds	r4, #1
 8009390:	9305      	str	r3, [sp, #20]
 8009392:	4619      	mov	r1, r3
 8009394:	f04f 0c0a 	mov.w	ip, #10
 8009398:	4620      	mov	r0, r4
 800939a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800939e:	3a30      	subs	r2, #48	; 0x30
 80093a0:	2a09      	cmp	r2, #9
 80093a2:	d903      	bls.n	80093ac <_vfiprintf_r+0x1d0>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0c6      	beq.n	8009336 <_vfiprintf_r+0x15a>
 80093a8:	9105      	str	r1, [sp, #20]
 80093aa:	e7c4      	b.n	8009336 <_vfiprintf_r+0x15a>
 80093ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b0:	4604      	mov	r4, r0
 80093b2:	2301      	movs	r3, #1
 80093b4:	e7f0      	b.n	8009398 <_vfiprintf_r+0x1bc>
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	462a      	mov	r2, r5
 80093bc:	4b12      	ldr	r3, [pc, #72]	; (8009408 <_vfiprintf_r+0x22c>)
 80093be:	a904      	add	r1, sp, #16
 80093c0:	4630      	mov	r0, r6
 80093c2:	f3af 8000 	nop.w
 80093c6:	4607      	mov	r7, r0
 80093c8:	1c78      	adds	r0, r7, #1
 80093ca:	d1d6      	bne.n	800937a <_vfiprintf_r+0x19e>
 80093cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d405      	bmi.n	80093de <_vfiprintf_r+0x202>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d402      	bmi.n	80093de <_vfiprintf_r+0x202>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f7ff fdce 	bl	8008f7a <__retarget_lock_release_recursive>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	065b      	lsls	r3, r3, #25
 80093e2:	f53f af1d 	bmi.w	8009220 <_vfiprintf_r+0x44>
 80093e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e8:	e71c      	b.n	8009224 <_vfiprintf_r+0x48>
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	462a      	mov	r2, r5
 80093f0:	4b05      	ldr	r3, [pc, #20]	; (8009408 <_vfiprintf_r+0x22c>)
 80093f2:	a904      	add	r1, sp, #16
 80093f4:	4630      	mov	r0, r6
 80093f6:	f000 f879 	bl	80094ec <_printf_i>
 80093fa:	e7e4      	b.n	80093c6 <_vfiprintf_r+0x1ea>
 80093fc:	0800a140 	.word	0x0800a140
 8009400:	0800a14a 	.word	0x0800a14a
 8009404:	00000000 	.word	0x00000000
 8009408:	080091b7 	.word	0x080091b7
 800940c:	0800a146 	.word	0x0800a146

08009410 <_printf_common>:
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	4616      	mov	r6, r2
 8009416:	4699      	mov	r9, r3
 8009418:	688a      	ldr	r2, [r1, #8]
 800941a:	690b      	ldr	r3, [r1, #16]
 800941c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009420:	4293      	cmp	r3, r2
 8009422:	bfb8      	it	lt
 8009424:	4613      	movlt	r3, r2
 8009426:	6033      	str	r3, [r6, #0]
 8009428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800942c:	4607      	mov	r7, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b10a      	cbz	r2, 8009436 <_printf_common+0x26>
 8009432:	3301      	adds	r3, #1
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	0699      	lsls	r1, r3, #26
 800943a:	bf42      	ittt	mi
 800943c:	6833      	ldrmi	r3, [r6, #0]
 800943e:	3302      	addmi	r3, #2
 8009440:	6033      	strmi	r3, [r6, #0]
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	f015 0506 	ands.w	r5, r5, #6
 8009448:	d106      	bne.n	8009458 <_printf_common+0x48>
 800944a:	f104 0a19 	add.w	sl, r4, #25
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	6832      	ldr	r2, [r6, #0]
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	42ab      	cmp	r3, r5
 8009456:	dc26      	bgt.n	80094a6 <_printf_common+0x96>
 8009458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800945c:	1e13      	subs	r3, r2, #0
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	bf18      	it	ne
 8009462:	2301      	movne	r3, #1
 8009464:	0692      	lsls	r2, r2, #26
 8009466:	d42b      	bmi.n	80094c0 <_printf_common+0xb0>
 8009468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800946c:	4649      	mov	r1, r9
 800946e:	4638      	mov	r0, r7
 8009470:	47c0      	blx	r8
 8009472:	3001      	adds	r0, #1
 8009474:	d01e      	beq.n	80094b4 <_printf_common+0xa4>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	6922      	ldr	r2, [r4, #16]
 800947a:	f003 0306 	and.w	r3, r3, #6
 800947e:	2b04      	cmp	r3, #4
 8009480:	bf02      	ittt	eq
 8009482:	68e5      	ldreq	r5, [r4, #12]
 8009484:	6833      	ldreq	r3, [r6, #0]
 8009486:	1aed      	subeq	r5, r5, r3
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	bf0c      	ite	eq
 800948c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009490:	2500      	movne	r5, #0
 8009492:	4293      	cmp	r3, r2
 8009494:	bfc4      	itt	gt
 8009496:	1a9b      	subgt	r3, r3, r2
 8009498:	18ed      	addgt	r5, r5, r3
 800949a:	2600      	movs	r6, #0
 800949c:	341a      	adds	r4, #26
 800949e:	42b5      	cmp	r5, r6
 80094a0:	d11a      	bne.n	80094d8 <_printf_common+0xc8>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e008      	b.n	80094b8 <_printf_common+0xa8>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4652      	mov	r2, sl
 80094aa:	4649      	mov	r1, r9
 80094ac:	4638      	mov	r0, r7
 80094ae:	47c0      	blx	r8
 80094b0:	3001      	adds	r0, #1
 80094b2:	d103      	bne.n	80094bc <_printf_common+0xac>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094bc:	3501      	adds	r5, #1
 80094be:	e7c6      	b.n	800944e <_printf_common+0x3e>
 80094c0:	18e1      	adds	r1, r4, r3
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	2030      	movs	r0, #48	; 0x30
 80094c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ca:	4422      	add	r2, r4
 80094cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094d4:	3302      	adds	r3, #2
 80094d6:	e7c7      	b.n	8009468 <_printf_common+0x58>
 80094d8:	2301      	movs	r3, #1
 80094da:	4622      	mov	r2, r4
 80094dc:	4649      	mov	r1, r9
 80094de:	4638      	mov	r0, r7
 80094e0:	47c0      	blx	r8
 80094e2:	3001      	adds	r0, #1
 80094e4:	d0e6      	beq.n	80094b4 <_printf_common+0xa4>
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7d9      	b.n	800949e <_printf_common+0x8e>
	...

080094ec <_printf_i>:
 80094ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	7e0f      	ldrb	r7, [r1, #24]
 80094f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094f4:	2f78      	cmp	r7, #120	; 0x78
 80094f6:	4691      	mov	r9, r2
 80094f8:	4680      	mov	r8, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	469a      	mov	sl, r3
 80094fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009502:	d807      	bhi.n	8009514 <_printf_i+0x28>
 8009504:	2f62      	cmp	r7, #98	; 0x62
 8009506:	d80a      	bhi.n	800951e <_printf_i+0x32>
 8009508:	2f00      	cmp	r7, #0
 800950a:	f000 80d4 	beq.w	80096b6 <_printf_i+0x1ca>
 800950e:	2f58      	cmp	r7, #88	; 0x58
 8009510:	f000 80c0 	beq.w	8009694 <_printf_i+0x1a8>
 8009514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800951c:	e03a      	b.n	8009594 <_printf_i+0xa8>
 800951e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009522:	2b15      	cmp	r3, #21
 8009524:	d8f6      	bhi.n	8009514 <_printf_i+0x28>
 8009526:	a101      	add	r1, pc, #4	; (adr r1, 800952c <_printf_i+0x40>)
 8009528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800952c:	08009585 	.word	0x08009585
 8009530:	08009599 	.word	0x08009599
 8009534:	08009515 	.word	0x08009515
 8009538:	08009515 	.word	0x08009515
 800953c:	08009515 	.word	0x08009515
 8009540:	08009515 	.word	0x08009515
 8009544:	08009599 	.word	0x08009599
 8009548:	08009515 	.word	0x08009515
 800954c:	08009515 	.word	0x08009515
 8009550:	08009515 	.word	0x08009515
 8009554:	08009515 	.word	0x08009515
 8009558:	0800969d 	.word	0x0800969d
 800955c:	080095c5 	.word	0x080095c5
 8009560:	08009657 	.word	0x08009657
 8009564:	08009515 	.word	0x08009515
 8009568:	08009515 	.word	0x08009515
 800956c:	080096bf 	.word	0x080096bf
 8009570:	08009515 	.word	0x08009515
 8009574:	080095c5 	.word	0x080095c5
 8009578:	08009515 	.word	0x08009515
 800957c:	08009515 	.word	0x08009515
 8009580:	0800965f 	.word	0x0800965f
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	1d1a      	adds	r2, r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009594:	2301      	movs	r3, #1
 8009596:	e09f      	b.n	80096d8 <_printf_i+0x1ec>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	0607      	lsls	r7, r0, #24
 800959e:	f103 0104 	add.w	r1, r3, #4
 80095a2:	6029      	str	r1, [r5, #0]
 80095a4:	d501      	bpl.n	80095aa <_printf_i+0xbe>
 80095a6:	681e      	ldr	r6, [r3, #0]
 80095a8:	e003      	b.n	80095b2 <_printf_i+0xc6>
 80095aa:	0646      	lsls	r6, r0, #25
 80095ac:	d5fb      	bpl.n	80095a6 <_printf_i+0xba>
 80095ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	da03      	bge.n	80095be <_printf_i+0xd2>
 80095b6:	232d      	movs	r3, #45	; 0x2d
 80095b8:	4276      	negs	r6, r6
 80095ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095be:	485a      	ldr	r0, [pc, #360]	; (8009728 <_printf_i+0x23c>)
 80095c0:	230a      	movs	r3, #10
 80095c2:	e012      	b.n	80095ea <_printf_i+0xfe>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	1d19      	adds	r1, r3, #4
 80095ca:	6029      	str	r1, [r5, #0]
 80095cc:	0605      	lsls	r5, r0, #24
 80095ce:	d501      	bpl.n	80095d4 <_printf_i+0xe8>
 80095d0:	681e      	ldr	r6, [r3, #0]
 80095d2:	e002      	b.n	80095da <_printf_i+0xee>
 80095d4:	0641      	lsls	r1, r0, #25
 80095d6:	d5fb      	bpl.n	80095d0 <_printf_i+0xe4>
 80095d8:	881e      	ldrh	r6, [r3, #0]
 80095da:	4853      	ldr	r0, [pc, #332]	; (8009728 <_printf_i+0x23c>)
 80095dc:	2f6f      	cmp	r7, #111	; 0x6f
 80095de:	bf0c      	ite	eq
 80095e0:	2308      	moveq	r3, #8
 80095e2:	230a      	movne	r3, #10
 80095e4:	2100      	movs	r1, #0
 80095e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ea:	6865      	ldr	r5, [r4, #4]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	bfa2      	ittt	ge
 80095f2:	6821      	ldrge	r1, [r4, #0]
 80095f4:	f021 0104 	bicge.w	r1, r1, #4
 80095f8:	6021      	strge	r1, [r4, #0]
 80095fa:	b90e      	cbnz	r6, 8009600 <_printf_i+0x114>
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	d04b      	beq.n	8009698 <_printf_i+0x1ac>
 8009600:	4615      	mov	r5, r2
 8009602:	fbb6 f1f3 	udiv	r1, r6, r3
 8009606:	fb03 6711 	mls	r7, r3, r1, r6
 800960a:	5dc7      	ldrb	r7, [r0, r7]
 800960c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009610:	4637      	mov	r7, r6
 8009612:	42bb      	cmp	r3, r7
 8009614:	460e      	mov	r6, r1
 8009616:	d9f4      	bls.n	8009602 <_printf_i+0x116>
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <_printf_i+0x148>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07de      	lsls	r6, r3, #31
 8009620:	d508      	bpl.n	8009634 <_printf_i+0x148>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	bfde      	ittt	le
 800962a:	2330      	movle	r3, #48	; 0x30
 800962c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009634:	1b52      	subs	r2, r2, r5
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	f8cd a000 	str.w	sl, [sp]
 800963c:	464b      	mov	r3, r9
 800963e:	aa03      	add	r2, sp, #12
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fee4 	bl	8009410 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	d14a      	bne.n	80096e2 <_printf_i+0x1f6>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b004      	add	sp, #16
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	4833      	ldr	r0, [pc, #204]	; (800972c <_printf_i+0x240>)
 8009660:	2778      	movs	r7, #120	; 0x78
 8009662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6829      	ldr	r1, [r5, #0]
 800966a:	061f      	lsls	r7, r3, #24
 800966c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009670:	d402      	bmi.n	8009678 <_printf_i+0x18c>
 8009672:	065f      	lsls	r7, r3, #25
 8009674:	bf48      	it	mi
 8009676:	b2b6      	uxthmi	r6, r6
 8009678:	07df      	lsls	r7, r3, #31
 800967a:	bf48      	it	mi
 800967c:	f043 0320 	orrmi.w	r3, r3, #32
 8009680:	6029      	str	r1, [r5, #0]
 8009682:	bf48      	it	mi
 8009684:	6023      	strmi	r3, [r4, #0]
 8009686:	b91e      	cbnz	r6, 8009690 <_printf_i+0x1a4>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	f023 0320 	bic.w	r3, r3, #32
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	2310      	movs	r3, #16
 8009692:	e7a7      	b.n	80095e4 <_printf_i+0xf8>
 8009694:	4824      	ldr	r0, [pc, #144]	; (8009728 <_printf_i+0x23c>)
 8009696:	e7e4      	b.n	8009662 <_printf_i+0x176>
 8009698:	4615      	mov	r5, r2
 800969a:	e7bd      	b.n	8009618 <_printf_i+0x12c>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	6826      	ldr	r6, [r4, #0]
 80096a0:	6961      	ldr	r1, [r4, #20]
 80096a2:	1d18      	adds	r0, r3, #4
 80096a4:	6028      	str	r0, [r5, #0]
 80096a6:	0635      	lsls	r5, r6, #24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0x1c4>
 80096ac:	6019      	str	r1, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0x1ca>
 80096b0:	0670      	lsls	r0, r6, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0x1c0>
 80096b4:	8019      	strh	r1, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	4615      	mov	r5, r2
 80096bc:	e7bc      	b.n	8009638 <_printf_i+0x14c>
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	602a      	str	r2, [r5, #0]
 80096c4:	681d      	ldr	r5, [r3, #0]
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4628      	mov	r0, r5
 80096cc:	f7f6 fd80 	bl	80001d0 <memchr>
 80096d0:	b108      	cbz	r0, 80096d6 <_printf_i+0x1ea>
 80096d2:	1b40      	subs	r0, r0, r5
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	2300      	movs	r3, #0
 80096dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e0:	e7aa      	b.n	8009638 <_printf_i+0x14c>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	462a      	mov	r2, r5
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0ad      	beq.n	800964c <_printf_i+0x160>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	d413      	bmi.n	800971e <_printf_i+0x232>
 80096f6:	68e0      	ldr	r0, [r4, #12]
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bfb8      	it	lt
 80096fe:	4618      	movlt	r0, r3
 8009700:	e7a6      	b.n	8009650 <_printf_i+0x164>
 8009702:	2301      	movs	r3, #1
 8009704:	4632      	mov	r2, r6
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d09d      	beq.n	800964c <_printf_i+0x160>
 8009710:	3501      	adds	r5, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	9903      	ldr	r1, [sp, #12]
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	42ab      	cmp	r3, r5
 800971a:	dcf2      	bgt.n	8009702 <_printf_i+0x216>
 800971c:	e7eb      	b.n	80096f6 <_printf_i+0x20a>
 800971e:	2500      	movs	r5, #0
 8009720:	f104 0619 	add.w	r6, r4, #25
 8009724:	e7f5      	b.n	8009712 <_printf_i+0x226>
 8009726:	bf00      	nop
 8009728:	0800a151 	.word	0x0800a151
 800972c:	0800a162 	.word	0x0800a162

08009730 <__swhatbuf_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	460c      	mov	r4, r1
 8009734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009738:	2900      	cmp	r1, #0
 800973a:	b096      	sub	sp, #88	; 0x58
 800973c:	4615      	mov	r5, r2
 800973e:	461e      	mov	r6, r3
 8009740:	da0d      	bge.n	800975e <__swhatbuf_r+0x2e>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009748:	f04f 0100 	mov.w	r1, #0
 800974c:	bf0c      	ite	eq
 800974e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009752:	2340      	movne	r3, #64	; 0x40
 8009754:	2000      	movs	r0, #0
 8009756:	6031      	str	r1, [r6, #0]
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	b016      	add	sp, #88	; 0x58
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	466a      	mov	r2, sp
 8009760:	f000 f848 	bl	80097f4 <_fstat_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	dbec      	blt.n	8009742 <__swhatbuf_r+0x12>
 8009768:	9901      	ldr	r1, [sp, #4]
 800976a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800976e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009772:	4259      	negs	r1, r3
 8009774:	4159      	adcs	r1, r3
 8009776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977a:	e7eb      	b.n	8009754 <__swhatbuf_r+0x24>

0800977c <__smakebuf_r>:
 800977c:	898b      	ldrh	r3, [r1, #12]
 800977e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009780:	079d      	lsls	r5, r3, #30
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	d507      	bpl.n	8009798 <__smakebuf_r+0x1c>
 8009788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	2301      	movs	r3, #1
 8009792:	6163      	str	r3, [r4, #20]
 8009794:	b002      	add	sp, #8
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	ab01      	add	r3, sp, #4
 800979a:	466a      	mov	r2, sp
 800979c:	f7ff ffc8 	bl	8009730 <__swhatbuf_r>
 80097a0:	9900      	ldr	r1, [sp, #0]
 80097a2:	4605      	mov	r5, r0
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff fc63 	bl	8009070 <_malloc_r>
 80097aa:	b948      	cbnz	r0, 80097c0 <__smakebuf_r+0x44>
 80097ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b0:	059a      	lsls	r2, r3, #22
 80097b2:	d4ef      	bmi.n	8009794 <__smakebuf_r+0x18>
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	f043 0302 	orr.w	r3, r3, #2
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e7e3      	b.n	8009788 <__smakebuf_r+0xc>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	6163      	str	r3, [r4, #20]
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	6120      	str	r0, [r4, #16]
 80097d2:	b15b      	cbz	r3, 80097ec <__smakebuf_r+0x70>
 80097d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 f81d 	bl	8009818 <_isatty_r>
 80097de:	b128      	cbz	r0, 80097ec <__smakebuf_r+0x70>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	431d      	orrs	r5, r3
 80097f0:	81a5      	strh	r5, [r4, #12]
 80097f2:	e7cf      	b.n	8009794 <__smakebuf_r+0x18>

080097f4 <_fstat_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	; (8009814 <_fstat_r+0x20>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f7f8 fdc0 	bl	8002386 <_fstat>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d102      	bne.n	8009810 <_fstat_r+0x1c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b103      	cbz	r3, 8009810 <_fstat_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20000a10 	.word	0x20000a10

08009818 <_isatty_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_isatty_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f8 fdbf 	bl	80023a6 <_isatty>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_isatty_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_isatty_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	20000a10 	.word	0x20000a10

08009838 <_sbrk_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_sbrk_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f8 fdc8 	bl	80023d8 <_sbrk>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_sbrk_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_sbrk_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000a10 	.word	0x20000a10

08009858 <_init>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr

08009864 <_fini>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	bf00      	nop
 8009868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986a:	bc08      	pop	{r3}
 800986c:	469e      	mov	lr, r3
 800986e:	4770      	bx	lr
