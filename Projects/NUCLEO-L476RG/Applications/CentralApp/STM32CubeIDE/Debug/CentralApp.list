
CentralApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a184  0800a184  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a18c  0800a18c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  20000080  0800a214  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800a214  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001da2f  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009b  00000000  00000000  0003db22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001e57f  00000000  00000000  0003dbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039fe  00000000  00000000  0005c13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001898  00000000  00000000  0005fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb3ba  00000000  00000000  000613d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000132d  00000000  00000000  0015c792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2bc  00000000  00000000  0015dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000709c  00000000  00000000  00188d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096e4 	.word	0x080096e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080096e4 	.word	0x080096e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f001 ffe0 	bl	8002534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f008 fb61 	bl	8008c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f001 fac8 	bl	8001b32 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a8:	0800a194 	.word	0x0800a194
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80005b4:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80005b8:	20000a28 	.word	0x20000a28

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <BLUENRG2_vInit>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vInit( void )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    BLUENRG2__vUserInit();
 80005c4:	f000 f826 	bl	8000614 <BLUENRG2__vUserInit>
    hci_init( APP_UserEvtRx, NULL );
 80005c8:	2100      	movs	r1, #0
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <BLUENRG2_vInit+0x34>)
 80005cc:	f007 fde4 	bl	8008198 <hci_init>
    PRINT_DBG( "BlueNRG-2 BLE Sample Application\r\n" );
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <BLUENRG2_vInit+0x38>)
 80005d2:	f008 fa01 	bl	80089d8 <puts>

    if( BLE_STATUS_SUCCESS != BLUENRG2__u8CentralAppInit() )
 80005d6:	f000 f82b 	bl	8000630 <BLUENRG2__u8CentralAppInit>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <BLUENRG2_vInit+0x28>
    {
        PRINT_DBG( "BLUENRG2__u8CentralAppInit() Failed\r\n" );
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <BLUENRG2_vInit+0x3c>)
 80005e2:	f008 f9f9 	bl	80089d8 <puts>
        while( true )
 80005e6:	e7fe      	b.n	80005e6 <BLUENRG2_vInit+0x26>
            ;
    }

    PRINT_DBG( "BLE Stack Initialized & Device Configured\r\n" );
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <BLUENRG2_vInit+0x40>)
 80005ea:	f008 f9f5 	bl	80089d8 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08001671 	.word	0x08001671
 80005f8:	080096fc 	.word	0x080096fc
 80005fc:	08009720 	.word	0x08009720
 8000600:	08009748 	.word	0x08009748

08000604 <BLUENRG2_vProcess>:
//!
//! \return
//!   None
//*****************************************************
void BLUENRG2_vProcess( void )
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

    hci_user_evt_proc();
 8000608:	f007 ff40 	bl	800848c <hci_user_evt_proc>
    BLUENRG2__vUserProcess();
 800060c:	f000 f8f0 	bl	80007f0 <BLUENRG2__vUserProcess>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <BLUENRG2__vUserInit>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserInit( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    BSP_PB_Init( BUTTON_KEY, BUTTON_MODE_GPIO );
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f001 fc42 	bl	8001ea4 <BSP_PB_Init>
    BSP_LED_Init( LED2 );
 8000620:	2000      	movs	r0, #0
 8000622:	f001 fbc3 	bl	8001dac <BSP_LED_Init>

    BSP_COM_Init( COM1 );
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fcf8 	bl	800201c <BSP_COM_Init>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <BLUENRG2__u8CentralAppInit>:
//!
//! \return
//!   Status
//*****************************************************
static uint8_t BLUENRG2__u8CentralAppInit( void )
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af06      	add	r7, sp, #24
    uint8_t       u8Ret;
    uint16_t      u16ServiceHandle, u16DevNameCharHandle, u16AppearanceCharHandle;
    uint8_t       au8BdAddr[BLUENRG2_BDADDR_BYTE_NUM] = { 0x01, 0x02, 0x03, 0xBE, 0xEF, 0xFF };
 8000636:	4a63      	ldr	r2, [pc, #396]	; (80007c4 <BLUENRG2__u8CentralAppInit+0x194>)
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000640:	6018      	str	r0, [r3, #0]
 8000642:	3304      	adds	r3, #4
 8000644:	8019      	strh	r1, [r3, #0]
    const uint8_t cu8BaAddrLen                        = (uint8_t) BLUENRG2_BDADDR_BYTE_NUM;
 8000646:	2306      	movs	r3, #6
 8000648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    hci_reset(); // Sw reset of the BLE chip
 800064c:	f007 fc72 	bl	8007f34 <hci_reset>

    HAL_Delay( 2000 ); // BlueNRG device requires 2000ms delay for booting
 8000650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000654:	f001 fffc 	bl	8002650 <HAL_Delay>

    u8Ret = BLUENRG2__u8PrintBLEFwInfo();
 8000658:	f000 fb42 	bl	8000ce0 <BLUENRG2__u8PrintBLEFwInfo>
 800065c:	4603      	mov	r3, r0
 800065e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000666:	2b00      	cmp	r3, #0
 8000668:	d005      	beq.n	8000676 <BLUENRG2__u8CentralAppInit+0x46>
    {
        PRINT_DBG( "Get Bluetooth Chip Info failed !\r\n" );
 800066a:	4857      	ldr	r0, [pc, #348]	; (80007c8 <BLUENRG2__u8CentralAppInit+0x198>)
 800066c:	f008 f9b4 	bl	80089d8 <puts>
        return u8Ret;
 8000670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000674:	e0a2      	b.n	80007bc <BLUENRG2__u8CentralAppInit+0x18c>
    }

    u8Ret = aci_hal_write_config_data( BLUENRG2_PUB_ADDR_OFFSET, cu8BaAddrLen, au8BdAddr );
 8000676:	f107 0218 	add.w	r2, r7, #24
 800067a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800067e:	4619      	mov	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f006 f8c1 	bl	8006808 <aci_hal_write_config_data>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if( ( u8Ret != BLE_STATUS_SUCCESS ) || ( 0xC0 != ( au8BdAddr[5U] & 0xC0 ) ) )
 800068c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <BLUENRG2__u8CentralAppInit+0x6e>
 8000694:	7f7b      	ldrb	r3, [r7, #29]
 8000696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800069a:	2bc0      	cmp	r3, #192	; 0xc0
 800069c:	d003      	beq.n	80006a6 <BLUENRG2__u8CentralAppInit+0x76>
    {
        PRINT_DBG( "Read Broadcast Address failed !\r\n" );
 800069e:	484b      	ldr	r0, [pc, #300]	; (80007cc <BLUENRG2__u8CentralAppInit+0x19c>)
 80006a0:	f008 f99a 	bl	80089d8 <puts>
        while( true )
 80006a4:	e7fe      	b.n	80006a4 <BLUENRG2__u8CentralAppInit+0x74>
            ;
        return u8Ret;
    }

    aci_hal_set_tx_power_level( BLUENRG2_TX_POWER_HIGH, BLUENRG2_TX_POWER_N2_DBM );
 80006a6:	2104      	movs	r1, #4
 80006a8:	2001      	movs	r0, #1
 80006aa:	f006 f93b 	bl	8006924 <aci_hal_set_tx_power_level>

    u8Ret = aci_gatt_init();
 80006ae:	f005 fcd4 	bl	800605a <aci_gatt_init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <BLUENRG2__u8CentralAppInit+0xa2>
    {
        PRINT_DBG( "GATT_Init failed: 0x%02x\r\n", u8Ret );
 80006c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006c4:	4619      	mov	r1, r3
 80006c6:	4842      	ldr	r0, [pc, #264]	; (80007d0 <BLUENRG2__u8CentralAppInit+0x1a0>)
 80006c8:	f008 f920 	bl	800890c <iprintf>
        return u8Ret;
 80006cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006d0:	e074      	b.n	80007bc <BLUENRG2__u8CentralAppInit+0x18c>
    }

    u8Ret = aci_gap_init( GAP_CENTRAL_ROLE, 0x0, (uint8_t) BLUENRG2_DEV_NAME_LEN, &u16ServiceHandle,
 80006d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4613      	mov	r3, r2
 80006e4:	2211      	movs	r2, #17
 80006e6:	2100      	movs	r1, #0
 80006e8:	2004      	movs	r0, #4
 80006ea:	f005 fa02 	bl	8005af2 <aci_gap_init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                          &u16DevNameCharHandle, &u16AppearanceCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80006f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <BLUENRG2__u8CentralAppInit+0xde>
    {
        PRINT_DBG( "GAP_Init failed: 0x%02x\r\n", u8Ret );
 80006fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000700:	4619      	mov	r1, r3
 8000702:	4834      	ldr	r0, [pc, #208]	; (80007d4 <BLUENRG2__u8CentralAppInit+0x1a4>)
 8000704:	f008 f902 	bl	800890c <iprintf>
        return u8Ret;
 8000708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800070c:	e056      	b.n	80007bc <BLUENRG2__u8CentralAppInit+0x18c>
    }

    // Update device name
    uint8_t au8TempDeviceName[BLUENRG2_DEV_NAME_LEN] = BLUENRG2_DEV_NAME;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <BLUENRG2__u8CentralAppInit+0x1a8>)
 8000710:	1d3c      	adds	r4, r7, #4
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	682b      	ldr	r3, [r5, #0]
 800071a:	7023      	strb	r3, [r4, #0]
    u8Ret = aci_gatt_update_char_value( u16ServiceHandle, u16DevNameCharHandle, (uint8_t) 0U,
 800071c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800071e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2311      	movs	r3, #17
 8000726:	2200      	movs	r2, #0
 8000728:	f005 fe9f 	bl	800646a <aci_gatt_update_char_value>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        (uint8_t) BLUENRG2_DEV_NAME_LEN, au8TempDeviceName );

    // Clear security database: this implies that each time the application is executed
    // the full bonding process is executed (with PassKey generation and setting).
    u8Ret = aci_gap_clear_security_db();
 8000732:	f005 fa8b 	bl	8005c4c <aci_gap_clear_security_db>
 8000736:	4603      	mov	r3, r0
 8000738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 800073c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <BLUENRG2__u8CentralAppInit+0x11a>
    {
        PRINT_DBG( "aci_gap_clear_security_db() failed:\r\n" );
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <BLUENRG2__u8CentralAppInit+0x1ac>)
 8000746:	f008 f947 	bl	80089d8 <puts>
    }

    //  Set the I/O capability otherwise the Central device (e.g. the smartphone) will
    //  propose a PIN that will be accepted without any control.
    if( aci_gap_set_io_capability( IO_CAP_DISPLAY_ONLY ) == BLE_STATUS_SUCCESS )
 800074a:	2000      	movs	r0, #0
 800074c:	f005 f8a7 	bl	800589e <aci_gap_set_io_capability>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <BLUENRG2__u8CentralAppInit+0x12c>
    {
        PRINT_DBG( "I/O Capability Configurated\r\n" );
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <BLUENRG2__u8CentralAppInit+0x1b0>)
 8000758:	f008 f93e 	bl	80089d8 <puts>
    }

    // BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype)
    // clang-format off
    u8Ret = aci_gap_set_authentication_requirement( BONDING, MITM_PROTECTION_NOT_REQUIRED, SC_IS_SUPPORTED,
 800075c:	2300      	movs	r3, #0
 800075e:	9304      	str	r3, [sp, #16]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <BLUENRG2__u8CentralAppInit+0x1b4>)
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	2300      	movs	r3, #0
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2310      	movs	r3, #16
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2307      	movs	r3, #7
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2201      	movs	r2, #1
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
 8000778:	f005 f8ee 	bl	8005958 <aci_gap_set_authentication_requirement>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                    KEYPRESS_IS_NOT_SUPPORTED, 7, 16, USE_FIXED_PIN_FOR_PAIRING,
                                                    BLUENRG2_AUTHENTICATION_PASS_KEY, BLUENRG2_AUTHENTICATION_ADDR_PUBLIC_ID );
    // clang-format on

    if( u8Ret != BLE_STATUS_SUCCESS )
 8000782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000786:	2b00      	cmp	r3, #0
 8000788:	d005      	beq.n	8000796 <BLUENRG2__u8CentralAppInit+0x166>
    {
        PRINT_DBG( "aci_gap_set_authentication_requirement()failed\r\n" );
 800078a:	4817      	ldr	r0, [pc, #92]	; (80007e8 <BLUENRG2__u8CentralAppInit+0x1b8>)
 800078c:	f008 f924 	bl	80089d8 <puts>
        return u8Ret;
 8000790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000794:	e012      	b.n	80007bc <BLUENRG2__u8CentralAppInit+0x18c>
    }

    u8Ret = GATT_DB_u8AddService(); // Add Device Service & Characteristics
 8000796:	f000 fe8f 	bl	80014b8 <GATT_DB_u8AddService>
 800079a:	4603      	mov	r3, r0
 800079c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( u8Ret != BLE_STATUS_SUCCESS )
 80007a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <BLUENRG2__u8CentralAppInit+0x18a>
    {
        PRINT_DBG( "Error while adding service: 0x%02x\r\n", u8Ret );
 80007a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <BLUENRG2__u8CentralAppInit+0x1bc>)
 80007b0:	f008 f8ac 	bl	800890c <iprintf>
        return u8Ret;
 80007b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007b8:	e000      	b.n	80007bc <BLUENRG2__u8CentralAppInit+0x18c>
    }

    return BLE_STATUS_SUCCESS;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bdb0      	pop	{r4, r5, r7, pc}
 80007c4:	08009894 	.word	0x08009894
 80007c8:	08009774 	.word	0x08009774
 80007cc:	08009798 	.word	0x08009798
 80007d0:	080097bc 	.word	0x080097bc
 80007d4:	080097d8 	.word	0x080097d8
 80007d8:	0800989c 	.word	0x0800989c
 80007dc:	080097f4 	.word	0x080097f4
 80007e0:	0800981c 	.word	0x0800981c
 80007e4:	0001e240 	.word	0x0001e240
 80007e8:	0800983c 	.word	0x0800983c
 80007ec:	0800986c 	.word	0x0800986c

080007f0 <BLUENRG2__vUserProcess>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUserProcess( void )
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af02      	add	r7, sp, #8
    static uint32_t u32CurrentFSMStartTick;

#ifdef BLUENRG2_PRINT_ON
    static BLUENRG2_tenState enLastFSMState;

    if( enLastFSMState != BLUENRG2__enState )
 80007f6:	4ba5      	ldr	r3, [pc, #660]	; (8000a8c <BLUENRG2__vUserProcess+0x29c>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	4ba5      	ldr	r3, [pc, #660]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d00c      	beq.n	800081c <BLUENRG2__vUserProcess+0x2c>
    {
        PRINT_DBG( "FSM : %d -> %d \r\n", enLastFSMState, BLUENRG2__enState );
 8000802:	4ba2      	ldr	r3, [pc, #648]	; (8000a8c <BLUENRG2__vUserProcess+0x29c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	4ba1      	ldr	r3, [pc, #644]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	48a1      	ldr	r0, [pc, #644]	; (8000a94 <BLUENRG2__vUserProcess+0x2a4>)
 8000810:	f008 f87c 	bl	800890c <iprintf>
        enLastFSMState = BLUENRG2__enState;
 8000814:	4b9e      	ldr	r3, [pc, #632]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b9c      	ldr	r3, [pc, #624]	; (8000a8c <BLUENRG2__vUserProcess+0x29c>)
 800081a:	701a      	strb	r2, [r3, #0]
    }
#endif // BLUENRG2_PRINT_ON

    switch( BLUENRG2__enState )
 800081c:	4b9c      	ldr	r3, [pc, #624]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b09      	cmp	r3, #9
 8000822:	f200 8126 	bhi.w	8000a72 <BLUENRG2__vUserProcess+0x282>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <BLUENRG2__vUserProcess+0x3c>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	08000855 	.word	0x08000855
 8000830:	0800086f 	.word	0x0800086f
 8000834:	080008a7 	.word	0x080008a7
 8000838:	080008b3 	.word	0x080008b3
 800083c:	08000917 	.word	0x08000917
 8000840:	08000941 	.word	0x08000941
 8000844:	0800096b 	.word	0x0800096b
 8000848:	08000995 	.word	0x08000995
 800084c:	0800099d 	.word	0x0800099d
 8000850:	08000a41 	.word	0x08000a41
    {
        case BLUENRG2_STAT_INIT:
        {
            BLUENRG2__vResetConnectionContext(); // Reset Connection context
 8000854:	f000 f9ba 	bl	8000bcc <BLUENRG2__vResetConnectionContext>
            BLUENRG2__vStartScan();              // Result in hci_le_advertising_report_event
 8000858:	f000 f942 	bl	8000ae0 <BLUENRG2__vStartScan>
            BLUENRG2__enState      = BLUENRG2_STAT_SCANNING;
 800085c:	4b8c      	ldr	r3, [pc, #560]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 8000862:	f001 fee9 	bl	8002638 <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	4a8b      	ldr	r2, [pc, #556]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 800086a:	6013      	str	r3, [r2, #0]
        }
        break;
 800086c:	e10a      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_SCANNING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 800086e:	f001 fee3 	bl	8002638 <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800087e:	4293      	cmp	r3, r2
 8000880:	f240 80f9 	bls.w	8000a76 <BLUENRG2__vUserProcess+0x286>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000884:	4b82      	ldr	r3, [pc, #520]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	4884      	ldr	r0, [pc, #528]	; (8000a9c <BLUENRG2__vUserProcess+0x2ac>)
 800088c:	f008 f83e 	bl	800890c <iprintf>
                BLUENRG2__vStopScan();
 8000890:	f000 f948 	bl	8000b24 <BLUENRG2__vStopScan>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000894:	f001 fed0 	bl	8002638 <HAL_GetTick>
 8000898:	4603      	mov	r3, r0
 800089a:	4a7f      	ldr	r2, [pc, #508]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 800089c:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_IDLE;
 800089e:	4b7c      	ldr	r3, [pc, #496]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 80008a0:	2209      	movs	r2, #9
 80008a2:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80008a4:	e0e7      	b.n	8000a76 <BLUENRG2__vUserProcess+0x286>

        case BLUENRG2_STAT_SCAN_DONE:
        {
            BLUENRG2__vStopScan();
 80008a6:	f000 f93d 	bl	8000b24 <BLUENRG2__vStopScan>
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 80008aa:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 80008ac:	2209      	movs	r2, #9
 80008ae:	701a      	strb	r2, [r3, #0]
        }
        break;
 80008b0:	e0e8      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_START_CONNECT:
        {

            const char *apcDevAddrTypeStr[] = { "Public Device", "Random Device", "Public Identity",
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <BLUENRG2__vUserProcess+0x2b0>)
 80008b4:	1d3c      	adds	r4, r7, #4
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                                "Random Identity" };

            printf( "[Connecting] Device Addr Type : %s, Value : ",
                    apcDevAddrTypeStr[BLUENRG2__stConnCTX.stDevice.u8Type] );
 80008bc:	4b79      	ldr	r3, [pc, #484]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 80008be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
            printf( "[Connecting] Device Addr Type : %s, Value : ",
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	3318      	adds	r3, #24
 80008c6:	443b      	add	r3, r7
 80008c8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4876      	ldr	r0, [pc, #472]	; (8000aa8 <BLUENRG2__vUserProcess+0x2b8>)
 80008d0:	f008 f81c 	bl	800890c <iprintf>

            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008d4:	2306      	movs	r3, #6
 80008d6:	75fb      	strb	r3, [r7, #23]
 80008d8:	e00c      	b.n	80008f4 <BLUENRG2__vUserProcess+0x104>
            {
                printf( "%02X ", BLUENRG2__stConnCTX.stDevice.au8Addr[u8ByteIdx - 1] );
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	3b01      	subs	r3, #1
 80008de:	4a71      	ldr	r2, [pc, #452]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 80008e0:	4413      	add	r3, r2
 80008e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008e6:	4619      	mov	r1, r3
 80008e8:	4870      	ldr	r0, [pc, #448]	; (8000aac <BLUENRG2__vUserProcess+0x2bc>)
 80008ea:	f008 f80f 	bl	800890c <iprintf>
            for( uint8_t u8ByteIdx = sizeof( BLUENRG2__stConnCTX.stDevice.au8Addr ); u8ByteIdx != 0U; u8ByteIdx-- )
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	75fb      	strb	r3, [r7, #23]
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1ef      	bne.n	80008da <BLUENRG2__vUserProcess+0xea>
            }
            printf( "\r\n" );
 80008fa:	486d      	ldr	r0, [pc, #436]	; (8000ab0 <BLUENRG2__vUserProcess+0x2c0>)
 80008fc:	f008 f86c 	bl	80089d8 <puts>

            BLUENRG2__vStartConnect();
 8000900:	f000 f92c 	bl	8000b5c <BLUENRG2__vStartConnect>
            BLUENRG2__enState      = BLUENRG2_STAT_CONNECTING;
 8000904:	4b62      	ldr	r3, [pc, #392]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000906:	2204      	movs	r2, #4
 8000908:	701a      	strb	r2, [r3, #0]
            u32CurrentFSMStartTick = HAL_GetTick();
 800090a:	f001 fe95 	bl	8002638 <HAL_GetTick>
 800090e:	4603      	mov	r3, r0
 8000910:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 8000912:	6013      	str	r3, [r2, #0]
        }
        break;
 8000914:	e0b6      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_CONNECTING:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000916:	f001 fe8f 	bl	8002638 <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000926:	4293      	cmp	r3, r2
 8000928:	f240 80a7 	bls.w	8000a7a <BLUENRG2__vUserProcess+0x28a>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 800092c:	4b58      	ldr	r3, [pc, #352]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	485a      	ldr	r0, [pc, #360]	; (8000a9c <BLUENRG2__vUserProcess+0x2ac>)
 8000934:	f007 ffea 	bl	800890c <iprintf>
                BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8000938:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800093a:	2209      	movs	r2, #9
 800093c:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 800093e:	e09c      	b.n	8000a7a <BLUENRG2__vUserProcess+0x28a>

        case BLUENRG2_STAT_GET_REMOTE_TX:
        {
            if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 8000940:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 8000942:	799b      	ldrb	r3, [r3, #6]
 8000944:	f083 0301 	eor.w	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <BLUENRG2__vUserProcess+0x172>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 800094e:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 8000950:	8858      	ldrh	r0, [r3, #2]
 8000952:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <BLUENRG2__vUserProcess+0x2c4>)
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2302      	movs	r3, #2
 8000958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095c:	2101      	movs	r1, #1
 800095e:	f005 fe36 	bl	80065ce <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteTx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000964:	2209      	movs	r2, #9
 8000966:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000968:	e08c      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_GET_REMOTE_RX:
        {
            if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 800096c:	7e9b      	ldrb	r3, [r3, #26]
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d009      	beq.n	800098c <BLUENRG2__vUserProcess+0x19c>
            {
                aci_gatt_disc_char_by_uuid( BLUENRG2__stConnCTX.u16Handle, BLUENRG2_GENERIC_HANDLE_MIN,
 8000978:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 800097a:	8858      	ldrh	r0, [r3, #2]
 800097c:	4b4e      	ldr	r3, [pc, #312]	; (8000ab8 <BLUENRG2__vUserProcess+0x2c8>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000986:	2101      	movs	r1, #1
 8000988:	f005 fe21 	bl	80065ce <aci_gatt_disc_char_by_uuid>
                                            BLUENRG2_GENERIC_HANDLE_MAX, UUID_TYPE_128,
                                            &BLUENRG2__stConnCTX.RemoteRx.uUUID );
            }
            BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 800098e:	2209      	movs	r2, #9
 8000990:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000992:	e077      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>
            // {
            //     // Radio is busy.
            //     if( ( HAL_GetTick() - u32CurrentFSMStartTick ) > ( 10 * HCI_DEFAULT_TIMEOUT_MS ) )
            //         break;
            // }
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000994:	4b49      	ldr	r3, [pc, #292]	; (8000abc <BLUENRG2__vUserProcess+0x2cc>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]

            // BLUENRG2__enState = BLUENRG2_STAT_MAIN_CONNECTED;
        }
        break;
 800099a:	e073      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>

        case BLUENRG2_STAT_MAIN_CONNECTED:
        {

            if( HAL_GetTick() - u32LastRSSIReadTick > BLUENRG2_RSSI_READING_PERIOD )
 800099c:	f001 fe4c 	bl	8002638 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <BLUENRG2__vUserProcess+0x2d0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009ac:	d913      	bls.n	80009d6 <BLUENRG2__vUserProcess+0x1e6>
            {
                int8_t u8TmpRssi;
                hci_read_rssi( BLUENRG2__stConnCTX.u16Handle, &u8TmpRssi );
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <BLUENRG2__vUserProcess+0x2b4>)
 80009b0:	885b      	ldrh	r3, [r3, #2]
 80009b2:	1cfa      	adds	r2, r7, #3
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f007 fae5 	bl	8007f86 <hci_read_rssi>
                BLUENRG2__vUpdateLockStatus( u8TmpRssi, BLUENRG2_RSSI_THRESHOLD_NEAR, true );
 80009bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 faa2 	bl	8000f10 <BLUENRG2__vUpdateLockStatus>
                u32LastRSSIReadTick = HAL_GetTick();
 80009cc:	f001 fe34 	bl	8002638 <HAL_GetTick>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <BLUENRG2__vUserProcess+0x2d0>)
 80009d4:	6013      	str	r3, [r2, #0]
            }

            static bool bLockStatus     = false;
            static bool bLastLockStatus = false;

            if( BLUENRG2__bMasterDevIsUnlocked && BLUENRG2__bMasterEncryptedUnlocked )
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <BLUENRG2__vUserProcess+0x2d4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d014      	beq.n	8000a08 <BLUENRG2__vUserProcess+0x218>
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <BLUENRG2__vUserProcess+0x2d8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d010      	beq.n	8000a08 <BLUENRG2__vUserProcess+0x218>
            {
                bLockStatus = true;
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <BLUENRG2__vUserProcess+0x2dc>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]

                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 80009ec:	2000      	movs	r0, #0
 80009ee:	f001 faad 	bl	8001f4c <BSP_PB_GetState>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d103      	bne.n	8000a00 <BLUENRG2__vUserProcess+0x210>
                {
                    BSP_LED_Off( LED2 );
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9ff 	bl	8001dfc <BSP_LED_Off>
                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 80009fe:	e009      	b.n	8000a14 <BLUENRG2__vUserProcess+0x224>
                }
                else
                {
                    BSP_LED_On( LED2 );
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 f9e5 	bl	8001dd0 <BSP_LED_On>
                if( 1U == BSP_PB_GetState( BUTTON_KEY ) )
 8000a06:	e005      	b.n	8000a14 <BLUENRG2__vUserProcess+0x224>
                }
            }
            else
            {
                bLockStatus = false;
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <BLUENRG2__vUserProcess+0x2dc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
                BSP_LED_On( LED2 );
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f001 f9de 	bl	8001dd0 <BSP_LED_On>
            }

            if( bLockStatus != bLastLockStatus )
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <BLUENRG2__vUserProcess+0x2dc>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <BLUENRG2__vUserProcess+0x2e0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d02e      	beq.n	8000a7e <BLUENRG2__vUserProcess+0x28e>
            {
                PRINT_DBG( "Current is %s\r\n", bLockStatus ? "UNLOCKED!" : "LOCKED!" );
 8000a20:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <BLUENRG2__vUserProcess+0x2dc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <BLUENRG2__vUserProcess+0x23c>
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <BLUENRG2__vUserProcess+0x2e4>)
 8000a2a:	e000      	b.n	8000a2e <BLUENRG2__vUserProcess+0x23e>
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <BLUENRG2__vUserProcess+0x2e8>)
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <BLUENRG2__vUserProcess+0x2ec>)
 8000a32:	f007 ff6b 	bl	800890c <iprintf>
                bLastLockStatus = bLockStatus;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <BLUENRG2__vUserProcess+0x2dc>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <BLUENRG2__vUserProcess+0x2e0>)
 8000a3c:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000a3e:	e01e      	b.n	8000a7e <BLUENRG2__vUserProcess+0x28e>

        case BLUENRG2_STAT_IDLE:
        {
            if( HAL_GetTick() - u32CurrentFSMStartTick > BLUENRG2_FSM_GENERIC_TIMEOUT_MS )
 8000a40:	f001 fdfa 	bl	8002638 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d916      	bls.n	8000a82 <BLUENRG2__vUserProcess+0x292>
            {
                PRINT_DBG( "Timeout at STATE %d \r\n ", (uint8_t) BLUENRG2__enState );
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <BLUENRG2__vUserProcess+0x2ac>)
 8000a5c:	f007 ff56 	bl	800890c <iprintf>
                u32CurrentFSMStartTick = HAL_GetTick();
 8000a60:	f001 fdea 	bl	8002638 <HAL_GetTick>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <BLUENRG2__vUserProcess+0x2a8>)
 8000a68:	6013      	str	r3, [r2, #0]
                BLUENRG2__enState      = BLUENRG2_STAT_INIT;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <BLUENRG2__vUserProcess+0x2a0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8000a70:	e007      	b.n	8000a82 <BLUENRG2__vUserProcess+0x292>

        default:
            break;
 8000a72:	bf00      	nop
 8000a74:	e006      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>
        break;
 8000a76:	bf00      	nop
 8000a78:	e004      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>
        break;
 8000a7a:	bf00      	nop
 8000a7c:	e002      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>
        break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <BLUENRG2__vUserProcess+0x294>
        break;
 8000a82:	bf00      	nop
    }
}
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	2000011e 	.word	0x2000011e
 8000a90:	200000a3 	.word	0x200000a3
 8000a94:	080098b0 	.word	0x080098b0
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	080098c4 	.word	0x080098c4
 8000aa0:	0800997c 	.word	0x0800997c
 8000aa4:	200000a4 	.word	0x200000a4
 8000aa8:	080098dc 	.word	0x080098dc
 8000aac:	0800990c 	.word	0x0800990c
 8000ab0:	08009914 	.word	0x08009914
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	200000c0 	.word	0x200000c0
 8000abc:	200000db 	.word	0x200000db
 8000ac0:	20000124 	.word	0x20000124
 8000ac4:	200000dc 	.word	0x200000dc
 8000ac8:	200000dd 	.word	0x200000dd
 8000acc:	20000128 	.word	0x20000128
 8000ad0:	20000129 	.word	0x20000129
 8000ad4:	08009918 	.word	0x08009918
 8000ad8:	08009924 	.word	0x08009924
 8000adc:	0800992c 	.word	0x0800992c

08000ae0 <BLUENRG2__vStartScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartScan( void )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_start_general_discovery_proc( SCAN_P, SCAN_L, PUBLIC_ADDR, 0x01 );
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000af2:	f005 f8d4 	bl	8005c9e <aci_gap_start_general_discovery_proc>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <BLUENRG2__vStartScan+0x2c>
    {
        printf( "aci_gap_start_general_discovery_proc() failed, %#X\n", u8Ret );
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <BLUENRG2__vStartScan+0x3c>)
 8000b06:	f007 ff01 	bl	800890c <iprintf>
    }
    else
    {
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
    }
}
 8000b0a:	e002      	b.n	8000b12 <BLUENRG2__vStartScan+0x32>
        printf( "aci_gap_start_general_discovery_proc() Done\r\n" );
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <BLUENRG2__vStartScan+0x40>)
 8000b0e:	f007 ff63 	bl	80089d8 <puts>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0800998c 	.word	0x0800998c
 8000b20:	080099c0 	.word	0x080099c0

08000b24 <BLUENRG2__vStopScan>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStopScan( void )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
    uint8_t u8Ret = aci_gap_terminate_gap_proc( GAP_GENERAL_DISCOVERY_PROC );
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f005 fa38 	bl	8005fa0 <aci_gap_terminate_gap_proc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
    if( BLE_STATUS_SUCCESS != u8Ret )
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <BLUENRG2__vStopScan+0x22>
    {
        printf( "aci_gap_terminate_gap_proc() failed, %#X\n", u8Ret );
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <BLUENRG2__vStopScan+0x30>)
 8000b40:	f007 fee4 	bl	800890c <iprintf>
    }
    else
    {
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
    }
}
 8000b44:	e002      	b.n	8000b4c <BLUENRG2__vStopScan+0x28>
        printf( "aci_gap_terminate_gap_proc() Done\r\n" );
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <BLUENRG2__vStopScan+0x34>)
 8000b48:	f007 ff46 	bl	80089d8 <puts>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	080099f0 	.word	0x080099f0
 8000b58:	08009a1c 	.word	0x08009a1c

08000b5c <BLUENRG2__vStartConnect>:
//!
//! \return
//!   Status
//*****************************************************
static void BLUENRG2__vStartConnect( void )
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af08      	add	r7, sp, #32

    // Do connection with first discovered device
    uint8_t u8Ret =
    aci_gap_create_connection( SCAN_P, SCAN_L, BLUENRG2__stConnCTX.stDevice.u8Type,
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <BLUENRG2__vStartConnect+0x60>)
 8000b64:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b6c:	9306      	str	r3, [sp, #24]
 8000b6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b72:	9305      	str	r3, [sp, #20]
 8000b74:	233c      	movs	r3, #60	; 0x3c
 8000b76:	9304      	str	r3, [sp, #16]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9303      	str	r3, [sp, #12]
 8000b7c:	2328      	movs	r3, #40	; 0x28
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	2328      	movs	r3, #40	; 0x28
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	2300      	movs	r3, #0
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <BLUENRG2__vStartConnect+0x64>)
 8000b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b92:	f005 f921 	bl	8005dd8 <aci_gap_create_connection>
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
                               BLUENRG2__stConnCTX.stDevice.au8Addr, PUBLIC_ADDR, 40, 40, 0, 60, 2000, 2000 );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <BLUENRG2__vStartConnect+0x50>
    {
        PRINT_DBG( "aci_gap_create_connection() failed: 0x%02x\r\n", u8Ret );
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <BLUENRG2__vStartConnect+0x68>)
 8000ba6:	f007 feb1 	bl	800890c <iprintf>
    }
    else
    {
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
    }
}
 8000baa:	e002      	b.n	8000bb2 <BLUENRG2__vStartConnect+0x56>
        PRINT_DBG( "aci_gap_create_connection() OK\r\n" );
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <BLUENRG2__vStartConnect+0x6c>)
 8000bae:	f007 ff13 	bl	80089d8 <puts>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000a4 	.word	0x200000a4
 8000bc0:	200000d4 	.word	0x200000d4
 8000bc4:	08009a40 	.word	0x08009a40
 8000bc8:	08009a70 	.word	0x08009a70

08000bcc <BLUENRG2__vResetConnectionContext>:
 * Description    : Reset the discovery context.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vResetConnectionContext( void )
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
    BSP_LED_On( LED2 );
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f001 f8fc 	bl	8001dd0 <BSP_LED_On>
    BLUENRG_memset( &BLUENRG2__stConnCTX, 0, sizeof( BLUENRG2__stConnCTX ) );
 8000bd8:	2236      	movs	r2, #54	; 0x36
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4832      	ldr	r0, [pc, #200]	; (8000ca8 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000bde:	f007 ffeb 	bl	8008bb8 <memset>

    BLUENRG2__stConnCTX.RemoteTx.bValid = false;
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	719a      	strb	r2, [r3, #6]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteTx.uUUID.UUID_128, BLUENRG2__cau8RemoteTxCharUUID,
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <BLUENRG2__vResetConnectionContext+0xe0>)
 8000bec:	f103 0408 	add.w	r4, r3, #8
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteTxCharUUID ) );

    BLUENRG2__stConnCTX.RemoteRx.bValid = false;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	769a      	strb	r2, [r3, #26]
    BLUENRG_memcpy( BLUENRG2__stConnCTX.RemoteRx.uUUID.UUID_128, BLUENRG2__cau8RemoteRxCharUUID,
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <BLUENRG2__vResetConnectionContext+0xdc>)
 8000c00:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <BLUENRG2__vResetConnectionContext+0xe4>)
 8000c02:	f103 041c 	add.w	r4, r3, #28
 8000c06:	4613      	mov	r3, r2
 8000c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    sizeof( BLUENRG2__cau8RemoteRxCharUUID ) );

    BLUENRG2__bRemoteTxNotifyEnabled   = false;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <BLUENRG2__vResetConnectionContext+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bTXbufferFull            = false;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <BLUENRG2__vResetConnectionContext+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bMasterDevIsUnlocked     = false;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <BLUENRG2__vResetConnectionContext+0xf0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
    BLUENRG2__bMasterEncryptedUnlocked = false;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <BLUENRG2__vResetConnectionContext+0xf4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]

    BLUENRG2__st8Queue.bValid = false;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <BLUENRG2__vResetConnectionContext+0xf8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	719a      	strb	r2, [r3, #6]
    BLUENRG2__st8Queue.u8Idx  = 0U;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <BLUENRG2__vResetConnectionContext+0xf8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	715a      	strb	r2, [r3, #5]

    mtu_exchanged      = 0;
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <BLUENRG2__vResetConnectionContext+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
    mtu_exchanged_wait = 0;
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <BLUENRG2__vResetConnectionContext+0x100>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
    write_char_len     = CHAR_VALUE_LENGTH - 3;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <BLUENRG2__vResetConnectionContext+0x104>)
 8000c40:	223c      	movs	r2, #60	; 0x3c
 8000c42:	801a      	strh	r2, [r3, #0]

    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000c44:	2300      	movs	r3, #0
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	e026      	b.n	8000c98 <BLUENRG2__vResetConnectionContext+0xcc>
    {
        BLUENRG2__au8DataBuf[i] = 0x31 + ( i % 10 );
 8000c4a:	88fa      	ldrh	r2, [r7, #6]
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <BLUENRG2__vResetConnectionContext+0x108>)
 8000c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c52:	08d9      	lsrs	r1, r3, #3
 8000c54:	460b      	mov	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	3231      	adds	r2, #49	; 0x31
 8000c66:	b2d1      	uxtb	r1, r2
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <BLUENRG2__vResetConnectionContext+0x10c>)
 8000c6a:	54d1      	strb	r1, [r2, r3]
        if( ( i + 1 ) % 10 == 0 )
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	1c59      	adds	r1, r3, #1
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <BLUENRG2__vResetConnectionContext+0x110>)
 8000c72:	fb83 2301 	smull	r2, r3, r3, r1
 8000c76:	109a      	asrs	r2, r3, #2
 8000c78:	17cb      	asrs	r3, r1, #31
 8000c7a:	1ad2      	subs	r2, r2, r3
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1aca      	subs	r2, r1, r3
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d103      	bne.n	8000c92 <BLUENRG2__vResetConnectionContext+0xc6>
        {
            BLUENRG2__au8DataBuf[i] = 'x';
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <BLUENRG2__vResetConnectionContext+0x10c>)
 8000c8e:	2178      	movs	r1, #120	; 0x78
 8000c90:	54d1      	strb	r1, [r2, r3]
    for( uint16_t i = 0; i < ( CHAR_VALUE_LENGTH - 3 ); i++ )
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	3301      	adds	r3, #1
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c9c:	d9d5      	bls.n	8000c4a <BLUENRG2__vResetConnectionContext+0x7e>
        }
    }
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	200000a4 	.word	0x200000a4
 8000cac:	08009ef4 	.word	0x08009ef4
 8000cb0:	08009f04 	.word	0x08009f04
 8000cb4:	200000db 	.word	0x200000db
 8000cb8:	200000da 	.word	0x200000da
 8000cbc:	200000dc 	.word	0x200000dc
 8000cc0:	200000dd 	.word	0x200000dd
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	2000011d 	.word	0x2000011d
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	cccccccd 	.word	0xcccccccd
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	66666667 	.word	0x66666667

08000ce0 <BLUENRG2__u8PrintBLEFwInfo>:
 * Description    : Setup the device address.
 * Input          : None.
 * Return         : None.
 *******************************************************************************/
static uint8_t BLUENRG2__u8PrintBLEFwInfo( void )
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af08      	add	r7, sp, #32
    uint16_t u16DTMBuildNum;

    uint8_t  u8BLEStackVerMajor, u8BLEStackVerMinor, u8BLEStackVerPatch, u8BLEStackDevelopment;
    uint16_t u16BLEStackVariant, u16BLEStackBuildNum;

    uint8_t au8Alphabet[] = { ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <BLUENRG2__u8PrintBLEFwInfo+0xec>)
 8000ce8:	1d3c      	adds	r4, r7, #4
 8000cea:	461d      	mov	r5, r3
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf4:	c403      	stmia	r4!, {r0, r1}
 8000cf6:	8022      	strh	r2, [r4, #0]
 8000cf8:	3402      	adds	r4, #2
 8000cfa:	0c13      	lsrs	r3, r2, #16
 8000cfc:	7023      	strb	r3, [r4, #0]
                              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
    // clang-format off
    uint8_t u8Status = aci_hal_get_firmware_details( &u8DTMVerMajor, &u8DTMVerMinor, &u8DTMVerPatch, &u8DTMVerVariant,
 8000cfe:	f107 042b 	add.w	r4, r7, #43	; 0x2b
 8000d02:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d06:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000d0a:	f107 002e 	add.w	r0, r7, #46	; 0x2e
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	9306      	str	r3, [sp, #24]
 8000d14:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000d18:	9305      	str	r3, [sp, #20]
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	9304      	str	r3, [sp, #16]
 8000d20:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000d24:	9303      	str	r3, [sp, #12]
 8000d26:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	f005 fd0b 	bl	8006754 <aci_hal_get_firmware_details>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                     &u16DTMBuildNum, &u8BLEStackVerMajor, &u8BLEStackVerMinor,
                                                     &u8BLEStackVerPatch, &u8BLEStackDevelopment, &u16BLEStackVariant, 
                                                     &u16BLEStackBuildNum 
                                                    );
    // clang-format on
    PRINT_DBG( "\r\n--------------------------------------------------------\r\n\n" );
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <BLUENRG2__u8PrintBLEFwInfo+0xf0>)
 8000d46:	f007 fe47 	bl	80089d8 <puts>
    PRINT_DBG( " Lumen BLE Central App v%d.%d.%d \r\n", 0, 0, 0 );
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <BLUENRG2__u8PrintBLEFwInfo+0xf4>)
 8000d52:	f007 fddb 	bl	800890c <iprintf>

    if( u8Status == BLE_STATUS_SUCCESS )
 8000d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d12c      	bne.n	8000db8 <BLUENRG2__u8PrintBLEFwInfo+0xd8>
    {
        PRINT_DBG( "- BlueNRG-2 FW v%d.%d%c \r\n", u8BLEStackVerMajor, u8BLEStackVerMinor,
 8000d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d62:	4619      	mov	r1, r3
 8000d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d6e:	3330      	adds	r3, #48	; 0x30
 8000d70:	443b      	add	r3, r7
 8000d72:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <BLUENRG2__u8PrintBLEFwInfo+0xf8>)
 8000d78:	f007 fdc8 	bl	800890c <iprintf>
                   au8Alphabet[u8BLEStackVerPatch] );

        PRINT_DBG( "- DTM %s v%d.%d%c \r\n",
 8000d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d007      	beq.n	8000d94 <BLUENRG2__u8PrintBLEFwInfo+0xb4>
 8000d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d101      	bne.n	8000d90 <BLUENRG2__u8PrintBLEFwInfo+0xb0>
 8000d8c:	4913      	ldr	r1, [pc, #76]	; (8000ddc <BLUENRG2__u8PrintBLEFwInfo+0xfc>)
 8000d8e:	e002      	b.n	8000d96 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000d90:	4913      	ldr	r1, [pc, #76]	; (8000de0 <BLUENRG2__u8PrintBLEFwInfo+0x100>)
 8000d92:	e000      	b.n	8000d96 <BLUENRG2__u8PrintBLEFwInfo+0xb6>
 8000d94:	4913      	ldr	r1, [pc, #76]	; (8000de4 <BLUENRG2__u8PrintBLEFwInfo+0x104>)
 8000d96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000da0:	4618      	mov	r0, r3
 8000da2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000da6:	3330      	adds	r3, #48	; 0x30
 8000da8:	443b      	add	r3, r7
 8000daa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4603      	mov	r3, r0
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <BLUENRG2__u8PrintBLEFwInfo+0x108>)
 8000db4:	f007 fdaa 	bl	800890c <iprintf>
                   u8DTMVerVariant == 0x01 ? "UART" : ( u8DTMVerVariant == 0x02 ? "SPI" : "Unknown" ), u8DTMVerMajor,
                   u8DTMVerMinor, au8Alphabet[u8DTMVerPatch] );
    }
    PRINT_DBG( "\r\n" );
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <BLUENRG2__u8PrintBLEFwInfo+0x10c>)
 8000dba:	f007 fe0d 	bl	80089d8 <puts>

    return u8Status;
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08009b3c 	.word	0x08009b3c
 8000dd0:	08009a90 	.word	0x08009a90
 8000dd4:	08009ad0 	.word	0x08009ad0
 8000dd8:	08009af4 	.word	0x08009af4
 8000ddc:	08009b10 	.word	0x08009b10
 8000de0:	08009b14 	.word	0x08009b14
 8000de4:	08009b1c 	.word	0x08009b1c
 8000de8:	08009b24 	.word	0x08009b24
 8000dec:	08009914 	.word	0x08009914

08000df0 <BLUENRG2__bFindDeviceName>:
 * Input          : Data length.
 *                  Data value
 * Return         : TRUE if the local name found is the expected one, FALSE otherwise.
 *******************************************************************************/
static bool BLUENRG2__bFindDeviceName( uint8_t u8DataLen, uint8_t *pu8Data )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Index = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	75fb      	strb	r3, [r7, #23]

    while( u8Index < u8DataLen )
 8000e00:	e02f      	b.n	8000e62 <BLUENRG2__bFindDeviceName+0x72>
    {
        /* Advertising data fields: len, type, values */
        /* Check if field is complete local name and the length is the expected one for BLE
         * CentralApp  */
        if( pu8Data[u8Index + 1U] == AD_TYPE_COMPLETE_LOCAL_NAME )
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	d11f      	bne.n	8000e50 <BLUENRG2__bFindDeviceName+0x60>
        {
            // check if found device name is start with LUMEN
            uint8_t au8FindKeyStr[] = "BLE Device"; //TODO
 8000e10:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <BLUENRG2__bFindDeviceName+0x84>)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e18:	c303      	stmia	r3!, {r0, r1}
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	0c12      	lsrs	r2, r2, #16
 8000e20:	701a      	strb	r2, [r3, #0]

            pu8Data[u8Index + 1 + sizeof( au8FindKeyStr )] = '\0'; // Limit device name string
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	330c      	adds	r3, #12
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]

            if( 0U == BLUENRG_memcmp( &pu8Data[u8Index + 2], au8FindKeyStr, sizeof( au8FindKeyStr ) - 1 ) )
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	3302      	adds	r3, #2
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	f107 010c 	add.w	r1, r7, #12
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 feab 	bl	8008b98 <memcmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <BLUENRG2__bFindDeviceName+0x5c>
            {
                return TRUE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e00f      	b.n	8000e6c <BLUENRG2__bFindDeviceName+0x7c>
            }
            else
            {
                return FALSE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e00d      	b.n	8000e6c <BLUENRG2__bFindDeviceName+0x7c>
            }
        }
        else
        {
            u8Index += ( pu8Data[u8Index] + 1U ); // move to next advertising field, Refer to Core 5.2 Figure 11.1
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	3301      	adds	r3, #1
 8000e60:	75fb      	strb	r3, [r7, #23]
    while( u8Index < u8DataLen )
 8000e62:	7dfa      	ldrb	r2, [r7, #23]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d3cb      	bcc.n	8000e02 <BLUENRG2__bFindDeviceName+0x12>
        }
    }

    return FALSE;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	08009b58 	.word	0x08009b58

08000e78 <BLUENRG2__vAttributeModifiedCB>:
 *                  Length of the data.
 *                  Attribute data.
 * Return         : None.
 *******************************************************************************/
static void BLUENRG2__vAttributeModifiedCB( uint16_t u16AttributeHandle, uint8_t u8DataLen, uint8_t *pau8AttrData )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	460b      	mov	r3, r1
 8000e86:	717b      	strb	r3, [r7, #5]
    if( u16AttributeHandle == u16LocalNormalWriteCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <BLUENRG2__vAttributeModifiedCB+0x7c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d103      	bne.n	8000e9c <BLUENRG2__vAttributeModifiedCB+0x24>
    {
        PRINT_DBG( "[RX] Normal write\r\n" ); //BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );
 8000e94:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <BLUENRG2__vAttributeModifiedCB+0x80>)
 8000e96:	f007 fd9f 	bl	80089d8 <puts>
    {
    }
    else if( u16AttributeHandle == u16LocalAuthenWriteCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
    {
    }
}
 8000e9a:	e026      	b.n	8000eea <BLUENRG2__vAttributeModifiedCB+0x72>
    else if( u16AttributeHandle == u16LocalEncryptedWriteCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <BLUENRG2__vAttributeModifiedCB+0x84>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d103      	bne.n	8000eb0 <BLUENRG2__vAttributeModifiedCB+0x38>
        PRINT_DBG( "[RX] Encrypted write\r\n" ); //BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );
 8000ea8:	4815      	ldr	r0, [pc, #84]	; (8000f00 <BLUENRG2__vAttributeModifiedCB+0x88>)
 8000eaa:	f007 fd95 	bl	80089d8 <puts>
}
 8000eae:	e01c      	b.n	8000eea <BLUENRG2__vAttributeModifiedCB+0x72>
    else if( u16AttributeHandle == u16LocalAuthenWriteCharHandle + BLUENRG2_CHAR_VALUE_OFFSET )
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <BLUENRG2__vAttributeModifiedCB+0x8c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d103      	bne.n	8000ec4 <BLUENRG2__vAttributeModifiedCB+0x4c>
        PRINT_DBG( "[RX] Authenticated write\r\n" ); //BLUENRG2__vReceiveData( pau8AttrData, u8DataLen );
 8000ebc:	4812      	ldr	r0, [pc, #72]	; (8000f08 <BLUENRG2__vAttributeModifiedCB+0x90>)
 8000ebe:	f007 fd8b 	bl	80089d8 <puts>
}
 8000ec2:	e012      	b.n	8000eea <BLUENRG2__vAttributeModifiedCB+0x72>
    else if( u16AttributeHandle == u16LocalNormalWriteCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <BLUENRG2__vAttributeModifiedCB+0x7c>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d107      	bne.n	8000ee0 <BLUENRG2__vAttributeModifiedCB+0x68>
        if( pau8AttrData[0] == 0x01 )
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <BLUENRG2__vAttributeModifiedCB+0x72>
            BLUENRG2__bRemoteTxNotifyEnabled = true;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <BLUENRG2__vAttributeModifiedCB+0x94>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
}
 8000ede:	e004      	b.n	8000eea <BLUENRG2__vAttributeModifiedCB+0x72>
    else if( u16AttributeHandle == u16LocalEncryptedWriteCharHandle + BLUENRG2_CHAR_CONFIG_DESC_OFFSET )
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <BLUENRG2__vAttributeModifiedCB+0x84>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	429a      	cmp	r2, r3
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000012c 	.word	0x2000012c
 8000ef8:	08009b64 	.word	0x08009b64
 8000efc:	2000012e 	.word	0x2000012e
 8000f00:	08009b78 	.word	0x08009b78
 8000f04:	20000130 	.word	0x20000130
 8000f08:	08009b90 	.word	0x08009b90
 8000f0c:	200000db 	.word	0x200000db

08000f10 <BLUENRG2__vUpdateLockStatus>:
//!
//! \return
//!   None
//*****************************************************
static void BLUENRG2__vUpdateLockStatus( int8_t i8Rssi, int8_t i8LockRssiTh, bool bDebounceEnable )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	717b      	strb	r3, [r7, #5]
    //static bool bLastLockState = false;

    if( i8Rssi != BLUENRG2_RSSI_INVALID_VALUE )
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b7f      	cmp	r3, #127	; 0x7f
 8000f28:	d03e      	beq.n	8000fa8 <BLUENRG2__vUpdateLockStatus+0x98>
    {
        if( !bDebounceEnable )
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	f083 0301 	eor.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d013      	beq.n	8000f5e <BLUENRG2__vUpdateLockStatus+0x4e>
        {
            if( i8Rssi >= i8LockRssiTh )
 8000f36:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	db03      	blt.n	8000f4a <BLUENRG2__vUpdateLockStatus+0x3a>
            {
                BLUENRG2__bMasterDevIsUnlocked = true;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <BLUENRG2__vUpdateLockStatus+0xa0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e002      	b.n	8000f50 <BLUENRG2__vUpdateLockStatus+0x40>
            }
            else
            {
                BLUENRG2__bMasterDevIsUnlocked = false;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <BLUENRG2__vUpdateLockStatus+0xa0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
            }

            PRINT_DBG( "[RSSI] raw %d dBm\r\n", i8Rssi );
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <BLUENRG2__vUpdateLockStatus+0xa4>)
 8000f58:	f007 fcd8 	bl	800890c <iprintf>
    // if( bLastLockState != BLUENRG2__bMasterDevIsUnlocked )
    // {
    //     bLastLockState = BLUENRG2__bMasterDevIsUnlocked;
    //     PRINT_DBG( "%s !!! \r\n", BLUENRG2__bMasterDevIsUnlocked ? "UNLOCKED" : "LOCKED" );
    // }
}
 8000f5c:	e024      	b.n	8000fa8 <BLUENRG2__vUpdateLockStatus+0x98>
            if( ( i8ProcessedRssi = BLUENRG2__i8GetProcessedRSSI( i8Rssi ) ) && BLUENRG2__bIsProcessedRSSIValid() )
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f82a 	bl	8000fbc <BLUENRG2__i8GetProcessedRSSI>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d019      	beq.n	8000fa8 <BLUENRG2__vUpdateLockStatus+0x98>
 8000f74:	f000 f888 	bl	8001088 <BLUENRG2__bIsProcessedRSSIValid>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d014      	beq.n	8000fa8 <BLUENRG2__vUpdateLockStatus+0x98>
                PRINT_DBG( "[RSSI] raw %d dBm, cali %d dBm\r\n", i8Rssi, i8ProcessedRssi );
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f86:	4619      	mov	r1, r3
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <BLUENRG2__vUpdateLockStatus+0xa8>)
 8000f8a:	f007 fcbf 	bl	800890c <iprintf>
                if( i8ProcessedRssi >= i8LockRssiTh )
 8000f8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	db03      	blt.n	8000fa2 <BLUENRG2__vUpdateLockStatus+0x92>
                    BLUENRG2__bMasterDevIsUnlocked = true;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <BLUENRG2__vUpdateLockStatus+0xa0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	e002      	b.n	8000fa8 <BLUENRG2__vUpdateLockStatus+0x98>
                    BLUENRG2__bMasterDevIsUnlocked = false;
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <BLUENRG2__vUpdateLockStatus+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000dc 	.word	0x200000dc
 8000fb4:	08009bac 	.word	0x08009bac
 8000fb8:	08009bc0 	.word	0x08009bc0

08000fbc <BLUENRG2__i8GetProcessedRSSI>:

static int8_t BLUENRG2__i8GetProcessedRSSI( int8_t i8RSSIVal )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    int8_t i8ReturnValue = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]

    BLUENRG2__st8Queue.i8Buffer[BLUENRG2__st8Queue.u8Idx] = i8RSSIVal;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fcc:	795b      	ldrb	r3, [r3, #5]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	5453      	strb	r3, [r2, r1]
    BLUENRG2__st8Queue.u8Idx++;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fe0:	715a      	strb	r2, [r3, #5]

    if( BLUENRG2__st8Queue.u8Idx >= BLUENRG2_Q_SZ )
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d905      	bls.n	8000ff6 <BLUENRG2__i8GetProcessedRSSI+0x3a>
    {
        BLUENRG2__st8Queue.bValid = true;
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	719a      	strb	r2, [r3, #6]

        BLUENRG2__st8Queue.u8Idx = 0U;
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	715a      	strb	r2, [r3, #5]
    }

    if( BLUENRG2__st8Queue.bValid )
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8000ff8:	799b      	ldrb	r3, [r3, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d038      	beq.n	8001070 <BLUENRG2__i8GetProcessedRSSI+0xb4>
    {
        int32_t i32TempRssi = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]

        int8_t i8MinValue = INT8_MAX;
 8001002:	237f      	movs	r3, #127	; 0x7f
 8001004:	73fb      	strb	r3, [r7, #15]
        int8_t i8MaxValue = INT8_MIN;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	73bb      	strb	r3, [r7, #14]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 800100a:	2300      	movs	r3, #0
 800100c:	737b      	strb	r3, [r7, #13]
 800100e:	e01b      	b.n	8001048 <BLUENRG2__i8GetProcessedRSSI+0x8c>
        {
            int8_t i8Value = BLUENRG2__st8Queue.i8Buffer[u8Idx];
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <BLUENRG2__i8GetProcessedRSSI+0xc4>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	733b      	strb	r3, [r7, #12]

            if( i8Value > i8MaxValue )
 8001018:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800101c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001020:	429a      	cmp	r2, r3
 8001022:	dd01      	ble.n	8001028 <BLUENRG2__i8GetProcessedRSSI+0x6c>
            {
                i8MaxValue = i8Value;
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	73bb      	strb	r3, [r7, #14]
            }

            if( i8Value < i8MinValue )
 8001028:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	429a      	cmp	r2, r3
 8001032:	da01      	bge.n	8001038 <BLUENRG2__i8GetProcessedRSSI+0x7c>
            {
                i8MinValue = i8Value;
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	73fb      	strb	r3, [r7, #15]
            }
            i32TempRssi += i8Value;
 8001038:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4413      	add	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        for( uint8_t u8Idx = 0U; u8Idx < BLUENRG2_Q_SZ; u8Idx++ )
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	3301      	adds	r3, #1
 8001046:	737b      	strb	r3, [r7, #13]
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	2b04      	cmp	r3, #4
 800104c:	d9e0      	bls.n	8001010 <BLUENRG2__i8GetProcessedRSSI+0x54>
        }

        i32TempRssi -= i8MinValue;
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	613b      	str	r3, [r7, #16]
        i32TempRssi -= i8MaxValue;
 8001058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	613b      	str	r3, [r7, #16]

        i8ReturnValue = (int8_t) ( i32TempRssi / (int32_t) ( BLUENRG2_Q_SZ - 2 ) );
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <BLUENRG2__i8GetProcessedRSSI+0xc8>)
 8001066:	fb82 1203 	smull	r1, r2, r2, r3
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	75fb      	strb	r3, [r7, #23]
    }

    return i8ReturnValue;
 8001070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	2000009c 	.word	0x2000009c
 8001084:	55555556 	.word	0x55555556

08001088 <BLUENRG2__bIsProcessedRSSIValid>:

static bool BLUENRG2__bIsProcessedRSSIValid( void )
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
    return BLUENRG2__st8Queue.bValid;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <BLUENRG2__bIsProcessedRSSIValid+0x14>)
 800108e:	799b      	ldrb	r3, [r3, #6]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2000009c 	.word	0x2000009c

080010a0 <hci_le_connection_complete_event>:
                                       uint16_t Conn_Interval,
                                       uint16_t Conn_Latency,
                                       uint16_t Supervision_Timeout,
                                       uint8_t  Master_Clock_Accuracy )

{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	4623      	mov	r3, r4
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	4603      	mov	r3, r0
 80010b4:	80bb      	strh	r3, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	4613      	mov	r3, r2
 80010bc:	70fb      	strb	r3, [r7, #3]
    BLUENRG2__stConnCTX.u16Handle = Connection_Handle;
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <hci_le_connection_complete_event+0x88>)
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	8053      	strh	r3, [r2, #2]
    BLUENRG2__stConnCTX.u8Role    = Role;
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <hci_le_connection_complete_event+0x88>)
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	7113      	strb	r3, [r2, #4]

    PRINT_DBG( "Connection Complete with peer address: " );
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <hci_le_connection_complete_event+0x8c>)
 80010cc:	f007 fc1e 	bl	800890c <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80010d0:	2305      	movs	r3, #5
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e00e      	b.n	80010f4 <hci_le_connection_complete_event+0x54>
    {
        PRINT_DBG( "%02X-", Peer_Address[i8Idx] );
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4813      	ldr	r0, [pc, #76]	; (8001130 <hci_le_connection_complete_event+0x90>)
 80010e4:	f007 fc12 	bl	800890c <iprintf>
    for( int8_t i8Idx = BLUENRG2_BDADDR_BYTE_NUM - 1; i8Idx > 0; i8Idx-- )
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dcec      	bgt.n	80010d6 <hci_le_connection_complete_event+0x36>
    }
    PRINT_DBG( "%02X\r\n", Peer_Address[0] );
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <hci_le_connection_complete_event+0x94>)
 8001104:	f007 fc02 	bl	800890c <iprintf>

    if( BLUENRG2__stConnCTX.u8Role == BLUENRG2_MASTER_ROLE )
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <hci_le_connection_complete_event+0x88>)
 800110a:	791b      	ldrb	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <hci_le_connection_complete_event+0x78>
    {
        BLUENRG2__enState = BLUENRG2_STAT_MAIN_CONNECTED;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <hci_le_connection_complete_event+0x98>)
 8001112:	2208      	movs	r2, #8
 8001114:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
    }
}
 8001116:	e002      	b.n	800111e <hci_le_connection_complete_event+0x7e>
        BLUENRG2__enState = BLUENRG2_STAT_IDLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <hci_le_connection_complete_event+0x98>)
 800111a:	2209      	movs	r2, #9
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	200000a4 	.word	0x200000a4
 800112c:	08009be4 	.word	0x08009be4
 8001130:	08009c0c 	.word	0x08009c0c
 8001134:	08009c14 	.word	0x08009c14
 8001138:	200000a3 	.word	0x200000a3

0800113c <hci_disconnection_complete_event>:
//*****************************************************
//! \brief  This event indicates the discconnection from a peer device.
//!
//*****************************************************
void hci_disconnection_complete_event( uint8_t Status, uint16_t Connection_Handle, uint8_t Reason )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	460b      	mov	r3, r1
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]

    PRINT_DBG( "Disconnection with reason: 0x%02X\r\n", Reason );
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <hci_disconnection_complete_event+0x2c>)
 8001154:	f007 fbda 	bl	800890c <iprintf>
    BLUENRG2__enState = BLUENRG2_STAT_INIT;
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <hci_disconnection_complete_event+0x30>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	08009c1c 	.word	0x08009c1c
 800116c:	200000a3 	.word	0x200000a3

08001170 <hci_le_advertising_report_event>:
//*****************************************************
//! \brief  An advertising report is received.
//!
//*****************************************************
void hci_le_advertising_report_event( uint8_t Num_Reports, Advertising_Report_t Advertising_Report[] )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
    /* Advertising_Report contains all the expected parameters */
    uint8_t u8DataLen = Advertising_Report[0].Length_Data;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	7a1b      	ldrb	r3, [r3, #8]
 8001180:	73fb      	strb	r3, [r7, #15]

    if( !BLUENRG2__stConnCTX.stDevice.bValid )
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <hci_le_advertising_report_event+0x90>)
 8001184:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d031      	beq.n	80011f6 <hci_le_advertising_report_event+0x86>
    {
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d12d      	bne.n	80011f6 <hci_le_advertising_report_event+0x86>
            BLUENRG2__bFindDeviceName( u8DataLen, Advertising_Report[0].Data ) )
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe24 	bl	8000df0 <BLUENRG2__bFindDeviceName>
 80011a8:	4603      	mov	r3, r0
        if( ( ADV_IND == Advertising_Report[0].Event_Type ) &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d023      	beq.n	80011f6 <hci_le_advertising_report_event+0x86>
        {
            BLUENRG2__vUpdateLockStatus( Advertising_Report[0].RSSI, BLUENRG2_RSSI_THRESHOLD_NEAR, false );
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fea8 	bl	8000f10 <BLUENRG2__vUpdateLockStatus>

            if( BLUENRG2__bMasterDevIsUnlocked )
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <hci_le_advertising_report_event+0x94>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d016      	beq.n	80011f6 <hci_le_advertising_report_event+0x86>
            {
                BLUENRG2__stConnCTX.stDevice.bValid = true;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <hci_le_advertising_report_event+0x90>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                BLUENRG2__stConnCTX.stDevice.u8Type = Advertising_Report[0].Address_Type;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	785a      	ldrb	r2, [r3, #1]
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <hci_le_advertising_report_event+0x90>)
 80011d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                BLUENRG_memcpy( BLUENRG2__stConnCTX.stDevice.au8Addr, Advertising_Report[0].Address,
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	1c9a      	adds	r2, r3, #2
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <hci_le_advertising_report_event+0x90>)
 80011e0:	3330      	adds	r3, #48	; 0x30
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	6018      	str	r0, [r3, #0]
 80011e6:	8892      	ldrh	r2, [r2, #4]
 80011e8:	809a      	strh	r2, [r3, #4]
                                sizeof( Advertising_Report[0].Address ) );
                PRINT_DBG( "Device found\r\n" );
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <hci_le_advertising_report_event+0x98>)
 80011ec:	f007 fbf4 	bl	80089d8 <puts>
                BLUENRG2__enState = BLUENRG2_STAT_SCAN_DONE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <hci_le_advertising_report_event+0x9c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000a4 	.word	0x200000a4
 8001204:	200000dc 	.word	0x200000dc
 8001208:	08009c40 	.word	0x08009c40
 800120c:	200000a3 	.word	0x200000a3

08001210 <aci_gap_proc_complete_event>:
//*****************************************************
//! \brief  This event indicates the end of a GAP procedure.
//!
//*****************************************************
void aci_gap_proc_complete_event( uint8_t Procedure_Code, uint8_t Status, uint8_t u8DataLen, uint8_t Data[] )
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	717b      	strb	r3, [r7, #5]
    if( Procedure_Code == GAP_GENERAL_DISCOVERY_PROC )
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d112      	bne.n	8001250 <aci_gap_proc_complete_event+0x40>
    {
        /* gap procedure complete has been raised as consequence of a GAP
           terminate procedure done after a device found event during the discovery procedure */
        if( BLUENRG2__stConnCTX.stDevice.bValid && !BLUENRG2__stConnCTX.bHasConnection )
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <aci_gap_proc_complete_event+0x4c>)
 800122c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00a      	beq.n	800124a <aci_gap_proc_complete_event+0x3a>
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <aci_gap_proc_complete_event+0x4c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f083 0301 	eor.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <aci_gap_proc_complete_event+0x3a>
        {
            BLUENRG2__enState = BLUENRG2_STAT_START_CONNECT;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <aci_gap_proc_complete_event+0x50>)
 8001244:	2203      	movs	r2, #3
 8001246:	701a      	strb	r2, [r3, #0]
        {
            // discovery procedure has been completed and no device found:
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
        }
    }
}
 8001248:	e002      	b.n	8001250 <aci_gap_proc_complete_event+0x40>
            BLUENRG2__enState = BLUENRG2_STAT_INIT;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <aci_gap_proc_complete_event+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200000a4 	.word	0x200000a4
 8001260:	200000a3 	.word	0x200000a3

08001264 <aci_gatt_attribute_modified_event>:
                                        uint16_t Attr_Handle, 
                                        uint16_t Offset,
                                        uint16_t Attr_Data_Length,
                                        uint8_t Attr_Data[] )
// clang-format on
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	80fb      	strh	r3, [r7, #6]
 8001276:	4603      	mov	r3, r0
 8001278:	80bb      	strh	r3, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]
 800127e:	4613      	mov	r3, r2
 8001280:	803b      	strh	r3, [r7, #0]
    BLUENRG2__vAttributeModifiedCB( Attr_Handle, Attr_Data_Length, Attr_Data );
 8001282:	883b      	ldrh	r3, [r7, #0]
 8001284:	b2d9      	uxtb	r1, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fdf4 	bl	8000e78 <BLUENRG2__vAttributeModifiedCB>
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}

08001298 <aci_gatt_notification_event>:
//*****************************************************
void aci_gatt_notification_event( uint16_t Connection_Handle,
                                  uint16_t Attribute_Handle,
                                  uint8_t  Attribute_Value_Length,
                                  uint8_t  Attribute_Value[] )
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4603      	mov	r3, r0
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	460b      	mov	r3, r1
 80012a6:	81bb      	strh	r3, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	72fb      	strb	r3, [r7, #11]
    // if( Attribute_Handle == BLUENRG2__stConnCTX.RemoteTx.u16Handle + BLUENRG2_CHAR_VALUE_OFFSET )
    // {
    //     BLUENRG2__vReceiveData( Attribute_Value, Attribute_Value_Length );
    // }
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <aci_gatt_disc_read_char_by_uuid_resp_event>:
//*****************************************************
void aci_gatt_disc_read_char_by_uuid_resp_event( uint16_t Connection_Handle,
                                                 uint16_t Attribute_Handle,
                                                 uint8_t  Attribute_Value_Length,
                                                 uint8_t  Attribute_Value[] )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4603      	mov	r3, r0
 80012c2:	81fb      	strh	r3, [r7, #14]
 80012c4:	460b      	mov	r3, r1
 80012c6:	81bb      	strh	r3, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	72fb      	strb	r3, [r7, #11]
    PRINT_DBG( "aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle );
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <aci_gatt_disc_read_char_by_uuid_resp_event+0x74>)
 80012d2:	f007 fb1b 	bl	800890c <iprintf>

    if( !BLUENRG2__stConnCTX.RemoteTx.bValid )
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <aci_gatt_disc_read_char_by_uuid_resp_event+0x46>
    {
        BLUENRG2__stConnCTX.RemoteTx.u16Handle = Attribute_Handle;
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	8313      	strh	r3, [r2, #24]
        PRINT_DBG( "Remote TX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteTx.u16Handle );
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80012ec:	8b1b      	ldrh	r3, [r3, #24]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <aci_gatt_disc_read_char_by_uuid_resp_event+0x7c>)
 80012f2:	f007 fb0b 	bl	800890c <iprintf>
        BLUENRG2__stConnCTX.RemoteTx.bValid = true;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	719a      	strb	r2, [r3, #6]
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
        }
    }
}
 80012fc:	e012      	b.n	8001324 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001300:	7e9b      	ldrb	r3, [r3, #26]
 8001302:	f083 0301 	eor.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <aci_gatt_disc_read_char_by_uuid_resp_event+0x6c>
            BLUENRG2__stConnCTX.RemoteRx.u16Handle = Attribute_Handle;
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	8593      	strh	r3, [r2, #44]	; 0x2c
            PRINT_DBG( "Remote RX Char Handle 0x%04X\r\n", BLUENRG2__stConnCTX.RemoteRx.u16Handle );
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <aci_gatt_disc_read_char_by_uuid_resp_event+0x80>)
 800131a:	f007 faf7 	bl	800890c <iprintf>
            BLUENRG2__stConnCTX.RemoteRx.bValid = true;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <aci_gatt_disc_read_char_by_uuid_resp_event+0x78>)
 8001320:	2201      	movs	r2, #1
 8001322:	769a      	strb	r2, [r3, #26]
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08009c50 	.word	0x08009c50
 8001330:	200000a4 	.word	0x200000a4
 8001334:	08009c98 	.word	0x08009c98
 8001338:	08009cb8 	.word	0x08009cb8

0800133c <aci_gatt_proc_complete_event>:
//*****************************************************
//! \brief  GATT procedure complete event.
//!
//*****************************************************
void aci_gatt_proc_complete_event( uint16_t Connection_Handle, uint8_t Error_Code )
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	717b      	strb	r3, [r7, #5]
    if( BLUENRG2__stConnCTX.RemoteTx.bValid )
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <aci_gatt_proc_complete_event+0x50>)
 800134e:	799b      	ldrb	r3, [r3, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d014      	beq.n	800137e <aci_gatt_proc_complete_event+0x42>
    {
        if( !BLUENRG2__stConnCTX.RemoteRx.bValid )
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <aci_gatt_proc_complete_event+0x50>)
 8001356:	7e9b      	ldrb	r3, [r3, #26]
 8001358:	f083 0301 	eor.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <aci_gatt_proc_complete_event+0x2e>
        {
            BLUENRG2__enState = BLUENRG2_STAT_GET_REMOTE_RX;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <aci_gatt_proc_complete_event+0x54>)
 8001364:	2206      	movs	r2, #6
 8001366:	701a      	strb	r2, [r3, #0]
            {
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
            }
        }
    }
}
 8001368:	e009      	b.n	800137e <aci_gatt_proc_complete_event+0x42>
            if( !BLUENRG2__bRemoteTxNotifyEnabled )
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <aci_gatt_proc_complete_event+0x58>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f083 0301 	eor.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <aci_gatt_proc_complete_event+0x42>
                BLUENRG2__enState = BLUENRG2_STAT_FORCE_REMOTE_TX_NOTIFY;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <aci_gatt_proc_complete_event+0x54>)
 800137a:	2207      	movs	r2, #7
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200000a4 	.word	0x200000a4
 8001390:	200000a3 	.word	0x200000a3
 8001394:	200000db 	.word	0x200000db

08001398 <aci_gatt_tx_pool_available_event>:
//*****************************************************
//! \brief  GATT TX pool available event
//!
//*****************************************************
void aci_gatt_tx_pool_available_event( uint16_t Connection_Handle, uint16_t Available_Buffers )
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80bb      	strh	r3, [r7, #4]
    BLUENRG2__bTXbufferFull = false;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <aci_gatt_tx_pool_available_event+0x24>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000da 	.word	0x200000da

080013c0 <aci_att_exchange_mtu_resp_event>:
//*****************************************************
//! \brief  GATT ATT exchange MTU response event.
//!
//*****************************************************
void aci_att_exchange_mtu_resp_event( uint16_t Connection_Handle, uint16_t Server_RX_MTU )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	80fb      	strh	r3, [r7, #6]
 80013cc:	4613      	mov	r3, r2
 80013ce:	80bb      	strh	r3, [r7, #4]
    PRINT_DBG( "aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU );
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <aci_att_exchange_mtu_resp_event+0x60>)
 80013d6:	f007 fa99 	bl	800890c <iprintf>

    if( Server_RX_MTU <= CLIENT_MAX_MTU_SIZE )
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	2b9e      	cmp	r3, #158	; 0x9e
 80013de:	d805      	bhi.n	80013ec <aci_att_exchange_mtu_resp_event+0x2c>
    {
        write_char_len = Server_RX_MTU - 3;
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	3b03      	subs	r3, #3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <aci_att_exchange_mtu_resp_event+0x64>)
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	e002      	b.n	80013f2 <aci_att_exchange_mtu_resp_event+0x32>
    }
    else
    {
        write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <aci_att_exchange_mtu_resp_event+0x64>)
 80013ee:	229b      	movs	r2, #155	; 0x9b
 80013f0:	801a      	strh	r2, [r3, #0]
    }

    if( ( mtu_exchanged_wait == 0 ) || ( ( mtu_exchanged_wait == 1 ) ) )
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <aci_att_exchange_mtu_resp_event+0x68>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <aci_att_exchange_mtu_resp_event+0x42>
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <aci_att_exchange_mtu_resp_event+0x68>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d109      	bne.n	8001416 <aci_att_exchange_mtu_resp_event+0x56>
        /**
         * The aci_att_exchange_mtu_resp_event is received also if the
         * aci_gatt_exchange_config is called by the other peer.
         * Here we manage this case.
         */
        if( mtu_exchanged_wait == 0 )
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <aci_att_exchange_mtu_resp_event+0x68>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <aci_att_exchange_mtu_resp_event+0x50>
        {
            mtu_exchanged_wait = 2;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <aci_att_exchange_mtu_resp_event+0x68>)
 800140c:	2202      	movs	r2, #2
 800140e:	701a      	strb	r2, [r3, #0]
        }
        mtu_exchanged = 1;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <aci_att_exchange_mtu_resp_event+0x6c>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
    }
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	08009cd8 	.word	0x08009cd8
 8001424:	20000000 	.word	0x20000000
 8001428:	2000011d 	.word	0x2000011d
 800142c:	2000011c 	.word	0x2000011c

08001430 <aci_gap_pairing_complete_event>:
//*****************************************************
//! \brief  GAP PAIRING complete event
//!
//*****************************************************
void aci_gap_pairing_complete_event( uint16_t connection_handle, uint8_t status, uint8_t reason )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	460b      	mov	r3, r1
 800143c:	717b      	strb	r3, [r7, #5]
 800143e:	4613      	mov	r3, r2
 8001440:	713b      	strb	r3, [r7, #4]
    if( status == 0x02 )
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d106      	bne.n	8001456 <aci_gap_pairing_complete_event+0x26>
    { //Pairing Failed
        PRINT_DBG( "aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason );
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	793a      	ldrb	r2, [r7, #4]
 800144c:	4619      	mov	r1, r3
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <aci_gap_pairing_complete_event+0x40>)
 8001450:	f007 fa5c 	bl	800890c <iprintf>
    else
    {
        BLUENRG2__bMasterEncryptedUnlocked = true;
        PRINT_DBG( "aci_gap_pairing_complete_event with status 0x%02x\r\n Pairing succeed!!!", status );
    }
}
 8001454:	e007      	b.n	8001466 <aci_gap_pairing_complete_event+0x36>
        BLUENRG2__bMasterEncryptedUnlocked = true;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <aci_gap_pairing_complete_event+0x44>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
        PRINT_DBG( "aci_gap_pairing_complete_event with status 0x%02x\r\n Pairing succeed!!!", status );
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <aci_gap_pairing_complete_event+0x48>)
 8001462:	f007 fa53 	bl	800890c <iprintf>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08009d0c 	.word	0x08009d0c
 8001474:	200000dd 	.word	0x200000dd
 8001478:	08009d50 	.word	0x08009d50

0800147c <hci_encryption_change_event>:

void hci_encryption_change_event( uint8_t status, uint16_t connection_handle, uint8_t encryption_enabled )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	460b      	mov	r3, r1
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	71bb      	strb	r3, [r7, #6]
    PRINT_DBG( "hci_encryption_change_event, Link Encrypted %s\r\n", encryption_enabled ? "SUCCESS" : "FAILED" );
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <hci_encryption_change_event+0x1c>
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <hci_encryption_change_event+0x30>)
 8001496:	e000      	b.n	800149a <hci_encryption_change_event+0x1e>
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <hci_encryption_change_event+0x34>)
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <hci_encryption_change_event+0x38>)
 800149e:	f007 fa35 	bl	800890c <iprintf>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08009d98 	.word	0x08009d98
 80014b0:	08009da0 	.word	0x08009da0
 80014b4:	08009da8 	.word	0x08009da8

080014b8 <GATT_DB_u8AddService>:
 * Description    : Add the 'Accelerometer' service.
 * Input          : None
 * Return         : Status.
 *******************************************************************************/
uint8_t GATT_DB_u8AddService( void )
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b0a1      	sub	sp, #132	; 0x84
 80014bc:	af06      	add	r7, sp, #24
    // D973F2E1-B19E-11E2-9E96-0800200C9A66
    // D973F2E2-B19E-11E2-9E96-0800200C9A66
    // D973F2E3-B19E-11E2-9E96-0800200C9A66

    // clang-format off
    const uint8_t cu8ServiceUUID[GATT_DB_CUSTOM_UUID_BYTE_NUM]                  = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80014be:	4b5f      	ldr	r3, [pc, #380]	; (800163c <GATT_DB_u8AddService+0x184>)
 80014c0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80014c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const uint8_t cu8CharUUIDNormalControl[GATT_DB_CUSTOM_UUID_BYTE_NUM]        = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80014ca:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <GATT_DB_u8AddService+0x188>)
 80014cc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80014d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const uint8_t cu8CharUUIDEncryptedControl[GATT_DB_CUSTOM_UUID_BYTE_NUM]     = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <GATT_DB_u8AddService+0x18c>)
 80014d8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80014dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const uint8_t cu8CharUUIDAuthenticatedControl[GATT_DB_CUSTOM_UUID_BYTE_NUM] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe3,0xf2,0x73,0xd9};
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <GATT_DB_u8AddService+0x190>)
 80014e4:	f107 0420 	add.w	r4, r7, #32
 80014e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /**
     * Number of attribute records that can be added to this service
     * For this service it is given by:
     * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
     */
    uint8_t max_attribute_records = 1 + 3 * 3;
 80014ee:	230a      	movs	r3, #10
 80014f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    const uint16_t u16CharLen = 0x0001U;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    Service_UUID_t unTempServiceUUID;
    Char_UUID_t    unTempCharUUID;

    BLUENRG_memcpy( &unTempServiceUUID.Service_UUID_128, cu8ServiceUUID, GATT_DB_CUSTOM_UUID_BYTE_NUM );
 80014fa:	f107 0410 	add.w	r4, r7, #16
 80014fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    u8Ret = aci_gatt_add_service( UUID_TYPE_128, &unTempServiceUUID, PRIMARY_SERVICE, max_attribute_records,
 8001508:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800150c:	f107 0110 	add.w	r1, r7, #16
 8001510:	4a4e      	ldr	r2, [pc, #312]	; (800164c <GATT_DB_u8AddService+0x194>)
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	2002      	movs	r0, #2
 8001518:	f004 fdc9 	bl	80060ae <aci_gatt_add_service>
 800151c:	4603      	mov	r3, r0
 800151e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                                  &u16LocalServHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8001522:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001526:	2b00      	cmp	r3, #0
 8001528:	d179      	bne.n	800161e <GATT_DB_u8AddService+0x166>
        goto fail;

    // add normal write char
    BLUENRG_memcpy( &unTempCharUUID.Char_UUID_128, cu8CharUUIDNormalControl, GATT_DB_CUSTOM_UUID_BYTE_NUM );
 800152a:	463c      	mov	r4, r7
 800152c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    u8Ret = aci_gatt_add_char( u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, u16CharLen,
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <GATT_DB_u8AddService+0x194>)
 8001538:	8818      	ldrh	r0, [r3, #0]
 800153a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800153e:	463a      	mov	r2, r7
 8001540:	4943      	ldr	r1, [pc, #268]	; (8001650 <GATT_DB_u8AddService+0x198>)
 8001542:	9105      	str	r1, [sp, #20]
 8001544:	2100      	movs	r1, #0
 8001546:	9104      	str	r1, [sp, #16]
 8001548:	2110      	movs	r1, #16
 800154a:	9103      	str	r1, [sp, #12]
 800154c:	2101      	movs	r1, #1
 800154e:	9102      	str	r1, [sp, #8]
 8001550:	2100      	movs	r1, #0
 8001552:	9101      	str	r1, [sp, #4]
 8001554:	211a      	movs	r1, #26
 8001556:	9100      	str	r1, [sp, #0]
 8001558:	2102      	movs	r1, #2
 800155a:	f004 fe7e 	bl	800625a <aci_gatt_add_char>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                               CHAR_PROP_READ | CHAR_PROP_WRITE | CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE,
                               GATT_NOTIFY_ATTRIBUTE_WRITE, 16, 0, &u16LocalNormalWriteCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 8001564:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001568:	2b00      	cmp	r3, #0
 800156a:	d15a      	bne.n	8001622 <GATT_DB_u8AddService+0x16a>
        goto fail;

    // add encrypted write char
    BLUENRG_memcpy( &unTempCharUUID.Char_UUID_128, cu8CharUUIDEncryptedControl, GATT_DB_CUSTOM_UUID_BYTE_NUM );
 800156c:	463c      	mov	r4, r7
 800156e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    u8Ret = aci_gatt_add_char( u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, u16CharLen,
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <GATT_DB_u8AddService+0x194>)
 800157a:	8818      	ldrh	r0, [r3, #0]
 800157c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001580:	463a      	mov	r2, r7
 8001582:	4934      	ldr	r1, [pc, #208]	; (8001654 <GATT_DB_u8AddService+0x19c>)
 8001584:	9105      	str	r1, [sp, #20]
 8001586:	2100      	movs	r1, #0
 8001588:	9104      	str	r1, [sp, #16]
 800158a:	2110      	movs	r1, #16
 800158c:	9103      	str	r1, [sp, #12]
 800158e:	2101      	movs	r1, #1
 8001590:	9102      	str	r1, [sp, #8]
 8001592:	2120      	movs	r1, #32
 8001594:	9101      	str	r1, [sp, #4]
 8001596:	211a      	movs	r1, #26
 8001598:	9100      	str	r1, [sp, #0]
 800159a:	2102      	movs	r1, #2
 800159c:	f004 fe5d 	bl	800625a <aci_gatt_add_char>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                               CHAR_PROP_READ | CHAR_PROP_WRITE | CHAR_PROP_NOTIFY, ATTR_PERMISSION_ENCRY_WRITE,
                               GATT_NOTIFY_ATTRIBUTE_WRITE, 16, 0, &u16LocalEncryptedWriteCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80015a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d13b      	bne.n	8001626 <GATT_DB_u8AddService+0x16e>
        goto fail;

    // add encrypted write char
    BLUENRG_memcpy( &unTempCharUUID.Char_UUID_128, cu8CharUUIDAuthenticatedControl, GATT_DB_CUSTOM_UUID_BYTE_NUM );
 80015ae:	463c      	mov	r4, r7
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    u8Ret = aci_gatt_add_char( u16LocalServHandle, UUID_TYPE_128, &unTempCharUUID, u16CharLen,
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <GATT_DB_u8AddService+0x194>)
 80015bc:	8818      	ldrh	r0, [r3, #0]
 80015be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80015c2:	463a      	mov	r2, r7
 80015c4:	4924      	ldr	r1, [pc, #144]	; (8001658 <GATT_DB_u8AddService+0x1a0>)
 80015c6:	9105      	str	r1, [sp, #20]
 80015c8:	2100      	movs	r1, #0
 80015ca:	9104      	str	r1, [sp, #16]
 80015cc:	2110      	movs	r1, #16
 80015ce:	9103      	str	r1, [sp, #12]
 80015d0:	2101      	movs	r1, #1
 80015d2:	9102      	str	r1, [sp, #8]
 80015d4:	2108      	movs	r1, #8
 80015d6:	9101      	str	r1, [sp, #4]
 80015d8:	211a      	movs	r1, #26
 80015da:	9100      	str	r1, [sp, #0]
 80015dc:	2102      	movs	r1, #2
 80015de:	f004 fe3c 	bl	800625a <aci_gatt_add_char>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                               CHAR_PROP_READ | CHAR_PROP_WRITE | CHAR_PROP_NOTIFY, ATTR_PERMISSION_AUTHEN_WRITE,
                               GATT_NOTIFY_ATTRIBUTE_WRITE, 16, 0, &u16LocalAuthenWriteCharHandle );
    if( u8Ret != BLE_STATUS_SUCCESS )
 80015e8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11c      	bne.n	800162a <GATT_DB_u8AddService+0x172>
        goto fail;

    PRINT_DBG( "Local Control Service added\r\n" );
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <GATT_DB_u8AddService+0x1a4>)
 80015f2:	f007 f9f1 	bl	80089d8 <puts>

    PRINT_DBG( "Normal        Write Char Handle 0x%04X\r\n", u16LocalNormalWriteCharHandle );
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <GATT_DB_u8AddService+0x198>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <GATT_DB_u8AddService+0x1a8>)
 80015fe:	f007 f985 	bl	800890c <iprintf>
    PRINT_DBG( "Encrypted     Write Char Handle 0x%04X\r\n", u16LocalEncryptedWriteCharHandle );
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <GATT_DB_u8AddService+0x19c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <GATT_DB_u8AddService+0x1ac>)
 800160a:	f007 f97f 	bl	800890c <iprintf>
    PRINT_DBG( "Authenticated Write Char Handle 0x%04X\r\n", u16LocalAuthenWriteCharHandle );
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <GATT_DB_u8AddService+0x1a0>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <GATT_DB_u8AddService+0x1b0>)
 8001616:	f007 f979 	bl	800890c <iprintf>

    return BLE_STATUS_SUCCESS;
 800161a:	2300      	movs	r3, #0
 800161c:	e00a      	b.n	8001634 <GATT_DB_u8AddService+0x17c>
        goto fail;
 800161e:	bf00      	nop
 8001620:	e004      	b.n	800162c <GATT_DB_u8AddService+0x174>
        goto fail;
 8001622:	bf00      	nop
 8001624:	e002      	b.n	800162c <GATT_DB_u8AddService+0x174>
        goto fail;
 8001626:	bf00      	nop
 8001628:	e000      	b.n	800162c <GATT_DB_u8AddService+0x174>
        goto fail;
 800162a:	bf00      	nop

fail:
    PRINT_DBG( "Error while adding Sample service.\r\n" );
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <GATT_DB_u8AddService+0x1b4>)
 800162e:	f007 f9d3 	bl	80089d8 <puts>
    return BLE_STATUS_ERROR;
 8001632:	2347      	movs	r3, #71	; 0x47
}
 8001634:	4618      	mov	r0, r3
 8001636:	376c      	adds	r7, #108	; 0x6c
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	08009ea4 	.word	0x08009ea4
 8001640:	08009eb4 	.word	0x08009eb4
 8001644:	08009ec4 	.word	0x08009ec4
 8001648:	08009ed4 	.word	0x08009ed4
 800164c:	2000012a 	.word	0x2000012a
 8001650:	2000012c 	.word	0x2000012c
 8001654:	2000012e 	.word	0x2000012e
 8001658:	20000130 	.word	0x20000130
 800165c:	08009ddc 	.word	0x08009ddc
 8001660:	08009dfc 	.word	0x08009dfc
 8001664:	08009e28 	.word	0x08009e28
 8001668:	08009e54 	.word	0x08009e54
 800166c:	08009e80 	.word	0x08009e80

08001670 <APP_UserEvtRx>:

// clang-format off
void APP_UserEvtRx(void *pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d163      	bne.n	800174c <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b3e      	cmp	r3, #62	; 0x3e
 8001690:	d11e      	bne.n	80016d0 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3302      	adds	r3, #2
 8001696:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e014      	b.n	80016c8 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	492b      	ldr	r1, [pc, #172]	; (8001754 <APP_UserEvtRx+0xe4>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d108      	bne.n	80016c2 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <APP_UserEvtRx+0xe4>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	3201      	adds	r2, #1
 80016be:	4610      	mov	r0, r2
 80016c0:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b09      	cmp	r3, #9
 80016cc:	d9e7      	bls.n	800169e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80016ce:	e03d      	b.n	800174c <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d11e      	bne.n	8001716 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3302      	adds	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e014      	b.n	800170e <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	491b      	ldr	r1, [pc, #108]	; (8001758 <APP_UserEvtRx+0xe8>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d108      	bne.n	8001708 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <APP_UserEvtRx+0xe8>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4413      	add	r3, r2
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	3202      	adds	r2, #2
 8001704:	4610      	mov	r0, r2
 8001706:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	2b2a      	cmp	r3, #42	; 0x2a
 8001712:	d9e7      	bls.n	80016e4 <APP_UserEvtRx+0x74>
}
 8001714:	e01a      	b.n	800174c <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e014      	b.n	8001746 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b29a      	uxth	r2, r3
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <APP_UserEvtRx+0xec>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800172a:	429a      	cmp	r2, r3
 800172c:	d108      	bne.n	8001740 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <APP_UserEvtRx+0xec>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	3202      	adds	r2, #2
 800173c:	4610      	mov	r0, r2
 800173e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3301      	adds	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b06      	cmp	r3, #6
 800174a:	d9e7      	bls.n	800171c <APP_UserEvtRx+0xac>
}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	08009fa8 	.word	0x08009fa8
 8001758:	08009ff8 	.word	0x08009ff8
 800175c:	08009f70 	.word	0x08009f70

08001760 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001764:	2006      	movs	r0, #6
 8001766:	f001 f8b2 	bl	80028ce <HAL_NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}

0800176e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001772:	2006      	movs	r0, #6
 8001774:	f001 f8b9 	bl	80028ea <HAL_NVIC_DisableIRQ>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HCI_TL_SPI_Init+0x94>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HCI_TL_SPI_Init+0x94>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HCI_TL_SPI_Init+0x94>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800179c:	2301      	movs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f001 f912 	bl	80029dc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80017b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f001 f902 	bl	80029dc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80017d8:	2302      	movs	r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f001 f8f3 	bl	80029dc <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2102      	movs	r1, #2
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f001 fba3 	bl	8002f48 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8001802:	f000 fcf7 	bl	80021f4 <BSP_SPI1_Init>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001818:	2101      	movs	r1, #1
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f001 fa87 	bl	8002d30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001822:	2102      	movs	r1, #2
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f001 fa82 	bl	8002d30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f001 fa7c 	bl	8002d30 <HAL_GPIO_DeInit>
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}

0800183e <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2102      	movs	r1, #2
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f001 fb7d 	bl	8002f48 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f001 fb76 	bl	8002f48 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800185c:	2005      	movs	r0, #5
 800185e:	f000 fef7 	bl	8002650 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f001 fb6c 	bl	8002f48 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001870:	2005      	movs	r0, #5
 8001872:	f000 feed 	bl	8002650 <HAL_Delay>
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}

0800187c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <HCI_TL_SPI_Receive+0xe0>)
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189a:	6018      	str	r0, [r3, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80018a0:	f7ff ff65 	bl	800176e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f001 fb4c 	bl	8002f48 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018b0:	f107 0108 	add.w	r1, r7, #8
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2205      	movs	r2, #5
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fcca 	bl	8002254 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80018c0:	7b3b      	ldrb	r3, [r7, #12]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80018d0:	8bfb      	ldrh	r3, [r7, #30]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d01e      	beq.n	8001914 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80018d6:	8bfa      	ldrh	r2, [r7, #30]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d901      	bls.n	80018e2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	777b      	strb	r3, [r7, #29]
 80018e6:	e010      	b.n	800190a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80018e8:	f107 0116 	add.w	r1, r7, #22
 80018ec:	f107 0317 	add.w	r3, r7, #23
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fcae 	bl	8002254 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80018f8:	7f7b      	ldrb	r3, [r7, #29]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	7dba      	ldrb	r2, [r7, #22]
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001904:	7f7b      	ldrb	r3, [r7, #29]
 8001906:	3301      	adds	r3, #1
 8001908:	777b      	strb	r3, [r7, #29]
 800190a:	7f7b      	ldrb	r3, [r7, #29]
 800190c:	b29b      	uxth	r3, r3
 800190e:	8bfa      	ldrh	r2, [r7, #30]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8e9      	bhi.n	80018e8 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001914:	f000 fe90 	bl	8002638 <HAL_GetTick>
 8001918:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800191a:	e007      	b.n	800192c <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800191c:	2101      	movs	r1, #1
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f001 faf9 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800192c:	f000 fe84 	bl	8002638 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d3ef      	bcc.n	800191c <HCI_TL_SPI_Receive+0xa0>
 800193c:	e000      	b.n	8001940 <HCI_TL_SPI_Receive+0xc4>
      break;
 800193e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001940:	f7ff ff0e 	bl	8001760 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2102      	movs	r1, #2
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f001 fafc 	bl	8002f48 <HAL_GPIO_WritePin>

  return len;
 8001950:	7f7b      	ldrb	r3, [r7, #29]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	08009ee4 	.word	0x08009ee4

08001960 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800196c:	4a41      	ldr	r2, [pc, #260]	; (8001a74 <HCI_TL_SPI_Send+0x114>)
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001976:	6018      	str	r0, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800197c:	f000 fe5c 	bl	8002638 <HAL_GetTick>
 8001980:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001982:	f7ff fef4 	bl	800176e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001986:	f000 fe57 	bl	8002638 <HAL_GetTick>
 800198a:	61f8      	str	r0, [r7, #28]

    result = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f001 fad6 	bl	8002f48 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800199c:	e00a      	b.n	80019b4 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 800199e:	f000 fe4b 	bl	8002638 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d903      	bls.n	80019b4 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80019ac:	f06f 0302 	mvn.w	r3, #2
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80019b2:	e004      	b.n	80019be <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80019b4:	f000 f862 	bl	8001a7c <IsDataAvailable>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ef      	beq.n	800199e <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f113 0f03 	cmn.w	r3, #3
 80019c4:	d106      	bne.n	80019d4 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2102      	movs	r1, #2
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f001 fabb 	bl	8002f48 <HAL_GPIO_WritePin>
      break;
 80019d2:	e031      	b.n	8001a38 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80019d4:	f107 010c 	add.w	r1, r7, #12
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2205      	movs	r2, #5
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fc38 	bl	8002254 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80019f4:	8b7a      	ldrh	r2, [r7, #26]
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d306      	bcc.n	8001a0a <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	461a      	mov	r2, r3
 8001a00:	491d      	ldr	r1, [pc, #116]	; (8001a78 <HCI_TL_SPI_Send+0x118>)
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fc26 	bl	8002254 <BSP_SPI1_SendRecv>
 8001a08:	e002      	b.n	8001a10 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8001a0a:	f06f 0301 	mvn.w	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2102      	movs	r1, #2
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f001 fa96 	bl	8002f48 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a1c:	f000 fe0c 	bl	8002638 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d903      	bls.n	8001a32 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 8001a2a:	f06f 0302 	mvn.w	r3, #2
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001a30:	e002      	b.n	8001a38 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dba6      	blt.n	8001986 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001a38:	f000 fdfe 	bl	8002638 <HAL_GetTick>
 8001a3c:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a3e:	e007      	b.n	8001a50 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001a40:	2101      	movs	r1, #1
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f001 fa67 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001a50:	f000 fdf2 	bl	8002638 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a5e:	d3ef      	bcc.n	8001a40 <HCI_TL_SPI_Send+0xe0>
 8001a60:	e000      	b.n	8001a64 <HCI_TL_SPI_Send+0x104>
      break;
 8001a62:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001a64:	f7ff fe7c 	bl	8001760 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	08009eec 	.word	0x08009eec
 8001a78:	2000013c 	.word	0x2000013c

08001a7c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a80:	2101      	movs	r1, #1
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f001 fa47 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <hci_tl_lowlevel_init+0x54>)
 8001aa4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <hci_tl_lowlevel_init+0x58>)
 8001aa8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <hci_tl_lowlevel_init+0x5c>)
 8001aac:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <hci_tl_lowlevel_init+0x60>)
 8001ab0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <hci_tl_lowlevel_init+0x64>)
 8001ab4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <hci_tl_lowlevel_init+0x68>)
 8001ab8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 fbad 	bl	800821c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001ac2:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001ac6:	4810      	ldr	r0, [pc, #64]	; (8001b08 <hci_tl_lowlevel_init+0x6c>)
 8001ac8:	f000 ff43 	bl	8002952 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <hci_tl_lowlevel_init+0x70>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <hci_tl_lowlevel_init+0x6c>)
 8001ad2:	f000 ff24 	bl	800291e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2006      	movs	r0, #6
 8001adc:	f000 fedb 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ae0:	2006      	movs	r0, #6
 8001ae2:	f000 fef4 	bl	80028ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0800177d 	.word	0x0800177d
 8001af4:	08001815 	.word	0x08001815
 8001af8:	08001961 	.word	0x08001961
 8001afc:	0800187d 	.word	0x0800187d
 8001b00:	0800183f 	.word	0x0800183f
 8001b04:	08002295 	.word	0x08002295
 8001b08:	20000134 	.word	0x20000134
 8001b0c:	08001b11 	.word	0x08001b11

08001b10 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001b14:	e005      	b.n	8001b22 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001b16:	2000      	movs	r0, #0
 8001b18:	f006 fce4 	bl	80084e4 <hci_notify_asynch_evt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001b22:	f7ff ffab 	bl	8001a7c <IsDataAvailable>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f4      	bne.n	8001b16 <hci_tl_lowlevel_isr+0x6>
 8001b2c:	e000      	b.n	8001b30 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001b2e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0

  HAL_Init();
 8001b36:	f000 fd0f 	bl	8002558 <HAL_Init>
  SystemClock_Config();
 8001b3a:	f000 f807 	bl	8001b4c <SystemClock_Config>
  MX_GPIO_Init();
 8001b3e:	f000 f857 	bl	8001bf0 <MX_GPIO_Init>
  
  BLUENRG2_vInit();
 8001b42:	f7fe fd3d 	bl	80005c0 <BLUENRG2_vInit>

  while (1)
  {
    BLUENRG2_vProcess();
 8001b46:	f7fe fd5d 	bl	8000604 <BLUENRG2_vProcess>
 8001b4a:	e7fc      	b.n	8001b46 <main+0x14>

08001b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b096      	sub	sp, #88	; 0x58
 8001b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	2244      	movs	r2, #68	; 0x44
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f007 f82c 	bl	8008bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b60:	463b      	mov	r3, r7
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b72:	f001 fa0f 	bl	8002f94 <HAL_PWREx_ControlVoltageScaling>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b7c:	f000 f8ae 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b80:	2302      	movs	r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b92:	2302      	movs	r3, #2
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fa46 	bl	8003040 <HAL_RCC_OscConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001bba:	f000 f88f 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fe1a 	bl	8003810 <HAL_RCC_ClockConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001be2:	f000 f87b 	bl	8001cdc <Error_Handler>
  }
}
 8001be6:	bf00      	nop
 8001be8:	3758      	adds	r7, #88	; 0x58
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_GPIO_Init+0xe8>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f001 f96a 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c74:	2301      	movs	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f000 fea6 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001c90:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cac:	f000 fe96 	bl	80029dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f000 fdee 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cba:	2006      	movs	r0, #6
 8001cbc:	f000 fe07 	bl	80028ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2028      	movs	r0, #40	; 0x28
 8001cc6:	f000 fde6 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cca:	2028      	movs	r0, #40	; 0x28
 8001ccc:	f000 fdff 	bl	80028ce <HAL_NVIC_EnableIRQ>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <Error_Handler+0x8>
	...

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x44>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <NMI_Handler+0x4>

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler+0x4>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f000 fc48 	bl	8002610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <EXTI0_IRQHandler+0x10>)
 8001d8a:	f000 fdf7 	bl	800297c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000134 	.word	0x20000134

08001d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <EXTI15_10_IRQHandler+0x10>)
 8001d9e:	f000 fded 	bl	800297c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c

08001dac <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <BSP_LED_Init+0x20>)
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	08009f14 	.word	0x08009f14

08001dd0 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <BSP_LED_On+0x28>)
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	2120      	movs	r1, #32
 8001de4:	2201      	movs	r2, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 f8ae 	bl	8002f48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000004 	.word	0x20000004

08001dfc <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <BSP_LED_Off+0x28>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	2120      	movs	r1, #32
 8001e10:	2200      	movs	r2, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 f898 	bl	8002f48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <LED_USER_GPIO_Init+0x78>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2120      	movs	r1, #32
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f001 f867 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e94:	f000 fda2 	bl	80029dc <HAL_GPIO_Init>

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <BSP_PB_Init+0x94>)
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d132      	bne.n	8001f2e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <BSP_PB_Init+0x98>)
 8001ece:	441a      	add	r2, r3
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	491b      	ldr	r1, [pc, #108]	; (8001f40 <BSP_PB_Init+0x9c>)
 8001ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 fd39 	bl	8002952 <HAL_EXTI_GetHandle>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ee6:	f06f 0303 	mvn.w	r3, #3
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e01f      	b.n	8001f2e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <BSP_PB_Init+0x98>)
 8001ef4:	1898      	adds	r0, r3, r2
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <BSP_PB_Init+0xa0>)
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2100      	movs	r1, #0
 8001f02:	f000 fd0c 	bl	800291e <HAL_EXTI_RegisterCallback>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f0c:	f06f 0303 	mvn.w	r3, #3
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e00c      	b.n	8001f2e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f14:	2028      	movs	r0, #40	; 0x28
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <BSP_PB_Init+0xa4>)
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	f000 fcb8 	bl	8002896 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f26:	2328      	movs	r3, #40	; 0x28
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fcd0 	bl	80028ce <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08009f18 	.word	0x08009f18
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	08009f1c 	.word	0x08009f1c
 8001f44:	08009f20 	.word	0x08009f20
 8001f48:	08009f24 	.word	0x08009f24

08001f4c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <BSP_PB_GetState+0x34>)
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 ffd7 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff fff0 	bl	8001f84 <BSP_PB_Callback>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <BUTTON_USER_GPIO_Init+0x6c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <BUTTON_USER_GPIO_Init+0x70>)
 8002006:	f000 fce9 	bl	80029dc <HAL_GPIO_Init>

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	48000800 	.word	0x48000800

0800201c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d903      	bls.n	8002038 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002030:	f06f 0301 	mvn.w	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e025      	b.n	8002084 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	79fa      	ldrb	r2, [r7, #7]
 800203c:	4914      	ldr	r1, [pc, #80]	; (8002090 <BSP_COM_Init+0x74>)
 800203e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002042:	4814      	ldr	r0, [pc, #80]	; (8002094 <BSP_COM_Init+0x78>)
 8002044:	4613      	mov	r3, r2
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	4613      	mov	r3, r2
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <BSP_COM_Init+0x78>)
 800205c:	4413      	add	r3, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f86a 	bl	8002138 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002064:	79fa      	ldrb	r2, [r7, #7]
 8002066:	4613      	mov	r3, r2
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <BSP_COM_Init+0x78>)
 8002070:	4413      	add	r3, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f810 	bl	8002098 <MX_USART2_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800207e:	f06f 0303 	mvn.w	r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000014 	.word	0x20000014
 8002094:	2000023c 	.word	0x2000023c

08002098 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <MX_USART2_UART_Init+0x64>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f002 fe88 	bl	8004df8 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40004400 	.word	0x40004400

08002100 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <__io_putchar+0x30>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4613      	mov	r3, r2
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <__io_putchar+0x34>)
 8002118:	1898      	adds	r0, r3, r2
 800211a:	1d39      	adds	r1, r7, #4
 800211c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002120:	2201      	movs	r2, #1
 8002122:	f002 fec1 	bl	8004ea8 <HAL_UART_Transmit>
  return ch;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200002c0 	.word	0x200002c0
 8002134:	2000023c 	.word	0x2000023c

08002138 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0ac      	sub	sp, #176	; 0xb0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2288      	movs	r2, #136	; 0x88
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f006 fd35 	bl	8008bb8 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800214e:	2302      	movs	r3, #2
 8002150:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002152:	2300      	movs	r3, #0
 8002154:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4618      	mov	r0, r3
 800215c:	f001 fd5e 	bl	8003c1c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <USART2_MspInit+0xb8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <USART2_MspInit+0xb8>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216a:	6593      	str	r3, [r2, #88]	; 0x58
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <USART2_MspInit+0xb8>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <USART2_MspInit+0xb8>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <USART2_MspInit+0xb8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <USART2_MspInit+0xb8>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002190:	2304      	movs	r3, #4
 8002192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80021a8:	2307      	movs	r3, #7
 80021aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80021ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f000 fc10 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80021bc:	2308      	movs	r3, #8
 80021be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80021d4:	2307      	movs	r3, #7
 80021d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80021da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f000 fbfa 	bl	80029dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80021e8:	bf00      	nop
 80021ea:	37b0      	adds	r7, #176	; 0xb0
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <BSP_SPI1_Init+0x54>)
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <BSP_SPI1_Init+0x58>)
 8002202:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <BSP_SPI1_Init+0x5c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4911      	ldr	r1, [pc, #68]	; (8002250 <BSP_SPI1_Init+0x5c>)
 800220c:	600a      	str	r2, [r1, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <BSP_SPI1_Init+0x54>)
 8002214:	f002 fc7e 	bl	8004b14 <HAL_SPI_GetState>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10e      	bne.n	800223c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <BSP_SPI1_Init+0x54>)
 8002220:	f000 f882 	bl	8002328 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <BSP_SPI1_Init+0x54>)
 800222c:	f000 f83a 	bl	80022a4 <MX_SPI1_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002236:	f06f 0307 	mvn.w	r3, #7
 800223a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200002c4 	.word	0x200002c4
 800224c:	40013000 	.word	0x40013000
 8002250:	20000328 	.word	0x20000328

08002254 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <BSP_SPI1_SendRecv+0x3c>)
 8002274:	f002 fa3b 	bl	80046ee <HAL_SPI_TransmitReceive>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800227e:	f06f 0305 	mvn.w	r3, #5
 8002282:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002284:	697b      	ldr	r3, [r7, #20]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200002c4 	.word	0x200002c4

08002294 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002298:	f000 f9ce 	bl	8002638 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <MX_SPI1_Init+0x80>)
 80022b4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022bc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022ca:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022de:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2228      	movs	r2, #40	; 0x28
 80022e4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2207      	movs	r2, #7
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f002 f942 	bl	8004594 <HAL_SPI_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013000 	.word	0x40013000

08002328 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <SPI1_MspInit+0xbc>)
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <SPI1_MspInit+0xbc>)
 8002336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800233a:	6613      	str	r3, [r2, #96]	; 0x60
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <SPI1_MspInit+0xbc>)
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <SPI1_MspInit+0xbc>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <SPI1_MspInit+0xbc>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <SPI1_MspInit+0xbc>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <SPI1_MspInit+0xbc>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <SPI1_MspInit+0xbc>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <SPI1_MspInit+0xbc>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002378:	2340      	movs	r3, #64	; 0x40
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002388:	2305      	movs	r3, #5
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002396:	f000 fb21 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80023aa:	2305      	movs	r3, #5
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b8:	f000 fb10 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80023bc:	2308      	movs	r3, #8
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80023cc:	2305      	movs	r3, #5
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4804      	ldr	r0, [pc, #16]	; (80023e8 <SPI1_MspInit+0xc0>)
 80023d8:	f000 fb00 	bl	80029dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	48000400 	.word	0x48000400

080023ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e00a      	b.n	8002414 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023fe:	f3af 8000 	nop.w
 8002402:	4601      	mov	r1, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	b2ca      	uxtb	r2, r1
 800240c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbf0      	blt.n	80023fe <_read+0x12>
	}

return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e009      	b.n	800244c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	60ba      	str	r2, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe5d 	bl	8002100 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	dbf1      	blt.n	8002438 <_write+0x12>
	}
	return len;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_close>:

int _close(int file)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002486:	605a      	str	r2, [r3, #4]
	return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <_isatty>:

int _isatty(int file)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	return 1;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
	return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f8:	f006 fbac 	bl	8008c54 <__errno>
 80024fc:	4603      	mov	r3, r0
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e009      	b.n	800251c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <_sbrk+0x64>)
 8002518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20018000 	.word	0x20018000
 8002528:	00000400 	.word	0x00000400
 800252c:	2000032c 	.word	0x2000032c
 8002530:	20000a28 	.word	0x20000a28

08002534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <SystemInit+0x20>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <SystemInit+0x20>)
 8002540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_Init+0x3c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_Init+0x3c>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256e:	2003      	movs	r0, #3
 8002570:	f000 f986 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002574:	2000      	movs	r0, #0
 8002576:	f000 f80f 	bl	8002598 <HAL_InitTick>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	e001      	b.n	800258a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002586:	f7ff fbaf 	bl	8001ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800258a:	79fb      	ldrb	r3, [r7, #7]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40022000 	.word	0x40022000

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_InitTick+0x6c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_InitTick+0x70>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_InitTick+0x6c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f99f 	bl	8002906 <HAL_SYSTICK_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d809      	bhi.n	80025e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 f95b 	bl	8002896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_InitTick+0x74>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e007      	b.n	80025f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e004      	b.n	80025f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e001      	b.n	80025f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000020 	.word	0x20000020
 8002608:	20000018 	.word	0x20000018
 800260c:	2000001c 	.word	0x2000001c

08002610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000020 	.word	0x20000020
 8002634:	20000330 	.word	0x20000330

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000330 	.word	0x20000330

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000020 	.word	0x20000020

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4907      	ldr	r1, [pc, #28]	; (8002734 <__NVIC_EnableIRQ+0x38>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000e100 	.word	0xe000e100

08002738 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db12      	blt.n	8002770 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	490a      	ldr	r1, [pc, #40]	; (800277c <__NVIC_DisableIRQ+0x44>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	3320      	adds	r3, #32
 8002760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002764:	f3bf 8f4f 	dsb	sy
}
 8002768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800276a:	f3bf 8f6f 	isb	sy
}
 800276e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff05 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff1a 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff0d 	bl	80026fc <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff1d 	bl	8002738 <__NVIC_DisableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff94 	bl	800283c <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	460b      	mov	r3, r1
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	605a      	str	r2, [r3, #4]
      break;
 800293c:	e002      	b.n	8002944 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
      break;
 8002942:	bf00      	nop
  }

  return status;
 8002944:	7dfb      	ldrb	r3, [r7, #23]
}
 8002946:	4618      	mov	r0, r3
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e003      	b.n	800296e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2201      	movs	r2, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_EXTI_IRQHandler+0x5c>)
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4798      	blx	r3
    }
  }
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40010414 	.word	0x40010414

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	e17f      	b.n	8002cec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8171 	beq.w	8002ce6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d005      	beq.n	8002a1c <HAL_GPIO_Init+0x40>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d130      	bne.n	8002a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a52:	2201      	movs	r2, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0201 	and.w	r2, r3, #1
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d118      	bne.n	8002abc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80ac 	beq.w	8002ce6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	; (8002d0c <HAL_GPIO_Init+0x330>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b92:	4a5e      	ldr	r2, [pc, #376]	; (8002d0c <HAL_GPIO_Init+0x330>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6613      	str	r3, [r2, #96]	; 0x60
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_GPIO_Init+0x330>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba6:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <HAL_GPIO_Init+0x334>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x242>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	; (8002d14 <HAL_GPIO_Init+0x338>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x23e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	; (8002d18 <HAL_GPIO_Init+0x33c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x23a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	; (8002d1c <HAL_GPIO_Init+0x340>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x236>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <HAL_GPIO_Init+0x344>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x232>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <HAL_GPIO_Init+0x348>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x22e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_GPIO_Init+0x34c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x22a>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x244>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c30:	4937      	ldr	r1, [pc, #220]	; (8002d10 <HAL_GPIO_Init+0x334>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c62:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f ae78 	bne.w	80029ec <HAL_GPIO_Init+0x10>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000
 8002d14:	48000400 	.word	0x48000400
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	48000c00 	.word	0x48000c00
 8002d20:	48001000 	.word	0x48001000
 8002d24:	48001400 	.word	0x48001400
 8002d28:	48001800 	.word	0x48001800
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d3e:	e0cd      	b.n	8002edc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d40:	2201      	movs	r2, #1
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80c0 	beq.w	8002ed6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d56:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d7e:	d025      	beq.n	8002dcc <HAL_GPIO_DeInit+0x9c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <HAL_GPIO_DeInit+0x1cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01f      	beq.n	8002dc8 <HAL_GPIO_DeInit+0x98>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <HAL_GPIO_DeInit+0x1d0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d019      	beq.n	8002dc4 <HAL_GPIO_DeInit+0x94>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	; (8002f04 <HAL_GPIO_DeInit+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_GPIO_DeInit+0x90>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a5b      	ldr	r2, [pc, #364]	; (8002f08 <HAL_GPIO_DeInit+0x1d8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00d      	beq.n	8002dbc <HAL_GPIO_DeInit+0x8c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	; (8002f0c <HAL_GPIO_DeInit+0x1dc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_DeInit+0x88>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a59      	ldr	r2, [pc, #356]	; (8002f10 <HAL_GPIO_DeInit+0x1e0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_GPIO_DeInit+0x84>
 8002db0:	2306      	movs	r3, #6
 8002db2:	e00c      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002db4:	2307      	movs	r3, #7
 8002db6:	e00a      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002db8:	2305      	movs	r3, #5
 8002dba:	e008      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e006      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e004      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e002      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_GPIO_DeInit+0x9e>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	f002 0203 	and.w	r2, r2, #3
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4093      	lsls	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d132      	bne.n	8002e44 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002dde:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	494b      	ldr	r1, [pc, #300]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	4947      	ldr	r1, [pc, #284]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dfa:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4944      	ldr	r1, [pc, #272]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e08:	4b42      	ldr	r3, [pc, #264]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4940      	ldr	r1, [pc, #256]	; (8002f14 <HAL_GPIO_DeInit+0x1e4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	4830      	ldr	r0, [pc, #192]	; (8002ef8 <HAL_GPIO_DeInit+0x1c8>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	3302      	adds	r3, #2
 8002e40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	08d2      	lsrs	r2, r2, #3
 8002e78:	4019      	ands	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af2b 	bne.w	8002d40 <HAL_GPIO_DeInit+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	48000400 	.word	0x48000400
 8002f00:	48000800 	.word	0x48000800
 8002f04:	48000c00 	.word	0x48000c00
 8002f08:	48001000 	.word	0x48001000
 8002f0c:	48001400 	.word	0x48001400
 8002f10:	48001800 	.word	0x48001800
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d130      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb0:	d038      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2232      	movs	r2, #50	; 0x32
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd8:	e002      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d102      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f2      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d110      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e00f      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d007      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000
 8003038:	20000018 	.word	0x20000018
 800303c:	431bde83 	.word	0x431bde83

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e3d8      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b97      	ldr	r3, [pc, #604]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4b94      	ldr	r3, [pc, #592]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80e4 	beq.w	800323c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_RCC_OscConfig+0x4a>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	f040 808b 	bne.w	8003198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b01      	cmp	r3, #1
 8003086:	f040 8087 	bne.w	8003198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800308a:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e3b0      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCC_OscConfig+0x7c>
 80030b2:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_OscConfig+0x88>
 80030bc:	4b7c      	ldr	r3, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d223      	bcs.n	8003114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fd43 	bl	8003b5c <RCC_SetFlashLatencyFromMSIRange>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e391      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e0:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a72      	ldr	r2, [pc, #456]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	496d      	ldr	r1, [pc, #436]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fe:	4b6c      	ldr	r3, [pc, #432]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4968      	ldr	r1, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
 8003112:	e025      	b.n	8003160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003114:	4b66      	ldr	r3, [pc, #408]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a65      	ldr	r2, [pc, #404]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800311a:	f043 0308 	orr.w	r3, r3, #8
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4960      	ldr	r1, [pc, #384]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	495b      	ldr	r1, [pc, #364]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fd03 	bl	8003b5c <RCC_SetFlashLatencyFromMSIRange>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e351      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003160:	f000 fc38 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	4950      	ldr	r1, [pc, #320]	; (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_RCC_OscConfig+0x278>)
 800317e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003180:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fa07 	bl	8002598 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d052      	beq.n	800323a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	e335      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d032      	beq.n	8003206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a0:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fa44 	bl	8002638 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b4:	f7ff fa40 	bl	8002638 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e31e      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a36      	ldr	r2, [pc, #216]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4931      	ldr	r1, [pc, #196]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	492c      	ldr	r1, [pc, #176]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	e01a      	b.n	800323c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003212:	f7ff fa11 	bl	8002638 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321a:	f7ff fa0d 	bl	8002638 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e2eb      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322c:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x1da>
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800323a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d074      	beq.n	8003332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x21a>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d10e      	bne.n	8003272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d10b      	bne.n	8003272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d064      	beq.n	8003330 <HAL_RCC_OscConfig+0x2f0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d160      	bne.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e2c8      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x24a>
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e026      	b.n	80032d8 <HAL_RCC_OscConfig+0x298>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_OscConfig+0x280>
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a02      	ldr	r2, [pc, #8]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e014      	b.n	80032d8 <HAL_RCC_OscConfig+0x298>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08009f28 	.word	0x08009f28
 80032b8:	20000018 	.word	0x20000018
 80032bc:	2000001c 	.word	0x2000001c
 80032c0:	4ba0      	ldr	r3, [pc, #640]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a9f      	ldr	r2, [pc, #636]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b9d      	ldr	r3, [pc, #628]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a9c      	ldr	r2, [pc, #624]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff f9aa 	bl	8002638 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7ff f9a6 	bl	8002638 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e284      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2a8>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7ff f996 	bl	8002638 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7ff f992 	bl	8002638 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e270      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x2d0>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d060      	beq.n	8003400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x310>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d119      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d116      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x328>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e24d      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	4973      	ldr	r1, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	e040      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d023      	beq.n	80033ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003386:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7ff f951 	bl	8002638 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7ff f94d 	bl	8002638 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e22b      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	495f      	ldr	r1, [pc, #380]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	e018      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7ff f92d 	bl	8002638 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7ff f929 	bl	8002638 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e207      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03c      	beq.n	8003486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01c      	beq.n	800344e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341a:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7ff f908 	bl	8002638 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7ff f904 	bl	8002638 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1e2      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x3ec>
 800344c:	e01b      	b.n	8003486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003454:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7ff f8eb 	bl	8002638 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003466:	f7ff f8e7 	bl	8002638 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1c5      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ef      	bne.n	8003466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80a6 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x508>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d118      	bne.n	80034fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x508>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x508>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d8:	f7ff f8ae 	bl	8002638 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7ff f8aa 	bl	8002638 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e188      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x508>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_RCC_OscConfig+0x4d8>
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003516:	e029      	b.n	800356c <HAL_RCC_OscConfig+0x52c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d115      	bne.n	800354c <HAL_RCC_OscConfig+0x50c>
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	4a03      	ldr	r2, [pc, #12]	; (8003544 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x52c>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	4a90      	ldr	r2, [pc, #576]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800355c:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	4a8c      	ldr	r2, [pc, #560]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d016      	beq.n	80035a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7ff f860 	bl	8002638 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7ff f85c 	bl	8002638 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e138      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003592:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ed      	beq.n	800357c <HAL_RCC_OscConfig+0x53c>
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7ff f849 	bl	8002638 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7ff f845 	bl	8002638 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e121      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c0:	4b74      	ldr	r3, [pc, #464]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ed      	bne.n	80035aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 810c 	beq.w	8003802 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	f040 80d4 	bne.w	800379c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f4:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	429a      	cmp	r2, r3
 8003606:	d130      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	3b01      	subs	r3, #1
 8003614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d127      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11f      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003634:	2a07      	cmp	r2, #7
 8003636:	bf14      	ite	ne
 8003638:	2201      	movne	r2, #1
 800363a:	2200      	moveq	r2, #0
 800363c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	4293      	cmp	r3, r2
 8003640:	d113      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d109      	bne.n	800366a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d06e      	beq.n	8003748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d069      	beq.n	8003744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003670:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800367c:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0bb      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003698:	f7fe ffce 	bl	8002638 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe ffca 	bl	8002638 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0a8      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036be:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x758>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d8:	0212      	lsls	r2, r2, #8
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0552      	lsls	r2, r2, #21
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036ec:	0852      	lsrs	r2, r2, #1
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0652      	lsls	r2, r2, #25
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f8:	0912      	lsrs	r2, r2, #4
 80036fa:	0452      	lsls	r2, r2, #17
 80036fc:	430a      	orrs	r2, r1
 80036fe:	4925      	ldr	r1, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003700:	4313      	orrs	r3, r2
 8003702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800371c:	f7fe ff8c 	bl	8002638 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe ff88 	bl	8002638 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e066      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003742:	e05e      	b.n	8003802 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e05d      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d156      	bne.n	8003802 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800376c:	f7fe ff64 	bl	8002638 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe ff60 	bl	8002638 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e03e      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_OscConfig+0x754>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x734>
 8003792:	e036      	b.n	8003802 <HAL_RCC_OscConfig+0x7c2>
 8003794:	40021000 	.word	0x40021000
 8003798:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d02d      	beq.n	80037fe <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe ff2f 	bl	8002638 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe ff2b 	bl	8002638 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e009      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x7cc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x79e>
 80037fc:	e001      	b.n	8003802 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0c8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b66      	ldr	r3, [pc, #408]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d910      	bls.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	4961      	ldr	r1, [pc, #388]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b0      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d04c      	beq.n	80038fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d107      	bne.n	8003878 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003868:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d121      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e09e      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d107      	bne.n	8003890 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d115      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e092      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003898:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e086      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e07e      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	493f      	ldr	r1, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fe feb5 	bl	8002638 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d2:	f7fe feb1 	bl	8002638 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e066      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e8:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 020c 	and.w	r2, r3, #12
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d1eb      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	492c      	ldr	r1, [pc, #176]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d210      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4924      	ldr	r1, [pc, #144]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e036      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4918      	ldr	r1, [pc, #96]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4910      	ldr	r1, [pc, #64]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003986:	f000 f825 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_RCC_ClockConfig+0x1b4>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490c      	ldr	r1, [pc, #48]	; (80039c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fdf4 	bl	8002598 <HAL_InitTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80039b4:	7afb      	ldrb	r3, [r7, #11]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08009f28 	.word	0x08009f28
 80039cc:	20000018 	.word	0x20000018
 80039d0:	2000001c 	.word	0x2000001c

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e2:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ec:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d121      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d11e      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a14:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	e005      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a30:	4a2b      	ldr	r2, [pc, #172]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e004      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d134      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d003      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0xac>
 8003a78:	e005      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a7c:	617b      	str	r3, [r7, #20]
      break;
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a82:	617b      	str	r3, [r7, #20]
      break;
 8003a84:	e002      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	617b      	str	r3, [r7, #20]
      break;
 8003a8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	3301      	adds	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	fb03 f202 	mul.w	r2, r3, r2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	0e5b      	lsrs	r3, r3, #25
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	3301      	adds	r3, #1
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003acc:	69bb      	ldr	r3, [r7, #24]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08009f40 	.word	0x08009f40
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000018 	.word	0x20000018

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4904      	ldr	r1, [pc, #16]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08009f38 	.word	0x08009f38

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b34:	f7ff ffda 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0adb      	lsrs	r3, r3, #11
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4904      	ldr	r1, [pc, #16]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08009f38 	.word	0x08009f38

08003b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b74:	f7ff fa00 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003b78:	6178      	str	r0, [r7, #20]
 8003b7a:	e014      	b.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b94:	f7ff f9f0 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d10b      	bne.n	8003bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d919      	bls.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bb8:	d902      	bls.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bba:	2302      	movs	r3, #2
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e013      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	e010      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d902      	bls.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bcc:	2303      	movs	r3, #3
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e00a      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d102      	bne.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd8:	2302      	movs	r3, #2
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e004      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d101      	bne.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be4:	2301      	movs	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	4909      	ldr	r1, [pc, #36]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c24:	2300      	movs	r3, #0
 8003c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c28:	2300      	movs	r3, #0
 8003c2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d041      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c40:	d02a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c46:	d824      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c52:	d81e      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c5e:	e018      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c60:	4b86      	ldr	r3, [pc, #536]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a85      	ldr	r2, [pc, #532]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c6c:	e015      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fabb 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c7e:	e00c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3320      	adds	r3, #32
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fba6 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	74fb      	strb	r3, [r7, #19]
      break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca0:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cae:	4973      	ldr	r1, [pc, #460]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cb6:	e001      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d041      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cd0:	d02a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cd6:	d824      	bhi.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce2:	d81e      	bhi.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cec:	d010      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cee:	e018      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cf0:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a61      	ldr	r2, [pc, #388]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cfc:	e015      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fa73 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d0e:	e00c      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3320      	adds	r3, #32
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fb5e 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	74fb      	strb	r3, [r7, #19]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d30:	4b52      	ldr	r3, [pc, #328]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3e:	494f      	ldr	r1, [pc, #316]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d46:	e001      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a0 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d80:	4b3e      	ldr	r3, [pc, #248]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d9c:	f7fe fc4c 	bl	8002638 <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003da2:	e009      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da4:	f7fe fc48 	bl	8002638 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d902      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	74fb      	strb	r3, [r7, #19]
        break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ef      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d15c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dca:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01f      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d019      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fe fc07 	bl	8002638 <HAL_GetTick>
 8003e2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fe fc03 	bl	8002638 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d902      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	74fb      	strb	r3, [r7, #19]
            break;
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ec      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e88:	7c7b      	ldrb	r3, [r7, #17]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	4a9d      	ldr	r2, [pc, #628]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea6:	4b98      	ldr	r3, [pc, #608]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f023 0203 	bic.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	4994      	ldr	r1, [pc, #592]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec8:	4b8f      	ldr	r3, [pc, #572]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 020c 	bic.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	498c      	ldr	r1, [pc, #560]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eea:	4b87      	ldr	r3, [pc, #540]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4983      	ldr	r1, [pc, #524]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	497b      	ldr	r1, [pc, #492]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3c:	4972      	ldr	r1, [pc, #456]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f50:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	496a      	ldr	r1, [pc, #424]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	4961      	ldr	r1, [pc, #388]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f94:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	4959      	ldr	r1, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	4950      	ldr	r1, [pc, #320]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd8:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	4948      	ldr	r1, [pc, #288]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	493f      	ldr	r1, [pc, #252]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d028      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402a:	4937      	ldr	r1, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403a:	d106      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403c:	4b32      	ldr	r3, [pc, #200]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004046:	60d3      	str	r3, [r2, #12]
 8004048:	e011      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004052:	d10c      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f8c8 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	491f      	ldr	r1, [pc, #124]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004098:	d106      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a4:	60d3      	str	r3, [r2, #12]
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f899 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	4908      	ldr	r1, [pc, #32]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e014      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3304      	adds	r3, #4
 800411a:	2101      	movs	r1, #1
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f867 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800413c:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	4928      	ldr	r1, [pc, #160]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415a:	d10d      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f844 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d014      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	74bb      	strb	r3, [r7, #18]
 8004176:	e011      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3320      	adds	r3, #32
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f925 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b6:	490d      	ldr	r1, [pc, #52]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000

080041f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041fe:	4b75      	ldr	r3, [pc, #468]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800420a:	4b72      	ldr	r3, [pc, #456]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0203 	and.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d10d      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
       ||
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004222:	4b6c      	ldr	r3, [pc, #432]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
       ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d047      	beq.n	80042c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e044      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d018      	beq.n	8004276 <RCCEx_PLLSAI1_Config+0x86>
 8004244:	2b03      	cmp	r3, #3
 8004246:	d825      	bhi.n	8004294 <RCCEx_PLLSAI1_Config+0xa4>
 8004248:	2b01      	cmp	r3, #1
 800424a:	d002      	beq.n	8004252 <RCCEx_PLLSAI1_Config+0x62>
 800424c:	2b02      	cmp	r3, #2
 800424e:	d009      	beq.n	8004264 <RCCEx_PLLSAI1_Config+0x74>
 8004250:	e020      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004252:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11d      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004262:	e01a      	b.n	800429a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004264:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d116      	bne.n	800429e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e013      	b.n	800429e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004276:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004282:	4b54      	ldr	r3, [pc, #336]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004292:	e006      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e004      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10d      	bne.n	80042c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042aa:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	430b      	orrs	r3, r1
 80042c0:	4944      	ldr	r1, [pc, #272]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d17d      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fe f9ae 	bl	8002638 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042de:	e009      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e0:	f7fe f9aa 	bl	8002638 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d902      	bls.n	80042f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	73fb      	strb	r3, [r7, #15]
        break;
 80042f2:	e005      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f4:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ef      	bne.n	80042e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d160      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d111      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430c:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6892      	ldr	r2, [r2, #8]
 800431c:	0211      	lsls	r1, r2, #8
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	0912      	lsrs	r2, r2, #4
 8004324:	0452      	lsls	r2, r2, #17
 8004326:	430a      	orrs	r2, r1
 8004328:	492a      	ldr	r1, [pc, #168]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
 800432e:	e027      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d112      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800433e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6892      	ldr	r2, [r2, #8]
 8004346:	0211      	lsls	r1, r2, #8
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6912      	ldr	r2, [r2, #16]
 800434c:	0852      	lsrs	r2, r2, #1
 800434e:	3a01      	subs	r2, #1
 8004350:	0552      	lsls	r2, r2, #21
 8004352:	430a      	orrs	r2, r1
 8004354:	491f      	ldr	r1, [pc, #124]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
 800435a:	e011      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	0211      	lsls	r1, r2, #8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6952      	ldr	r2, [r2, #20]
 8004372:	0852      	lsrs	r2, r2, #1
 8004374:	3a01      	subs	r2, #1
 8004376:	0652      	lsls	r2, r2, #25
 8004378:	430a      	orrs	r2, r1
 800437a:	4916      	ldr	r1, [pc, #88]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800438a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe f954 	bl	8002638 <HAL_GetTick>
 8004390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004392:	e009      	b.n	80043a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004394:	f7fe f950 	bl	8002638 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d902      	bls.n	80043a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	73fb      	strb	r3, [r7, #15]
          break;
 80043a6:	e005      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ef      	beq.n	8004394 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	4904      	ldr	r1, [pc, #16]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000

080043d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d018      	beq.n	8004424 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043f2:	4b67      	ldr	r3, [pc, #412]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d10d      	bne.n	800441e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
       ||
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800440a:	4b61      	ldr	r3, [pc, #388]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
       ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d047      	beq.n	80044ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e044      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d018      	beq.n	800445e <RCCEx_PLLSAI2_Config+0x86>
 800442c:	2b03      	cmp	r3, #3
 800442e:	d825      	bhi.n	800447c <RCCEx_PLLSAI2_Config+0xa4>
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <RCCEx_PLLSAI2_Config+0x62>
 8004434:	2b02      	cmp	r3, #2
 8004436:	d009      	beq.n	800444c <RCCEx_PLLSAI2_Config+0x74>
 8004438:	e020      	b.n	800447c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443a:	4b55      	ldr	r3, [pc, #340]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11d      	bne.n	8004482 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444a:	e01a      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445c:	e013      	b.n	8004486 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800445e:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446a:	4b49      	ldr	r3, [pc, #292]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447a:	e006      	b.n	800448a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      break;
 8004480:	e004      	b.n	800448c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800448a:	bf00      	nop
    }

    if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10d      	bne.n	80044ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004492:	4b3f      	ldr	r3, [pc, #252]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	430b      	orrs	r3, r1
 80044a8:	4939      	ldr	r1, [pc, #228]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d167      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fe f8ba 	bl	8002638 <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c6:	e009      	b.n	80044dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044c8:	f7fe f8b6 	bl	8002638 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	73fb      	strb	r3, [r7, #15]
        break;
 80044da:	e005      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044dc:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ef      	bne.n	80044c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d14a      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d111      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044f4:	4b26      	ldr	r3, [pc, #152]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6892      	ldr	r2, [r2, #8]
 8004504:	0211      	lsls	r1, r2, #8
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68d2      	ldr	r2, [r2, #12]
 800450a:	0912      	lsrs	r2, r2, #4
 800450c:	0452      	lsls	r2, r2, #17
 800450e:	430a      	orrs	r2, r1
 8004510:	491f      	ldr	r1, [pc, #124]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	614b      	str	r3, [r1, #20]
 8004516:	e011      	b.n	800453c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6892      	ldr	r2, [r2, #8]
 8004528:	0211      	lsls	r1, r2, #8
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6912      	ldr	r2, [r2, #16]
 800452e:	0852      	lsrs	r2, r2, #1
 8004530:	3a01      	subs	r2, #1
 8004532:	0652      	lsls	r2, r2, #25
 8004534:	430a      	orrs	r2, r1
 8004536:	4916      	ldr	r1, [pc, #88]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fe f876 	bl	8002638 <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800454e:	e009      	b.n	8004564 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004550:	f7fe f872 	bl	8002638 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	73fb      	strb	r3, [r7, #15]
          break;
 8004562:	e005      	b.n	8004570 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ef      	beq.n	8004550 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4904      	ldr	r1, [pc, #16]	; (8004590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000

08004594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e095      	b.n	80046d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d009      	beq.n	80045cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	61da      	str	r2, [r3, #28]
 80045be:	e005      	b.n	80045cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f877 	bl	80046da <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800460c:	d902      	bls.n	8004614 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e002      	b.n	800461a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004618:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004622:	d007      	beq.n	8004634 <HAL_SPI_Init+0xa0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	ea42 0103 	orr.w	r1, r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 0204 	and.w	r2, r3, #4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08a      	sub	sp, #40	; 0x28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x26>
 8004710:	2302      	movs	r3, #2
 8004712:	e1fb      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x41e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471c:	f7fd ff8c 	bl	8002638 <HAL_GetTick>
 8004720:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004728:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004738:	7efb      	ldrb	r3, [r7, #27]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d00e      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004744:	d106      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
 800474e:	7efb      	ldrb	r3, [r7, #27]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800475a:	e1cd      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004774:	e1c0      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047cc:	d802      	bhi.n	80047d4 <HAL_SPI_TransmitReceive+0xe6>
 80047ce:	8a3b      	ldrh	r3, [r7, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d908      	bls.n	80047e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	e007      	b.n	80047f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481c:	d97c      	bls.n	8004918 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_TransmitReceive+0x13e>
 8004826:	8a7b      	ldrh	r3, [r7, #18]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d169      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004850:	e056      	b.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d11b      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	2b01      	cmp	r3, #1
 800486e:	d113      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11c      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	b292      	uxth	r2, r2
 80048be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e0:	f7fd feaa 	bl	8002638 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d807      	bhi.n	8004900 <HAL_SPI_TransmitReceive+0x212>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d003      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048fe:	e0fb      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1a3      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d19d      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 8004916:	e0df      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x23a>
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 80cb 	bne.w	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d912      	bls.n	8004958 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004956:	e0b2      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497e:	e09e      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d134      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02f      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12c      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049cc:	e012      	b.n	80049f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d148      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d042      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d923      	bls.n	8004a66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b02      	subs	r3, #2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d81f      	bhi.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	e016      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f103 020c 	add.w	r2, r3, #12
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a98:	f7fd fdce 	bl	8002638 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d803      	bhi.n	8004ab0 <HAL_SPI_TransmitReceive+0x3c2>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d102      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x3c8>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004abc:	e01c      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f af5b 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f af54 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f945 	bl	8004d6c <SPI_EndRxTxTransaction>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
 8004af4:	e000      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b22:	b2db      	uxtb	r3, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b40:	f7fd fd7a 	bl	8002638 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b50:	f7fd fd72 	bl	8002638 <HAL_GetTick>
 8004b54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	015b      	lsls	r3, r3, #5
 8004b5c:	0d1b      	lsrs	r3, r3, #20
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b66:	e054      	b.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d050      	beq.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b70:	f7fd fd62 	bl	8002638 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d902      	bls.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d13d      	bne.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9e:	d111      	bne.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba8:	d004      	beq.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb2:	d107      	bne.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d10f      	bne.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e017      	b.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d19b      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000018 	.word	0x20000018

08004c40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c52:	f7fd fcf1 	bl	8002638 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4413      	add	r3, r2
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c62:	f7fd fce9 	bl	8002638 <HAL_GetTick>
 8004c66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c70:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00da      	lsls	r2, r3, #3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	0d1b      	lsrs	r3, r3, #20
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c88:	e060      	b.n	8004d4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c90:	d107      	bne.n	8004ca2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d050      	beq.n	8004d4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004caa:	f7fd fcc5 	bl	8002638 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d902      	bls.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d13d      	bne.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd8:	d111      	bne.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	d004      	beq.n	8004cee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cec:	d107      	bne.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d06:	d10f      	bne.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e010      	b.n	8004d5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d196      	bne.n	8004c8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000018 	.word	0x20000018

08004d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff ff5b 	bl	8004c40 <SPI_WaitFifoStateUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e027      	b.n	8004df0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fec0 	bl	8004b30 <SPI_WaitFlagStateUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e014      	b.n	8004df0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ff34 	bl	8004c40 <SPI_WaitFifoStateUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e000      	b.n	8004df0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e040      	b.n	8004e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f83a 	bl	8004e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8ca 	bl	8004fd0 <UART_SetConfig>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e022      	b.n	8004e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fb76 	bl	8005540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fbfd 	bl	8005684 <UART_CheckIdleState>
 8004e8a:	4603      	mov	r3, r0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	f040 8082 	bne.w	8004fc6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_UART_Transmit+0x26>
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07a      	b.n	8004fc8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Transmit+0x38>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e073      	b.n	8004fc8 <HAL_UART_Transmit+0x120>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2221      	movs	r2, #33	; 0x21
 8004ef4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef6:	f7fd fb9f 	bl	8002638 <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d108      	bne.n	8004f28 <HAL_UART_Transmit+0x80>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e003      	b.n	8004f30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f38:	e02d      	b.n	8004f96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fbe6 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e039      	b.n	8004fc8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f66:	b292      	uxth	r2, r2
 8004f68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	e008      	b.n	8004f84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1cb      	bne.n	8004f3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2140      	movs	r1, #64	; 0x40
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fbb2 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e005      	b.n	8004fc8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e000      	b.n	8004fc8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fc6:	2302      	movs	r3, #2
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd4:	b08a      	sub	sp, #40	; 0x28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4ba4      	ldr	r3, [pc, #656]	; (8005290 <UART_SetConfig+0x2c0>)
 8005000:	4013      	ands	r3, r2
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005008:	430b      	orrs	r3, r1
 800500a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a99      	ldr	r2, [pc, #612]	; (8005294 <UART_SetConfig+0x2c4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	4313      	orrs	r3, r2
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a90      	ldr	r2, [pc, #576]	; (8005298 <UART_SetConfig+0x2c8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d126      	bne.n	80050a8 <UART_SetConfig+0xd8>
 800505a:	4b90      	ldr	r3, [pc, #576]	; (800529c <UART_SetConfig+0x2cc>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b03      	cmp	r3, #3
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0xd0>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0xa0>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005081 	.word	0x08005081
 8005074:	08005091 	.word	0x08005091
 8005078:	08005089 	.word	0x08005089
 800507c:	08005099 	.word	0x08005099
 8005080:	2301      	movs	r3, #1
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005086:	e116      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e112      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e10e      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e10a      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e106      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <UART_SetConfig+0x2d0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d138      	bne.n	8005124 <UART_SetConfig+0x154>
 80050b2:	4b7a      	ldr	r3, [pc, #488]	; (800529c <UART_SetConfig+0x2cc>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d82d      	bhi.n	800511c <UART_SetConfig+0x14c>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0xf8>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050fd 	.word	0x080050fd
 80050cc:	0800511d 	.word	0x0800511d
 80050d0:	0800511d 	.word	0x0800511d
 80050d4:	0800511d 	.word	0x0800511d
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	0800511d 	.word	0x0800511d
 80050e0:	0800511d 	.word	0x0800511d
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	08005105 	.word	0x08005105
 80050ec:	0800511d 	.word	0x0800511d
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005115 	.word	0x08005115
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e0d8      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e0d4      	b.n	80052b6 <UART_SetConfig+0x2e6>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e0d0      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e0cc      	b.n	80052b6 <UART_SetConfig+0x2e6>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e0c8      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a5e      	ldr	r2, [pc, #376]	; (80052a4 <UART_SetConfig+0x2d4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d125      	bne.n	800517a <UART_SetConfig+0x1aa>
 800512e:	4b5b      	ldr	r3, [pc, #364]	; (800529c <UART_SetConfig+0x2cc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	d016      	beq.n	800516a <UART_SetConfig+0x19a>
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d818      	bhi.n	8005172 <UART_SetConfig+0x1a2>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d00a      	beq.n	800515a <UART_SetConfig+0x18a>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d814      	bhi.n	8005172 <UART_SetConfig+0x1a2>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <UART_SetConfig+0x182>
 800514c:	2b10      	cmp	r3, #16
 800514e:	d008      	beq.n	8005162 <UART_SetConfig+0x192>
 8005150:	e00f      	b.n	8005172 <UART_SetConfig+0x1a2>
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005158:	e0ad      	b.n	80052b6 <UART_SetConfig+0x2e6>
 800515a:	2302      	movs	r3, #2
 800515c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005160:	e0a9      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005162:	2304      	movs	r3, #4
 8005164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005168:	e0a5      	b.n	80052b6 <UART_SetConfig+0x2e6>
 800516a:	2308      	movs	r3, #8
 800516c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005170:	e0a1      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005172:	2310      	movs	r3, #16
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005178:	e09d      	b.n	80052b6 <UART_SetConfig+0x2e6>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <UART_SetConfig+0x2d8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d125      	bne.n	80051d0 <UART_SetConfig+0x200>
 8005184:	4b45      	ldr	r3, [pc, #276]	; (800529c <UART_SetConfig+0x2cc>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800518e:	2bc0      	cmp	r3, #192	; 0xc0
 8005190:	d016      	beq.n	80051c0 <UART_SetConfig+0x1f0>
 8005192:	2bc0      	cmp	r3, #192	; 0xc0
 8005194:	d818      	bhi.n	80051c8 <UART_SetConfig+0x1f8>
 8005196:	2b80      	cmp	r3, #128	; 0x80
 8005198:	d00a      	beq.n	80051b0 <UART_SetConfig+0x1e0>
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d814      	bhi.n	80051c8 <UART_SetConfig+0x1f8>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <UART_SetConfig+0x1d8>
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d008      	beq.n	80051b8 <UART_SetConfig+0x1e8>
 80051a6:	e00f      	b.n	80051c8 <UART_SetConfig+0x1f8>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e082      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e07e      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	e07a      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c6:	e076      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ce:	e072      	b.n	80052b6 <UART_SetConfig+0x2e6>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <UART_SetConfig+0x2dc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d12a      	bne.n	8005230 <UART_SetConfig+0x260>
 80051da:	4b30      	ldr	r3, [pc, #192]	; (800529c <UART_SetConfig+0x2cc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e8:	d01a      	beq.n	8005220 <UART_SetConfig+0x250>
 80051ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ee:	d81b      	bhi.n	8005228 <UART_SetConfig+0x258>
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f4:	d00c      	beq.n	8005210 <UART_SetConfig+0x240>
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	d815      	bhi.n	8005228 <UART_SetConfig+0x258>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <UART_SetConfig+0x238>
 8005200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005204:	d008      	beq.n	8005218 <UART_SetConfig+0x248>
 8005206:	e00f      	b.n	8005228 <UART_SetConfig+0x258>
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e052      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e04e      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e04a      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e046      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e042      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a17      	ldr	r2, [pc, #92]	; (8005294 <UART_SetConfig+0x2c4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d13a      	bne.n	80052b0 <UART_SetConfig+0x2e0>
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <UART_SetConfig+0x2cc>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005248:	d01a      	beq.n	8005280 <UART_SetConfig+0x2b0>
 800524a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800524e:	d81b      	bhi.n	8005288 <UART_SetConfig+0x2b8>
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005254:	d00c      	beq.n	8005270 <UART_SetConfig+0x2a0>
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d815      	bhi.n	8005288 <UART_SetConfig+0x2b8>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <UART_SetConfig+0x298>
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d008      	beq.n	8005278 <UART_SetConfig+0x2a8>
 8005266:	e00f      	b.n	8005288 <UART_SetConfig+0x2b8>
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e022      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005270:	2302      	movs	r3, #2
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e01e      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e01a      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e016      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e012      	b.n	80052b6 <UART_SetConfig+0x2e6>
 8005290:	efff69f3 	.word	0xefff69f3
 8005294:	40008000 	.word	0x40008000
 8005298:	40013800 	.word	0x40013800
 800529c:	40021000 	.word	0x40021000
 80052a0:	40004400 	.word	0x40004400
 80052a4:	40004800 	.word	0x40004800
 80052a8:	40004c00 	.word	0x40004c00
 80052ac:	40005000 	.word	0x40005000
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a9f      	ldr	r2, [pc, #636]	; (8005538 <UART_SetConfig+0x568>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d17a      	bne.n	80053b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d824      	bhi.n	8005312 <UART_SetConfig+0x342>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x300>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	08005313 	.word	0x08005313
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005303 	.word	0x08005303
 80052e4:	08005313 	.word	0x08005313
 80052e8:	08005313 	.word	0x08005313
 80052ec:	08005313 	.word	0x08005313
 80052f0:	0800530b 	.word	0x0800530b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f4:	f7fe fc06 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 80052f8:	61f8      	str	r0, [r7, #28]
        break;
 80052fa:	e010      	b.n	800531e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052fc:	4b8f      	ldr	r3, [pc, #572]	; (800553c <UART_SetConfig+0x56c>)
 80052fe:	61fb      	str	r3, [r7, #28]
        break;
 8005300:	e00d      	b.n	800531e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005302:	f7fe fb67 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8005306:	61f8      	str	r0, [r7, #28]
        break;
 8005308:	e009      	b.n	800531e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530e:	61fb      	str	r3, [r7, #28]
        break;
 8005310:	e005      	b.n	800531e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800531c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80fb 	beq.w	800551c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	429a      	cmp	r2, r3
 8005334:	d305      	bcc.n	8005342 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	429a      	cmp	r2, r3
 8005340:	d903      	bls.n	800534a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005348:	e0e8      	b.n	800551c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2200      	movs	r2, #0
 800534e:	461c      	mov	r4, r3
 8005350:	4615      	mov	r5, r2
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	022b      	lsls	r3, r5, #8
 800535c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005360:	0222      	lsls	r2, r4, #8
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	6849      	ldr	r1, [r1, #4]
 8005366:	0849      	lsrs	r1, r1, #1
 8005368:	2000      	movs	r0, #0
 800536a:	4688      	mov	r8, r1
 800536c:	4681      	mov	r9, r0
 800536e:	eb12 0a08 	adds.w	sl, r2, r8
 8005372:	eb43 0b09 	adc.w	fp, r3, r9
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005384:	4650      	mov	r0, sl
 8005386:	4659      	mov	r1, fp
 8005388:	f7fa ff72 	bl	8000270 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800539a:	d308      	bcc.n	80053ae <UART_SetConfig+0x3de>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a2:	d204      	bcs.n	80053ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e0b6      	b.n	800551c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053b4:	e0b2      	b.n	800551c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053be:	d15e      	bne.n	800547e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d828      	bhi.n	800541a <UART_SetConfig+0x44a>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x400>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005405 	.word	0x08005405
 80053dc:	0800541b 	.word	0x0800541b
 80053e0:	0800540b 	.word	0x0800540b
 80053e4:	0800541b 	.word	0x0800541b
 80053e8:	0800541b 	.word	0x0800541b
 80053ec:	0800541b 	.word	0x0800541b
 80053f0:	08005413 	.word	0x08005413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7fe fb86 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 80053f8:	61f8      	str	r0, [r7, #28]
        break;
 80053fa:	e014      	b.n	8005426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe fb98 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8005400:	61f8      	str	r0, [r7, #28]
        break;
 8005402:	e010      	b.n	8005426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005404:	4b4d      	ldr	r3, [pc, #308]	; (800553c <UART_SetConfig+0x56c>)
 8005406:	61fb      	str	r3, [r7, #28]
        break;
 8005408:	e00d      	b.n	8005426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540a:	f7fe fae3 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800540e:	61f8      	str	r0, [r7, #28]
        break;
 8005410:	e009      	b.n	8005426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005416:	61fb      	str	r3, [r7, #28]
        break;
 8005418:	e005      	b.n	8005426 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d077      	beq.n	800551c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	005a      	lsls	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	441a      	add	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d916      	bls.n	8005476 <UART_SetConfig+0x4a6>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544e:	d212      	bcs.n	8005476 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f023 030f 	bic.w	r3, r3, #15
 8005458:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	b29a      	uxth	r2, r3
 8005466:	8afb      	ldrh	r3, [r7, #22]
 8005468:	4313      	orrs	r3, r2
 800546a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	8afa      	ldrh	r2, [r7, #22]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	e052      	b.n	800551c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800547c:	e04e      	b.n	800551c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005482:	2b08      	cmp	r3, #8
 8005484:	d827      	bhi.n	80054d6 <UART_SetConfig+0x506>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x4bc>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	080054d7 	.word	0x080054d7
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080054d7 	.word	0x080054d7
 80054a8:	080054d7 	.word	0x080054d7
 80054ac:	080054cf 	.word	0x080054cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe fb28 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 80054b4:	61f8      	str	r0, [r7, #28]
        break;
 80054b6:	e014      	b.n	80054e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fe fb3a 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 80054bc:	61f8      	str	r0, [r7, #28]
        break;
 80054be:	e010      	b.n	80054e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b1e      	ldr	r3, [pc, #120]	; (800553c <UART_SetConfig+0x56c>)
 80054c2:	61fb      	str	r3, [r7, #28]
        break;
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe fa85 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 80054ca:	61f8      	str	r0, [r7, #28]
        break;
 80054cc:	e009      	b.n	80054e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d2:	61fb      	str	r3, [r7, #28]
        break;
 80054d4:	e005      	b.n	80054e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054e0:	bf00      	nop
    }

    if (pclk != 0U)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d019      	beq.n	800551c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	085a      	lsrs	r2, r3, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d909      	bls.n	8005516 <UART_SetConfig+0x546>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d205      	bcs.n	8005516 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	e002      	b.n	800551c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	; 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005536:	bf00      	nop
 8005538:	40008000 	.word	0x40008000
 800553c:	00f42400 	.word	0x00f42400

08005540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01a      	beq.n	8005656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d10a      	bne.n	8005656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005694:	f7fc ffd0 	bl	8002638 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d10e      	bne.n	80056c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f82d 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e023      	b.n	800570e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d10e      	bne.n	80056f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f817 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e00d      	b.n	800570e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b09c      	sub	sp, #112	; 0x70
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005726:	e0a5      	b.n	8005874 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	f000 80a1 	beq.w	8005874 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fc ff81 	bl	8002638 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <UART_WaitOnFlagUntilTimeout+0x32>
 8005742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005744:	2b00      	cmp	r3, #0
 8005746:	d13e      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800575c:	667b      	str	r3, [r7, #100]	; 0x64
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005768:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800576c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e6      	bne.n	8005748 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	663b      	str	r3, [r7, #96]	; 0x60
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800579a:	64ba      	str	r2, [r7, #72]	; 0x48
 800579c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e067      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d04f      	beq.n	8005874 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e2:	d147      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005802:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	613b      	str	r3, [r7, #16]
   return(result);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	66bb      	str	r3, [r7, #104]	; 0x68
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005840:	623a      	str	r2, [r7, #32]
 8005842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	69f9      	ldr	r1, [r7, #28]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	61bb      	str	r3, [r7, #24]
   return(result);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e010      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	429a      	cmp	r2, r3
 8005890:	f43f af4a 	beq.w	8005728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3770      	adds	r7, #112	; 0x70
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b0cc      	sub	sp, #304	; 0x130
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	4602      	mov	r2, r0
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80058ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 80058ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058d2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80058de:	3301      	adds	r3, #1
 80058e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058e8:	2218      	movs	r2, #24
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f003 f963 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 80058f2:	233f      	movs	r3, #63	; 0x3f
 80058f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80058f8:	2385      	movs	r3, #133	; 0x85
 80058fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005906:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800590a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800590e:	f107 030b 	add.w	r3, r7, #11
 8005912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005916:	2301      	movs	r3, #1
 8005918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800591c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f002 fc9a 	bl	800825c <hci_send_req>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	da01      	bge.n	8005932 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800592e:	23ff      	movs	r3, #255	; 0xff
 8005930:	e00d      	b.n	800594e <aci_gap_set_io_capability+0xb0>
  if (status) {
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <aci_gap_set_io_capability+0xae>
    return status;
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	e000      	b.n	800594e <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8005958:	b5b0      	push	{r4, r5, r7, lr}
 800595a:	b0cc      	sub	sp, #304	; 0x130
 800595c:	af00      	add	r7, sp, #0
 800595e:	4605      	mov	r5, r0
 8005960:	460c      	mov	r4, r1
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800596e:	462a      	mov	r2, r5
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800597a:	4622      	mov	r2, r4
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005986:	4602      	mov	r2, r0
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	460a      	mov	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059c0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059c4:	3301      	adds	r3, #1
 80059c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059d2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80059da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059de:	3301      	adds	r3, #1
 80059e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ec:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059f4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80059f8:	3301      	adds	r3, #1
 80059fa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80059fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a0a:	7812      	ldrb	r2, [r2, #0]
 8005a0c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005a0e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a12:	3301      	adds	r3, #1
 8005a14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005a20:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005a22:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a26:	3301      	adds	r3, #1
 8005a28:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005a34:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005a36:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8005a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a44:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005a48:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005a4a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8005a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a58:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005a5c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005a60:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a64:	3304      	adds	r3, #4
 8005a66:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005a72:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005a74:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a82:	2218      	movs	r2, #24
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f003 f896 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005a8c:	233f      	movs	r3, #63	; 0x3f
 8005a8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005a92:	2386      	movs	r3, #134	; 0x86
 8005a94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005a98:	f107 030c 	add.w	r3, r7, #12
 8005a9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005aa0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005aa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005aa8:	f107 030b 	add.w	r3, r7, #11
 8005aac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f002 fbcd 	bl	800825c <hci_send_req>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	da01      	bge.n	8005acc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005ac8:	23ff      	movs	r3, #255	; 0xff
 8005aca:	e00d      	b.n	8005ae8 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8005ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ade:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	e000      	b.n	8005ae8 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bdb0      	pop	{r4, r5, r7, pc}

08005af2 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005af2:	b590      	push	{r4, r7, lr}
 8005af4:	b0cf      	sub	sp, #316	; 0x13c
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b02:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b0c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005b10:	4622      	mov	r2, r4
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b18:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b24:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005b28:	460a      	mov	r2, r1
 8005b2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005b2c:	f107 0314 	add.w	r3, r7, #20
 8005b30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	2207      	movs	r2, #7
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f003 f83b 	bl	8008bb8 <memset>
  uint8_t index_input = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8005b48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b4c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b50:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b58:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b66:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b6a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b72:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b76:	3301      	adds	r3, #1
 8005b78:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005b7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b80:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005b84:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b8c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b90:	3301      	adds	r3, #1
 8005b92:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b9a:	2218      	movs	r2, #24
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f003 f80a 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005ba4:	233f      	movs	r3, #63	; 0x3f
 8005ba6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8005baa:	238a      	movs	r3, #138	; 0x8a
 8005bac:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005bb8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005bbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005bc0:	f107 030c 	add.w	r3, r7, #12
 8005bc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005bc8:	2307      	movs	r3, #7
 8005bca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005bce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fb41 	bl	800825c <hci_send_req>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da01      	bge.n	8005be4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005be0:	23ff      	movs	r3, #255	; 0xff
 8005be2:	e02e      	b.n	8005c42 <aci_gap_init+0x150>
  if (resp.Status) {
 8005be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <aci_gap_init+0x10c>
    return resp.Status;
 8005bf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	e021      	b.n	8005c42 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005bfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005c18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c2a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005c2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c34:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}

08005c4c <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	2218      	movs	r2, #24
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 ffaa 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005c64:	233f      	movs	r3, #63	; 0x3f
 8005c66:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8005c68:	2394      	movs	r3, #148	; 0x94
 8005c6a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c6c:	1dfb      	adds	r3, r7, #7
 8005c6e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c70:	2301      	movs	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005c74:	f107 0308 	add.w	r3, r7, #8
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 faee 	bl	800825c <hci_send_req>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da01      	bge.n	8005c8a <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005c86:	23ff      	movs	r3, #255	; 0xff
 8005c88:	e005      	b.n	8005c96 <aci_gap_clear_security_db+0x4a>
  if (status) {
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <aci_gap_clear_security_db+0x48>
    return status;
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	e000      	b.n	8005c96 <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8005c9e:	b5b0      	push	{r4, r5, r7, lr}
 8005ca0:	b0cc      	sub	sp, #304	; 0x130
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005cb4:	462a      	mov	r2, r5
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005ccc:	4602      	mov	r2, r0
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005cd8:	460a      	mov	r2, r1
 8005cda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cfe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005d02:	8812      	ldrh	r2, [r2, #0]
 8005d04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d06:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d18:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d1c:	8812      	ldrh	r2, [r2, #0]
 8005d1e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005d20:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d24:	3302      	adds	r3, #2
 8005d26:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d32:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d3a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8005d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d4c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d54:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d62:	2218      	movs	r2, #24
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f002 ff26 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005d6c:	233f      	movs	r3, #63	; 0x3f
 8005d6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8005d72:	2397      	movs	r3, #151	; 0x97
 8005d74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005d78:	230f      	movs	r3, #15
 8005d7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005d7e:	f107 030c 	add.w	r3, r7, #12
 8005d82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d86:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005d8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d8e:	f107 030b 	add.w	r3, r7, #11
 8005d92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f002 fa5a 	bl	800825c <hci_send_req>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da01      	bge.n	8005db2 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8005dae:	23ff      	movs	r3, #255	; 0xff
 8005db0:	e00d      	b.n	8005dce <aci_gap_start_general_discovery_proc+0x130>
  if (status) {
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <aci_gap_start_general_discovery_proc+0x12e>
    return status;
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	e000      	b.n	8005dce <aci_gap_start_general_discovery_proc+0x130>
  }
  return BLE_STATUS_SUCCESS;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bdb0      	pop	{r4, r5, r7, pc}

08005dd8 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b0cf      	sub	sp, #316	; 0x13c
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005de8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005df2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005df6:	4622      	mov	r2, r4
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e02:	4602      	mov	r2, r0
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e0a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005e0e:	460a      	mov	r2, r1
 8005e10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8005e12:	f107 0314 	add.w	r3, r7, #20
 8005e16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8005e1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e1e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8005e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e30:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e34:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005e38:	8812      	ldrh	r2, [r2, #0]
 8005e3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e3c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e40:	3302      	adds	r3, #2
 8005e42:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8005e46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e4a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e4e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e52:	8812      	ldrh	r2, [r2, #0]
 8005e54:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005e56:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8005e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e68:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e70:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e74:	3301      	adds	r3, #1
 8005e76:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8005e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e7e:	1d58      	adds	r0, r3, #5
 8005e80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005e88:	2206      	movs	r2, #6
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	f002 ff0e 	bl	8008cac <memcpy>
  index_input += 6;
 8005e90:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e94:	3306      	adds	r3, #6
 8005e96:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e9e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005ea2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005ea4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8005eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005eb6:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005eb8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ec6:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8005eca:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8005ecc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8005ed6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eda:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8005ede:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8005ee0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8005eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eee:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8005ef2:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8005ef4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8005efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f02:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005f06:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8005f08:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8005f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f16:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005f1a:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8005f1c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f20:	3302      	adds	r3, #2
 8005f22:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f2a:	2218      	movs	r2, #24
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f002 fe42 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005f34:	233f      	movs	r3, #63	; 0x3f
 8005f36:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005f3a:	239c      	movs	r3, #156	; 0x9c
 8005f3c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8005f40:	230f      	movs	r3, #15
 8005f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005f46:	f107 0314 	add.w	r3, r7, #20
 8005f4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005f4e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005f52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005f56:	f107 0313 	add.w	r3, r7, #19
 8005f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005f64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 f976 	bl	800825c <hci_send_req>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da01      	bge.n	8005f7a <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005f76:	23ff      	movs	r3, #255	; 0xff
 8005f78:	e00d      	b.n	8005f96 <aci_gap_create_connection+0x1be>
  if (status) {
 8005f7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f7e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <aci_gap_create_connection+0x1bc>
    return status;
 8005f88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f8c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	e000      	b.n	8005f96 <aci_gap_create_connection+0x1be>
  }
  return BLE_STATUS_SUCCESS;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd90      	pop	{r4, r7, pc}

08005fa0 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b0cc      	sub	sp, #304	; 0x130
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005fb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8005fb2:	f107 030c 	add.w	r3, r7, #12
 8005fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8005fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fd4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005fdc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fea:	2218      	movs	r2, #24
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f002 fde2 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8005ff4:	233f      	movs	r3, #63	; 0x3f
 8005ff6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8005ffa:	239d      	movs	r3, #157	; 0x9d
 8005ffc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006008:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800600c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006010:	f107 030b 	add.w	r3, r7, #11
 8006014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006018:	2301      	movs	r3, #1
 800601a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800601e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f002 f919 	bl	800825c <hci_send_req>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	da01      	bge.n	8006034 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8006030:	23ff      	movs	r3, #255	; 0xff
 8006032:	e00d      	b.n	8006050 <aci_gap_terminate_gap_proc+0xb0>
  if (status) {
 8006034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006038:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <aci_gap_terminate_gap_proc+0xae>
    return status;
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	e000      	b.n	8006050 <aci_gap_terminate_gap_proc+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b088      	sub	sp, #32
 800605e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	2218      	movs	r2, #24
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f002 fda3 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8006072:	233f      	movs	r3, #63	; 0x3f
 8006074:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006076:	f240 1301 	movw	r3, #257	; 0x101
 800607a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800607c:	1dfb      	adds	r3, r7, #7
 800607e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006080:	2301      	movs	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006084:	f107 0308 	add.w	r3, r7, #8
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f002 f8e6 	bl	800825c <hci_send_req>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	da01      	bge.n	800609a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006096:	23ff      	movs	r3, #255	; 0xff
 8006098:	e005      	b.n	80060a6 <aci_gatt_init+0x4c>
  if (status) {
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <aci_gatt_init+0x4a>
    return status;
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	e000      	b.n	80060a6 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80060ae:	b590      	push	{r4, r7, lr}
 80060b0:	b0cf      	sub	sp, #316	; 0x13c
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	4604      	mov	r4, r0
 80060b6:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80060ba:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80060be:	6001      	str	r1, [r0, #0]
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060c8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060cc:	4622      	mov	r2, r4
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060d4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80060d8:	4602      	mov	r2, r0
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060e0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80060e4:	460a      	mov	r2, r1
 80060e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80060f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060f4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d00a      	beq.n	8006114 <aci_gatt_add_service+0x66>
 80060fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006102:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d101      	bne.n	8006110 <aci_gatt_add_service+0x62>
 800610c:	2311      	movs	r3, #17
 800610e:	e002      	b.n	8006116 <aci_gatt_add_service+0x68>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <aci_gatt_add_service+0x68>
 8006114:	2303      	movs	r3, #3
 8006116:	f107 020c 	add.w	r2, r7, #12
 800611a:	4413      	add	r3, r2
 800611c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	2203      	movs	r2, #3
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f002 fd45 	bl	8008bb8 <memset>
  uint8_t index_input = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006134:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006138:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800613c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006144:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006148:	3301      	adds	r3, #1
 800614a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800614e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006152:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d002      	beq.n	8006162 <aci_gatt_add_service+0xb4>
 800615c:	2b02      	cmp	r3, #2
 800615e:	d004      	beq.n	800616a <aci_gatt_add_service+0xbc>
 8006160:	e007      	b.n	8006172 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8006162:	2302      	movs	r3, #2
 8006164:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006168:	e005      	b.n	8006176 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800616a:	2310      	movs	r3, #16
 800616c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006170:	e001      	b.n	8006176 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006172:	2347      	movs	r3, #71	; 0x47
 8006174:	e06c      	b.n	8006250 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8006176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800617a:	1c58      	adds	r0, r3, #1
 800617c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006180:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006184:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	f002 fd8f 	bl	8008cac <memcpy>
    index_input += size;
 800618e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006192:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006196:	4413      	add	r3, r2
 8006198:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800619c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061a4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80061ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061b0:	3301      	adds	r3, #1
 80061b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061be:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80061c6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061ca:	3301      	adds	r3, #1
 80061cc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d4:	2218      	movs	r2, #24
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fced 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 80061de:	233f      	movs	r3, #63	; 0x3f
 80061e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80061e4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80061e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061f4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80061f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006204:	2303      	movs	r3, #3
 8006206:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800620a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f002 f823 	bl	800825c <hci_send_req>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	da01      	bge.n	8006220 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800621c:	23ff      	movs	r3, #255	; 0xff
 800621e:	e017      	b.n	8006250 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8006220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <aci_gatt_add_service+0x18c>
    return resp.Status;
 800622e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	e00a      	b.n	8006250 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800623a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800624c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}

0800625a <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800625a:	b590      	push	{r4, r7, lr}
 800625c:	b0d1      	sub	sp, #324	; 0x144
 800625e:	af00      	add	r7, sp, #0
 8006260:	4604      	mov	r4, r0
 8006262:	4608      	mov	r0, r1
 8006264:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006268:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800626c:	600a      	str	r2, [r1, #0]
 800626e:	4619      	mov	r1, r3
 8006270:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006274:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006278:	4622      	mov	r2, r4
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006280:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006284:	4602      	mov	r2, r0
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800628c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006290:	460a      	mov	r2, r1
 8006292:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800629c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062a0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d00a      	beq.n	80062c0 <aci_gatt_add_char+0x66>
 80062aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062ae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d101      	bne.n	80062bc <aci_gatt_add_char+0x62>
 80062b8:	2313      	movs	r3, #19
 80062ba:	e002      	b.n	80062c2 <aci_gatt_add_char+0x68>
 80062bc:	2303      	movs	r3, #3
 80062be:	e000      	b.n	80062c2 <aci_gatt_add_char+0x68>
 80062c0:	2305      	movs	r3, #5
 80062c2:	f107 0214 	add.w	r2, r7, #20
 80062c6:	4413      	add	r3, r2
 80062c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	2203      	movs	r2, #3
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f002 fc6f 	bl	8008bb8 <memset>
  uint8_t index_input = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80062e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80062e8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80062ec:	8812      	ldrh	r2, [r2, #0]
 80062ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062f0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80062f4:	3302      	adds	r3, #2
 80062f6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80062fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062fe:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006302:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800630a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800630e:	3301      	adds	r3, #1
 8006310:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8006314:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006318:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <aci_gatt_add_char+0xce>
 8006322:	2b02      	cmp	r3, #2
 8006324:	d004      	beq.n	8006330 <aci_gatt_add_char+0xd6>
 8006326:	e007      	b.n	8006338 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8006328:	2302      	movs	r3, #2
 800632a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800632e:	e005      	b.n	800633c <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006330:	2310      	movs	r3, #16
 8006332:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006336:	e001      	b.n	800633c <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006338:	2347      	movs	r3, #71	; 0x47
 800633a:	e091      	b.n	8006460 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800633c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006340:	1cd8      	adds	r0, r3, #3
 8006342:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006346:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800634a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	f002 fcac 	bl	8008cac <memcpy>
    index_input += size;
 8006354:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006358:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800635c:	4413      	add	r3, r2
 800635e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006366:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800636a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006372:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006376:	3302      	adds	r3, #2
 8006378:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800637c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006380:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006384:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006386:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800638a:	3301      	adds	r3, #1
 800638c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8006390:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006394:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006398:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800639a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800639e:	3301      	adds	r3, #1
 80063a0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80063a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063a8:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80063ac:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80063ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063b2:	3301      	adds	r3, #1
 80063b4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80063b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063bc:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80063c0:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80063c2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063c6:	3301      	adds	r3, #1
 80063c8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80063cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d0:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80063d4:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80063d6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80063da:	3301      	adds	r3, #1
 80063dc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063e4:	2218      	movs	r2, #24
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f002 fbe5 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 80063ee:	233f      	movs	r3, #63	; 0x3f
 80063f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80063f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063f8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80063fc:	f107 0314 	add.w	r3, r7, #20
 8006400:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006404:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006414:	2303      	movs	r3, #3
 8006416:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800641a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f001 ff1b 	bl	800825c <hci_send_req>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	da01      	bge.n	8006430 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800642c:	23ff      	movs	r3, #255	; 0xff
 800642e:	e017      	b.n	8006460 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8006430:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800643e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	e00a      	b.n	8006460 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800644a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800644e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006452:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800645c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}

0800646a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800646a:	b5b0      	push	{r4, r5, r7, lr}
 800646c:	b0cc      	sub	sp, #304	; 0x130
 800646e:	af00      	add	r7, sp, #0
 8006470:	4605      	mov	r5, r0
 8006472:	460c      	mov	r4, r1
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006480:	462a      	mov	r2, r5
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648c:	4622      	mov	r2, r4
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006498:	4602      	mov	r2, r0
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80064a4:	460a      	mov	r2, r1
 80064a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064d6:	3302      	adds	r3, #2
 80064d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064e8:	8812      	ldrh	r2, [r2, #0]
 80064ea:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064ec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80064f0:	3302      	adds	r3, #2
 80064f2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064fe:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006506:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800650a:	3301      	adds	r3, #1
 800650c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006518:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006520:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006524:	3301      	adds	r3, #1
 8006526:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800652a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652e:	1d98      	adds	r0, r3, #6
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006540:	f002 fbb4 	bl	8008cac <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800654c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	4413      	add	r3, r2
 8006554:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800655c:	2218      	movs	r2, #24
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f002 fb29 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 8006566:	233f      	movs	r3, #63	; 0x3f
 8006568:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800656c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006570:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800657c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006580:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006584:	f107 030b 	add.w	r3, r7, #11
 8006588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800658c:	2301      	movs	r3, #1
 800658e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fe5f 	bl	800825c <hci_send_req>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da01      	bge.n	80065a8 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80065a4:	23ff      	movs	r3, #255	; 0xff
 80065a6:	e00d      	b.n	80065c4 <aci_gatt_update_char_value+0x15a>
  if (status) {
 80065a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ac:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <aci_gatt_update_char_value+0x158>
    return status;
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	e000      	b.n	80065c4 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bdb0      	pop	{r4, r5, r7, pc}

080065ce <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 80065ce:	b5b0      	push	{r4, r5, r7, lr}
 80065d0:	b0ce      	sub	sp, #312	; 0x138
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	4605      	mov	r5, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065e0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065e4:	462a      	mov	r2, r5
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065f0:	4622      	mov	r2, r4
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065f8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80065fc:	4602      	mov	r2, r0
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006604:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006608:	460a      	mov	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  tBleStatus status = 0;
 8006614:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006618:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006626:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800662a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800662e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006632:	8812      	ldrh	r2, [r2, #0]
 8006634:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006636:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800663a:	3302      	adds	r3, #2
 800663c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->Start_Handle = htob(Start_Handle, 2);
 8006640:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006644:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006648:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006650:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006654:	3302      	adds	r3, #2
 8006656:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->End_Handle = htob(End_Handle, 2);
 800665a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800665e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006662:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006666:	8812      	ldrh	r2, [r2, #0]
 8006668:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800666a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800666e:	3302      	adds	r3, #2
 8006670:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  cp0->UUID_Type = htob(UUID_Type, 1);
 8006674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006678:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800667c:	f2a2 1237 	subw	r2, r2, #311	; 0x137
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006684:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006688:	3301      	adds	r3, #1
 800668a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 800668e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006692:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d002      	beq.n	80066a2 <aci_gatt_disc_char_by_uuid+0xd4>
 800669c:	2b02      	cmp	r3, #2
 800669e:	d004      	beq.n	80066aa <aci_gatt_disc_char_by_uuid+0xdc>
 80066a0:	e007      	b.n	80066b2 <aci_gatt_disc_char_by_uuid+0xe4>
      case 1: size = 2; break;
 80066a2:	2302      	movs	r3, #2
 80066a4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066a8:	e005      	b.n	80066b6 <aci_gatt_disc_char_by_uuid+0xe8>
      case 2: size = 16; break;
 80066aa:	2310      	movs	r3, #16
 80066ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066b0:	e001      	b.n	80066b6 <aci_gatt_disc_char_by_uuid+0xe8>
      default: return BLE_STATUS_ERROR;
 80066b2:	2347      	movs	r3, #71	; 0x47
 80066b4:	e049      	b.n	800674a <aci_gatt_disc_char_by_uuid+0x17c>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 80066b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066ba:	3307      	adds	r3, #7
 80066bc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80066c0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80066c4:	4618      	mov	r0, r3
 80066c6:	f002 faf1 	bl	8008cac <memcpy>
    index_input += size;
 80066ca:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80066ce:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80066d2:	4413      	add	r3, r2
 80066d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066d8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80066dc:	2218      	movs	r2, #24
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f002 fa69 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 80066e6:	233f      	movs	r3, #63	; 0x3f
 80066e8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = 0x116;
 80066ec:	f44f 738b 	mov.w	r3, #278	; 0x116
 80066f0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.event = 0x0F;
 80066f4:	230f      	movs	r3, #15
 80066f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.cparam = cmd_buffer;
 80066fa:	f107 0310 	add.w	r3, r7, #16
 80066fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = index_input;
 8006702:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006706:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &status;
 800670a:	f107 030f 	add.w	r3, r7, #15
 800670e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = 1;
 8006712:	2301      	movs	r3, #1
 8006714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  if (hci_send_req(&rq, FALSE) < 0)
 8006718:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fd9c 	bl	800825c <hci_send_req>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	da01      	bge.n	800672e <aci_gatt_disc_char_by_uuid+0x160>
    return BLE_STATUS_TIMEOUT;
 800672a:	23ff      	movs	r3, #255	; 0xff
 800672c:	e00d      	b.n	800674a <aci_gatt_disc_char_by_uuid+0x17c>
  if (status) {
 800672e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006732:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <aci_gatt_disc_char_by_uuid+0x17a>
    return status;
 800673c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006740:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	e000      	b.n	800674a <aci_gatt_disc_char_by_uuid+0x17c>
  }
  return BLE_STATUS_SUCCESS;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006750:	46bd      	mov	sp, r7
 8006752:	bdb0      	pop	{r4, r5, r7, pc}

08006754 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08e      	sub	sp, #56	; 0x38
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006762:	f107 0310 	add.w	r3, r7, #16
 8006766:	220f      	movs	r2, #15
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f002 fa24 	bl	8008bb8 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006770:	f107 0320 	add.w	r3, r7, #32
 8006774:	2218      	movs	r2, #24
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f002 fa1d 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 800677e:	233f      	movs	r3, #63	; 0x3f
 8006780:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8006782:	2301      	movs	r3, #1
 8006784:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800678c:	230f      	movs	r3, #15
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 8006790:	f107 0320 	add.w	r3, r7, #32
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fd60 	bl	800825c <hci_send_req>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	da01      	bge.n	80067a6 <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 80067a2:	23ff      	movs	r3, #255	; 0xff
 80067a4:	e02c      	b.n	8006800 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 80067a6:	7c3b      	ldrb	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 80067ac:	7c3b      	ldrb	r3, [r7, #16]
 80067ae:	e027      	b.n	8006800 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 80067b0:	7c7a      	ldrb	r2, [r7, #17]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 80067b6:	7cba      	ldrb	r2, [r7, #18]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 80067bc:	7cfa      	ldrb	r2, [r7, #19]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 80067c2:	7d3a      	ldrb	r2, [r7, #20]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 80067c8:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d0:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 80067d2:	7dfa      	ldrb	r2, [r7, #23]
 80067d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d6:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 80067d8:	7e3a      	ldrb	r2, [r7, #24]
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 80067de:	7e7a      	ldrb	r2, [r7, #25]
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 80067e4:	7eba      	ldrb	r2, [r7, #26]
 80067e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e8:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 80067ea:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f2:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 80067f4:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3738      	adds	r7, #56	; 0x38
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b0cc      	sub	sp, #304	; 0x130
 800680c:	af00      	add	r7, sp, #0
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006820:	4602      	mov	r2, r0
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800682c:	460a      	mov	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800684a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006852:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800685a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800685e:	3301      	adds	r3, #1
 8006860:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8006864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006868:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006870:	7812      	ldrb	r2, [r2, #0]
 8006872:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006874:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006878:	3301      	adds	r3, #1
 800687a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800687e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006882:	1c98      	adds	r0, r3, #2
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006896:	6819      	ldr	r1, [r3, #0]
 8006898:	f002 fa08 	bl	8008cac <memcpy>
    index_input += Length*sizeof(uint8_t);
 800689c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80068a4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4413      	add	r3, r2
 80068ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068b4:	2218      	movs	r2, #24
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f002 f97d 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 80068be:	233f      	movs	r3, #63	; 0x3f
 80068c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80068c4:	230c      	movs	r3, #12
 80068c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80068ca:	f107 030c 	add.w	r3, r7, #12
 80068ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80068d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068da:	f107 030b 	add.w	r3, r7, #11
 80068de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80068e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ec:	2100      	movs	r1, #0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 fcb4 	bl	800825c <hci_send_req>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da01      	bge.n	80068fe <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80068fa:	23ff      	movs	r3, #255	; 0xff
 80068fc:	e00d      	b.n	800691a <aci_hal_write_config_data+0x112>
  if (status) {
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <aci_hal_write_config_data+0x110>
    return status;
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	e000      	b.n	800691a <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b0cc      	sub	sp, #304	; 0x130
 8006928:	af00      	add	r7, sp, #0
 800692a:	4602      	mov	r2, r0
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800693e:	460a      	mov	r2, r1
 8006940:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006960:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006964:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800696c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006970:	3301      	adds	r3, #1
 8006972:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800697e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006986:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800698a:	3301      	adds	r3, #1
 800698c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006994:	2218      	movs	r2, #24
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f002 f90d 	bl	8008bb8 <memset>
  rq.ogf = 0x3f;
 800699e:	233f      	movs	r3, #63	; 0x3f
 80069a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80069a4:	230f      	movs	r3, #15
 80069a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069aa:	f107 030c 	add.w	r3, r7, #12
 80069ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069b2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80069b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069ba:	f107 030b 	add.w	r3, r7, #11
 80069be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80069c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fc44 	bl	800825c <hci_send_req>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da01      	bge.n	80069de <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80069da:	23ff      	movs	r3, #255	; 0xff
 80069dc:	e00d      	b.n	80069fa <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <aci_hal_set_tx_power_level+0xd4>
    return status;
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	e000      	b.n	80069fa <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	7818      	ldrb	r0, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a1e:	b299      	uxth	r1, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	461a      	mov	r2, r3
 8006a26:	f7fa fb89 	bl	800113c <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	7818      	ldrb	r0, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a4e:	b299      	uxth	r1, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f7fa fd11 	bl	800147c <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	7818      	ldrb	r0, [r3, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a7e:	b299      	uxth	r1, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	78da      	ldrb	r2, [r3, #3]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	889b      	ldrh	r3, [r3, #4]
 8006a88:	b29c      	uxth	r4, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4623      	mov	r3, r4
 8006a94:	f000 ffab 	bl	80079ee <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd90      	pop	{r4, r7, pc}

08006aa2 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 ffad 	bl	8007a16 <hci_hardware_error_event>

  return status;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b0a6      	sub	sp, #152	; 0x98
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ae6:	e02e      	b.n	8006b46 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006ae8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	3398      	adds	r3, #152	; 0x98
 8006b02:	443b      	add	r3, r7
 8006b04:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006b08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006b12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	3398      	adds	r3, #152	; 0x98
 8006b2c:	443b      	add	r3, r7
 8006b2e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8006b32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006b36:	3302      	adds	r3, #2
 8006b38:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b40:	3301      	adds	r3, #1
 8006b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b52:	4293      	cmp	r3, r2
 8006b54:	dbc8      	blt.n	8006ae8 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 ff62 	bl	8007a2c <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006b68:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3798      	adds	r7, #152	; 0x98
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 ff5b 	bl	8007a44 <hci_data_buffer_overflow_event>

  return status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f000 ff4f 	bl	8007a5a <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f95d 	bl	8007e9a <aci_blue_initialized_event>

  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f957 	bl	8007eb0 <aci_blue_events_lost_event>

  return status;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c10:	b08d      	sub	sp, #52	; 0x34
 8006c12:	af08      	add	r7, sp, #32
 8006c14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f893 c000 	ldrb.w	ip, [r3]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8006c50:	68bc      	ldr	r4, [r7, #8]
 8006c52:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8006c56:	68bd      	ldr	r5, [r7, #8]
 8006c58:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8006c5c:	68be      	ldr	r6, [r7, #8]
 8006c5e:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	9606      	str	r6, [sp, #24]
 8006c6a:	9505      	str	r5, [sp, #20]
 8006c6c:	9404      	str	r4, [sp, #16]
 8006c6e:	9003      	str	r0, [sp, #12]
 8006c70:	9102      	str	r1, [sp, #8]
 8006c72:	9201      	str	r2, [sp, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	4671      	mov	r1, lr
 8006c7e:	4660      	mov	r0, ip
 8006c80:	f001 f920 	bl	8007ec4 <aci_blue_crash_info_event>

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006c90 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7818      	ldrb	r0, [r3, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	7859      	ldrb	r1, [r3, #1]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f001 f916 	bl	8007ee0 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f993 0000 	ldrsb.w	r0, [r3]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f001 f90d 	bl	8007efc <aci_hal_scan_req_report_event>

  return status;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	7818      	ldrb	r0, [r3, #0]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f001 f905 	bl	8007f18 <aci_hal_fw_error_event>

  return status;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8006d24:	f000 ff23 	bl	8007b6e <aci_gap_limited_discoverable_event>

  return status;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b298      	uxth	r0, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	7899      	ldrb	r1, [r3, #2]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	461a      	mov	r2, r3
 8006d52:	f7fa fb6d 	bl	8001430 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 ff00 	bl	8007b7c <aci_gap_pass_key_req_event>

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fef8 	bl	8007b92 <aci_gap_authorization_req_event>

  return status;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8006db8:	f000 fef6 	bl	8007ba8 <aci_gap_slave_security_initiated_event>

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8006dd2:	f000 fef0 	bl	8007bb6 <aci_gap_bond_lost_event>

  return status;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	7818      	ldrb	r0, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	7859      	ldrb	r1, [r3, #1]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8006e00:	f7fa fa06 	bl	8001210 <aci_gap_proc_complete_event>

  return status;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fecd 	bl	8007bc4 <aci_gap_addr_not_resolved_event>

  return status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f000 fec1 	bl	8007bda <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	789b      	ldrb	r3, [r3, #2]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f000 feb7 	bl	8007bf2 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f000 ffb0 	bl	8007e12 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b298      	uxth	r0, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 ffa7 	bl	8007e2e <aci_l2cap_proc_timeout_event>

  return status;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eec:	b089      	sub	sp, #36	; 0x24
 8006eee:	af04      	add	r7, sp, #16
 8006ef0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b298      	uxth	r0, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	789c      	ldrb	r4, [r3, #2]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f0a:	b29d      	uxth	r5, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006f12:	b29e      	uxth	r6, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006f22:	b292      	uxth	r2, r2
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8006f2a:	b289      	uxth	r1, r1
 8006f2c:	9102      	str	r1, [sp, #8]
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4633      	mov	r3, r6
 8006f34:	462a      	mov	r2, r5
 8006f36:	4621      	mov	r1, r4
 8006f38:	f000 ff87 	bl	8007e4a <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f46 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006f46:	b590      	push	{r4, r7, lr}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b298      	uxth	r0, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	7899      	ldrb	r1, [r3, #2]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4623      	mov	r3, r4
 8006f74:	f000 ff7d 	bl	8007e72 <aci_l2cap_command_reject_event>

  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd90      	pop	{r4, r7, pc}

08006f82 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006f82:	b590      	push	{r4, r7, lr}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af02      	add	r7, sp, #8
 8006f88:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b298      	uxth	r0, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	885b      	ldrh	r3, [r3, #2]
 8006f9c:	b299      	uxth	r1, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	88db      	ldrh	r3, [r3, #6]
 8006fa8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	f7fa f957 	bl	8001264 <aci_gatt_attribute_modified_event>

  return status;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}

08006fc0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fe19 	bl	8007c0e <aci_gatt_proc_timeout_event>

  return status;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	b29b      	uxth	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fa f9db 	bl	80013c0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b298      	uxth	r0, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	7899      	ldrb	r1, [r3, #2]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007036:	f000 fdf5 	bl	8007c24 <aci_att_find_info_resp_event>

  return status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0a6      	sub	sp, #152	; 0x98
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8007058:	2303      	movs	r3, #3
 800705a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800705e:	2300      	movs	r3, #0
 8007060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007064:	e02e      	b.n	80070c4 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8007066:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800706a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007076:	b29a      	uxth	r2, r3
 8007078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	3398      	adds	r3, #152	; 0x98
 8007080:	443b      	add	r3, r7
 8007082:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007086:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800708a:	3302      	adds	r3, #2
 800708c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8007090:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3398      	adds	r3, #152	; 0x98
 80070aa:	443b      	add	r3, r7
 80070ac:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80070b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80070b4:	3302      	adds	r3, #2
 80070b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80070ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070be:	3301      	adds	r3, #1
 80070c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070c8:	789b      	ldrb	r3, [r3, #2]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070d0:	4293      	cmp	r3, r2
 80070d2:	dbc8      	blt.n	8007066 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80070d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b298      	uxth	r0, r3
 80070dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070e0:	789b      	ldrb	r3, [r3, #2]
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	4619      	mov	r1, r3
 80070e8:	f000 fdac 	bl	8007c44 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 80070ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3798      	adds	r7, #152	; 0x98
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b298      	uxth	r0, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	7899      	ldrb	r1, [r3, #2]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800711a:	f000 fda1 	bl	8007c60 <aci_att_read_by_type_resp_event>

  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b298      	uxth	r0, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007146:	461a      	mov	r2, r3
 8007148:	f000 fd9a 	bl	8007c80 <aci_att_read_resp_event>

  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b298      	uxth	r0, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007174:	461a      	mov	r2, r3
 8007176:	f000 fd91 	bl	8007c9c <aci_att_read_blob_resp_event>

  return status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b298      	uxth	r0, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80071a2:	461a      	mov	r2, r3
 80071a4:	f000 fd88 	bl	8007cb8 <aci_att_read_multiple_resp_event>

  return status;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b298      	uxth	r0, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	7899      	ldrb	r1, [r3, #2]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80071d4:	f000 fd7e 	bl	8007cd4 <aci_att_read_by_group_type_resp_event>

  return status;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80071e2:	b590      	push	{r4, r7, lr}
 80071e4:	b087      	sub	sp, #28
 80071e6:	af02      	add	r7, sp, #8
 80071e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b298      	uxth	r0, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	885b      	ldrh	r3, [r3, #2]
 80071fc:	b299      	uxth	r1, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	889b      	ldrh	r3, [r3, #4]
 8007202:	b29a      	uxth	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4623      	mov	r3, r4
 8007210:	f000 fd70 	bl	8007cf4 <aci_att_prepare_write_resp_event>

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bd90      	pop	{r4, r7, pc}

0800721e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fd71 	bl	8007d1c <aci_att_exec_write_resp_event>

  return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b298      	uxth	r0, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	885b      	ldrh	r3, [r3, #2]
 800725e:	b299      	uxth	r1, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007268:	f000 fd63 	bl	8007d32 <aci_gatt_indication_event>

  return status;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b298      	uxth	r0, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	885b      	ldrh	r3, [r3, #2]
 8007290:	b299      	uxth	r1, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800729a:	f7f9 fffd 	bl	8001298 <aci_gatt_notification_event>

  return status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	789b      	ldrb	r3, [r3, #2]
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7fa f839 	bl	800133c <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b298      	uxth	r0, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	7899      	ldrb	r1, [r3, #2]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	f000 fd2a 	bl	8007d52 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b298      	uxth	r0, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	b299      	uxth	r1, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800732c:	f7f9 ffc4 	bl	80012b8 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b298      	uxth	r0, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	885b      	ldrh	r3, [r3, #2]
 8007354:	b299      	uxth	r1, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800735e:	f000 fd0c 	bl	8007d7a <aci_gatt_write_permit_req_event>

  return status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b298      	uxth	r0, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	b299      	uxth	r1, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	889b      	ldrh	r3, [r3, #4]
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fd03 	bl	8007d9a <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b0a6      	sub	sp, #152	; 0x98
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073a6:	2300      	movs	r3, #0
 80073a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80073b2:	2303      	movs	r3, #3
 80073b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073be:	e019      	b.n	80073f4 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80073c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80073c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	3398      	adds	r3, #152	; 0x98
 80073da:	443b      	add	r3, r7
 80073dc:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80073e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073e4:	3302      	adds	r3, #2
 80073e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80073ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ee:	3301      	adds	r3, #1
 80073f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073f8:	789b      	ldrb	r3, [r3, #2]
 80073fa:	461a      	mov	r2, r3
 80073fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007400:	4293      	cmp	r3, r2
 8007402:	dbdd      	blt.n	80073c0 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b298      	uxth	r0, r3
 800740c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	f107 0208 	add.w	r2, r7, #8
 8007416:	4619      	mov	r1, r3
 8007418:	f000 fcce 	bl	8007db8 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800741c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007420:	4618      	mov	r0, r3
 8007422:	3798      	adds	r7, #152	; 0x98
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29a      	uxth	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	b29b      	uxth	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7f9 ffa6 	bl	8001398 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fcb1 	bl	8007dd4 <aci_gatt_server_confirmation_event>

  return status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b087      	sub	sp, #28
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b298      	uxth	r0, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	b299      	uxth	r1, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	889b      	ldrh	r3, [r3, #4]
 800749c:	b29a      	uxth	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4623      	mov	r3, r4
 80074aa:	f000 fc9e 	bl	8007dea <aci_gatt_prepare_write_permit_req_event>

  return status;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd90      	pop	{r4, r7, pc}

080074b8 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 80074b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ba:	b08b      	sub	sp, #44	; 0x2c
 80074bc:	af06      	add	r7, sp, #24
 80074be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781d      	ldrb	r5, [r3, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074d2:	b29e      	uxth	r6, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80074ea:	b292      	uxth	r2, r2
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 80074f2:	b289      	uxth	r1, r1
 80074f4:	68b8      	ldr	r0, [r7, #8]
 80074f6:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 80074fa:	b280      	uxth	r0, r0
 80074fc:	68bc      	ldr	r4, [r7, #8]
 80074fe:	7c64      	ldrb	r4, [r4, #17]
 8007500:	9404      	str	r4, [sp, #16]
 8007502:	9003      	str	r0, [sp, #12]
 8007504:	9102      	str	r1, [sp, #8]
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4673      	mov	r3, lr
 800750c:	4662      	mov	r2, ip
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	f7f9 fdc5 	bl	80010a0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007520 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b0a4      	sub	sp, #144	; 0x90
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800753a:	2300      	movs	r3, #0
 800753c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007540:	e0b3      	b.n	80076aa <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007542:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007546:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	440b      	add	r3, r1
 8007556:	3301      	adds	r3, #1
 8007558:	7819      	ldrb	r1, [r3, #0]
 800755a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	3390      	adds	r3, #144	; 0x90
 8007568:	443b      	add	r3, r7
 800756a:	3b88      	subs	r3, #136	; 0x88
 800756c:	460a      	mov	r2, r1
 800756e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007570:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007574:	3301      	adds	r3, #1
 8007576:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800757a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800757e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	440b      	add	r3, r1
 800758e:	3302      	adds	r3, #2
 8007590:	7819      	ldrb	r1, [r3, #0]
 8007592:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	3390      	adds	r3, #144	; 0x90
 80075a0:	443b      	add	r3, r7
 80075a2:	3b87      	subs	r3, #135	; 0x87
 80075a4:	460a      	mov	r2, r1
 80075a6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80075a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075ac:	3301      	adds	r3, #1
 80075ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80075b2:	f107 0108 	add.w	r1, r7, #8
 80075b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	1c98      	adds	r0, r3, #2
 80075c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075d8:	4413      	add	r3, r2
 80075da:	3303      	adds	r3, #3
 80075dc:	2206      	movs	r2, #6
 80075de:	4619      	mov	r1, r3
 80075e0:	f001 fb64 	bl	8008cac <memcpy>
    size += 6;
 80075e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80075e8:	3306      	adds	r3, #6
 80075ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80075ee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80075f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	440b      	add	r3, r1
 8007602:	3309      	adds	r3, #9
 8007604:	7819      	ldrb	r1, [r3, #0]
 8007606:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	3390      	adds	r3, #144	; 0x90
 8007614:	443b      	add	r3, r7
 8007616:	3b80      	subs	r3, #128	; 0x80
 8007618:	460a      	mov	r2, r1
 800761a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800761c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007620:	3301      	adds	r3, #1
 8007622:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007626:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800763a:	4413      	add	r3, r2
 800763c:	1c99      	adds	r1, r3, #2
 800763e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	3390      	adds	r3, #144	; 0x90
 800764c:	443b      	add	r3, r7
 800764e:	3b7c      	subs	r3, #124	; 0x7c
 8007650:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007652:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007656:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	4413      	add	r3, r2
 8007664:	440b      	add	r3, r1
 8007666:	3309      	adds	r3, #9
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800766e:	4413      	add	r3, r2
 8007670:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007674:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	4413      	add	r3, r2
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b259      	sxtb	r1, r3
 8007680:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	3390      	adds	r3, #144	; 0x90
 800768e:	443b      	add	r3, r7
 8007690:	3b78      	subs	r3, #120	; 0x78
 8007692:	460a      	mov	r2, r1
 8007694:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007696:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800769a:	3301      	adds	r3, #1
 800769c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80076a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f6ff af43 	blt.w	8007542 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80076bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f107 0208 	add.w	r2, r7, #8
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7f9 fd51 	bl	8001170 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80076ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3790      	adds	r7, #144	; 0x90
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80076da:	b590      	push	{r4, r7, lr}
 80076dc:	b087      	sub	sp, #28
 80076de:	af02      	add	r7, sp, #8
 80076e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7818      	ldrb	r0, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80076f4:	b299      	uxth	r1, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007704:	b29c      	uxth	r4, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800770c:	b29b      	uxth	r3, r3
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	4623      	mov	r3, r4
 8007712:	f000 f9b0 	bl	8007a76 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	bd90      	pop	{r4, r7, pc}

08007720 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7818      	ldrb	r0, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800773a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007740:	461a      	mov	r2, r3
 8007742:	f000 f9ac 	bl	8007a9e <hci_le_read_remote_used_features_complete_event>

  return status;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	895b      	ldrh	r3, [r3, #10]
 800776e:	b29b      	uxth	r3, r3
 8007770:	461a      	mov	r2, r3
 8007772:	f000 f9a2 	bl	8007aba <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8007780:	b590      	push	{r4, r7, lr}
 8007782:	b087      	sub	sp, #28
 8007784:	af02      	add	r7, sp, #8
 8007786:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b298      	uxth	r0, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	b299      	uxth	r1, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	889b      	ldrh	r3, [r3, #4]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	88db      	ldrh	r3, [r3, #6]
 80077a6:	b29c      	uxth	r4, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	891b      	ldrh	r3, [r3, #8]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4623      	mov	r3, r4
 80077b2:	f000 f990 	bl	8007ad6 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f000 f98f 	bl	8007afe <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f000 f986 	bl	8007b16 <hci_le_generate_dhkey_complete_event>

  return status;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007818:	b08d      	sub	sp, #52	; 0x34
 800781a:	af08      	add	r7, sp, #32
 800781c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f893 c000 	ldrb.w	ip, [r3]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007832:	fa1f fe83 	uxth.w	lr, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f893 8003 	ldrb.w	r8, [r3, #3]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800784e:	68b8      	ldr	r0, [r7, #8]
 8007850:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007854:	b280      	uxth	r0, r0
 8007856:	68bc      	ldr	r4, [r7, #8]
 8007858:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800785c:	b2a4      	uxth	r4, r4
 800785e:	68bd      	ldr	r5, [r7, #8]
 8007860:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007864:	b2ad      	uxth	r5, r5
 8007866:	68be      	ldr	r6, [r7, #8]
 8007868:	7f76      	ldrb	r6, [r6, #29]
 800786a:	9606      	str	r6, [sp, #24]
 800786c:	9505      	str	r5, [sp, #20]
 800786e:	9404      	str	r4, [sp, #16]
 8007870:	9003      	str	r0, [sp, #12]
 8007872:	9102      	str	r1, [sp, #8]
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	464b      	mov	r3, r9
 800787a:	4642      	mov	r2, r8
 800787c:	4671      	mov	r1, lr
 800787e:	4660      	mov	r0, ip
 8007880:	f000 f955 	bl	8007b2e <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007890 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b0a6      	sub	sp, #152	; 0x98
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007898:	2300      	movs	r3, #0
 800789a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80078aa:	2300      	movs	r3, #0
 80078ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078b0:	e085      	b.n	80079be <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80078b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	3301      	adds	r3, #1
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	3398      	adds	r3, #152	; 0x98
 80078ca:	443b      	add	r3, r7
 80078cc:	3b90      	subs	r3, #144	; 0x90
 80078ce:	701a      	strb	r2, [r3, #0]
    size += 1;
 80078d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078d4:	3301      	adds	r3, #1
 80078d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80078da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	3302      	adds	r3, #2
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	3398      	adds	r3, #152	; 0x98
 80078f2:	443b      	add	r3, r7
 80078f4:	3b8f      	subs	r3, #143	; 0x8f
 80078f6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80078f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078fc:	3301      	adds	r3, #1
 80078fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	1c98      	adds	r0, r3, #2
 8007910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800791a:	4413      	add	r3, r2
 800791c:	3303      	adds	r3, #3
 800791e:	2206      	movs	r2, #6
 8007920:	4619      	mov	r1, r3
 8007922:	f001 f9c3 	bl	8008cac <memcpy>
    size += 6;
 8007926:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800792a:	3306      	adds	r3, #6
 800792c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007930:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	4413      	add	r3, r2
 800793c:	3309      	adds	r3, #9
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	3398      	adds	r3, #152	; 0x98
 8007948:	443b      	add	r3, r7
 800794a:	3b88      	subs	r3, #136	; 0x88
 800794c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800794e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007952:	3301      	adds	r3, #1
 8007954:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007958:	f107 0208 	add.w	r2, r7, #8
 800795c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	3308      	adds	r3, #8
 8007964:	4413      	add	r3, r2
 8007966:	1c58      	adds	r0, r3, #1
 8007968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	3308      	adds	r3, #8
 8007970:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007974:	4413      	add	r3, r2
 8007976:	3302      	adds	r3, #2
 8007978:	2206      	movs	r2, #6
 800797a:	4619      	mov	r1, r3
 800797c:	f001 f996 	bl	8008cac <memcpy>
    size += 6;
 8007980:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007984:	3306      	adds	r3, #6
 8007986:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800798a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800798e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	4413      	add	r3, r2
 8007996:	3310      	adds	r3, #16
 8007998:	f993 2000 	ldrsb.w	r2, [r3]
 800799c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	3398      	adds	r3, #152	; 0x98
 80079a4:	443b      	add	r3, r7
 80079a6:	3b81      	subs	r3, #129	; 0x81
 80079a8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80079aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079ae:	3301      	adds	r3, #1
 80079b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80079b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ca:	4293      	cmp	r3, r2
 80079cc:	f6ff af71 	blt.w	80078b2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80079d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f107 0208 	add.w	r2, r7, #8
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f8ba 	bl	8007b56 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 80079e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3798      	adds	r7, #152	; 0x98
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 80079ee:	b490      	push	{r4, r7}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4604      	mov	r4, r0
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	461a      	mov	r2, r3
 80079fc:	4623      	mov	r3, r4
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	4603      	mov	r3, r0
 8007a02:	80bb      	strh	r3, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	71bb      	strb	r3, [r7, #6]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc90      	pop	{r4, r7}
 8007a14:	4770      	bx	lr

08007a16 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	4603      	mov	r3, r0
 8007a62:	460a      	mov	r2, r1
 8007a64:	71fb      	strb	r3, [r7, #7]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8007a76:	b490      	push	{r4, r7}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	461a      	mov	r2, r3
 8007a84:	4623      	mov	r3, r4
 8007a86:	71fb      	strb	r3, [r7, #7]
 8007a88:	4603      	mov	r3, r0
 8007a8a:	80bb      	strh	r3, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	807b      	strh	r3, [r7, #2]
 8007a90:	4613      	mov	r3, r2
 8007a92:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc90      	pop	{r4, r7}
 8007a9c:	4770      	bx	lr

08007a9e <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	603a      	str	r2, [r7, #0]
 8007aa8:	71fb      	strb	r3, [r7, #7]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	6039      	str	r1, [r7, #0]
 8007ac4:	80fb      	strh	r3, [r7, #6]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8007ad6:	b490      	push	{r4, r7}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	80fb      	strh	r3, [r7, #6]
 8007ae8:	4603      	mov	r3, r0
 8007aea:	80bb      	strh	r3, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
 8007af0:	4613      	mov	r3, r2
 8007af2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc90      	pop	{r4, r7}
 8007afc:	4770      	bx	lr

08007afe <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	4603      	mov	r3, r0
 8007b06:	6039      	str	r1, [r7, #0]
 8007b08:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	6039      	str	r1, [r7, #0]
 8007b20:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8007b2e:	b490      	push	{r4, r7}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	4604      	mov	r4, r0
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4623      	mov	r3, r4
 8007b3e:	71fb      	strb	r3, [r7, #7]
 8007b40:	4603      	mov	r3, r0
 8007b42:	80bb      	strh	r3, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	71bb      	strb	r3, [r7, #6]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc90      	pop	{r4, r7}
 8007b54:	4770      	bx	lr

08007b56 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	6039      	str	r1, [r7, #0]
 8007b60:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8007b6e:	b480      	push	{r7}
 8007b70:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8007b72:	bf00      	nop
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	4603      	mov	r3, r0
 8007b9a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8007bba:	bf00      	nop
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	4603      	mov	r3, r0
 8007be2:	6039      	str	r1, [r7, #0]
 8007be4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	4603      	mov	r3, r0
 8007c16:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	80fb      	strh	r3, [r7, #6]
 8007c30:	460b      	mov	r3, r1
 8007c32:	717b      	strb	r3, [r7, #5]
 8007c34:	4613      	mov	r3, r2
 8007c36:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	603a      	str	r2, [r7, #0]
 8007c4e:	80fb      	strh	r3, [r7, #6]
 8007c50:	460b      	mov	r3, r1
 8007c52:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	4603      	mov	r3, r0
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	717b      	strb	r3, [r7, #5]
 8007c70:	4613      	mov	r3, r2
 8007c72:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	603a      	str	r2, [r7, #0]
 8007c8a:	80fb      	strh	r3, [r7, #6]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	603a      	str	r2, [r7, #0]
 8007ca6:	80fb      	strh	r3, [r7, #6]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	603a      	str	r2, [r7, #0]
 8007cc2:	80fb      	strh	r3, [r7, #6]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	4603      	mov	r3, r0
 8007cde:	80fb      	strh	r3, [r7, #6]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	717b      	strb	r3, [r7, #5]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8007cf4:	b490      	push	{r4, r7}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	80fb      	strh	r3, [r7, #6]
 8007d06:	4603      	mov	r3, r0
 8007d08:	80bb      	strh	r3, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	807b      	strh	r3, [r7, #2]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc90      	pop	{r4, r7}
 8007d1a:	4770      	bx	lr

08007d1c <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	607b      	str	r3, [r7, #4]
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	81fb      	strh	r3, [r7, #14]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	81bb      	strh	r3, [r7, #12]
 8007d42:	4613      	mov	r3, r2
 8007d44:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8007d52:	b490      	push	{r4, r7}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	4604      	mov	r4, r0
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4623      	mov	r3, r4
 8007d62:	80fb      	strh	r3, [r7, #6]
 8007d64:	4603      	mov	r3, r0
 8007d66:	717b      	strb	r3, [r7, #5]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	807b      	strh	r3, [r7, #2]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc90      	pop	{r4, r7}
 8007d78:	4770      	bx	lr

08007d7a <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	4603      	mov	r3, r0
 8007d84:	81fb      	strh	r3, [r7, #14]
 8007d86:	460b      	mov	r3, r1
 8007d88:	81bb      	strh	r3, [r7, #12]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	80fb      	strh	r3, [r7, #6]
 8007da4:	460b      	mov	r3, r1
 8007da6:	80bb      	strh	r3, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	603a      	str	r2, [r7, #0]
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8007dea:	b490      	push	{r4, r7}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	461a      	mov	r2, r3
 8007df8:	4623      	mov	r3, r4
 8007dfa:	80fb      	strh	r3, [r7, #6]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	80bb      	strh	r3, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
 8007e04:	4613      	mov	r3, r2
 8007e06:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc90      	pop	{r4, r7}
 8007e10:	4770      	bx	lr

08007e12 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4603      	mov	r3, r0
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	80fb      	strh	r3, [r7, #6]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	4603      	mov	r3, r0
 8007e36:	603a      	str	r2, [r7, #0]
 8007e38:	80fb      	strh	r3, [r7, #6]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8007e4a:	b490      	push	{r4, r7}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	4604      	mov	r4, r0
 8007e52:	4608      	mov	r0, r1
 8007e54:	4611      	mov	r1, r2
 8007e56:	461a      	mov	r2, r3
 8007e58:	4623      	mov	r3, r4
 8007e5a:	80fb      	strh	r3, [r7, #6]
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	717b      	strb	r3, [r7, #5]
 8007e60:	460b      	mov	r3, r1
 8007e62:	807b      	strh	r3, [r7, #2]
 8007e64:	4613      	mov	r3, r2
 8007e66:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc90      	pop	{r4, r7}
 8007e70:	4770      	bx	lr

08007e72 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8007e72:	b490      	push	{r4, r7}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4623      	mov	r3, r4
 8007e82:	80fb      	strh	r3, [r7, #6]
 8007e84:	4603      	mov	r3, r0
 8007e86:	717b      	strb	r3, [r7, #5]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc90      	pop	{r4, r7}
 8007e98:	4770      	bx	lr

08007e9a <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	603a      	str	r2, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
 8007eec:	460b      	mov	r3, r1
 8007eee:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	603a      	str	r2, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	603a      	str	r2, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
 8007f24:	460b      	mov	r3, r1
 8007f26:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	2218      	movs	r2, #24
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fe36 	bl	8008bb8 <memset>
  rq.ogf = 0x03;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007f50:	2303      	movs	r3, #3
 8007f52:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f54:	1dfb      	adds	r3, r7, #7
 8007f56:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f97a 	bl	800825c <hci_send_req>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da01      	bge.n	8007f72 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f6e:	23ff      	movs	r3, #255	; 0xff
 8007f70:	e005      	b.n	8007f7e <hci_reset+0x4a>
  if (status) {
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <hci_reset+0x48>
    return status;
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	e000      	b.n	8007f7e <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <hci_read_rssi>:
  BLUENRG_memcpy((void *) BD_ADDR, (const void *) resp.BD_ADDR, 6);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_read_rssi(uint16_t Connection_Handle,
                         int8_t *RSSI)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b0cc      	sub	sp, #304	; 0x130
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	6019      	str	r1, [r3, #0]
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007fa0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_read_rssi_cp0 *cp0 = (hci_read_rssi_cp0*)(cmd_buffer);
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hci_read_rssi_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	2204      	movs	r2, #4
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fe00 	bl	8008bb8 <memset>
  uint8_t index_input = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fc6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fca:	8812      	ldrh	r2, [r2, #0]
 8007fcc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fdc:	2218      	movs	r2, #24
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fde9 	bl	8008bb8 <memset>
  rq.ogf = 0x05;
 8007fe6:	2305      	movs	r3, #5
 8007fe8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x005;
 8007fec:	2305      	movs	r3, #5
 8007fee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ffa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007ffe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800800a:	2304      	movs	r3, #4
 800800c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f920 	bl	800825c <hci_send_req>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	da01      	bge.n	8008026 <hci_read_rssi+0xa0>
    return BLE_STATUS_TIMEOUT;
 8008022:	23ff      	movs	r3, #255	; 0xff
 8008024:	e019      	b.n	800805a <hci_read_rssi+0xd4>
  if (resp.Status) {
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <hci_read_rssi+0xba>
    return resp.Status;
 8008034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008038:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	e00c      	b.n	800805a <hci_read_rssi+0xd4>
  }
  *RSSI = btoh(resp.RSSI, 1);
 8008040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008044:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008048:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3308      	adds	r3, #8
 8008070:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d001      	beq.n	800807e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800807a:	2301      	movs	r3, #1
 800807c:	e00c      	b.n	8008098 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3302      	adds	r3, #2
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800808c:	3b03      	subs	r3, #3
 800808e:	429a      	cmp	r2, r3
 8008090:	d001      	beq.n	8008096 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008092:	2302      	movs	r3, #2
 8008094:	e000      	b.n	8008098 <verify_packet+0x34>
  
  return 0;      
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b0a6      	sub	sp, #152	; 0x98
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	4603      	mov	r3, r0
 80080ae:	81fb      	strh	r3, [r7, #14]
 80080b0:	460b      	mov	r3, r1
 80080b2:	81bb      	strh	r3, [r7, #12]
 80080b4:	4613      	mov	r3, r2
 80080b6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80080b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c0:	b21a      	sxth	r2, r3
 80080c2:	89fb      	ldrh	r3, [r7, #14]
 80080c4:	029b      	lsls	r3, r3, #10
 80080c6:	b21b      	sxth	r3, r3
 80080c8:	4313      	orrs	r3, r2
 80080ca:	b21b      	sxth	r3, r3
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80080d4:	2301      	movs	r3, #1
 80080d6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80080d8:	f107 0318 	add.w	r3, r7, #24
 80080dc:	3301      	adds	r3, #1
 80080de:	461a      	mov	r2, r3
 80080e0:	f107 0314 	add.w	r3, r7, #20
 80080e4:	8819      	ldrh	r1, [r3, #0]
 80080e6:	789b      	ldrb	r3, [r3, #2]
 80080e8:	8011      	strh	r1, [r2, #0]
 80080ea:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80080ec:	f107 0318 	add.w	r3, r7, #24
 80080f0:	3304      	adds	r3, #4
 80080f2:	7afa      	ldrb	r2, [r7, #11]
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fdd8 	bl	8008cac <memcpy>
  
  if (hciContext.io.Send)
 80080fc:	4b08      	ldr	r3, [pc, #32]	; (8008120 <send_cmd+0x7c>)
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <send_cmd+0x7c>)
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	b292      	uxth	r2, r2
 800810c:	3204      	adds	r2, #4
 800810e:	b291      	uxth	r1, r2
 8008110:	f107 0218 	add.w	r2, r7, #24
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
  }
}
 8008118:	bf00      	nop
 800811a:	3798      	adds	r7, #152	; 0x98
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	200008bc 	.word	0x200008bc

08008124 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800812e:	e00a      	b.n	8008146 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	4619      	mov	r1, r3
 8008136:	6838      	ldr	r0, [r7, #0]
 8008138:	f000 fae8 	bl	800870c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fa4f 	bl	80085e4 <list_insert_head>
  while (!list_is_empty(src_list))
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f000 fa2a 	bl	80085a0 <list_is_empty>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0ee      	beq.n	8008130 <move_list+0xc>
  }
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008162:	e009      	b.n	8008178 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4809      	ldr	r0, [pc, #36]	; (8008190 <free_event_list+0x34>)
 800816a:	f000 faa8 	bl	80086be <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4619      	mov	r1, r3
 8008172:	4808      	ldr	r0, [pc, #32]	; (8008194 <free_event_list+0x38>)
 8008174:	f000 fa5c 	bl	8008630 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008178:	4806      	ldr	r0, [pc, #24]	; (8008194 <free_event_list+0x38>)
 800817a:	f000 faee 	bl	800875a <list_get_size>
 800817e:	4603      	mov	r3, r0
 8008180:	2b04      	cmp	r3, #4
 8008182:	ddef      	ble.n	8008164 <free_event_list+0x8>
  }
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000033c 	.word	0x2000033c
 8008194:	20000334 	.word	0x20000334

08008198 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80081a8:	4a18      	ldr	r2, [pc, #96]	; (800820c <hci_init+0x74>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80081ae:	4818      	ldr	r0, [pc, #96]	; (8008210 <hci_init+0x78>)
 80081b0:	f000 f9e6 	bl	8008580 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80081b4:	4817      	ldr	r0, [pc, #92]	; (8008214 <hci_init+0x7c>)
 80081b6:	f000 f9e3 	bl	8008580 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80081ba:	f7f9 fc6f 	bl	8001a9c <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
 80081c2:	e00c      	b.n	80081de <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	228c      	movs	r2, #140	; 0x8c
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	4a12      	ldr	r2, [pc, #72]	; (8008218 <hci_init+0x80>)
 80081ce:	4413      	add	r3, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	480f      	ldr	r0, [pc, #60]	; (8008210 <hci_init+0x78>)
 80081d4:	f000 fa2c 	bl	8008630 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	3301      	adds	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d9ef      	bls.n	80081c4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <hci_init+0x74>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <hci_init+0x5c>
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <hci_init+0x74>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <hci_init+0x74>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <hci_init+0x6a>
 80081fc:	4b03      	ldr	r3, [pc, #12]	; (800820c <hci_init+0x74>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4798      	blx	r3
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200008bc 	.word	0x200008bc
 8008210:	20000334 	.word	0x20000334
 8008214:	2000033c 	.word	0x2000033c
 8008218:	20000344 	.word	0x20000344

0800821c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a0b      	ldr	r2, [pc, #44]	; (8008258 <hci_register_io_bus+0x3c>)
 800822a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4a09      	ldr	r2, [pc, #36]	; (8008258 <hci_register_io_bus+0x3c>)
 8008232:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	4a07      	ldr	r2, [pc, #28]	; (8008258 <hci_register_io_bus+0x3c>)
 800823a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	4a05      	ldr	r2, [pc, #20]	; (8008258 <hci_register_io_bus+0x3c>)
 8008242:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4a03      	ldr	r2, [pc, #12]	; (8008258 <hci_register_io_bus+0x3c>)
 800824a:	6093      	str	r3, [r2, #8]
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200008bc 	.word	0x200008bc

0800825c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	885b      	ldrh	r3, [r3, #2]
 800826c:	b21b      	sxth	r3, r3
 800826e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008272:	b21a      	sxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	029b      	lsls	r3, r3, #10
 800827a:	b21b      	sxth	r3, r3
 800827c:	4313      	orrs	r3, r2
 800827e:	b21b      	sxth	r3, r3
 8008280:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f978 	bl	8008580 <list_init_head>

  free_event_list();
 8008290:	f7ff ff64 	bl	800815c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8818      	ldrh	r0, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8859      	ldrh	r1, [r3, #2]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f7ff fefd 	bl	80080a4 <send_cmd>
  
  if (async)
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <hci_send_req+0x58>
  {
    return 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	e0e2      	b.n	800847a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80082b4:	f7fa f9c0 	bl	8002638 <HAL_GetTick>
 80082b8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80082ba:	f7fa f9bd 	bl	8002638 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082c8:	f200 80b3 	bhi.w	8008432 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80082cc:	486d      	ldr	r0, [pc, #436]	; (8008484 <hci_send_req+0x228>)
 80082ce:	f000 f967 	bl	80085a0 <list_is_empty>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d000      	beq.n	80082da <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80082d8:	e7ef      	b.n	80082ba <hci_send_req+0x5e>
      {
        break;
 80082da:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80082dc:	f107 0310 	add.w	r3, r7, #16
 80082e0:	4619      	mov	r1, r3
 80082e2:	4868      	ldr	r0, [pc, #416]	; (8008484 <hci_send_req+0x228>)
 80082e4:	f000 f9eb 	bl	80086be <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3308      	adds	r3, #8
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d17f      	bne.n	80083f6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	3301      	adds	r3, #1
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	3308      	adds	r3, #8
 8008300:	3303      	adds	r3, #3
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800830a:	3b03      	subs	r3, #3
 800830c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b3e      	cmp	r3, #62	; 0x3e
 8008314:	d04c      	beq.n	80083b0 <hci_send_req+0x154>
 8008316:	2b3e      	cmp	r3, #62	; 0x3e
 8008318:	dc68      	bgt.n	80083ec <hci_send_req+0x190>
 800831a:	2b10      	cmp	r3, #16
 800831c:	f000 808b 	beq.w	8008436 <hci_send_req+0x1da>
 8008320:	2b10      	cmp	r3, #16
 8008322:	dc63      	bgt.n	80083ec <hci_send_req+0x190>
 8008324:	2b0e      	cmp	r3, #14
 8008326:	d023      	beq.n	8008370 <hci_send_req+0x114>
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d15f      	bne.n	80083ec <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	885b      	ldrh	r3, [r3, #2]
 8008334:	b29b      	uxth	r3, r3
 8008336:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008338:	429a      	cmp	r2, r3
 800833a:	d17e      	bne.n	800843a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d004      	beq.n	800834e <hci_send_req+0xf2>
          if (cs->status) {
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d051      	beq.n	80083f0 <hci_send_req+0x194>
            goto failed;
 800834c:	e078      	b.n	8008440 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	429a      	cmp	r2, r3
 8008356:	bf28      	it	cs
 8008358:	461a      	movcs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6918      	ldr	r0, [r3, #16]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	461a      	mov	r2, r3
 8008368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800836a:	f000 fc9f 	bl	8008cac <memcpy>
        goto done;
 800836e:	e078      	b.n	8008462 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800837a:	b29b      	uxth	r3, r3
 800837c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800837e:	429a      	cmp	r2, r3
 8008380:	d15d      	bne.n	800843e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	3303      	adds	r3, #3
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	3b03      	subs	r3, #3
 800838c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	429a      	cmp	r2, r3
 8008396:	bf28      	it	cs
 8008398:	461a      	movcs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083aa:	f000 fc7f 	bl	8008cac <memcpy>
        goto done;
 80083ae:	e058      	b.n	8008462 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d118      	bne.n	80083f4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	bf28      	it	cs
 80083d2:	461a      	movcs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6918      	ldr	r0, [r3, #16]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	1c59      	adds	r1, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f000 fc61 	bl	8008cac <memcpy>
        goto done;
 80083ea:	e03a      	b.n	8008462 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80083ec:	bf00      	nop
 80083ee:	e002      	b.n	80083f6 <hci_send_req+0x19a>
          break;
 80083f0:	bf00      	nop
 80083f2:	e000      	b.n	80083f6 <hci_send_req+0x19a>
          break;
 80083f4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80083f6:	4824      	ldr	r0, [pc, #144]	; (8008488 <hci_send_req+0x22c>)
 80083f8:	f000 f8d2 	bl	80085a0 <list_is_empty>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <hci_send_req+0x1c2>
 8008402:	4820      	ldr	r0, [pc, #128]	; (8008484 <hci_send_req+0x228>)
 8008404:	f000 f8cc 	bl	80085a0 <list_is_empty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	4619      	mov	r1, r3
 8008412:	481d      	ldr	r0, [pc, #116]	; (8008488 <hci_send_req+0x22c>)
 8008414:	f000 f90c 	bl	8008630 <list_insert_tail>
      hciReadPacket=NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	e008      	b.n	8008430 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	f107 0308 	add.w	r3, r7, #8
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f902 	bl	8008630 <list_insert_tail>
      hciReadPacket=NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
  {
 8008430:	e740      	b.n	80082b4 <hci_send_req+0x58>
        goto failed;
 8008432:	bf00      	nop
 8008434:	e004      	b.n	8008440 <hci_send_req+0x1e4>
        goto failed;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <hci_send_req+0x1e4>
          goto failed;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <hci_send_req+0x1e4>
          goto failed;
 800843e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4619      	mov	r1, r3
 800844a:	480f      	ldr	r0, [pc, #60]	; (8008488 <hci_send_req+0x22c>)
 800844c:	f000 f8ca 	bl	80085e4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4619      	mov	r1, r3
 8008456:	480b      	ldr	r0, [pc, #44]	; (8008484 <hci_send_req+0x228>)
 8008458:	f7ff fe64 	bl	8008124 <move_list>

  return -1;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295
 8008460:	e00b      	b.n	800847a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4619      	mov	r1, r3
 8008466:	4808      	ldr	r0, [pc, #32]	; (8008488 <hci_send_req+0x22c>)
 8008468:	f000 f8bc 	bl	80085e4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4619      	mov	r1, r3
 8008472:	4804      	ldr	r0, [pc, #16]	; (8008484 <hci_send_req+0x228>)
 8008474:	f7ff fe56 	bl	8008124 <move_list>

  return 0;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3738      	adds	r7, #56	; 0x38
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	2000033c 	.word	0x2000033c
 8008488:	20000334 	.word	0x20000334

0800848c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008496:	e013      	b.n	80084c0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008498:	1d3b      	adds	r3, r7, #4
 800849a:	4619      	mov	r1, r3
 800849c:	480e      	ldr	r0, [pc, #56]	; (80084d8 <hci_user_evt_proc+0x4c>)
 800849e:	f000 f90e 	bl	80086be <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80084a2:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <hci_user_evt_proc+0x50>)
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <hci_user_evt_proc+0x50>)
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	3208      	adds	r2, #8
 80084b2:	4610      	mov	r0, r2
 80084b4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4619      	mov	r1, r3
 80084ba:	4809      	ldr	r0, [pc, #36]	; (80084e0 <hci_user_evt_proc+0x54>)
 80084bc:	f000 f8b8 	bl	8008630 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80084c0:	4805      	ldr	r0, [pc, #20]	; (80084d8 <hci_user_evt_proc+0x4c>)
 80084c2:	f000 f86d 	bl	80085a0 <list_is_empty>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0e5      	beq.n	8008498 <hci_user_evt_proc+0xc>
  }
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000033c 	.word	0x2000033c
 80084dc:	200008bc 	.word	0x200008bc
 80084e0:	20000334 	.word	0x20000334

080084e4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80084f4:	481f      	ldr	r0, [pc, #124]	; (8008574 <hci_notify_asynch_evt+0x90>)
 80084f6:	f000 f853 	bl	80085a0 <list_is_empty>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d132      	bne.n	8008566 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	4619      	mov	r1, r3
 8008506:	481b      	ldr	r0, [pc, #108]	; (8008574 <hci_notify_asynch_evt+0x90>)
 8008508:	f000 f8d9 	bl	80086be <list_remove_head>
    
    if (hciContext.io.Receive)
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <hci_notify_asynch_evt+0x94>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02a      	beq.n	800856a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008514:	4b18      	ldr	r3, [pc, #96]	; (8008578 <hci_notify_asynch_evt+0x94>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	3208      	adds	r2, #8
 800851c:	2180      	movs	r1, #128	; 0x80
 800851e:	4610      	mov	r0, r2
 8008520:	4798      	blx	r3
 8008522:	4603      	mov	r3, r0
 8008524:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008526:	7cfb      	ldrb	r3, [r7, #19]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d016      	beq.n	800855a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7cfa      	ldrb	r2, [r7, #19]
 8008530:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff fd94 	bl	8008064 <verify_packet>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4619      	mov	r1, r3
 8008546:	480d      	ldr	r0, [pc, #52]	; (800857c <hci_notify_asynch_evt+0x98>)
 8008548:	f000 f872 	bl	8008630 <list_insert_tail>
 800854c:	e00d      	b.n	800856a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4619      	mov	r1, r3
 8008552:	4808      	ldr	r0, [pc, #32]	; (8008574 <hci_notify_asynch_evt+0x90>)
 8008554:	f000 f846 	bl	80085e4 <list_insert_head>
 8008558:	e007      	b.n	800856a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4619      	mov	r1, r3
 800855e:	4805      	ldr	r0, [pc, #20]	; (8008574 <hci_notify_asynch_evt+0x90>)
 8008560:	f000 f840 	bl	80085e4 <list_insert_head>
 8008564:	e001      	b.n	800856a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8008566:	2301      	movs	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800856a:	697b      	ldr	r3, [r7, #20]
  
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000334 	.word	0x20000334
 8008578:	200008bc 	.word	0x200008bc
 800857c:	2000033c 	.word	0x2000033c

08008580 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a8:	f3ef 8310 	mrs	r3, PRIMASK
 80085ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ae:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80085b2:	b672      	cpsid	i
}
 80085b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d102      	bne.n	80085c6 <list_is_empty+0x26>
  {
    return_value = 1;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
 80085c4:	e001      	b.n	80085ca <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f383 8810 	msr	PRIMASK, r3
}
 80085d4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ee:	f3ef 8310 	mrs	r3, PRIMASK
 80085f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80085f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085f8:	b672      	cpsid	i
}
 80085fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	605a      	str	r2, [r3, #4]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f383 8810 	msr	PRIMASK, r3
}
 8008622:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008624:	bf00      	nop
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863a:	f3ef 8310 	mrs	r3, PRIMASK
 800863e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008640:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008644:	b672      	cpsid	i
}
 8008646:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f383 8810 	msr	PRIMASK, r3
}
 800866e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008684:	f3ef 8310 	mrs	r3, PRIMASK
 8008688:	60fb      	str	r3, [r7, #12]
  return(result);
 800868a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800868c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800868e:	b672      	cpsid	i
}
 8008690:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6852      	ldr	r2, [r2, #4]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f383 8810 	msr	PRIMASK, r3
}
 80086b0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c8:	f3ef 8310 	mrs	r3, PRIMASK
 80086cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086d2:	b672      	cpsid	i
}
 80086d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff ffca 	bl	800867c <list_remove_node>
  (*node)->next = NULL;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	605a      	str	r2, [r3, #4]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f383 8810 	msr	PRIMASK, r3
}
 8008702:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	60fb      	str	r3, [r7, #12]
  return(result);
 800871c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800871e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008720:	b672      	cpsid	i
}
 8008722:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff ffa3 	bl	800867c <list_remove_node>
  (*node)->next = NULL;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	605a      	str	r2, [r3, #4]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f383 8810 	msr	PRIMASK, r3
}
 8008750:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008752:	bf00      	nop
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800875a:	b480      	push	{r7}
 800875c:	b089      	sub	sp, #36	; 0x24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008766:	f3ef 8310 	mrs	r3, PRIMASK
 800876a:	613b      	str	r3, [r7, #16]
  return(result);
 800876c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800876e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008770:	b672      	cpsid	i
}
 8008772:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800877a:	e005      	b.n	8008788 <list_get_size+0x2e>
  {
    size++;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	3301      	adds	r3, #1
 8008780:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d1f5      	bne.n	800877c <list_get_size+0x22>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f383 8810 	msr	PRIMASK, r3
}
 800879a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800879c:	69fb      	ldr	r3, [r7, #28]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3724      	adds	r7, #36	; 0x24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
	...

080087ac <std>:
 80087ac:	2300      	movs	r3, #0
 80087ae:	b510      	push	{r4, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	e9c0 3300 	strd	r3, r3, [r0]
 80087b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ba:	6083      	str	r3, [r0, #8]
 80087bc:	8181      	strh	r1, [r0, #12]
 80087be:	6643      	str	r3, [r0, #100]	; 0x64
 80087c0:	81c2      	strh	r2, [r0, #14]
 80087c2:	6183      	str	r3, [r0, #24]
 80087c4:	4619      	mov	r1, r3
 80087c6:	2208      	movs	r2, #8
 80087c8:	305c      	adds	r0, #92	; 0x5c
 80087ca:	f000 f9f5 	bl	8008bb8 <memset>
 80087ce:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <std+0x38>)
 80087d0:	6263      	str	r3, [r4, #36]	; 0x24
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <std+0x3c>)
 80087d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <std+0x40>)
 80087d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x44>)
 80087dc:	6224      	str	r4, [r4, #32]
 80087de:	6323      	str	r3, [r4, #48]	; 0x30
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	080089e9 	.word	0x080089e9
 80087e8:	08008a0b 	.word	0x08008a0b
 80087ec:	08008a43 	.word	0x08008a43
 80087f0:	08008a67 	.word	0x08008a67

080087f4 <stdio_exit_handler>:
 80087f4:	4a02      	ldr	r2, [pc, #8]	; (8008800 <stdio_exit_handler+0xc>)
 80087f6:	4903      	ldr	r1, [pc, #12]	; (8008804 <stdio_exit_handler+0x10>)
 80087f8:	4803      	ldr	r0, [pc, #12]	; (8008808 <stdio_exit_handler+0x14>)
 80087fa:	f000 b869 	b.w	80088d0 <_fwalk_sglue>
 80087fe:	bf00      	nop
 8008800:	20000024 	.word	0x20000024
 8008804:	0800956d 	.word	0x0800956d
 8008808:	20000030 	.word	0x20000030

0800880c <cleanup_stdio>:
 800880c:	6841      	ldr	r1, [r0, #4]
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <cleanup_stdio+0x34>)
 8008810:	4299      	cmp	r1, r3
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	d001      	beq.n	800881c <cleanup_stdio+0x10>
 8008818:	f000 fea8 	bl	800956c <_fflush_r>
 800881c:	68a1      	ldr	r1, [r4, #8]
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <cleanup_stdio+0x38>)
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <cleanup_stdio+0x1e>
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fea1 	bl	800956c <_fflush_r>
 800882a:	68e1      	ldr	r1, [r4, #12]
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <cleanup_stdio+0x3c>)
 800882e:	4299      	cmp	r1, r3
 8008830:	d004      	beq.n	800883c <cleanup_stdio+0x30>
 8008832:	4620      	mov	r0, r4
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008838:	f000 be98 	b.w	800956c <_fflush_r>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	bf00      	nop
 8008840:	200008dc 	.word	0x200008dc
 8008844:	20000944 	.word	0x20000944
 8008848:	200009ac 	.word	0x200009ac

0800884c <global_stdio_init.part.0>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <global_stdio_init.part.0+0x30>)
 8008850:	4c0b      	ldr	r4, [pc, #44]	; (8008880 <global_stdio_init.part.0+0x34>)
 8008852:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <global_stdio_init.part.0+0x38>)
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	4620      	mov	r0, r4
 8008858:	2200      	movs	r2, #0
 800885a:	2104      	movs	r1, #4
 800885c:	f7ff ffa6 	bl	80087ac <std>
 8008860:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008864:	2201      	movs	r2, #1
 8008866:	2109      	movs	r1, #9
 8008868:	f7ff ffa0 	bl	80087ac <std>
 800886c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008870:	2202      	movs	r2, #2
 8008872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008876:	2112      	movs	r1, #18
 8008878:	f7ff bf98 	b.w	80087ac <std>
 800887c:	20000a14 	.word	0x20000a14
 8008880:	200008dc 	.word	0x200008dc
 8008884:	080087f5 	.word	0x080087f5

08008888 <__sfp_lock_acquire>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_acquire+0x8>)
 800888a:	f000 ba0d 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	20000a1d 	.word	0x20000a1d

08008894 <__sfp_lock_release>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sfp_lock_release+0x8>)
 8008896:	f000 ba08 	b.w	8008caa <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	20000a1d 	.word	0x20000a1d

080088a0 <__sinit>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	f7ff fff0 	bl	8008888 <__sfp_lock_acquire>
 80088a8:	6a23      	ldr	r3, [r4, #32]
 80088aa:	b11b      	cbz	r3, 80088b4 <__sinit+0x14>
 80088ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b0:	f7ff bff0 	b.w	8008894 <__sfp_lock_release>
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <__sinit+0x28>)
 80088b6:	6223      	str	r3, [r4, #32]
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <__sinit+0x2c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f5      	bne.n	80088ac <__sinit+0xc>
 80088c0:	f7ff ffc4 	bl	800884c <global_stdio_init.part.0>
 80088c4:	e7f2      	b.n	80088ac <__sinit+0xc>
 80088c6:	bf00      	nop
 80088c8:	0800880d 	.word	0x0800880d
 80088cc:	20000a14 	.word	0x20000a14

080088d0 <_fwalk_sglue>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4607      	mov	r7, r0
 80088d6:	4688      	mov	r8, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	2600      	movs	r6, #0
 80088dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e0:	f1b9 0901 	subs.w	r9, r9, #1
 80088e4:	d505      	bpl.n	80088f2 <_fwalk_sglue+0x22>
 80088e6:	6824      	ldr	r4, [r4, #0]
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	d1f7      	bne.n	80088dc <_fwalk_sglue+0xc>
 80088ec:	4630      	mov	r0, r6
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d907      	bls.n	8008908 <_fwalk_sglue+0x38>
 80088f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088fc:	3301      	adds	r3, #1
 80088fe:	d003      	beq.n	8008908 <_fwalk_sglue+0x38>
 8008900:	4629      	mov	r1, r5
 8008902:	4638      	mov	r0, r7
 8008904:	47c0      	blx	r8
 8008906:	4306      	orrs	r6, r0
 8008908:	3568      	adds	r5, #104	; 0x68
 800890a:	e7e9      	b.n	80088e0 <_fwalk_sglue+0x10>

0800890c <iprintf>:
 800890c:	b40f      	push	{r0, r1, r2, r3}
 800890e:	b507      	push	{r0, r1, r2, lr}
 8008910:	4906      	ldr	r1, [pc, #24]	; (800892c <iprintf+0x20>)
 8008912:	ab04      	add	r3, sp, #16
 8008914:	6808      	ldr	r0, [r1, #0]
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	6881      	ldr	r1, [r0, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	f000 faf5 	bl	8008f0c <_vfiprintf_r>
 8008922:	b003      	add	sp, #12
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b004      	add	sp, #16
 800892a:	4770      	bx	lr
 800892c:	2000007c 	.word	0x2000007c

08008930 <_puts_r>:
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b570      	push	{r4, r5, r6, lr}
 8008934:	6884      	ldr	r4, [r0, #8]
 8008936:	4605      	mov	r5, r0
 8008938:	460e      	mov	r6, r1
 800893a:	b90b      	cbnz	r3, 8008940 <_puts_r+0x10>
 800893c:	f7ff ffb0 	bl	80088a0 <__sinit>
 8008940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008942:	07db      	lsls	r3, r3, #31
 8008944:	d405      	bmi.n	8008952 <_puts_r+0x22>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	0598      	lsls	r0, r3, #22
 800894a:	d402      	bmi.n	8008952 <_puts_r+0x22>
 800894c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800894e:	f000 f9ab 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	0719      	lsls	r1, r3, #28
 8008956:	d513      	bpl.n	8008980 <_puts_r+0x50>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	b18b      	cbz	r3, 8008980 <_puts_r+0x50>
 800895c:	3e01      	subs	r6, #1
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	b9e9      	cbnz	r1, 80089a6 <_puts_r+0x76>
 800896a:	2b00      	cmp	r3, #0
 800896c:	da2e      	bge.n	80089cc <_puts_r+0x9c>
 800896e:	4622      	mov	r2, r4
 8008970:	210a      	movs	r1, #10
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f87b 	bl	8008a6e <__swbuf_r>
 8008978:	3001      	adds	r0, #1
 800897a:	d007      	beq.n	800898c <_puts_r+0x5c>
 800897c:	250a      	movs	r5, #10
 800897e:	e007      	b.n	8008990 <_puts_r+0x60>
 8008980:	4621      	mov	r1, r4
 8008982:	4628      	mov	r0, r5
 8008984:	f000 f8b0 	bl	8008ae8 <__swsetup_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	d0e7      	beq.n	800895c <_puts_r+0x2c>
 800898c:	f04f 35ff 	mov.w	r5, #4294967295
 8008990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d405      	bmi.n	80089a2 <_puts_r+0x72>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	059b      	lsls	r3, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_puts_r+0x72>
 800899c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899e:	f000 f984 	bl	8008caa <__retarget_lock_release_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da04      	bge.n	80089b4 <_puts_r+0x84>
 80089aa:	69a2      	ldr	r2, [r4, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	dc06      	bgt.n	80089be <_puts_r+0x8e>
 80089b0:	290a      	cmp	r1, #10
 80089b2:	d004      	beq.n	80089be <_puts_r+0x8e>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	7019      	strb	r1, [r3, #0]
 80089bc:	e7cf      	b.n	800895e <_puts_r+0x2e>
 80089be:	4622      	mov	r2, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	f000 f854 	bl	8008a6e <__swbuf_r>
 80089c6:	3001      	adds	r0, #1
 80089c8:	d1c9      	bne.n	800895e <_puts_r+0x2e>
 80089ca:	e7df      	b.n	800898c <_puts_r+0x5c>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	250a      	movs	r5, #10
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	701d      	strb	r5, [r3, #0]
 80089d6:	e7db      	b.n	8008990 <_puts_r+0x60>

080089d8 <puts>:
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <puts+0xc>)
 80089da:	4601      	mov	r1, r0
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	f7ff bfa7 	b.w	8008930 <_puts_r>
 80089e2:	bf00      	nop
 80089e4:	2000007c 	.word	0x2000007c

080089e8 <__sread>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	460c      	mov	r4, r1
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	f000 f90c 	bl	8008c0c <_read_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	bfab      	itete	ge
 80089f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089fa:	89a3      	ldrhlt	r3, [r4, #12]
 80089fc:	181b      	addge	r3, r3, r0
 80089fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a02:	bfac      	ite	ge
 8008a04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a06:	81a3      	strhlt	r3, [r4, #12]
 8008a08:	bd10      	pop	{r4, pc}

08008a0a <__swrite>:
 8008a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	461f      	mov	r7, r3
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	05db      	lsls	r3, r3, #23
 8008a14:	4605      	mov	r5, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4616      	mov	r6, r2
 8008a1a:	d505      	bpl.n	8008a28 <__swrite+0x1e>
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	2302      	movs	r3, #2
 8008a22:	2200      	movs	r2, #0
 8008a24:	f000 f8e0 	bl	8008be8 <_lseek_r>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	4628      	mov	r0, r5
 8008a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	f000 b8f7 	b.w	8008c30 <_write_r>

08008a42 <__sseek>:
 8008a42:	b510      	push	{r4, lr}
 8008a44:	460c      	mov	r4, r1
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 f8cd 	bl	8008be8 <_lseek_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	bf15      	itete	ne
 8008a54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a5e:	81a3      	strheq	r3, [r4, #12]
 8008a60:	bf18      	it	ne
 8008a62:	81a3      	strhne	r3, [r4, #12]
 8008a64:	bd10      	pop	{r4, pc}

08008a66 <__sclose>:
 8008a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6a:	f000 b8ad 	b.w	8008bc8 <_close_r>

08008a6e <__swbuf_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	460e      	mov	r6, r1
 8008a72:	4614      	mov	r4, r2
 8008a74:	4605      	mov	r5, r0
 8008a76:	b118      	cbz	r0, 8008a80 <__swbuf_r+0x12>
 8008a78:	6a03      	ldr	r3, [r0, #32]
 8008a7a:	b90b      	cbnz	r3, 8008a80 <__swbuf_r+0x12>
 8008a7c:	f7ff ff10 	bl	80088a0 <__sinit>
 8008a80:	69a3      	ldr	r3, [r4, #24]
 8008a82:	60a3      	str	r3, [r4, #8]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	071a      	lsls	r2, r3, #28
 8008a88:	d525      	bpl.n	8008ad6 <__swbuf_r+0x68>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	b31b      	cbz	r3, 8008ad6 <__swbuf_r+0x68>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	1a98      	subs	r0, r3, r2
 8008a94:	6963      	ldr	r3, [r4, #20]
 8008a96:	b2f6      	uxtb	r6, r6
 8008a98:	4283      	cmp	r3, r0
 8008a9a:	4637      	mov	r7, r6
 8008a9c:	dc04      	bgt.n	8008aa8 <__swbuf_r+0x3a>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 fd63 	bl	800956c <_fflush_r>
 8008aa6:	b9e0      	cbnz	r0, 8008ae2 <__swbuf_r+0x74>
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	6022      	str	r2, [r4, #0]
 8008ab4:	701e      	strb	r6, [r3, #0]
 8008ab6:	6962      	ldr	r2, [r4, #20]
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d004      	beq.n	8008ac8 <__swbuf_r+0x5a>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	07db      	lsls	r3, r3, #31
 8008ac2:	d506      	bpl.n	8008ad2 <__swbuf_r+0x64>
 8008ac4:	2e0a      	cmp	r6, #10
 8008ac6:	d104      	bne.n	8008ad2 <__swbuf_r+0x64>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 fd4e 	bl	800956c <_fflush_r>
 8008ad0:	b938      	cbnz	r0, 8008ae2 <__swbuf_r+0x74>
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f000 f805 	bl	8008ae8 <__swsetup_r>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d0d5      	beq.n	8008a8e <__swbuf_r+0x20>
 8008ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ae6:	e7f4      	b.n	8008ad2 <__swbuf_r+0x64>

08008ae8 <__swsetup_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4b2a      	ldr	r3, [pc, #168]	; (8008b94 <__swsetup_r+0xac>)
 8008aec:	4605      	mov	r5, r0
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	460c      	mov	r4, r1
 8008af2:	b118      	cbz	r0, 8008afc <__swsetup_r+0x14>
 8008af4:	6a03      	ldr	r3, [r0, #32]
 8008af6:	b90b      	cbnz	r3, 8008afc <__swsetup_r+0x14>
 8008af8:	f7ff fed2 	bl	80088a0 <__sinit>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b02:	0718      	lsls	r0, r3, #28
 8008b04:	d422      	bmi.n	8008b4c <__swsetup_r+0x64>
 8008b06:	06d9      	lsls	r1, r3, #27
 8008b08:	d407      	bmi.n	8008b1a <__swsetup_r+0x32>
 8008b0a:	2309      	movs	r3, #9
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e034      	b.n	8008b84 <__swsetup_r+0x9c>
 8008b1a:	0758      	lsls	r0, r3, #29
 8008b1c:	d512      	bpl.n	8008b44 <__swsetup_r+0x5c>
 8008b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b20:	b141      	cbz	r1, 8008b34 <__swsetup_r+0x4c>
 8008b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d002      	beq.n	8008b30 <__swsetup_r+0x48>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f8cc 	bl	8008cc8 <_free_r>
 8008b30:	2300      	movs	r3, #0
 8008b32:	6363      	str	r3, [r4, #52]	; 0x34
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0308 	orr.w	r3, r3, #8
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	b94b      	cbnz	r3, 8008b64 <__swsetup_r+0x7c>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5a:	d003      	beq.n	8008b64 <__swsetup_r+0x7c>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fd52 	bl	8009608 <__smakebuf_r>
 8008b64:	89a0      	ldrh	r0, [r4, #12]
 8008b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b6a:	f010 0301 	ands.w	r3, r0, #1
 8008b6e:	d00a      	beq.n	8008b86 <__swsetup_r+0x9e>
 8008b70:	2300      	movs	r3, #0
 8008b72:	60a3      	str	r3, [r4, #8]
 8008b74:	6963      	ldr	r3, [r4, #20]
 8008b76:	425b      	negs	r3, r3
 8008b78:	61a3      	str	r3, [r4, #24]
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	b943      	cbnz	r3, 8008b90 <__swsetup_r+0xa8>
 8008b7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b82:	d1c4      	bne.n	8008b0e <__swsetup_r+0x26>
 8008b84:	bd38      	pop	{r3, r4, r5, pc}
 8008b86:	0781      	lsls	r1, r0, #30
 8008b88:	bf58      	it	pl
 8008b8a:	6963      	ldrpl	r3, [r4, #20]
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	e7f4      	b.n	8008b7a <__swsetup_r+0x92>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e7f7      	b.n	8008b84 <__swsetup_r+0x9c>
 8008b94:	2000007c 	.word	0x2000007c

08008b98 <memcmp>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	3901      	subs	r1, #1
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4290      	cmp	r0, r2
 8008ba0:	d101      	bne.n	8008ba6 <memcmp+0xe>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e005      	b.n	8008bb2 <memcmp+0x1a>
 8008ba6:	7803      	ldrb	r3, [r0, #0]
 8008ba8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d001      	beq.n	8008bb4 <memcmp+0x1c>
 8008bb0:	1b18      	subs	r0, r3, r4
 8008bb2:	bd10      	pop	{r4, pc}
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	e7f2      	b.n	8008b9e <memcmp+0x6>

08008bb8 <memset>:
 8008bb8:	4402      	add	r2, r0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d100      	bne.n	8008bc2 <memset+0xa>
 8008bc0:	4770      	bx	lr
 8008bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc6:	e7f9      	b.n	8008bbc <memset+0x4>

08008bc8 <_close_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	; (8008be4 <_close_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f9 fc43 	bl	800245e <_close>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_close_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_close_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	20000a18 	.word	0x20000a18

08008be8 <_lseek_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d07      	ldr	r5, [pc, #28]	; (8008c08 <_lseek_r+0x20>)
 8008bec:	4604      	mov	r4, r0
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	602a      	str	r2, [r5, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f7f9 fc58 	bl	80024ac <_lseek>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_lseek_r+0x1e>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_lseek_r+0x1e>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	20000a18 	.word	0x20000a18

08008c0c <_read_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d07      	ldr	r5, [pc, #28]	; (8008c2c <_read_r+0x20>)
 8008c10:	4604      	mov	r4, r0
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	602a      	str	r2, [r5, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f7f9 fbe6 	bl	80023ec <_read>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_read_r+0x1e>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_read_r+0x1e>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20000a18 	.word	0x20000a18

08008c30 <_write_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	; (8008c50 <_write_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f9 fbf1 	bl	8002426 <_write>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_write_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_write_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	20000a18 	.word	0x20000a18

08008c54 <__errno>:
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <__errno+0x8>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	2000007c 	.word	0x2000007c

08008c60 <__libc_init_array>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4d0d      	ldr	r5, [pc, #52]	; (8008c98 <__libc_init_array+0x38>)
 8008c64:	4c0d      	ldr	r4, [pc, #52]	; (8008c9c <__libc_init_array+0x3c>)
 8008c66:	1b64      	subs	r4, r4, r5
 8008c68:	10a4      	asrs	r4, r4, #2
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	42a6      	cmp	r6, r4
 8008c6e:	d109      	bne.n	8008c84 <__libc_init_array+0x24>
 8008c70:	4d0b      	ldr	r5, [pc, #44]	; (8008ca0 <__libc_init_array+0x40>)
 8008c72:	4c0c      	ldr	r4, [pc, #48]	; (8008ca4 <__libc_init_array+0x44>)
 8008c74:	f000 fd36 	bl	80096e4 <_init>
 8008c78:	1b64      	subs	r4, r4, r5
 8008c7a:	10a4      	asrs	r4, r4, #2
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	42a6      	cmp	r6, r4
 8008c80:	d105      	bne.n	8008c8e <__libc_init_array+0x2e>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c88:	4798      	blx	r3
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	e7ee      	b.n	8008c6c <__libc_init_array+0xc>
 8008c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c92:	4798      	blx	r3
 8008c94:	3601      	adds	r6, #1
 8008c96:	e7f2      	b.n	8008c7e <__libc_init_array+0x1e>
 8008c98:	0800a18c 	.word	0x0800a18c
 8008c9c:	0800a18c 	.word	0x0800a18c
 8008ca0:	0800a18c 	.word	0x0800a18c
 8008ca4:	0800a190 	.word	0x0800a190

08008ca8 <__retarget_lock_acquire_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <__retarget_lock_release_recursive>:
 8008caa:	4770      	bx	lr

08008cac <memcpy>:
 8008cac:	440a      	add	r2, r1
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb4:	d100      	bne.n	8008cb8 <memcpy+0xc>
 8008cb6:	4770      	bx	lr
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	d1f9      	bne.n	8008cba <memcpy+0xe>
 8008cc6:	bd10      	pop	{r4, pc}

08008cc8 <_free_r>:
 8008cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	d044      	beq.n	8008d58 <_free_r+0x90>
 8008cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd2:	9001      	str	r0, [sp, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8008cda:	bfb8      	it	lt
 8008cdc:	18e4      	addlt	r4, r4, r3
 8008cde:	f000 f8df 	bl	8008ea0 <__malloc_lock>
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <_free_r+0x94>)
 8008ce4:	9801      	ldr	r0, [sp, #4]
 8008ce6:	6813      	ldr	r3, [r2, #0]
 8008ce8:	b933      	cbnz	r3, 8008cf8 <_free_r+0x30>
 8008cea:	6063      	str	r3, [r4, #4]
 8008cec:	6014      	str	r4, [r2, #0]
 8008cee:	b003      	add	sp, #12
 8008cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cf4:	f000 b8da 	b.w	8008eac <__malloc_unlock>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d908      	bls.n	8008d0e <_free_r+0x46>
 8008cfc:	6825      	ldr	r5, [r4, #0]
 8008cfe:	1961      	adds	r1, r4, r5
 8008d00:	428b      	cmp	r3, r1
 8008d02:	bf01      	itttt	eq
 8008d04:	6819      	ldreq	r1, [r3, #0]
 8008d06:	685b      	ldreq	r3, [r3, #4]
 8008d08:	1949      	addeq	r1, r1, r5
 8008d0a:	6021      	streq	r1, [r4, #0]
 8008d0c:	e7ed      	b.n	8008cea <_free_r+0x22>
 8008d0e:	461a      	mov	r2, r3
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	b10b      	cbz	r3, 8008d18 <_free_r+0x50>
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d9fa      	bls.n	8008d0e <_free_r+0x46>
 8008d18:	6811      	ldr	r1, [r2, #0]
 8008d1a:	1855      	adds	r5, r2, r1
 8008d1c:	42a5      	cmp	r5, r4
 8008d1e:	d10b      	bne.n	8008d38 <_free_r+0x70>
 8008d20:	6824      	ldr	r4, [r4, #0]
 8008d22:	4421      	add	r1, r4
 8008d24:	1854      	adds	r4, r2, r1
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	6011      	str	r1, [r2, #0]
 8008d2a:	d1e0      	bne.n	8008cee <_free_r+0x26>
 8008d2c:	681c      	ldr	r4, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	6053      	str	r3, [r2, #4]
 8008d32:	440c      	add	r4, r1
 8008d34:	6014      	str	r4, [r2, #0]
 8008d36:	e7da      	b.n	8008cee <_free_r+0x26>
 8008d38:	d902      	bls.n	8008d40 <_free_r+0x78>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	e7d6      	b.n	8008cee <_free_r+0x26>
 8008d40:	6825      	ldr	r5, [r4, #0]
 8008d42:	1961      	adds	r1, r4, r5
 8008d44:	428b      	cmp	r3, r1
 8008d46:	bf04      	itt	eq
 8008d48:	6819      	ldreq	r1, [r3, #0]
 8008d4a:	685b      	ldreq	r3, [r3, #4]
 8008d4c:	6063      	str	r3, [r4, #4]
 8008d4e:	bf04      	itt	eq
 8008d50:	1949      	addeq	r1, r1, r5
 8008d52:	6021      	streq	r1, [r4, #0]
 8008d54:	6054      	str	r4, [r2, #4]
 8008d56:	e7ca      	b.n	8008cee <_free_r+0x26>
 8008d58:	b003      	add	sp, #12
 8008d5a:	bd30      	pop	{r4, r5, pc}
 8008d5c:	20000a20 	.word	0x20000a20

08008d60 <sbrk_aligned>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4e0e      	ldr	r6, [pc, #56]	; (8008d9c <sbrk_aligned+0x3c>)
 8008d64:	460c      	mov	r4, r1
 8008d66:	6831      	ldr	r1, [r6, #0]
 8008d68:	4605      	mov	r5, r0
 8008d6a:	b911      	cbnz	r1, 8008d72 <sbrk_aligned+0x12>
 8008d6c:	f000 fcaa 	bl	80096c4 <_sbrk_r>
 8008d70:	6030      	str	r0, [r6, #0]
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	f000 fca5 	bl	80096c4 <_sbrk_r>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	d00a      	beq.n	8008d94 <sbrk_aligned+0x34>
 8008d7e:	1cc4      	adds	r4, r0, #3
 8008d80:	f024 0403 	bic.w	r4, r4, #3
 8008d84:	42a0      	cmp	r0, r4
 8008d86:	d007      	beq.n	8008d98 <sbrk_aligned+0x38>
 8008d88:	1a21      	subs	r1, r4, r0
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f000 fc9a 	bl	80096c4 <_sbrk_r>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d101      	bne.n	8008d98 <sbrk_aligned+0x38>
 8008d94:	f04f 34ff 	mov.w	r4, #4294967295
 8008d98:	4620      	mov	r0, r4
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	20000a24 	.word	0x20000a24

08008da0 <_malloc_r>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	1ccd      	adds	r5, r1, #3
 8008da6:	f025 0503 	bic.w	r5, r5, #3
 8008daa:	3508      	adds	r5, #8
 8008dac:	2d0c      	cmp	r5, #12
 8008dae:	bf38      	it	cc
 8008db0:	250c      	movcc	r5, #12
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	4607      	mov	r7, r0
 8008db6:	db01      	blt.n	8008dbc <_malloc_r+0x1c>
 8008db8:	42a9      	cmp	r1, r5
 8008dba:	d905      	bls.n	8008dc8 <_malloc_r+0x28>
 8008dbc:	230c      	movs	r3, #12
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e9c <_malloc_r+0xfc>
 8008dcc:	f000 f868 	bl	8008ea0 <__malloc_lock>
 8008dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd4:	461c      	mov	r4, r3
 8008dd6:	bb5c      	cbnz	r4, 8008e30 <_malloc_r+0x90>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4638      	mov	r0, r7
 8008ddc:	f7ff ffc0 	bl	8008d60 <sbrk_aligned>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	4604      	mov	r4, r0
 8008de4:	d155      	bne.n	8008e92 <_malloc_r+0xf2>
 8008de6:	f8d8 4000 	ldr.w	r4, [r8]
 8008dea:	4626      	mov	r6, r4
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	d145      	bne.n	8008e7c <_malloc_r+0xdc>
 8008df0:	2c00      	cmp	r4, #0
 8008df2:	d048      	beq.n	8008e86 <_malloc_r+0xe6>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	4631      	mov	r1, r6
 8008df8:	4638      	mov	r0, r7
 8008dfa:	eb04 0903 	add.w	r9, r4, r3
 8008dfe:	f000 fc61 	bl	80096c4 <_sbrk_r>
 8008e02:	4581      	cmp	r9, r0
 8008e04:	d13f      	bne.n	8008e86 <_malloc_r+0xe6>
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	1a6d      	subs	r5, r5, r1
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ffa7 	bl	8008d60 <sbrk_aligned>
 8008e12:	3001      	adds	r0, #1
 8008e14:	d037      	beq.n	8008e86 <_malloc_r+0xe6>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	442b      	add	r3, r5
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d038      	beq.n	8008e96 <_malloc_r+0xf6>
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	42a2      	cmp	r2, r4
 8008e28:	d12b      	bne.n	8008e82 <_malloc_r+0xe2>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	e00f      	b.n	8008e50 <_malloc_r+0xb0>
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	1b52      	subs	r2, r2, r5
 8008e34:	d41f      	bmi.n	8008e76 <_malloc_r+0xd6>
 8008e36:	2a0b      	cmp	r2, #11
 8008e38:	d917      	bls.n	8008e6a <_malloc_r+0xca>
 8008e3a:	1961      	adds	r1, r4, r5
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	6025      	str	r5, [r4, #0]
 8008e40:	bf18      	it	ne
 8008e42:	6059      	strne	r1, [r3, #4]
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	bf08      	it	eq
 8008e48:	f8c8 1000 	streq.w	r1, [r8]
 8008e4c:	5162      	str	r2, [r4, r5]
 8008e4e:	604b      	str	r3, [r1, #4]
 8008e50:	4638      	mov	r0, r7
 8008e52:	f104 060b 	add.w	r6, r4, #11
 8008e56:	f000 f829 	bl	8008eac <__malloc_unlock>
 8008e5a:	f026 0607 	bic.w	r6, r6, #7
 8008e5e:	1d23      	adds	r3, r4, #4
 8008e60:	1af2      	subs	r2, r6, r3
 8008e62:	d0ae      	beq.n	8008dc2 <_malloc_r+0x22>
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	50a3      	str	r3, [r4, r2]
 8008e68:	e7ab      	b.n	8008dc2 <_malloc_r+0x22>
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	6862      	ldr	r2, [r4, #4]
 8008e6e:	d1dd      	bne.n	8008e2c <_malloc_r+0x8c>
 8008e70:	f8c8 2000 	str.w	r2, [r8]
 8008e74:	e7ec      	b.n	8008e50 <_malloc_r+0xb0>
 8008e76:	4623      	mov	r3, r4
 8008e78:	6864      	ldr	r4, [r4, #4]
 8008e7a:	e7ac      	b.n	8008dd6 <_malloc_r+0x36>
 8008e7c:	4634      	mov	r4, r6
 8008e7e:	6876      	ldr	r6, [r6, #4]
 8008e80:	e7b4      	b.n	8008dec <_malloc_r+0x4c>
 8008e82:	4613      	mov	r3, r2
 8008e84:	e7cc      	b.n	8008e20 <_malloc_r+0x80>
 8008e86:	230c      	movs	r3, #12
 8008e88:	603b      	str	r3, [r7, #0]
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f000 f80e 	bl	8008eac <__malloc_unlock>
 8008e90:	e797      	b.n	8008dc2 <_malloc_r+0x22>
 8008e92:	6025      	str	r5, [r4, #0]
 8008e94:	e7dc      	b.n	8008e50 <_malloc_r+0xb0>
 8008e96:	605b      	str	r3, [r3, #4]
 8008e98:	deff      	udf	#255	; 0xff
 8008e9a:	bf00      	nop
 8008e9c:	20000a20 	.word	0x20000a20

08008ea0 <__malloc_lock>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <__malloc_lock+0x8>)
 8008ea2:	f7ff bf01 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20000a1c 	.word	0x20000a1c

08008eac <__malloc_unlock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__malloc_unlock+0x8>)
 8008eae:	f7ff befc 	b.w	8008caa <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20000a1c 	.word	0x20000a1c

08008eb8 <__sfputc_r>:
 8008eb8:	6893      	ldr	r3, [r2, #8]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	b410      	push	{r4}
 8008ec0:	6093      	str	r3, [r2, #8]
 8008ec2:	da08      	bge.n	8008ed6 <__sfputc_r+0x1e>
 8008ec4:	6994      	ldr	r4, [r2, #24]
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	db01      	blt.n	8008ece <__sfputc_r+0x16>
 8008eca:	290a      	cmp	r1, #10
 8008ecc:	d103      	bne.n	8008ed6 <__sfputc_r+0x1e>
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	f7ff bdcc 	b.w	8008a6e <__swbuf_r>
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	1c58      	adds	r0, r3, #1
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	7019      	strb	r1, [r3, #0]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <__sfputs_r>:
 8008ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	18d5      	adds	r5, r2, r3
 8008ef0:	42ac      	cmp	r4, r5
 8008ef2:	d101      	bne.n	8008ef8 <__sfputs_r+0x12>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e007      	b.n	8008f08 <__sfputs_r+0x22>
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	463a      	mov	r2, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ffda 	bl	8008eb8 <__sfputc_r>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d1f3      	bne.n	8008ef0 <__sfputs_r+0xa>
 8008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f0c <_vfiprintf_r>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460d      	mov	r5, r1
 8008f12:	b09d      	sub	sp, #116	; 0x74
 8008f14:	4614      	mov	r4, r2
 8008f16:	4698      	mov	r8, r3
 8008f18:	4606      	mov	r6, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <_vfiprintf_r+0x18>
 8008f1c:	6a03      	ldr	r3, [r0, #32]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <_vfiprintf_r+0x18>
 8008f20:	f7ff fcbe 	bl	80088a0 <__sinit>
 8008f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_vfiprintf_r+0x2a>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_vfiprintf_r+0x2a>
 8008f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f32:	f7ff feb9 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d501      	bpl.n	8008f40 <_vfiprintf_r+0x34>
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	b99b      	cbnz	r3, 8008f68 <_vfiprintf_r+0x5c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff fdd0 	bl	8008ae8 <__swsetup_r>
 8008f48:	b170      	cbz	r0, 8008f68 <_vfiprintf_r+0x5c>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07dc      	lsls	r4, r3, #31
 8008f4e:	d504      	bpl.n	8008f5a <_vfiprintf_r+0x4e>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	0598      	lsls	r0, r3, #22
 8008f5e:	d4f7      	bmi.n	8008f50 <_vfiprintf_r+0x44>
 8008f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f62:	f7ff fea2 	bl	8008caa <__retarget_lock_release_recursive>
 8008f66:	e7f3      	b.n	8008f50 <_vfiprintf_r+0x44>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f76:	2330      	movs	r3, #48	; 0x30
 8008f78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800912c <_vfiprintf_r+0x220>
 8008f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f80:	f04f 0901 	mov.w	r9, #1
 8008f84:	4623      	mov	r3, r4
 8008f86:	469a      	mov	sl, r3
 8008f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8c:	b10a      	cbz	r2, 8008f92 <_vfiprintf_r+0x86>
 8008f8e:	2a25      	cmp	r2, #37	; 0x25
 8008f90:	d1f9      	bne.n	8008f86 <_vfiprintf_r+0x7a>
 8008f92:	ebba 0b04 	subs.w	fp, sl, r4
 8008f96:	d00b      	beq.n	8008fb0 <_vfiprintf_r+0xa4>
 8008f98:	465b      	mov	r3, fp
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffa1 	bl	8008ee6 <__sfputs_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f000 80a9 	beq.w	80090fc <_vfiprintf_r+0x1f0>
 8008faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fac:	445a      	add	r2, fp
 8008fae:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80a1 	beq.w	80090fc <_vfiprintf_r+0x1f0>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc4:	f10a 0a01 	add.w	sl, sl, #1
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	9307      	str	r3, [sp, #28]
 8008fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd2:	4654      	mov	r4, sl
 8008fd4:	2205      	movs	r2, #5
 8008fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fda:	4854      	ldr	r0, [pc, #336]	; (800912c <_vfiprintf_r+0x220>)
 8008fdc:	f7f7 f8f8 	bl	80001d0 <memchr>
 8008fe0:	9a04      	ldr	r2, [sp, #16]
 8008fe2:	b9d8      	cbnz	r0, 800901c <_vfiprintf_r+0x110>
 8008fe4:	06d1      	lsls	r1, r2, #27
 8008fe6:	bf44      	itt	mi
 8008fe8:	2320      	movmi	r3, #32
 8008fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fee:	0713      	lsls	r3, r2, #28
 8008ff0:	bf44      	itt	mi
 8008ff2:	232b      	movmi	r3, #43	; 0x2b
 8008ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffe:	d015      	beq.n	800902c <_vfiprintf_r+0x120>
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	4654      	mov	r4, sl
 8009004:	2000      	movs	r0, #0
 8009006:	f04f 0c0a 	mov.w	ip, #10
 800900a:	4621      	mov	r1, r4
 800900c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009010:	3b30      	subs	r3, #48	; 0x30
 8009012:	2b09      	cmp	r3, #9
 8009014:	d94d      	bls.n	80090b2 <_vfiprintf_r+0x1a6>
 8009016:	b1b0      	cbz	r0, 8009046 <_vfiprintf_r+0x13a>
 8009018:	9207      	str	r2, [sp, #28]
 800901a:	e014      	b.n	8009046 <_vfiprintf_r+0x13a>
 800901c:	eba0 0308 	sub.w	r3, r0, r8
 8009020:	fa09 f303 	lsl.w	r3, r9, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	46a2      	mov	sl, r4
 800902a:	e7d2      	b.n	8008fd2 <_vfiprintf_r+0xc6>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	1d19      	adds	r1, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	9103      	str	r1, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfbb      	ittet	lt
 8009038:	425b      	neglt	r3, r3
 800903a:	f042 0202 	orrlt.w	r2, r2, #2
 800903e:	9307      	strge	r3, [sp, #28]
 8009040:	9307      	strlt	r3, [sp, #28]
 8009042:	bfb8      	it	lt
 8009044:	9204      	strlt	r2, [sp, #16]
 8009046:	7823      	ldrb	r3, [r4, #0]
 8009048:	2b2e      	cmp	r3, #46	; 0x2e
 800904a:	d10c      	bne.n	8009066 <_vfiprintf_r+0x15a>
 800904c:	7863      	ldrb	r3, [r4, #1]
 800904e:	2b2a      	cmp	r3, #42	; 0x2a
 8009050:	d134      	bne.n	80090bc <_vfiprintf_r+0x1b0>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	1d1a      	adds	r2, r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	9203      	str	r2, [sp, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfb8      	it	lt
 800905e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009062:	3402      	adds	r4, #2
 8009064:	9305      	str	r3, [sp, #20]
 8009066:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800913c <_vfiprintf_r+0x230>
 800906a:	7821      	ldrb	r1, [r4, #0]
 800906c:	2203      	movs	r2, #3
 800906e:	4650      	mov	r0, sl
 8009070:	f7f7 f8ae 	bl	80001d0 <memchr>
 8009074:	b138      	cbz	r0, 8009086 <_vfiprintf_r+0x17a>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	eba0 000a 	sub.w	r0, r0, sl
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	4082      	lsls	r2, r0
 8009080:	4313      	orrs	r3, r2
 8009082:	3401      	adds	r4, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908a:	4829      	ldr	r0, [pc, #164]	; (8009130 <_vfiprintf_r+0x224>)
 800908c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009090:	2206      	movs	r2, #6
 8009092:	f7f7 f89d 	bl	80001d0 <memchr>
 8009096:	2800      	cmp	r0, #0
 8009098:	d03f      	beq.n	800911a <_vfiprintf_r+0x20e>
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <_vfiprintf_r+0x228>)
 800909c:	bb1b      	cbnz	r3, 80090e6 <_vfiprintf_r+0x1da>
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	f023 0307 	bic.w	r3, r3, #7
 80090a6:	3308      	adds	r3, #8
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ac:	443b      	add	r3, r7
 80090ae:	9309      	str	r3, [sp, #36]	; 0x24
 80090b0:	e768      	b.n	8008f84 <_vfiprintf_r+0x78>
 80090b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b6:	460c      	mov	r4, r1
 80090b8:	2001      	movs	r0, #1
 80090ba:	e7a6      	b.n	800900a <_vfiprintf_r+0xfe>
 80090bc:	2300      	movs	r3, #0
 80090be:	3401      	adds	r4, #1
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0c0a 	mov.w	ip, #10
 80090c8:	4620      	mov	r0, r4
 80090ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ce:	3a30      	subs	r2, #48	; 0x30
 80090d0:	2a09      	cmp	r2, #9
 80090d2:	d903      	bls.n	80090dc <_vfiprintf_r+0x1d0>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0c6      	beq.n	8009066 <_vfiprintf_r+0x15a>
 80090d8:	9105      	str	r1, [sp, #20]
 80090da:	e7c4      	b.n	8009066 <_vfiprintf_r+0x15a>
 80090dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e0:	4604      	mov	r4, r0
 80090e2:	2301      	movs	r3, #1
 80090e4:	e7f0      	b.n	80090c8 <_vfiprintf_r+0x1bc>
 80090e6:	ab03      	add	r3, sp, #12
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	462a      	mov	r2, r5
 80090ec:	4b12      	ldr	r3, [pc, #72]	; (8009138 <_vfiprintf_r+0x22c>)
 80090ee:	a904      	add	r1, sp, #16
 80090f0:	4630      	mov	r0, r6
 80090f2:	f3af 8000 	nop.w
 80090f6:	4607      	mov	r7, r0
 80090f8:	1c78      	adds	r0, r7, #1
 80090fa:	d1d6      	bne.n	80090aa <_vfiprintf_r+0x19e>
 80090fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fe:	07d9      	lsls	r1, r3, #31
 8009100:	d405      	bmi.n	800910e <_vfiprintf_r+0x202>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	059a      	lsls	r2, r3, #22
 8009106:	d402      	bmi.n	800910e <_vfiprintf_r+0x202>
 8009108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800910a:	f7ff fdce 	bl	8008caa <__retarget_lock_release_recursive>
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	065b      	lsls	r3, r3, #25
 8009112:	f53f af1d 	bmi.w	8008f50 <_vfiprintf_r+0x44>
 8009116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009118:	e71c      	b.n	8008f54 <_vfiprintf_r+0x48>
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <_vfiprintf_r+0x22c>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	4630      	mov	r0, r6
 8009126:	f000 f879 	bl	800921c <_printf_i>
 800912a:	e7e4      	b.n	80090f6 <_vfiprintf_r+0x1ea>
 800912c:	0800a150 	.word	0x0800a150
 8009130:	0800a15a 	.word	0x0800a15a
 8009134:	00000000 	.word	0x00000000
 8009138:	08008ee7 	.word	0x08008ee7
 800913c:	0800a156 	.word	0x0800a156

08009140 <_printf_common>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	4616      	mov	r6, r2
 8009146:	4699      	mov	r9, r3
 8009148:	688a      	ldr	r2, [r1, #8]
 800914a:	690b      	ldr	r3, [r1, #16]
 800914c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009150:	4293      	cmp	r3, r2
 8009152:	bfb8      	it	lt
 8009154:	4613      	movlt	r3, r2
 8009156:	6033      	str	r3, [r6, #0]
 8009158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800915c:	4607      	mov	r7, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b10a      	cbz	r2, 8009166 <_printf_common+0x26>
 8009162:	3301      	adds	r3, #1
 8009164:	6033      	str	r3, [r6, #0]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	0699      	lsls	r1, r3, #26
 800916a:	bf42      	ittt	mi
 800916c:	6833      	ldrmi	r3, [r6, #0]
 800916e:	3302      	addmi	r3, #2
 8009170:	6033      	strmi	r3, [r6, #0]
 8009172:	6825      	ldr	r5, [r4, #0]
 8009174:	f015 0506 	ands.w	r5, r5, #6
 8009178:	d106      	bne.n	8009188 <_printf_common+0x48>
 800917a:	f104 0a19 	add.w	sl, r4, #25
 800917e:	68e3      	ldr	r3, [r4, #12]
 8009180:	6832      	ldr	r2, [r6, #0]
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	42ab      	cmp	r3, r5
 8009186:	dc26      	bgt.n	80091d6 <_printf_common+0x96>
 8009188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800918c:	1e13      	subs	r3, r2, #0
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	bf18      	it	ne
 8009192:	2301      	movne	r3, #1
 8009194:	0692      	lsls	r2, r2, #26
 8009196:	d42b      	bmi.n	80091f0 <_printf_common+0xb0>
 8009198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800919c:	4649      	mov	r1, r9
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	3001      	adds	r0, #1
 80091a4:	d01e      	beq.n	80091e4 <_printf_common+0xa4>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	bf02      	ittt	eq
 80091b2:	68e5      	ldreq	r5, [r4, #12]
 80091b4:	6833      	ldreq	r3, [r6, #0]
 80091b6:	1aed      	subeq	r5, r5, r3
 80091b8:	68a3      	ldr	r3, [r4, #8]
 80091ba:	bf0c      	ite	eq
 80091bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c0:	2500      	movne	r5, #0
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bfc4      	itt	gt
 80091c6:	1a9b      	subgt	r3, r3, r2
 80091c8:	18ed      	addgt	r5, r5, r3
 80091ca:	2600      	movs	r6, #0
 80091cc:	341a      	adds	r4, #26
 80091ce:	42b5      	cmp	r5, r6
 80091d0:	d11a      	bne.n	8009208 <_printf_common+0xc8>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e008      	b.n	80091e8 <_printf_common+0xa8>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4652      	mov	r2, sl
 80091da:	4649      	mov	r1, r9
 80091dc:	4638      	mov	r0, r7
 80091de:	47c0      	blx	r8
 80091e0:	3001      	adds	r0, #1
 80091e2:	d103      	bne.n	80091ec <_printf_common+0xac>
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ec:	3501      	adds	r5, #1
 80091ee:	e7c6      	b.n	800917e <_printf_common+0x3e>
 80091f0:	18e1      	adds	r1, r4, r3
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	2030      	movs	r0, #48	; 0x30
 80091f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091fa:	4422      	add	r2, r4
 80091fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009204:	3302      	adds	r3, #2
 8009206:	e7c7      	b.n	8009198 <_printf_common+0x58>
 8009208:	2301      	movs	r3, #1
 800920a:	4622      	mov	r2, r4
 800920c:	4649      	mov	r1, r9
 800920e:	4638      	mov	r0, r7
 8009210:	47c0      	blx	r8
 8009212:	3001      	adds	r0, #1
 8009214:	d0e6      	beq.n	80091e4 <_printf_common+0xa4>
 8009216:	3601      	adds	r6, #1
 8009218:	e7d9      	b.n	80091ce <_printf_common+0x8e>
	...

0800921c <_printf_i>:
 800921c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	7e0f      	ldrb	r7, [r1, #24]
 8009222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009224:	2f78      	cmp	r7, #120	; 0x78
 8009226:	4691      	mov	r9, r2
 8009228:	4680      	mov	r8, r0
 800922a:	460c      	mov	r4, r1
 800922c:	469a      	mov	sl, r3
 800922e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009232:	d807      	bhi.n	8009244 <_printf_i+0x28>
 8009234:	2f62      	cmp	r7, #98	; 0x62
 8009236:	d80a      	bhi.n	800924e <_printf_i+0x32>
 8009238:	2f00      	cmp	r7, #0
 800923a:	f000 80d4 	beq.w	80093e6 <_printf_i+0x1ca>
 800923e:	2f58      	cmp	r7, #88	; 0x58
 8009240:	f000 80c0 	beq.w	80093c4 <_printf_i+0x1a8>
 8009244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800924c:	e03a      	b.n	80092c4 <_printf_i+0xa8>
 800924e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009252:	2b15      	cmp	r3, #21
 8009254:	d8f6      	bhi.n	8009244 <_printf_i+0x28>
 8009256:	a101      	add	r1, pc, #4	; (adr r1, 800925c <_printf_i+0x40>)
 8009258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800925c:	080092b5 	.word	0x080092b5
 8009260:	080092c9 	.word	0x080092c9
 8009264:	08009245 	.word	0x08009245
 8009268:	08009245 	.word	0x08009245
 800926c:	08009245 	.word	0x08009245
 8009270:	08009245 	.word	0x08009245
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009245 	.word	0x08009245
 800927c:	08009245 	.word	0x08009245
 8009280:	08009245 	.word	0x08009245
 8009284:	08009245 	.word	0x08009245
 8009288:	080093cd 	.word	0x080093cd
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009387 	.word	0x08009387
 8009294:	08009245 	.word	0x08009245
 8009298:	08009245 	.word	0x08009245
 800929c:	080093ef 	.word	0x080093ef
 80092a0:	08009245 	.word	0x08009245
 80092a4:	080092f5 	.word	0x080092f5
 80092a8:	08009245 	.word	0x08009245
 80092ac:	08009245 	.word	0x08009245
 80092b0:	0800938f 	.word	0x0800938f
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	602a      	str	r2, [r5, #0]
 80092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c4:	2301      	movs	r3, #1
 80092c6:	e09f      	b.n	8009408 <_printf_i+0x1ec>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	0607      	lsls	r7, r0, #24
 80092ce:	f103 0104 	add.w	r1, r3, #4
 80092d2:	6029      	str	r1, [r5, #0]
 80092d4:	d501      	bpl.n	80092da <_printf_i+0xbe>
 80092d6:	681e      	ldr	r6, [r3, #0]
 80092d8:	e003      	b.n	80092e2 <_printf_i+0xc6>
 80092da:	0646      	lsls	r6, r0, #25
 80092dc:	d5fb      	bpl.n	80092d6 <_printf_i+0xba>
 80092de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	da03      	bge.n	80092ee <_printf_i+0xd2>
 80092e6:	232d      	movs	r3, #45	; 0x2d
 80092e8:	4276      	negs	r6, r6
 80092ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ee:	485a      	ldr	r0, [pc, #360]	; (8009458 <_printf_i+0x23c>)
 80092f0:	230a      	movs	r3, #10
 80092f2:	e012      	b.n	800931a <_printf_i+0xfe>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	1d19      	adds	r1, r3, #4
 80092fa:	6029      	str	r1, [r5, #0]
 80092fc:	0605      	lsls	r5, r0, #24
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0xe8>
 8009300:	681e      	ldr	r6, [r3, #0]
 8009302:	e002      	b.n	800930a <_printf_i+0xee>
 8009304:	0641      	lsls	r1, r0, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0xe4>
 8009308:	881e      	ldrh	r6, [r3, #0]
 800930a:	4853      	ldr	r0, [pc, #332]	; (8009458 <_printf_i+0x23c>)
 800930c:	2f6f      	cmp	r7, #111	; 0x6f
 800930e:	bf0c      	ite	eq
 8009310:	2308      	moveq	r3, #8
 8009312:	230a      	movne	r3, #10
 8009314:	2100      	movs	r1, #0
 8009316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800931a:	6865      	ldr	r5, [r4, #4]
 800931c:	60a5      	str	r5, [r4, #8]
 800931e:	2d00      	cmp	r5, #0
 8009320:	bfa2      	ittt	ge
 8009322:	6821      	ldrge	r1, [r4, #0]
 8009324:	f021 0104 	bicge.w	r1, r1, #4
 8009328:	6021      	strge	r1, [r4, #0]
 800932a:	b90e      	cbnz	r6, 8009330 <_printf_i+0x114>
 800932c:	2d00      	cmp	r5, #0
 800932e:	d04b      	beq.n	80093c8 <_printf_i+0x1ac>
 8009330:	4615      	mov	r5, r2
 8009332:	fbb6 f1f3 	udiv	r1, r6, r3
 8009336:	fb03 6711 	mls	r7, r3, r1, r6
 800933a:	5dc7      	ldrb	r7, [r0, r7]
 800933c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009340:	4637      	mov	r7, r6
 8009342:	42bb      	cmp	r3, r7
 8009344:	460e      	mov	r6, r1
 8009346:	d9f4      	bls.n	8009332 <_printf_i+0x116>
 8009348:	2b08      	cmp	r3, #8
 800934a:	d10b      	bne.n	8009364 <_printf_i+0x148>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	07de      	lsls	r6, r3, #31
 8009350:	d508      	bpl.n	8009364 <_printf_i+0x148>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4299      	cmp	r1, r3
 8009358:	bfde      	ittt	le
 800935a:	2330      	movle	r3, #48	; 0x30
 800935c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009364:	1b52      	subs	r2, r2, r5
 8009366:	6122      	str	r2, [r4, #16]
 8009368:	f8cd a000 	str.w	sl, [sp]
 800936c:	464b      	mov	r3, r9
 800936e:	aa03      	add	r2, sp, #12
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff fee4 	bl	8009140 <_printf_common>
 8009378:	3001      	adds	r0, #1
 800937a:	d14a      	bne.n	8009412 <_printf_i+0x1f6>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	b004      	add	sp, #16
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	4833      	ldr	r0, [pc, #204]	; (800945c <_printf_i+0x240>)
 8009390:	2778      	movs	r7, #120	; 0x78
 8009392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	061f      	lsls	r7, r3, #24
 800939c:	f851 6b04 	ldr.w	r6, [r1], #4
 80093a0:	d402      	bmi.n	80093a8 <_printf_i+0x18c>
 80093a2:	065f      	lsls	r7, r3, #25
 80093a4:	bf48      	it	mi
 80093a6:	b2b6      	uxthmi	r6, r6
 80093a8:	07df      	lsls	r7, r3, #31
 80093aa:	bf48      	it	mi
 80093ac:	f043 0320 	orrmi.w	r3, r3, #32
 80093b0:	6029      	str	r1, [r5, #0]
 80093b2:	bf48      	it	mi
 80093b4:	6023      	strmi	r3, [r4, #0]
 80093b6:	b91e      	cbnz	r6, 80093c0 <_printf_i+0x1a4>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	2310      	movs	r3, #16
 80093c2:	e7a7      	b.n	8009314 <_printf_i+0xf8>
 80093c4:	4824      	ldr	r0, [pc, #144]	; (8009458 <_printf_i+0x23c>)
 80093c6:	e7e4      	b.n	8009392 <_printf_i+0x176>
 80093c8:	4615      	mov	r5, r2
 80093ca:	e7bd      	b.n	8009348 <_printf_i+0x12c>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6826      	ldr	r6, [r4, #0]
 80093d0:	6961      	ldr	r1, [r4, #20]
 80093d2:	1d18      	adds	r0, r3, #4
 80093d4:	6028      	str	r0, [r5, #0]
 80093d6:	0635      	lsls	r5, r6, #24
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0x1c4>
 80093dc:	6019      	str	r1, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0x1ca>
 80093e0:	0670      	lsls	r0, r6, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0x1c0>
 80093e4:	8019      	strh	r1, [r3, #0]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	4615      	mov	r5, r2
 80093ec:	e7bc      	b.n	8009368 <_printf_i+0x14c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	602a      	str	r2, [r5, #0]
 80093f4:	681d      	ldr	r5, [r3, #0]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f6 fee8 	bl	80001d0 <memchr>
 8009400:	b108      	cbz	r0, 8009406 <_printf_i+0x1ea>
 8009402:	1b40      	subs	r0, r0, r5
 8009404:	6060      	str	r0, [r4, #4]
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	2300      	movs	r3, #0
 800940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009410:	e7aa      	b.n	8009368 <_printf_i+0x14c>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	462a      	mov	r2, r5
 8009416:	4649      	mov	r1, r9
 8009418:	4640      	mov	r0, r8
 800941a:	47d0      	blx	sl
 800941c:	3001      	adds	r0, #1
 800941e:	d0ad      	beq.n	800937c <_printf_i+0x160>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	079b      	lsls	r3, r3, #30
 8009424:	d413      	bmi.n	800944e <_printf_i+0x232>
 8009426:	68e0      	ldr	r0, [r4, #12]
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	4298      	cmp	r0, r3
 800942c:	bfb8      	it	lt
 800942e:	4618      	movlt	r0, r3
 8009430:	e7a6      	b.n	8009380 <_printf_i+0x164>
 8009432:	2301      	movs	r3, #1
 8009434:	4632      	mov	r2, r6
 8009436:	4649      	mov	r1, r9
 8009438:	4640      	mov	r0, r8
 800943a:	47d0      	blx	sl
 800943c:	3001      	adds	r0, #1
 800943e:	d09d      	beq.n	800937c <_printf_i+0x160>
 8009440:	3501      	adds	r5, #1
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	9903      	ldr	r1, [sp, #12]
 8009446:	1a5b      	subs	r3, r3, r1
 8009448:	42ab      	cmp	r3, r5
 800944a:	dcf2      	bgt.n	8009432 <_printf_i+0x216>
 800944c:	e7eb      	b.n	8009426 <_printf_i+0x20a>
 800944e:	2500      	movs	r5, #0
 8009450:	f104 0619 	add.w	r6, r4, #25
 8009454:	e7f5      	b.n	8009442 <_printf_i+0x226>
 8009456:	bf00      	nop
 8009458:	0800a161 	.word	0x0800a161
 800945c:	0800a172 	.word	0x0800a172

08009460 <__sflush_r>:
 8009460:	898a      	ldrh	r2, [r1, #12]
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	4605      	mov	r5, r0
 8009468:	0710      	lsls	r0, r2, #28
 800946a:	460c      	mov	r4, r1
 800946c:	d458      	bmi.n	8009520 <__sflush_r+0xc0>
 800946e:	684b      	ldr	r3, [r1, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc05      	bgt.n	8009480 <__sflush_r+0x20>
 8009474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc02      	bgt.n	8009480 <__sflush_r+0x20>
 800947a:	2000      	movs	r0, #0
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009482:	2e00      	cmp	r6, #0
 8009484:	d0f9      	beq.n	800947a <__sflush_r+0x1a>
 8009486:	2300      	movs	r3, #0
 8009488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800948c:	682f      	ldr	r7, [r5, #0]
 800948e:	6a21      	ldr	r1, [r4, #32]
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	d032      	beq.n	80094fa <__sflush_r+0x9a>
 8009494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	075a      	lsls	r2, r3, #29
 800949a:	d505      	bpl.n	80094a8 <__sflush_r+0x48>
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	1ac0      	subs	r0, r0, r3
 80094a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a2:	b10b      	cbz	r3, 80094a8 <__sflush_r+0x48>
 80094a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	4602      	mov	r2, r0
 80094ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b0      	blx	r6
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	d106      	bne.n	80094c8 <__sflush_r+0x68>
 80094ba:	6829      	ldr	r1, [r5, #0]
 80094bc:	291d      	cmp	r1, #29
 80094be:	d82b      	bhi.n	8009518 <__sflush_r+0xb8>
 80094c0:	4a29      	ldr	r2, [pc, #164]	; (8009568 <__sflush_r+0x108>)
 80094c2:	410a      	asrs	r2, r1
 80094c4:	07d6      	lsls	r6, r2, #31
 80094c6:	d427      	bmi.n	8009518 <__sflush_r+0xb8>
 80094c8:	2200      	movs	r2, #0
 80094ca:	6062      	str	r2, [r4, #4]
 80094cc:	04d9      	lsls	r1, r3, #19
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	d504      	bpl.n	80094de <__sflush_r+0x7e>
 80094d4:	1c42      	adds	r2, r0, #1
 80094d6:	d101      	bne.n	80094dc <__sflush_r+0x7c>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b903      	cbnz	r3, 80094de <__sflush_r+0x7e>
 80094dc:	6560      	str	r0, [r4, #84]	; 0x54
 80094de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e0:	602f      	str	r7, [r5, #0]
 80094e2:	2900      	cmp	r1, #0
 80094e4:	d0c9      	beq.n	800947a <__sflush_r+0x1a>
 80094e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d002      	beq.n	80094f4 <__sflush_r+0x94>
 80094ee:	4628      	mov	r0, r5
 80094f0:	f7ff fbea 	bl	8008cc8 <_free_r>
 80094f4:	2000      	movs	r0, #0
 80094f6:	6360      	str	r0, [r4, #52]	; 0x34
 80094f8:	e7c0      	b.n	800947c <__sflush_r+0x1c>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b0      	blx	r6
 8009500:	1c41      	adds	r1, r0, #1
 8009502:	d1c8      	bne.n	8009496 <__sflush_r+0x36>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c5      	beq.n	8009496 <__sflush_r+0x36>
 800950a:	2b1d      	cmp	r3, #29
 800950c:	d001      	beq.n	8009512 <__sflush_r+0xb2>
 800950e:	2b16      	cmp	r3, #22
 8009510:	d101      	bne.n	8009516 <__sflush_r+0xb6>
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	e7b1      	b.n	800947a <__sflush_r+0x1a>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7ad      	b.n	800947c <__sflush_r+0x1c>
 8009520:	690f      	ldr	r7, [r1, #16]
 8009522:	2f00      	cmp	r7, #0
 8009524:	d0a9      	beq.n	800947a <__sflush_r+0x1a>
 8009526:	0793      	lsls	r3, r2, #30
 8009528:	680e      	ldr	r6, [r1, #0]
 800952a:	bf08      	it	eq
 800952c:	694b      	ldreq	r3, [r1, #20]
 800952e:	600f      	str	r7, [r1, #0]
 8009530:	bf18      	it	ne
 8009532:	2300      	movne	r3, #0
 8009534:	eba6 0807 	sub.w	r8, r6, r7
 8009538:	608b      	str	r3, [r1, #8]
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	dd9c      	ble.n	800947a <__sflush_r+0x1a>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009544:	4643      	mov	r3, r8
 8009546:	463a      	mov	r2, r7
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	2800      	cmp	r0, #0
 800954e:	dc06      	bgt.n	800955e <__sflush_r+0xfe>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e78e      	b.n	800947c <__sflush_r+0x1c>
 800955e:	4407      	add	r7, r0
 8009560:	eba8 0800 	sub.w	r8, r8, r0
 8009564:	e7e9      	b.n	800953a <__sflush_r+0xda>
 8009566:	bf00      	nop
 8009568:	dfbffffe 	.word	0xdfbffffe

0800956c <_fflush_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	4605      	mov	r5, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b913      	cbnz	r3, 800957c <_fflush_r+0x10>
 8009576:	2500      	movs	r5, #0
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	b118      	cbz	r0, 8009586 <_fflush_r+0x1a>
 800957e:	6a03      	ldr	r3, [r0, #32]
 8009580:	b90b      	cbnz	r3, 8009586 <_fflush_r+0x1a>
 8009582:	f7ff f98d 	bl	80088a0 <__sinit>
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0f3      	beq.n	8009576 <_fflush_r+0xa>
 800958e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d404      	bmi.n	800959e <_fflush_r+0x32>
 8009594:	0599      	lsls	r1, r3, #22
 8009596:	d402      	bmi.n	800959e <_fflush_r+0x32>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f7ff fb85 	bl	8008ca8 <__retarget_lock_acquire_recursive>
 800959e:	4628      	mov	r0, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7ff ff5d 	bl	8009460 <__sflush_r>
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	07da      	lsls	r2, r3, #31
 80095aa:	4605      	mov	r5, r0
 80095ac:	d4e4      	bmi.n	8009578 <_fflush_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d4e1      	bmi.n	8009578 <_fflush_r+0xc>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f7ff fb78 	bl	8008caa <__retarget_lock_release_recursive>
 80095ba:	e7dd      	b.n	8009578 <_fflush_r+0xc>

080095bc <__swhatbuf_r>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c4:	2900      	cmp	r1, #0
 80095c6:	b096      	sub	sp, #88	; 0x58
 80095c8:	4615      	mov	r5, r2
 80095ca:	461e      	mov	r6, r3
 80095cc:	da0d      	bge.n	80095ea <__swhatbuf_r+0x2e>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	bf0c      	ite	eq
 80095da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095de:	2340      	movne	r3, #64	; 0x40
 80095e0:	2000      	movs	r0, #0
 80095e2:	6031      	str	r1, [r6, #0]
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	b016      	add	sp, #88	; 0x58
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
 80095ea:	466a      	mov	r2, sp
 80095ec:	f000 f848 	bl	8009680 <_fstat_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dbec      	blt.n	80095ce <__swhatbuf_r+0x12>
 80095f4:	9901      	ldr	r1, [sp, #4]
 80095f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095fe:	4259      	negs	r1, r3
 8009600:	4159      	adcs	r1, r3
 8009602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009606:	e7eb      	b.n	80095e0 <__swhatbuf_r+0x24>

08009608 <__smakebuf_r>:
 8009608:	898b      	ldrh	r3, [r1, #12]
 800960a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800960c:	079d      	lsls	r5, r3, #30
 800960e:	4606      	mov	r6, r0
 8009610:	460c      	mov	r4, r1
 8009612:	d507      	bpl.n	8009624 <__smakebuf_r+0x1c>
 8009614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	2301      	movs	r3, #1
 800961e:	6163      	str	r3, [r4, #20]
 8009620:	b002      	add	sp, #8
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	ab01      	add	r3, sp, #4
 8009626:	466a      	mov	r2, sp
 8009628:	f7ff ffc8 	bl	80095bc <__swhatbuf_r>
 800962c:	9900      	ldr	r1, [sp, #0]
 800962e:	4605      	mov	r5, r0
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff fbb5 	bl	8008da0 <_malloc_r>
 8009636:	b948      	cbnz	r0, 800964c <__smakebuf_r+0x44>
 8009638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963c:	059a      	lsls	r2, r3, #22
 800963e:	d4ef      	bmi.n	8009620 <__smakebuf_r+0x18>
 8009640:	f023 0303 	bic.w	r3, r3, #3
 8009644:	f043 0302 	orr.w	r3, r3, #2
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	e7e3      	b.n	8009614 <__smakebuf_r+0xc>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	6020      	str	r0, [r4, #0]
 8009650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	6163      	str	r3, [r4, #20]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	6120      	str	r0, [r4, #16]
 800965e:	b15b      	cbz	r3, 8009678 <__smakebuf_r+0x70>
 8009660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009664:	4630      	mov	r0, r6
 8009666:	f000 f81d 	bl	80096a4 <_isatty_r>
 800966a:	b128      	cbz	r0, 8009678 <__smakebuf_r+0x70>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	f043 0301 	orr.w	r3, r3, #1
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	431d      	orrs	r5, r3
 800967c:	81a5      	strh	r5, [r4, #12]
 800967e:	e7cf      	b.n	8009620 <__smakebuf_r+0x18>

08009680 <_fstat_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_fstat_r+0x20>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	f7f8 fef2 	bl	8002476 <_fstat>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d102      	bne.n	800969c <_fstat_r+0x1c>
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b103      	cbz	r3, 800969c <_fstat_r+0x1c>
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	20000a18 	.word	0x20000a18

080096a4 <_isatty_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_isatty_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f8 fef1 	bl	8002496 <_isatty>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_isatty_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_isatty_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	20000a18 	.word	0x20000a18

080096c4 <_sbrk_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	; (80096e0 <_sbrk_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f8 fefa 	bl	80024c8 <_sbrk>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_sbrk_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_sbrk_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	20000a18 	.word	0x20000a18

080096e4 <_init>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr

080096f0 <_fini>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr
